
FAC firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080078a4  080078a4  000088a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c98  08007c98  000091ec  2**0
                  CONTENTS
  4 .ARM          00000000  08007c98  08007c98  000091ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c98  08007c98  000091ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c98  08007c98  00008c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c9c  08007c9c  00008c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08007ca0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000195c  200001ec  08007e8c  000091ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b48  08007e8c  00009b48  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000091ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213c4  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005892  00000000  00000000  0002a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d31c  00000000  00000000  0002fe6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003d188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001721  00000000  00000000  0003e6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc14  00000000  00000000  0003fdf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005f16  00000000  00000000  0005ba0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00061923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004474  00000000  00000000  000619ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00065e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800788c 	.word	0x0800788c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800788c 	.word	0x0800788c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	@ 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	@ 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	@ 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <setSoftPWM>:
		r = 1;
	}
	return r;	// 1 = ok, 0 = no compatible port found
}

void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (i < duty) { //set pin
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
			softpwmbuffer[i] |= (uint32_t) pin;
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8000456:	0405      	lsls	r5, r0, #16
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8000458:	43ee      	mvns	r6, r5
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
 800045a:	2400      	movs	r4, #0
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 800045c:	43c7      	mvns	r7, r0
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 800045e:	6813      	ldr	r3, [r2, #0]
		if (i < duty) { //set pin
 8000460:	42a1      	cmp	r1, r4
 8000462:	d906      	bls.n	8000472 <setSoftPWM+0x1e>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8000464:	4033      	ands	r3, r6
			softpwmbuffer[i] |= (uint32_t) pin;
 8000466:	4303      	orrs	r3, r0
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
 8000468:	3401      	adds	r4, #1
			softpwmbuffer[i] |= (uint32_t) pin;
 800046a:	c208      	stmia	r2!, {r3}
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
 800046c:	2c64      	cmp	r4, #100	@ 0x64
 800046e:	d1f6      	bne.n	800045e <setSoftPWM+0xa>
		}
	}
}
 8000470:	bdf0      	pop	{r4, r5, r6, r7, pc}
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8000472:	403b      	ands	r3, r7
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8000474:	432b      	orrs	r3, r5
 8000476:	e7f7      	b.n	8000468 <setSoftPWM+0x14>

08000478 <setDMApwmDuty>:
uint8_t setDMApwmDuty(GPIO_TypeDef *port, uint16_t pin, uint16_t duty) {
 8000478:	0003      	movs	r3, r0
 800047a:	0008      	movs	r0, r1
 800047c:	0011      	movs	r1, r2
	if (port == GPIOA) {
 800047e:	2290      	movs	r2, #144	@ 0x90
uint8_t setDMApwmDuty(GPIO_TypeDef *port, uint16_t pin, uint16_t duty) {
 8000480:	b510      	push	{r4, lr}
	if (port == GPIOA) {
 8000482:	05d2      	lsls	r2, r2, #23
 8000484:	4293      	cmp	r3, r2
 8000486:	d105      	bne.n	8000494 <setDMApwmDuty+0x1c>
		setSoftPWM(pin, duty, (uint32_t*) &dataA);
 8000488:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <setDMApwmDuty+0x28>)
		setSoftPWM(pin, duty, (uint32_t*) &dataB);
 800048a:	f7ff ffe3 	bl	8000454 <setSoftPWM>
		r = 1;
 800048e:	2201      	movs	r2, #1
}
 8000490:	0010      	movs	r0, r2
 8000492:	bd10      	pop	{r4, pc}
	if (port == GPIOB) {
 8000494:	4c03      	ldr	r4, [pc, #12]	@ (80004a4 <setDMApwmDuty+0x2c>)
	uint8_t r = 0;
 8000496:	2200      	movs	r2, #0
	if (port == GPIOB) {
 8000498:	42a3      	cmp	r3, r4
 800049a:	d1f9      	bne.n	8000490 <setDMApwmDuty+0x18>
		setSoftPWM(pin, duty, (uint32_t*) &dataB);
 800049c:	4a02      	ldr	r2, [pc, #8]	@ (80004a8 <setDMApwmDuty+0x30>)
 800049e:	e7f4      	b.n	800048a <setDMApwmDuty+0x12>
 80004a0:	20000398 	.word	0x20000398
 80004a4:	48000400 	.word	0x48000400
 80004a8:	20000208 	.word	0x20000208

080004ac <zeroSoftPWM>:

void zeroSoftPWM(uint32_t softpwmbuffer[]) {
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
		softpwmbuffer[i] = 0;
 80004ac:	22c8      	movs	r2, #200	@ 0xc8
void zeroSoftPWM(uint32_t softpwmbuffer[]) {
 80004ae:	b510      	push	{r4, lr}
		softpwmbuffer[i] = 0;
 80004b0:	2100      	movs	r1, #0
 80004b2:	0052      	lsls	r2, r2, #1
 80004b4:	f006 f908 	bl	80066c8 <memset>
	}
}
 80004b8:	bd10      	pop	{r4, pc}
	...

080004bc <initDMApwm>:
void initDMApwm() {
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	htim1.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80004be:	23e0      	movs	r3, #224	@ 0xe0
	htim3.Init.Period = TIMER_FREQ - 1;
 80004c0:	4f17      	ldr	r7, [pc, #92]	@ (8000520 <initDMApwm+0x64>)
	htim1.Init.Period = TIMER_FREQ - 1;
 80004c2:	4c18      	ldr	r4, [pc, #96]	@ (8000524 <initDMApwm+0x68>)
 80004c4:	4a18      	ldr	r2, [pc, #96]	@ (8000528 <initDMApwm+0x6c>)
	htim1.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80004c6:	6821      	ldr	r1, [r4, #0]
	htim3.Init.Period = TIMER_FREQ - 1;
 80004c8:	60fa      	str	r2, [r7, #12]
	htim1.Init.Period = TIMER_FREQ - 1;
 80004ca:	60e2      	str	r2, [r4, #12]
	htim3.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80004cc:	683a      	ldr	r2, [r7, #0]
	htim1.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80004ce:	33ff      	adds	r3, #255	@ 0xff
 80004d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
	HAL_TIM_Base_Start(&htim1);
 80004d2:	0020      	movs	r0, r4
	htim3.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80004d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	HAL_TIM_Base_Start(&htim1);
 80004d6:	f004 f81d 	bl	8004514 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 80004da:	0038      	movs	r0, r7
 80004dc:	f004 f81a 	bl	8004514 <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_ch3_up, (uint32_t) &(dataA[0]), (uint32_t) &(GPIOA->BSRR), sizeof(dataA) / sizeof(dataA[0]));
 80004e0:	4e12      	ldr	r6, [pc, #72]	@ (800052c <initDMApwm+0x70>)
 80004e2:	2364      	movs	r3, #100	@ 0x64
 80004e4:	0031      	movs	r1, r6
 80004e6:	4a12      	ldr	r2, [pc, #72]	@ (8000530 <initDMApwm+0x74>)
 80004e8:	4812      	ldr	r0, [pc, #72]	@ (8000534 <initDMApwm+0x78>)
 80004ea:	f002 f8c7 	bl	800267c <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim3_ch4_up, (uint32_t) &(dataB[0]), (uint32_t) &(GPIOB->BSRR), sizeof(dataB) / sizeof(dataB[0]));
 80004ee:	4d12      	ldr	r5, [pc, #72]	@ (8000538 <initDMApwm+0x7c>)
 80004f0:	2364      	movs	r3, #100	@ 0x64
 80004f2:	0029      	movs	r1, r5
 80004f4:	4a11      	ldr	r2, [pc, #68]	@ (800053c <initDMApwm+0x80>)
 80004f6:	4812      	ldr	r0, [pc, #72]	@ (8000540 <initDMApwm+0x84>)
 80004f8:	f002 f8c0 	bl	800267c <HAL_DMA_Start>
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80004fc:	2380      	movs	r3, #128	@ 0x80
 80004fe:	6821      	ldr	r1, [r4, #0]
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	68ca      	ldr	r2, [r1, #12]
	zeroSoftPWM(dataA);
 8000504:	0030      	movs	r0, r6
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000506:	431a      	orrs	r2, r3
 8000508:	60ca      	str	r2, [r1, #12]
	__HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_UPDATE);
 800050a:	683a      	ldr	r2, [r7, #0]
 800050c:	68d1      	ldr	r1, [r2, #12]
 800050e:	430b      	orrs	r3, r1
 8000510:	60d3      	str	r3, [r2, #12]
	zeroSoftPWM(dataA);
 8000512:	f7ff ffcb 	bl	80004ac <zeroSoftPWM>
	zeroSoftPWM(dataB);
 8000516:	0028      	movs	r0, r5
 8000518:	f7ff ffc8 	bl	80004ac <zeroSoftPWM>
}
 800051c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	200006b4 	.word	0x200006b4
 8000524:	200006fc 	.word	0x200006fc
 8000528:	02dc6bff 	.word	0x02dc6bff
 800052c:	20000398 	.word	0x20000398
 8000530:	48000018 	.word	0x48000018
 8000534:	20000598 	.word	0x20000598
 8000538:	20000208 	.word	0x20000208
 800053c:	48000418 	.word	0x48000418
 8000540:	20000554 	.word	0x20000554

08000544 <getADCValue>:
	if (vbat >= MIN_1S_VOLTAGE && vbat <= MAX_1S_VOLTAGE) return 1;	// add (or subtracted) 200 to have some margin
	if (vbat >= MIN_2S_VOLTAGE && vbat <= MAX_2S_VOLTAGE) return 2;	// add (or subtracted) 200 to have some margin
	return 0;
}

uint16_t getADCValue(uint8_t channel) {
 8000544:	b570      	push	{r4, r5, r6, lr}
	uint16_t adc;
	HAL_ADC_Start(&hadc);
 8000546:	4d06      	ldr	r5, [pc, #24]	@ (8000560 <getADCValue+0x1c>)
 8000548:	0028      	movs	r0, r5
 800054a:	f001 ff57 	bl	80023fc <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc);
 800054e:	0028      	movs	r0, r5
 8000550:	f001 ff9e 	bl	8002490 <HAL_ADC_GetValue>
 8000554:	0004      	movs	r4, r0
	HAL_ADC_Stop(&hadc);
 8000556:	0028      	movs	r0, r5
 8000558:	f001 ff7c 	bl	8002454 <HAL_ADC_Stop>
	return adc;
 800055c:	b2a0      	uxth	r0, r4
}
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	20000798 	.word	0x20000798

08000564 <initBattery>:
void initBattery() {
 8000564:	b510      	push	{r4, lr}
	HAL_ADC_Init(&hadc);
 8000566:	4803      	ldr	r0, [pc, #12]	@ (8000574 <initBattery+0x10>)
 8000568:	f001 fea6 	bl	80022b8 <HAL_ADC_Init>
	getADCValue(BATTERY_CHANNEL);	// make the first conversion because it always returns 0
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ffe9 	bl	8000544 <getADCValue>
}
 8000572:	bd10      	pop	{r4, pc}
 8000574:	20000798 	.word	0x20000798

08000578 <getBattVoltage>:

uint16_t getBattVoltage() {
 8000578:	b510      	push	{r4, lr}
	const uint32_t vref = 3300000;		// 3.3V in uV to make the result an integer
	const uint32_t adcRes = 4096;		// 12 bit resolution
	const uint32_t dividerRatio = 3;	// voltage divider in the circuit is 1/3
	uint32_t adc = getADCValue(BATTERY_CHANNEL);
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff ffe2 	bl	8000544 <getADCValue>
	uint32_t vbat = ((vref / adcRes) * adc * dividerRatio) / 1000;	// /1000 to have the value in mV
 8000580:	21fa      	movs	r1, #250	@ 0xfa
 8000582:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <getBattVoltage+0x1c>)
 8000584:	0089      	lsls	r1, r1, #2
 8000586:	4358      	muls	r0, r3
 8000588:	f7ff fdee 	bl	8000168 <__udivsi3>
	return vbat + COMPENSATION_VALUE;
 800058c:	3064      	adds	r0, #100	@ 0x64
 800058e:	b280      	uxth	r0, r0
}
 8000590:	bd10      	pop	{r4, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	0000096f 	.word	0x0000096f

08000598 <getBatteryConfiguration>:
uint8_t getBatteryConfiguration() {
 8000598:	b510      	push	{r4, lr}
	uint16_t vbat = getBattVoltage();
 800059a:	f7ff ffed 	bl	8000578 <getBattVoltage>
	if (vbat >= MIN_1S_VOLTAGE && vbat <= MAX_1S_VOLTAGE) return 1;	// add (or subtracted) 200 to have some margin
 800059e:	21af      	movs	r1, #175	@ 0xaf
 80005a0:	4a08      	ldr	r2, [pc, #32]	@ (80005c4 <getBatteryConfiguration+0x2c>)
	uint16_t vbat = getBattVoltage();
 80005a2:	0003      	movs	r3, r0
	if (vbat >= MIN_1S_VOLTAGE && vbat <= MAX_1S_VOLTAGE) return 1;	// add (or subtracted) 200 to have some margin
 80005a4:	1882      	adds	r2, r0, r2
 80005a6:	b292      	uxth	r2, r2
 80005a8:	2001      	movs	r0, #1
 80005aa:	00c9      	lsls	r1, r1, #3
 80005ac:	428a      	cmp	r2, r1
 80005ae:	d908      	bls.n	80005c2 <getBatteryConfiguration+0x2a>
	if (vbat >= MIN_2S_VOLTAGE && vbat <= MAX_2S_VOLTAGE) return 2;	// add (or subtracted) 200 to have some margin
 80005b0:	4a05      	ldr	r2, [pc, #20]	@ (80005c8 <getBatteryConfiguration+0x30>)
 80005b2:	2000      	movs	r0, #0
 80005b4:	189b      	adds	r3, r3, r2
 80005b6:	22af      	movs	r2, #175	@ 0xaf
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	0112      	lsls	r2, r2, #4
 80005bc:	429a      	cmp	r2, r3
 80005be:	4140      	adcs	r0, r0
 80005c0:	0040      	lsls	r0, r0, #1
}
 80005c2:	bd10      	pop	{r4, pc}
 80005c4:	fffff510 	.word	0xfffff510
 80005c8:	ffffea20 	.word	0xffffea20

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ce:	2510      	movs	r5, #16
{
 80005d0:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	2228      	movs	r2, #40	@ 0x28
 80005d4:	2100      	movs	r1, #0
 80005d6:	a80c      	add	r0, sp, #48	@ 0x30
 80005d8:	f006 f876 	bl	80066c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	002a      	movs	r2, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	a801      	add	r0, sp, #4
 80005e2:	f006 f871 	bl	80066c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e6:	2214      	movs	r2, #20
 80005e8:	2100      	movs	r1, #0
 80005ea:	a805      	add	r0, sp, #20
 80005ec:	f006 f86c 	bl	80066c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80005f0:	2313      	movs	r3, #19
 80005f2:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005fa:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fe:	950e      	str	r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000600:	9510      	str	r5, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000602:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800060c:	940f      	str	r4, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	9512      	str	r5, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000610:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f003 fb81 	bl	8003d18 <HAL_RCC_OscConfig>
 8000616:	2800      	cmp	r0, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x52>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800061c:	e7fe      	b.n	800061c <SystemClock_Config+0x50>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000624:	0021      	movs	r1, r4
 8000626:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800062c:	f003 fd9c 	bl	8004168 <HAL_RCC_ClockConfig>
 8000630:	2800      	cmp	r0, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x6c>
 8000634:	b672      	cpsid	i
	while (1) {
 8000636:	e7fe      	b.n	8000636 <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <SystemClock_Config+0x88>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800063a:	9008      	str	r0, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800063c:	9305      	str	r3, [sp, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800063e:	2380      	movs	r3, #128	@ 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	a805      	add	r0, sp, #20
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000642:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000644:	f003 fe14 	bl	8004270 <HAL_RCCEx_PeriphCLKConfig>
 8000648:	2800      	cmp	r0, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x84>
 800064c:	b672      	cpsid	i
	while (1) {
 800064e:	e7fe      	b.n	800064e <SystemClock_Config+0x82>
}
 8000650:	b017      	add	sp, #92	@ 0x5c
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	00020020 	.word	0x00020020

08000658 <main>:
{
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	b099      	sub	sp, #100	@ 0x64
  HAL_Init();
 800065c:	f001 fd3e 	bl	80020dc <HAL_Init>
  SystemClock_Config();
 8000660:	f7ff ffb4 	bl	80005cc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	2214      	movs	r2, #20
 8000666:	2100      	movs	r1, #0
 8000668:	a810      	add	r0, sp, #64	@ 0x40
 800066a:	f006 f82d 	bl	80066c8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	4dd7      	ldr	r5, [pc, #860]	@ (80009d0 <main+0x378>)
 8000672:	0312      	lsls	r2, r2, #12
 8000674:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 8000676:	2480      	movs	r4, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	4313      	orrs	r3, r2
 800067a:	616b      	str	r3, [r5, #20]
 800067c:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin|PWM_M3_B_Pin|SLEEPN_M2_Pin|PWM_M2_B_Pin
 800067e:	27fc      	movs	r7, #252	@ 0xfc
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4013      	ands	r3, r2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000682:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000684:	9305      	str	r3, [sp, #20]
 8000686:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000688:	696b      	ldr	r3, [r5, #20]
 800068a:	03d2      	lsls	r2, r2, #15
 800068c:	4313      	orrs	r3, r2
 800068e:	616b      	str	r3, [r5, #20]
 8000690:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 8000692:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000694:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000698:	9306      	str	r3, [sp, #24]
 800069a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	696b      	ldr	r3, [r5, #20]
 800069e:	0292      	lsls	r2, r2, #10
 80006a0:	4313      	orrs	r3, r2
 80006a2:	616b      	str	r3, [r5, #20]
 80006a4:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80006a6:	0021      	movs	r1, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	9307      	str	r3, [sp, #28]
 80006ae:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	696b      	ldr	r3, [r5, #20]
 80006b2:	02d2      	lsls	r2, r2, #11
 80006b4:	4313      	orrs	r3, r2
 80006b6:	616b      	str	r3, [r5, #20]
 80006b8:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin|PWM_M3_B_Pin|SLEEPN_M2_Pin|PWM_M2_B_Pin
 80006ba:	023f      	lsls	r7, r7, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	4013      	ands	r3, r2
  HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80006be:	48c5      	ldr	r0, [pc, #788]	@ (80009d4 <main+0x37c>)
 80006c0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	9308      	str	r3, [sp, #32]
 80006c4:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80006c6:	f002 f90f 	bl	80028e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin|PWM_M3_B_Pin|SLEEPN_M2_Pin|PWM_M2_B_Pin
 80006ca:	0039      	movs	r1, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	48c2      	ldr	r0, [pc, #776]	@ (80009d8 <main+0x380>)
 80006d0:	f002 f90a 	bl	80028e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PWM_M1_F_Pin|PWM_M2_F_Pin|PWM_M3_F_Pin, GPIO_PIN_RESET);
 80006d4:	21e0      	movs	r1, #224	@ 0xe0
 80006d6:	2090      	movs	r0, #144	@ 0x90
 80006d8:	2200      	movs	r2, #0
 80006da:	00c9      	lsls	r1, r1, #3
 80006dc:	05c0      	lsls	r0, r0, #23
 80006de:	f002 f903 	bl	80028e8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = U_LED_Pin;
 80006e4:	9410      	str	r4, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2400      	movs	r4, #0
  HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 80006e8:	48ba      	ldr	r0, [pc, #744]	@ (80009d4 <main+0x37c>)
 80006ea:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	9413      	str	r4, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f002 f83b 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006f6:	23c4      	movs	r3, #196	@ 0xc4
  HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 80006f8:	48b7      	ldr	r0, [pc, #732]	@ (80009d8 <main+0x380>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006fa:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 80006fc:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = CH1_Pin;
 80006fe:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000700:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000702:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000704:	f002 f832 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CH2_Pin|CH3_Pin|CH4_Pin;
 8000708:	230e      	movs	r3, #14
 800070a:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070c:	2384      	movs	r3, #132	@ 0x84
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	48b2      	ldr	r0, [pc, #712]	@ (80009d8 <main+0x380>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000710:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000714:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000716:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f002 f828 	bl	800276c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	48ae      	ldr	r0, [pc, #696]	@ (80009d8 <main+0x380>)
 800071e:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = SLEEPN_M3_Pin|PWM_M3_B_Pin|SLEEPN_M2_Pin|PWM_M2_B_Pin
 8000720:	9710      	str	r7, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	9413      	str	r4, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f002 f820 	bl	800276c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PWM_M1_F_Pin|PWM_M2_F_Pin|PWM_M3_F_Pin;
 800072c:	23e0      	movs	r3, #224	@ 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	2090      	movs	r0, #144	@ 0x90
  htim16.Init.Prescaler = 24-1;
 8000730:	2717      	movs	r7, #23
  GPIO_InitStruct.Pin = PWM_M1_F_Pin|PWM_M2_F_Pin|PWM_M3_F_Pin;
 8000732:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	a910      	add	r1, sp, #64	@ 0x40
 8000736:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = PWM_M1_F_Pin|PWM_M2_F_Pin|PWM_M3_F_Pin;
 8000738:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	9413      	str	r4, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f002 f814 	bl	800276c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000744:	0022      	movs	r2, r4
 8000746:	0021      	movs	r1, r4
 8000748:	2005      	movs	r0, #5
 800074a:	f001 ff15 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800074e:	2005      	movs	r0, #5
 8000750:	f001 ff3c 	bl	80025cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000754:	0022      	movs	r2, r4
 8000756:	0021      	movs	r1, r4
 8000758:	2006      	movs	r0, #6
 800075a:	f001 ff0d 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800075e:	2006      	movs	r0, #6
 8000760:	f001 ff34 	bl	80025cc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000764:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000766:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000768:	4333      	orrs	r3, r6
 800076a:	616b      	str	r3, [r5, #20]
 800076c:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800076e:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000770:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000772:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000774:	9304      	str	r3, [sp, #16]
 8000776:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000778:	f001 fefe 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800077c:	200a      	movs	r0, #10
 800077e:	f001 ff25 	bl	80025cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000782:	0022      	movs	r2, r4
 8000784:	0021      	movs	r1, r4
 8000786:	200b      	movs	r0, #11
 8000788:	f001 fef6 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800078c:	200b      	movs	r0, #11
 800078e:	f001 ff1d 	bl	80025cc <HAL_NVIC_EnableIRQ>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000792:	221c      	movs	r2, #28
 8000794:	0021      	movs	r1, r4
 8000796:	a809      	add	r0, sp, #36	@ 0x24
 8000798:	f005 ff96 	bl	80066c8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079c:	2220      	movs	r2, #32
 800079e:	0021      	movs	r1, r4
 80007a0:	a810      	add	r0, sp, #64	@ 0x40
 80007a2:	f005 ff91 	bl	80066c8 <memset>
  htim16.Instance = TIM16;
 80007a6:	4d8d      	ldr	r5, [pc, #564]	@ (80009dc <main+0x384>)
 80007a8:	4b8d      	ldr	r3, [pc, #564]	@ (80009e0 <main+0x388>)
  htim16.Init.Period = 10000-1;
 80007aa:	4e8e      	ldr	r6, [pc, #568]	@ (80009e4 <main+0x38c>)
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007ac:	0028      	movs	r0, r5
  htim16.Instance = TIM16;
 80007ae:	602b      	str	r3, [r5, #0]
  htim16.Init.Prescaler = 24-1;
 80007b0:	606f      	str	r7, [r5, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	60ac      	str	r4, [r5, #8]
  htim16.Init.Period = 10000-1;
 80007b4:	60ee      	str	r6, [r5, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b6:	612c      	str	r4, [r5, #16]
  htim16.Init.RepetitionCounter = 0;
 80007b8:	616c      	str	r4, [r5, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007bc:	f003 ff22 	bl	8004604 <HAL_TIM_Base_Init>
 80007c0:	42a0      	cmp	r0, r4
 80007c2:	d001      	beq.n	80007c8 <main+0x170>
 80007c4:	b672      	cpsid	i
	while (1) {
 80007c6:	e7fe      	b.n	80007c6 <main+0x16e>
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80007c8:	0028      	movs	r0, r5
 80007ca:	f003 ff43 	bl	8004654 <HAL_TIM_PWM_Init>
 80007ce:	1e02      	subs	r2, r0, #0
 80007d0:	d001      	beq.n	80007d6 <main+0x17e>
 80007d2:	b672      	cpsid	i
	while (1) {
 80007d4:	e7fe      	b.n	80007d4 <main+0x17c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 80007d8:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007da:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007dc:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007de:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007e0:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e2:	900f      	str	r0, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e4:	a909      	add	r1, sp, #36	@ 0x24
 80007e6:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ea:	f003 ff9b 	bl	8004724 <HAL_TIM_PWM_ConfigChannel>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	d001      	beq.n	80007f6 <main+0x19e>
 80007f2:	b672      	cpsid	i
	while (1) {
 80007f4:	e7fe      	b.n	80007f4 <main+0x19c>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f6:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f8:	9010      	str	r0, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007fa:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007fc:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fe:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000800:	9014      	str	r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000802:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000804:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000806:	a910      	add	r1, sp, #64	@ 0x40
 8000808:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800080a:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800080c:	f004 f942 	bl	8004a94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000810:	1e04      	subs	r4, r0, #0
 8000812:	d001      	beq.n	8000818 <main+0x1c0>
 8000814:	b672      	cpsid	i
	while (1) {
 8000816:	e7fe      	b.n	8000816 <main+0x1be>
  HAL_TIM_MspPostInit(&htim16);
 8000818:	0028      	movs	r0, r5
 800081a:	f001 fb4f 	bl	8001ebc <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	221c      	movs	r2, #28
 8000820:	0021      	movs	r1, r4
 8000822:	a809      	add	r0, sp, #36	@ 0x24
 8000824:	f005 ff50 	bl	80066c8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000828:	2220      	movs	r2, #32
 800082a:	0021      	movs	r1, r4
 800082c:	a810      	add	r0, sp, #64	@ 0x40
 800082e:	f005 ff4b 	bl	80066c8 <memset>
  htim17.Instance = TIM17;
 8000832:	4d6d      	ldr	r5, [pc, #436]	@ (80009e8 <main+0x390>)
 8000834:	4b6d      	ldr	r3, [pc, #436]	@ (80009ec <main+0x394>)
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000836:	0028      	movs	r0, r5
  htim17.Instance = TIM17;
 8000838:	602b      	str	r3, [r5, #0]
  htim17.Init.Prescaler = 24-1;
 800083a:	606f      	str	r7, [r5, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	60ac      	str	r4, [r5, #8]
  htim17.Init.Period = 10000-1;
 800083e:	60ee      	str	r6, [r5, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	612c      	str	r4, [r5, #16]
  htim17.Init.RepetitionCounter = 0;
 8000842:	616c      	str	r4, [r5, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000846:	f003 fedd 	bl	8004604 <HAL_TIM_Base_Init>
 800084a:	2800      	cmp	r0, #0
 800084c:	d001      	beq.n	8000852 <main+0x1fa>
 800084e:	b672      	cpsid	i
	while (1) {
 8000850:	e7fe      	b.n	8000850 <main+0x1f8>
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000852:	0028      	movs	r0, r5
 8000854:	f003 fefe 	bl	8004654 <HAL_TIM_PWM_Init>
 8000858:	1e02      	subs	r2, r0, #0
 800085a:	d001      	beq.n	8000860 <main+0x208>
 800085c:	b672      	cpsid	i
	while (1) {
 800085e:	e7fe      	b.n	800085e <main+0x206>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000860:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8000862:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000864:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000866:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000868:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086a:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086c:	900f      	str	r0, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	a909      	add	r1, sp, #36	@ 0x24
 8000870:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000872:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000874:	f003 ff56 	bl	8004724 <HAL_TIM_PWM_ConfigChannel>
 8000878:	2800      	cmp	r0, #0
 800087a:	d001      	beq.n	8000880 <main+0x228>
 800087c:	b672      	cpsid	i
	while (1) {
 800087e:	e7fe      	b.n	800087e <main+0x226>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000880:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000882:	9010      	str	r0, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000884:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000886:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8000888:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800088a:	9014      	str	r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088c:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800088e:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000890:	a910      	add	r1, sp, #64	@ 0x40
 8000892:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000894:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000896:	f004 f8fd 	bl	8004a94 <HAL_TIMEx_ConfigBreakDeadTime>
 800089a:	1e06      	subs	r6, r0, #0
 800089c:	d001      	beq.n	80008a2 <main+0x24a>
 800089e:	b672      	cpsid	i
	while (1) {
 80008a0:	e7fe      	b.n	80008a0 <main+0x248>
  HAL_TIM_MspPostInit(&htim17);
 80008a2:	0028      	movs	r0, r5
 80008a4:	f001 fb0a 	bl	8001ebc <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a8:	2210      	movs	r2, #16
 80008aa:	0031      	movs	r1, r6
 80008ac:	a810      	add	r0, sp, #64	@ 0x40
 80008ae:	f005 ff0b 	bl	80066c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	2208      	movs	r2, #8
 80008b4:	0031      	movs	r1, r6
 80008b6:	a809      	add	r0, sp, #36	@ 0x24
 80008b8:	f005 ff06 	bl	80066c8 <memset>
  htim1.Instance = TIM1;
 80008bc:	4c4c      	ldr	r4, [pc, #304]	@ (80009f0 <main+0x398>)
 80008be:	4b4d      	ldr	r3, [pc, #308]	@ (80009f4 <main+0x39c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c0:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 80008c2:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 100-1;
 80008c4:	2363      	movs	r3, #99	@ 0x63
  htim1.Init.Prescaler = 0;
 80008c6:	6066      	str	r6, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	60a6      	str	r6, [r4, #8]
  htim1.Init.Period = 100-1;
 80008ca:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	6126      	str	r6, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ce:	6166      	str	r6, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008d2:	f003 fe97 	bl	8004604 <HAL_TIM_Base_Init>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d001      	beq.n	80008de <main+0x286>
 80008da:	b672      	cpsid	i
	while (1) {
 80008dc:	e7fe      	b.n	80008dc <main+0x284>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008de:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e0:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e2:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e4:	a910      	add	r1, sp, #64	@ 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e8:	f003 ff88 	bl	80047fc <HAL_TIM_ConfigClockSource>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d001      	beq.n	80008f4 <main+0x29c>
 80008f0:	b672      	cpsid	i
	while (1) {
 80008f2:	e7fe      	b.n	80008f2 <main+0x29a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008f4:	2320      	movs	r3, #32
 80008f6:	9309      	str	r3, [sp, #36]	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fa:	0020      	movs	r0, r4
 80008fc:	a909      	add	r1, sp, #36	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000900:	f004 f89a 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	2800      	cmp	r0, #0
 8000906:	d001      	beq.n	800090c <main+0x2b4>
 8000908:	b672      	cpsid	i
	while (1) {
 800090a:	e7fe      	b.n	800090a <main+0x2b2>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090c:	2701      	movs	r7, #1
  hi2c1.Instance = I2C1;
 800090e:	4c3a      	ldr	r4, [pc, #232]	@ (80009f8 <main+0x3a0>)
 8000910:	4b3a      	ldr	r3, [pc, #232]	@ (80009fc <main+0x3a4>)
  hi2c1.Init.OwnAddress1 = 0;
 8000912:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8000914:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000916:	4b3a      	ldr	r3, [pc, #232]	@ (8000a00 <main+0x3a8>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800091a:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000922:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00201D2B;
 8000924:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	60e7      	str	r7, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000928:	f002 f92a 	bl	8002b80 <HAL_I2C_Init>
 800092c:	1e01      	subs	r1, r0, #0
 800092e:	d001      	beq.n	8000934 <main+0x2dc>
 8000930:	b672      	cpsid	i
	while (1) {
 8000932:	e7fe      	b.n	8000932 <main+0x2da>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000934:	0020      	movs	r0, r4
 8000936:	f002 fb39 	bl	8002fac <HAL_I2CEx_ConfigAnalogFilter>
 800093a:	1e01      	subs	r1, r0, #0
 800093c:	d001      	beq.n	8000942 <main+0x2ea>
 800093e:	b672      	cpsid	i
	while (1) {
 8000940:	e7fe      	b.n	8000940 <main+0x2e8>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000942:	0020      	movs	r0, r4
 8000944:	f002 fb58 	bl	8002ff8 <HAL_I2CEx_ConfigDigitalFilter>
 8000948:	1e06      	subs	r6, r0, #0
 800094a:	d001      	beq.n	8000950 <main+0x2f8>
 800094c:	b672      	cpsid	i
	while (1) {
 800094e:	e7fe      	b.n	800094e <main+0x2f6>
  MX_USB_DEVICE_Init();
 8000950:	f005 fac2 	bl	8005ed8 <MX_USB_DEVICE_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000954:	220c      	movs	r2, #12
 8000956:	0031      	movs	r1, r6
 8000958:	a810      	add	r0, sp, #64	@ 0x40
 800095a:	f005 feb5 	bl	80066c8 <memset>
  hadc.Instance = ADC1;
 800095e:	4c29      	ldr	r4, [pc, #164]	@ (8000a04 <main+0x3ac>)
 8000960:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <main+0x3b0>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000962:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8000964:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000966:	2304      	movs	r3, #4
 8000968:	6163      	str	r3, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800096a:	2380      	movs	r3, #128	@ 0x80
 800096c:	045b      	lsls	r3, r3, #17
 800096e:	61a3      	str	r3, [r4, #24]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000970:	23c2      	movs	r3, #194	@ 0xc2
 8000972:	33ff      	adds	r3, #255	@ 0xff
 8000974:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000976:	1d63      	adds	r3, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000978:	6066      	str	r6, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800097a:	60a6      	str	r6, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097c:	60e6      	str	r6, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800097e:	6127      	str	r7, [r4, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000980:	6226      	str	r6, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000982:	77de      	strb	r6, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000984:	62a7      	str	r7, [r4, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000986:	f001 fc97 	bl	80022b8 <HAL_ADC_Init>
 800098a:	2800      	cmp	r0, #0
 800098c:	d001      	beq.n	8000992 <main+0x33a>
 800098e:	b672      	cpsid	i
	while (1) {
 8000990:	e7fe      	b.n	8000990 <main+0x338>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000992:	2680      	movs	r6, #128	@ 0x80
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000994:	2380      	movs	r3, #128	@ 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 8000996:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000998:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800099a:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800099c:	0176      	lsls	r6, r6, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800099e:	a910      	add	r1, sp, #64	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009a0:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009a2:	9611      	str	r6, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009a4:	f001 fd78 	bl	8002498 <HAL_ADC_ConfigChannel>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <main+0x358>
 80009ac:	b672      	cpsid	i
	while (1) {
 80009ae:	e7fe      	b.n	80009ae <main+0x356>
  htim6.Instance = TIM6;
 80009b0:	4816      	ldr	r0, [pc, #88]	@ (8000a0c <main+0x3b4>)
 80009b2:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <main+0x3b8>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	6083      	str	r3, [r0, #8]
  htim6.Instance = TIM6;
 80009b6:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 48-1;
 80009b8:	222f      	movs	r2, #47	@ 0x2f
 80009ba:	6042      	str	r2, [r0, #4]
  htim6.Init.Period = 65535;
 80009bc:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <main+0x3bc>)
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009be:	6183      	str	r3, [r0, #24]
  htim6.Init.Period = 65535;
 80009c0:	60c2      	str	r2, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009c2:	f003 fe1f 	bl	8004604 <HAL_TIM_Base_Init>
 80009c6:	1e07      	subs	r7, r0, #0
 80009c8:	d026      	beq.n	8000a18 <main+0x3c0>
 80009ca:	b672      	cpsid	i
	while (1) {
 80009cc:	e7fe      	b.n	80009cc <main+0x374>
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000800 	.word	0x48000800
 80009d8:	48000400 	.word	0x48000400
 80009dc:	20000624 	.word	0x20000624
 80009e0:	40014400 	.word	0x40014400
 80009e4:	0000270f 	.word	0x0000270f
 80009e8:	200005dc 	.word	0x200005dc
 80009ec:	40014800 	.word	0x40014800
 80009f0:	200006fc 	.word	0x200006fc
 80009f4:	40012c00 	.word	0x40012c00
 80009f8:	20000744 	.word	0x20000744
 80009fc:	40005400 	.word	0x40005400
 8000a00:	00201d2b 	.word	0x00201d2b
 8000a04:	20000798 	.word	0x20000798
 8000a08:	40012400 	.word	0x40012400
 8000a0c:	2000066c 	.word	0x2000066c
 8000a10:	40001000 	.word	0x40001000
 8000a14:	0000ffff 	.word	0x0000ffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a18:	0001      	movs	r1, r0
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	a810      	add	r0, sp, #64	@ 0x40
 8000a1e:	f005 fe53 	bl	80066c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a22:	2208      	movs	r2, #8
 8000a24:	0039      	movs	r1, r7
 8000a26:	a809      	add	r0, sp, #36	@ 0x24
 8000a28:	f005 fe4e 	bl	80066c8 <memset>
  htim3.Instance = TIM3;
 8000a2c:	4cca      	ldr	r4, [pc, #808]	@ (8000d58 <main+0x700>)
 8000a2e:	4bcb      	ldr	r3, [pc, #812]	@ (8000d5c <main+0x704>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a30:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 8000a32:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 100-1;
 8000a34:	2363      	movs	r3, #99	@ 0x63
  htim3.Init.Prescaler = 0;
 8000a36:	6067      	str	r7, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	60a7      	str	r7, [r4, #8]
  htim3.Init.Period = 100-1;
 8000a3a:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	6127      	str	r7, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3e:	61a7      	str	r7, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a40:	f003 fde0 	bl	8004604 <HAL_TIM_Base_Init>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d001      	beq.n	8000a4c <main+0x3f4>
 8000a48:	b672      	cpsid	i
	while (1) {
 8000a4a:	e7fe      	b.n	8000a4a <main+0x3f2>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a4c:	0020      	movs	r0, r4
 8000a4e:	a910      	add	r1, sp, #64	@ 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	9610      	str	r6, [sp, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a52:	f003 fed3 	bl	80047fc <HAL_TIM_ConfigClockSource>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d001      	beq.n	8000a5e <main+0x406>
 8000a5a:	b672      	cpsid	i
	while (1) {
 8000a5c:	e7fe      	b.n	8000a5c <main+0x404>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a5e:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a62:	a909      	add	r1, sp, #36	@ 0x24
 8000a64:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a66:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a68:	f003 ffe6 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d001      	beq.n	8000a74 <main+0x41c>
 8000a70:	b672      	cpsid	i
	while (1) {
 8000a72:	e7fe      	b.n	8000a72 <main+0x41a>
	initReciever(&htim6);
 8000a74:	48ba      	ldr	r0, [pc, #744]	@ (8000d60 <main+0x708>)
 8000a76:	f000 fb1d 	bl	80010b4 <initReciever>
	initMotors();
 8000a7a:	f000 f9eb 	bl	8000e54 <initMotors>
	initBattery(&hadc);
 8000a7e:	48b9      	ldr	r0, [pc, #740]	@ (8000d64 <main+0x70c>)
 8000a80:	f7ff fd70 	bl	8000564 <initBattery>
	uint8_t isFirstWrite = read_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS);
 8000a84:	2064      	movs	r0, #100	@ 0x64
 8000a86:	f000 fc8d 	bl	80013a4 <read_byte_eeprom>
	if (isFirstWrite) {	// if is the first time the value is 255 (value of the memory empty)
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d05f      	beq.n	8000b4e <main+0x4f6>
			HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000a8e:	2680      	movs	r6, #128	@ 0x80
 8000a90:	240a      	movs	r4, #10
 8000a92:	0236      	lsls	r6, r6, #8
 8000a94:	0031      	movs	r1, r6
 8000a96:	48b4      	ldr	r0, [pc, #720]	@ (8000d68 <main+0x710>)
 8000a98:	f001 ff2c 	bl	80028f4 <HAL_GPIO_TogglePin>
		for (int i = 0; i < 10; i++) {
 8000a9c:	3c01      	subs	r4, #1
			HAL_Delay(100);
 8000a9e:	2064      	movs	r0, #100	@ 0x64
 8000aa0:	f001 fb3e 	bl	8002120 <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 8000aa4:	2c00      	cmp	r4, #0
 8000aa6:	d1f5      	bne.n	8000a94 <main+0x43c>
		storeSettingsToEeprom();	// write the default settings
 8000aa8:	f000 fd44 	bl	8001534 <storeSettingsToEeprom>
		write_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS, isFirstWrite);
 8000aac:	0021      	movs	r1, r4
 8000aae:	2064      	movs	r0, #100	@ 0x64
 8000ab0:	f000 fd28 	bl	8001504 <write_byte_eeprom>
	uint32_t timeLowBattery = 0;
 8000ab4:	2600      	movs	r6, #0
	uint32_t time1 = 0;
 8000ab6:	0037      	movs	r7, r6
	disableMotor(M1);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 fa81 	bl	8000fc0 <disableMotor>
	disableMotor(M2);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 fa7e 	bl	8000fc0 <disableMotor>
	disableMotor(M3);
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f000 fa7b 	bl	8000fc0 <disableMotor>
	uint32_t timeLimitBattery = 0;
 8000aca:	9602      	str	r6, [sp, #8]
	uint32_t time3 = 0;
 8000acc:	9601      	str	r6, [sp, #4]
	uint32_t time2 = 0;
 8000ace:	9600      	str	r6, [sp, #0]
		if (!cutoff) {	// if the robot is not in cutoff
 8000ad0:	4ba6      	ldr	r3, [pc, #664]	@ (8000d6c <main+0x714>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d000      	beq.n	8000ada <main+0x482>
 8000ad8:	e17e      	b.n	8000dd8 <main+0x780>
			if (!noDisarm) {
 8000ada:	4ba5      	ldr	r3, [pc, #660]	@ (8000d70 <main+0x718>)
 8000adc:	4ca5      	ldr	r4, [pc, #660]	@ (8000d74 <main+0x71c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	9303      	str	r3, [sp, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d105      	bne.n	8000af2 <main+0x49a>
				if (getChannelValuePercentage(armChannel) > 75)
 8000ae6:	4ba4      	ldr	r3, [pc, #656]	@ (8000d78 <main+0x720>)
 8000ae8:	7818      	ldrb	r0, [r3, #0]
 8000aea:	f000 fac7 	bl	800107c <getChannelValuePercentage>
 8000aee:	284b      	cmp	r0, #75	@ 0x4b
 8000af0:	d930      	bls.n	8000b54 <main+0x4fc>
					armed = TRUE;
 8000af2:	2301      	movs	r3, #1
 8000af4:	7023      	strb	r3, [r4, #0]
				enableMotor(M1);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 fa7a 	bl	8000ff0 <enableMotor>
				enableMotor(M2);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 fa77 	bl	8000ff0 <enableMotor>
				enableMotor(M3);
 8000b02:	2002      	movs	r0, #2
 8000b04:	f000 fa74 	bl	8000ff0 <enableMotor>
				setServoIsEnable(TRUE, &htim17); // start servo 1 HV
 8000b08:	0029      	movs	r1, r5
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 fbee 	bl	80012ec <setServoIsEnable>
				setServoIsEnable(TRUE, &htim16); // start servo 2
 8000b10:	2001      	movs	r0, #1
 8000b12:	499a      	ldr	r1, [pc, #616]	@ (8000d7c <main+0x724>)
 8000b14:	f000 fbea 	bl	80012ec <setServoIsEnable>
				if (tankMixIsON) {	// calculate and use the tank mix only if it's enabled
 8000b18:	4b99      	ldr	r3, [pc, #612]	@ (8000d80 <main+0x728>)
 8000b1a:	781c      	ldrb	r4, [r3, #0]
 8000b1c:	2c00      	cmp	r4, #0
 8000b1e:	d138      	bne.n	8000b92 <main+0x53a>
					setMotorSpeedBidirectional(M1, getChannelValuePercentage(thChannel));
 8000b20:	4b98      	ldr	r3, [pc, #608]	@ (8000d84 <main+0x72c>)
 8000b22:	7818      	ldrb	r0, [r3, #0]
 8000b24:	f000 faaa 	bl	800107c <getChannelValuePercentage>
 8000b28:	b241      	sxtb	r1, r0
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	f000 f9b4 	bl	8000e98 <setMotorSpeedBidirectional>
					setMotorSpeedBidirectional(M2, getChannelValuePercentage(stChannel));
 8000b30:	4b95      	ldr	r3, [pc, #596]	@ (8000d88 <main+0x730>)
 8000b32:	7818      	ldrb	r0, [r3, #0]
 8000b34:	f000 faa2 	bl	800107c <getChannelValuePercentage>
 8000b38:	b241      	sxtb	r1, r0
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f000 f9ac 	bl	8000e98 <setMotorSpeedBidirectional>
					setMotorSpeedBidirectional(M3, getChannelValuePercentage(wpChannel));
 8000b40:	4b92      	ldr	r3, [pc, #584]	@ (8000d8c <main+0x734>)
 8000b42:	7818      	ldrb	r0, [r3, #0]
 8000b44:	f000 fa9a 	bl	800107c <getChannelValuePercentage>
 8000b48:	b241      	sxtb	r1, r0
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	e046      	b.n	8000bdc <main+0x584>
		loadSettingsFromEeprom();	// load the settings from the eeprom memory
 8000b4e:	f000 fcd5 	bl	80014fc <loadSettingsFromEeprom>
 8000b52:	e7af      	b.n	8000ab4 <main+0x45c>
					armed = FALSE;
 8000b54:	9b03      	ldr	r3, [sp, #12]
				makeSound(mLeft, 50);
 8000b56:	2132      	movs	r1, #50	@ 0x32
					armed = FALSE;
 8000b58:	7023      	strb	r3, [r4, #0]
				makeSound(mLeft, 50);
 8000b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8000d90 <main+0x738>)
 8000b5c:	7818      	ldrb	r0, [r3, #0]
 8000b5e:	f000 fa69 	bl	8001034 <makeSound>
				HAL_Delay(50);
 8000b62:	2032      	movs	r0, #50	@ 0x32
 8000b64:	f001 fadc 	bl	8002120 <HAL_Delay>
			if (armed) {	// if armed do...
 8000b68:	7824      	ldrb	r4, [r4, #0]
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d1c3      	bne.n	8000af6 <main+0x49e>
				disableMotor(M1);
 8000b6e:	0020      	movs	r0, r4
 8000b70:	f000 fa26 	bl	8000fc0 <disableMotor>
				disableMotor(M2);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f000 fa23 	bl	8000fc0 <disableMotor>
				disableMotor(M3);
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f000 fa20 	bl	8000fc0 <disableMotor>
				setServoIsEnable(FALSE, &htim17); // stop servo 1 HV
 8000b80:	0029      	movs	r1, r5
 8000b82:	0020      	movs	r0, r4
 8000b84:	f000 fbb2 	bl	80012ec <setServoIsEnable>
				setServoIsEnable(FALSE, &htim16); // stop servo 2
 8000b88:	0020      	movs	r0, r4
 8000b8a:	497c      	ldr	r1, [pc, #496]	@ (8000d7c <main+0x724>)
 8000b8c:	f000 fbae 	bl	80012ec <setServoIsEnable>
 8000b90:	e04f      	b.n	8000c32 <main+0x5da>
					tank = tankMix(getChannelValuePercentage(stChannel), getChannelValuePercentage(thChannel));
 8000b92:	4b7d      	ldr	r3, [pc, #500]	@ (8000d88 <main+0x730>)
 8000b94:	7818      	ldrb	r0, [r3, #0]
 8000b96:	f000 fa71 	bl	800107c <getChannelValuePercentage>
 8000b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8000d84 <main+0x72c>)
 8000b9c:	0004      	movs	r4, r0
 8000b9e:	7818      	ldrb	r0, [r3, #0]
 8000ba0:	f000 fa6c 	bl	800107c <getChannelValuePercentage>
 8000ba4:	0001      	movs	r1, r0
 8000ba6:	0020      	movs	r0, r4
 8000ba8:	f000 fb2e 	bl	8001208 <tankMix>
 8000bac:	b200      	sxth	r0, r0
 8000bae:	4a79      	ldr	r2, [pc, #484]	@ (8000d94 <main+0x73c>)
 8000bb0:	0403      	lsls	r3, r0, #16
 8000bb2:	0e1b      	lsrs	r3, r3, #24
 8000bb4:	7010      	strb	r0, [r2, #0]
 8000bb6:	7053      	strb	r3, [r2, #1]
					setTankMotor(tank);
 8000bb8:	b2c2      	uxtb	r2, r0
 8000bba:	b2d8      	uxtb	r0, r3
 8000bbc:	0200      	lsls	r0, r0, #8
 8000bbe:	4310      	orrs	r0, r2
 8000bc0:	f000 f9ea 	bl	8000f98 <setTankMotor>
					if (weaponDoubleDirection) {
 8000bc4:	4b74      	ldr	r3, [pc, #464]	@ (8000d98 <main+0x740>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	4b70      	ldr	r3, [pc, #448]	@ (8000d8c <main+0x734>)
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d009      	beq.n	8000be2 <main+0x58a>
						setMotorSpeedBidirectional(mWeapon, getChannelValuePercentage(wpChannel));
 8000bce:	4a73      	ldr	r2, [pc, #460]	@ (8000d9c <main+0x744>)
 8000bd0:	7818      	ldrb	r0, [r3, #0]
 8000bd2:	7814      	ldrb	r4, [r2, #0]
 8000bd4:	f000 fa52 	bl	800107c <getChannelValuePercentage>
 8000bd8:	b241      	sxtb	r1, r0
 8000bda:	0020      	movs	r0, r4
					setMotorSpeedBidirectional(M3, getChannelValuePercentage(wpChannel));
 8000bdc:	f000 f95c 	bl	8000e98 <setMotorSpeedBidirectional>
 8000be0:	e00d      	b.n	8000bfe <main+0x5a6>
						uint8_t wp = getChannelValuePercentage(wpChannel);
 8000be2:	7818      	ldrb	r0, [r3, #0]
 8000be4:	f000 fa4a 	bl	800107c <getChannelValuePercentage>
						if (limit == TRUE) wp = wp / 2;	// valid only in the unidirectional mode  !!FOR DC MOTOR ONLY!!
 8000be8:	4b6d      	ldr	r3, [pc, #436]	@ (8000da0 <main+0x748>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d101      	bne.n	8000bf4 <main+0x59c>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	b2c0      	uxtb	r0, r0
						setMotorSpeedUnidirectional(mWeapon, wp);
 8000bf4:	4b69      	ldr	r3, [pc, #420]	@ (8000d9c <main+0x744>)
 8000bf6:	b241      	sxtb	r1, r0
 8000bf8:	7818      	ldrb	r0, [r3, #0]
 8000bfa:	f000 fa11 	bl	8001020 <setMotorSpeedUnidirectional>
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000bfe:	4b69      	ldr	r3, [pc, #420]	@ (8000da4 <main+0x74c>)
				if (limit == TRUE) { // !!ASUME THAT S1 IS CONNECTED TO THE WEAPON ESC
 8000c00:	4c67      	ldr	r4, [pc, #412]	@ (8000da0 <main+0x748>)
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000c02:	7818      	ldrb	r0, [r3, #0]
				if (limit == TRUE) { // !!ASUME THAT S1 IS CONNECTED TO THE WEAPON ESC
 8000c04:	7823      	ldrb	r3, [r4, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d000      	beq.n	8000c0c <main+0x5b4>
 8000c0a:	e0a0      	b.n	8000d4e <main+0x6f6>
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000c0c:	f000 fa36 	bl	800107c <getChannelValuePercentage>
					if (limit == TRUE) s1 = s1 / 2;
 8000c10:	7823      	ldrb	r3, [r4, #0]
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000c12:	0001      	movs	r1, r0
					if (limit == TRUE) s1 = s1 / 2;
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d101      	bne.n	8000c1c <main+0x5c4>
 8000c18:	0841      	lsrs	r1, r0, #1
 8000c1a:	b2c9      	uxtb	r1, r1
					setServoAngle(S1, getChannelValuePercentage(s1Channel));	// servo 1 attached to channel s1Channel
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 fb2d 	bl	800127c <setServoAngle>
				setServoAngle(S2, getChannelValuePercentage(s2Channel));
 8000c22:	4b61      	ldr	r3, [pc, #388]	@ (8000da8 <main+0x750>)
 8000c24:	7818      	ldrb	r0, [r3, #0]
 8000c26:	f000 fa29 	bl	800107c <getChannelValuePercentage>
 8000c2a:	0001      	movs	r1, r0
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 fb25 	bl	800127c <setServoAngle>
			if (HAL_GetTick() - time2 >= 200) {
 8000c32:	f001 fa6f 	bl	8002114 <HAL_GetTick>
 8000c36:	9b00      	ldr	r3, [sp, #0]
 8000c38:	1ac0      	subs	r0, r0, r3
 8000c3a:	28c7      	cmp	r0, #199	@ 0xc7
 8000c3c:	d941      	bls.n	8000cc2 <main+0x66a>
				batteryVoltage = getBattVoltage();
 8000c3e:	f7ff fc9b 	bl	8000578 <getBattVoltage>
 8000c42:	4c5a      	ldr	r4, [pc, #360]	@ (8000dac <main+0x754>)
 8000c44:	8020      	strh	r0, [r4, #0]
				batteryConfiguration = getBatteryConfiguration();
 8000c46:	f7ff fca7 	bl	8000598 <getBatteryConfiguration>
 8000c4a:	4b59      	ldr	r3, [pc, #356]	@ (8000db0 <main+0x758>)
 8000c4c:	7018      	strb	r0, [r3, #0]
				if (HAL_GetTick() - timeLimitBattery >= CUTOFF_BATTERY_TIMEOUT * 1000) {
 8000c4e:	f001 fa61 	bl	8002114 <HAL_GetTick>
 8000c52:	9b02      	ldr	r3, [sp, #8]
 8000c54:	1ac0      	subs	r0, r0, r3
 8000c56:	4b57      	ldr	r3, [pc, #348]	@ (8000db4 <main+0x75c>)
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	d902      	bls.n	8000c62 <main+0x60a>
					limit = TRUE;	// activate limit state (weapon speed limited)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4b50      	ldr	r3, [pc, #320]	@ (8000da0 <main+0x748>)
 8000c60:	701a      	strb	r2, [r3, #0]
				if (batteryVoltage >= limitVoltage * 100 * batteryConfiguration && !limit)
 8000c62:	4b55      	ldr	r3, [pc, #340]	@ (8000db8 <main+0x760>)
 8000c64:	4a52      	ldr	r2, [pc, #328]	@ (8000db0 <main+0x758>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	8821      	ldrh	r1, [r4, #0]
 8000c6c:	435a      	muls	r2, r3
 8000c6e:	2364      	movs	r3, #100	@ 0x64
 8000c70:	4353      	muls	r3, r2
 8000c72:	4299      	cmp	r1, r3
 8000c74:	db07      	blt.n	8000c86 <main+0x62e>
 8000c76:	4b4a      	ldr	r3, [pc, #296]	@ (8000da0 <main+0x748>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d103      	bne.n	8000c86 <main+0x62e>
					timeLimitBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8000c7e:	f001 fa49 	bl	8002114 <HAL_GetTick>
 8000c82:	300a      	adds	r0, #10
 8000c84:	9002      	str	r0, [sp, #8]
				if (HAL_GetTick() - timeLowBattery >= CUTOFF_BATTERY_TIMEOUT * 1000) {
 8000c86:	f001 fa45 	bl	8002114 <HAL_GetTick>
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8000db4 <main+0x75c>)
 8000c8c:	1b80      	subs	r0, r0, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d902      	bls.n	8000c98 <main+0x640>
					cutoff = TRUE;	// activate cutoff state (robot disarmed)
 8000c92:	2201      	movs	r2, #1
 8000c94:	4b35      	ldr	r3, [pc, #212]	@ (8000d6c <main+0x714>)
 8000c96:	701a      	strb	r2, [r3, #0]
				if (batteryVoltage >= cutOffVoltage * 100 * batteryConfiguration && !cutoff)
 8000c98:	4b48      	ldr	r3, [pc, #288]	@ (8000dbc <main+0x764>)
 8000c9a:	4a45      	ldr	r2, [pc, #276]	@ (8000db0 <main+0x758>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	8821      	ldrh	r1, [r4, #0]
 8000ca2:	435a      	muls	r2, r3
 8000ca4:	2364      	movs	r3, #100	@ 0x64
 8000ca6:	4353      	muls	r3, r2
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	db07      	blt.n	8000cbc <main+0x664>
 8000cac:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <main+0x714>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d103      	bne.n	8000cbc <main+0x664>
					timeLowBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8000cb4:	f001 fa2e 	bl	8002114 <HAL_GetTick>
 8000cb8:	300a      	adds	r0, #10
 8000cba:	0006      	movs	r6, r0
				time2 = HAL_GetTick();
 8000cbc:	f001 fa2a 	bl	8002114 <HAL_GetTick>
 8000cc0:	9000      	str	r0, [sp, #0]
			if (HAL_GetTick() - time1 >= 2000 && limit == FALSE) {
 8000cc2:	f001 fa27 	bl	8002114 <HAL_GetTick>
 8000cc6:	23fa      	movs	r3, #250	@ 0xfa
 8000cc8:	1bc0      	subs	r0, r0, r7
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	d30b      	bcc.n	8000ce8 <main+0x690>
 8000cd0:	4b33      	ldr	r3, [pc, #204]	@ (8000da0 <main+0x748>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d107      	bne.n	8000ce8 <main+0x690>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000cd8:	2180      	movs	r1, #128	@ 0x80
 8000cda:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <main+0x710>)
 8000cdc:	0209      	lsls	r1, r1, #8
 8000cde:	f001 fe09 	bl	80028f4 <HAL_GPIO_TogglePin>
				time1 = HAL_GetTick();
 8000ce2:	f001 fa17 	bl	8002114 <HAL_GetTick>
 8000ce6:	0007      	movs	r7, r0
			if (HAL_GetTick() - time3 >= 350 && limit == TRUE) {
 8000ce8:	f001 fa14 	bl	8002114 <HAL_GetTick>
 8000cec:	9b01      	ldr	r3, [sp, #4]
 8000cee:	1ac0      	subs	r0, r0, r3
 8000cf0:	23af      	movs	r3, #175	@ 0xaf
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4298      	cmp	r0, r3
 8000cf6:	d30b      	bcc.n	8000d10 <main+0x6b8>
 8000cf8:	4b29      	ldr	r3, [pc, #164]	@ (8000da0 <main+0x748>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d107      	bne.n	8000d10 <main+0x6b8>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000d00:	2180      	movs	r1, #128	@ 0x80
 8000d02:	4819      	ldr	r0, [pc, #100]	@ (8000d68 <main+0x710>)
 8000d04:	0209      	lsls	r1, r1, #8
 8000d06:	f001 fdf5 	bl	80028f4 <HAL_GPIO_TogglePin>
				time3 = HAL_GetTick();
 8000d0a:	f001 fa03 	bl	8002114 <HAL_GetTick>
 8000d0e:	9001      	str	r0, [sp, #4]
		if (commandRecieved) {	// recieved a command from the USB
 8000d10:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc0 <main+0x768>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00f      	beq.n	8000d38 <main+0x6e0>
			if (modifySettingsWithCommand()) {
 8000d18:	f000 fdc2 	bl	80018a0 <modifySettingsWithCommand>
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d100      	bne.n	8000d22 <main+0x6ca>
 8000d20:	e07e      	b.n	8000e20 <main+0x7c8>
				uint8_t s[] = "\nOK\n";
 8000d22:	2205      	movs	r2, #5
 8000d24:	4927      	ldr	r1, [pc, #156]	@ (8000dc4 <main+0x76c>)
				uint8_t s[] = "\nWHAT??\n";
 8000d26:	a810      	add	r0, sp, #64	@ 0x40
 8000d28:	f005 fdb9 	bl	800689e <memcpy>
				serialPrintString(s);
 8000d2c:	a810      	add	r0, sp, #64	@ 0x40
 8000d2e:	f000 fb2f 	bl	8001390 <serialPrintString>
			commandRecieved = FALSE;
 8000d32:	2200      	movs	r2, #0
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <main+0x768>)
 8000d36:	701a      	strb	r2, [r3, #0]
		ccr1 = TIM1->CCR1;
 8000d38:	4923      	ldr	r1, [pc, #140]	@ (8000dc8 <main+0x770>)
 8000d3a:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <main+0x774>)
 8000d3c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8000d3e:	801a      	strh	r2, [r3, #0]
		ccr2 = TIM1->CCR2;
 8000d40:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <main+0x778>)
 8000d44:	801a      	strh	r2, [r3, #0]
		ccr3 = TIM1->CCR3;
 8000d46:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <main+0x77c>)
 8000d4a:	801a      	strh	r2, [r3, #0]
		if (!cutoff) {	// if the robot is not in cutoff
 8000d4c:	e6c0      	b.n	8000ad0 <main+0x478>
					setServoAngle(S1, getChannelValuePercentage(s1Channel));	// servo 1 attached to channel s1Channel
 8000d4e:	f000 f995 	bl	800107c <getChannelValuePercentage>
 8000d52:	0001      	movs	r1, r0
 8000d54:	e762      	b.n	8000c1c <main+0x5c4>
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	200006b4 	.word	0x200006b4
 8000d5c:	40000400 	.word	0x40000400
 8000d60:	2000066c 	.word	0x2000066c
 8000d64:	20000798 	.word	0x20000798
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	2000054a 	.word	0x2000054a
 8000d70:	20000006 	.word	0x20000006
 8000d74:	20000547 	.word	0x20000547
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	20000624 	.word	0x20000624
 8000d80:	20000007 	.word	0x20000007
 8000d84:	20000011 	.word	0x20000011
 8000d88:	20000010 	.word	0x20000010
 8000d8c:	2000000f 	.word	0x2000000f
 8000d90:	20000543 	.word	0x20000543
 8000d94:	2000054f 	.word	0x2000054f
 8000d98:	20000542 	.word	0x20000542
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000549 	.word	0x20000549
 8000da4:	2000000e 	.word	0x2000000e
 8000da8:	2000000d 	.word	0x2000000d
 8000dac:	2000054c 	.word	0x2000054c
 8000db0:	20000548 	.word	0x20000548
 8000db4:	0000270f 	.word	0x0000270f
 8000db8:	20000005 	.word	0x20000005
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	2000054e 	.word	0x2000054e
 8000dc4:	080078f4 	.word	0x080078f4
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	20000540 	.word	0x20000540
 8000dd0:	2000053e 	.word	0x2000053e
 8000dd4:	2000053c 	.word	0x2000053c
			disableMotor(M1);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 f8f1 	bl	8000fc0 <disableMotor>
			disableMotor(M2);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f000 f8ee 	bl	8000fc0 <disableMotor>
			disableMotor(M3);
 8000de4:	2002      	movs	r0, #2
 8000de6:	f000 f8eb 	bl	8000fc0 <disableMotor>
			setServoAngle(S1, 0);	// servo 1 attached to channel s1Channel
 8000dea:	2100      	movs	r1, #0
 8000dec:	0008      	movs	r0, r1
 8000dee:	f000 fa45 	bl	800127c <setServoAngle>
			setServoAngle(S2, 0);
 8000df2:	2100      	movs	r1, #0
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 fa41 	bl	800127c <setServoAngle>
			if (HAL_GetTick() - time1 >= 100) {
 8000dfa:	f001 f98b 	bl	8002114 <HAL_GetTick>
 8000dfe:	1bc0      	subs	r0, r0, r7
 8000e00:	2863      	cmp	r0, #99	@ 0x63
 8000e02:	d985      	bls.n	8000d10 <main+0x6b8>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	4808      	ldr	r0, [pc, #32]	@ (8000e28 <main+0x7d0>)
 8000e08:	0209      	lsls	r1, r1, #8
 8000e0a:	f001 fd73 	bl	80028f4 <HAL_GPIO_TogglePin>
				makeSound(mLeft, 100);	// beep while in cutoff mode
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <main+0x7d4>)
 8000e10:	2164      	movs	r1, #100	@ 0x64
 8000e12:	7818      	ldrb	r0, [r3, #0]
 8000e14:	f000 f90e 	bl	8001034 <makeSound>
				time1 = HAL_GetTick();
 8000e18:	f001 f97c 	bl	8002114 <HAL_GetTick>
 8000e1c:	0007      	movs	r7, r0
 8000e1e:	e777      	b.n	8000d10 <main+0x6b8>
				uint8_t s[] = "\nWHAT??\n";
 8000e20:	2209      	movs	r2, #9
 8000e22:	4903      	ldr	r1, [pc, #12]	@ (8000e30 <main+0x7d8>)
 8000e24:	e77f      	b.n	8000d26 <main+0x6ce>
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	20000543 	.word	0x20000543
 8000e30:	080078f9 	.word	0x080078f9

08000e34 <map>:
int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	001d      	movs	r5, r3
 8000e38:	ab04      	add	r3, sp, #16
 8000e3a:	2400      	movs	r4, #0
 8000e3c:	5f1c      	ldrsh	r4, [r3, r4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e3e:	1a43      	subs	r3, r0, r1
 8000e40:	1b60      	subs	r0, r4, r5
 8000e42:	4358      	muls	r0, r3
 8000e44:	1a51      	subs	r1, r2, r1
 8000e46:	f7ff fa19 	bl	800027c <__divsi3>
 8000e4a:	1940      	adds	r0, r0, r5
 8000e4c:	b200      	sxth	r0, r0
}
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}

08000e50 <Error_Handler>:
 8000e50:	b672      	cpsid	i
	while (1) {
 8000e52:	e7fe      	b.n	8000e52 <Error_Handler+0x2>

08000e54 <initMotors>:

extern uint8_t m1Rev;
extern uint8_t m2Rev;
extern uint8_t m3Rev;

void initMotors() {
 8000e54:	b510      	push	{r4, lr}
	initDMApwm();
 8000e56:	f7ff fb31 	bl	80004bc <initDMApwm>
}
 8000e5a:	bd10      	pop	{r4, pc}

08000e5c <getMotorRev>:
	// set the speed of the motors
	setMotorSpeedBidirectional(mLeft, t.speedL);
	setMotorSpeedBidirectional(mRight, t.speedR);
}

uint8_t getMotorRev(uint8_t motorN) {	// return 1 if the motorN is reversed, else 0
 8000e5c:	0003      	movs	r3, r0
	uint8_t isRev = 0;
	switch (motorN) {
 8000e5e:	2801      	cmp	r0, #1
 8000e60:	d007      	beq.n	8000e72 <getMotorRev+0x16>
 8000e62:	2802      	cmp	r0, #2
 8000e64:	d007      	beq.n	8000e76 <getMotorRev+0x1a>
 8000e66:	2000      	movs	r0, #0
 8000e68:	4283      	cmp	r3, r0
 8000e6a:	d101      	bne.n	8000e70 <getMotorRev+0x14>
		case M1:
			isRev = m1Rev;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <getMotorRev+0x20>)
			break;
		case M2:
			isRev = m2Rev;
			break;
		case M3:
			isRev = m3Rev;
 8000e6e:	7818      	ldrb	r0, [r3, #0]
			break;
	}
	return isRev;
}
 8000e70:	4770      	bx	lr
			isRev = m2Rev;
 8000e72:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <getMotorRev+0x24>)
 8000e74:	e7fb      	b.n	8000e6e <getMotorRev+0x12>
			isRev = m3Rev;
 8000e76:	4b03      	ldr	r3, [pc, #12]	@ (8000e84 <getMotorRev+0x28>)
 8000e78:	e7f9      	b.n	8000e6e <getMotorRev+0x12>
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	2000000b 	.word	0x2000000b
 8000e80:	2000000a 	.word	0x2000000a
 8000e84:	20000546 	.word	0x20000546

08000e88 <calculateSpeedWithDeadZoneDouble>:
 *  max -3, min +3
 *	change the deadzone value according your needs
 */
uint8_t calculateSpeedWithDeadZoneDouble(uint8_t speed) {
	uint8_t returnValue = speed;
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8000e88:	2809      	cmp	r0, #9
 8000e8a:	d903      	bls.n	8000e94 <calculateSpeedWithDeadZoneDouble+0xc>
	if (speed > 100 - DEADZONE) returnValue = 100;	// upper deadzone
 8000e8c:	285a      	cmp	r0, #90	@ 0x5a
 8000e8e:	d900      	bls.n	8000e92 <calculateSpeedWithDeadZoneDouble+0xa>
 8000e90:	2064      	movs	r0, #100	@ 0x64
	return returnValue;
}
 8000e92:	4770      	bx	lr
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8000e94:	2000      	movs	r0, #0
 8000e96:	e7fc      	b.n	8000e92 <calculateSpeedWithDeadZoneDouble+0xa>

08000e98 <setMotorSpeedBidirectional>:
void setMotorSpeedBidirectional(uint8_t motorN, int8_t speed) {
 8000e98:	b570      	push	{r4, r5, r6, lr}
 8000e9a:	0005      	movs	r5, r0
	speed = calculateSpeedWithDeadZoneDouble(speed);
 8000e9c:	b2c8      	uxtb	r0, r1
 8000e9e:	f7ff fff3 	bl	8000e88 <calculateSpeedWithDeadZoneDouble>
	speed = (speed - MAX_SPEED_VALUE / 2) * 2;
 8000ea2:	b244      	sxtb	r4, r0
 8000ea4:	3c32      	subs	r4, #50	@ 0x32
 8000ea6:	0064      	lsls	r4, r4, #1
 8000ea8:	b264      	sxtb	r4, r4
	if (speed == 0) {
 8000eaa:	2c00      	cmp	r4, #0
 8000eac:	d127      	bne.n	8000efe <setMotorSpeedBidirectional+0x66>
		switch (motorN) {
 8000eae:	2d01      	cmp	r5, #1
 8000eb0:	d011      	beq.n	8000ed6 <setMotorSpeedBidirectional+0x3e>
 8000eb2:	2d02      	cmp	r5, #2
 8000eb4:	d019      	beq.n	8000eea <setMotorSpeedBidirectional+0x52>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	d10c      	bne.n	8000ed4 <setMotorSpeedBidirectional+0x3c>
				setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE);
 8000eba:	2264      	movs	r2, #100	@ 0x64
 8000ebc:	2180      	movs	r1, #128	@ 0x80
 8000ebe:	4835      	ldr	r0, [pc, #212]	@ (8000f94 <setMotorSpeedBidirectional+0xfc>)
 8000ec0:	0209      	lsls	r1, r1, #8
 8000ec2:	f7ff fad9 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, MAX_DMA_PWM_VALUE);
 8000ec6:	2264      	movs	r2, #100	@ 0x64
 8000ec8:	2180      	movs	r1, #128	@ 0x80
 8000eca:	0049      	lsls	r1, r1, #1
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 8000ecc:	2090      	movs	r0, #144	@ 0x90
 8000ece:	05c0      	lsls	r0, r0, #23
 8000ed0:	f7ff fad2 	bl	8000478 <setDMApwmDuty>
}
 8000ed4:	bd70      	pop	{r4, r5, r6, pc}
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8000ed6:	2180      	movs	r1, #128	@ 0x80
 8000ed8:	2264      	movs	r2, #100	@ 0x64
 8000eda:	482e      	ldr	r0, [pc, #184]	@ (8000f94 <setMotorSpeedBidirectional+0xfc>)
 8000edc:	0189      	lsls	r1, r1, #6
 8000ede:	f7ff facb 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE);
 8000ee2:	2264      	movs	r2, #100	@ 0x64
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE);
 8000ee4:	2180      	movs	r1, #128	@ 0x80
 8000ee6:	0089      	lsls	r1, r1, #2
 8000ee8:	e7f0      	b.n	8000ecc <setMotorSpeedBidirectional+0x34>
				setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE);
 8000eea:	2180      	movs	r1, #128	@ 0x80
 8000eec:	2264      	movs	r2, #100	@ 0x64
 8000eee:	4829      	ldr	r0, [pc, #164]	@ (8000f94 <setMotorSpeedBidirectional+0xfc>)
 8000ef0:	0109      	lsls	r1, r1, #4
 8000ef2:	f7ff fac1 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 8000ef6:	2264      	movs	r2, #100	@ 0x64
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	00c9      	lsls	r1, r1, #3
 8000efc:	e7e6      	b.n	8000ecc <setMotorSpeedBidirectional+0x34>
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000efe:	0028      	movs	r0, r5
 8000f00:	f7ff ffac 	bl	8000e5c <getMotorRev>
 8000f04:	0fe3      	lsrs	r3, r4, #31
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d101      	bne.n	8000f0e <setMotorSpeedBidirectional+0x76>
	if (speed >= 0)
 8000f0a:	43e3      	mvns	r3, r4
 8000f0c:	0fdb      	lsrs	r3, r3, #31
	uint8_t sp = abs(speed);
 8000f0e:	17e2      	asrs	r2, r4, #31
 8000f10:	18a4      	adds	r4, r4, r2
 8000f12:	4054      	eors	r4, r2
 8000f14:	b2e4      	uxtb	r4, r4
	switch (motorN) {
 8000f16:	2d01      	cmp	r5, #1
 8000f18:	d011      	beq.n	8000f3e <setMotorSpeedBidirectional+0xa6>
 8000f1a:	2d02      	cmp	r5, #2
 8000f1c:	d024      	beq.n	8000f68 <setMotorSpeedBidirectional+0xd0>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	d1d8      	bne.n	8000ed4 <setMotorSpeedBidirectional+0x3c>
				setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f22:	3564      	adds	r5, #100	@ 0x64
 8000f24:	1b2c      	subs	r4, r5, r4
 8000f26:	b2a4      	uxth	r4, r4
				setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f28:	0022      	movs	r2, r4
			if (dir == TRUE) {
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0c6      	beq.n	8000ebc <setMotorSpeedBidirectional+0x24>
				setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE);
 8000f2e:	2180      	movs	r1, #128	@ 0x80
 8000f30:	002a      	movs	r2, r5
 8000f32:	4818      	ldr	r0, [pc, #96]	@ (8000f94 <setMotorSpeedBidirectional+0xfc>)
 8000f34:	0209      	lsls	r1, r1, #8
 8000f36:	f7ff fa9f 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f3a:	0022      	movs	r2, r4
 8000f3c:	e7c4      	b.n	8000ec8 <setMotorSpeedBidirectional+0x30>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f3e:	2564      	movs	r5, #100	@ 0x64
 8000f40:	1b2c      	subs	r4, r5, r4
 8000f42:	b2a4      	uxth	r4, r4
			if (dir == TRUE) {
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d007      	beq.n	8000f58 <setMotorSpeedBidirectional+0xc0>
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8000f48:	2180      	movs	r1, #128	@ 0x80
 8000f4a:	002a      	movs	r2, r5
 8000f4c:	4811      	ldr	r0, [pc, #68]	@ (8000f94 <setMotorSpeedBidirectional+0xfc>)
 8000f4e:	0189      	lsls	r1, r1, #6
 8000f50:	f7ff fa92 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f54:	0022      	movs	r2, r4
 8000f56:	e7c5      	b.n	8000ee4 <setMotorSpeedBidirectional+0x4c>
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f58:	2180      	movs	r1, #128	@ 0x80
 8000f5a:	0022      	movs	r2, r4
 8000f5c:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <setMotorSpeedBidirectional+0xfc>)
 8000f5e:	0189      	lsls	r1, r1, #6
 8000f60:	f7ff fa8a 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE);
 8000f64:	002a      	movs	r2, r5
 8000f66:	e7bd      	b.n	8000ee4 <setMotorSpeedBidirectional+0x4c>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f68:	2564      	movs	r5, #100	@ 0x64
 8000f6a:	1b2c      	subs	r4, r5, r4
 8000f6c:	b2a4      	uxth	r4, r4
			if (dir == TRUE) {
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d007      	beq.n	8000f82 <setMotorSpeedBidirectional+0xea>
				setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE);
 8000f72:	2180      	movs	r1, #128	@ 0x80
 8000f74:	002a      	movs	r2, r5
 8000f76:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <setMotorSpeedBidirectional+0xfc>)
 8000f78:	0109      	lsls	r1, r1, #4
 8000f7a:	f7ff fa7d 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f7e:	0022      	movs	r2, r4
 8000f80:	e7ba      	b.n	8000ef8 <setMotorSpeedBidirectional+0x60>
				setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	0022      	movs	r2, r4
 8000f86:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <setMotorSpeedBidirectional+0xfc>)
 8000f88:	0109      	lsls	r1, r1, #4
 8000f8a:	f7ff fa75 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 8000f8e:	002a      	movs	r2, r5
 8000f90:	e7b2      	b.n	8000ef8 <setMotorSpeedBidirectional+0x60>
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	48000400 	.word	0x48000400

08000f98 <setTankMotor>:
void setTankMotor(TankMotors t) {
 8000f98:	b513      	push	{r0, r1, r4, lr}
	setMotorSpeedBidirectional(mLeft, t.speedL);
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <setTankMotor+0x20>)
void setTankMotor(TankMotors t) {
 8000f9c:	ac01      	add	r4, sp, #4
 8000f9e:	8020      	strh	r0, [r4, #0]
	setMotorSpeedBidirectional(mLeft, t.speedL);
 8000fa0:	b241      	sxtb	r1, r0
 8000fa2:	7818      	ldrb	r0, [r3, #0]
 8000fa4:	f7ff ff78 	bl	8000e98 <setMotorSpeedBidirectional>
	setMotorSpeedBidirectional(mRight, t.speedR);
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <setTankMotor+0x24>)
 8000fac:	5661      	ldrsb	r1, [r4, r1]
 8000fae:	7818      	ldrb	r0, [r3, #0]
 8000fb0:	f7ff ff72 	bl	8000e98 <setMotorSpeedBidirectional>
}
 8000fb4:	bd13      	pop	{r0, r1, r4, pc}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	20000543 	.word	0x20000543
 8000fbc:	20000009 	.word	0x20000009

08000fc0 <disableMotor>:
		}
	}
	disableMotor(motorN);
}

void disableMotor(uint8_t motorN) {
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	b510      	push	{r4, lr}
	switch (motorN) {
 8000fc4:	2801      	cmp	r0, #1
 8000fc6:	d009      	beq.n	8000fdc <disableMotor+0x1c>
 8000fc8:	2802      	cmp	r0, #2
 8000fca:	d00b      	beq.n	8000fe4 <disableMotor+0x24>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d104      	bne.n	8000fda <disableMotor+0x1a>
		case M1:
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, FALSE);
 8000fd0:	2180      	movs	r1, #128	@ 0x80
 8000fd2:	01c9      	lsls	r1, r1, #7
			break;
		case M2:
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
			break;
		case M3:
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <disableMotor+0x2c>)
 8000fd6:	f001 fc87 	bl	80028e8 <HAL_GPIO_WritePin>
			break;
	}
}
 8000fda:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	2200      	movs	r2, #0
 8000fe0:	0149      	lsls	r1, r1, #5
 8000fe2:	e7f7      	b.n	8000fd4 <disableMotor+0x14>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 8000fe4:	2180      	movs	r1, #128	@ 0x80
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	00c9      	lsls	r1, r1, #3
 8000fea:	e7f3      	b.n	8000fd4 <disableMotor+0x14>
 8000fec:	48000400 	.word	0x48000400

08000ff0 <enableMotor>:

void enableMotor(uint8_t motorN) {
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	b510      	push	{r4, lr}
	switch (motorN) {
 8000ff4:	2801      	cmp	r0, #1
 8000ff6:	d00a      	beq.n	800100e <enableMotor+0x1e>
 8000ff8:	2802      	cmp	r0, #2
 8000ffa:	d00b      	beq.n	8001014 <enableMotor+0x24>
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	d105      	bne.n	800100c <enableMotor+0x1c>
		case M1:
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
 8001000:	2180      	movs	r1, #128	@ 0x80
 8001002:	3201      	adds	r2, #1
 8001004:	01c9      	lsls	r1, r1, #7
			break;
		case M2:
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
			break;
		case M3:
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 8001006:	4805      	ldr	r0, [pc, #20]	@ (800101c <enableMotor+0x2c>)
 8001008:	f001 fc6e 	bl	80028e8 <HAL_GPIO_WritePin>
			break;
	}
}
 800100c:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
 800100e:	2180      	movs	r1, #128	@ 0x80
 8001010:	0149      	lsls	r1, r1, #5
 8001012:	e7f8      	b.n	8001006 <enableMotor+0x16>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	2201      	movs	r2, #1
 8001018:	00c9      	lsls	r1, r1, #3
 800101a:	e7f4      	b.n	8001006 <enableMotor+0x16>
 800101c:	48000400 	.word	0x48000400

08001020 <setMotorSpeedUnidirectional>:
void setMotorSpeedUnidirectional(uint8_t motorN, int8_t speed) {
 8001020:	b510      	push	{r4, lr}
	if (speed == 0) {
 8001022:	2900      	cmp	r1, #0
 8001024:	d102      	bne.n	800102c <setMotorSpeedUnidirectional+0xc>
		disableMotor(motorN);
 8001026:	f7ff ffcb 	bl	8000fc0 <disableMotor>
}
 800102a:	bd10      	pop	{r4, pc}
		enableMotor(motorN);
 800102c:	f7ff ffe0 	bl	8000ff0 <enableMotor>
	switch (motorN) {
 8001030:	e7fb      	b.n	800102a <setMotorSpeedUnidirectional+0xa>
	...

08001034 <makeSound>:
void makeSound(uint8_t motorN, uint8_t duration) {
 8001034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001036:	0004      	movs	r4, r0
 8001038:	000e      	movs	r6, r1
	uint32_t time = HAL_GetTick();
 800103a:	f001 f86b 	bl	8002114 <HAL_GetTick>
 800103e:	0005      	movs	r5, r0
	enableMotor(motorN);
 8001040:	0020      	movs	r0, r4
 8001042:	f7ff ffd5 	bl	8000ff0 <enableMotor>
				TIM1->CCR2 = 2;
 8001046:	2702      	movs	r7, #2
	while (HAL_GetTick() <= time + duration) {
 8001048:	f001 f864 	bl	8002114 <HAL_GetTick>
 800104c:	1973      	adds	r3, r6, r5
 800104e:	4298      	cmp	r0, r3
 8001050:	d903      	bls.n	800105a <makeSound+0x26>
	disableMotor(motorN);
 8001052:	0020      	movs	r0, r4
 8001054:	f7ff ffb4 	bl	8000fc0 <disableMotor>
}
 8001058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (motorN) {
 800105a:	2c01      	cmp	r4, #1
 800105c:	d006      	beq.n	800106c <makeSound+0x38>
 800105e:	2c02      	cmp	r4, #2
 8001060:	d007      	beq.n	8001072 <makeSound+0x3e>
 8001062:	2c00      	cmp	r4, #0
 8001064:	d1f0      	bne.n	8001048 <makeSound+0x14>
				TIM1->CCR1 = 2;
 8001066:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <makeSound+0x44>)
 8001068:	635f      	str	r7, [r3, #52]	@ 0x34
				break;
 800106a:	e7ed      	b.n	8001048 <makeSound+0x14>
				TIM1->CCR2 = 2;
 800106c:	4b02      	ldr	r3, [pc, #8]	@ (8001078 <makeSound+0x44>)
 800106e:	639f      	str	r7, [r3, #56]	@ 0x38
				break;
 8001070:	e7ea      	b.n	8001048 <makeSound+0x14>
				TIM1->CCR3 = 2;
 8001072:	4b01      	ldr	r3, [pc, #4]	@ (8001078 <makeSound+0x44>)
 8001074:	63dc      	str	r4, [r3, #60]	@ 0x3c
				break;
 8001076:	e7e7      	b.n	8001048 <makeSound+0x14>
 8001078:	40012c00 	.word	0x40012c00

0800107c <getChannelValuePercentage>:
//		}
//	}
//}

uint8_t getChannelValuePercentage(uint8_t channelNumber) {
	int temp = (reciever_channels[channelNumber] - 1000) / 10;
 800107c:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <getChannelValuePercentage+0x28>)
 800107e:	0040      	lsls	r0, r0, #1
 8001080:	5ac3      	ldrh	r3, [r0, r3]
	if (temp > 100) temp = 100;
 8001082:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <getChannelValuePercentage+0x2c>)
 8001084:	2064      	movs	r0, #100	@ 0x64
uint8_t getChannelValuePercentage(uint8_t channelNumber) {
 8001086:	b510      	push	{r4, lr}
	if (temp > 100) temp = 100;
 8001088:	4293      	cmp	r3, r2
 800108a:	d808      	bhi.n	800109e <getChannelValuePercentage+0x22>
	if (temp < 0) temp = 0;
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <getChannelValuePercentage+0x30>)
 800108e:	2000      	movs	r0, #0
 8001090:	4293      	cmp	r3, r2
 8001092:	d904      	bls.n	800109e <getChannelValuePercentage+0x22>
	int temp = (reciever_channels[channelNumber] - 1000) / 10;
 8001094:	4a06      	ldr	r2, [pc, #24]	@ (80010b0 <getChannelValuePercentage+0x34>)
 8001096:	210a      	movs	r1, #10
 8001098:	1898      	adds	r0, r3, r2
 800109a:	f7ff f8ef 	bl	800027c <__divsi3>
	return temp;
 800109e:	b2c0      	uxtb	r0, r0
}
 80010a0:	bd10      	pop	{r4, pc}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	200007da 	.word	0x200007da
 80010a8:	000007d9 	.word	0x000007d9
 80010ac:	000003de 	.word	0x000003de
 80010b0:	fffffc18 	.word	0xfffffc18

080010b4 <initReciever>:

//void initRecieverPPM(TIM_HandleTypeDef *htim) {
//	HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_3);
//}

void initReciever(TIM_HandleTypeDef *htim) {
 80010b4:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(htim);
 80010b6:	f003 fa2d 	bl	8004514 <HAL_TIM_Base_Start>
}
 80010ba:	bd10      	pop	{r4, pc}

080010bc <HAL_GPIO_EXTI_Callback>:

uint8_t aligned = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (recieverIsPWM) {
 80010bc:	4b4a      	ldr	r3, [pc, #296]	@ (80011e8 <HAL_GPIO_EXTI_Callback+0x12c>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010be:	b570      	push	{r4, r5, r6, lr}
	if (recieverIsPWM) {
 80010c0:	681b      	ldr	r3, [r3, #0]
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010c2:	0004      	movs	r4, r0
	if (recieverIsPWM) {
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d100      	bne.n	80010ca <HAL_GPIO_EXTI_Callback+0xe>
 80010c8:	e069      	b.n	800119e <HAL_GPIO_EXTI_Callback+0xe2>
		// channel 1
		if (GPIO_Pin == CH1_Pin) {
 80010ca:	4d48      	ldr	r5, [pc, #288]	@ (80011ec <HAL_GPIO_EXTI_Callback+0x130>)
 80010cc:	2801      	cmp	r0, #1
 80010ce:	d10f      	bne.n	80010f0 <HAL_GPIO_EXTI_Callback+0x34>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 1) {	// rising edge
 80010d0:	0001      	movs	r1, r0
 80010d2:	4847      	ldr	r0, [pc, #284]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x134>)
 80010d4:	f001 fc02 	bl	80028dc <HAL_GPIO_ReadPin>
 80010d8:	4b46      	ldr	r3, [pc, #280]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x138>)
 80010da:	2801      	cmp	r0, #1
 80010dc:	d116      	bne.n	800110c <HAL_GPIO_EXTI_Callback+0x50>
				aligned = 0;
 80010de:	2200      	movs	r2, #0
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 80010e0:	681b      	ldr	r3, [r3, #0]
				aligned = HAL_GPIO_ReadPin(CH2_GPIO_Port, CH2_Pin);	// if the second channel are high means that all the channels are aligned
 80010e2:	2102      	movs	r1, #2
 80010e4:	4842      	ldr	r0, [pc, #264]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x134>)
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 80010e6:	625a      	str	r2, [r3, #36]	@ 0x24
				aligned = 0;
 80010e8:	702a      	strb	r2, [r5, #0]
				aligned = HAL_GPIO_ReadPin(CH2_GPIO_Port, CH2_Pin);	// if the second channel are high means that all the channels are aligned
 80010ea:	f001 fbf7 	bl	80028dc <HAL_GPIO_ReadPin>
 80010ee:	7028      	strb	r0, [r5, #0]
			} else {	// falling edge
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[1] = usWidth;
			}
		}
		if (aligned) {
 80010f0:	782b      	ldrb	r3, [r5, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d028      	beq.n	8001148 <HAL_GPIO_EXTI_Callback+0x8c>
			// channel 2 (only falling, because it starts with ch1)
			if (GPIO_Pin == CH2_Pin) {
 80010f6:	2c02      	cmp	r4, #2
 80010f8:	d110      	bne.n	800111c <HAL_GPIO_EXTI_Callback+0x60>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80010fa:	4b3e      	ldr	r3, [pc, #248]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x138>)
 80010fc:	4a3e      	ldr	r2, [pc, #248]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x13c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	b29b      	uxth	r3, r3
 8001104:	8013      	strh	r3, [r2, #0]
				reciever_channels[2] = usWidth;
 8001106:	4a3d      	ldr	r2, [pc, #244]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x140>)
			}
		} else {	// not aligned, subtract channel 1 time from ch2 time etc.
			// channel 2 (only falling, because it starts after ch1)
			if (GPIO_Pin == CH2_Pin) {
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[2] = usWidth - (reciever_channels[1]);
 8001108:	8093      	strh	r3, [r2, #4]
			if (GPIO_Pin == CH3_Pin) {
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[3] = usWidth - (reciever_channels[1] + reciever_channels[2]);
			}
			// channel 4 (only falling, because it starts after ch3)
			if (GPIO_Pin == CH4_Pin) {
 800110a:	e01c      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a3a      	ldr	r2, [pc, #232]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001112:	b29b      	uxth	r3, r3
 8001114:	8013      	strh	r3, [r2, #0]
				reciever_channels[1] = usWidth;
 8001116:	4a39      	ldr	r2, [pc, #228]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x140>)
 8001118:	8053      	strh	r3, [r2, #2]
 800111a:	e7e9      	b.n	80010f0 <HAL_GPIO_EXTI_Callback+0x34>
			if (GPIO_Pin == CH3_Pin) {
 800111c:	2c04      	cmp	r4, #4
 800111e:	d108      	bne.n	8001132 <HAL_GPIO_EXTI_Callback+0x76>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001120:	4b34      	ldr	r3, [pc, #208]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001122:	4a35      	ldr	r2, [pc, #212]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	8013      	strh	r3, [r2, #0]
				reciever_channels[3] = usWidth;
 800112c:	4a33      	ldr	r2, [pc, #204]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x140>)
				reciever_channels[3] = usWidth - (reciever_channels[1] + reciever_channels[2]);
 800112e:	80d3      	strh	r3, [r2, #6]
			if (GPIO_Pin == CH4_Pin) {
 8001130:	e009      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
			if (GPIO_Pin == CH4_Pin) {
 8001132:	2c08      	cmp	r4, #8
 8001134:	d107      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001136:	4b2f      	ldr	r3, [pc, #188]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001138:	4a2f      	ldr	r2, [pc, #188]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x13c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113e:	b29b      	uxth	r3, r3
 8001140:	8013      	strh	r3, [r2, #0]
				reciever_channels[4] = usWidth;
 8001142:	4a2e      	ldr	r2, [pc, #184]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x140>)
 8001144:	8113      	strh	r3, [r2, #8]
					}
				}
			}
		}
	}
}
 8001146:	bd70      	pop	{r4, r5, r6, pc}
			if (GPIO_Pin == CH2_Pin) {
 8001148:	2c02      	cmp	r4, #2
 800114a:	d109      	bne.n	8001160 <HAL_GPIO_EXTI_Callback+0xa4>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 800114c:	4b29      	ldr	r3, [pc, #164]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x138>)
 800114e:	4a2a      	ldr	r2, [pc, #168]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001154:	b29b      	uxth	r3, r3
 8001156:	8013      	strh	r3, [r2, #0]
				reciever_channels[2] = usWidth - (reciever_channels[1]);
 8001158:	4a28      	ldr	r2, [pc, #160]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x140>)
 800115a:	8851      	ldrh	r1, [r2, #2]
 800115c:	1a5b      	subs	r3, r3, r1
 800115e:	e7d3      	b.n	8001108 <HAL_GPIO_EXTI_Callback+0x4c>
			if (GPIO_Pin == CH3_Pin) {
 8001160:	2c04      	cmp	r4, #4
 8001162:	d10b      	bne.n	800117c <HAL_GPIO_EXTI_Callback+0xc0>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001164:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001166:	4a24      	ldr	r2, [pc, #144]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116c:	b29b      	uxth	r3, r3
 800116e:	8013      	strh	r3, [r2, #0]
				reciever_channels[3] = usWidth - (reciever_channels[1] + reciever_channels[2]);
 8001170:	4a22      	ldr	r2, [pc, #136]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x140>)
 8001172:	8851      	ldrh	r1, [r2, #2]
 8001174:	8890      	ldrh	r0, [r2, #4]
 8001176:	1809      	adds	r1, r1, r0
 8001178:	1a5b      	subs	r3, r3, r1
 800117a:	e7d8      	b.n	800112e <HAL_GPIO_EXTI_Callback+0x72>
			if (GPIO_Pin == CH4_Pin) {
 800117c:	2c08      	cmp	r4, #8
 800117e:	d1e2      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001180:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x138>)
 8001182:	4a1d      	ldr	r2, [pc, #116]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001184:	681b      	ldr	r3, [r3, #0]
				reciever_channels[4] = usWidth - (reciever_channels[1] + reciever_channels[2] + reciever_channels[3]);
 8001186:	491d      	ldr	r1, [pc, #116]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x140>)
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118a:	b29b      	uxth	r3, r3
 800118c:	8013      	strh	r3, [r2, #0]
				reciever_channels[4] = usWidth - (reciever_channels[1] + reciever_channels[2] + reciever_channels[3]);
 800118e:	8888      	ldrh	r0, [r1, #4]
 8001190:	884a      	ldrh	r2, [r1, #2]
 8001192:	1812      	adds	r2, r2, r0
 8001194:	88c8      	ldrh	r0, [r1, #6]
 8001196:	1812      	adds	r2, r2, r0
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	810b      	strh	r3, [r1, #8]
 800119c:	e7d3      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
		if (GPIO_Pin == CH1_Pin) {
 800119e:	2801      	cmp	r0, #1
 80011a0:	d1d1      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 0) {
 80011a2:	0001      	movs	r1, r0
 80011a4:	4812      	ldr	r0, [pc, #72]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0x134>)
 80011a6:	f001 fb99 	bl	80028dc <HAL_GPIO_ReadPin>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d1cb      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80011ae:	4b11      	ldr	r3, [pc, #68]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0x138>)
 80011b0:	4911      	ldr	r1, [pc, #68]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0x13c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
				__HAL_TIM_SET_COUNTER(&htim6, 0);  // reset the counter
 80011b6:	6258      	str	r0, [r3, #36]	@ 0x24
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <HAL_GPIO_EXTI_Callback+0x144>)
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80011ba:	b292      	uxth	r2, r2
 80011bc:	800a      	strh	r2, [r1, #0]
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 80011be:	4911      	ldr	r1, [pc, #68]	@ (8001204 <HAL_GPIO_EXTI_Callback+0x148>)
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d903      	bls.n	80011cc <HAL_GPIO_EXTI_Callback+0x110>
					reciever_channels[0] = usWidth;	// store the separation pulse width
 80011c4:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x140>)
					channelToRead = 1;	// next channel is ch1
 80011c6:	700c      	strb	r4, [r1, #0]
					reciever_channels[0] = usWidth;	// store the separation pulse width
 80011c8:	801a      	strh	r2, [r3, #0]
					channelToRead = 1;	// next channel is ch1
 80011ca:	e7bc      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
					if (channelToRead != 0) {
 80011cc:	780b      	ldrb	r3, [r1, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0b9      	beq.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 80011d2:	005d      	lsls	r5, r3, #1
 80011d4:	4c09      	ldr	r4, [pc, #36]	@ (80011fc <HAL_GPIO_EXTI_Callback+0x140>)
						channelToRead++;
 80011d6:	3301      	adds	r3, #1
 80011d8:	b2db      	uxtb	r3, r3
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 80011da:	532a      	strh	r2, [r5, r4]
						if (channelToRead > NUMBER_OF_PPM_CHANNEL) {
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d801      	bhi.n	80011e4 <HAL_GPIO_EXTI_Callback+0x128>
						channelToRead++;
 80011e0:	700b      	strb	r3, [r1, #0]
 80011e2:	e7b0      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
							channelToRead = 0;
 80011e4:	7008      	strb	r0, [r1, #0]
}
 80011e6:	e7ae      	b.n	8001146 <HAL_GPIO_EXTI_Callback+0x8a>
 80011e8:	20000000 	.word	0x20000000
 80011ec:	200007d8 	.word	0x200007d8
 80011f0:	48000400 	.word	0x48000400
 80011f4:	2000066c 	.word	0x2000066c
 80011f8:	200007ec 	.word	0x200007ec
 80011fc:	200007da 	.word	0x200007da
 8001200:	00001194 	.word	0x00001194
 8001204:	20000012 	.word	0x20000012

08001208 <tankMix>:

TankMotors tankMix(uint8_t STchannel, uint8_t THchannel) {
 8001208:	b513      	push	{r0, r1, r4, lr}
	TankMotors t;
	int8_t st = (STchannel - 50) * 2;
	int8_t th = (THchannel - 50) * 2;
 800120a:	3932      	subs	r1, #50	@ 0x32
	int8_t st = (STchannel - 50) * 2;
 800120c:	3832      	subs	r0, #50	@ 0x32
	int8_t th = (THchannel - 50) * 2;
 800120e:	004b      	lsls	r3, r1, #1
	int8_t st = (STchannel - 50) * 2;
 8001210:	0040      	lsls	r0, r0, #1
	int16_t ml = th + st;	// mixing
 8001212:	b25b      	sxtb	r3, r3
 8001214:	b240      	sxtb	r0, r0
 8001216:	181c      	adds	r4, r3, r0
	if (ml < -100) ml = -100;
	if (mr > 100) mr = 100;
	if (mr < -100) mr = -100;
	t.speedL = (ml + 100) / 2;	// keep value inside 0 and 100
	t.speedR = (mr + 100) / 2;
	return t;
 8001218:	a901      	add	r1, sp, #4
	if (ml < -100) ml = -100;
 800121a:	1c22      	adds	r2, r4, #0
 800121c:	3464      	adds	r4, #100	@ 0x64
 800121e:	da01      	bge.n	8001224 <tankMix+0x1c>
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <tankMix+0x50>)
 8001222:	8812      	ldrh	r2, [r2, #0]
	t.speedL = (ml + 100) / 2;	// keep value inside 0 and 100
 8001224:	b214      	sxth	r4, r2
 8001226:	2c64      	cmp	r4, #100	@ 0x64
 8001228:	dd00      	ble.n	800122c <tankMix+0x24>
 800122a:	2264      	movs	r2, #100	@ 0x64
 800122c:	3264      	adds	r2, #100	@ 0x64
 800122e:	b212      	sxth	r2, r2
 8001230:	1052      	asrs	r2, r2, #1
	int16_t mr = th - st;	// mixing
 8001232:	1a1b      	subs	r3, r3, r0
	return t;
 8001234:	700a      	strb	r2, [r1, #0]
	if (mr < -100) mr = -100;
 8001236:	1c18      	adds	r0, r3, #0
 8001238:	3364      	adds	r3, #100	@ 0x64
 800123a:	da01      	bge.n	8001240 <tankMix+0x38>
 800123c:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <tankMix+0x50>)
 800123e:	8818      	ldrh	r0, [r3, #0]
	t.speedR = (mr + 100) / 2;
 8001240:	b203      	sxth	r3, r0
 8001242:	2b64      	cmp	r3, #100	@ 0x64
 8001244:	dd00      	ble.n	8001248 <tankMix+0x40>
 8001246:	2064      	movs	r0, #100	@ 0x64
 8001248:	3064      	adds	r0, #100	@ 0x64
 800124a:	05c3      	lsls	r3, r0, #23
	return t;
 800124c:	0e1b      	lsrs	r3, r3, #24
 800124e:	7808      	ldrb	r0, [r1, #0]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	4318      	orrs	r0, r3
}
 8001254:	bd16      	pop	{r1, r2, r4, pc}
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	08007902 	.word	0x08007902

0800125c <getServoRev>:
extern uint8_t s1Rev;
extern uint8_t s2Rev;

uint8_t getServoRev(uint8_t servoN) {	// return 1 if the motorN is reversed, else 0
	uint8_t isRev = 0;
	switch (servoN) {
 800125c:	2800      	cmp	r0, #0
 800125e:	d003      	beq.n	8001268 <getServoRev+0xc>
 8001260:	2801      	cmp	r0, #1
 8001262:	d004      	beq.n	800126e <getServoRev+0x12>
 8001264:	2000      	movs	r0, #0
		case S2:
			isRev = s2Rev;
			break;
	}
	return isRev;
}
 8001266:	4770      	bx	lr
			isRev = s1Rev;
 8001268:	4b02      	ldr	r3, [pc, #8]	@ (8001274 <getServoRev+0x18>)
			isRev = s2Rev;
 800126a:	7818      	ldrb	r0, [r3, #0]
			break;
 800126c:	e7fb      	b.n	8001266 <getServoRev+0xa>
			isRev = s2Rev;
 800126e:	4b02      	ldr	r3, [pc, #8]	@ (8001278 <getServoRev+0x1c>)
 8001270:	e7fb      	b.n	800126a <getServoRev+0xe>
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	20000545 	.word	0x20000545
 8001278:	20000544 	.word	0x20000544

0800127c <setServoAngle>:
 * P(us) = P * 1'000'000
 * factor = 10000/P(us)
 * if factor < 1 divide by the new factor
 * new factor = 1/factor
 */
void setServoAngle(uint8_t servoN, uint8_t percentage) {
 800127c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800127e:	0005      	movs	r5, r0
 8001280:	0008      	movs	r0, r1
	const uint8_t factor = 2;
	uint16_t temp = calculateSpeedWithDeadZoneDouble(percentage);
 8001282:	f7ff fe01 	bl	8000e88 <calculateSpeedWithDeadZoneDouble>
 8001286:	1c04      	adds	r4, r0, #0
 8001288:	2864      	cmp	r0, #100	@ 0x64
 800128a:	d900      	bls.n	800128e <setServoAngle+0x12>
 800128c:	2464      	movs	r4, #100	@ 0x64
	if (temp > 100) temp = 100;
	if (temp < 0) temp = 0;

	if (getServoRev(servoN)) temp = 100 - temp;	// take in count if the servo must be reversed or not
 800128e:	0028      	movs	r0, r5
 8001290:	b2a4      	uxth	r4, r4
 8001292:	f7ff ffe3 	bl	800125c <getServoRev>
 8001296:	2800      	cmp	r0, #0
 8001298:	d002      	beq.n	80012a0 <setServoAngle+0x24>
 800129a:	2364      	movs	r3, #100	@ 0x64
 800129c:	1b1c      	subs	r4, r3, r4
 800129e:	b2a4      	uxth	r4, r4

	switch (servoN) {
 80012a0:	2d00      	cmp	r5, #0
 80012a2:	d002      	beq.n	80012aa <setServoAngle+0x2e>
 80012a4:	2d01      	cmp	r5, #1
 80012a6:	d00f      	beq.n	80012c8 <setServoAngle+0x4c>
		case S2:
			temp = map(temp, 0, 100, S2_MIN_TIME_PWM, S2_MAX_TIME_PWM);
			TIM17->CCR1 = temp * factor;
			break;
	}
}
 80012a8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
			temp = map(temp, 0, 100, S1_MIN_TIME_PWM, S1_MAX_TIME_PWM);
 80012aa:	23fa      	movs	r3, #250	@ 0xfa
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	23fa      	movs	r3, #250	@ 0xfa
 80012b2:	2264      	movs	r2, #100	@ 0x64
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	0029      	movs	r1, r5
 80012b8:	b220      	sxth	r0, r4
 80012ba:	f7ff fdbb 	bl	8000e34 <map>
			TIM16->CCR1 = temp * factor;
 80012be:	4b09      	ldr	r3, [pc, #36]	@ (80012e4 <setServoAngle+0x68>)
 80012c0:	b280      	uxth	r0, r0
 80012c2:	0040      	lsls	r0, r0, #1
			TIM17->CCR1 = temp * factor;
 80012c4:	6358      	str	r0, [r3, #52]	@ 0x34
}
 80012c6:	e7ef      	b.n	80012a8 <setServoAngle+0x2c>
			temp = map(temp, 0, 100, S2_MIN_TIME_PWM, S2_MAX_TIME_PWM);
 80012c8:	2396      	movs	r3, #150	@ 0x96
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2388      	movs	r3, #136	@ 0x88
 80012d0:	2264      	movs	r2, #100	@ 0x64
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	2100      	movs	r1, #0
 80012d6:	b220      	sxth	r0, r4
 80012d8:	f7ff fdac 	bl	8000e34 <map>
			TIM17->CCR1 = temp * factor;
 80012dc:	b280      	uxth	r0, r0
 80012de:	4b02      	ldr	r3, [pc, #8]	@ (80012e8 <setServoAngle+0x6c>)
 80012e0:	0040      	lsls	r0, r0, #1
 80012e2:	e7ef      	b.n	80012c4 <setServoAngle+0x48>
 80012e4:	40014400 	.word	0x40014400
 80012e8:	40014800 	.word	0x40014800

080012ec <setServoIsEnable>:

void setServoIsEnable(uint8_t state, TIM_HandleTypeDef *htim){
 80012ec:	0003      	movs	r3, r0
 80012ee:	b510      	push	{r4, lr}
 80012f0:	0008      	movs	r0, r1
	if(state == TRUE){	// turn of the pwm generation
		HAL_TIMEx_PWMN_Start(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 80012f2:	2100      	movs	r1, #0
	if(state == TRUE){	// turn of the pwm generation
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d102      	bne.n	80012fe <setServoIsEnable+0x12>
		HAL_TIMEx_PWMN_Start(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 80012f8:	f003 fb96 	bl	8004a28 <HAL_TIMEx_PWMN_Start>
	}else{
		HAL_TIMEx_PWMN_Stop(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
	}
}
 80012fc:	bd10      	pop	{r4, pc}
		HAL_TIMEx_PWMN_Stop(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 80012fe:	f003 fb97 	bl	8004a30 <HAL_TIMEx_PWMN_Stop>
}
 8001302:	e7fb      	b.n	80012fc <setServoIsEnable+0x10>

08001304 <remove_all_chars>:
	strcpy(c.value, token);
	return c;
}

void remove_all_chars(char *str, char c) {
	char *pr = str, *pw = str;
 8001304:	0002      	movs	r2, r0
void remove_all_chars(char *str, char c) {
 8001306:	b510      	push	{r4, lr}
	while (*pr) {
 8001308:	7803      	ldrb	r3, [r0, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <remove_all_chars+0xe>
		*pw = *pr++;
		pw += (*pw != c);
	}
	*pw = '\0';
 800130e:	7013      	strb	r3, [r2, #0]
}
 8001310:	bd10      	pop	{r4, pc}
		*pw = *pr++;
 8001312:	7013      	strb	r3, [r2, #0]
		pw += (*pw != c);
 8001314:	1a5b      	subs	r3, r3, r1
 8001316:	1e5c      	subs	r4, r3, #1
 8001318:	41a3      	sbcs	r3, r4
		*pw = *pr++;
 800131a:	3001      	adds	r0, #1
		pw += (*pw != c);
 800131c:	18d2      	adds	r2, r2, r3
 800131e:	e7f3      	b.n	8001308 <remove_all_chars+0x4>

08001320 <decodeCommand>:
Command decodeCommand(char *buffer) {
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	0004      	movs	r4, r0
	char temp[strlen(buffer)];
 8001328:	0008      	movs	r0, r1
Command decodeCommand(char *buffer) {
 800132a:	000d      	movs	r5, r1
	char temp[strlen(buffer)];
 800132c:	f7fe fef6 	bl	800011c <strlen>
 8001330:	466a      	mov	r2, sp
 8001332:	3007      	adds	r0, #7
 8001334:	08c3      	lsrs	r3, r0, #3
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	469d      	mov	sp, r3
	strcpy(temp, buffer);
 800133c:	0029      	movs	r1, r5
 800133e:	4668      	mov	r0, sp
 8001340:	f005 faa5 	bl	800688e <strcpy>
	remove_all_chars(temp, ' ');	// remove all the spaces form the string
 8001344:	2120      	movs	r1, #32
 8001346:	4668      	mov	r0, sp
 8001348:	f7ff ffdc 	bl	8001304 <remove_all_chars>
	remove_all_chars(temp, '\n');	// remove all the spaces form the string
 800134c:	210a      	movs	r1, #10
 800134e:	4668      	mov	r0, sp
 8001350:	f7ff ffd8 	bl	8001304 <remove_all_chars>
	char *token = strtok(temp, COMMAND_TYPE_SEPARATOR);
 8001354:	4d0d      	ldr	r5, [pc, #52]	@ (800138c <decodeCommand+0x6c>)
 8001356:	4668      	mov	r0, sp
 8001358:	0029      	movs	r1, r5
 800135a:	f005 f9bd 	bl	80066d8 <strtok>
 800135e:	0001      	movs	r1, r0
	strcpy(c.type, token);
 8001360:	1d38      	adds	r0, r7, #4
 8001362:	f005 fa94 	bl	800688e <strcpy>
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 8001366:	0029      	movs	r1, r5
 8001368:	2000      	movs	r0, #0
 800136a:	f005 f9b5 	bl	80066d8 <strtok>
	strcpy(c.value, token);
 800136e:	230e      	movs	r3, #14
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 8001370:	0001      	movs	r1, r0
	strcpy(c.value, token);
 8001372:	18f8      	adds	r0, r7, r3
 8001374:	f005 fa8b 	bl	800688e <strcpy>
	return c;
 8001378:	2214      	movs	r2, #20
 800137a:	0020      	movs	r0, r4
 800137c:	1d39      	adds	r1, r7, #4
 800137e:	f005 fa8e 	bl	800689e <memcpy>
}
 8001382:	0020      	movs	r0, r4
 8001384:	46bd      	mov	sp, r7
 8001386:	b006      	add	sp, #24
 8001388:	bdb0      	pop	{r4, r5, r7, pc}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	08007904 	.word	0x08007904

08001390 <serialPrintString>:

void serialPrintString(uint8_t *s) {
 8001390:	b510      	push	{r4, lr}
 8001392:	0004      	movs	r4, r0
	CDC_Transmit_FS(s, strlen(s));
 8001394:	f7fe fec2 	bl	800011c <strlen>
 8001398:	b281      	uxth	r1, r0
 800139a:	0020      	movs	r0, r4
 800139c:	f004 fe08 	bl	8005fb0 <CDC_Transmit_FS>
}
 80013a0:	bd10      	pop	{r4, pc}
	...

080013a4 <read_byte_eeprom>:
	readSettingsFromEeprom();
}

uint8_t read_byte_eeprom(uint8_t address) {
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80013a4:	23fa      	movs	r3, #250	@ 0xfa
uint8_t read_byte_eeprom(uint8_t address) {
 80013a6:	b530      	push	{r4, r5, lr}
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80013a8:	009b      	lsls	r3, r3, #2
uint8_t read_byte_eeprom(uint8_t address) {
 80013aa:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80013ac:	2517      	movs	r5, #23
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	2301      	movs	r3, #1
 80013b2:	4c06      	ldr	r4, [pc, #24]	@ (80013cc <read_byte_eeprom+0x28>)
 80013b4:	446d      	add	r5, sp
uint8_t read_byte_eeprom(uint8_t address) {
 80013b6:	0002      	movs	r2, r0
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80013b8:	21a0      	movs	r1, #160	@ 0xa0
 80013ba:	0020      	movs	r0, r4
 80013bc:	9301      	str	r3, [sp, #4]
 80013be:	9500      	str	r5, [sp, #0]
 80013c0:	f001 fd16 	bl	8002df0 <HAL_I2C_Mem_Read>
	return data;
 80013c4:	7828      	ldrb	r0, [r5, #0]
}
 80013c6:	b007      	add	sp, #28
 80013c8:	bd30      	pop	{r4, r5, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	20000744 	.word	0x20000744

080013d0 <readSettingsFromEeprom>:
void readSettingsFromEeprom() {
 80013d0:	b510      	push	{r4, lr}
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 80013d2:	2400      	movs	r4, #0
void readSettingsFromEeprom() {
 80013d4:	b086      	sub	sp, #24
		dataRead[i] = read_byte_eeprom(i);
 80013d6:	b2e0      	uxtb	r0, r4
 80013d8:	f7ff ffe4 	bl	80013a4 <read_byte_eeprom>
 80013dc:	ab01      	add	r3, sp, #4
 80013de:	5518      	strb	r0, [r3, r4]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 80013e0:	3401      	adds	r4, #1
 80013e2:	2c14      	cmp	r4, #20
 80013e4:	d1f7      	bne.n	80013d6 <readSettingsFromEeprom+0x6>
	thChannel = dataRead[0];
 80013e6:	4a31      	ldr	r2, [pc, #196]	@ (80014ac <readSettingsFromEeprom+0xdc>)
 80013e8:	7819      	ldrb	r1, [r3, #0]
 80013ea:	7011      	strb	r1, [r2, #0]
	stChannel = dataRead[1];
 80013ec:	7859      	ldrb	r1, [r3, #1]
 80013ee:	4a30      	ldr	r2, [pc, #192]	@ (80014b0 <readSettingsFromEeprom+0xe0>)
 80013f0:	7011      	strb	r1, [r2, #0]
	wpChannel = dataRead[2];
 80013f2:	7899      	ldrb	r1, [r3, #2]
 80013f4:	4a2f      	ldr	r2, [pc, #188]	@ (80014b4 <readSettingsFromEeprom+0xe4>)
 80013f6:	7011      	strb	r1, [r2, #0]
	s1Channel = dataRead[3];
 80013f8:	78d9      	ldrb	r1, [r3, #3]
 80013fa:	4a2f      	ldr	r2, [pc, #188]	@ (80014b8 <readSettingsFromEeprom+0xe8>)
 80013fc:	7011      	strb	r1, [r2, #0]
	s2Channel = dataRead[4];
 80013fe:	7919      	ldrb	r1, [r3, #4]
 8001400:	4a2e      	ldr	r2, [pc, #184]	@ (80014bc <readSettingsFromEeprom+0xec>)
 8001402:	7011      	strb	r1, [r2, #0]
	armChannel = dataRead[5];
 8001404:	7959      	ldrb	r1, [r3, #5]
 8001406:	4a2e      	ldr	r2, [pc, #184]	@ (80014c0 <readSettingsFromEeprom+0xf0>)
 8001408:	7011      	strb	r1, [r2, #0]
	m1Rev = dataRead[6];
 800140a:	7999      	ldrb	r1, [r3, #6]
 800140c:	4a2d      	ldr	r2, [pc, #180]	@ (80014c4 <readSettingsFromEeprom+0xf4>)
 800140e:	7011      	strb	r1, [r2, #0]
	m2Rev = dataRead[7];
 8001410:	79d9      	ldrb	r1, [r3, #7]
 8001412:	4a2d      	ldr	r2, [pc, #180]	@ (80014c8 <readSettingsFromEeprom+0xf8>)
 8001414:	7011      	strb	r1, [r2, #0]
	m3Rev = dataRead[8];
 8001416:	7a19      	ldrb	r1, [r3, #8]
 8001418:	4a2c      	ldr	r2, [pc, #176]	@ (80014cc <readSettingsFromEeprom+0xfc>)
 800141a:	7011      	strb	r1, [r2, #0]
	s1Rev = dataRead[9];
 800141c:	7a59      	ldrb	r1, [r3, #9]
 800141e:	4a2c      	ldr	r2, [pc, #176]	@ (80014d0 <readSettingsFromEeprom+0x100>)
 8001420:	7011      	strb	r1, [r2, #0]
	s2Rev = dataRead[10];
 8001422:	7a99      	ldrb	r1, [r3, #10]
 8001424:	4a2b      	ldr	r2, [pc, #172]	@ (80014d4 <readSettingsFromEeprom+0x104>)
 8001426:	7011      	strb	r1, [r2, #0]
	switch (dataRead[11]) {	// control M1 at which motor is assigned
 8001428:	7ada      	ldrb	r2, [r3, #11]
 800142a:	2a01      	cmp	r2, #1
 800142c:	d010      	beq.n	8001450 <readSettingsFromEeprom+0x80>
 800142e:	2a02      	cmp	r2, #2
 8001430:	d012      	beq.n	8001458 <readSettingsFromEeprom+0x88>
 8001432:	2a00      	cmp	r2, #0
 8001434:	d101      	bne.n	800143a <readSettingsFromEeprom+0x6a>
			mLeft = M1;
 8001436:	4928      	ldr	r1, [pc, #160]	@ (80014d8 <readSettingsFromEeprom+0x108>)
 8001438:	700a      	strb	r2, [r1, #0]
	switch (dataRead[12]) {	// control M2 at which motor is assigned
 800143a:	7b1a      	ldrb	r2, [r3, #12]
 800143c:	2a01      	cmp	r2, #1
 800143e:	d00d      	beq.n	800145c <readSettingsFromEeprom+0x8c>
 8001440:	2a02      	cmp	r2, #2
 8001442:	d02b      	beq.n	800149c <readSettingsFromEeprom+0xcc>
 8001444:	2a00      	cmp	r2, #0
 8001446:	d10b      	bne.n	8001460 <readSettingsFromEeprom+0x90>
			mLeft = M2;
 8001448:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <readSettingsFromEeprom+0x108>)
			mWeapon = M2;
 800144a:	2101      	movs	r1, #1
 800144c:	7011      	strb	r1, [r2, #0]
			break;
 800144e:	e007      	b.n	8001460 <readSettingsFromEeprom+0x90>
			mRight = M1;
 8001450:	4a22      	ldr	r2, [pc, #136]	@ (80014dc <readSettingsFromEeprom+0x10c>)
			mWeapon = M1;
 8001452:	2100      	movs	r1, #0
 8001454:	7011      	strb	r1, [r2, #0]
			break;
 8001456:	e7f0      	b.n	800143a <readSettingsFromEeprom+0x6a>
			mWeapon = M1;
 8001458:	4a21      	ldr	r2, [pc, #132]	@ (80014e0 <readSettingsFromEeprom+0x110>)
 800145a:	e7fa      	b.n	8001452 <readSettingsFromEeprom+0x82>
			mRight = M2;
 800145c:	491f      	ldr	r1, [pc, #124]	@ (80014dc <readSettingsFromEeprom+0x10c>)
 800145e:	700a      	strb	r2, [r1, #0]
	switch (dataRead[13]) {	// control M3 at which motor is assigned
 8001460:	7b5a      	ldrb	r2, [r3, #13]
 8001462:	2a01      	cmp	r2, #1
 8001464:	d01c      	beq.n	80014a0 <readSettingsFromEeprom+0xd0>
 8001466:	2a02      	cmp	r2, #2
 8001468:	d01c      	beq.n	80014a4 <readSettingsFromEeprom+0xd4>
 800146a:	2a00      	cmp	r2, #0
 800146c:	d102      	bne.n	8001474 <readSettingsFromEeprom+0xa4>
			mLeft = M3;
 800146e:	4a1a      	ldr	r2, [pc, #104]	@ (80014d8 <readSettingsFromEeprom+0x108>)
			mRight = M3;
 8001470:	2102      	movs	r1, #2
 8001472:	7011      	strb	r1, [r2, #0]
	weaponDoubleDirection = dataRead[14];
 8001474:	7b99      	ldrb	r1, [r3, #14]
 8001476:	4a1b      	ldr	r2, [pc, #108]	@ (80014e4 <readSettingsFromEeprom+0x114>)
 8001478:	7011      	strb	r1, [r2, #0]
	tankMixIsON = dataRead[15];
 800147a:	7bd9      	ldrb	r1, [r3, #15]
 800147c:	4a1a      	ldr	r2, [pc, #104]	@ (80014e8 <readSettingsFromEeprom+0x118>)
 800147e:	7011      	strb	r1, [r2, #0]
	noDisarm = dataRead[16];
 8001480:	7c19      	ldrb	r1, [r3, #16]
 8001482:	4a1a      	ldr	r2, [pc, #104]	@ (80014ec <readSettingsFromEeprom+0x11c>)
 8001484:	7011      	strb	r1, [r2, #0]
	limitVoltage = dataRead[17];
 8001486:	7c59      	ldrb	r1, [r3, #17]
 8001488:	4a19      	ldr	r2, [pc, #100]	@ (80014f0 <readSettingsFromEeprom+0x120>)
 800148a:	7011      	strb	r1, [r2, #0]
	cutOffVoltage = dataRead[18];
 800148c:	7c99      	ldrb	r1, [r3, #18]
 800148e:	4a19      	ldr	r2, [pc, #100]	@ (80014f4 <readSettingsFromEeprom+0x124>)
 8001490:	7011      	strb	r1, [r2, #0]
	recieverIsPWM = dataRead[19];
 8001492:	7cdb      	ldrb	r3, [r3, #19]
 8001494:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <readSettingsFromEeprom+0x128>)
 8001496:	7013      	strb	r3, [r2, #0]
}
 8001498:	b006      	add	sp, #24
 800149a:	bd10      	pop	{r4, pc}
			mWeapon = M2;
 800149c:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <readSettingsFromEeprom+0x110>)
 800149e:	e7d4      	b.n	800144a <readSettingsFromEeprom+0x7a>
			mRight = M3;
 80014a0:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <readSettingsFromEeprom+0x10c>)
 80014a2:	e7e5      	b.n	8001470 <readSettingsFromEeprom+0xa0>
			mWeapon = M3;
 80014a4:	490e      	ldr	r1, [pc, #56]	@ (80014e0 <readSettingsFromEeprom+0x110>)
 80014a6:	700a      	strb	r2, [r1, #0]
			break;
 80014a8:	e7e4      	b.n	8001474 <readSettingsFromEeprom+0xa4>
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	20000011 	.word	0x20000011
 80014b0:	20000010 	.word	0x20000010
 80014b4:	2000000f 	.word	0x2000000f
 80014b8:	2000000e 	.word	0x2000000e
 80014bc:	2000000d 	.word	0x2000000d
 80014c0:	2000000c 	.word	0x2000000c
 80014c4:	2000000b 	.word	0x2000000b
 80014c8:	2000000a 	.word	0x2000000a
 80014cc:	20000546 	.word	0x20000546
 80014d0:	20000545 	.word	0x20000545
 80014d4:	20000544 	.word	0x20000544
 80014d8:	20000543 	.word	0x20000543
 80014dc:	20000009 	.word	0x20000009
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20000542 	.word	0x20000542
 80014e8:	20000007 	.word	0x20000007
 80014ec:	20000006 	.word	0x20000006
 80014f0:	20000005 	.word	0x20000005
 80014f4:	20000004 	.word	0x20000004
 80014f8:	20000000 	.word	0x20000000

080014fc <loadSettingsFromEeprom>:
void loadSettingsFromEeprom() {
 80014fc:	b510      	push	{r4, lr}
	readSettingsFromEeprom();
 80014fe:	f7ff ff67 	bl	80013d0 <readSettingsFromEeprom>
}
 8001502:	bd10      	pop	{r4, pc}

08001504 <write_byte_eeprom>:

void write_byte_eeprom(uint8_t address, uint8_t value) {
 8001504:	0002      	movs	r2, r0
	uint8_t data = value;
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001506:	23fa      	movs	r3, #250	@ 0xfa
	uint8_t data = value;
 8001508:	2017      	movs	r0, #23
void write_byte_eeprom(uint8_t address, uint8_t value) {
 800150a:	b510      	push	{r4, lr}
 800150c:	b086      	sub	sp, #24
	uint8_t data = value;
 800150e:	4468      	add	r0, sp
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001510:	009b      	lsls	r3, r3, #2
	uint8_t data = value;
 8001512:	7001      	strb	r1, [r0, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001514:	9302      	str	r3, [sp, #8]
 8001516:	2301      	movs	r3, #1
 8001518:	4c05      	ldr	r4, [pc, #20]	@ (8001530 <write_byte_eeprom+0x2c>)
 800151a:	21a0      	movs	r1, #160	@ 0xa0
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	9000      	str	r0, [sp, #0]
 8001520:	0020      	movs	r0, r4
 8001522:	f001 fb8b 	bl	8002c3c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8001526:	200a      	movs	r0, #10
 8001528:	f000 fdfa 	bl	8002120 <HAL_Delay>
}
 800152c:	b006      	add	sp, #24
 800152e:	bd10      	pop	{r4, pc}
 8001530:	20000744 	.word	0x20000744

08001534 <storeSettingsToEeprom>:
void storeSettingsToEeprom() {
 8001534:	b530      	push	{r4, r5, lr}
	dataToStore[0] = thChannel;
 8001536:	4b35      	ldr	r3, [pc, #212]	@ (800160c <storeSettingsToEeprom+0xd8>)
void storeSettingsToEeprom() {
 8001538:	b087      	sub	sp, #28
	dataToStore[0] = thChannel;
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	ac01      	add	r4, sp, #4
 800153e:	7023      	strb	r3, [r4, #0]
	dataToStore[1] = stChannel;
 8001540:	4b33      	ldr	r3, [pc, #204]	@ (8001610 <storeSettingsToEeprom+0xdc>)
 8001542:	2200      	movs	r2, #0
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	7063      	strb	r3, [r4, #1]
	dataToStore[2] = wpChannel;
 8001548:	4b32      	ldr	r3, [pc, #200]	@ (8001614 <storeSettingsToEeprom+0xe0>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	70a3      	strb	r3, [r4, #2]
	dataToStore[3] = s1Channel;
 800154e:	4b32      	ldr	r3, [pc, #200]	@ (8001618 <storeSettingsToEeprom+0xe4>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	70e3      	strb	r3, [r4, #3]
	dataToStore[4] = s2Channel;
 8001554:	4b31      	ldr	r3, [pc, #196]	@ (800161c <storeSettingsToEeprom+0xe8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	7123      	strb	r3, [r4, #4]
	dataToStore[5] = armChannel;
 800155a:	4b31      	ldr	r3, [pc, #196]	@ (8001620 <storeSettingsToEeprom+0xec>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	7163      	strb	r3, [r4, #5]
	dataToStore[6] = m1Rev;
 8001560:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <storeSettingsToEeprom+0xf0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	71a3      	strb	r3, [r4, #6]
	dataToStore[7] = m2Rev;
 8001566:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <storeSettingsToEeprom+0xf4>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	71e3      	strb	r3, [r4, #7]
	dataToStore[8] = m3Rev;
 800156c:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <storeSettingsToEeprom+0xf8>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	7223      	strb	r3, [r4, #8]
	dataToStore[9] = s1Rev;
 8001572:	4b2f      	ldr	r3, [pc, #188]	@ (8001630 <storeSettingsToEeprom+0xfc>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	7263      	strb	r3, [r4, #9]
	dataToStore[10] = s2Rev;
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <storeSettingsToEeprom+0x100>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	72a3      	strb	r3, [r4, #10]
	switch (mLeft) {	// mLeft is code 0
 800157e:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <storeSettingsToEeprom+0x104>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d034      	beq.n	80015f0 <storeSettingsToEeprom+0xbc>
 8001586:	2b02      	cmp	r3, #2
 8001588:	d034      	beq.n	80015f4 <storeSettingsToEeprom+0xc0>
 800158a:	4293      	cmp	r3, r2
 800158c:	d100      	bne.n	8001590 <storeSettingsToEeprom+0x5c>
			dataToStore[11] = 0;
 800158e:	72e3      	strb	r3, [r4, #11]
	switch (mRight) {	// mRight is code 1
 8001590:	4b2a      	ldr	r3, [pc, #168]	@ (800163c <storeSettingsToEeprom+0x108>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d02f      	beq.n	80015f8 <storeSettingsToEeprom+0xc4>
 8001598:	2b02      	cmp	r3, #2
 800159a:	d02f      	beq.n	80015fc <storeSettingsToEeprom+0xc8>
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <storeSettingsToEeprom+0x70>
			dataToStore[11] = 1;
 80015a0:	3301      	adds	r3, #1
 80015a2:	72e3      	strb	r3, [r4, #11]
	switch (mWeapon) {	// mWeapon is code 2
 80015a4:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <storeSettingsToEeprom+0x10c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d02a      	beq.n	8001602 <storeSettingsToEeprom+0xce>
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d02b      	beq.n	8001608 <storeSettingsToEeprom+0xd4>
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <storeSettingsToEeprom+0x84>
			dataToStore[11] = 2;
 80015b4:	3302      	adds	r3, #2
 80015b6:	72e3      	strb	r3, [r4, #11]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 80015b8:	2500      	movs	r5, #0
	dataToStore[14] = weaponDoubleDirection;
 80015ba:	4b22      	ldr	r3, [pc, #136]	@ (8001644 <storeSettingsToEeprom+0x110>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	73a3      	strb	r3, [r4, #14]
	dataToStore[15] = tankMixIsON;
 80015c0:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <storeSettingsToEeprom+0x114>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	73e3      	strb	r3, [r4, #15]
	dataToStore[16] = noDisarm;
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <storeSettingsToEeprom+0x118>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	7423      	strb	r3, [r4, #16]
	dataToStore[17] = limitVoltage;
 80015cc:	4b20      	ldr	r3, [pc, #128]	@ (8001650 <storeSettingsToEeprom+0x11c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	7463      	strb	r3, [r4, #17]
	dataToStore[18] = cutOffVoltage;
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <storeSettingsToEeprom+0x120>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	74a3      	strb	r3, [r4, #18]
	dataToStore[19] = recieverIsPWM;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <storeSettingsToEeprom+0x124>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	74e3      	strb	r3, [r4, #19]
		write_byte_eeprom(i, dataToStore[i]);
 80015de:	5d61      	ldrb	r1, [r4, r5]
 80015e0:	b2e8      	uxtb	r0, r5
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 80015e2:	3501      	adds	r5, #1
		write_byte_eeprom(i, dataToStore[i]);
 80015e4:	f7ff ff8e 	bl	8001504 <write_byte_eeprom>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 80015e8:	2d14      	cmp	r5, #20
 80015ea:	d1f8      	bne.n	80015de <storeSettingsToEeprom+0xaa>
}
 80015ec:	b007      	add	sp, #28
 80015ee:	bd30      	pop	{r4, r5, pc}
			dataToStore[12] = 0;
 80015f0:	7322      	strb	r2, [r4, #12]
			break;
 80015f2:	e7cd      	b.n	8001590 <storeSettingsToEeprom+0x5c>
			dataToStore[13] = 0;
 80015f4:	7362      	strb	r2, [r4, #13]
			break;
 80015f6:	e7cb      	b.n	8001590 <storeSettingsToEeprom+0x5c>
			dataToStore[12] = 1;
 80015f8:	7323      	strb	r3, [r4, #12]
			break;
 80015fa:	e7d3      	b.n	80015a4 <storeSettingsToEeprom+0x70>
			dataToStore[13] = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	7363      	strb	r3, [r4, #13]
			break;
 8001600:	e7d0      	b.n	80015a4 <storeSettingsToEeprom+0x70>
			dataToStore[12] = 2;
 8001602:	2302      	movs	r3, #2
 8001604:	7323      	strb	r3, [r4, #12]
			break;
 8001606:	e7d7      	b.n	80015b8 <storeSettingsToEeprom+0x84>
			dataToStore[13] = 2;
 8001608:	7363      	strb	r3, [r4, #13]
			break;
 800160a:	e7d5      	b.n	80015b8 <storeSettingsToEeprom+0x84>
 800160c:	20000011 	.word	0x20000011
 8001610:	20000010 	.word	0x20000010
 8001614:	2000000f 	.word	0x2000000f
 8001618:	2000000e 	.word	0x2000000e
 800161c:	2000000d 	.word	0x2000000d
 8001620:	2000000c 	.word	0x2000000c
 8001624:	2000000b 	.word	0x2000000b
 8001628:	2000000a 	.word	0x2000000a
 800162c:	20000546 	.word	0x20000546
 8001630:	20000545 	.word	0x20000545
 8001634:	20000544 	.word	0x20000544
 8001638:	20000543 	.word	0x20000543
 800163c:	20000009 	.word	0x20000009
 8001640:	20000008 	.word	0x20000008
 8001644:	20000542 	.word	0x20000542
 8001648:	20000007 	.word	0x20000007
 800164c:	20000006 	.word	0x20000006
 8001650:	20000005 	.word	0x20000005
 8001654:	20000004 	.word	0x20000004
 8001658:	20000000 	.word	0x20000000

0800165c <serialPrintStatus>:

void serialPrintStatus() {
 800165c:	b530      	push	{r4, r5, lr}
 800165e:	b089      	sub	sp, #36	@ 0x24
	uint8_t string[30];
	// print voltage
	sprintf(string, "VBATT > %d\n", getBattVoltage());
 8001660:	f7fe ff8a 	bl	8000578 <getBattVoltage>
 8001664:	4929      	ldr	r1, [pc, #164]	@ (800170c <serialPrintStatus+0xb0>)
 8001666:	0002      	movs	r2, r0
 8001668:	4668      	mov	r0, sp
 800166a:	f004 ffc1 	bl	80065f0 <siprintf>
	serialPrintString(string);
 800166e:	4668      	mov	r0, sp
 8001670:	f7ff fe8e 	bl	8001390 <serialPrintString>
	HAL_Delay(1);
 8001674:	2001      	movs	r0, #1
 8001676:	f000 fd53 	bl	8002120 <HAL_Delay>
	// which battery detected
	sprintf(string, "BATT > %d\n", batteryConfiguration);
 800167a:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <serialPrintStatus+0xb4>)
 800167c:	4925      	ldr	r1, [pc, #148]	@ (8001714 <serialPrintStatus+0xb8>)
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	4668      	mov	r0, sp
 8001682:	f004 ffb5 	bl	80065f0 <siprintf>
	serialPrintString(string);
 8001686:	4668      	mov	r0, sp
 8001688:	f7ff fe82 	bl	8001390 <serialPrintString>
	HAL_Delay(1);
 800168c:	2001      	movs	r0, #1
 800168e:	f000 fd47 	bl	8002120 <HAL_Delay>
	// print RX channels
	if (recieverIsPWM) {	// print only four channel
 8001692:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <serialPrintStatus+0xbc>)
		for (int i = 1; i < 5; i++) {
 8001694:	2401      	movs	r4, #1
	if (recieverIsPWM) {	// print only four channel
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4d20      	ldr	r5, [pc, #128]	@ (800171c <serialPrintStatus+0xc0>)
 800169a:	2b00      	cmp	r3, #0
 800169c:	d022      	beq.n	80016e4 <serialPrintStatus+0x88>
			sprintf(string, "CH%d > %d\n", i, getChannelValuePercentage(i));
 800169e:	b2e0      	uxtb	r0, r4
 80016a0:	f7ff fcec 	bl	800107c <getChannelValuePercentage>
 80016a4:	0022      	movs	r2, r4
 80016a6:	0003      	movs	r3, r0
 80016a8:	0029      	movs	r1, r5
 80016aa:	4668      	mov	r0, sp
 80016ac:	f004 ffa0 	bl	80065f0 <siprintf>
			serialPrintString(string);
 80016b0:	4668      	mov	r0, sp
 80016b2:	f7ff fe6d 	bl	8001390 <serialPrintString>
		for (int i = 1; i < 5; i++) {
 80016b6:	3401      	adds	r4, #1
			HAL_Delay(2);
 80016b8:	2002      	movs	r0, #2
 80016ba:	f000 fd31 	bl	8002120 <HAL_Delay>
		for (int i = 1; i < 5; i++) {
 80016be:	2c05      	cmp	r4, #5
 80016c0:	d1ed      	bne.n	800169e <serialPrintStatus+0x42>
			serialPrintString(string);
			HAL_Delay(2);
		}
	}
	// print armed
	if (armed) {
 80016c2:	4b17      	ldr	r3, [pc, #92]	@ (8001720 <serialPrintStatus+0xc4>)
		sprintf(string, "ARMED > TRUE\n");
 80016c4:	4917      	ldr	r1, [pc, #92]	@ (8001724 <serialPrintStatus+0xc8>)
	if (armed) {
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d100      	bne.n	80016ce <serialPrintStatus+0x72>
		serialPrintString(string);
		HAL_Delay(1);
	} else {
		sprintf(string, "ARMED > FALSE\n");
 80016cc:	4916      	ldr	r1, [pc, #88]	@ (8001728 <serialPrintStatus+0xcc>)
 80016ce:	4668      	mov	r0, sp
 80016d0:	f005 f8dd 	bl	800688e <strcpy>
		serialPrintString(string);
 80016d4:	4668      	mov	r0, sp
 80016d6:	f7ff fe5b 	bl	8001390 <serialPrintString>
		HAL_Delay(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f000 fd20 	bl	8002120 <HAL_Delay>
	}
}
 80016e0:	b009      	add	sp, #36	@ 0x24
 80016e2:	bd30      	pop	{r4, r5, pc}
			sprintf(string, "CH%d > %d\n", i, getChannelValuePercentage(i));
 80016e4:	b2e0      	uxtb	r0, r4
 80016e6:	f7ff fcc9 	bl	800107c <getChannelValuePercentage>
 80016ea:	0022      	movs	r2, r4
 80016ec:	0003      	movs	r3, r0
 80016ee:	0029      	movs	r1, r5
 80016f0:	4668      	mov	r0, sp
 80016f2:	f004 ff7d 	bl	80065f0 <siprintf>
			serialPrintString(string);
 80016f6:	4668      	mov	r0, sp
 80016f8:	f7ff fe4a 	bl	8001390 <serialPrintString>
		for (int i = 1; i < 9; i++) {
 80016fc:	3401      	adds	r4, #1
			HAL_Delay(2);
 80016fe:	2002      	movs	r0, #2
 8001700:	f000 fd0e 	bl	8002120 <HAL_Delay>
		for (int i = 1; i < 9; i++) {
 8001704:	2c09      	cmp	r4, #9
 8001706:	d1ed      	bne.n	80016e4 <serialPrintStatus+0x88>
 8001708:	e7db      	b.n	80016c2 <serialPrintStatus+0x66>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	08007906 	.word	0x08007906
 8001710:	20000548 	.word	0x20000548
 8001714:	08007907 	.word	0x08007907
 8001718:	20000000 	.word	0x20000000
 800171c:	08007912 	.word	0x08007912
 8001720:	20000547 	.word	0x20000547
 8001724:	0800791d 	.word	0x0800791d
 8001728:	0800792b 	.word	0x0800792b

0800172c <serialPrintSettings>:

void serialPrintSettings() {
 800172c:	b570      	push	{r4, r5, r6, lr}
	uint8_t dataRead[SETTINGS_NUMBER];
	dataRead[0] = thChannel;
 800172e:	4b44      	ldr	r3, [pc, #272]	@ (8001840 <serialPrintSettings+0x114>)
void serialPrintSettings() {
 8001730:	b0a4      	sub	sp, #144	@ 0x90
	dataRead[0] = thChannel;
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	ac03      	add	r4, sp, #12
 8001736:	7023      	strb	r3, [r4, #0]
	dataRead[1] = stChannel;
 8001738:	4b42      	ldr	r3, [pc, #264]	@ (8001844 <serialPrintSettings+0x118>)
 800173a:	2200      	movs	r2, #0
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	7063      	strb	r3, [r4, #1]
	dataRead[2] = wpChannel;
 8001740:	4b41      	ldr	r3, [pc, #260]	@ (8001848 <serialPrintSettings+0x11c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	70a3      	strb	r3, [r4, #2]
	dataRead[3] = s1Channel;
 8001746:	4b41      	ldr	r3, [pc, #260]	@ (800184c <serialPrintSettings+0x120>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	70e3      	strb	r3, [r4, #3]
	dataRead[4] = s2Channel;
 800174c:	4b40      	ldr	r3, [pc, #256]	@ (8001850 <serialPrintSettings+0x124>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	7123      	strb	r3, [r4, #4]
	dataRead[5] = armChannel;
 8001752:	4b40      	ldr	r3, [pc, #256]	@ (8001854 <serialPrintSettings+0x128>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	7163      	strb	r3, [r4, #5]

	dataRead[6] = m1Rev;
 8001758:	4b3f      	ldr	r3, [pc, #252]	@ (8001858 <serialPrintSettings+0x12c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	71a3      	strb	r3, [r4, #6]
	dataRead[7] = m2Rev;
 800175e:	4b3f      	ldr	r3, [pc, #252]	@ (800185c <serialPrintSettings+0x130>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	71e3      	strb	r3, [r4, #7]
	dataRead[8] = m3Rev;
 8001764:	4b3e      	ldr	r3, [pc, #248]	@ (8001860 <serialPrintSettings+0x134>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	7223      	strb	r3, [r4, #8]
	dataRead[9] = s1Rev;
 800176a:	4b3e      	ldr	r3, [pc, #248]	@ (8001864 <serialPrintSettings+0x138>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	7263      	strb	r3, [r4, #9]
	dataRead[10] = s2Rev;
 8001770:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <serialPrintSettings+0x13c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	72a3      	strb	r3, [r4, #10]

	switch (mLeft) {	// mleft is code 0
 8001776:	4b3d      	ldr	r3, [pc, #244]	@ (800186c <serialPrintSettings+0x140>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d051      	beq.n	8001822 <serialPrintSettings+0xf6>
 800177e:	2b02      	cmp	r3, #2
 8001780:	d051      	beq.n	8001826 <serialPrintSettings+0xfa>
 8001782:	4293      	cmp	r3, r2
 8001784:	d100      	bne.n	8001788 <serialPrintSettings+0x5c>
		case M1:
			dataRead[11] = 0;
 8001786:	72e3      	strb	r3, [r4, #11]
		case M3:
			dataRead[13] = 0;
			break;
	}

	switch (mRight) {	// mright is code 1
 8001788:	4b39      	ldr	r3, [pc, #228]	@ (8001870 <serialPrintSettings+0x144>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d04c      	beq.n	800182a <serialPrintSettings+0xfe>
 8001790:	2b02      	cmp	r3, #2
 8001792:	d04c      	beq.n	800182e <serialPrintSettings+0x102>
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <serialPrintSettings+0x70>
		case M1:
			dataRead[11] = 1;
 8001798:	3301      	adds	r3, #1
 800179a:	72e3      	strb	r3, [r4, #11]
		case M3:
			dataRead[13] = 1;
			break;
	}

	switch (mWeapon) {	// mweapon is code 2
 800179c:	4b35      	ldr	r3, [pc, #212]	@ (8001874 <serialPrintSettings+0x148>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d047      	beq.n	8001834 <serialPrintSettings+0x108>
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d048      	beq.n	800183a <serialPrintSettings+0x10e>
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <serialPrintSettings+0x84>
		case M1:
			dataRead[11] = 2;
 80017ac:	3302      	adds	r3, #2
 80017ae:	72e3      	strb	r3, [r4, #11]
		case M3:
			dataRead[13] = 2;
			break;
	}

	dataRead[14] = weaponDoubleDirection;
 80017b0:	4b31      	ldr	r3, [pc, #196]	@ (8001878 <serialPrintSettings+0x14c>)
	dataRead[16] = noDisarm;
	dataRead[17] = limitVoltage;
	dataRead[18] = cutOffVoltage;
	dataRead[19] = recieverIsPWM;

	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80017b2:	ae10      	add	r6, sp, #64	@ 0x40
	dataRead[14] = weaponDoubleDirection;
 80017b4:	781b      	ldrb	r3, [r3, #0]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80017b6:	2250      	movs	r2, #80	@ 0x50
	dataRead[14] = weaponDoubleDirection;
 80017b8:	73a3      	strb	r3, [r4, #14]
	dataRead[15] = tankMixIsON;
 80017ba:	4b30      	ldr	r3, [pc, #192]	@ (800187c <serialPrintSettings+0x150>)
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80017bc:	4930      	ldr	r1, [pc, #192]	@ (8001880 <serialPrintSettings+0x154>)
	dataRead[15] = tankMixIsON;
 80017be:	781b      	ldrb	r3, [r3, #0]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80017c0:	0030      	movs	r0, r6
	dataRead[15] = tankMixIsON;
 80017c2:	73e3      	strb	r3, [r4, #15]
	dataRead[16] = noDisarm;
 80017c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <serialPrintSettings+0x158>)
			(const uint8_t*) COMMAND_RXPWMMODE };

	uint8_t c[] = "\nSETTINGS:\n";
	serialPrintString(c);
	HAL_Delay(0);
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 80017c6:	2500      	movs	r5, #0
	dataRead[16] = noDisarm;
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	7423      	strb	r3, [r4, #16]
	dataRead[17] = limitVoltage;
 80017cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001888 <serialPrintSettings+0x15c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	7463      	strb	r3, [r4, #17]
	dataRead[18] = cutOffVoltage;
 80017d2:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <serialPrintSettings+0x160>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	74a3      	strb	r3, [r4, #18]
	dataRead[19] = recieverIsPWM;
 80017d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <serialPrintSettings+0x164>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	74e3      	strb	r3, [r4, #19]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80017de:	f005 f85e 	bl	800689e <memcpy>
	uint8_t c[] = "\nSETTINGS:\n";
 80017e2:	220c      	movs	r2, #12
 80017e4:	492b      	ldr	r1, [pc, #172]	@ (8001894 <serialPrintSettings+0x168>)
 80017e6:	4668      	mov	r0, sp
 80017e8:	f005 f859 	bl	800689e <memcpy>
	serialPrintString(c);
 80017ec:	4668      	mov	r0, sp
 80017ee:	f7ff fdcf 	bl	8001390 <serialPrintString>
	HAL_Delay(0);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 fc94 	bl	8002120 <HAL_Delay>
		uint8_t string[30];
		sprintf(string, "%s > %d\n", commands[i], dataRead[i]);
 80017f8:	00aa      	lsls	r2, r5, #2
 80017fa:	5d63      	ldrb	r3, [r4, r5]
 80017fc:	4926      	ldr	r1, [pc, #152]	@ (8001898 <serialPrintSettings+0x16c>)
 80017fe:	58b2      	ldr	r2, [r6, r2]
 8001800:	a808      	add	r0, sp, #32
 8001802:	f004 fef5 	bl	80065f0 <siprintf>
		serialPrintString(string);
 8001806:	a808      	add	r0, sp, #32
 8001808:	f7ff fdc2 	bl	8001390 <serialPrintString>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 800180c:	3501      	adds	r5, #1
		HAL_Delay(10);
 800180e:	200a      	movs	r0, #10
 8001810:	f000 fc86 	bl	8002120 <HAL_Delay>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 8001814:	2d14      	cmp	r5, #20
 8001816:	d1ef      	bne.n	80017f8 <serialPrintSettings+0xcc>
	}
	serialPrintString("\nwrite COMAND > VALUE (e.g. TH2CH>3)\nthan SAVE>1 to store all settings on EEPROM\n");
 8001818:	4820      	ldr	r0, [pc, #128]	@ (800189c <serialPrintSettings+0x170>)
 800181a:	f7ff fdb9 	bl	8001390 <serialPrintString>
}
 800181e:	b024      	add	sp, #144	@ 0x90
 8001820:	bd70      	pop	{r4, r5, r6, pc}
			dataRead[12] = 0;
 8001822:	7322      	strb	r2, [r4, #12]
			break;
 8001824:	e7b0      	b.n	8001788 <serialPrintSettings+0x5c>
			dataRead[13] = 0;
 8001826:	7362      	strb	r2, [r4, #13]
			break;
 8001828:	e7ae      	b.n	8001788 <serialPrintSettings+0x5c>
			dataRead[12] = 1;
 800182a:	7323      	strb	r3, [r4, #12]
			break;
 800182c:	e7b6      	b.n	800179c <serialPrintSettings+0x70>
			dataRead[13] = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	7363      	strb	r3, [r4, #13]
			break;
 8001832:	e7b3      	b.n	800179c <serialPrintSettings+0x70>
			dataRead[12] = 2;
 8001834:	2302      	movs	r3, #2
 8001836:	7323      	strb	r3, [r4, #12]
			break;
 8001838:	e7ba      	b.n	80017b0 <serialPrintSettings+0x84>
			dataRead[13] = 2;
 800183a:	7363      	strb	r3, [r4, #13]
			break;
 800183c:	e7b8      	b.n	80017b0 <serialPrintSettings+0x84>
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	20000011 	.word	0x20000011
 8001844:	20000010 	.word	0x20000010
 8001848:	2000000f 	.word	0x2000000f
 800184c:	2000000e 	.word	0x2000000e
 8001850:	2000000d 	.word	0x2000000d
 8001854:	2000000c 	.word	0x2000000c
 8001858:	2000000b 	.word	0x2000000b
 800185c:	2000000a 	.word	0x2000000a
 8001860:	20000546 	.word	0x20000546
 8001864:	20000545 	.word	0x20000545
 8001868:	20000544 	.word	0x20000544
 800186c:	20000543 	.word	0x20000543
 8001870:	20000009 	.word	0x20000009
 8001874:	20000008 	.word	0x20000008
 8001878:	20000542 	.word	0x20000542
 800187c:	20000007 	.word	0x20000007
 8001880:	080078a4 	.word	0x080078a4
 8001884:	20000006 	.word	0x20000006
 8001888:	20000005 	.word	0x20000005
 800188c:	20000004 	.word	0x20000004
 8001890:	20000000 	.word	0x20000000
 8001894:	08007995 	.word	0x08007995
 8001898:	0800793a 	.word	0x0800793a
 800189c:	08007943 	.word	0x08007943

080018a0 <modifySettingsWithCommand>:
int modifySettingsWithCommand() {
 80018a0:	b510      	push	{r4, lr}
 80018a2:	b086      	sub	sp, #24
	Command c = decodeCommand(buffer);
 80018a4:	49cc      	ldr	r1, [pc, #816]	@ (8001bd8 <modifySettingsWithCommand+0x338>)
 80018a6:	a801      	add	r0, sp, #4
 80018a8:	f7ff fd3a 	bl	8001320 <decodeCommand>
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 80018ac:	49cb      	ldr	r1, [pc, #812]	@ (8001bdc <modifySettingsWithCommand+0x33c>)
 80018ae:	a801      	add	r0, sp, #4
 80018b0:	f7fe fc2a 	bl	8000108 <strcmp>
	uint8_t isOK = FALSE;
 80018b4:	2400      	movs	r4, #0
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 80018b6:	42a0      	cmp	r0, r4
 80018b8:	d107      	bne.n	80018ca <modifySettingsWithCommand+0x2a>
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 80018ba:	230e      	movs	r3, #14
 80018bc:	446b      	add	r3, sp
 80018be:	0018      	movs	r0, r3
 80018c0:	f004 fd35 	bl	800632e <atoi>
 80018c4:	4bc6      	ldr	r3, [pc, #792]	@ (8001be0 <modifySettingsWithCommand+0x340>)
		isOK = TRUE;
 80018c6:	3401      	adds	r4, #1
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 80018c8:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 80018ca:	49c6      	ldr	r1, [pc, #792]	@ (8001be4 <modifySettingsWithCommand+0x344>)
 80018cc:	a801      	add	r0, sp, #4
 80018ce:	f7fe fc1b 	bl	8000108 <strcmp>
 80018d2:	2800      	cmp	r0, #0
 80018d4:	d107      	bne.n	80018e6 <modifySettingsWithCommand+0x46>
		stChannel = atoi(c.value);
 80018d6:	230e      	movs	r3, #14
 80018d8:	446b      	add	r3, sp
 80018da:	0018      	movs	r0, r3
 80018dc:	f004 fd27 	bl	800632e <atoi>
		isOK = TRUE;
 80018e0:	2401      	movs	r4, #1
		stChannel = atoi(c.value);
 80018e2:	4bc1      	ldr	r3, [pc, #772]	@ (8001be8 <modifySettingsWithCommand+0x348>)
 80018e4:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 80018e6:	49c1      	ldr	r1, [pc, #772]	@ (8001bec <modifySettingsWithCommand+0x34c>)
 80018e8:	a801      	add	r0, sp, #4
 80018ea:	f7fe fc0d 	bl	8000108 <strcmp>
 80018ee:	2800      	cmp	r0, #0
 80018f0:	d107      	bne.n	8001902 <modifySettingsWithCommand+0x62>
		wpChannel = atoi(c.value);
 80018f2:	230e      	movs	r3, #14
 80018f4:	446b      	add	r3, sp
 80018f6:	0018      	movs	r0, r3
 80018f8:	f004 fd19 	bl	800632e <atoi>
		isOK = TRUE;
 80018fc:	2401      	movs	r4, #1
		wpChannel = atoi(c.value);
 80018fe:	4bbc      	ldr	r3, [pc, #752]	@ (8001bf0 <modifySettingsWithCommand+0x350>)
 8001900:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 8001902:	49bc      	ldr	r1, [pc, #752]	@ (8001bf4 <modifySettingsWithCommand+0x354>)
 8001904:	a801      	add	r0, sp, #4
 8001906:	f7fe fbff 	bl	8000108 <strcmp>
 800190a:	2800      	cmp	r0, #0
 800190c:	d107      	bne.n	800191e <modifySettingsWithCommand+0x7e>
		s1Channel = atoi(c.value);
 800190e:	230e      	movs	r3, #14
 8001910:	446b      	add	r3, sp
 8001912:	0018      	movs	r0, r3
 8001914:	f004 fd0b 	bl	800632e <atoi>
		isOK = TRUE;
 8001918:	2401      	movs	r4, #1
		s1Channel = atoi(c.value);
 800191a:	4bb7      	ldr	r3, [pc, #732]	@ (8001bf8 <modifySettingsWithCommand+0x358>)
 800191c:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 800191e:	49b7      	ldr	r1, [pc, #732]	@ (8001bfc <modifySettingsWithCommand+0x35c>)
 8001920:	a801      	add	r0, sp, #4
 8001922:	f7fe fbf1 	bl	8000108 <strcmp>
 8001926:	2800      	cmp	r0, #0
 8001928:	d107      	bne.n	800193a <modifySettingsWithCommand+0x9a>
		s2Channel = atoi(c.value);
 800192a:	230e      	movs	r3, #14
 800192c:	446b      	add	r3, sp
 800192e:	0018      	movs	r0, r3
 8001930:	f004 fcfd 	bl	800632e <atoi>
		isOK = TRUE;
 8001934:	2401      	movs	r4, #1
		s2Channel = atoi(c.value);
 8001936:	4bb2      	ldr	r3, [pc, #712]	@ (8001c00 <modifySettingsWithCommand+0x360>)
 8001938:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 800193a:	49b2      	ldr	r1, [pc, #712]	@ (8001c04 <modifySettingsWithCommand+0x364>)
 800193c:	a801      	add	r0, sp, #4
 800193e:	f7fe fbe3 	bl	8000108 <strcmp>
 8001942:	2800      	cmp	r0, #0
 8001944:	d107      	bne.n	8001956 <modifySettingsWithCommand+0xb6>
		armChannel = atoi(c.value);
 8001946:	230e      	movs	r3, #14
 8001948:	446b      	add	r3, sp
 800194a:	0018      	movs	r0, r3
 800194c:	f004 fcef 	bl	800632e <atoi>
		isOK = TRUE;
 8001950:	2401      	movs	r4, #1
		armChannel = atoi(c.value);
 8001952:	4bad      	ldr	r3, [pc, #692]	@ (8001c08 <modifySettingsWithCommand+0x368>)
 8001954:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001956:	49ad      	ldr	r1, [pc, #692]	@ (8001c0c <modifySettingsWithCommand+0x36c>)
 8001958:	a801      	add	r0, sp, #4
 800195a:	f7fe fbd5 	bl	8000108 <strcmp>
 800195e:	2800      	cmp	r0, #0
 8001960:	d107      	bne.n	8001972 <modifySettingsWithCommand+0xd2>
		m1Rev = atoi(c.value);
 8001962:	230e      	movs	r3, #14
 8001964:	446b      	add	r3, sp
 8001966:	0018      	movs	r0, r3
 8001968:	f004 fce1 	bl	800632e <atoi>
		isOK = TRUE;
 800196c:	2401      	movs	r4, #1
		m1Rev = atoi(c.value);
 800196e:	4ba8      	ldr	r3, [pc, #672]	@ (8001c10 <modifySettingsWithCommand+0x370>)
 8001970:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 8001972:	49a8      	ldr	r1, [pc, #672]	@ (8001c14 <modifySettingsWithCommand+0x374>)
 8001974:	a801      	add	r0, sp, #4
 8001976:	f7fe fbc7 	bl	8000108 <strcmp>
 800197a:	2800      	cmp	r0, #0
 800197c:	d107      	bne.n	800198e <modifySettingsWithCommand+0xee>
		m2Rev = atoi(c.value);
 800197e:	230e      	movs	r3, #14
 8001980:	446b      	add	r3, sp
 8001982:	0018      	movs	r0, r3
 8001984:	f004 fcd3 	bl	800632e <atoi>
		isOK = TRUE;
 8001988:	2401      	movs	r4, #1
		m2Rev = atoi(c.value);
 800198a:	4ba3      	ldr	r3, [pc, #652]	@ (8001c18 <modifySettingsWithCommand+0x378>)
 800198c:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 800198e:	49a3      	ldr	r1, [pc, #652]	@ (8001c1c <modifySettingsWithCommand+0x37c>)
 8001990:	a801      	add	r0, sp, #4
 8001992:	f7fe fbb9 	bl	8000108 <strcmp>
 8001996:	2800      	cmp	r0, #0
 8001998:	d107      	bne.n	80019aa <modifySettingsWithCommand+0x10a>
		m3Rev = atoi(c.value);
 800199a:	230e      	movs	r3, #14
 800199c:	446b      	add	r3, sp
 800199e:	0018      	movs	r0, r3
 80019a0:	f004 fcc5 	bl	800632e <atoi>
		isOK = TRUE;
 80019a4:	2401      	movs	r4, #1
		m3Rev = atoi(c.value);
 80019a6:	4b9e      	ldr	r3, [pc, #632]	@ (8001c20 <modifySettingsWithCommand+0x380>)
 80019a8:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 80019aa:	499e      	ldr	r1, [pc, #632]	@ (8001c24 <modifySettingsWithCommand+0x384>)
 80019ac:	a801      	add	r0, sp, #4
 80019ae:	f7fe fbab 	bl	8000108 <strcmp>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d107      	bne.n	80019c6 <modifySettingsWithCommand+0x126>
		s1Rev = atoi(c.value);
 80019b6:	230e      	movs	r3, #14
 80019b8:	446b      	add	r3, sp
 80019ba:	0018      	movs	r0, r3
 80019bc:	f004 fcb7 	bl	800632e <atoi>
		isOK = TRUE;
 80019c0:	2401      	movs	r4, #1
		s1Rev = atoi(c.value);
 80019c2:	4b99      	ldr	r3, [pc, #612]	@ (8001c28 <modifySettingsWithCommand+0x388>)
 80019c4:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 80019c6:	4999      	ldr	r1, [pc, #612]	@ (8001c2c <modifySettingsWithCommand+0x38c>)
 80019c8:	a801      	add	r0, sp, #4
 80019ca:	f7fe fb9d 	bl	8000108 <strcmp>
 80019ce:	2800      	cmp	r0, #0
 80019d0:	d107      	bne.n	80019e2 <modifySettingsWithCommand+0x142>
		s2Rev = atoi(c.value);
 80019d2:	230e      	movs	r3, #14
 80019d4:	446b      	add	r3, sp
 80019d6:	0018      	movs	r0, r3
 80019d8:	f004 fca9 	bl	800632e <atoi>
		isOK = TRUE;
 80019dc:	2401      	movs	r4, #1
		s2Rev = atoi(c.value);
 80019de:	4b94      	ldr	r3, [pc, #592]	@ (8001c30 <modifySettingsWithCommand+0x390>)
 80019e0:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 80019e2:	4994      	ldr	r1, [pc, #592]	@ (8001c34 <modifySettingsWithCommand+0x394>)
 80019e4:	a801      	add	r0, sp, #4
 80019e6:	f7fe fb8f 	bl	8000108 <strcmp>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d120      	bne.n	8001a30 <modifySettingsWithCommand+0x190>
		if (strcmp(c.value, VALUE_ML) == 0) {
 80019ee:	230e      	movs	r3, #14
 80019f0:	446b      	add	r3, sp
 80019f2:	0018      	movs	r0, r3
 80019f4:	4990      	ldr	r1, [pc, #576]	@ (8001c38 <modifySettingsWithCommand+0x398>)
 80019f6:	f7fe fb87 	bl	8000108 <strcmp>
 80019fa:	2800      	cmp	r0, #0
 80019fc:	d102      	bne.n	8001a04 <modifySettingsWithCommand+0x164>
			isOK = TRUE;
 80019fe:	2401      	movs	r4, #1
			mLeft = M1;
 8001a00:	4b8e      	ldr	r3, [pc, #568]	@ (8001c3c <modifySettingsWithCommand+0x39c>)
 8001a02:	7018      	strb	r0, [r3, #0]
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001a04:	230e      	movs	r3, #14
 8001a06:	446b      	add	r3, sp
 8001a08:	0018      	movs	r0, r3
 8001a0a:	498d      	ldr	r1, [pc, #564]	@ (8001c40 <modifySettingsWithCommand+0x3a0>)
 8001a0c:	f7fe fb7c 	bl	8000108 <strcmp>
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d102      	bne.n	8001a1a <modifySettingsWithCommand+0x17a>
			isOK = TRUE;
 8001a14:	2401      	movs	r4, #1
			mRight = M1;
 8001a16:	4b8b      	ldr	r3, [pc, #556]	@ (8001c44 <modifySettingsWithCommand+0x3a4>)
 8001a18:	7018      	strb	r0, [r3, #0]
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001a1a:	230e      	movs	r3, #14
 8001a1c:	446b      	add	r3, sp
 8001a1e:	0018      	movs	r0, r3
 8001a20:	4989      	ldr	r1, [pc, #548]	@ (8001c48 <modifySettingsWithCommand+0x3a8>)
 8001a22:	f7fe fb71 	bl	8000108 <strcmp>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d102      	bne.n	8001a30 <modifySettingsWithCommand+0x190>
			isOK = TRUE;
 8001a2a:	2401      	movs	r4, #1
			mWeapon = M1;
 8001a2c:	4b87      	ldr	r3, [pc, #540]	@ (8001c4c <modifySettingsWithCommand+0x3ac>)
 8001a2e:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M2ASS) == 0) {
 8001a30:	4987      	ldr	r1, [pc, #540]	@ (8001c50 <modifySettingsWithCommand+0x3b0>)
 8001a32:	a801      	add	r0, sp, #4
 8001a34:	f7fe fb68 	bl	8000108 <strcmp>
 8001a38:	2800      	cmp	r0, #0
 8001a3a:	d120      	bne.n	8001a7e <modifySettingsWithCommand+0x1de>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001a3c:	230e      	movs	r3, #14
 8001a3e:	446b      	add	r3, sp
 8001a40:	0018      	movs	r0, r3
 8001a42:	497d      	ldr	r1, [pc, #500]	@ (8001c38 <modifySettingsWithCommand+0x398>)
 8001a44:	f7fe fb60 	bl	8000108 <strcmp>
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d102      	bne.n	8001a52 <modifySettingsWithCommand+0x1b2>
			mLeft = M2;
 8001a4c:	2401      	movs	r4, #1
 8001a4e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c3c <modifySettingsWithCommand+0x39c>)
 8001a50:	701c      	strb	r4, [r3, #0]
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001a52:	230e      	movs	r3, #14
 8001a54:	446b      	add	r3, sp
 8001a56:	0018      	movs	r0, r3
 8001a58:	4979      	ldr	r1, [pc, #484]	@ (8001c40 <modifySettingsWithCommand+0x3a0>)
 8001a5a:	f7fe fb55 	bl	8000108 <strcmp>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d102      	bne.n	8001a68 <modifySettingsWithCommand+0x1c8>
			mRight = M2;
 8001a62:	2401      	movs	r4, #1
 8001a64:	4b77      	ldr	r3, [pc, #476]	@ (8001c44 <modifySettingsWithCommand+0x3a4>)
 8001a66:	701c      	strb	r4, [r3, #0]
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001a68:	230e      	movs	r3, #14
 8001a6a:	446b      	add	r3, sp
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	4976      	ldr	r1, [pc, #472]	@ (8001c48 <modifySettingsWithCommand+0x3a8>)
 8001a70:	f7fe fb4a 	bl	8000108 <strcmp>
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d102      	bne.n	8001a7e <modifySettingsWithCommand+0x1de>
			mWeapon = M2;
 8001a78:	2401      	movs	r4, #1
 8001a7a:	4b74      	ldr	r3, [pc, #464]	@ (8001c4c <modifySettingsWithCommand+0x3ac>)
 8001a7c:	701c      	strb	r4, [r3, #0]
	if (strcmp(c.type, COMMAND_M3ASS) == 0) {
 8001a7e:	4975      	ldr	r1, [pc, #468]	@ (8001c54 <modifySettingsWithCommand+0x3b4>)
 8001a80:	a801      	add	r0, sp, #4
 8001a82:	f7fe fb41 	bl	8000108 <strcmp>
 8001a86:	2800      	cmp	r0, #0
 8001a88:	d123      	bne.n	8001ad2 <modifySettingsWithCommand+0x232>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001a8a:	230e      	movs	r3, #14
 8001a8c:	446b      	add	r3, sp
 8001a8e:	0018      	movs	r0, r3
 8001a90:	4969      	ldr	r1, [pc, #420]	@ (8001c38 <modifySettingsWithCommand+0x398>)
 8001a92:	f7fe fb39 	bl	8000108 <strcmp>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d103      	bne.n	8001aa2 <modifySettingsWithCommand+0x202>
			mLeft = M3;
 8001a9a:	2202      	movs	r2, #2
			isOK = TRUE;
 8001a9c:	2401      	movs	r4, #1
			mLeft = M3;
 8001a9e:	4b67      	ldr	r3, [pc, #412]	@ (8001c3c <modifySettingsWithCommand+0x39c>)
 8001aa0:	701a      	strb	r2, [r3, #0]
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001aa2:	230e      	movs	r3, #14
 8001aa4:	446b      	add	r3, sp
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	4965      	ldr	r1, [pc, #404]	@ (8001c40 <modifySettingsWithCommand+0x3a0>)
 8001aaa:	f7fe fb2d 	bl	8000108 <strcmp>
 8001aae:	2800      	cmp	r0, #0
 8001ab0:	d103      	bne.n	8001aba <modifySettingsWithCommand+0x21a>
			mRight = M3;
 8001ab2:	2202      	movs	r2, #2
			isOK = TRUE;
 8001ab4:	2401      	movs	r4, #1
			mRight = M3;
 8001ab6:	4b63      	ldr	r3, [pc, #396]	@ (8001c44 <modifySettingsWithCommand+0x3a4>)
 8001ab8:	701a      	strb	r2, [r3, #0]
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001aba:	230e      	movs	r3, #14
 8001abc:	446b      	add	r3, sp
 8001abe:	0018      	movs	r0, r3
 8001ac0:	4961      	ldr	r1, [pc, #388]	@ (8001c48 <modifySettingsWithCommand+0x3a8>)
 8001ac2:	f7fe fb21 	bl	8000108 <strcmp>
 8001ac6:	2800      	cmp	r0, #0
 8001ac8:	d103      	bne.n	8001ad2 <modifySettingsWithCommand+0x232>
			mWeapon = M3;
 8001aca:	2202      	movs	r2, #2
			isOK = TRUE;
 8001acc:	2401      	movs	r4, #1
			mWeapon = M3;
 8001ace:	4b5f      	ldr	r3, [pc, #380]	@ (8001c4c <modifySettingsWithCommand+0x3ac>)
 8001ad0:	701a      	strb	r2, [r3, #0]
	if (strcmp(c.type, COMMAND_WPDD) == 0) {
 8001ad2:	4961      	ldr	r1, [pc, #388]	@ (8001c58 <modifySettingsWithCommand+0x3b8>)
 8001ad4:	a801      	add	r0, sp, #4
 8001ad6:	f7fe fb17 	bl	8000108 <strcmp>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	d107      	bne.n	8001aee <modifySettingsWithCommand+0x24e>
		weaponDoubleDirection = atoi(c.value);
 8001ade:	230e      	movs	r3, #14
 8001ae0:	446b      	add	r3, sp
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f004 fc23 	bl	800632e <atoi>
		isOK = TRUE;
 8001ae8:	2401      	movs	r4, #1
		weaponDoubleDirection = atoi(c.value);
 8001aea:	4b5c      	ldr	r3, [pc, #368]	@ (8001c5c <modifySettingsWithCommand+0x3bc>)
 8001aec:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_TANKON) == 0) {
 8001aee:	495c      	ldr	r1, [pc, #368]	@ (8001c60 <modifySettingsWithCommand+0x3c0>)
 8001af0:	a801      	add	r0, sp, #4
 8001af2:	f7fe fb09 	bl	8000108 <strcmp>
 8001af6:	2800      	cmp	r0, #0
 8001af8:	d107      	bne.n	8001b0a <modifySettingsWithCommand+0x26a>
		tankMixIsON = atoi(c.value);
 8001afa:	230e      	movs	r3, #14
 8001afc:	446b      	add	r3, sp
 8001afe:	0018      	movs	r0, r3
 8001b00:	f004 fc15 	bl	800632e <atoi>
		isOK = TRUE;
 8001b04:	2401      	movs	r4, #1
		tankMixIsON = atoi(c.value);
 8001b06:	4b57      	ldr	r3, [pc, #348]	@ (8001c64 <modifySettingsWithCommand+0x3c4>)
 8001b08:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_NODISARM) == 0) {
 8001b0a:	4957      	ldr	r1, [pc, #348]	@ (8001c68 <modifySettingsWithCommand+0x3c8>)
 8001b0c:	a801      	add	r0, sp, #4
 8001b0e:	f7fe fafb 	bl	8000108 <strcmp>
 8001b12:	2800      	cmp	r0, #0
 8001b14:	d107      	bne.n	8001b26 <modifySettingsWithCommand+0x286>
		noDisarm = atoi(c.value);
 8001b16:	230e      	movs	r3, #14
 8001b18:	446b      	add	r3, sp
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f004 fc07 	bl	800632e <atoi>
		isOK = TRUE;
 8001b20:	2401      	movs	r4, #1
		noDisarm = atoi(c.value);
 8001b22:	4b52      	ldr	r3, [pc, #328]	@ (8001c6c <modifySettingsWithCommand+0x3cc>)
 8001b24:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_LIMITVOLTAGE) == 0) {
 8001b26:	4952      	ldr	r1, [pc, #328]	@ (8001c70 <modifySettingsWithCommand+0x3d0>)
 8001b28:	a801      	add	r0, sp, #4
 8001b2a:	f7fe faed 	bl	8000108 <strcmp>
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d107      	bne.n	8001b42 <modifySettingsWithCommand+0x2a2>
		limitVoltage = atoi(c.value);
 8001b32:	230e      	movs	r3, #14
 8001b34:	446b      	add	r3, sp
 8001b36:	0018      	movs	r0, r3
 8001b38:	f004 fbf9 	bl	800632e <atoi>
		isOK = TRUE;
 8001b3c:	2401      	movs	r4, #1
		limitVoltage = atoi(c.value);
 8001b3e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c74 <modifySettingsWithCommand+0x3d4>)
 8001b40:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_CUTOFFVOLTAGE) == 0) {
 8001b42:	494d      	ldr	r1, [pc, #308]	@ (8001c78 <modifySettingsWithCommand+0x3d8>)
 8001b44:	a801      	add	r0, sp, #4
 8001b46:	f7fe fadf 	bl	8000108 <strcmp>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d107      	bne.n	8001b5e <modifySettingsWithCommand+0x2be>
		cutOffVoltage = atoi(c.value);
 8001b4e:	230e      	movs	r3, #14
 8001b50:	446b      	add	r3, sp
 8001b52:	0018      	movs	r0, r3
 8001b54:	f004 fbeb 	bl	800632e <atoi>
		isOK = TRUE;
 8001b58:	2401      	movs	r4, #1
		cutOffVoltage = atoi(c.value);
 8001b5a:	4b48      	ldr	r3, [pc, #288]	@ (8001c7c <modifySettingsWithCommand+0x3dc>)
 8001b5c:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_RXPWMMODE) == 0) {
 8001b5e:	4948      	ldr	r1, [pc, #288]	@ (8001c80 <modifySettingsWithCommand+0x3e0>)
 8001b60:	a801      	add	r0, sp, #4
 8001b62:	f7fe fad1 	bl	8000108 <strcmp>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d107      	bne.n	8001b7a <modifySettingsWithCommand+0x2da>
		recieverIsPWM = atoi(c.value);
 8001b6a:	230e      	movs	r3, #14
 8001b6c:	446b      	add	r3, sp
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f004 fbdd 	bl	800632e <atoi>
		isOK = TRUE;
 8001b74:	2401      	movs	r4, #1
		recieverIsPWM = atoi(c.value);
 8001b76:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <modifySettingsWithCommand+0x3e4>)
 8001b78:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_SAVE) == 0) {
 8001b7a:	4943      	ldr	r1, [pc, #268]	@ (8001c88 <modifySettingsWithCommand+0x3e8>)
 8001b7c:	a801      	add	r0, sp, #4
 8001b7e:	f7fe fac3 	bl	8000108 <strcmp>
 8001b82:	2800      	cmp	r0, #0
 8001b84:	d102      	bne.n	8001b8c <modifySettingsWithCommand+0x2ec>
		storeSettingsToEeprom();
 8001b86:	f7ff fcd5 	bl	8001534 <storeSettingsToEeprom>
		isOK = TRUE;
 8001b8a:	2401      	movs	r4, #1
	if (strcmp(c.type, COMMAND_READ) == 0) {
 8001b8c:	493f      	ldr	r1, [pc, #252]	@ (8001c8c <modifySettingsWithCommand+0x3ec>)
 8001b8e:	a801      	add	r0, sp, #4
 8001b90:	f7fe faba 	bl	8000108 <strcmp>
 8001b94:	2800      	cmp	r0, #0
 8001b96:	d104      	bne.n	8001ba2 <modifySettingsWithCommand+0x302>
		readSettingsFromEeprom();
 8001b98:	f7ff fc1a 	bl	80013d0 <readSettingsFromEeprom>
		isOK = TRUE;
 8001b9c:	2401      	movs	r4, #1
		serialPrintSettings();
 8001b9e:	f7ff fdc5 	bl	800172c <serialPrintSettings>
	if (strcmp(c.type, COMMAND_CONNECTED) == 0) {
 8001ba2:	493b      	ldr	r1, [pc, #236]	@ (8001c90 <modifySettingsWithCommand+0x3f0>)
 8001ba4:	a801      	add	r0, sp, #4
 8001ba6:	f7fe faaf 	bl	8000108 <strcmp>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	d100      	bne.n	8001bb0 <modifySettingsWithCommand+0x310>
		isOK = TRUE;
 8001bae:	2401      	movs	r4, #1
	if (strcmp(c.type, COMMAND_STATUS) == 0) {
 8001bb0:	4938      	ldr	r1, [pc, #224]	@ (8001c94 <modifySettingsWithCommand+0x3f4>)
 8001bb2:	a801      	add	r0, sp, #4
 8001bb4:	f7fe faa8 	bl	8000108 <strcmp>
 8001bb8:	2800      	cmp	r0, #0
 8001bba:	d102      	bne.n	8001bc2 <modifySettingsWithCommand+0x322>
		serialPrintStatus();
 8001bbc:	f7ff fd4e 	bl	800165c <serialPrintStatus>
		isOK = TRUE;
 8001bc0:	2401      	movs	r4, #1
	sprintf(recievedString, "%s, %s", c.type, c.value);
 8001bc2:	230e      	movs	r3, #14
 8001bc4:	4934      	ldr	r1, [pc, #208]	@ (8001c98 <modifySettingsWithCommand+0x3f8>)
 8001bc6:	446b      	add	r3, sp
 8001bc8:	aa01      	add	r2, sp, #4
 8001bca:	4834      	ldr	r0, [pc, #208]	@ (8001c9c <modifySettingsWithCommand+0x3fc>)
 8001bcc:	f004 fd10 	bl	80065f0 <siprintf>
}
 8001bd0:	0020      	movs	r0, r4
 8001bd2:	b006      	add	sp, #24
 8001bd4:	bd10      	pop	{r4, pc}
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	200007ee 	.word	0x200007ee
 8001bdc:	080079a1 	.word	0x080079a1
 8001be0:	20000011 	.word	0x20000011
 8001be4:	080079a7 	.word	0x080079a7
 8001be8:	20000010 	.word	0x20000010
 8001bec:	080079ad 	.word	0x080079ad
 8001bf0:	2000000f 	.word	0x2000000f
 8001bf4:	080079b3 	.word	0x080079b3
 8001bf8:	2000000e 	.word	0x2000000e
 8001bfc:	080079b9 	.word	0x080079b9
 8001c00:	2000000d 	.word	0x2000000d
 8001c04:	080079bf 	.word	0x080079bf
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	080079c6 	.word	0x080079c6
 8001c10:	2000000b 	.word	0x2000000b
 8001c14:	080079cc 	.word	0x080079cc
 8001c18:	2000000a 	.word	0x2000000a
 8001c1c:	080079d2 	.word	0x080079d2
 8001c20:	20000546 	.word	0x20000546
 8001c24:	080079d8 	.word	0x080079d8
 8001c28:	20000545 	.word	0x20000545
 8001c2c:	080079de 	.word	0x080079de
 8001c30:	20000544 	.word	0x20000544
 8001c34:	080079e4 	.word	0x080079e4
 8001c38:	080079ea 	.word	0x080079ea
 8001c3c:	20000543 	.word	0x20000543
 8001c40:	080079ed 	.word	0x080079ed
 8001c44:	20000009 	.word	0x20000009
 8001c48:	080079f0 	.word	0x080079f0
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	080079f3 	.word	0x080079f3
 8001c54:	080079f9 	.word	0x080079f9
 8001c58:	080079ff 	.word	0x080079ff
 8001c5c:	20000542 	.word	0x20000542
 8001c60:	08007a04 	.word	0x08007a04
 8001c64:	20000007 	.word	0x20000007
 8001c68:	08007a0a 	.word	0x08007a0a
 8001c6c:	20000006 	.word	0x20000006
 8001c70:	08007a13 	.word	0x08007a13
 8001c74:	20000005 	.word	0x20000005
 8001c78:	08007a18 	.word	0x08007a18
 8001c7c:	20000004 	.word	0x20000004
 8001c80:	08007a20 	.word	0x08007a20
 8001c84:	20000000 	.word	0x20000000
 8001c88:	08007a26 	.word	0x08007a26
 8001c8c:	08007a2b 	.word	0x08007a2b
 8001c90:	08007a30 	.word	0x08007a30
 8001c94:	08007a34 	.word	0x08007a34
 8001c98:	08007a3b 	.word	0x08007a3b
 8001c9c:	20000528 	.word	0x20000528

08001ca0 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_MspInit+0x2c>)
{
 8001ca4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	619a      	str	r2, [r3, #24]
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb0:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	9200      	str	r2, [sp, #0]
 8001cb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	69da      	ldr	r2, [r3, #28]
 8001cb8:	0549      	lsls	r1, r1, #21
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	61da      	str	r2, [r3, #28]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cc6:	b002      	add	sp, #8
 8001cc8:	4770      	bx	lr
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	40021000 	.word	0x40021000

08001cd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cd0:	b510      	push	{r4, lr}
 8001cd2:	0004      	movs	r4, r0
 8001cd4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd6:	2214      	movs	r2, #20
 8001cd8:	2100      	movs	r1, #0
 8001cda:	a803      	add	r0, sp, #12
 8001cdc:	f004 fcf4 	bl	80066c8 <memset>
  if(hadc->Instance==ADC1)
 8001ce0:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <HAL_ADC_MspInit+0x54>)
 8001ce2:	6822      	ldr	r2, [r4, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d11b      	bne.n	8001d20 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <HAL_ADC_MspInit+0x58>)
 8001cec:	0089      	lsls	r1, r1, #2
 8001cee:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	619a      	str	r2, [r3, #24]
 8001cf6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfa:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cfe:	9201      	str	r2, [sp, #4]
 8001d00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	0289      	lsls	r1, r1, #10
 8001d06:	430a      	orrs	r2, r1
 8001d08:	615a      	str	r2, [r3, #20]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	9302      	str	r3, [sp, #8]
 8001d10:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8001d12:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8001d16:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d18:	3b04      	subs	r3, #4
 8001d1a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f000 fd26 	bl	800276c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d20:	b008      	add	sp, #32
 8001d22:	bd10      	pop	{r4, pc}
 8001d24:	40012400 	.word	0x40012400
 8001d28:	40021000 	.word	0x40021000

08001d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	0004      	movs	r4, r0
 8001d30:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d32:	2214      	movs	r2, #20
 8001d34:	2100      	movs	r1, #0
 8001d36:	a803      	add	r0, sp, #12
 8001d38:	f004 fcc6 	bl	80066c8 <memset>
  if(hi2c->Instance==I2C1)
 8001d3c:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <HAL_I2C_MspInit+0x60>)
 8001d3e:	6822      	ldr	r2, [r4, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d120      	bne.n	8001d86 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d44:	2280      	movs	r2, #128	@ 0x80
 8001d46:	4c12      	ldr	r4, [pc, #72]	@ (8001d90 <HAL_I2C_MspInit+0x64>)
 8001d48:	02d2      	lsls	r2, r2, #11
 8001d4a:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	4811      	ldr	r0, [pc, #68]	@ (8001d94 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	6163      	str	r3, [r4, #20]
 8001d52:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d56:	4013      	ands	r3, r2
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d5c:	23c0      	movs	r3, #192	@ 0xc0
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d62:	2312      	movs	r3, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d64:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d66:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d68:	3b11      	subs	r3, #17
 8001d6a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d6c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001d6e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f000 fcfc 	bl	800276c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d74:	2280      	movs	r2, #128	@ 0x80
 8001d76:	69e3      	ldr	r3, [r4, #28]
 8001d78:	0392      	lsls	r2, r2, #14
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61e3      	str	r3, [r4, #28]
 8001d7e:	69e3      	ldr	r3, [r4, #28]
 8001d80:	4013      	ands	r3, r2
 8001d82:	9302      	str	r3, [sp, #8]
 8001d84:	9b02      	ldr	r3, [sp, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d86:	b008      	add	sp, #32
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	46c0      	nop			@ (mov r8, r8)
 8001d8c:	40005400 	.word	0x40005400
 8001d90:	40021000 	.word	0x40021000
 8001d94:	48000400 	.word	0x48000400

08001d98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d98:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM1)
 8001d9a:	6803      	ldr	r3, [r0, #0]
 8001d9c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e94 <HAL_TIM_Base_MspInit+0xfc>)
{
 8001d9e:	0005      	movs	r5, r0
 8001da0:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM1)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d125      	bne.n	8001df2 <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	4a3b      	ldr	r2, [pc, #236]	@ (8001e98 <HAL_TIM_Base_MspInit+0x100>)
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	6991      	ldr	r1, [r2, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH3_UP Init */
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8001dae:	4c3b      	ldr	r4, [pc, #236]	@ (8001e9c <HAL_TIM_Base_MspInit+0x104>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001db0:	4319      	orrs	r1, r3
 8001db2:	6191      	str	r1, [r2, #24]
 8001db4:	6992      	ldr	r2, [r2, #24]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001db6:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001db8:	401a      	ands	r2, r3
 8001dba:	9201      	str	r2, [sp, #4]
 8001dbc:	9a01      	ldr	r2, [sp, #4]
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8001dbe:	4a38      	ldr	r2, [pc, #224]	@ (8001ea0 <HAL_TIM_Base_MspInit+0x108>)
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_tim1_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dc0:	6163      	str	r3, [r4, #20]
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8001dc2:	6022      	str	r2, [r4, #0]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dc4:	2210      	movs	r2, #16
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8001dc6:	2320      	movs	r3, #32
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dc8:	6062      	str	r2, [r4, #4]
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dca:	2200      	movs	r2, #0
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001dcc:	60e1      	str	r1, [r4, #12]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dce:	3181      	adds	r1, #129	@ 0x81
 8001dd0:	31ff      	adds	r1, #255	@ 0xff
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8001dd2:	0020      	movs	r0, r4
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd4:	60a2      	str	r2, [r4, #8]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dd6:	6121      	str	r1, [r4, #16]
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8001dd8:	61a3      	str	r3, [r4, #24]
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 8001dda:	61e2      	str	r2, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8001ddc:	f000 fc1c 	bl	8002618 <HAL_DMA_Init>
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8001de4:	f7ff f834 	bl	8000e50 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
 8001de8:	62ec      	str	r4, [r5, #44]	@ 0x2c
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001dea:	622c      	str	r4, [r5, #32]
 8001dec:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001dee:	b007      	add	sp, #28
 8001df0:	bd30      	pop	{r4, r5, pc}
  else if(htim_base->Instance==TIM3)
 8001df2:	4a2c      	ldr	r2, [pc, #176]	@ (8001ea4 <HAL_TIM_Base_MspInit+0x10c>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d123      	bne.n	8001e40 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001df8:	2102      	movs	r1, #2
 8001dfa:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <HAL_TIM_Base_MspInit+0x100>)
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001dfc:	4c2a      	ldr	r4, [pc, #168]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x110>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dfe:	69da      	ldr	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001e00:	0020      	movs	r0, r4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e02:	430a      	orrs	r2, r1
 8001e04:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001e06:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e08:	69db      	ldr	r3, [r3, #28]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001e0a:	60e2      	str	r2, [r4, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e0c:	400b      	ands	r3, r1
 8001e0e:	9302      	str	r3, [sp, #8]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e10:	3281      	adds	r2, #129	@ 0x81
 8001e12:	32ff      	adds	r2, #255	@ 0xff
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e14:	9b02      	ldr	r3, [sp, #8]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001e16:	4b25      	ldr	r3, [pc, #148]	@ (8001eac <HAL_TIM_Base_MspInit+0x114>)
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e18:	6122      	str	r2, [r4, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e1a:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001e1c:	6023      	str	r3, [r4, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e1e:	2310      	movs	r3, #16
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e20:	0112      	lsls	r2, r2, #4
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e22:	6063      	str	r3, [r4, #4]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e24:	6162      	str	r2, [r4, #20]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e26:	2300      	movs	r3, #0
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8001e28:	2220      	movs	r2, #32
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2a:	60a3      	str	r3, [r4, #8]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8001e2c:	61a2      	str	r2, [r4, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001e2e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001e30:	f000 fbf2 	bl	8002618 <HAL_DMA_Init>
 8001e34:	2800      	cmp	r0, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001e38:	f7ff f80a 	bl	8000e50 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001e3c:	632c      	str	r4, [r5, #48]	@ 0x30
 8001e3e:	e7d4      	b.n	8001dea <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM6)
 8001e40:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x118>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d109      	bne.n	8001e5a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e46:	2110      	movs	r1, #16
 8001e48:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <HAL_TIM_Base_MspInit+0x100>)
 8001e4a:	69da      	ldr	r2, [r3, #28]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	61da      	str	r2, [r3, #28]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	400b      	ands	r3, r1
 8001e54:	9303      	str	r3, [sp, #12]
 8001e56:	9b03      	ldr	r3, [sp, #12]
 8001e58:	e7c9      	b.n	8001dee <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM16)
 8001e5a:	4a16      	ldr	r2, [pc, #88]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x11c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d10a      	bne.n	8001e76 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e60:	2180      	movs	r1, #128	@ 0x80
 8001e62:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <HAL_TIM_Base_MspInit+0x100>)
 8001e64:	0289      	lsls	r1, r1, #10
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	619a      	str	r2, [r3, #24]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	400b      	ands	r3, r1
 8001e70:	9304      	str	r3, [sp, #16]
 8001e72:	9b04      	ldr	r3, [sp, #16]
 8001e74:	e7bb      	b.n	8001dee <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 8001e76:	4a10      	ldr	r2, [pc, #64]	@ (8001eb8 <HAL_TIM_Base_MspInit+0x120>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d1b8      	bne.n	8001dee <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001e7c:	2180      	movs	r1, #128	@ 0x80
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_TIM_Base_MspInit+0x100>)
 8001e80:	02c9      	lsls	r1, r1, #11
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	619a      	str	r2, [r3, #24]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	400b      	ands	r3, r1
 8001e8c:	9305      	str	r3, [sp, #20]
 8001e8e:	9b05      	ldr	r3, [sp, #20]
}
 8001e90:	e7ad      	b.n	8001dee <HAL_TIM_Base_MspInit+0x56>
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	40012c00 	.word	0x40012c00
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	20000598 	.word	0x20000598
 8001ea0:	40020058 	.word	0x40020058
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	20000554 	.word	0x20000554
 8001eac:	40020030 	.word	0x40020030
 8001eb0:	40001000 	.word	0x40001000
 8001eb4:	40014400 	.word	0x40014400
 8001eb8:	40014800 	.word	0x40014800

08001ebc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	0004      	movs	r4, r0
 8001ec0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec2:	2214      	movs	r2, #20
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	a803      	add	r0, sp, #12
 8001ec8:	f004 fbfe 	bl	80066c8 <memset>
  if(htim->Instance==TIM16)
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <HAL_TIM_MspPostInit+0x64>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d114      	bne.n	8001efe <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed4:	2180      	movs	r1, #128	@ 0x80
 8001ed6:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <HAL_TIM_MspPostInit+0x68>)
 8001ed8:	02c9      	lsls	r1, r1, #11
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	615a      	str	r2, [r3, #20]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	400b      	ands	r3, r1
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	9b01      	ldr	r3, [sp, #4]
    /**TIM16 GPIO Configuration
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = SERVO1_HV_Pin;
 8001ee8:	2340      	movs	r3, #64	@ 0x40
 8001eea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	3b3e      	subs	r3, #62	@ 0x3e
    GPIO_InitStruct.Pin = SERVO2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8001eee:	480e      	ldr	r0, [pc, #56]	@ (8001f28 <HAL_TIM_MspPostInit+0x6c>)
 8001ef0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8001ef4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f000 fc39 	bl	800276c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001efa:	b008      	add	sp, #32
 8001efc:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM17)
 8001efe:	4a0b      	ldr	r2, [pc, #44]	@ (8001f2c <HAL_TIM_MspPostInit+0x70>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d1fa      	bne.n	8001efa <HAL_TIM_MspPostInit+0x3e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f04:	2180      	movs	r1, #128	@ 0x80
 8001f06:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <HAL_TIM_MspPostInit+0x68>)
 8001f08:	02c9      	lsls	r1, r1, #11
 8001f0a:	695a      	ldr	r2, [r3, #20]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	615a      	str	r2, [r3, #20]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	400b      	ands	r3, r1
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	3b7e      	subs	r3, #126	@ 0x7e
 8001f1e:	e7e6      	b.n	8001eee <HAL_TIM_MspPostInit+0x32>
 8001f20:	40014400 	.word	0x40014400
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	40014800 	.word	0x40014800

08001f30 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f30:	e7fe      	b.n	8001f30 <NMI_Handler>

08001f32 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f32:	e7fe      	b.n	8001f32 <HardFault_Handler>

08001f34 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001f36:	4770      	bx	lr

08001f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3a:	f000 f8df 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3e:	bd10      	pop	{r4, pc}

08001f40 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001f40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH1_Pin);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f000 fcde 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH2_Pin);
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f000 fcdb 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001f4e:	bd10      	pop	{r4, pc}

08001f50 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001f50:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH3_Pin);
 8001f52:	2004      	movs	r0, #4
 8001f54:	f000 fcd6 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH4_Pin);
 8001f58:	2008      	movs	r0, #8
 8001f5a:	f000 fcd3 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001f5e:	bd10      	pop	{r4, pc}

08001f60 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001f60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8001f62:	4802      	ldr	r0, [pc, #8]	@ (8001f6c <DMA1_Channel2_3_IRQHandler+0xc>)
 8001f64:	f000 fbb8 	bl	80026d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001f68:	bd10      	pop	{r4, pc}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	20000554 	.word	0x20000554

08001f70 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001f70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3_up);
 8001f72:	4802      	ldr	r0, [pc, #8]	@ (8001f7c <DMA1_Channel4_5_IRQHandler+0xc>)
 8001f74:	f000 fbb0 	bl	80026d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001f78:	bd10      	pop	{r4, pc}
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	20000598 	.word	0x20000598

08001f80 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001f80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f82:	4802      	ldr	r0, [pc, #8]	@ (8001f8c <USB_IRQHandler+0xc>)
 8001f84:	f001 f8cc 	bl	8003120 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001f88:	bd10      	pop	{r4, pc}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	20001720 	.word	0x20001720

08001f90 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001f90:	2001      	movs	r0, #1
 8001f92:	4770      	bx	lr

08001f94 <_kill>:

int _kill(int pid, int sig)
{
 8001f94:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f96:	f004 fc4d 	bl	8006834 <__errno>
 8001f9a:	2316      	movs	r3, #22
 8001f9c:	6003      	str	r3, [r0, #0]
  return -1;
 8001f9e:	2001      	movs	r0, #1
}
 8001fa0:	4240      	negs	r0, r0
 8001fa2:	bd10      	pop	{r4, pc}

08001fa4 <_exit>:

void _exit (int status)
{
 8001fa4:	b510      	push	{r4, lr}
  errno = EINVAL;
 8001fa6:	f004 fc45 	bl	8006834 <__errno>
 8001faa:	2316      	movs	r3, #22
 8001fac:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001fae:	e7fe      	b.n	8001fae <_exit+0xa>

08001fb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	000e      	movs	r6, r1
 8001fb4:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	2500      	movs	r5, #0
 8001fb8:	42a5      	cmp	r5, r4
 8001fba:	db01      	blt.n	8001fc0 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001fbc:	0020      	movs	r0, r4
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001fc0:	e000      	b.n	8001fc4 <_read+0x14>
 8001fc2:	bf00      	nop
 8001fc4:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	3501      	adds	r5, #1
 8001fc8:	e7f6      	b.n	8001fb8 <_read+0x8>

08001fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fca:	b570      	push	{r4, r5, r6, lr}
 8001fcc:	000e      	movs	r6, r1
 8001fce:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	2500      	movs	r5, #0
 8001fd2:	42a5      	cmp	r5, r4
 8001fd4:	db01      	blt.n	8001fda <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8001fd6:	0020      	movs	r0, r4
 8001fd8:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8001fda:	5d70      	ldrb	r0, [r6, r5]
 8001fdc:	e000      	b.n	8001fe0 <_write+0x16>
 8001fde:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe0:	3501      	adds	r5, #1
 8001fe2:	e7f6      	b.n	8001fd2 <_write+0x8>

08001fe4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8001fe4:	2001      	movs	r0, #1
}
 8001fe6:	4240      	negs	r0, r0
 8001fe8:	4770      	bx	lr

08001fea <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001fea:	2380      	movs	r3, #128	@ 0x80
 8001fec:	019b      	lsls	r3, r3, #6
  return 0;
}
 8001fee:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001ff0:	604b      	str	r3, [r1, #4]
}
 8001ff2:	4770      	bx	lr

08001ff4 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	4770      	bx	lr

08001ff8 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	4770      	bx	lr

08001ffc <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ffc:	490b      	ldr	r1, [pc, #44]	@ (800202c <_sbrk+0x30>)
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8002030 <_sbrk+0x34>)
{
 8002000:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002002:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002004:	490b      	ldr	r1, [pc, #44]	@ (8002034 <_sbrk+0x38>)
{
 8002006:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002008:	6808      	ldr	r0, [r1, #0]
 800200a:	2800      	cmp	r0, #0
 800200c:	d101      	bne.n	8002012 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 800200e:	480a      	ldr	r0, [pc, #40]	@ (8002038 <_sbrk+0x3c>)
 8002010:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002012:	6808      	ldr	r0, [r1, #0]
 8002014:	18c3      	adds	r3, r0, r3
 8002016:	4293      	cmp	r3, r2
 8002018:	d906      	bls.n	8002028 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 800201a:	f004 fc0b 	bl	8006834 <__errno>
 800201e:	230c      	movs	r3, #12
 8002020:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002022:	2001      	movs	r0, #1
 8002024:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002026:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002028:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 800202a:	e7fc      	b.n	8002026 <_sbrk+0x2a>
 800202c:	00000400 	.word	0x00000400
 8002030:	20004000 	.word	0x20004000
 8002034:	20000830 	.word	0x20000830
 8002038:	20001b48 	.word	0x20001b48

0800203c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800203c:	4770      	bx	lr
	...

08002040 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002040:	480d      	ldr	r0, [pc, #52]	@ (8002078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002042:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/

  bl  SystemInit
 8002044:	f7ff fffa 	bl	800203c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <LoopForever+0x6>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	@ (8002080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <LoopForever+0xe>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	@ (800208c <LoopForever+0x16>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800206e:	f004 fbe7 	bl	8006840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002072:	f7fe faf1 	bl	8000658 <main>

08002076 <LoopForever>:

LoopForever:
    b LoopForever
 8002076:	e7fe      	b.n	8002076 <LoopForever>
  ldr   r0, =_estack
 8002078:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002084:	08007ca0 	.word	0x08007ca0
  ldr r2, =_sbss
 8002088:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800208c:	20001b48 	.word	0x20001b48

08002090 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC1_IRQHandler>
	...

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b570      	push	{r4, r5, r6, lr}
 8002096:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	20fa      	movs	r0, #250	@ 0xfa
 800209a:	4b0d      	ldr	r3, [pc, #52]	@ (80020d0 <HAL_InitTick+0x3c>)
 800209c:	0080      	lsls	r0, r0, #2
 800209e:	7819      	ldrb	r1, [r3, #0]
 80020a0:	f7fe f862 	bl	8000168 <__udivsi3>
 80020a4:	4c0b      	ldr	r4, [pc, #44]	@ (80020d4 <HAL_InitTick+0x40>)
 80020a6:	0001      	movs	r1, r0
 80020a8:	6820      	ldr	r0, [r4, #0]
 80020aa:	f7fe f85d 	bl	8000168 <__udivsi3>
 80020ae:	f000 fa99 	bl	80025e4 <HAL_SYSTICK_Config>
 80020b2:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80020b4:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020b6:	2c00      	cmp	r4, #0
 80020b8:	d109      	bne.n	80020ce <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ba:	2d03      	cmp	r5, #3
 80020bc:	d807      	bhi.n	80020ce <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020be:	3802      	subs	r0, #2
 80020c0:	0022      	movs	r2, r4
 80020c2:	0029      	movs	r1, r5
 80020c4:	f000 fa58 	bl	8002578 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c8:	0020      	movs	r0, r4
 80020ca:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_InitTick+0x44>)
 80020cc:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	20000018 	.word	0x20000018
 80020d4:	20000014 	.word	0x20000014
 80020d8:	2000001c 	.word	0x2000001c

080020dc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	2310      	movs	r3, #16
 80020de:	4a06      	ldr	r2, [pc, #24]	@ (80020f8 <HAL_Init+0x1c>)
{
 80020e0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e2:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80020e4:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e6:	430b      	orrs	r3, r1
 80020e8:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ea:	f7ff ffd3 	bl	8002094 <HAL_InitTick>
  HAL_MspInit();
 80020ee:	f7ff fdd7 	bl	8001ca0 <HAL_MspInit>
}
 80020f2:	2000      	movs	r0, #0
 80020f4:	bd10      	pop	{r4, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	40022000 	.word	0x40022000

080020fc <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020fc:	4a03      	ldr	r2, [pc, #12]	@ (800210c <HAL_IncTick+0x10>)
 80020fe:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <HAL_IncTick+0x14>)
 8002100:	6811      	ldr	r1, [r2, #0]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	185b      	adds	r3, r3, r1
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	4770      	bx	lr
 800210a:	46c0      	nop			@ (mov r8, r8)
 800210c:	20000834 	.word	0x20000834
 8002110:	20000018 	.word	0x20000018

08002114 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002114:	4b01      	ldr	r3, [pc, #4]	@ (800211c <HAL_GetTick+0x8>)
 8002116:	6818      	ldr	r0, [r3, #0]
}
 8002118:	4770      	bx	lr
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	20000834 	.word	0x20000834

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002124:	f7ff fff6 	bl	8002114 <HAL_GetTick>
 8002128:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212a:	1c63      	adds	r3, r4, #1
 800212c:	d002      	beq.n	8002134 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800212e:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <HAL_Delay+0x20>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002134:	f7ff ffee 	bl	8002114 <HAL_GetTick>
 8002138:	1b40      	subs	r0, r0, r5
 800213a:	42a0      	cmp	r0, r4
 800213c:	d3fa      	bcc.n	8002134 <HAL_Delay+0x14>
  {
  }
}
 800213e:	bd70      	pop	{r4, r5, r6, pc}
 8002140:	20000018 	.word	0x20000018

08002144 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002144:	2204      	movs	r2, #4
 8002146:	6803      	ldr	r3, [r0, #0]
{
 8002148:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800214a:	6899      	ldr	r1, [r3, #8]
{
 800214c:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800214e:	4211      	tst	r1, r2
 8002150:	d101      	bne.n	8002156 <ADC_ConversionStop+0x12>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002152:	2000      	movs	r0, #0
}
 8002154:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	4211      	tst	r1, r2
 800215a:	d006      	beq.n	800216a <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800215c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800215e:	0792      	lsls	r2, r2, #30
 8002160:	d403      	bmi.n	800216a <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002162:	2210      	movs	r2, #16
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	430a      	orrs	r2, r1
 8002168:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800216a:	f7ff ffd3 	bl	8002114 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800216e:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8002170:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4233      	tst	r3, r6
 8002178:	d0eb      	beq.n	8002152 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800217a:	f7ff ffcb 	bl	8002114 <HAL_GetTick>
 800217e:	1b40      	subs	r0, r0, r5
 8002180:	2802      	cmp	r0, #2
 8002182:	d9f6      	bls.n	8002172 <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4233      	tst	r3, r6
 800218a:	d0f2      	beq.n	8002172 <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218c:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002190:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002192:	4313      	orrs	r3, r2
 8002194:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002196:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002198:	4303      	orrs	r3, r0
 800219a:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800219c:	e7da      	b.n	8002154 <ADC_ConversionStop+0x10>

0800219e <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 800219e:	2103      	movs	r1, #3
 80021a0:	6803      	ldr	r3, [r0, #0]
{
 80021a2:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021a4:	689a      	ldr	r2, [r3, #8]
{
 80021a6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021a8:	400a      	ands	r2, r1
 80021aa:	2a01      	cmp	r2, #1
 80021ac:	d001      	beq.n	80021b2 <ADC_Disable+0x14>
  return HAL_OK;
 80021ae:	2000      	movs	r0, #0
}
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021b2:	6819      	ldr	r1, [r3, #0]
 80021b4:	4211      	tst	r1, r2
 80021b6:	d102      	bne.n	80021be <ADC_Disable+0x20>
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	0412      	lsls	r2, r2, #16
 80021bc:	d5f7      	bpl.n	80021ae <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021be:	2205      	movs	r2, #5
 80021c0:	689d      	ldr	r5, [r3, #8]
 80021c2:	4015      	ands	r5, r2
 80021c4:	2d01      	cmp	r5, #1
 80021c6:	d11c      	bne.n	8002202 <ADC_Disable+0x64>
      __HAL_ADC_DISABLE(hadc);
 80021c8:	6899      	ldr	r1, [r3, #8]
 80021ca:	3a03      	subs	r2, #3
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	2203      	movs	r2, #3
 80021d2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80021d4:	f7ff ff9e 	bl	8002114 <HAL_GetTick>
 80021d8:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	422b      	tst	r3, r5
 80021e0:	d0e5      	beq.n	80021ae <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021e2:	f7ff ff97 	bl	8002114 <HAL_GetTick>
 80021e6:	1b80      	subs	r0, r0, r6
 80021e8:	2802      	cmp	r0, #2
 80021ea:	d9f6      	bls.n	80021da <ADC_Disable+0x3c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	422b      	tst	r3, r5
 80021f2:	d0f2      	beq.n	80021da <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f4:	2310      	movs	r3, #16
 80021f6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80021f8:	4313      	orrs	r3, r2
 80021fa:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80021fe:	432b      	orrs	r3, r5
 8002200:	e006      	b.n	8002210 <ADC_Disable+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	2310      	movs	r3, #16
 8002204:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002206:	4313      	orrs	r3, r2
 8002208:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220a:	2301      	movs	r3, #1
 800220c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800220e:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8002210:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002212:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002214:	e7cc      	b.n	80021b0 <ADC_Disable+0x12>
	...

08002218 <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 8002218:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800221a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800221c:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 800221e:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002220:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8002222:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	400a      	ands	r2, r1
 8002228:	2a01      	cmp	r2, #1
 800222a:	d107      	bne.n	800223c <ADC_Enable.constprop.0+0x24>
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	4211      	tst	r1, r2
 8002230:	d001      	beq.n	8002236 <ADC_Enable.constprop.0+0x1e>
  return HAL_OK;
 8002232:	2000      	movs	r0, #0
}
 8002234:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	0412      	lsls	r2, r2, #16
 800223a:	d4fa      	bmi.n	8002232 <ADC_Enable.constprop.0+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	4a1b      	ldr	r2, [pc, #108]	@ (80022ac <ADC_Enable.constprop.0+0x94>)
 8002240:	4211      	tst	r1, r2
 8002242:	d009      	beq.n	8002258 <ADC_Enable.constprop.0+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002244:	2310      	movs	r3, #16
 8002246:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002248:	4313      	orrs	r3, r2
 800224a:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224c:	2301      	movs	r3, #1
 800224e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002250:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8002252:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002254:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002256:	e7ed      	b.n	8002234 <ADC_Enable.constprop.0+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8002258:	2201      	movs	r2, #1
 800225a:	6899      	ldr	r1, [r3, #8]
 800225c:	430a      	orrs	r2, r1
 800225e:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002260:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <ADC_Enable.constprop.0+0x98>)
 8002262:	4914      	ldr	r1, [pc, #80]	@ (80022b4 <ADC_Enable.constprop.0+0x9c>)
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	f7fd ff7f 	bl	8000168 <__udivsi3>
 800226a:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800226c:	9b01      	ldr	r3, [sp, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d117      	bne.n	80022a2 <ADC_Enable.constprop.0+0x8a>
    tickstart = HAL_GetTick();
 8002272:	f7ff ff4f 	bl	8002114 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002276:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8002278:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	422b      	tst	r3, r5
 8002280:	d1d7      	bne.n	8002232 <ADC_Enable.constprop.0+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002282:	f7ff ff47 	bl	8002114 <HAL_GetTick>
 8002286:	1b80      	subs	r0, r0, r6
 8002288:	2802      	cmp	r0, #2
 800228a:	d9f6      	bls.n	800227a <ADC_Enable.constprop.0+0x62>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	422b      	tst	r3, r5
 8002292:	d1f2      	bne.n	800227a <ADC_Enable.constprop.0+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002294:	2310      	movs	r3, #16
 8002296:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002298:	4313      	orrs	r3, r2
 800229a:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800229e:	432b      	orrs	r3, r5
 80022a0:	e7d7      	b.n	8002252 <ADC_Enable.constprop.0+0x3a>
      wait_loop_index--;
 80022a2:	9b01      	ldr	r3, [sp, #4]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	e7e0      	b.n	800226c <ADC_Enable.constprop.0+0x54>
 80022aa:	46c0      	nop			@ (mov r8, r8)
 80022ac:	80000017 	.word	0x80000017
 80022b0:	20000014 	.word	0x20000014
 80022b4:	000f4240 	.word	0x000f4240

080022b8 <HAL_ADC_Init>:
{
 80022b8:	b570      	push	{r4, r5, r6, lr}
 80022ba:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80022bc:	d100      	bne.n	80022c0 <HAL_ADC_Init+0x8>
 80022be:	e090      	b.n	80023e2 <HAL_ADC_Init+0x12a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022c0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_ADC_Init+0x1a>
    hadc->Lock = HAL_UNLOCKED;
 80022c6:	0002      	movs	r2, r0
 80022c8:	3234      	adds	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80022ca:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 80022cc:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80022ce:	f7ff fcff 	bl	8001cd0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80022d4:	06db      	lsls	r3, r3, #27
 80022d6:	d500      	bpl.n	80022da <HAL_ADC_Init+0x22>
 80022d8:	e085      	b.n	80023e6 <HAL_ADC_Init+0x12e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80022da:	6822      	ldr	r2, [r4, #0]
 80022dc:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80022de:	075b      	lsls	r3, r3, #29
 80022e0:	d500      	bpl.n	80022e4 <HAL_ADC_Init+0x2c>
 80022e2:	e080      	b.n	80023e6 <HAL_ADC_Init+0x12e>
    ADC_STATE_CLR_SET(hadc->State,
 80022e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80022e6:	4b42      	ldr	r3, [pc, #264]	@ (80023f0 <HAL_ADC_Init+0x138>)
 80022e8:	4019      	ands	r1, r3
 80022ea:	3306      	adds	r3, #6
 80022ec:	33ff      	adds	r3, #255	@ 0xff
 80022ee:	430b      	orrs	r3, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80022f0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80022f2:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80022f4:	6893      	ldr	r3, [r2, #8]
 80022f6:	400b      	ands	r3, r1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_Init+0x50>
 80022fc:	6811      	ldr	r1, [r2, #0]
 80022fe:	4219      	tst	r1, r3
 8002300:	d10e      	bne.n	8002320 <HAL_ADC_Init+0x68>
 8002302:	68d3      	ldr	r3, [r2, #12]
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	d40b      	bmi.n	8002320 <HAL_ADC_Init+0x68>
      MODIFY_REG(hadc->Instance->CFGR1,
 8002308:	2118      	movs	r1, #24
 800230a:	68d3      	ldr	r3, [r2, #12]
 800230c:	438b      	bics	r3, r1
 800230e:	68a1      	ldr	r1, [r4, #8]
 8002310:	430b      	orrs	r3, r1
 8002312:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002314:	6913      	ldr	r3, [r2, #16]
 8002316:	6861      	ldr	r1, [r4, #4]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	430b      	orrs	r3, r1
 800231e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002320:	68d3      	ldr	r3, [r2, #12]
 8002322:	4934      	ldr	r1, [pc, #208]	@ (80023f4 <HAL_ADC_Init+0x13c>)
 8002324:	400b      	ands	r3, r1
 8002326:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002328:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800232a:	7e60      	ldrb	r0, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800232c:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800232e:	03c0      	lsls	r0, r0, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002330:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002332:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002334:	68e0      	ldr	r0, [r4, #12]
 8002336:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002338:	0348      	lsls	r0, r1, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800233a:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800233c:	1d60      	adds	r0, r4, #5
 800233e:	7fc0      	ldrb	r0, [r0, #31]
 8002340:	0040      	lsls	r0, r0, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002342:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002344:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002346:	3801      	subs	r0, #1
 8002348:	1e45      	subs	r5, r0, #1
 800234a:	41a8      	sbcs	r0, r5
 800234c:	0300      	lsls	r0, r0, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800234e:	4303      	orrs	r3, r0
 8002350:	6920      	ldr	r0, [r4, #16]
 8002352:	3802      	subs	r0, #2
 8002354:	4245      	negs	r5, r0
 8002356:	4168      	adcs	r0, r5
 8002358:	0080      	lsls	r0, r0, #2
 800235a:	4303      	orrs	r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800235c:	7ee0      	ldrb	r0, [r4, #27]
 800235e:	2801      	cmp	r0, #1
 8002360:	d104      	bne.n	800236c <HAL_ADC_Init+0xb4>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002362:	2900      	cmp	r1, #0
 8002364:	d12b      	bne.n	80023be <HAL_ADC_Init+0x106>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002366:	2180      	movs	r1, #128	@ 0x80
 8002368:	0249      	lsls	r1, r1, #9
 800236a:	430b      	orrs	r3, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800236c:	20c2      	movs	r0, #194	@ 0xc2
 800236e:	69e1      	ldr	r1, [r4, #28]
 8002370:	30ff      	adds	r0, #255	@ 0xff
 8002372:	4281      	cmp	r1, r0
 8002374:	d002      	beq.n	800237c <HAL_ADC_Init+0xc4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002376:	6a20      	ldr	r0, [r4, #32]
 8002378:	4301      	orrs	r1, r0
 800237a:	430b      	orrs	r3, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800237c:	2080      	movs	r0, #128	@ 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800237e:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002380:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002382:	4319      	orrs	r1, r3
 8002384:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002386:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002388:	4281      	cmp	r1, r0
 800238a:	d002      	beq.n	8002392 <HAL_ADC_Init+0xda>
 800238c:	1e48      	subs	r0, r1, #1
 800238e:	2806      	cmp	r0, #6
 8002390:	d807      	bhi.n	80023a2 <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002392:	2507      	movs	r5, #7
 8002394:	6950      	ldr	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002396:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002398:	43a8      	bics	r0, r5
 800239a:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800239c:	6950      	ldr	r0, [r2, #20]
 800239e:	4301      	orrs	r1, r0
 80023a0:	6151      	str	r1, [r2, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80023a2:	68d2      	ldr	r2, [r2, #12]
 80023a4:	4914      	ldr	r1, [pc, #80]	@ (80023f8 <HAL_ADC_Init+0x140>)
 80023a6:	400a      	ands	r2, r1
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d110      	bne.n	80023ce <HAL_ADC_Init+0x116>
      ADC_CLEAR_ERRORCODE(hadc);
 80023ac:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80023ae:	2303      	movs	r3, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80023b0:	63e0      	str	r0, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80023b2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80023b4:	439a      	bics	r2, r3
 80023b6:	3b02      	subs	r3, #2
 80023b8:	4313      	orrs	r3, r2
 80023ba:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80023bc:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023be:	2120      	movs	r1, #32
 80023c0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80023c2:	4329      	orrs	r1, r5
 80023c4:	63a1      	str	r1, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80023c8:	4308      	orrs	r0, r1
 80023ca:	63e0      	str	r0, [r4, #60]	@ 0x3c
 80023cc:	e7ce      	b.n	800236c <HAL_ADC_Init+0xb4>
      ADC_STATE_CLR_SET(hadc->State,
 80023ce:	2312      	movs	r3, #18
 80023d0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80023d2:	439a      	bics	r2, r3
 80023d4:	3b02      	subs	r3, #2
 80023d6:	4313      	orrs	r3, r2
 80023d8:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023da:	2301      	movs	r3, #1
 80023dc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80023de:	4313      	orrs	r3, r2
 80023e0:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80023e2:	2001      	movs	r0, #1
 80023e4:	e7ea      	b.n	80023bc <HAL_ADC_Init+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e6:	2310      	movs	r3, #16
 80023e8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80023ea:	4313      	orrs	r3, r2
 80023ec:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 80023ee:	e7f8      	b.n	80023e2 <HAL_ADC_Init+0x12a>
 80023f0:	fffffefd 	.word	0xfffffefd
 80023f4:	fffe0219 	.word	0xfffe0219
 80023f8:	833fffe7 	.word	0x833fffe7

080023fc <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023fc:	6803      	ldr	r3, [r0, #0]
{
 80023fe:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002400:	689b      	ldr	r3, [r3, #8]
{
 8002402:	0004      	movs	r4, r0
    __HAL_LOCK(hadc);
 8002404:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002406:	075b      	lsls	r3, r3, #29
 8002408:	d41a      	bmi.n	8002440 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800240a:	0025      	movs	r5, r4
 800240c:	3534      	adds	r5, #52	@ 0x34
 800240e:	782b      	ldrb	r3, [r5, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d015      	beq.n	8002440 <HAL_ADC_Start+0x44>
 8002414:	2301      	movs	r3, #1
 8002416:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002418:	7e63      	ldrb	r3, [r4, #25]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d111      	bne.n	8002442 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800241e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002422:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002424:	401a      	ands	r2, r3
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800242c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800242e:	63a3      	str	r3, [r4, #56]	@ 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 8002430:	63e0      	str	r0, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hadc);
 8002432:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	3a18      	subs	r2, #24
 800243c:	430a      	orrs	r2, r1
 800243e:	609a      	str	r2, [r3, #8]
}
 8002440:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002442:	0020      	movs	r0, r4
 8002444:	f7ff fee8 	bl	8002218 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8002448:	2800      	cmp	r0, #0
 800244a:	d0e8      	beq.n	800241e <HAL_ADC_Start+0x22>
 800244c:	e7f8      	b.n	8002440 <HAL_ADC_Start+0x44>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	fffff0fe 	.word	0xfffff0fe

08002454 <HAL_ADC_Stop>:
{ 
 8002454:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8002456:	0006      	movs	r6, r0
 8002458:	3634      	adds	r6, #52	@ 0x34
 800245a:	7833      	ldrb	r3, [r6, #0]
{ 
 800245c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800245e:	2002      	movs	r0, #2
 8002460:	2b01      	cmp	r3, #1
 8002462:	d012      	beq.n	800248a <HAL_ADC_Stop+0x36>
 8002464:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002466:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8002468:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800246a:	f7ff fe6b 	bl	8002144 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800246e:	2800      	cmp	r0, #0
 8002470:	d109      	bne.n	8002486 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8002472:	0020      	movs	r0, r4
 8002474:	f7ff fe93 	bl	800219e <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002478:	2800      	cmp	r0, #0
 800247a:	d104      	bne.n	8002486 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800247c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800247e:	4a03      	ldr	r2, [pc, #12]	@ (800248c <HAL_ADC_Stop+0x38>)
 8002480:	4013      	ands	r3, r2
 8002482:	431d      	orrs	r5, r3
 8002484:	63a5      	str	r5, [r4, #56]	@ 0x38
  __HAL_UNLOCK(hadc);
 8002486:	2300      	movs	r3, #0
 8002488:	7033      	strb	r3, [r6, #0]
}
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	fffffefe 	.word	0xfffffefe

08002490 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002490:	6803      	ldr	r3, [r0, #0]
 8002492:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8002494:	4770      	bx	lr
	...

08002498 <HAL_ADC_ConfigChannel>:
{
 8002498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 800249a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800249c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800249e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80024a0:	3434      	adds	r4, #52	@ 0x34
 80024a2:	7822      	ldrb	r2, [r4, #0]
{
 80024a4:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024a6:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 80024a8:	2002      	movs	r0, #2
 80024aa:	2a01      	cmp	r2, #1
 80024ac:	d02a      	beq.n	8002504 <HAL_ADC_ConfigChannel+0x6c>
 80024ae:	3801      	subs	r0, #1
 80024b0:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	6895      	ldr	r5, [r2, #8]
 80024b6:	076d      	lsls	r5, r5, #29
 80024b8:	d44e      	bmi.n	8002558 <HAL_ADC_ConfigChannel+0xc0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80024ba:	680d      	ldr	r5, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80024bc:	684f      	ldr	r7, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024be:	002b      	movs	r3, r5
    if (sConfig->Rank != ADC_RANK_NONE)
 80024c0:	46bc      	mov	ip, r7
 80024c2:	4f28      	ldr	r7, [pc, #160]	@ (8002564 <HAL_ADC_ConfigChannel+0xcc>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80024c4:	40a8      	lsls	r0, r5
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024c6:	3b10      	subs	r3, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 80024c8:	45bc      	cmp	ip, r7
 80024ca:	d036      	beq.n	800253a <HAL_ADC_ConfigChannel+0xa2>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80024cc:	6a97      	ldr	r7, [r2, #40]	@ 0x28
 80024ce:	4338      	orrs	r0, r7
 80024d0:	6290      	str	r0, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024d2:	2080      	movs	r0, #128	@ 0x80
 80024d4:	0540      	lsls	r0, r0, #21
 80024d6:	4286      	cmp	r6, r0
 80024d8:	d00f      	beq.n	80024fa <HAL_ADC_ConfigChannel+0x62>
 80024da:	3e01      	subs	r6, #1
 80024dc:	2e06      	cmp	r6, #6
 80024de:	d90c      	bls.n	80024fa <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80024e0:	2007      	movs	r0, #7
 80024e2:	6956      	ldr	r6, [r2, #20]
 80024e4:	6889      	ldr	r1, [r1, #8]
 80024e6:	4006      	ands	r6, r0
 80024e8:	42b1      	cmp	r1, r6
 80024ea:	d006      	beq.n	80024fa <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80024ec:	6956      	ldr	r6, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80024ee:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80024f0:	4386      	bics	r6, r0
 80024f2:	6156      	str	r6, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80024f4:	6956      	ldr	r6, [r2, #20]
 80024f6:	4331      	orrs	r1, r6
 80024f8:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d903      	bls.n	8002506 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fe:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002500:	2300      	movs	r3, #0
 8002502:	7023      	strb	r3, [r4, #0]
}
 8002504:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002506:	4a18      	ldr	r2, [pc, #96]	@ (8002568 <HAL_ADC_ConfigChannel+0xd0>)
 8002508:	2180      	movs	r1, #128	@ 0x80
 800250a:	6813      	ldr	r3, [r2, #0]
 800250c:	2d10      	cmp	r5, #16
 800250e:	d012      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x9e>
 8002510:	03c9      	lsls	r1, r1, #15
 8002512:	430b      	orrs	r3, r1
 8002514:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002516:	2d10      	cmp	r5, #16
 8002518:	d1f1      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800251a:	4b14      	ldr	r3, [pc, #80]	@ (800256c <HAL_ADC_ConfigChannel+0xd4>)
 800251c:	4914      	ldr	r1, [pc, #80]	@ (8002570 <HAL_ADC_ConfigChannel+0xd8>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	f7fd fe22 	bl	8000168 <__udivsi3>
 8002524:	230a      	movs	r3, #10
 8002526:	4343      	muls	r3, r0
            wait_loop_index--;
 8002528:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800252a:	9b01      	ldr	r3, [sp, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0e6      	beq.n	80024fe <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8002530:	9b01      	ldr	r3, [sp, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	e7f8      	b.n	8002528 <HAL_ADC_ConfigChannel+0x90>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002536:	0409      	lsls	r1, r1, #16
 8002538:	e7eb      	b.n	8002512 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800253a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800253c:	4381      	bics	r1, r0
 800253e:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002540:	2b01      	cmp	r3, #1
 8002542:	d8dc      	bhi.n	80024fe <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002544:	1e58      	subs	r0, r3, #1
 8002546:	4183      	sbcs	r3, r0
 8002548:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <HAL_ADC_ConfigChannel+0xd0>)
 800254a:	480a      	ldr	r0, [pc, #40]	@ (8002574 <HAL_ADC_ConfigChannel+0xdc>)
 800254c:	6811      	ldr	r1, [r2, #0]
 800254e:	059b      	lsls	r3, r3, #22
 8002550:	181b      	adds	r3, r3, r0
 8002552:	400b      	ands	r3, r1
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e7d2      	b.n	80024fe <HAL_ADC_ConfigChannel+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002558:	2220      	movs	r2, #32
 800255a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800255c:	430a      	orrs	r2, r1
 800255e:	639a      	str	r2, [r3, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8002560:	e7ce      	b.n	8002500 <HAL_ADC_ConfigChannel+0x68>
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	00001001 	.word	0x00001001
 8002568:	40012708 	.word	0x40012708
 800256c:	20000014 	.word	0x20000014
 8002570:	000f4240 	.word	0x000f4240
 8002574:	ff7fffff 	.word	0xff7fffff

08002578 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800257a:	24ff      	movs	r4, #255	@ 0xff
 800257c:	2203      	movs	r2, #3
 800257e:	000b      	movs	r3, r1
 8002580:	0021      	movs	r1, r4
 8002582:	4002      	ands	r2, r0
 8002584:	00d2      	lsls	r2, r2, #3
 8002586:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800258c:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800258e:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8002590:	2800      	cmp	r0, #0
 8002592:	db0a      	blt.n	80025aa <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002594:	24c0      	movs	r4, #192	@ 0xc0
 8002596:	4a0b      	ldr	r2, [pc, #44]	@ (80025c4 <HAL_NVIC_SetPriority+0x4c>)
 8002598:	0880      	lsrs	r0, r0, #2
 800259a:	0080      	lsls	r0, r0, #2
 800259c:	1880      	adds	r0, r0, r2
 800259e:	00a4      	lsls	r4, r4, #2
 80025a0:	5902      	ldr	r2, [r0, r4]
 80025a2:	400a      	ands	r2, r1
 80025a4:	4313      	orrs	r3, r2
 80025a6:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80025a8:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025aa:	220f      	movs	r2, #15
 80025ac:	4010      	ands	r0, r2
 80025ae:	3808      	subs	r0, #8
 80025b0:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <HAL_NVIC_SetPriority+0x50>)
 80025b2:	0880      	lsrs	r0, r0, #2
 80025b4:	0080      	lsls	r0, r0, #2
 80025b6:	1880      	adds	r0, r0, r2
 80025b8:	69c2      	ldr	r2, [r0, #28]
 80025ba:	4011      	ands	r1, r2
 80025bc:	4319      	orrs	r1, r3
 80025be:	61c1      	str	r1, [r0, #28]
 80025c0:	e7f2      	b.n	80025a8 <HAL_NVIC_SetPriority+0x30>
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80025cc:	2800      	cmp	r0, #0
 80025ce:	db05      	blt.n	80025dc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d0:	231f      	movs	r3, #31
 80025d2:	4018      	ands	r0, r3
 80025d4:	3b1e      	subs	r3, #30
 80025d6:	4083      	lsls	r3, r0
 80025d8:	4a01      	ldr	r2, [pc, #4]	@ (80025e0 <HAL_NVIC_EnableIRQ+0x14>)
 80025da:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80025dc:	4770      	bx	lr
 80025de:	46c0      	nop			@ (mov r8, r8)
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e4:	2280      	movs	r2, #128	@ 0x80
 80025e6:	1e43      	subs	r3, r0, #1
 80025e8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ea:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d20d      	bcs.n	800260c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f0:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f2:	4a07      	ldr	r2, [pc, #28]	@ (8002610 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f4:	4807      	ldr	r0, [pc, #28]	@ (8002614 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f8:	6a03      	ldr	r3, [r0, #32]
 80025fa:	0609      	lsls	r1, r1, #24
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	430b      	orrs	r3, r1
 8002602:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002604:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002606:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002608:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800260c:	4770      	bx	lr
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	e000e010 	.word	0xe000e010
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 800261c:	2001      	movs	r0, #1
  if (NULL == hdma)
 800261e:	2c00      	cmp	r4, #0
 8002620:	d024      	beq.n	800266c <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	1ca5      	adds	r5, r4, #2
 8002626:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002628:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 800262c:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800262e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002630:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002632:	6863      	ldr	r3, [r4, #4]
 8002634:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002636:	68e1      	ldr	r1, [r4, #12]
 8002638:	430b      	orrs	r3, r1
 800263a:	6921      	ldr	r1, [r4, #16]
 800263c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263e:	6961      	ldr	r1, [r4, #20]
 8002640:	430b      	orrs	r3, r1
 8002642:	69a1      	ldr	r1, [r4, #24]
 8002644:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002646:	69e1      	ldr	r1, [r4, #28]
 8002648:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800264a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800264c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_DMA_Init+0x5c>)
 8002650:	2114      	movs	r1, #20
 8002652:	18c0      	adds	r0, r0, r3
 8002654:	f7fd fd88 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002658:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800265a:	0080      	lsls	r0, r0, #2
 800265c:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800265e:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002660:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002662:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002664:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 8002666:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8002668:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 800266a:	77e0      	strb	r0, [r4, #31]
}
 800266c:	bd70      	pop	{r4, r5, r6, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	ffffc00f 	.word	0xffffc00f
 8002674:	bffdfff8 	.word	0xbffdfff8
 8002678:	40020000 	.word	0x40020000

0800267c <HAL_DMA_Start>:
{
 800267c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 800267e:	1c44      	adds	r4, r0, #1
{
 8002680:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8002682:	7fe5      	ldrb	r5, [r4, #31]
 8002684:	2d01      	cmp	r5, #1
 8002686:	d025      	beq.n	80026d4 <HAL_DMA_Start+0x58>
 8002688:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 800268a:	1c87      	adds	r7, r0, #2
  __HAL_LOCK(hdma);
 800268c:	77e5      	strb	r5, [r4, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 800268e:	7ffd      	ldrb	r5, [r7, #31]
 8002690:	2600      	movs	r6, #0
 8002692:	46ac      	mov	ip, r5
 8002694:	4663      	mov	r3, ip
 8002696:	b2ed      	uxtb	r5, r5
 8002698:	2b01      	cmp	r3, #1
 800269a:	d11a      	bne.n	80026d2 <HAL_DMA_Start+0x56>
    hdma->State = HAL_DMA_STATE_BUSY;
 800269c:	2402      	movs	r4, #2
 800269e:	77fc      	strb	r4, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026a0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a2:	6386      	str	r6, [r0, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026a4:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026a6:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026a8:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026aa:	40bd      	lsls	r5, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026ac:	6026      	str	r6, [r4, #0]
  hdma->Instance->CNDTR = DataLength;
 80026ae:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026b0:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 80026b2:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80026b4:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026b6:	6843      	ldr	r3, [r0, #4]
 80026b8:	2b10      	cmp	r3, #16
 80026ba:	d107      	bne.n	80026cc <HAL_DMA_Start+0x50>
    hdma->Instance->CPAR = DstAddress;
 80026bc:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80026be:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80026c0:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80026c2:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 80026c4:	6822      	ldr	r2, [r4, #0]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	6023      	str	r3, [r4, #0]
}
 80026ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 80026cc:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80026ce:	60e2      	str	r2, [r4, #12]
 80026d0:	e7f6      	b.n	80026c0 <HAL_DMA_Start+0x44>
    __HAL_UNLOCK(hdma);
 80026d2:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 80026d4:	2002      	movs	r0, #2
 80026d6:	e7f8      	b.n	80026ca <HAL_DMA_Start+0x4e>

080026d8 <HAL_DMA_IRQHandler>:
{
 80026d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026da:	2704      	movs	r7, #4
 80026dc:	003e      	movs	r6, r7
 80026de:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026e2:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026e4:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80026e6:	6803      	ldr	r3, [r0, #0]
 80026e8:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026ea:	4235      	tst	r5, r6
 80026ec:	d00d      	beq.n	800270a <HAL_DMA_IRQHandler+0x32>
 80026ee:	423c      	tst	r4, r7
 80026f0:	d00b      	beq.n	800270a <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	0689      	lsls	r1, r1, #26
 80026f6:	d402      	bmi.n	80026fe <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	43b9      	bics	r1, r7
 80026fc:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80026fe:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002700:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002702:	2b00      	cmp	r3, #0
 8002704:	d019      	beq.n	800273a <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 8002706:	4798      	blx	r3
}
 8002708:	e017      	b.n	800273a <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800270a:	2702      	movs	r7, #2
 800270c:	003e      	movs	r6, r7
 800270e:	408e      	lsls	r6, r1
 8002710:	4235      	tst	r5, r6
 8002712:	d013      	beq.n	800273c <HAL_DMA_IRQHandler+0x64>
 8002714:	423c      	tst	r4, r7
 8002716:	d011      	beq.n	800273c <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	0689      	lsls	r1, r1, #26
 800271c:	d406      	bmi.n	800272c <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800271e:	240a      	movs	r4, #10
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	43a1      	bics	r1, r4
 8002724:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002726:	2101      	movs	r1, #1
 8002728:	19c3      	adds	r3, r0, r7
 800272a:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800272c:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 800272e:	2200      	movs	r2, #0
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 8002734:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 8002736:	4293      	cmp	r3, r2
 8002738:	d1e5      	bne.n	8002706 <HAL_DMA_IRQHandler+0x2e>
}
 800273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800273c:	2608      	movs	r6, #8
 800273e:	0037      	movs	r7, r6
 8002740:	408f      	lsls	r7, r1
 8002742:	423d      	tst	r5, r7
 8002744:	d0f9      	beq.n	800273a <HAL_DMA_IRQHandler+0x62>
 8002746:	4234      	tst	r4, r6
 8002748:	d0f7      	beq.n	800273a <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800274a:	250e      	movs	r5, #14
 800274c:	681c      	ldr	r4, [r3, #0]
 800274e:	43ac      	bics	r4, r5
 8002750:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002752:	2301      	movs	r3, #1
 8002754:	001c      	movs	r4, r3
 8002756:	408c      	lsls	r4, r1
 8002758:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800275a:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800275c:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800275e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8002760:	2200      	movs	r2, #0
 8002762:	18c3      	adds	r3, r0, r3
 8002764:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8002766:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002768:	e7e5      	b.n	8002736 <HAL_DMA_IRQHandler+0x5e>
	...

0800276c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800276c:	2300      	movs	r3, #0
{
 800276e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002770:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002772:	680a      	ldr	r2, [r1, #0]
 8002774:	0014      	movs	r4, r2
 8002776:	40dc      	lsrs	r4, r3
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 800277a:	b007      	add	sp, #28
 800277c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800277e:	2501      	movs	r5, #1
 8002780:	0014      	movs	r4, r2
 8002782:	409d      	lsls	r5, r3
 8002784:	402c      	ands	r4, r5
 8002786:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8002788:	422a      	tst	r2, r5
 800278a:	d100      	bne.n	800278e <HAL_GPIO_Init+0x22>
 800278c:	e098      	b.n	80028c0 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800278e:	684a      	ldr	r2, [r1, #4]
 8002790:	005f      	lsls	r7, r3, #1
 8002792:	4694      	mov	ip, r2
 8002794:	2203      	movs	r2, #3
 8002796:	4664      	mov	r4, ip
 8002798:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800279a:	2403      	movs	r4, #3
 800279c:	40bc      	lsls	r4, r7
 800279e:	43e4      	mvns	r4, r4
 80027a0:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027a2:	1e54      	subs	r4, r2, #1
 80027a4:	2c01      	cmp	r4, #1
 80027a6:	d82e      	bhi.n	8002806 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80027a8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027aa:	9c01      	ldr	r4, [sp, #4]
 80027ac:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027ae:	68cc      	ldr	r4, [r1, #12]
 80027b0:	40bc      	lsls	r4, r7
 80027b2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80027b4:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80027b6:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b8:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ba:	43ac      	bics	r4, r5
 80027bc:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027be:	4664      	mov	r4, ip
 80027c0:	0924      	lsrs	r4, r4, #4
 80027c2:	4034      	ands	r4, r6
 80027c4:	409c      	lsls	r4, r3
 80027c6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80027c8:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 80027ca:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027cc:	9c01      	ldr	r4, [sp, #4]
 80027ce:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027d0:	688c      	ldr	r4, [r1, #8]
 80027d2:	40bc      	lsls	r4, r7
 80027d4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80027d6:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d8:	2a02      	cmp	r2, #2
 80027da:	d116      	bne.n	800280a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027dc:	2507      	movs	r5, #7
 80027de:	260f      	movs	r6, #15
 80027e0:	401d      	ands	r5, r3
 80027e2:	00ad      	lsls	r5, r5, #2
 80027e4:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 80027e6:	08dc      	lsrs	r4, r3, #3
 80027e8:	00a4      	lsls	r4, r4, #2
 80027ea:	1904      	adds	r4, r0, r4
 80027ec:	9402      	str	r4, [sp, #8]
 80027ee:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f0:	9603      	str	r6, [sp, #12]
 80027f2:	0026      	movs	r6, r4
 80027f4:	9c03      	ldr	r4, [sp, #12]
 80027f6:	43a6      	bics	r6, r4
 80027f8:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027fa:	690e      	ldr	r6, [r1, #16]
 80027fc:	40ae      	lsls	r6, r5
 80027fe:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8002800:	9c02      	ldr	r4, [sp, #8]
 8002802:	6226      	str	r6, [r4, #32]
 8002804:	e001      	b.n	800280a <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002806:	2a03      	cmp	r2, #3
 8002808:	d1df      	bne.n	80027ca <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800280a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800280c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800280e:	9d01      	ldr	r5, [sp, #4]
 8002810:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002812:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002814:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8002816:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002818:	4662      	mov	r2, ip
 800281a:	02a4      	lsls	r4, r4, #10
 800281c:	4222      	tst	r2, r4
 800281e:	d04f      	beq.n	80028c0 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002820:	2501      	movs	r5, #1
 8002822:	4a28      	ldr	r2, [pc, #160]	@ (80028c4 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002824:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002828:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282a:	432c      	orrs	r4, r5
 800282c:	6194      	str	r4, [r2, #24]
 800282e:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002830:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	402a      	ands	r2, r5
 8002834:	9205      	str	r2, [sp, #20]
 8002836:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002838:	4a23      	ldr	r2, [pc, #140]	@ (80028c8 <HAL_GPIO_Init+0x15c>)
 800283a:	00a4      	lsls	r4, r4, #2
 800283c:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800283e:	220f      	movs	r2, #15
 8002840:	3502      	adds	r5, #2
 8002842:	401d      	ands	r5, r3
 8002844:	00ad      	lsls	r5, r5, #2
 8002846:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8002848:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800284a:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800284c:	2200      	movs	r2, #0
 800284e:	42b8      	cmp	r0, r7
 8002850:	d00c      	beq.n	800286c <HAL_GPIO_Init+0x100>
 8002852:	4f1e      	ldr	r7, [pc, #120]	@ (80028cc <HAL_GPIO_Init+0x160>)
 8002854:	3201      	adds	r2, #1
 8002856:	42b8      	cmp	r0, r7
 8002858:	d008      	beq.n	800286c <HAL_GPIO_Init+0x100>
 800285a:	4f1d      	ldr	r7, [pc, #116]	@ (80028d0 <HAL_GPIO_Init+0x164>)
 800285c:	3201      	adds	r2, #1
 800285e:	42b8      	cmp	r0, r7
 8002860:	d004      	beq.n	800286c <HAL_GPIO_Init+0x100>
 8002862:	4f1c      	ldr	r7, [pc, #112]	@ (80028d4 <HAL_GPIO_Init+0x168>)
 8002864:	3203      	adds	r2, #3
 8002866:	42b8      	cmp	r0, r7
 8002868:	d100      	bne.n	800286c <HAL_GPIO_Init+0x100>
 800286a:	3a02      	subs	r2, #2
 800286c:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800286e:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002870:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002872:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8002874:	4a18      	ldr	r2, [pc, #96]	@ (80028d8 <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 8002876:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8002878:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800287a:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 800287c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800287e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002880:	02ff      	lsls	r7, r7, #11
 8002882:	d401      	bmi.n	8002888 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8002884:	0035      	movs	r5, r6
 8002886:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002888:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800288a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800288c:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800288e:	9d00      	ldr	r5, [sp, #0]
 8002890:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002892:	02bf      	lsls	r7, r7, #10
 8002894:	d401      	bmi.n	800289a <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 8002896:	0035      	movs	r5, r6
 8002898:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800289a:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 800289c:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800289e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80028a0:	9d00      	ldr	r5, [sp, #0]
 80028a2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028a4:	03bf      	lsls	r7, r7, #14
 80028a6:	d401      	bmi.n	80028ac <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 80028a8:	0035      	movs	r5, r6
 80028aa:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028ac:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80028ae:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80028b0:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80028b2:	9e00      	ldr	r6, [sp, #0]
 80028b4:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028b6:	03ff      	lsls	r7, r7, #15
 80028b8:	d401      	bmi.n	80028be <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 80028ba:	4025      	ands	r5, r4
 80028bc:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80028be:	6016      	str	r6, [r2, #0]
    position++;
 80028c0:	3301      	adds	r3, #1
 80028c2:	e756      	b.n	8002772 <HAL_GPIO_Init+0x6>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40010000 	.word	0x40010000
 80028cc:	48000400 	.word	0x48000400
 80028d0:	48000800 	.word	0x48000800
 80028d4:	48000c00 	.word	0x48000c00
 80028d8:	40010400 	.word	0x40010400

080028dc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028dc:	6900      	ldr	r0, [r0, #16]
 80028de:	4008      	ands	r0, r1
 80028e0:	1e43      	subs	r3, r0, #1
 80028e2:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80028e4:	b2c0      	uxtb	r0, r0
  }
 80028e6:	4770      	bx	lr

080028e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e8:	2a00      	cmp	r2, #0
 80028ea:	d001      	beq.n	80028f0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ec:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028ee:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f0:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80028f2:	e7fc      	b.n	80028ee <HAL_GPIO_WritePin+0x6>

080028f4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028f4:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028f6:	0013      	movs	r3, r2
 80028f8:	400b      	ands	r3, r1
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	4391      	bics	r1, r2
 80028fe:	430b      	orrs	r3, r1
 8002900:	6183      	str	r3, [r0, #24]
}
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002904:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8002906:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	4210      	tst	r0, r2
 800290c:	d002      	beq.n	8002914 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002910:	f7fe fbd4 	bl	80010bc <HAL_GPIO_EXTI_Callback>
  }
}
 8002914:	bd10      	pop	{r4, pc}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	40010400 	.word	0x40010400

0800291c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800291c:	6803      	ldr	r3, [r0, #0]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	0792      	lsls	r2, r2, #30
 8002922:	d501      	bpl.n	8002928 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002924:	2200      	movs	r2, #0
 8002926:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002928:	2201      	movs	r2, #1
 800292a:	6999      	ldr	r1, [r3, #24]
 800292c:	4211      	tst	r1, r2
 800292e:	d102      	bne.n	8002936 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002930:	6999      	ldr	r1, [r3, #24]
 8002932:	430a      	orrs	r2, r1
 8002934:	619a      	str	r2, [r3, #24]
  }
}
 8002936:	4770      	bx	lr

08002938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002938:	b530      	push	{r4, r5, lr}
 800293a:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800293c:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800293e:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002940:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002942:	0589      	lsls	r1, r1, #22
 8002944:	431a      	orrs	r2, r3
 8002946:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <I2C_TransferConfig+0x28>)
 800294a:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800294c:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800294e:	0d64      	lsrs	r4, r4, #21
 8002950:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002952:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002954:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002956:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002958:	432a      	orrs	r2, r5
 800295a:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800295c:	bd30      	pop	{r4, r5, pc}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	03ff63ff 	.word	0x03ff63ff

08002964 <I2C_IsErrorOccurred>:
{
 8002964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002966:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8002968:	6802      	ldr	r2, [r0, #0]
{
 800296a:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 800296c:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800296e:	2310      	movs	r3, #16
 8002970:	000f      	movs	r7, r1
{
 8002972:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002974:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002978:	4219      	tst	r1, r3
 800297a:	d00d      	beq.n	8002998 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 800297c:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800297e:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8002980:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	2120      	movs	r1, #32
 8002986:	699a      	ldr	r2, [r3, #24]
 8002988:	420a      	tst	r2, r1
 800298a:	d15f      	bne.n	8002a4c <I2C_IsErrorOccurred+0xe8>
 800298c:	2f00      	cmp	r7, #0
 800298e:	d031      	beq.n	80029f4 <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 8002990:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8002992:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8002994:	9b01      	ldr	r3, [sp, #4]
 8002996:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002998:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 800299a:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800299c:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 800299e:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029a0:	4213      	tst	r3, r2
 80029a2:	d002      	beq.n	80029aa <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 80029a4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029a6:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80029a8:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029aa:	2280      	movs	r2, #128	@ 0x80
 80029ac:	00d2      	lsls	r2, r2, #3
 80029ae:	4213      	tst	r3, r2
 80029b0:	d003      	beq.n	80029ba <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 80029b2:	2108      	movs	r1, #8
    status = HAL_ERROR;
 80029b4:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 80029b6:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029b8:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029ba:	2280      	movs	r2, #128	@ 0x80
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	4213      	tst	r3, r2
 80029c0:	d049      	beq.n	8002a56 <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 80029c2:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029c4:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 80029c6:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 80029c8:	0020      	movs	r0, r4
 80029ca:	f7ff ffa7 	bl	800291c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80029ce:	686b      	ldr	r3, [r5, #4]
 80029d0:	4a22      	ldr	r2, [pc, #136]	@ (8002a5c <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 80029d2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80029d4:	4013      	ands	r3, r2
 80029d6:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 80029d8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029da:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80029dc:	433b      	orrs	r3, r7
 80029de:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029e0:	0023      	movs	r3, r4
 80029e2:	3341      	adds	r3, #65	@ 0x41
 80029e4:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e6:	0022      	movs	r2, r4
 80029e8:	2300      	movs	r3, #0
 80029ea:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 80029ec:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ee:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80029f0:	7023      	strb	r3, [r4, #0]
 80029f2:	e032      	b.n	8002a5a <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 80029f4:	1c72      	adds	r2, r6, #1
 80029f6:	d0c5      	beq.n	8002984 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029f8:	f7ff fb8c 	bl	8002114 <HAL_GetTick>
 80029fc:	1b40      	subs	r0, r0, r5
 80029fe:	42b0      	cmp	r0, r6
 8002a00:	d801      	bhi.n	8002a06 <I2C_IsErrorOccurred+0xa2>
 8002a02:	2e00      	cmp	r6, #0
 8002a04:	d1bd      	bne.n	8002982 <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 8002a06:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a08:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8002a0a:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a0c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002a0e:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a10:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 8002a12:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a14:	0412      	lsls	r2, r2, #16
 8002a16:	d50b      	bpl.n	8002a30 <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a18:	2280      	movs	r2, #128	@ 0x80
 8002a1a:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a1c:	4210      	tst	r0, r2
 8002a1e:	d107      	bne.n	8002a30 <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a20:	2920      	cmp	r1, #32
 8002a22:	d005      	beq.n	8002a30 <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a24:	6859      	ldr	r1, [r3, #4]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002a2a:	f7ff fb73 	bl	8002114 <HAL_GetTick>
 8002a2e:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a30:	2220      	movs	r2, #32
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4213      	tst	r3, r2
 8002a38:	d1a3      	bne.n	8002982 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a3a:	f7ff fb6b 	bl	8002114 <HAL_GetTick>
 8002a3e:	1b40      	subs	r0, r0, r5
 8002a40:	2819      	cmp	r0, #25
 8002a42:	d9f5      	bls.n	8002a30 <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a44:	2320      	movs	r3, #32
              status = HAL_ERROR;
 8002a46:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	e79a      	b.n	8002982 <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 8002a4c:	2f00      	cmp	r7, #0
 8002a4e:	d19f      	bne.n	8002990 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a50:	2220      	movs	r2, #32
 8002a52:	61da      	str	r2, [r3, #28]
 8002a54:	e79c      	b.n	8002990 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d1b6      	bne.n	80029c8 <I2C_IsErrorOccurred+0x64>
}
 8002a5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a5c:	fe00e800 	.word	0xfe00e800

08002a60 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	0004      	movs	r4, r0
 8002a64:	000d      	movs	r5, r1
 8002a66:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a68:	2702      	movs	r7, #2
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	423b      	tst	r3, r7
 8002a70:	d001      	beq.n	8002a76 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8002a72:	2000      	movs	r0, #0
 8002a74:	e021      	b.n	8002aba <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a76:	0032      	movs	r2, r6
 8002a78:	0029      	movs	r1, r5
 8002a7a:	0020      	movs	r0, r4
 8002a7c:	f7ff ff72 	bl	8002964 <I2C_IsErrorOccurred>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d119      	bne.n	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8002a84:	1c6b      	adds	r3, r5, #1
 8002a86:	d0f0      	beq.n	8002a6a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a88:	f7ff fb44 	bl	8002114 <HAL_GetTick>
 8002a8c:	1b80      	subs	r0, r0, r6
 8002a8e:	42a8      	cmp	r0, r5
 8002a90:	d801      	bhi.n	8002a96 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	d1e9      	bne.n	8002a6a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	6999      	ldr	r1, [r3, #24]
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	000a      	movs	r2, r1
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	4219      	tst	r1, r3
 8002aa2:	d1e2      	bne.n	8002a6a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa4:	2120      	movs	r1, #32
 8002aa6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aac:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8002aae:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	3341      	adds	r3, #65	@ 0x41
 8002ab2:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab4:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8002ab6:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002ab8:	2001      	movs	r0, #1
}
 8002aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002abc <I2C_WaitOnFlagUntilTimeout>:
{
 8002abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002abe:	0004      	movs	r4, r0
 8002ac0:	000d      	movs	r5, r1
 8002ac2:	0017      	movs	r7, r2
 8002ac4:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	402b      	ands	r3, r5
 8002acc:	1b5b      	subs	r3, r3, r5
 8002ace:	425a      	negs	r2, r3
 8002ad0:	4153      	adcs	r3, r2
 8002ad2:	42bb      	cmp	r3, r7
 8002ad4:	d001      	beq.n	8002ada <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e026      	b.n	8002b28 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ada:	0031      	movs	r1, r6
 8002adc:	0020      	movs	r0, r4
 8002ade:	9a06      	ldr	r2, [sp, #24]
 8002ae0:	f7ff ff40 	bl	8002964 <I2C_IsErrorOccurred>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d11e      	bne.n	8002b26 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002ae8:	1c73      	adds	r3, r6, #1
 8002aea:	d0ec      	beq.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aec:	f7ff fb12 	bl	8002114 <HAL_GetTick>
 8002af0:	9b06      	ldr	r3, [sp, #24]
 8002af2:	1ac0      	subs	r0, r0, r3
 8002af4:	42b0      	cmp	r0, r6
 8002af6:	d801      	bhi.n	8002afc <I2C_WaitOnFlagUntilTimeout+0x40>
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d1e4      	bne.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	402b      	ands	r3, r5
 8002b02:	1b5b      	subs	r3, r3, r5
 8002b04:	425a      	negs	r2, r3
 8002b06:	4153      	adcs	r3, r2
 8002b08:	42bb      	cmp	r3, r7
 8002b0a:	d1dc      	bne.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002b10:	4313      	orrs	r3, r2
 8002b12:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	0023      	movs	r3, r4
 8002b16:	3341      	adds	r3, #65	@ 0x41
 8002b18:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1a:	0022      	movs	r2, r4
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002b20:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b22:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002b24:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002b26:	2001      	movs	r0, #1
}
 8002b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b2a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b2c:	0004      	movs	r4, r0
 8002b2e:	000e      	movs	r6, r1
 8002b30:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b32:	2520      	movs	r5, #32
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	422b      	tst	r3, r5
 8002b3a:	d001      	beq.n	8002b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e01d      	b.n	8002b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b40:	003a      	movs	r2, r7
 8002b42:	0031      	movs	r1, r6
 8002b44:	0020      	movs	r0, r4
 8002b46:	f7ff ff0d 	bl	8002964 <I2C_IsErrorOccurred>
 8002b4a:	2800      	cmp	r0, #0
 8002b4c:	d115      	bne.n	8002b7a <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7ff fae1 	bl	8002114 <HAL_GetTick>
 8002b52:	1bc0      	subs	r0, r0, r7
 8002b54:	42b0      	cmp	r0, r6
 8002b56:	d801      	bhi.n	8002b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8002b58:	2e00      	cmp	r6, #0
 8002b5a:	d1eb      	bne.n	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	001a      	movs	r2, r3
 8002b62:	402a      	ands	r2, r5
 8002b64:	422b      	tst	r3, r5
 8002b66:	d1e5      	bne.n	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b68:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002b6a:	432b      	orrs	r3, r5
 8002b6c:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b6e:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8002b70:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	3341      	adds	r3, #65	@ 0x41
 8002b74:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b76:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8002b78:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
}
 8002b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b80 <HAL_I2C_Init>:
{
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002b84:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002b86:	2c00      	cmp	r4, #0
 8002b88:	d04e      	beq.n	8002c28 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8a:	0025      	movs	r5, r4
 8002b8c:	3541      	adds	r5, #65	@ 0x41
 8002b8e:	782b      	ldrb	r3, [r5, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8002b96:	0023      	movs	r3, r4
 8002b98:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002b9a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002b9c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8002b9e:	f7ff f8c5 	bl	8001d2c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba2:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002ba4:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba6:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002ba8:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002baa:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002bac:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bae:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002bb0:	438a      	bics	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bb4:	491d      	ldr	r1, [pc, #116]	@ (8002c2c <HAL_I2C_Init+0xac>)
 8002bb6:	6862      	ldr	r2, [r4, #4]
 8002bb8:	400a      	ands	r2, r1
 8002bba:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	491c      	ldr	r1, [pc, #112]	@ (8002c30 <HAL_I2C_Init+0xb0>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc4:	2801      	cmp	r0, #1
 8002bc6:	d107      	bne.n	8002bd8 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bc8:	2280      	movs	r2, #128	@ 0x80
 8002bca:	0212      	lsls	r2, r2, #8
 8002bcc:	4332      	orrs	r2, r6
 8002bce:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4818      	ldr	r0, [pc, #96]	@ (8002c34 <HAL_I2C_Init+0xb4>)
 8002bd4:	4002      	ands	r2, r0
 8002bd6:	e009      	b.n	8002bec <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bd8:	2284      	movs	r2, #132	@ 0x84
 8002bda:	0212      	lsls	r2, r2, #8
 8002bdc:	4332      	orrs	r2, r6
 8002bde:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002be0:	2802      	cmp	r0, #2
 8002be2:	d1f5      	bne.n	8002bd0 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002be4:	2280      	movs	r2, #128	@ 0x80
 8002be6:	6858      	ldr	r0, [r3, #4]
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bec:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bee:	6858      	ldr	r0, [r3, #4]
 8002bf0:	4a11      	ldr	r2, [pc, #68]	@ (8002c38 <HAL_I2C_Init+0xb8>)
 8002bf2:	4302      	orrs	r2, r0
 8002bf4:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bf6:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bfe:	6961      	ldr	r1, [r4, #20]
 8002c00:	6922      	ldr	r2, [r4, #16]
 8002c02:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c04:	69a1      	ldr	r1, [r4, #24]
 8002c06:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c0c:	6a21      	ldr	r1, [r4, #32]
 8002c0e:	69e2      	ldr	r2, [r4, #28]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002c14:	2201      	movs	r2, #1
 8002c16:	6819      	ldr	r1, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1e:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c22:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	3442      	adds	r4, #66	@ 0x42
 8002c26:	7020      	strb	r0, [r4, #0]
}
 8002c28:	bd70      	pop	{r4, r5, r6, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	f0ffffff 	.word	0xf0ffffff
 8002c30:	ffff7fff 	.word	0xffff7fff
 8002c34:	fffff7ff 	.word	0xfffff7ff
 8002c38:	02008000 	.word	0x02008000

08002c3c <HAL_I2C_Mem_Write>:
{
 8002c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3e:	0007      	movs	r7, r0
{
 8002c40:	b087      	sub	sp, #28
 8002c42:	9303      	str	r3, [sp, #12]
 8002c44:	ab0c      	add	r3, sp, #48	@ 0x30
 8002c46:	9202      	str	r2, [sp, #8]
 8002c48:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4a:	3741      	adds	r7, #65	@ 0x41
{
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	9204      	str	r2, [sp, #16]
 8002c50:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c52:	783b      	ldrb	r3, [r7, #0]
{
 8002c54:	0004      	movs	r4, r0
 8002c56:	000e      	movs	r6, r1
    __HAL_LOCK(hi2c);
 8002c58:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d108      	bne.n	8002c70 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 8002c5e:	2a00      	cmp	r2, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_I2C_Mem_Write+0x2c>
 8002c62:	9b05      	ldr	r3, [sp, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002c6e:	2001      	movs	r0, #1
}
 8002c70:	b007      	add	sp, #28
 8002c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002c74:	0023      	movs	r3, r4
 8002c76:	3340      	adds	r3, #64	@ 0x40
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	2a01      	cmp	r2, #1
 8002c7e:	d0f7      	beq.n	8002c70 <HAL_I2C_Mem_Write+0x34>
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002c84:	f7ff fa46 	bl	8002114 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c88:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8002c8a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c8c:	9000      	str	r0, [sp, #0]
 8002c8e:	2319      	movs	r3, #25
 8002c90:	2201      	movs	r2, #1
 8002c92:	0020      	movs	r0, r4
 8002c94:	0209      	lsls	r1, r1, #8
 8002c96:	f7ff ff11 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d1e7      	bne.n	8002c6e <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c9e:	2321      	movs	r3, #33	@ 0x21
 8002ca0:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ca2:	0027      	movs	r7, r4
 8002ca4:	331f      	adds	r3, #31
 8002ca6:	3742      	adds	r7, #66	@ 0x42
 8002ca8:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8002caa:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cac:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8002cae:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cb0:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8002cb2:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8002cb4:	8563      	strh	r3, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002cb6:	466b      	mov	r3, sp
 8002cb8:	7b1a      	ldrb	r2, [r3, #12]
 8002cba:	4b4b      	ldr	r3, [pc, #300]	@ (8002de8 <HAL_I2C_Mem_Write+0x1ac>)
 8002cbc:	0031      	movs	r1, r6
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2380      	movs	r3, #128	@ 0x80
 8002cc2:	0020      	movs	r0, r4
 8002cc4:	045b      	lsls	r3, r3, #17
 8002cc6:	f7ff fe37 	bl	8002938 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cca:	002a      	movs	r2, r5
 8002ccc:	0020      	movs	r0, r4
 8002cce:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002cd0:	f7ff fec6 	bl	8002a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	d129      	bne.n	8002d2c <HAL_I2C_Mem_Write+0xf0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cd8:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cda:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cdc:	2a01      	cmp	r2, #1
 8002cde:	d116      	bne.n	8002d0e <HAL_I2C_Mem_Write+0xd2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce0:	466a      	mov	r2, sp
 8002ce2:	7a12      	ldrb	r2, [r2, #8]
 8002ce4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	2180      	movs	r1, #128	@ 0x80
 8002cea:	0020      	movs	r0, r4
 8002cec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002cee:	9500      	str	r5, [sp, #0]
 8002cf0:	f7ff fee4 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	d119      	bne.n	8002d2c <HAL_I2C_Mem_Write+0xf0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cf8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002cfa:	2bff      	cmp	r3, #255	@ 0xff
 8002cfc:	d81a      	bhi.n	8002d34 <HAL_I2C_Mem_Write+0xf8>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cfe:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 8002d00:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d02:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8002d04:	b292      	uxth	r2, r2
 8002d06:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	9000      	str	r0, [sp, #0]
 8002d0c:	e017      	b.n	8002d3e <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d0e:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d10:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d12:	0a12      	lsrs	r2, r2, #8
 8002d14:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002d18:	002a      	movs	r2, r5
 8002d1a:	f7ff fea1 	bl	8002a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d1e:	2800      	cmp	r0, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_I2C_Mem_Write+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d22:	466b      	mov	r3, sp
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	7a1b      	ldrb	r3, [r3, #8]
 8002d28:	6293      	str	r3, [r2, #40]	@ 0x28
 8002d2a:	e7dc      	b.n	8002ce6 <HAL_I2C_Mem_Write+0xaa>
      __HAL_UNLOCK(hi2c);
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	3440      	adds	r4, #64	@ 0x40
 8002d30:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002d32:	e79c      	b.n	8002c6e <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d34:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d36:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d38:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d3a:	045b      	lsls	r3, r3, #17
 8002d3c:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d3e:	0031      	movs	r1, r6
 8002d40:	0020      	movs	r0, r4
 8002d42:	f7ff fdf9 	bl	8002938 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d46:	002a      	movs	r2, r5
 8002d48:	0020      	movs	r0, r4
 8002d4a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002d4c:	f7ff fe88 	bl	8002a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d000      	beq.n	8002d56 <HAL_I2C_Mem_Write+0x11a>
 8002d54:	e78b      	b.n	8002c6e <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d58:	6822      	ldr	r2, [r4, #0]
 8002d5a:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002d5c:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d5e:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002d60:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002d62:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d64:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d6c:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d6e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d70:	b292      	uxth	r2, r2
 8002d72:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d016      	beq.n	8002da6 <HAL_I2C_Mem_Write+0x16a>
 8002d78:	2a00      	cmp	r2, #0
 8002d7a:	d114      	bne.n	8002da6 <HAL_I2C_Mem_Write+0x16a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d7c:	2180      	movs	r1, #128	@ 0x80
 8002d7e:	0020      	movs	r0, r4
 8002d80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d82:	9500      	str	r5, [sp, #0]
 8002d84:	f7ff fe9a 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	d000      	beq.n	8002d8e <HAL_I2C_Mem_Write+0x152>
 8002d8c:	e76f      	b.n	8002c6e <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d8e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002d90:	2bff      	cmp	r3, #255	@ 0xff
 8002d92:	d921      	bls.n	8002dd8 <HAL_I2C_Mem_Write+0x19c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d94:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d96:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d98:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d9a:	045b      	lsls	r3, r3, #17
 8002d9c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d9e:	0031      	movs	r1, r6
 8002da0:	0020      	movs	r0, r4
 8002da2:	f7ff fdc9 	bl	8002938 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002da6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1cc      	bne.n	8002d46 <HAL_I2C_Mem_Write+0x10a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dac:	002a      	movs	r2, r5
 8002dae:	0020      	movs	r0, r4
 8002db0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002db2:	f7ff feba 	bl	8002b2a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d000      	beq.n	8002dbc <HAL_I2C_Mem_Write+0x180>
 8002dba:	e758      	b.n	8002c6e <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dbc:	2120      	movs	r1, #32
 8002dbe:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002dc0:	4d0a      	ldr	r5, [pc, #40]	@ (8002dec <HAL_I2C_Mem_Write+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	402a      	ands	r2, r5
 8002dc8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002dcc:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	3341      	adds	r3, #65	@ 0x41
 8002dd0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dd2:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8002dd4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002dd6:	e74b      	b.n	8002c70 <HAL_I2C_Mem_Write+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dd8:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002dda:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ddc:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002dde:	b292      	uxth	r2, r2
 8002de0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	9000      	str	r0, [sp, #0]
 8002de6:	e7da      	b.n	8002d9e <HAL_I2C_Mem_Write+0x162>
 8002de8:	80002000 	.word	0x80002000
 8002dec:	fe00e800 	.word	0xfe00e800

08002df0 <HAL_I2C_Mem_Read>:
{
 8002df0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df2:	0006      	movs	r6, r0
{
 8002df4:	b087      	sub	sp, #28
 8002df6:	9303      	str	r3, [sp, #12]
 8002df8:	ab0c      	add	r3, sp, #48	@ 0x30
 8002dfa:	9202      	str	r2, [sp, #8]
 8002dfc:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfe:	3641      	adds	r6, #65	@ 0x41
{
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	9204      	str	r2, [sp, #16]
 8002e04:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e06:	7833      	ldrb	r3, [r6, #0]
{
 8002e08:	0004      	movs	r4, r0
 8002e0a:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8002e0c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d108      	bne.n	8002e24 <HAL_I2C_Mem_Read+0x34>
    if ((pData == NULL) || (Size == 0U))
 8002e12:	2a00      	cmp	r2, #0
 8002e14:	d002      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x2c>
 8002e16:	9b05      	ldr	r3, [sp, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d105      	bne.n	8002e28 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e1c:	2380      	movs	r3, #128	@ 0x80
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002e22:	2001      	movs	r0, #1
}
 8002e24:	b007      	add	sp, #28
 8002e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002e28:	0023      	movs	r3, r4
 8002e2a:	3340      	adds	r3, #64	@ 0x40
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	2002      	movs	r0, #2
 8002e30:	2a01      	cmp	r2, #1
 8002e32:	d0f7      	beq.n	8002e24 <HAL_I2C_Mem_Read+0x34>
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002e38:	f7ff f96c 	bl	8002114 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e3c:	2180      	movs	r1, #128	@ 0x80
 8002e3e:	2319      	movs	r3, #25
 8002e40:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002e42:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e44:	2201      	movs	r2, #1
 8002e46:	0020      	movs	r0, r4
 8002e48:	0209      	lsls	r1, r1, #8
 8002e4a:	f7ff fe37 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002e4e:	1e03      	subs	r3, r0, #0
 8002e50:	d1e7      	bne.n	8002e22 <HAL_I2C_Mem_Read+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e52:	2222      	movs	r2, #34	@ 0x22
 8002e54:	7032      	strb	r2, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e56:	0026      	movs	r6, r4
 8002e58:	321e      	adds	r2, #30
 8002e5a:	3642      	adds	r6, #66	@ 0x42
 8002e5c:	7032      	strb	r2, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8002e5e:	9a04      	ldr	r2, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8002e62:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e64:	9a05      	ldr	r2, [sp, #20]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e66:	494e      	ldr	r1, [pc, #312]	@ (8002fa0 <HAL_I2C_Mem_Read+0x1b0>)
    hi2c->XferCount = Size;
 8002e68:	8562      	strh	r2, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e6a:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8002e6c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e6e:	7b12      	ldrb	r2, [r2, #12]
 8002e70:	0020      	movs	r0, r4
 8002e72:	9100      	str	r1, [sp, #0]
 8002e74:	0039      	movs	r1, r7
 8002e76:	f7ff fd5f 	bl	8002938 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	002a      	movs	r2, r5
 8002e7c:	0020      	movs	r0, r4
 8002e7e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002e80:	f7ff fdee 	bl	8002a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e84:	2800      	cmp	r0, #0
 8002e86:	d12a      	bne.n	8002ede <HAL_I2C_Mem_Read+0xee>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e88:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e8a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8c:	2a01      	cmp	r2, #1
 8002e8e:	d117      	bne.n	8002ec0 <HAL_I2C_Mem_Read+0xd0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e90:	466a      	mov	r2, sp
 8002e92:	7a12      	ldrb	r2, [r2, #8]
 8002e94:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e96:	2200      	movs	r2, #0
 8002e98:	2140      	movs	r1, #64	@ 0x40
 8002e9a:	0020      	movs	r0, r4
 8002e9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002e9e:	9500      	str	r5, [sp, #0]
 8002ea0:	f7ff fe0c 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	2800      	cmp	r0, #0
 8002ea6:	d11a      	bne.n	8002ede <HAL_I2C_Mem_Read+0xee>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ea8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa4 <HAL_I2C_Mem_Read+0x1b4>)
 8002eac:	2aff      	cmp	r2, #255	@ 0xff
 8002eae:	d81a      	bhi.n	8002ee6 <HAL_I2C_Mem_Read+0xf6>
      hi2c->XferSize = hi2c->XferCount;
 8002eb0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002eb2:	b292      	uxth	r2, r2
 8002eb4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	049b      	lsls	r3, r3, #18
 8002ebe:	e017      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x100>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ec0:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec2:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ec4:	0a12      	lsrs	r2, r2, #8
 8002ec6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002eca:	002a      	movs	r2, r5
 8002ecc:	f7ff fdc8 	bl	8002a60 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d104      	bne.n	8002ede <HAL_I2C_Mem_Read+0xee>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed4:	466b      	mov	r3, sp
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	7a1b      	ldrb	r3, [r3, #8]
 8002eda:	6293      	str	r3, [r2, #40]	@ 0x28
 8002edc:	e7db      	b.n	8002e96 <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	3440      	adds	r4, #64	@ 0x40
 8002ee2:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002ee4:	e79d      	b.n	8002e22 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = 1U;
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ef0:	0039      	movs	r1, r7
 8002ef2:	0020      	movs	r0, r4
 8002ef4:	f7ff fd20 	bl	8002938 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2104      	movs	r1, #4
 8002efc:	0020      	movs	r0, r4
 8002efe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f00:	9500      	str	r5, [sp, #0]
 8002f02:	f7ff fddb 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002f06:	2800      	cmp	r0, #0
 8002f08:	d000      	beq.n	8002f0c <HAL_I2C_Mem_Read+0x11c>
 8002f0a:	e78a      	b.n	8002e22 <HAL_I2C_Mem_Read+0x32>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f10:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f12:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002f14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002f16:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002f18:	3301      	adds	r3, #1
 8002f1a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002f1c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f1e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f26:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d016      	beq.n	8002f5e <HAL_I2C_Mem_Read+0x16e>
 8002f30:	2a00      	cmp	r2, #0
 8002f32:	d114      	bne.n	8002f5e <HAL_I2C_Mem_Read+0x16e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f34:	2180      	movs	r1, #128	@ 0x80
 8002f36:	0020      	movs	r0, r4
 8002f38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f3a:	9500      	str	r5, [sp, #0]
 8002f3c:	f7ff fdbe 	bl	8002abc <I2C_WaitOnFlagUntilTimeout>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d000      	beq.n	8002f46 <HAL_I2C_Mem_Read+0x156>
 8002f44:	e76d      	b.n	8002e22 <HAL_I2C_Mem_Read+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f46:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f48:	2bff      	cmp	r3, #255	@ 0xff
 8002f4a:	d921      	bls.n	8002f90 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = 1U;
 8002f4c:	2201      	movs	r2, #1
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f4e:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = 1U;
 8002f50:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f52:	045b      	lsls	r3, r3, #17
 8002f54:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f56:	0039      	movs	r1, r7
 8002f58:	0020      	movs	r0, r4
 8002f5a:	f7ff fced 	bl	8002938 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002f5e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1c9      	bne.n	8002ef8 <HAL_I2C_Mem_Read+0x108>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f64:	002a      	movs	r2, r5
 8002f66:	0020      	movs	r0, r4
 8002f68:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002f6a:	f7ff fdde 	bl	8002b2a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d000      	beq.n	8002f74 <HAL_I2C_Mem_Read+0x184>
 8002f72:	e756      	b.n	8002e22 <HAL_I2C_Mem_Read+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f74:	2120      	movs	r1, #32
 8002f76:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002f78:	4d0b      	ldr	r5, [pc, #44]	@ (8002fa8 <HAL_I2C_Mem_Read+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f7a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	402a      	ands	r2, r5
 8002f80:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002f84:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	3341      	adds	r3, #65	@ 0x41
 8002f88:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f8a:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002f8c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002f8e:	e749      	b.n	8002e24 <HAL_I2C_Mem_Read+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f90:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002f92:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f94:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002f96:	b292      	uxth	r2, r2
 8002f98:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	9000      	str	r0, [sp, #0]
 8002f9e:	e7da      	b.n	8002f56 <HAL_I2C_Mem_Read+0x166>
 8002fa0:	80002000 	.word	0x80002000
 8002fa4:	80002400 	.word	0x80002400
 8002fa8:	fe00e800 	.word	0xfe00e800

08002fac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	0004      	movs	r4, r0
 8002fb0:	3441      	adds	r4, #65	@ 0x41
 8002fb2:	7822      	ldrb	r2, [r4, #0]
{
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fba:	b2d6      	uxtb	r6, r2
 8002fbc:	2a20      	cmp	r2, #32
 8002fbe:	d118      	bne.n	8002ff2 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002fc0:	001d      	movs	r5, r3
 8002fc2:	3540      	adds	r5, #64	@ 0x40
 8002fc4:	782a      	ldrb	r2, [r5, #0]
 8002fc6:	2a01      	cmp	r2, #1
 8002fc8:	d013      	beq.n	8002ff2 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fca:	2224      	movs	r2, #36	@ 0x24
 8002fcc:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3a23      	subs	r2, #35	@ 0x23
 8002fd2:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fd4:	4807      	ldr	r0, [pc, #28]	@ (8002ff4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002fd6:	4391      	bics	r1, r2
 8002fd8:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fde:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fe0:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	4339      	orrs	r1, r7
 8002fe6:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002ff0:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff4:	ffffefff 	.word	0xffffefff

08002ff8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff8:	0002      	movs	r2, r0
{
 8002ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ffc:	3241      	adds	r2, #65	@ 0x41
 8002ffe:	7814      	ldrb	r4, [r2, #0]
{
 8003000:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003002:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003004:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003006:	2c20      	cmp	r4, #32
 8003008:	d117      	bne.n	800303a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800300a:	001c      	movs	r4, r3
 800300c:	3440      	adds	r4, #64	@ 0x40
 800300e:	7826      	ldrb	r6, [r4, #0]
 8003010:	2e01      	cmp	r6, #1
 8003012:	d012      	beq.n	800303a <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003014:	3022      	adds	r0, #34	@ 0x22
 8003016:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3823      	subs	r0, #35	@ 0x23
 800301c:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800301e:	4f07      	ldr	r7, [pc, #28]	@ (800303c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003020:	4386      	bics	r6, r0
 8003022:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003024:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003026:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003028:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800302a:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800302c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	4308      	orrs	r0, r1
 8003032:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003034:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003036:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003038:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303c:	fffff0ff 	.word	0xfffff0ff

08003040 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8003044:	2001      	movs	r0, #1
  if (hpcd == NULL)
 8003046:	2c00      	cmp	r4, #0
 8003048:	d02b      	beq.n	80030a2 <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800304a:	4d22      	ldr	r5, [pc, #136]	@ (80030d4 <HAL_PCD_Init+0x94>)
 800304c:	5d63      	ldrb	r3, [r4, r5]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003054:	23a4      	movs	r3, #164	@ 0xa4
 8003056:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003058:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 800305a:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 800305c:	f003 f842 	bl	80060e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003060:	2303      	movs	r3, #3
 8003062:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003064:	6820      	ldr	r0, [r4, #0]
 8003066:	f001 fd51 	bl	8004b0c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306a:	2300      	movs	r3, #0
 800306c:	0022      	movs	r2, r4
 800306e:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003070:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003072:	7920      	ldrb	r0, [r4, #4]
 8003074:	3210      	adds	r2, #16
 8003076:	4298      	cmp	r0, r3
 8003078:	d114      	bne.n	80030a4 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307a:	2100      	movs	r1, #0
 800307c:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800307e:	0008      	movs	r0, r1
 8003080:	3251      	adds	r2, #81	@ 0x51
 8003082:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003084:	428b      	cmp	r3, r1
 8003086:	d117      	bne.n	80030b8 <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003088:	6861      	ldr	r1, [r4, #4]
 800308a:	68a2      	ldr	r2, [r4, #8]
 800308c:	6820      	ldr	r0, [r4, #0]
 800308e:	f001 fd47 	bl	8004b20 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003096:	3301      	adds	r3, #1
 8003098:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800309a:	7aa3      	ldrb	r3, [r4, #10]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d015      	beq.n	80030cc <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 80030a0:	2000      	movs	r0, #0
}
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 80030a4:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a6:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 80030a8:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030aa:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030ac:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030ae:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030b0:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3228      	adds	r2, #40	@ 0x28
 80030b6:	e7de      	b.n	8003076 <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 80030b8:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ba:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80030bc:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030be:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030c0:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030c2:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030c4:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c6:	b2c9      	uxtb	r1, r1
 80030c8:	3228      	adds	r2, #40	@ 0x28
 80030ca:	e7db      	b.n	8003084 <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80030cc:	0020      	movs	r0, r4
 80030ce:	f000 fe0e 	bl	8003cee <HAL_PCDEx_ActivateLPM>
 80030d2:	e7e5      	b.n	80030a0 <HAL_PCD_Init+0x60>
 80030d4:	00000291 	.word	0x00000291

080030d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030d8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 80030da:	25a4      	movs	r5, #164	@ 0xa4
 80030dc:	00ad      	lsls	r5, r5, #2
 80030de:	5d43      	ldrb	r3, [r0, r5]
{
 80030e0:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80030e2:	2002      	movs	r0, #2
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d009      	beq.n	80030fc <HAL_PCD_Start+0x24>
 80030e8:	2301      	movs	r3, #1
 80030ea:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 80030ec:	6820      	ldr	r0, [r4, #0]
 80030ee:	f001 fd03 	bl	8004af8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030f2:	6820      	ldr	r0, [r4, #0]
 80030f4:	f001 ff0d 	bl	8004f12 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030f8:	2000      	movs	r0, #0
 80030fa:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 80030fc:	bd70      	pop	{r4, r5, r6, pc}

080030fe <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030fe:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8003100:	25a4      	movs	r5, #164	@ 0xa4
 8003102:	00ad      	lsls	r5, r5, #2
 8003104:	5d43      	ldrb	r3, [r0, r5]
{
 8003106:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8003108:	2002      	movs	r0, #2
 800310a:	2b01      	cmp	r3, #1
 800310c:	d007      	beq.n	800311e <HAL_PCD_SetAddress+0x20>
 800310e:	2301      	movs	r3, #1
 8003110:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003112:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 8003114:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003116:	f001 fef5 	bl	8004f04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800311a:	2000      	movs	r0, #0
 800311c:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800311e:	bd70      	pop	{r4, r5, r6, pc}

08003120 <HAL_PCD_IRQHandler>:
{
 8003120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003122:	0004      	movs	r4, r0
 8003124:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003126:	6800      	ldr	r0, [r0, #0]
 8003128:	f001 fefb 	bl	8004f22 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800312c:	2380      	movs	r3, #128	@ 0x80
 800312e:	0005      	movs	r5, r0
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	401d      	ands	r5, r3
 8003134:	4218      	tst	r0, r3
 8003136:	d101      	bne.n	800313c <HAL_PCD_IRQHandler+0x1c>
 8003138:	f000 fc27 	bl	800398a <HAL_PCD_IRQHandler+0x86a>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800313c:	6820      	ldr	r0, [r4, #0]
 800313e:	1d82      	adds	r2, r0, #6
 8003140:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 8003142:	b21b      	sxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	db01      	blt.n	800314c <HAL_PCD_IRQHandler+0x2c>
}
 8003148:	b005      	add	sp, #20
 800314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800314c:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 800314e:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003150:	4019      	ands	r1, r3
 8003152:	9100      	str	r1, [sp, #0]

    if (epindex == 0U)
 8003154:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8003156:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 8003158:	420b      	tst	r3, r1
 800315a:	d000      	beq.n	800315e <HAL_PCD_IRQHandler+0x3e>
 800315c:	e0c0      	b.n	80032e0 <HAL_PCD_IRQHandler+0x1c0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800315e:	2310      	movs	r3, #16
 8003160:	0011      	movs	r1, r2
 8003162:	4019      	ands	r1, r3
 8003164:	421a      	tst	r2, r3
 8003166:	d127      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x98>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003168:	8803      	ldrh	r3, [r0, #0]
 800316a:	4aca      	ldr	r2, [pc, #808]	@ (8003494 <HAL_PCD_IRQHandler+0x374>)
 800316c:	4013      	ands	r3, r2
 800316e:	2280      	movs	r2, #128	@ 0x80
 8003170:	0212      	lsls	r2, r2, #8
 8003172:	4313      	orrs	r3, r2
 8003174:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003176:	0003      	movs	r3, r0
 8003178:	3350      	adds	r3, #80	@ 0x50
 800317a:	881a      	ldrh	r2, [r3, #0]
 800317c:	7c23      	ldrb	r3, [r4, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	18c3      	adds	r3, r0, r3
 8003182:	189b      	adds	r3, r3, r2
 8003184:	4ac4      	ldr	r2, [pc, #784]	@ (8003498 <HAL_PCD_IRQHandler+0x378>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003186:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003188:	189b      	adds	r3, r3, r2
 800318a:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 800318c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800318e:	059b      	lsls	r3, r3, #22
 8003190:	0d9b      	lsrs	r3, r3, #22
 8003192:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8003194:	18d3      	adds	r3, r2, r3
 8003196:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003198:	f002 ffd5 	bl	8006146 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800319c:	7b23      	ldrb	r3, [r4, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0cc      	beq.n	800313c <HAL_PCD_IRQHandler+0x1c>
 80031a2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031a4:	6823      	ldr	r3, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031a6:	2900      	cmp	r1, #0
 80031a8:	d1c8      	bne.n	800313c <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031aa:	2080      	movs	r0, #128	@ 0x80
 80031ac:	7b22      	ldrb	r2, [r4, #12]
 80031ae:	334c      	adds	r3, #76	@ 0x4c
 80031b0:	4302      	orrs	r2, r0
 80031b2:	801a      	strh	r2, [r3, #0]
          hpcd->USB_Address = 0U;
 80031b4:	7321      	strb	r1, [r4, #12]
 80031b6:	e7c1      	b.n	800313c <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031b8:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031ba:	2180      	movs	r1, #128	@ 0x80
 80031bc:	0016      	movs	r6, r2
 80031be:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031c0:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031c2:	400e      	ands	r6, r1
 80031c4:	420a      	tst	r2, r1
 80031c6:	d022      	beq.n	800320e <HAL_PCD_IRQHandler+0xee>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031c8:	0003      	movs	r3, r0
 80031ca:	3350      	adds	r3, #80	@ 0x50
 80031cc:	881a      	ldrh	r2, [r3, #0]
 80031ce:	23a8      	movs	r3, #168	@ 0xa8
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031d4:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	18c3      	adds	r3, r0, r3
 80031da:	189b      	adds	r3, r3, r2
 80031dc:	4aaf      	ldr	r2, [pc, #700]	@ (800349c <HAL_PCD_IRQHandler+0x37c>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031de:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031e0:	189b      	adds	r3, r3, r2
 80031e2:	0022      	movs	r2, r4
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	3251      	adds	r2, #81	@ 0x51
 80031e8:	059b      	lsls	r3, r3, #22
 80031ea:	0d9b      	lsrs	r3, r3, #22
 80031ec:	32ff      	adds	r2, #255	@ 0xff
 80031ee:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031f0:	1861      	adds	r1, r4, r1
 80031f2:	88d2      	ldrh	r2, [r2, #6]
 80031f4:	f002 f8e0 	bl	80053b8 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031f8:	6821      	ldr	r1, [r4, #0]
 80031fa:	4ba9      	ldr	r3, [pc, #676]	@ (80034a0 <HAL_PCD_IRQHandler+0x380>)
 80031fc:	880a      	ldrh	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031fe:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003200:	401a      	ands	r2, r3
 8003202:	2380      	movs	r3, #128	@ 0x80
 8003204:	4313      	orrs	r3, r2
 8003206:	800b      	strh	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003208:	f002 ff88 	bl	800611c <HAL_PCD_SetupStageCallback>
 800320c:	e796      	b.n	800313c <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800320e:	b21b      	sxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	db00      	blt.n	8003216 <HAL_PCD_IRQHandler+0xf6>
 8003214:	e792      	b.n	800313c <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003216:	8802      	ldrh	r2, [r0, #0]
 8003218:	4ba1      	ldr	r3, [pc, #644]	@ (80034a0 <HAL_PCD_IRQHandler+0x380>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800321a:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800321c:	401a      	ands	r2, r3
 800321e:	2380      	movs	r3, #128	@ 0x80
 8003220:	4313      	orrs	r3, r2
 8003222:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003224:	0003      	movs	r3, r0
 8003226:	3350      	adds	r3, #80	@ 0x50
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	23a8      	movs	r3, #168	@ 0xa8
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	5ce3      	ldrb	r3, [r4, r3]
 8003230:	3551      	adds	r5, #81	@ 0x51
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	18c3      	adds	r3, r0, r3
 8003236:	189b      	adds	r3, r3, r2
 8003238:	4a98      	ldr	r2, [pc, #608]	@ (800349c <HAL_PCD_IRQHandler+0x37c>)
 800323a:	35ff      	adds	r5, #255	@ 0xff
 800323c:	189b      	adds	r3, r3, r2
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	059b      	lsls	r3, r3, #22
 8003242:	0d9b      	lsrs	r3, r3, #22
 8003244:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003246:	d00d      	beq.n	8003264 <HAL_PCD_IRQHandler+0x144>
 8003248:	6969      	ldr	r1, [r5, #20]
 800324a:	2900      	cmp	r1, #0
 800324c:	d00a      	beq.n	8003264 <HAL_PCD_IRQHandler+0x144>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800324e:	88ea      	ldrh	r2, [r5, #6]
 8003250:	f002 f8b2 	bl	80053b8 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8003254:	696b      	ldr	r3, [r5, #20]
 8003256:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003258:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 800325a:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800325c:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 800325e:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003260:	f002 ff65 	bl	800612e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003264:	6821      	ldr	r1, [r4, #0]
 8003266:	880a      	ldrh	r2, [r1, #0]
 8003268:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800326a:	0512      	lsls	r2, r2, #20
 800326c:	d500      	bpl.n	8003270 <HAL_PCD_IRQHandler+0x150>
 800326e:	e765      	b.n	800313c <HAL_PCD_IRQHandler+0x1c>
 8003270:	22c0      	movs	r2, #192	@ 0xc0
 8003272:	0192      	lsls	r2, r2, #6
 8003274:	4013      	ands	r3, r2
 8003276:	4293      	cmp	r3, r2
 8003278:	d100      	bne.n	800327c <HAL_PCD_IRQHandler+0x15c>
 800327a:	e75f      	b.n	800313c <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800327c:	000b      	movs	r3, r1
 800327e:	4a87      	ldr	r2, [pc, #540]	@ (800349c <HAL_PCD_IRQHandler+0x37c>)
 8003280:	3350      	adds	r3, #80	@ 0x50
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	188a      	adds	r2, r1, r2
 8003286:	18d2      	adds	r2, r2, r3
 8003288:	8813      	ldrh	r3, [r2, #0]
 800328a:	059b      	lsls	r3, r3, #22
 800328c:	0d9b      	lsrs	r3, r3, #22
 800328e:	8013      	strh	r3, [r2, #0]
 8003290:	692b      	ldr	r3, [r5, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10e      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x194>
 8003296:	2080      	movs	r0, #128	@ 0x80
 8003298:	8813      	ldrh	r3, [r2, #0]
 800329a:	0200      	lsls	r0, r0, #8
 800329c:	4303      	orrs	r3, r0
 800329e:	8013      	strh	r3, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032a0:	880a      	ldrh	r2, [r1, #0]
 80032a2:	4b80      	ldr	r3, [pc, #512]	@ (80034a4 <HAL_PCD_IRQHandler+0x384>)
 80032a4:	401a      	ands	r2, r3
 80032a6:	23c0      	movs	r3, #192	@ 0xc0
 80032a8:	019b      	lsls	r3, r3, #6
 80032aa:	4053      	eors	r3, r2
 80032ac:	4a7e      	ldr	r2, [pc, #504]	@ (80034a8 <HAL_PCD_IRQHandler+0x388>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	800b      	strh	r3, [r1, #0]
 80032b2:	e743      	b.n	800313c <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80032b6:	d808      	bhi.n	80032ca <HAL_PCD_IRQHandler+0x1aa>
 80032b8:	2501      	movs	r5, #1
 80032ba:	0858      	lsrs	r0, r3, #1
 80032bc:	402b      	ands	r3, r5
 80032be:	18c0      	adds	r0, r0, r3
 80032c0:	8813      	ldrh	r3, [r2, #0]
 80032c2:	0280      	lsls	r0, r0, #10
 80032c4:	4303      	orrs	r3, r0
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	e7e9      	b.n	800329e <HAL_PCD_IRQHandler+0x17e>
 80032ca:	251f      	movs	r5, #31
 80032cc:	0958      	lsrs	r0, r3, #5
 80032ce:	402b      	ands	r3, r5
 80032d0:	425d      	negs	r5, r3
 80032d2:	416b      	adcs	r3, r5
 80032d4:	1ac0      	subs	r0, r0, r3
 80032d6:	8813      	ldrh	r3, [r2, #0]
 80032d8:	0280      	lsls	r0, r0, #10
 80032da:	4318      	orrs	r0, r3
 80032dc:	4b73      	ldr	r3, [pc, #460]	@ (80034ac <HAL_PCD_IRQHandler+0x38c>)
 80032de:	e7f1      	b.n	80032c4 <HAL_PCD_IRQHandler+0x1a4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032e0:	9b00      	ldr	r3, [sp, #0]
 80032e2:	009f      	lsls	r7, r3, #2
 80032e4:	19c2      	adds	r2, r0, r7
 80032e6:	8813      	ldrh	r3, [r2, #0]
 80032e8:	b299      	uxth	r1, r3

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032ea:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032ec:	9101      	str	r1, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	db00      	blt.n	80032f4 <HAL_PCD_IRQHandler+0x1d4>
 80032f2:	e092      	b.n	800341a <HAL_PCD_IRQHandler+0x2fa>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032f4:	8813      	ldrh	r3, [r2, #0]
 80032f6:	496a      	ldr	r1, [pc, #424]	@ (80034a0 <HAL_PCD_IRQHandler+0x380>)
 80032f8:	400b      	ands	r3, r1
 80032fa:	2180      	movs	r1, #128	@ 0x80
 80032fc:	430b      	orrs	r3, r1
 80032fe:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003300:	2328      	movs	r3, #40	@ 0x28
 8003302:	9a00      	ldr	r2, [sp, #0]
 8003304:	4353      	muls	r3, r2
 8003306:	18e3      	adds	r3, r4, r3
 8003308:	001a      	movs	r2, r3
 800330a:	001d      	movs	r5, r3
 800330c:	325d      	adds	r2, #93	@ 0x5d
 800330e:	32ff      	adds	r2, #255	@ 0xff
 8003310:	7812      	ldrb	r2, [r2, #0]
 8003312:	3551      	adds	r5, #81	@ 0x51
 8003314:	35ff      	adds	r5, #255	@ 0xff
 8003316:	2a00      	cmp	r2, #0
 8003318:	d114      	bne.n	8003344 <HAL_PCD_IRQHandler+0x224>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800331a:	0002      	movs	r2, r0
 800331c:	3250      	adds	r2, #80	@ 0x50
 800331e:	8811      	ldrh	r1, [r2, #0]
 8003320:	782a      	ldrb	r2, [r5, #0]
 8003322:	00d2      	lsls	r2, r2, #3
 8003324:	1852      	adds	r2, r2, r1
 8003326:	495d      	ldr	r1, [pc, #372]	@ (800349c <HAL_PCD_IRQHandler+0x37c>)
 8003328:	1812      	adds	r2, r2, r0
 800332a:	1852      	adds	r2, r2, r1
 800332c:	8812      	ldrh	r2, [r2, #0]
 800332e:	0592      	lsls	r2, r2, #22
 8003330:	0d95      	lsrs	r5, r2, #22

          if (count != 0U)
 8003332:	2a00      	cmp	r2, #0
 8003334:	d056      	beq.n	80033e4 <HAL_PCD_IRQHandler+0x2c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003336:	001a      	movs	r2, r3
 8003338:	3257      	adds	r2, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800333a:	32ff      	adds	r2, #255	@ 0xff
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800333c:	33fc      	adds	r3, #252	@ 0xfc
 800333e:	0019      	movs	r1, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003340:	8812      	ldrh	r2, [r2, #0]
 8003342:	e04b      	b.n	80033dc <HAL_PCD_IRQHandler+0x2bc>
          if (ep->type == EP_TYPE_BULK)
 8003344:	0019      	movs	r1, r3
 8003346:	3154      	adds	r1, #84	@ 0x54
 8003348:	31ff      	adds	r1, #255	@ 0xff
 800334a:	7809      	ldrb	r1, [r1, #0]

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800334c:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 800334e:	2902      	cmp	r1, #2
 8003350:	d000      	beq.n	8003354 <HAL_PCD_IRQHandler+0x234>
 8003352:	e0e3      	b.n	800351c <HAL_PCD_IRQHandler+0x3fc>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003354:	2680      	movs	r6, #128	@ 0x80
 8003356:	01f6      	lsls	r6, r6, #7
 8003358:	46b4      	mov	ip, r6
 800335a:	4665      	mov	r5, ip
 800335c:	9e01      	ldr	r6, [sp, #4]

    if (ep->xfer_len >= count)
 800335e:	33fc      	adds	r3, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003360:	402e      	ands	r6, r5
 8003362:	9603      	str	r6, [sp, #12]
 8003364:	0006      	movs	r6, r0
 8003366:	3650      	adds	r6, #80	@ 0x50
 8003368:	9602      	str	r6, [sp, #8]
 800336a:	4666      	mov	r6, ip
 800336c:	9d01      	ldr	r5, [sp, #4]
    if (ep->xfer_len >= count)
 800336e:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003370:	4235      	tst	r5, r6
 8003372:	d100      	bne.n	8003376 <HAL_PCD_IRQHandler+0x256>
 8003374:	e0a0      	b.n	80034b8 <HAL_PCD_IRQHandler+0x398>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003376:	9d02      	ldr	r5, [sp, #8]
 8003378:	882e      	ldrh	r6, [r5, #0]
 800337a:	00d5      	lsls	r5, r2, #3
 800337c:	1986      	adds	r6, r0, r6
 800337e:	1976      	adds	r6, r6, r5
 8003380:	4d45      	ldr	r5, [pc, #276]	@ (8003498 <HAL_PCD_IRQHandler+0x378>)
 8003382:	1976      	adds	r6, r6, r5
 8003384:	8835      	ldrh	r5, [r6, #0]
 8003386:	05ad      	lsls	r5, r5, #22
 8003388:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 800338a:	428d      	cmp	r5, r1
 800338c:	d90d      	bls.n	80033aa <HAL_PCD_IRQHandler+0x28a>
 800338e:	2100      	movs	r1, #0
 8003390:	66d9      	str	r1, [r3, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003392:	0091      	lsls	r1, r2, #2
 8003394:	1841      	adds	r1, r0, r1
 8003396:	880e      	ldrh	r6, [r1, #0]
 8003398:	4b42      	ldr	r3, [pc, #264]	@ (80034a4 <HAL_PCD_IRQHandler+0x384>)
 800339a:	401e      	ands	r6, r3
 800339c:	2380      	movs	r3, #128	@ 0x80
 800339e:	019b      	lsls	r3, r3, #6
 80033a0:	4073      	eors	r3, r6
 80033a2:	4e41      	ldr	r6, [pc, #260]	@ (80034a8 <HAL_PCD_IRQHandler+0x388>)
 80033a4:	4333      	orrs	r3, r6
 80033a6:	800b      	strh	r3, [r1, #0]
 80033a8:	e002      	b.n	80033b0 <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 80033aa:	1b49      	subs	r1, r1, r5
 80033ac:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 80033ae:	d0f0      	beq.n	8003392 <HAL_PCD_IRQHandler+0x272>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033b0:	9b01      	ldr	r3, [sp, #4]
 80033b2:	065b      	lsls	r3, r3, #25
 80033b4:	d507      	bpl.n	80033c6 <HAL_PCD_IRQHandler+0x2a6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033b6:	0092      	lsls	r2, r2, #2
 80033b8:	1882      	adds	r2, r0, r2
 80033ba:	8813      	ldrh	r3, [r2, #0]
 80033bc:	493c      	ldr	r1, [pc, #240]	@ (80034b0 <HAL_PCD_IRQHandler+0x390>)
 80033be:	400b      	ands	r3, r1
 80033c0:	493c      	ldr	r1, [pc, #240]	@ (80034b4 <HAL_PCD_IRQHandler+0x394>)
 80033c2:	430b      	orrs	r3, r1
 80033c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80033c6:	2d00      	cmp	r5, #0
 80033c8:	d00c      	beq.n	80033e4 <HAL_PCD_IRQHandler+0x2c4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033ca:	2328      	movs	r3, #40	@ 0x28
 80033cc:	9a00      	ldr	r2, [sp, #0]
 80033ce:	4353      	muls	r3, r2
 80033d0:	18e1      	adds	r1, r4, r3
 80033d2:	000a      	movs	r2, r1
 80033d4:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033d6:	32ff      	adds	r2, #255	@ 0xff
 80033d8:	8812      	ldrh	r2, [r2, #0]
 80033da:	31fc      	adds	r1, #252	@ 0xfc
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033dc:	002b      	movs	r3, r5
 80033de:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80033e0:	f001 ffea 	bl	80053b8 <USB_ReadPMA>
        ep->xfer_count += count;
 80033e4:	2328      	movs	r3, #40	@ 0x28
 80033e6:	9900      	ldr	r1, [sp, #0]
 80033e8:	4359      	muls	r1, r3
 80033ea:	1862      	adds	r2, r4, r1
 80033ec:	32fc      	adds	r2, #252	@ 0xfc
 80033ee:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80033f0:	1940      	adds	r0, r0, r5
 80033f2:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 80033f4:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80033f6:	1940      	adds	r0, r0, r5
 80033f8:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80033fa:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d003      	beq.n	8003408 <HAL_PCD_IRQHandler+0x2e8>
 8003400:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003402:	4295      	cmp	r5, r2
 8003404:	d300      	bcc.n	8003408 <HAL_PCD_IRQHandler+0x2e8>
 8003406:	e0b3      	b.n	8003570 <HAL_PCD_IRQHandler+0x450>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003408:	9a00      	ldr	r2, [sp, #0]
 800340a:	0020      	movs	r0, r4
 800340c:	4353      	muls	r3, r2
 800340e:	18e3      	adds	r3, r4, r3
 8003410:	3351      	adds	r3, #81	@ 0x51
 8003412:	33ff      	adds	r3, #255	@ 0xff
 8003414:	7819      	ldrb	r1, [r3, #0]
 8003416:	f002 fe8a 	bl	800612e <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800341a:	2280      	movs	r2, #128	@ 0x80
 800341c:	9b01      	ldr	r3, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800341e:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003420:	4213      	tst	r3, r2
 8003422:	d100      	bne.n	8003426 <HAL_PCD_IRQHandler+0x306>
 8003424:	e68a      	b.n	800313c <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003426:	19c2      	adds	r2, r0, r7
 8003428:	8813      	ldrh	r3, [r2, #0]
 800342a:	491a      	ldr	r1, [pc, #104]	@ (8003494 <HAL_PCD_IRQHandler+0x374>)
        if (ep->type == EP_TYPE_ISOC)
 800342c:	9e00      	ldr	r6, [sp, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800342e:	400b      	ands	r3, r1
 8003430:	491e      	ldr	r1, [pc, #120]	@ (80034ac <HAL_PCD_IRQHandler+0x38c>)
 8003432:	430b      	orrs	r3, r1
 8003434:	b29b      	uxth	r3, r3
 8003436:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 8003438:	2228      	movs	r2, #40	@ 0x28
 800343a:	4356      	muls	r6, r2
 800343c:	19a3      	adds	r3, r4, r6
 800343e:	7cd9      	ldrb	r1, [r3, #19]
 8003440:	2901      	cmp	r1, #1
 8003442:	d000      	beq.n	8003446 <HAL_PCD_IRQHandler+0x326>
 8003444:	e0c7      	b.n	80035d6 <HAL_PCD_IRQHandler+0x4b6>
          ep->xfer_len = 0U;
 8003446:	9900      	ldr	r1, [sp, #0]
 8003448:	3101      	adds	r1, #1
 800344a:	434a      	muls	r2, r1
 800344c:	2100      	movs	r1, #0
 800344e:	5111      	str	r1, [r2, r4]
          if (ep->doublebuffer != 0U)
 8003450:	7f1a      	ldrb	r2, [r3, #28]
 8003452:	428a      	cmp	r2, r1
 8003454:	d100      	bne.n	8003458 <HAL_PCD_IRQHandler+0x338>
 8003456:	e09e      	b.n	8003596 <HAL_PCD_IRQHandler+0x476>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003458:	2240      	movs	r2, #64	@ 0x40
 800345a:	9d01      	ldr	r5, [sp, #4]
 800345c:	9e01      	ldr	r6, [sp, #4]
 800345e:	4015      	ands	r5, r2
 8003460:	4216      	tst	r6, r2
 8003462:	d100      	bne.n	8003466 <HAL_PCD_IRQHandler+0x346>
 8003464:	e0a0      	b.n	80035a8 <HAL_PCD_IRQHandler+0x488>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003466:	7c5a      	ldrb	r2, [r3, #17]
 8003468:	428a      	cmp	r2, r1
 800346a:	d000      	beq.n	800346e <HAL_PCD_IRQHandler+0x34e>
 800346c:	e087      	b.n	800357e <HAL_PCD_IRQHandler+0x45e>
 800346e:	0002      	movs	r2, r0
 8003470:	3250      	adds	r2, #80	@ 0x50
 8003472:	8811      	ldrh	r1, [r2, #0]
 8003474:	7c1a      	ldrb	r2, [r3, #16]
 8003476:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <HAL_PCD_IRQHandler+0x378>)
 8003478:	00d2      	lsls	r2, r2, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800347a:	18c0      	adds	r0, r0, r3
 800347c:	1841      	adds	r1, r0, r1
 800347e:	1852      	adds	r2, r2, r1
 8003480:	8813      	ldrh	r3, [r2, #0]
 8003482:	490a      	ldr	r1, [pc, #40]	@ (80034ac <HAL_PCD_IRQHandler+0x38c>)
 8003484:	059b      	lsls	r3, r3, #22
 8003486:	0d9b      	lsrs	r3, r3, #22
 8003488:	8013      	strh	r3, [r2, #0]
 800348a:	8813      	ldrh	r3, [r2, #0]
 800348c:	430b      	orrs	r3, r1
 800348e:	b29b      	uxth	r3, r3
 8003490:	8013      	strh	r3, [r2, #0]
 8003492:	e080      	b.n	8003596 <HAL_PCD_IRQHandler+0x476>
 8003494:	ffff8f0f 	.word	0xffff8f0f
 8003498:	00000402 	.word	0x00000402
 800349c:	00000406 	.word	0x00000406
 80034a0:	00000f8f 	.word	0x00000f8f
 80034a4:	ffffbf8f 	.word	0xffffbf8f
 80034a8:	00008080 	.word	0x00008080
 80034ac:	ffff8000 	.word	0xffff8000
 80034b0:	ffff8f8f 	.word	0xffff8f8f
 80034b4:	000080c0 	.word	0x000080c0
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034b8:	9d02      	ldr	r5, [sp, #8]
 80034ba:	882e      	ldrh	r6, [r5, #0]
 80034bc:	00d5      	lsls	r5, r2, #3
 80034be:	1986      	adds	r6, r0, r6
 80034c0:	1976      	adds	r6, r6, r5
 80034c2:	4dc7      	ldr	r5, [pc, #796]	@ (80037e0 <HAL_PCD_IRQHandler+0x6c0>)
 80034c4:	1976      	adds	r6, r6, r5
 80034c6:	8835      	ldrh	r5, [r6, #0]
 80034c8:	05ad      	lsls	r5, r5, #22
 80034ca:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 80034cc:	428d      	cmp	r5, r1
 80034ce:	d90d      	bls.n	80034ec <HAL_PCD_IRQHandler+0x3cc>
 80034d0:	9903      	ldr	r1, [sp, #12]
 80034d2:	66d9      	str	r1, [r3, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034d4:	0091      	lsls	r1, r2, #2
 80034d6:	1841      	adds	r1, r0, r1
 80034d8:	880e      	ldrh	r6, [r1, #0]
 80034da:	4bc2      	ldr	r3, [pc, #776]	@ (80037e4 <HAL_PCD_IRQHandler+0x6c4>)
 80034dc:	401e      	ands	r6, r3
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	019b      	lsls	r3, r3, #6
 80034e2:	4073      	eors	r3, r6
 80034e4:	4ec0      	ldr	r6, [pc, #768]	@ (80037e8 <HAL_PCD_IRQHandler+0x6c8>)
 80034e6:	4333      	orrs	r3, r6
 80034e8:	800b      	strh	r3, [r1, #0]
 80034ea:	e002      	b.n	80034f2 <HAL_PCD_IRQHandler+0x3d2>
      ep->xfer_len -= count;
 80034ec:	1b49      	subs	r1, r1, r5
 80034ee:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 80034f0:	d0f0      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x3b4>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034f2:	9b01      	ldr	r3, [sp, #4]
 80034f4:	065b      	lsls	r3, r3, #25
 80034f6:	d407      	bmi.n	8003508 <HAL_PCD_IRQHandler+0x3e8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034f8:	0092      	lsls	r2, r2, #2
 80034fa:	1882      	adds	r2, r0, r2
 80034fc:	8813      	ldrh	r3, [r2, #0]
 80034fe:	49bb      	ldr	r1, [pc, #748]	@ (80037ec <HAL_PCD_IRQHandler+0x6cc>)
 8003500:	400b      	ands	r3, r1
 8003502:	49bb      	ldr	r1, [pc, #748]	@ (80037f0 <HAL_PCD_IRQHandler+0x6d0>)
 8003504:	430b      	orrs	r3, r1
 8003506:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8003508:	2d00      	cmp	r5, #0
 800350a:	d100      	bne.n	800350e <HAL_PCD_IRQHandler+0x3ee>
 800350c:	e76a      	b.n	80033e4 <HAL_PCD_IRQHandler+0x2c4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800350e:	2328      	movs	r3, #40	@ 0x28
 8003510:	9a00      	ldr	r2, [sp, #0]
 8003512:	4353      	muls	r3, r2
 8003514:	18e1      	adds	r1, r4, r3
 8003516:	000a      	movs	r2, r1
 8003518:	325b      	adds	r2, #91	@ 0x5b
 800351a:	e75c      	b.n	80033d6 <HAL_PCD_IRQHandler+0x2b6>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	1882      	adds	r2, r0, r2
 8003520:	8816      	ldrh	r6, [r2, #0]
 8003522:	49b2      	ldr	r1, [pc, #712]	@ (80037ec <HAL_PCD_IRQHandler+0x6cc>)
 8003524:	4031      	ands	r1, r6
 8003526:	4eb2      	ldr	r6, [pc, #712]	@ (80037f0 <HAL_PCD_IRQHandler+0x6d0>)
 8003528:	4331      	orrs	r1, r6
 800352a:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800352c:	782a      	ldrb	r2, [r5, #0]
 800352e:	0091      	lsls	r1, r2, #2
 8003530:	1841      	adds	r1, r0, r1
 8003532:	880d      	ldrh	r5, [r1, #0]
 8003534:	0001      	movs	r1, r0
 8003536:	3150      	adds	r1, #80	@ 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003538:	8809      	ldrh	r1, [r1, #0]
 800353a:	00d2      	lsls	r2, r2, #3
 800353c:	1852      	adds	r2, r2, r1
 800353e:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003540:	046d      	lsls	r5, r5, #17
 8003542:	d50a      	bpl.n	800355a <HAL_PCD_IRQHandler+0x43a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003544:	49ab      	ldr	r1, [pc, #684]	@ (80037f4 <HAL_PCD_IRQHandler+0x6d4>)
 8003546:	1852      	adds	r2, r2, r1
 8003548:	8812      	ldrh	r2, [r2, #0]
 800354a:	0592      	lsls	r2, r2, #22
 800354c:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 800354e:	2a00      	cmp	r2, #0
 8003550:	d100      	bne.n	8003554 <HAL_PCD_IRQHandler+0x434>
 8003552:	e747      	b.n	80033e4 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003554:	001a      	movs	r2, r3
 8003556:	3259      	adds	r2, #89	@ 0x59
 8003558:	e6ef      	b.n	800333a <HAL_PCD_IRQHandler+0x21a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800355a:	49a1      	ldr	r1, [pc, #644]	@ (80037e0 <HAL_PCD_IRQHandler+0x6c0>)
 800355c:	1852      	adds	r2, r2, r1
 800355e:	8812      	ldrh	r2, [r2, #0]
 8003560:	0592      	lsls	r2, r2, #22
 8003562:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8003564:	2a00      	cmp	r2, #0
 8003566:	d100      	bne.n	800356a <HAL_PCD_IRQHandler+0x44a>
 8003568:	e73c      	b.n	80033e4 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800356a:	001a      	movs	r2, r3
 800356c:	325b      	adds	r2, #91	@ 0x5b
 800356e:	e6e4      	b.n	800333a <HAL_PCD_IRQHandler+0x21a>
        ep = &hpcd->OUT_ep[epindex];
 8003570:	3151      	adds	r1, #81	@ 0x51
 8003572:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003574:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003576:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003578:	f001 fcec 	bl	8004f54 <USB_EPStartXfer>
 800357c:	e74d      	b.n	800341a <HAL_PCD_IRQHandler+0x2fa>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800357e:	2a01      	cmp	r2, #1
 8003580:	d109      	bne.n	8003596 <HAL_PCD_IRQHandler+0x476>
 8003582:	0002      	movs	r2, r0
 8003584:	4d9b      	ldr	r5, [pc, #620]	@ (80037f4 <HAL_PCD_IRQHandler+0x6d4>)
 8003586:	3250      	adds	r2, #80	@ 0x50
 8003588:	8812      	ldrh	r2, [r2, #0]
 800358a:	7c1b      	ldrb	r3, [r3, #16]
 800358c:	1940      	adds	r0, r0, r5
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	1880      	adds	r0, r0, r2
 8003592:	181b      	adds	r3, r3, r0
 8003594:	8019      	strh	r1, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003596:	2328      	movs	r3, #40	@ 0x28
 8003598:	9a00      	ldr	r2, [sp, #0]
 800359a:	4353      	muls	r3, r2
 800359c:	18e3      	adds	r3, r4, r3
 800359e:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035a0:	0020      	movs	r0, r4
 80035a2:	f002 fdd0 	bl	8006146 <HAL_PCD_DataInStageCallback>
 80035a6:	e5c9      	b.n	800313c <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035a8:	7c5a      	ldrb	r2, [r3, #17]
 80035aa:	2a00      	cmp	r2, #0
 80035ac:	d106      	bne.n	80035bc <HAL_PCD_IRQHandler+0x49c>
 80035ae:	0002      	movs	r2, r0
 80035b0:	3250      	adds	r2, #80	@ 0x50
 80035b2:	8811      	ldrh	r1, [r2, #0]
 80035b4:	7c1a      	ldrb	r2, [r3, #16]
 80035b6:	4b8a      	ldr	r3, [pc, #552]	@ (80037e0 <HAL_PCD_IRQHandler+0x6c0>)
 80035b8:	00d2      	lsls	r2, r2, #3
 80035ba:	e75e      	b.n	800347a <HAL_PCD_IRQHandler+0x35a>
 80035bc:	2a01      	cmp	r2, #1
 80035be:	d1ea      	bne.n	8003596 <HAL_PCD_IRQHandler+0x476>
 80035c0:	0002      	movs	r2, r0
 80035c2:	4987      	ldr	r1, [pc, #540]	@ (80037e0 <HAL_PCD_IRQHandler+0x6c0>)
 80035c4:	3250      	adds	r2, #80	@ 0x50
 80035c6:	8812      	ldrh	r2, [r2, #0]
 80035c8:	7c1b      	ldrb	r3, [r3, #16]
 80035ca:	1840      	adds	r0, r0, r1
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	1880      	adds	r0, r0, r2
 80035d0:	181b      	adds	r3, r3, r0
 80035d2:	801d      	strh	r5, [r3, #0]
 80035d4:	e7df      	b.n	8003596 <HAL_PCD_IRQHandler+0x476>
          if ((wEPVal & USB_EP_KIND) == 0U)
 80035d6:	2780      	movs	r7, #128	@ 0x80
 80035d8:	9901      	ldr	r1, [sp, #4]
 80035da:	007f      	lsls	r7, r7, #1
 80035dc:	4039      	ands	r1, r7
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035de:	7c1a      	ldrb	r2, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80035e0:	468c      	mov	ip, r1
 80035e2:	9901      	ldr	r1, [sp, #4]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035e4:	9202      	str	r2, [sp, #8]
            if (ep->xfer_len > TxPctSize)
 80035e6:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035e8:	00d2      	lsls	r2, r2, #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 80035ea:	4239      	tst	r1, r7
 80035ec:	d11c      	bne.n	8003628 <HAL_PCD_IRQHandler+0x508>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035ee:	0007      	movs	r7, r0
 80035f0:	3750      	adds	r7, #80	@ 0x50
 80035f2:	883f      	ldrh	r7, [r7, #0]
 80035f4:	18bf      	adds	r7, r7, r2
 80035f6:	4a7f      	ldr	r2, [pc, #508]	@ (80037f4 <HAL_PCD_IRQHandler+0x6d4>)
 80035f8:	183f      	adds	r7, r7, r0
 80035fa:	18bf      	adds	r7, r7, r2
 80035fc:	883a      	ldrh	r2, [r7, #0]
 80035fe:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 8003600:	0d92      	lsrs	r2, r2, #22
 8003602:	42aa      	cmp	r2, r5
 8003604:	d303      	bcc.n	800360e <HAL_PCD_IRQHandler+0x4ee>
 8003606:	4662      	mov	r2, ip
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003608:	9902      	ldr	r1, [sp, #8]
 800360a:	629a      	str	r2, [r3, #40]	@ 0x28
 800360c:	e7c8      	b.n	80035a0 <HAL_PCD_IRQHandler+0x480>
              ep->xfer_buff += TxPctSize;
 800360e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
              ep->xfer_len -= TxPctSize;
 8003610:	1aad      	subs	r5, r5, r2
              ep->xfer_buff += TxPctSize;
 8003612:	1889      	adds	r1, r1, r2
 8003614:	6259      	str	r1, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8003616:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8003618:	3610      	adds	r6, #16
              ep->xfer_count += TxPctSize;
 800361a:	188a      	adds	r2, r1, r2
 800361c:	629d      	str	r5, [r3, #40]	@ 0x28
 800361e:	62da      	str	r2, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8003620:	19a1      	adds	r1, r4, r6
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003622:	f001 fc97 	bl	8004f54 <USB_EPStartXfer>
 8003626:	e589      	b.n	800313c <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003628:	2140      	movs	r1, #64	@ 0x40
 800362a:	468c      	mov	ip, r1
 800362c:	9f01      	ldr	r7, [sp, #4]
 800362e:	0006      	movs	r6, r0
 8003630:	400f      	ands	r7, r1
 8003632:	9703      	str	r7, [sp, #12]
 8003634:	4667      	mov	r7, ip
 8003636:	9901      	ldr	r1, [sp, #4]
 8003638:	3650      	adds	r6, #80	@ 0x50
 800363a:	4239      	tst	r1, r7
 800363c:	d100      	bne.n	8003640 <HAL_PCD_IRQHandler+0x520>
 800363e:	e0df      	b.n	8003800 <HAL_PCD_IRQHandler+0x6e0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003640:	496c      	ldr	r1, [pc, #432]	@ (80037f4 <HAL_PCD_IRQHandler+0x6d4>)
 8003642:	8837      	ldrh	r7, [r6, #0]
 8003644:	1846      	adds	r6, r0, r1
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8003646:	2100      	movs	r1, #0
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003648:	19f7      	adds	r7, r6, r7
 800364a:	5abf      	ldrh	r7, [r7, r2]
      ep->xfer_len = 0U;
 800364c:	468c      	mov	ip, r1
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800364e:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len > TxPctSize)
 8003650:	0dbf      	lsrs	r7, r7, #22
 8003652:	42af      	cmp	r7, r5
 8003654:	d201      	bcs.n	800365a <HAL_PCD_IRQHandler+0x53a>
      ep->xfer_len -= TxPctSize;
 8003656:	1be9      	subs	r1, r5, r7
 8003658:	468c      	mov	ip, r1
 800365a:	4661      	mov	r1, ip
 800365c:	2580      	movs	r5, #128	@ 0x80
 800365e:	6299      	str	r1, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003660:	9901      	ldr	r1, [sp, #4]
 8003662:	01ed      	lsls	r5, r5, #7
 8003664:	4029      	ands	r1, r5
 8003666:	000d      	movs	r5, r1
 8003668:	4661      	mov	r1, ip
 800366a:	2900      	cmp	r1, #0
 800366c:	d147      	bne.n	80036fe <HAL_PCD_IRQHandler+0x5de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800366e:	2328      	movs	r3, #40	@ 0x28
 8003670:	9900      	ldr	r1, [sp, #0]
 8003672:	434b      	muls	r3, r1
 8003674:	18e3      	adds	r3, r4, r3
 8003676:	7c5b      	ldrb	r3, [r3, #17]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d130      	bne.n	80036de <HAL_PCD_IRQHandler+0x5be>
 800367c:	0007      	movs	r7, r0
 800367e:	3750      	adds	r7, #80	@ 0x50
 8003680:	883b      	ldrh	r3, [r7, #0]
 8003682:	495d      	ldr	r1, [pc, #372]	@ (80037f8 <HAL_PCD_IRQHandler+0x6d8>)
 8003684:	18f3      	adds	r3, r6, r3
 8003686:	189b      	adds	r3, r3, r2
 8003688:	881e      	ldrh	r6, [r3, #0]
 800368a:	05b6      	lsls	r6, r6, #22
 800368c:	0db6      	lsrs	r6, r6, #22
 800368e:	801e      	strh	r6, [r3, #0]
 8003690:	881e      	ldrh	r6, [r3, #0]
 8003692:	430e      	orrs	r6, r1
 8003694:	b2b6      	uxth	r6, r6
 8003696:	801e      	strh	r6, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003698:	4e51      	ldr	r6, [pc, #324]	@ (80037e0 <HAL_PCD_IRQHandler+0x6c0>)
 800369a:	883b      	ldrh	r3, [r7, #0]
 800369c:	1980      	adds	r0, r0, r6
 800369e:	18c0      	adds	r0, r0, r3
 80036a0:	1880      	adds	r0, r0, r2
 80036a2:	8803      	ldrh	r3, [r0, #0]
 80036a4:	059b      	lsls	r3, r3, #22
 80036a6:	0d9b      	lsrs	r3, r3, #22
 80036a8:	8003      	strh	r3, [r0, #0]
 80036aa:	8803      	ldrh	r3, [r0, #0]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	8003      	strh	r3, [r0, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036b2:	0020      	movs	r0, r4
 80036b4:	9902      	ldr	r1, [sp, #8]
 80036b6:	f002 fd46 	bl	8006146 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036ba:	2d00      	cmp	r5, #0
 80036bc:	d100      	bne.n	80036c0 <HAL_PCD_IRQHandler+0x5a0>
 80036be:	e0dc      	b.n	800387a <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80036c0:	2328      	movs	r3, #40	@ 0x28
 80036c2:	9a00      	ldr	r2, [sp, #0]
 80036c4:	4949      	ldr	r1, [pc, #292]	@ (80037ec <HAL_PCD_IRQHandler+0x6cc>)
 80036c6:	4353      	muls	r3, r2
 80036c8:	18e3      	adds	r3, r4, r3
 80036ca:	7c1b      	ldrb	r3, [r3, #16]
 80036cc:	6822      	ldr	r2, [r4, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	18d2      	adds	r2, r2, r3
 80036d2:	8813      	ldrh	r3, [r2, #0]
 80036d4:	400b      	ands	r3, r1
 80036d6:	4949      	ldr	r1, [pc, #292]	@ (80037fc <HAL_PCD_IRQHandler+0x6dc>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	8013      	strh	r3, [r2, #0]
 80036dc:	e0cd      	b.n	800387a <HAL_PCD_IRQHandler+0x75a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d1e7      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x592>
 80036e2:	0007      	movs	r7, r0
 80036e4:	4661      	mov	r1, ip
 80036e6:	3750      	adds	r7, #80	@ 0x50
 80036e8:	883b      	ldrh	r3, [r7, #0]
 80036ea:	18f3      	adds	r3, r6, r3
 80036ec:	189b      	adds	r3, r3, r2
 80036ee:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036f0:	493b      	ldr	r1, [pc, #236]	@ (80037e0 <HAL_PCD_IRQHandler+0x6c0>)
 80036f2:	883b      	ldrh	r3, [r7, #0]
 80036f4:	1840      	adds	r0, r0, r1
 80036f6:	18c0      	adds	r0, r0, r3
 80036f8:	1880      	adds	r0, r0, r2
 80036fa:	4663      	mov	r3, ip
 80036fc:	e7d8      	b.n	80036b0 <HAL_PCD_IRQHandler+0x590>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036fe:	2d00      	cmp	r5, #0
 8003700:	d00c      	beq.n	800371c <HAL_PCD_IRQHandler+0x5fc>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003702:	9902      	ldr	r1, [sp, #8]
 8003704:	0089      	lsls	r1, r1, #2
 8003706:	1841      	adds	r1, r0, r1
 8003708:	880d      	ldrh	r5, [r1, #0]
 800370a:	9101      	str	r1, [sp, #4]
 800370c:	46ac      	mov	ip, r5
 800370e:	4661      	mov	r1, ip
 8003710:	4d36      	ldr	r5, [pc, #216]	@ (80037ec <HAL_PCD_IRQHandler+0x6cc>)
 8003712:	400d      	ands	r5, r1
 8003714:	4939      	ldr	r1, [pc, #228]	@ (80037fc <HAL_PCD_IRQHandler+0x6dc>)
 8003716:	430d      	orrs	r5, r1
 8003718:	9901      	ldr	r1, [sp, #4]
 800371a:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 800371c:	2528      	movs	r5, #40	@ 0x28
 800371e:	9900      	ldr	r1, [sp, #0]
 8003720:	434d      	muls	r5, r1
 8003722:	2134      	movs	r1, #52	@ 0x34
 8003724:	468c      	mov	ip, r1
 8003726:	1965      	adds	r5, r4, r5
 8003728:	44ac      	add	ip, r5
 800372a:	4661      	mov	r1, ip
 800372c:	7809      	ldrb	r1, [r1, #0]
 800372e:	2901      	cmp	r1, #1
 8003730:	d000      	beq.n	8003734 <HAL_PCD_IRQHandler+0x614>
 8003732:	e0a2      	b.n	800387a <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 8003734:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8003736:	19c9      	adds	r1, r1, r7
 8003738:	6269      	str	r1, [r5, #36]	@ 0x24
 800373a:	9101      	str	r1, [sp, #4]
        ep->xfer_count += TxPctSize;
 800373c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800373e:	19c9      	adds	r1, r1, r7
 8003740:	62d9      	str	r1, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003742:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8003744:	6a29      	ldr	r1, [r5, #32]
 8003746:	428b      	cmp	r3, r1
 8003748:	d317      	bcc.n	800377a <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_len_db -= len;
 800374a:	1a5b      	subs	r3, r3, r1
 800374c:	632b      	str	r3, [r5, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800374e:	2328      	movs	r3, #40	@ 0x28
 8003750:	9d00      	ldr	r5, [sp, #0]
 8003752:	436b      	muls	r3, r5
 8003754:	18e3      	adds	r3, r4, r3
 8003756:	7c5d      	ldrb	r5, [r3, #17]
 8003758:	b28b      	uxth	r3, r1
 800375a:	2d00      	cmp	r5, #0
 800375c:	d137      	bne.n	80037ce <HAL_PCD_IRQHandler+0x6ae>
 800375e:	0005      	movs	r5, r0
 8003760:	3550      	adds	r5, #80	@ 0x50
 8003762:	882d      	ldrh	r5, [r5, #0]
 8003764:	1975      	adds	r5, r6, r5
 8003766:	18aa      	adds	r2, r5, r2
 8003768:	8815      	ldrh	r5, [r2, #0]
 800376a:	05ad      	lsls	r5, r5, #22
 800376c:	0dad      	lsrs	r5, r5, #22
 800376e:	8015      	strh	r5, [r2, #0]
 8003770:	2900      	cmp	r1, #0
 8003772:	d10e      	bne.n	8003792 <HAL_PCD_IRQHandler+0x672>
 8003774:	8811      	ldrh	r1, [r2, #0]
 8003776:	4d20      	ldr	r5, [pc, #128]	@ (80037f8 <HAL_PCD_IRQHandler+0x6d8>)
 8003778:	e013      	b.n	80037a2 <HAL_PCD_IRQHandler+0x682>
        else if (ep->xfer_len_db == 0U)
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <HAL_PCD_IRQHandler+0x666>
          ep->xfer_fill_db = 0U;
 800377e:	4661      	mov	r1, ip
 8003780:	700b      	strb	r3, [r1, #0]
    if (ep->xfer_len > TxPctSize)
 8003782:	0039      	movs	r1, r7
 8003784:	e7e3      	b.n	800374e <HAL_PCD_IRQHandler+0x62e>
          ep->xfer_fill_db = 0U;
 8003786:	2100      	movs	r1, #0
 8003788:	4667      	mov	r7, ip
 800378a:	7039      	strb	r1, [r7, #0]
          ep->xfer_len_db = 0U;
 800378c:	6329      	str	r1, [r5, #48]	@ 0x30
 800378e:	0019      	movs	r1, r3
 8003790:	e7dd      	b.n	800374e <HAL_PCD_IRQHandler+0x62e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003792:	293e      	cmp	r1, #62	@ 0x3e
 8003794:	d811      	bhi.n	80037ba <HAL_PCD_IRQHandler+0x69a>
 8003796:	2601      	movs	r6, #1
 8003798:	084d      	lsrs	r5, r1, #1
 800379a:	400e      	ands	r6, r1
 800379c:	19ad      	adds	r5, r5, r6
 800379e:	8811      	ldrh	r1, [r2, #0]
 80037a0:	02ad      	lsls	r5, r5, #10
 80037a2:	4329      	orrs	r1, r5
 80037a4:	b289      	uxth	r1, r1
 80037a6:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80037a8:	2228      	movs	r2, #40	@ 0x28
 80037aa:	9900      	ldr	r1, [sp, #0]
 80037ac:	434a      	muls	r2, r1
 80037ae:	18a2      	adds	r2, r4, r2
 80037b0:	8b12      	ldrh	r2, [r2, #24]
 80037b2:	9901      	ldr	r1, [sp, #4]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80037b4:	f001 fbb9 	bl	8004f2a <USB_WritePMA>
 80037b8:	e05f      	b.n	800387a <HAL_PCD_IRQHandler+0x75a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037ba:	261f      	movs	r6, #31
 80037bc:	094d      	lsrs	r5, r1, #5
 80037be:	4031      	ands	r1, r6
 80037c0:	424e      	negs	r6, r1
 80037c2:	4171      	adcs	r1, r6
 80037c4:	1a6d      	subs	r5, r5, r1
 80037c6:	8811      	ldrh	r1, [r2, #0]
 80037c8:	02ad      	lsls	r5, r5, #10
 80037ca:	4329      	orrs	r1, r5
 80037cc:	e7d3      	b.n	8003776 <HAL_PCD_IRQHandler+0x656>
 80037ce:	2d01      	cmp	r5, #1
 80037d0:	d1ea      	bne.n	80037a8 <HAL_PCD_IRQHandler+0x688>
 80037d2:	0001      	movs	r1, r0
 80037d4:	3150      	adds	r1, #80	@ 0x50
 80037d6:	8809      	ldrh	r1, [r1, #0]
 80037d8:	1876      	adds	r6, r6, r1
 80037da:	18b6      	adds	r6, r6, r2
 80037dc:	8033      	strh	r3, [r6, #0]
 80037de:	e7e3      	b.n	80037a8 <HAL_PCD_IRQHandler+0x688>
 80037e0:	00000406 	.word	0x00000406
 80037e4:	ffffbf8f 	.word	0xffffbf8f
 80037e8:	00008080 	.word	0x00008080
 80037ec:	ffff8f8f 	.word	0xffff8f8f
 80037f0:	000080c0 	.word	0x000080c0
 80037f4:	00000402 	.word	0x00000402
 80037f8:	ffff8000 	.word	0xffff8000
 80037fc:	0000c080 	.word	0x0000c080
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003800:	49ac      	ldr	r1, [pc, #688]	@ (8003ab4 <HAL_PCD_IRQHandler+0x994>)
 8003802:	8836      	ldrh	r6, [r6, #0]
 8003804:	468c      	mov	ip, r1
 8003806:	4484      	add	ip, r0
 8003808:	4466      	add	r6, ip
 800380a:	5ab6      	ldrh	r6, [r6, r2]
      ep->xfer_len = 0U;
 800380c:	9f03      	ldr	r7, [sp, #12]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800380e:	05b6      	lsls	r6, r6, #22
    if (ep->xfer_len >= TxPctSize)
 8003810:	0db6      	lsrs	r6, r6, #22
 8003812:	42ae      	cmp	r6, r5
 8003814:	d800      	bhi.n	8003818 <HAL_PCD_IRQHandler+0x6f8>
      ep->xfer_len -= TxPctSize;
 8003816:	1baf      	subs	r7, r5, r6
 8003818:	2580      	movs	r5, #128	@ 0x80
 800381a:	9901      	ldr	r1, [sp, #4]
 800381c:	01ed      	lsls	r5, r5, #7
 800381e:	4029      	ands	r1, r5
 8003820:	000d      	movs	r5, r1
 8003822:	629f      	str	r7, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8003824:	2f00      	cmp	r7, #0
 8003826:	d149      	bne.n	80038bc <HAL_PCD_IRQHandler+0x79c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003828:	2328      	movs	r3, #40	@ 0x28
 800382a:	9900      	ldr	r1, [sp, #0]
 800382c:	434b      	muls	r3, r1
 800382e:	18e3      	adds	r3, r4, r3
 8003830:	7c5b      	ldrb	r3, [r3, #17]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d133      	bne.n	800389e <HAL_PCD_IRQHandler+0x77e>
 8003836:	0003      	movs	r3, r0
 8003838:	499f      	ldr	r1, [pc, #636]	@ (8003ab8 <HAL_PCD_IRQHandler+0x998>)
 800383a:	3350      	adds	r3, #80	@ 0x50
 800383c:	881e      	ldrh	r6, [r3, #0]
 800383e:	1840      	adds	r0, r0, r1
 8003840:	1980      	adds	r0, r0, r6
 8003842:	1880      	adds	r0, r0, r2
 8003844:	8806      	ldrh	r6, [r0, #0]
 8003846:	499d      	ldr	r1, [pc, #628]	@ (8003abc <HAL_PCD_IRQHandler+0x99c>)
 8003848:	05b6      	lsls	r6, r6, #22
 800384a:	0db6      	lsrs	r6, r6, #22
 800384c:	8006      	strh	r6, [r0, #0]
 800384e:	8806      	ldrh	r6, [r0, #0]
 8003850:	430e      	orrs	r6, r1
 8003852:	b2b6      	uxth	r6, r6
 8003854:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	4463      	add	r3, ip
 800385a:	189b      	adds	r3, r3, r2
 800385c:	881a      	ldrh	r2, [r3, #0]
 800385e:	0592      	lsls	r2, r2, #22
 8003860:	0d92      	lsrs	r2, r2, #22
 8003862:	801a      	strh	r2, [r3, #0]
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	b292      	uxth	r2, r2
 800386a:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800386c:	0020      	movs	r0, r4
 800386e:	9902      	ldr	r1, [sp, #8]
 8003870:	f002 fc69 	bl	8006146 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003874:	2d00      	cmp	r5, #0
 8003876:	d100      	bne.n	800387a <HAL_PCD_IRQHandler+0x75a>
 8003878:	e722      	b.n	80036c0 <HAL_PCD_IRQHandler+0x5a0>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800387a:	2328      	movs	r3, #40	@ 0x28
 800387c:	9a00      	ldr	r2, [sp, #0]
 800387e:	4353      	muls	r3, r2
 8003880:	18e3      	adds	r3, r4, r3
 8003882:	7c1b      	ldrb	r3, [r3, #16]
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	18d2      	adds	r2, r2, r3
 800388a:	8811      	ldrh	r1, [r2, #0]
 800388c:	4b8c      	ldr	r3, [pc, #560]	@ (8003ac0 <HAL_PCD_IRQHandler+0x9a0>)
 800388e:	4019      	ands	r1, r3
 8003890:	2330      	movs	r3, #48	@ 0x30
 8003892:	404b      	eors	r3, r1
 8003894:	498b      	ldr	r1, [pc, #556]	@ (8003ac4 <HAL_PCD_IRQHandler+0x9a4>)
 8003896:	430b      	orrs	r3, r1
 8003898:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800389a:	f7ff fc4f 	bl	800313c <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d1e4      	bne.n	800386c <HAL_PCD_IRQHandler+0x74c>
 80038a2:	0003      	movs	r3, r0
 80038a4:	4984      	ldr	r1, [pc, #528]	@ (8003ab8 <HAL_PCD_IRQHandler+0x998>)
 80038a6:	3350      	adds	r3, #80	@ 0x50
 80038a8:	881e      	ldrh	r6, [r3, #0]
 80038aa:	1840      	adds	r0, r0, r1
 80038ac:	1980      	adds	r0, r0, r6
 80038ae:	1880      	adds	r0, r0, r2
 80038b0:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	4463      	add	r3, ip
 80038b6:	189b      	adds	r3, r3, r2
 80038b8:	801f      	strh	r7, [r3, #0]
 80038ba:	e7d7      	b.n	800386c <HAL_PCD_IRQHandler+0x74c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038bc:	2900      	cmp	r1, #0
 80038be:	d108      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x7b2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038c0:	9902      	ldr	r1, [sp, #8]
 80038c2:	4d81      	ldr	r5, [pc, #516]	@ (8003ac8 <HAL_PCD_IRQHandler+0x9a8>)
 80038c4:	0089      	lsls	r1, r1, #2
 80038c6:	1841      	adds	r1, r0, r1
 80038c8:	880f      	ldrh	r7, [r1, #0]
 80038ca:	403d      	ands	r5, r7
 80038cc:	4f7f      	ldr	r7, [pc, #508]	@ (8003acc <HAL_PCD_IRQHandler+0x9ac>)
 80038ce:	433d      	orrs	r5, r7
 80038d0:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 80038d2:	2728      	movs	r7, #40	@ 0x28
 80038d4:	9900      	ldr	r1, [sp, #0]
 80038d6:	434f      	muls	r7, r1
 80038d8:	19e7      	adds	r7, r4, r7
 80038da:	0039      	movs	r1, r7
 80038dc:	3134      	adds	r1, #52	@ 0x34
 80038de:	9101      	str	r1, [sp, #4]
 80038e0:	7809      	ldrb	r1, [r1, #0]
 80038e2:	2901      	cmp	r1, #1
 80038e4:	d1c9      	bne.n	800387a <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 80038e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038e8:	1989      	adds	r1, r1, r6
 80038ea:	6279      	str	r1, [r7, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80038ec:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80038ee:	19ad      	adds	r5, r5, r6
 80038f0:	62dd      	str	r5, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80038f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f4:	6a3d      	ldr	r5, [r7, #32]
 80038f6:	42ab      	cmp	r3, r5
 80038f8:	d317      	bcc.n	800392a <HAL_PCD_IRQHandler+0x80a>
          ep->xfer_len_db -= len;
 80038fa:	1b5b      	subs	r3, r3, r5
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038fe:	2328      	movs	r3, #40	@ 0x28
 8003900:	9e00      	ldr	r6, [sp, #0]
 8003902:	4373      	muls	r3, r6
 8003904:	18e3      	adds	r3, r4, r3
 8003906:	7c5e      	ldrb	r6, [r3, #17]
 8003908:	b2ab      	uxth	r3, r5
 800390a:	2e00      	cmp	r6, #0
 800390c:	d134      	bne.n	8003978 <HAL_PCD_IRQHandler+0x858>
 800390e:	0006      	movs	r6, r0
 8003910:	3650      	adds	r6, #80	@ 0x50
 8003912:	8836      	ldrh	r6, [r6, #0]
 8003914:	4466      	add	r6, ip
 8003916:	18b2      	adds	r2, r6, r2
 8003918:	8816      	ldrh	r6, [r2, #0]
 800391a:	05b6      	lsls	r6, r6, #22
 800391c:	0db6      	lsrs	r6, r6, #22
 800391e:	8016      	strh	r6, [r2, #0]
 8003920:	2d00      	cmp	r5, #0
 8003922:	d10e      	bne.n	8003942 <HAL_PCD_IRQHandler+0x822>
 8003924:	8815      	ldrh	r5, [r2, #0]
 8003926:	4e65      	ldr	r6, [pc, #404]	@ (8003abc <HAL_PCD_IRQHandler+0x99c>)
 8003928:	e013      	b.n	8003952 <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <HAL_PCD_IRQHandler+0x816>
          ep->xfer_fill_db = 0U;
 800392e:	9d01      	ldr	r5, [sp, #4]
 8003930:	702b      	strb	r3, [r5, #0]
    if (ep->xfer_len >= TxPctSize)
 8003932:	0035      	movs	r5, r6
 8003934:	e7e3      	b.n	80038fe <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db = 0U;
 8003936:	2500      	movs	r5, #0
          ep->xfer_fill_db = 0;
 8003938:	9e01      	ldr	r6, [sp, #4]
          ep->xfer_len_db = 0U;
 800393a:	633d      	str	r5, [r7, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 800393c:	7035      	strb	r5, [r6, #0]
 800393e:	001d      	movs	r5, r3
 8003940:	e7dd      	b.n	80038fe <HAL_PCD_IRQHandler+0x7de>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003942:	2d3e      	cmp	r5, #62	@ 0x3e
 8003944:	d80e      	bhi.n	8003964 <HAL_PCD_IRQHandler+0x844>
 8003946:	2701      	movs	r7, #1
 8003948:	086e      	lsrs	r6, r5, #1
 800394a:	402f      	ands	r7, r5
 800394c:	19f6      	adds	r6, r6, r7
 800394e:	8815      	ldrh	r5, [r2, #0]
 8003950:	02b6      	lsls	r6, r6, #10
 8003952:	4335      	orrs	r5, r6
 8003954:	b2ad      	uxth	r5, r5
 8003956:	8015      	strh	r5, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003958:	2228      	movs	r2, #40	@ 0x28
 800395a:	9d00      	ldr	r5, [sp, #0]
 800395c:	436a      	muls	r2, r5
 800395e:	18a2      	adds	r2, r4, r2
 8003960:	8b52      	ldrh	r2, [r2, #26]
 8003962:	e727      	b.n	80037b4 <HAL_PCD_IRQHandler+0x694>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003964:	271f      	movs	r7, #31
 8003966:	096e      	lsrs	r6, r5, #5
 8003968:	403d      	ands	r5, r7
 800396a:	426f      	negs	r7, r5
 800396c:	417d      	adcs	r5, r7
 800396e:	1b76      	subs	r6, r6, r5
 8003970:	8815      	ldrh	r5, [r2, #0]
 8003972:	02b6      	lsls	r6, r6, #10
 8003974:	4335      	orrs	r5, r6
 8003976:	e7d6      	b.n	8003926 <HAL_PCD_IRQHandler+0x806>
 8003978:	2e01      	cmp	r6, #1
 800397a:	d1ed      	bne.n	8003958 <HAL_PCD_IRQHandler+0x838>
 800397c:	0005      	movs	r5, r0
 800397e:	3550      	adds	r5, #80	@ 0x50
 8003980:	882d      	ldrh	r5, [r5, #0]
 8003982:	4465      	add	r5, ip
 8003984:	18aa      	adds	r2, r5, r2
 8003986:	8013      	strh	r3, [r2, #0]
 8003988:	e7e6      	b.n	8003958 <HAL_PCD_IRQHandler+0x838>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800398a:	0543      	lsls	r3, r0, #21
 800398c:	d50e      	bpl.n	80039ac <HAL_PCD_IRQHandler+0x88c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	494f      	ldr	r1, [pc, #316]	@ (8003ad0 <HAL_PCD_IRQHandler+0x9b0>)
 8003992:	3306      	adds	r3, #6
 8003994:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8003996:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003998:	400a      	ands	r2, r1
 800399a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 800399c:	f002 fbe5 	bl	800616a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80039a0:	0029      	movs	r1, r5
 80039a2:	0020      	movs	r0, r4
 80039a4:	f7ff fbab 	bl	80030fe <HAL_PCD_SetAddress>
    return;
 80039a8:	f7ff fbce 	bl	8003148 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80039ac:	0443      	lsls	r3, r0, #17
 80039ae:	d507      	bpl.n	80039c0 <HAL_PCD_IRQHandler+0x8a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	4948      	ldr	r1, [pc, #288]	@ (8003ad4 <HAL_PCD_IRQHandler+0x9b4>)
 80039b4:	3306      	adds	r3, #6
 80039b6:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80039b8:	400a      	ands	r2, r1
 80039ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
    return;
 80039bc:	f7ff fbc4 	bl	8003148 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80039c0:	2380      	movs	r3, #128	@ 0x80
 80039c2:	0001      	movs	r1, r0
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	4019      	ands	r1, r3
 80039c8:	4218      	tst	r0, r3
 80039ca:	d004      	beq.n	80039d6 <HAL_PCD_IRQHandler+0x8b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	4942      	ldr	r1, [pc, #264]	@ (8003ad8 <HAL_PCD_IRQHandler+0x9b8>)
 80039d0:	3306      	adds	r3, #6
 80039d2:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80039d4:	e7f0      	b.n	80039b8 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80039d6:	04c3      	lsls	r3, r0, #19
 80039d8:	d51a      	bpl.n	8003a10 <HAL_PCD_IRQHandler+0x8f0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80039da:	2004      	movs	r0, #4
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	3302      	adds	r3, #2
 80039e0:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80039e2:	4382      	bics	r2, r0
 80039e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80039e6:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80039e8:	1800      	adds	r0, r0, r0
 80039ea:	4382      	bics	r2, r0
 80039ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L1)
 80039ee:	23b2      	movs	r3, #178	@ 0xb2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	5ce2      	ldrb	r2, [r4, r3]
 80039f4:	2a01      	cmp	r2, #1
 80039f6:	d103      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x8e0>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039f8:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 80039fa:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039fc:	f000 f98b 	bl	8003d16 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8003a00:	0020      	movs	r0, r4
 8003a02:	f002 fbd5 	bl	80061b0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	4934      	ldr	r1, [pc, #208]	@ (8003adc <HAL_PCD_IRQHandler+0x9bc>)
 8003a0a:	3306      	adds	r3, #6
 8003a0c:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8003a0e:	e7d3      	b.n	80039b8 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003a10:	0503      	lsls	r3, r0, #20
 8003a12:	d513      	bpl.n	8003a3c <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a14:	2108      	movs	r1, #8
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	1c9a      	adds	r2, r3, #2
 8003a1a:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a1c:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a1e:	4301      	orrs	r1, r0
 8003a20:	87d1      	strh	r1, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a22:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 8003a24:	482e      	ldr	r0, [pc, #184]	@ (8003ae0 <HAL_PCD_IRQHandler+0x9c0>)
 8003a26:	4001      	ands	r1, r0
 8003a28:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a2a:	2304      	movs	r3, #4
 8003a2c:	8fd1      	ldrh	r1, [r2, #62]	@ 0x3e
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 8003a32:	0020      	movs	r0, r4
 8003a34:	f002 fbaa 	bl	800618c <HAL_PCD_SuspendCallback>
 8003a38:	f7ff fb86 	bl	8003148 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003a3c:	2580      	movs	r5, #128	@ 0x80
 8003a3e:	4228      	tst	r0, r5
 8003a40:	d021      	beq.n	8003a86 <HAL_PCD_IRQHandler+0x966>
    if (hpcd->LPM_State == LPM_L0)
 8003a42:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a44:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8003a46:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a48:	1d99      	adds	r1, r3, #6
 8003a4a:	8fca      	ldrh	r2, [r1, #62]	@ 0x3e
 8003a4c:	43aa      	bics	r2, r5
 8003a4e:	87ca      	strh	r2, [r1, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8003a50:	5c22      	ldrb	r2, [r4, r0]
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d1ed      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x912>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a56:	2104      	movs	r1, #4
 8003a58:	1c9a      	adds	r2, r3, #2
 8003a5a:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a5c:	3354      	adds	r3, #84	@ 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a5e:	4329      	orrs	r1, r5
 8003a60:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a62:	2108      	movs	r1, #8
 8003a64:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
 8003a66:	4329      	orrs	r1, r5
 8003a68:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->LPM_State = LPM_L1;
 8003a6a:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a6c:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 8003a6e:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a70:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a72:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a74:	089b      	lsrs	r3, r3, #2
 8003a76:	4013      	ands	r3, r2
 8003a78:	22b3      	movs	r2, #179	@ 0xb3
 8003a7a:	0092      	lsls	r2, r2, #2
 8003a7c:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a7e:	f000 f94a 	bl	8003d16 <HAL_PCDEx_LPM_Callback>
 8003a82:	f7ff fb61 	bl	8003148 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003a86:	0583      	lsls	r3, r0, #22
 8003a88:	d50a      	bpl.n	8003aa0 <HAL_PCD_IRQHandler+0x980>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	4915      	ldr	r1, [pc, #84]	@ (8003ae4 <HAL_PCD_IRQHandler+0x9c4>)
 8003a8e:	3306      	adds	r3, #6
 8003a90:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8003a92:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a94:	400a      	ands	r2, r1
 8003a96:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8003a98:	f002 fb60 	bl	800615c <HAL_PCD_SOFCallback>
    return;
 8003a9c:	f7ff fb54 	bl	8003148 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003aa0:	05c0      	lsls	r0, r0, #23
 8003aa2:	d401      	bmi.n	8003aa8 <HAL_PCD_IRQHandler+0x988>
 8003aa4:	f7ff fb50 	bl	8003148 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	490f      	ldr	r1, [pc, #60]	@ (8003ae8 <HAL_PCD_IRQHandler+0x9c8>)
 8003aac:	3306      	adds	r3, #6
 8003aae:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8003ab0:	e782      	b.n	80039b8 <HAL_PCD_IRQHandler+0x898>
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	00000406 	.word	0x00000406
 8003ab8:	00000402 	.word	0x00000402
 8003abc:	ffff8000 	.word	0xffff8000
 8003ac0:	ffff8fbf 	.word	0xffff8fbf
 8003ac4:	00008080 	.word	0x00008080
 8003ac8:	ffff8f8f 	.word	0xffff8f8f
 8003acc:	0000c080 	.word	0x0000c080
 8003ad0:	fffffbff 	.word	0xfffffbff
 8003ad4:	ffffbfff 	.word	0xffffbfff
 8003ad8:	ffffdfff 	.word	0xffffdfff
 8003adc:	ffffefff 	.word	0xffffefff
 8003ae0:	fffff7ff 	.word	0xfffff7ff
 8003ae4:	fffffdff 	.word	0xfffffdff
 8003ae8:	fffffeff 	.word	0xfffffeff

08003aec <HAL_PCD_EP_Open>:
{
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	0004      	movs	r4, r0
 8003af0:	2007      	movs	r0, #7
 8003af2:	000d      	movs	r5, r1
 8003af4:	4008      	ands	r0, r1
 8003af6:	2128      	movs	r1, #40	@ 0x28
 8003af8:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8003afa:	b26d      	sxtb	r5, r5
 8003afc:	1866      	adds	r6, r4, r1
 8003afe:	2d00      	cmp	r5, #0
 8003b00:	da18      	bge.n	8003b34 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8003b02:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	3110      	adds	r1, #16
 8003b06:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003b08:	7475      	strb	r5, [r6, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b0a:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8003b0c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8003b0e:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d101      	bne.n	8003b18 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003b18:	25a4      	movs	r5, #164	@ 0xa4
 8003b1a:	00ad      	lsls	r5, r5, #2
 8003b1c:	5d63      	ldrb	r3, [r4, r5]
 8003b1e:	2002      	movs	r0, #2
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d006      	beq.n	8003b32 <HAL_PCD_EP_Open+0x46>
 8003b24:	2301      	movs	r3, #1
 8003b26:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b28:	6820      	ldr	r0, [r4, #0]
 8003b2a:	f001 f807 	bl	8004b3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b2e:	2000      	movs	r0, #0
 8003b30:	5560      	strb	r0, [r4, r5]
}
 8003b32:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8003b34:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b36:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8003b38:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b3a:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8003b3c:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b3e:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003b40:	7035      	strb	r5, [r6, #0]
 8003b42:	e7e2      	b.n	8003b0a <HAL_PCD_EP_Open+0x1e>

08003b44 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003b44:	2207      	movs	r2, #7
{
 8003b46:	000b      	movs	r3, r1
 8003b48:	400a      	ands	r2, r1
 8003b4a:	2128      	movs	r1, #40	@ 0x28
 8003b4c:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 8003b4e:	b25b      	sxtb	r3, r3
{
 8003b50:	b570      	push	{r4, r5, r6, lr}
 8003b52:	0004      	movs	r4, r0
 8003b54:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	da12      	bge.n	8003b80 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 8003b5a:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b5c:	3110      	adds	r1, #16
 8003b5e:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003b60:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 8003b62:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b64:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003b66:	00ad      	lsls	r5, r5, #2
 8003b68:	5d63      	ldrb	r3, [r4, r5]
 8003b6a:	2002      	movs	r0, #2
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d006      	beq.n	8003b7e <HAL_PCD_EP_Close+0x3a>
 8003b70:	2301      	movs	r3, #1
 8003b72:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	f001 f8f1 	bl	8004d5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	5560      	strb	r0, [r4, r5]
}
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8003b80:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b82:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8003b84:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b86:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8003b88:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b8a:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003b8c:	7003      	strb	r3, [r0, #0]
 8003b8e:	e7e8      	b.n	8003b62 <HAL_PCD_EP_Close+0x1e>

08003b90 <HAL_PCD_EP_Receive>:
{
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	2407      	movs	r4, #7
}
 8003b94:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 8003b96:	3421      	adds	r4, #33	@ 0x21
 8003b98:	434c      	muls	r4, r1
 8003b9a:	1906      	adds	r6, r0, r4
 8003b9c:	0037      	movs	r7, r6
 8003b9e:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 8003ba0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 8003ba2:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8003ba4:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8003ba6:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ba8:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003baa:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 8003bac:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bae:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bb0:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 8003bb2:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8003bb4:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 8003bb6:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb8:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bbc:	6800      	ldr	r0, [r0, #0]
 8003bbe:	f001 f9c9 	bl	8004f54 <USB_EPStartXfer>
}
 8003bc2:	0028      	movs	r0, r5
 8003bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bc6 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bc6:	2307      	movs	r3, #7
 8003bc8:	400b      	ands	r3, r1
 8003bca:	2128      	movs	r1, #40	@ 0x28
 8003bcc:	4359      	muls	r1, r3
 8003bce:	1840      	adds	r0, r0, r1
 8003bd0:	30fc      	adds	r0, #252	@ 0xfc
 8003bd2:	6f00      	ldr	r0, [r0, #112]	@ 0x70
}
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_PCD_EP_Transmit>:
{
 8003bd6:	b570      	push	{r4, r5, r6, lr}
 8003bd8:	2407      	movs	r4, #7
}
 8003bda:	4021      	ands	r1, r4
 8003bdc:	3421      	adds	r4, #33	@ 0x21
 8003bde:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 8003be0:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 8003be2:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 8003be4:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8003be6:	2201      	movs	r2, #1
 8003be8:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 8003bea:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 8003bec:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 8003bee:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf0:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 8003bf2:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf4:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 8003bf6:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 8003bf8:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bfa:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bfc:	6800      	ldr	r0, [r0, #0]
 8003bfe:	f001 f9a9 	bl	8004f54 <USB_EPStartXfer>
}
 8003c02:	0028      	movs	r0, r5
 8003c04:	bd70      	pop	{r4, r5, r6, pc}

08003c06 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c06:	2207      	movs	r2, #7
{
 8003c08:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c0a:	7903      	ldrb	r3, [r0, #4]
{
 8003c0c:	0004      	movs	r4, r0
 8003c0e:	400a      	ands	r2, r1
    return HAL_ERROR;
 8003c10:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d319      	bcc.n	8003c4a <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8003c16:	b248      	sxtb	r0, r1
 8003c18:	2328      	movs	r3, #40	@ 0x28
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	da16      	bge.n	8003c4c <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1e:	4353      	muls	r3, r2
 8003c20:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8003c22:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c24:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8003c26:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c28:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003c2a:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 8003c2c:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8003c2e:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 8003c30:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c32:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003c34:	00ad      	lsls	r5, r5, #2
 8003c36:	5d62      	ldrb	r2, [r4, r5]
 8003c38:	2002      	movs	r0, #2
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d005      	beq.n	8003c4a <HAL_PCD_EP_SetStall+0x44>
 8003c3e:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c40:	6820      	ldr	r0, [r4, #0]
 8003c42:	f001 f905 	bl	8004e50 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8003c46:	2000      	movs	r0, #0
 8003c48:	5560      	strb	r0, [r4, r5]
}
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003c4c:	434b      	muls	r3, r1
 8003c4e:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8003c50:	2000      	movs	r0, #0
 8003c52:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8003c54:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8003c56:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 8003c58:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8003c5a:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8003c5c:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003c5e:	7018      	strb	r0, [r3, #0]
 8003c60:	e7e4      	b.n	8003c2c <HAL_PCD_EP_SetStall+0x26>

08003c62 <HAL_PCD_EP_ClrStall>:
{
 8003c62:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c64:	220f      	movs	r2, #15
{
 8003c66:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c68:	7901      	ldrb	r1, [r0, #4]
{
 8003c6a:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c6c:	401a      	ands	r2, r3
    return HAL_ERROR;
 8003c6e:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c70:	4291      	cmp	r1, r2
 8003c72:	d31b      	bcc.n	8003cac <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 8003c74:	2207      	movs	r2, #7
 8003c76:	2128      	movs	r1, #40	@ 0x28
 8003c78:	401a      	ands	r2, r3
 8003c7a:	4351      	muls	r1, r2
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	1860      	adds	r0, r4, r1
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	da14      	bge.n	8003cae <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 8003c84:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c86:	3110      	adds	r1, #16
 8003c88:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003c8a:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 8003c8c:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8003c8e:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 8003c90:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c92:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003c94:	00b6      	lsls	r6, r6, #2
 8003c96:	5da3      	ldrb	r3, [r4, r6]
 8003c98:	2002      	movs	r0, #2
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d006      	beq.n	8003cac <HAL_PCD_EP_ClrStall+0x4a>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ca2:	6820      	ldr	r0, [r4, #0]
 8003ca4:	f001 f8f4 	bl	8004e90 <USB_EPClearStall>
  return HAL_OK;
 8003ca8:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 8003caa:	55a5      	strb	r5, [r4, r6]
}
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8003cae:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb0:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8003cb2:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb4:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8003cb6:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb8:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003cba:	7003      	strb	r3, [r0, #0]
 8003cbc:	e7e6      	b.n	8003c8c <HAL_PCD_EP_ClrStall+0x2a>

08003cbe <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003cbe:	b530      	push	{r4, r5, lr}
 8003cc0:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cc2:	060d      	lsls	r5, r1, #24
 8003cc4:	d50b      	bpl.n	8003cde <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc6:	2507      	movs	r5, #7
 8003cc8:	4029      	ands	r1, r5
 8003cca:	434c      	muls	r4, r1
 8003ccc:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cce:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003cd0:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8003cd2:	2a00      	cmp	r2, #0
 8003cd4:	d107      	bne.n	8003ce6 <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 8003cd6:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8003cd8:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003cda:	2000      	movs	r0, #0
 8003cdc:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003cde:	434c      	muls	r4, r1
 8003ce0:	3451      	adds	r4, #81	@ 0x51
 8003ce2:	34ff      	adds	r4, #255	@ 0xff
 8003ce4:	e7f3      	b.n	8003cce <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 8003ce6:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003ce8:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8003cea:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cec:	e7f5      	b.n	8003cda <HAL_PCDEx_PMAConfig+0x1c>

08003cee <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8003cee:	6803      	ldr	r3, [r0, #0]
{
 8003cf0:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8003cf2:	20b4      	movs	r0, #180	@ 0xb4
 8003cf4:	2101      	movs	r1, #1
{
 8003cf6:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8003cf8:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8003cfa:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 8003cfc:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8003cfe:	2000      	movs	r0, #0
 8003d00:	00a4      	lsls	r4, r4, #2
 8003d02:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d04:	3354      	adds	r3, #84	@ 0x54
 8003d06:	881a      	ldrh	r2, [r3, #0]
 8003d08:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d0a:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d0c:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d0e:	8819      	ldrh	r1, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8003d14:	bd10      	pop	{r4, pc}

08003d16 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d16:	4770      	bx	lr

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1a:	0004      	movs	r4, r0
 8003d1c:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d04a      	beq.n	8003db8 <HAL_RCC_OscConfig+0xa0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d22:	6803      	ldr	r3, [r0, #0]
 8003d24:	07db      	lsls	r3, r3, #31
 8003d26:	d42f      	bmi.n	8003d88 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	079b      	lsls	r3, r3, #30
 8003d2c:	d500      	bpl.n	8003d30 <HAL_RCC_OscConfig+0x18>
 8003d2e:	e086      	b.n	8003e3e <HAL_RCC_OscConfig+0x126>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	071b      	lsls	r3, r3, #28
 8003d34:	d500      	bpl.n	8003d38 <HAL_RCC_OscConfig+0x20>
 8003d36:	e0c6      	b.n	8003ec6 <HAL_RCC_OscConfig+0x1ae>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	075b      	lsls	r3, r3, #29
 8003d3c:	d500      	bpl.n	8003d40 <HAL_RCC_OscConfig+0x28>
 8003d3e:	e0e9      	b.n	8003f14 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	06db      	lsls	r3, r3, #27
 8003d44:	d51a      	bpl.n	8003d7c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d46:	6962      	ldr	r2, [r4, #20]
 8003d48:	2304      	movs	r3, #4
 8003d4a:	4db9      	ldr	r5, [pc, #740]	@ (8004030 <HAL_RCC_OscConfig+0x318>)
 8003d4c:	2a01      	cmp	r2, #1
 8003d4e:	d000      	beq.n	8003d52 <HAL_RCC_OscConfig+0x3a>
 8003d50:	e152      	b.n	8003ff8 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d52:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d54:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d56:	430b      	orrs	r3, r1
 8003d58:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003d5a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8003d60:	f7fe f9d8 	bl	8002114 <HAL_GetTick>
 8003d64:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d66:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003d68:	423b      	tst	r3, r7
 8003d6a:	d100      	bne.n	8003d6e <HAL_RCC_OscConfig+0x56>
 8003d6c:	e13d      	b.n	8003fea <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d6e:	21f8      	movs	r1, #248	@ 0xf8
 8003d70:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003d72:	69a3      	ldr	r3, [r4, #24]
 8003d74:	438a      	bics	r2, r1
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d7c:	6a23      	ldr	r3, [r4, #32]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d000      	beq.n	8003d84 <HAL_RCC_OscConfig+0x6c>
 8003d82:	e161      	b.n	8004048 <HAL_RCC_OscConfig+0x330>
        }
      }
    }
  }

  return HAL_OK;
 8003d84:	2000      	movs	r0, #0
 8003d86:	e02f      	b.n	8003de8 <HAL_RCC_OscConfig+0xd0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d88:	220c      	movs	r2, #12
 8003d8a:	4da9      	ldr	r5, [pc, #676]	@ (8004030 <HAL_RCC_OscConfig+0x318>)
 8003d8c:	686b      	ldr	r3, [r5, #4]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	d00b      	beq.n	8003dac <HAL_RCC_OscConfig+0x94>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d94:	686b      	ldr	r3, [r5, #4]
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d10f      	bne.n	8003dbc <HAL_RCC_OscConfig+0xa4>
 8003d9c:	22c0      	movs	r2, #192	@ 0xc0
 8003d9e:	686b      	ldr	r3, [r5, #4]
 8003da0:	0252      	lsls	r2, r2, #9
 8003da2:	4013      	ands	r3, r2
 8003da4:	2280      	movs	r2, #128	@ 0x80
 8003da6:	0252      	lsls	r2, r2, #9
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d107      	bne.n	8003dbc <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	039b      	lsls	r3, r3, #14
 8003db0:	d5ba      	bpl.n	8003d28 <HAL_RCC_OscConfig+0x10>
 8003db2:	6863      	ldr	r3, [r4, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1b7      	bne.n	8003d28 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003db8:	2001      	movs	r0, #1
 8003dba:	e015      	b.n	8003de8 <HAL_RCC_OscConfig+0xd0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbc:	6863      	ldr	r3, [r4, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d114      	bne.n	8003dec <HAL_RCC_OscConfig+0xd4>
 8003dc2:	2380      	movs	r3, #128	@ 0x80
 8003dc4:	682a      	ldr	r2, [r5, #0]
 8003dc6:	025b      	lsls	r3, r3, #9
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003dcc:	f7fe f9a2 	bl	8002114 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd0:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003dd2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd4:	02bf      	lsls	r7, r7, #10
 8003dd6:	682b      	ldr	r3, [r5, #0]
 8003dd8:	423b      	tst	r3, r7
 8003dda:	d1a5      	bne.n	8003d28 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe f99a 	bl	8002114 <HAL_GetTick>
 8003de0:	1b80      	subs	r0, r0, r6
 8003de2:	2864      	cmp	r0, #100	@ 0x64
 8003de4:	d9f7      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 8003de6:	2003      	movs	r0, #3
}
 8003de8:	b005      	add	sp, #20
 8003dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d116      	bne.n	8003e1e <HAL_RCC_OscConfig+0x106>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	4a90      	ldr	r2, [pc, #576]	@ (8004034 <HAL_RCC_OscConfig+0x31c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df4:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df6:	4013      	ands	r3, r2
 8003df8:	602b      	str	r3, [r5, #0]
 8003dfa:	682b      	ldr	r3, [r5, #0]
 8003dfc:	4a8e      	ldr	r2, [pc, #568]	@ (8004038 <HAL_RCC_OscConfig+0x320>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e00:	4013      	ands	r3, r2
 8003e02:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e04:	f7fe f986 	bl	8002114 <HAL_GetTick>
 8003e08:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	682b      	ldr	r3, [r5, #0]
 8003e0c:	423b      	tst	r3, r7
 8003e0e:	d100      	bne.n	8003e12 <HAL_RCC_OscConfig+0xfa>
 8003e10:	e78a      	b.n	8003d28 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e12:	f7fe f97f 	bl	8002114 <HAL_GetTick>
 8003e16:	1b80      	subs	r0, r0, r6
 8003e18:	2864      	cmp	r0, #100	@ 0x64
 8003e1a:	d9f6      	bls.n	8003e0a <HAL_RCC_OscConfig+0xf2>
 8003e1c:	e7e3      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1e:	2b05      	cmp	r3, #5
 8003e20:	d105      	bne.n	8003e2e <HAL_RCC_OscConfig+0x116>
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	682a      	ldr	r2, [r5, #0]
 8003e26:	02db      	lsls	r3, r3, #11
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	602b      	str	r3, [r5, #0]
 8003e2c:	e7c9      	b.n	8003dc2 <HAL_RCC_OscConfig+0xaa>
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	4a80      	ldr	r2, [pc, #512]	@ (8004034 <HAL_RCC_OscConfig+0x31c>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	602b      	str	r3, [r5, #0]
 8003e36:	682b      	ldr	r3, [r5, #0]
 8003e38:	4a7f      	ldr	r2, [pc, #508]	@ (8004038 <HAL_RCC_OscConfig+0x320>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	e7c5      	b.n	8003dca <HAL_RCC_OscConfig+0xb2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e3e:	220c      	movs	r2, #12
 8003e40:	4d7b      	ldr	r5, [pc, #492]	@ (8004030 <HAL_RCC_OscConfig+0x318>)
 8003e42:	686b      	ldr	r3, [r5, #4]
 8003e44:	4213      	tst	r3, r2
 8003e46:	d00b      	beq.n	8003e60 <HAL_RCC_OscConfig+0x148>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e48:	686b      	ldr	r3, [r5, #4]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d115      	bne.n	8003e7c <HAL_RCC_OscConfig+0x164>
 8003e50:	22c0      	movs	r2, #192	@ 0xc0
 8003e52:	686b      	ldr	r3, [r5, #4]
 8003e54:	0252      	lsls	r2, r2, #9
 8003e56:	4013      	ands	r3, r2
 8003e58:	2280      	movs	r2, #128	@ 0x80
 8003e5a:	0212      	lsls	r2, r2, #8
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10d      	bne.n	8003e7c <HAL_RCC_OscConfig+0x164>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	079b      	lsls	r3, r3, #30
 8003e64:	d502      	bpl.n	8003e6c <HAL_RCC_OscConfig+0x154>
 8003e66:	68e3      	ldr	r3, [r4, #12]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d1a5      	bne.n	8003db8 <HAL_RCC_OscConfig+0xa0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6c:	21f8      	movs	r1, #248	@ 0xf8
 8003e6e:	682a      	ldr	r2, [r5, #0]
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	438a      	bics	r2, r1
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4313      	orrs	r3, r2
 8003e78:	602b      	str	r3, [r5, #0]
 8003e7a:	e759      	b.n	8003d30 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e7c:	68e2      	ldr	r2, [r4, #12]
 8003e7e:	2301      	movs	r3, #1
 8003e80:	2a00      	cmp	r2, #0
 8003e82:	d00f      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_HSI_ENABLE();
 8003e84:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003e8c:	f7fe f942 	bl	8002114 <HAL_GetTick>
 8003e90:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e92:	682b      	ldr	r3, [r5, #0]
 8003e94:	423b      	tst	r3, r7
 8003e96:	d1e9      	bne.n	8003e6c <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e98:	f7fe f93c 	bl	8002114 <HAL_GetTick>
 8003e9c:	1b80      	subs	r0, r0, r6
 8003e9e:	2802      	cmp	r0, #2
 8003ea0:	d9f7      	bls.n	8003e92 <HAL_RCC_OscConfig+0x17a>
 8003ea2:	e7a0      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
        __HAL_RCC_HSI_DISABLE();
 8003ea4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8003ea8:	439a      	bics	r2, r3
 8003eaa:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8003eac:	f7fe f932 	bl	8002114 <HAL_GetTick>
 8003eb0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb2:	682b      	ldr	r3, [r5, #0]
 8003eb4:	423b      	tst	r3, r7
 8003eb6:	d100      	bne.n	8003eba <HAL_RCC_OscConfig+0x1a2>
 8003eb8:	e73a      	b.n	8003d30 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eba:	f7fe f92b 	bl	8002114 <HAL_GetTick>
 8003ebe:	1b80      	subs	r0, r0, r6
 8003ec0:	2802      	cmp	r0, #2
 8003ec2:	d9f6      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x19a>
 8003ec4:	e78f      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ec6:	69e2      	ldr	r2, [r4, #28]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	4d59      	ldr	r5, [pc, #356]	@ (8004030 <HAL_RCC_OscConfig+0x318>)
 8003ecc:	2a00      	cmp	r2, #0
 8003ece:	d010      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x1da>
      __HAL_RCC_LSI_ENABLE();
 8003ed0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8003ed8:	f7fe f91c 	bl	8002114 <HAL_GetTick>
 8003edc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ede:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003ee0:	423b      	tst	r3, r7
 8003ee2:	d000      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1ce>
 8003ee4:	e728      	b.n	8003d38 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee6:	f7fe f915 	bl	8002114 <HAL_GetTick>
 8003eea:	1b80      	subs	r0, r0, r6
 8003eec:	2802      	cmp	r0, #2
 8003eee:	d9f6      	bls.n	8003ede <HAL_RCC_OscConfig+0x1c6>
 8003ef0:	e779      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_LSI_DISABLE();
 8003ef2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef4:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8003ef6:	439a      	bics	r2, r3
 8003ef8:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8003efa:	f7fe f90b 	bl	8002114 <HAL_GetTick>
 8003efe:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003f02:	423b      	tst	r3, r7
 8003f04:	d100      	bne.n	8003f08 <HAL_RCC_OscConfig+0x1f0>
 8003f06:	e717      	b.n	8003d38 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fe f904 	bl	8002114 <HAL_GetTick>
 8003f0c:	1b80      	subs	r0, r0, r6
 8003f0e:	2802      	cmp	r0, #2
 8003f10:	d9f6      	bls.n	8003f00 <HAL_RCC_OscConfig+0x1e8>
 8003f12:	e768      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f14:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003f16:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f18:	4d45      	ldr	r5, [pc, #276]	@ (8004030 <HAL_RCC_OscConfig+0x318>)
 8003f1a:	0552      	lsls	r2, r2, #21
 8003f1c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003f1e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f20:	4213      	tst	r3, r2
 8003f22:	d108      	bne.n	8003f36 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f24:	69eb      	ldr	r3, [r5, #28]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61eb      	str	r3, [r5, #28]
 8003f2a:	69eb      	ldr	r3, [r5, #28]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003f32:	2301      	movs	r3, #1
 8003f34:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f36:	2780      	movs	r7, #128	@ 0x80
 8003f38:	4e40      	ldr	r6, [pc, #256]	@ (800403c <HAL_RCC_OscConfig+0x324>)
 8003f3a:	007f      	lsls	r7, r7, #1
 8003f3c:	6833      	ldr	r3, [r6, #0]
 8003f3e:	423b      	tst	r3, r7
 8003f40:	d015      	beq.n	8003f6e <HAL_RCC_OscConfig+0x256>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f42:	68a3      	ldr	r3, [r4, #8]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d122      	bne.n	8003f8e <HAL_RCC_OscConfig+0x276>
 8003f48:	6a2a      	ldr	r2, [r5, #32]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003f4e:	f7fe f8e1 	bl	8002114 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f52:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8003f54:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f56:	6a2b      	ldr	r3, [r5, #32]
 8003f58:	423b      	tst	r3, r7
 8003f5a:	d03f      	beq.n	8003fdc <HAL_RCC_OscConfig+0x2c4>
    if(pwrclkchanged == SET)
 8003f5c:	9b00      	ldr	r3, [sp, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d000      	beq.n	8003f64 <HAL_RCC_OscConfig+0x24c>
 8003f62:	e6ed      	b.n	8003d40 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f64:	69eb      	ldr	r3, [r5, #28]
 8003f66:	4a36      	ldr	r2, [pc, #216]	@ (8004040 <HAL_RCC_OscConfig+0x328>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61eb      	str	r3, [r5, #28]
 8003f6c:	e6e8      	b.n	8003d40 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6e:	6833      	ldr	r3, [r6, #0]
 8003f70:	433b      	orrs	r3, r7
 8003f72:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003f74:	f7fe f8ce 	bl	8002114 <HAL_GetTick>
 8003f78:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7a:	6833      	ldr	r3, [r6, #0]
 8003f7c:	423b      	tst	r3, r7
 8003f7e:	d1e0      	bne.n	8003f42 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f80:	f7fe f8c8 	bl	8002114 <HAL_GetTick>
 8003f84:	9b01      	ldr	r3, [sp, #4]
 8003f86:	1ac0      	subs	r0, r0, r3
 8003f88:	2864      	cmp	r0, #100	@ 0x64
 8003f8a:	d9f6      	bls.n	8003f7a <HAL_RCC_OscConfig+0x262>
 8003f8c:	e72b      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f8e:	2201      	movs	r2, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d114      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2a6>
 8003f94:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f96:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f98:	4393      	bics	r3, r2
 8003f9a:	622b      	str	r3, [r5, #32]
 8003f9c:	6a2b      	ldr	r3, [r5, #32]
 8003f9e:	3203      	adds	r2, #3
 8003fa0:	4393      	bics	r3, r2
 8003fa2:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8003fa4:	f7fe f8b6 	bl	8002114 <HAL_GetTick>
 8003fa8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003faa:	6a2b      	ldr	r3, [r5, #32]
 8003fac:	423b      	tst	r3, r7
 8003fae:	d0d5      	beq.n	8003f5c <HAL_RCC_OscConfig+0x244>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fe f8b0 	bl	8002114 <HAL_GetTick>
 8003fb4:	4b23      	ldr	r3, [pc, #140]	@ (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003fb6:	1b80      	subs	r0, r0, r6
 8003fb8:	4298      	cmp	r0, r3
 8003fba:	d9f6      	bls.n	8003faa <HAL_RCC_OscConfig+0x292>
 8003fbc:	e713      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d105      	bne.n	8003fce <HAL_RCC_OscConfig+0x2b6>
 8003fc2:	6a29      	ldr	r1, [r5, #32]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	622b      	str	r3, [r5, #32]
 8003fca:	6a2b      	ldr	r3, [r5, #32]
 8003fcc:	e7bd      	b.n	8003f4a <HAL_RCC_OscConfig+0x232>
 8003fce:	6a2b      	ldr	r3, [r5, #32]
 8003fd0:	4393      	bics	r3, r2
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	622b      	str	r3, [r5, #32]
 8003fd6:	6a2b      	ldr	r3, [r5, #32]
 8003fd8:	4393      	bics	r3, r2
 8003fda:	e7b7      	b.n	8003f4c <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7fe f89a 	bl	8002114 <HAL_GetTick>
 8003fe0:	4b18      	ldr	r3, [pc, #96]	@ (8004044 <HAL_RCC_OscConfig+0x32c>)
 8003fe2:	1b80      	subs	r0, r0, r6
 8003fe4:	4298      	cmp	r0, r3
 8003fe6:	d9b6      	bls.n	8003f56 <HAL_RCC_OscConfig+0x23e>
 8003fe8:	e6fd      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fea:	f7fe f893 	bl	8002114 <HAL_GetTick>
 8003fee:	1b80      	subs	r0, r0, r6
 8003ff0:	2802      	cmp	r0, #2
 8003ff2:	d800      	bhi.n	8003ff6 <HAL_RCC_OscConfig+0x2de>
 8003ff4:	e6b7      	b.n	8003d66 <HAL_RCC_OscConfig+0x4e>
 8003ff6:	e6f6      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ff8:	3205      	adds	r2, #5
 8003ffa:	d103      	bne.n	8004004 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003ffc:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003ffe:	439a      	bics	r2, r3
 8004000:	636a      	str	r2, [r5, #52]	@ 0x34
 8004002:	e6b4      	b.n	8003d6e <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004004:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004006:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004008:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800400a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800400c:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 800400e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004010:	4393      	bics	r3, r2
 8004012:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8004014:	f7fe f87e 	bl	8002114 <HAL_GetTick>
 8004018:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800401a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800401c:	423b      	tst	r3, r7
 800401e:	d100      	bne.n	8004022 <HAL_RCC_OscConfig+0x30a>
 8004020:	e6ac      	b.n	8003d7c <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004022:	f7fe f877 	bl	8002114 <HAL_GetTick>
 8004026:	1b80      	subs	r0, r0, r6
 8004028:	2802      	cmp	r0, #2
 800402a:	d9f6      	bls.n	800401a <HAL_RCC_OscConfig+0x302>
 800402c:	e6db      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	40021000 	.word	0x40021000
 8004034:	fffeffff 	.word	0xfffeffff
 8004038:	fffbffff 	.word	0xfffbffff
 800403c:	40007000 	.word	0x40007000
 8004040:	efffffff 	.word	0xefffffff
 8004044:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004048:	210c      	movs	r1, #12
 800404a:	4d34      	ldr	r5, [pc, #208]	@ (800411c <HAL_RCC_OscConfig+0x404>)
 800404c:	686a      	ldr	r2, [r5, #4]
 800404e:	400a      	ands	r2, r1
 8004050:	2a08      	cmp	r2, #8
 8004052:	d047      	beq.n	80040e4 <HAL_RCC_OscConfig+0x3cc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004054:	4a32      	ldr	r2, [pc, #200]	@ (8004120 <HAL_RCC_OscConfig+0x408>)
 8004056:	2b02      	cmp	r3, #2
 8004058:	d132      	bne.n	80040c0 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 800405a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 800405e:	4013      	ands	r3, r2
 8004060:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004062:	f7fe f857 	bl	8002114 <HAL_GetTick>
 8004066:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004068:	04bf      	lsls	r7, r7, #18
 800406a:	682b      	ldr	r3, [r5, #0]
 800406c:	423b      	tst	r3, r7
 800406e:	d121      	bne.n	80040b4 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004070:	220f      	movs	r2, #15
 8004072:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004074:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004076:	4393      	bics	r3, r2
 8004078:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800407a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800407c:	4313      	orrs	r3, r2
 800407e:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8004080:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004082:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004084:	686a      	ldr	r2, [r5, #4]
 8004086:	430b      	orrs	r3, r1
 8004088:	4926      	ldr	r1, [pc, #152]	@ (8004124 <HAL_RCC_OscConfig+0x40c>)
 800408a:	400a      	ands	r2, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	682a      	ldr	r2, [r5, #0]
 8004094:	045b      	lsls	r3, r3, #17
 8004096:	4313      	orrs	r3, r2
 8004098:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800409a:	f7fe f83b 	bl	8002114 <HAL_GetTick>
 800409e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	4233      	tst	r3, r6
 80040a4:	d000      	beq.n	80040a8 <HAL_RCC_OscConfig+0x390>
 80040a6:	e66d      	b.n	8003d84 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a8:	f7fe f834 	bl	8002114 <HAL_GetTick>
 80040ac:	1b00      	subs	r0, r0, r4
 80040ae:	2802      	cmp	r0, #2
 80040b0:	d9f6      	bls.n	80040a0 <HAL_RCC_OscConfig+0x388>
 80040b2:	e698      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fe f82e 	bl	8002114 <HAL_GetTick>
 80040b8:	1b80      	subs	r0, r0, r6
 80040ba:	2802      	cmp	r0, #2
 80040bc:	d9d5      	bls.n	800406a <HAL_RCC_OscConfig+0x352>
 80040be:	e692      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
        __HAL_RCC_PLL_DISABLE();
 80040c0:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c2:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4013      	ands	r3, r2
 80040c6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80040c8:	f7fe f824 	bl	8002114 <HAL_GetTick>
 80040cc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ce:	04b6      	lsls	r6, r6, #18
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	4233      	tst	r3, r6
 80040d4:	d100      	bne.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
 80040d6:	e655      	b.n	8003d84 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe f81c 	bl	8002114 <HAL_GetTick>
 80040dc:	1b00      	subs	r0, r0, r4
 80040de:	2802      	cmp	r0, #2
 80040e0:	d9f6      	bls.n	80040d0 <HAL_RCC_OscConfig+0x3b8>
 80040e2:	e680      	b.n	8003de6 <HAL_RCC_OscConfig+0xce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d100      	bne.n	80040ea <HAL_RCC_OscConfig+0x3d2>
 80040e8:	e666      	b.n	8003db8 <HAL_RCC_OscConfig+0xa0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ea:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 80040ec:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80040f0:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 80040f2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040f4:	4002      	ands	r2, r0
 80040f6:	428a      	cmp	r2, r1
 80040f8:	d000      	beq.n	80040fc <HAL_RCC_OscConfig+0x3e4>
 80040fa:	e65d      	b.n	8003db8 <HAL_RCC_OscConfig+0xa0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040fc:	220f      	movs	r2, #15
 80040fe:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004100:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004102:	4293      	cmp	r3, r2
 8004104:	d000      	beq.n	8004108 <HAL_RCC_OscConfig+0x3f0>
 8004106:	e657      	b.n	8003db8 <HAL_RCC_OscConfig+0xa0>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004108:	23f0      	movs	r3, #240	@ 0xf0
 800410a:	039b      	lsls	r3, r3, #14
 800410c:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800410e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004110:	1ac0      	subs	r0, r0, r3
 8004112:	1e43      	subs	r3, r0, #1
 8004114:	4198      	sbcs	r0, r3
 8004116:	b2c0      	uxtb	r0, r0
 8004118:	e666      	b.n	8003de8 <HAL_RCC_OscConfig+0xd0>
 800411a:	46c0      	nop			@ (mov r8, r8)
 800411c:	40021000 	.word	0x40021000
 8004120:	feffffff 	.word	0xfeffffff
 8004124:	ffc27fff 	.word	0xffc27fff

08004128 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004128:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 800412a:	4a0b      	ldr	r2, [pc, #44]	@ (8004158 <HAL_RCC_GetSysClockFreq+0x30>)
{
 800412c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800412e:	6854      	ldr	r4, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004130:	4023      	ands	r3, r4
 8004132:	2b08      	cmp	r3, #8
 8004134:	d10d      	bne.n	8004152 <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004136:	250f      	movs	r5, #15
 8004138:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800413a:	4a08      	ldr	r2, [pc, #32]	@ (800415c <HAL_RCC_GetSysClockFreq+0x34>)
 800413c:	402b      	ands	r3, r5
 800413e:	5cd1      	ldrb	r1, [r2, r3]
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004140:	4807      	ldr	r0, [pc, #28]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x38>)
 8004142:	f7fc f811 	bl	8000168 <__udivsi3>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004146:	0ca4      	lsrs	r4, r4, #18
 8004148:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x3c>)
 800414a:	402c      	ands	r4, r5
 800414c:	5d1b      	ldrb	r3, [r3, r4]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800414e:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004150:	bd70      	pop	{r4, r5, r6, pc}
      sysclockfreq = HSE_VALUE;
 8004152:	4803      	ldr	r0, [pc, #12]	@ (8004160 <HAL_RCC_GetSysClockFreq+0x38>)
  return sysclockfreq;
 8004154:	e7fc      	b.n	8004150 <HAL_RCC_GetSysClockFreq+0x28>
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	40021000 	.word	0x40021000
 800415c:	08007a52 	.word	0x08007a52
 8004160:	007a1200 	.word	0x007a1200
 8004164:	08007a62 	.word	0x08007a62

08004168 <HAL_RCC_ClockConfig>:
{
 8004168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800416a:	0004      	movs	r4, r0
 800416c:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800416e:	2800      	cmp	r0, #0
 8004170:	d101      	bne.n	8004176 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8004172:	2001      	movs	r0, #1
}
 8004174:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004176:	2201      	movs	r2, #1
 8004178:	4d37      	ldr	r5, [pc, #220]	@ (8004258 <HAL_RCC_ClockConfig+0xf0>)
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	4013      	ands	r3, r2
 800417e:	428b      	cmp	r3, r1
 8004180:	d31c      	bcc.n	80041bc <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	0793      	lsls	r3, r2, #30
 8004186:	d422      	bmi.n	80041ce <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004188:	07d2      	lsls	r2, r2, #31
 800418a:	d42f      	bmi.n	80041ec <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800418c:	2301      	movs	r3, #1
 800418e:	682a      	ldr	r2, [r5, #0]
 8004190:	401a      	ands	r2, r3
 8004192:	42b2      	cmp	r2, r6
 8004194:	d851      	bhi.n	800423a <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	4d30      	ldr	r5, [pc, #192]	@ (800425c <HAL_RCC_ClockConfig+0xf4>)
 800419a:	075b      	lsls	r3, r3, #29
 800419c:	d454      	bmi.n	8004248 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800419e:	f7ff ffc3 	bl	8004128 <HAL_RCC_GetSysClockFreq>
 80041a2:	686b      	ldr	r3, [r5, #4]
 80041a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004260 <HAL_RCC_ClockConfig+0xf8>)
 80041a6:	061b      	lsls	r3, r3, #24
 80041a8:	0f1b      	lsrs	r3, r3, #28
 80041aa:	5cd3      	ldrb	r3, [r2, r3]
 80041ac:	492d      	ldr	r1, [pc, #180]	@ (8004264 <HAL_RCC_ClockConfig+0xfc>)
 80041ae:	40d8      	lsrs	r0, r3
 80041b0:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80041b2:	2003      	movs	r0, #3
 80041b4:	f7fd ff6e 	bl	8002094 <HAL_InitTick>
  return HAL_OK;
 80041b8:	2000      	movs	r0, #0
 80041ba:	e7db      	b.n	8004174 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041bc:	682b      	ldr	r3, [r5, #0]
 80041be:	4393      	bics	r3, r2
 80041c0:	430b      	orrs	r3, r1
 80041c2:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c4:	682b      	ldr	r3, [r5, #0]
 80041c6:	4013      	ands	r3, r2
 80041c8:	428b      	cmp	r3, r1
 80041ca:	d1d2      	bne.n	8004172 <HAL_RCC_ClockConfig+0xa>
 80041cc:	e7d9      	b.n	8004182 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ce:	4923      	ldr	r1, [pc, #140]	@ (800425c <HAL_RCC_ClockConfig+0xf4>)
 80041d0:	0753      	lsls	r3, r2, #29
 80041d2:	d504      	bpl.n	80041de <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80041d4:	23e0      	movs	r3, #224	@ 0xe0
 80041d6:	6848      	ldr	r0, [r1, #4]
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	4303      	orrs	r3, r0
 80041dc:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041de:	20f0      	movs	r0, #240	@ 0xf0
 80041e0:	684b      	ldr	r3, [r1, #4]
 80041e2:	4383      	bics	r3, r0
 80041e4:	68a0      	ldr	r0, [r4, #8]
 80041e6:	4303      	orrs	r3, r0
 80041e8:	604b      	str	r3, [r1, #4]
 80041ea:	e7cd      	b.n	8004188 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ec:	4f1b      	ldr	r7, [pc, #108]	@ (800425c <HAL_RCC_ClockConfig+0xf4>)
 80041ee:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f0:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f2:	2a01      	cmp	r2, #1
 80041f4:	d119      	bne.n	800422a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041f6:	039b      	lsls	r3, r3, #14
 80041f8:	d5bb      	bpl.n	8004172 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fa:	2103      	movs	r1, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	438b      	bics	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8004204:	f7fd ff86 	bl	8002114 <HAL_GetTick>
 8004208:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	230c      	movs	r3, #12
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	401a      	ands	r2, r3
 8004210:	6863      	ldr	r3, [r4, #4]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	429a      	cmp	r2, r3
 8004216:	d0b9      	beq.n	800418c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fd ff7c 	bl	8002114 <HAL_GetTick>
 800421c:	9b01      	ldr	r3, [sp, #4]
 800421e:	1ac0      	subs	r0, r0, r3
 8004220:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <HAL_RCC_ClockConfig+0x100>)
 8004222:	4298      	cmp	r0, r3
 8004224:	d9f1      	bls.n	800420a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8004226:	2003      	movs	r0, #3
 8004228:	e7a4      	b.n	8004174 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800422a:	2a02      	cmp	r2, #2
 800422c:	d102      	bne.n	8004234 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422e:	019b      	lsls	r3, r3, #6
 8004230:	d4e3      	bmi.n	80041fa <HAL_RCC_ClockConfig+0x92>
 8004232:	e79e      	b.n	8004172 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	079b      	lsls	r3, r3, #30
 8004236:	d4e0      	bmi.n	80041fa <HAL_RCC_ClockConfig+0x92>
 8004238:	e79b      	b.n	8004172 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	682a      	ldr	r2, [r5, #0]
 800423c:	439a      	bics	r2, r3
 800423e:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004240:	682a      	ldr	r2, [r5, #0]
 8004242:	421a      	tst	r2, r3
 8004244:	d0a7      	beq.n	8004196 <HAL_RCC_ClockConfig+0x2e>
 8004246:	e794      	b.n	8004172 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	686b      	ldr	r3, [r5, #4]
 800424a:	4a08      	ldr	r2, [pc, #32]	@ (800426c <HAL_RCC_ClockConfig+0x104>)
 800424c:	4013      	ands	r3, r2
 800424e:	68e2      	ldr	r2, [r4, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	606b      	str	r3, [r5, #4]
 8004254:	e7a3      	b.n	800419e <HAL_RCC_ClockConfig+0x36>
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	40022000 	.word	0x40022000
 800425c:	40021000 	.word	0x40021000
 8004260:	08007a42 	.word	0x08007a42
 8004264:	20000014 	.word	0x20000014
 8004268:	00001388 	.word	0x00001388
 800426c:	fffff8ff 	.word	0xfffff8ff

08004270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004270:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004272:	6803      	ldr	r3, [r0, #0]
{
 8004274:	0005      	movs	r5, r0
 8004276:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004278:	03db      	lsls	r3, r3, #15
 800427a:	d52b      	bpl.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427c:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800427e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004280:	4c3d      	ldr	r4, [pc, #244]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004282:	0552      	lsls	r2, r2, #21
 8004284:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004286:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004288:	4213      	tst	r3, r2
 800428a:	d108      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800428c:	69e3      	ldr	r3, [r4, #28]
 800428e:	4313      	orrs	r3, r2
 8004290:	61e3      	str	r3, [r4, #28]
 8004292:	69e3      	ldr	r3, [r4, #28]
 8004294:	4013      	ands	r3, r2
 8004296:	9303      	str	r3, [sp, #12]
 8004298:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800429a:	2301      	movs	r3, #1
 800429c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429e:	2780      	movs	r7, #128	@ 0x80
 80042a0:	4e36      	ldr	r6, [pc, #216]	@ (800437c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80042a2:	007f      	lsls	r7, r7, #1
 80042a4:	6833      	ldr	r3, [r6, #0]
 80042a6:	423b      	tst	r3, r7
 80042a8:	d02b      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x92>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042aa:	6a21      	ldr	r1, [r4, #32]
 80042ac:	22c0      	movs	r2, #192	@ 0xc0
 80042ae:	0008      	movs	r0, r1
 80042b0:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042b2:	686b      	ldr	r3, [r5, #4]
 80042b4:	4e32      	ldr	r6, [pc, #200]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0x110>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042b6:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042b8:	4211      	tst	r1, r2
 80042ba:	d134      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042bc:	6a23      	ldr	r3, [r4, #32]
 80042be:	686a      	ldr	r2, [r5, #4]
 80042c0:	4033      	ands	r3, r6
 80042c2:	4313      	orrs	r3, r2
 80042c4:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042c6:	9b00      	ldr	r3, [sp, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d103      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042cc:	69e3      	ldr	r3, [r4, #28]
 80042ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042d4:	682a      	ldr	r2, [r5, #0]
 80042d6:	07d3      	lsls	r3, r2, #31
 80042d8:	d506      	bpl.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042da:	2003      	movs	r0, #3
 80042dc:	4926      	ldr	r1, [pc, #152]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80042de:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80042e0:	4383      	bics	r3, r0
 80042e2:	68a8      	ldr	r0, [r5, #8]
 80042e4:	4303      	orrs	r3, r0
 80042e6:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042e8:	0693      	lsls	r3, r2, #26
 80042ea:	d506      	bpl.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042ec:	2010      	movs	r0, #16
 80042ee:	4922      	ldr	r1, [pc, #136]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80042f0:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80042f2:	4383      	bics	r3, r0
 80042f4:	68e8      	ldr	r0, [r5, #12]
 80042f6:	4303      	orrs	r3, r0
 80042f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042fa:	0392      	lsls	r2, r2, #14
 80042fc:	d433      	bmi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xf6>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80042fe:	2000      	movs	r0, #0
 8004300:	e00f      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004302:	6833      	ldr	r3, [r6, #0]
 8004304:	433b      	orrs	r3, r7
 8004306:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004308:	f7fd ff04 	bl	8002114 <HAL_GetTick>
 800430c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	6833      	ldr	r3, [r6, #0]
 8004310:	423b      	tst	r3, r7
 8004312:	d1ca      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004314:	f7fd fefe 	bl	8002114 <HAL_GetTick>
 8004318:	9b01      	ldr	r3, [sp, #4]
 800431a:	1ac0      	subs	r0, r0, r3
 800431c:	2864      	cmp	r0, #100	@ 0x64
 800431e:	d9f6      	bls.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x9e>
          return HAL_TIMEOUT;
 8004320:	2003      	movs	r0, #3
}
 8004322:	b005      	add	sp, #20
 8004324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004326:	4013      	ands	r3, r2
 8004328:	4283      	cmp	r3, r0
 800432a:	d0c7      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 800432c:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800432e:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004330:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004332:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8004334:	0252      	lsls	r2, r2, #9
 8004336:	4302      	orrs	r2, r0
 8004338:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800433a:	6a22      	ldr	r2, [r4, #32]
 800433c:	4812      	ldr	r0, [pc, #72]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800433e:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004340:	4002      	ands	r2, r0
 8004342:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 8004344:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004346:	07db      	lsls	r3, r3, #31
 8004348:	d5b8      	bpl.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 800434a:	f7fd fee3 	bl	8002114 <HAL_GetTick>
 800434e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004350:	2202      	movs	r2, #2
 8004352:	6a23      	ldr	r3, [r4, #32]
 8004354:	4213      	tst	r3, r2
 8004356:	d1b1      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004358:	f7fd fedc 	bl	8002114 <HAL_GetTick>
 800435c:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 800435e:	1bc0      	subs	r0, r0, r7
 8004360:	4298      	cmp	r0, r3
 8004362:	d9f5      	bls.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8004364:	e7dc      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004366:	2180      	movs	r1, #128	@ 0x80
 8004368:	4a03      	ldr	r2, [pc, #12]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800436a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800436c:	438b      	bics	r3, r1
 800436e:	6929      	ldr	r1, [r5, #16]
 8004370:	430b      	orrs	r3, r1
 8004372:	6313      	str	r3, [r2, #48]	@ 0x30
 8004374:	e7c3      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	40021000 	.word	0x40021000
 800437c:	40007000 	.word	0x40007000
 8004380:	fffffcff 	.word	0xfffffcff
 8004384:	efffffff 	.word	0xefffffff
 8004388:	fffeffff 	.word	0xfffeffff
 800438c:	00001388 	.word	0x00001388

08004390 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004390:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004392:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8004394:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004396:	6a02      	ldr	r2, [r0, #32]
 8004398:	43a2      	bics	r2, r4
 800439a:	6202      	str	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800439c:	2273      	movs	r2, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 800439e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80043a0:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043a2:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a4:	680a      	ldr	r2, [r1, #0]
 80043a6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043a8:	2202      	movs	r2, #2
 80043aa:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ac:	688a      	ldr	r2, [r1, #8]
 80043ae:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043b0:	4a14      	ldr	r2, [pc, #80]	@ (8004404 <TIM_OC1_SetConfig+0x74>)
 80043b2:	4290      	cmp	r0, r2
 80043b4:	d008      	beq.n	80043c8 <TIM_OC1_SetConfig+0x38>
 80043b6:	4e14      	ldr	r6, [pc, #80]	@ (8004408 <TIM_OC1_SetConfig+0x78>)
 80043b8:	42b0      	cmp	r0, r6
 80043ba:	d005      	beq.n	80043c8 <TIM_OC1_SetConfig+0x38>
 80043bc:	4e13      	ldr	r6, [pc, #76]	@ (800440c <TIM_OC1_SetConfig+0x7c>)
 80043be:	42b0      	cmp	r0, r6
 80043c0:	d002      	beq.n	80043c8 <TIM_OC1_SetConfig+0x38>
 80043c2:	4e13      	ldr	r6, [pc, #76]	@ (8004410 <TIM_OC1_SetConfig+0x80>)
 80043c4:	42b0      	cmp	r0, r6
 80043c6:	d116      	bne.n	80043f6 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043c8:	2608      	movs	r6, #8
 80043ca:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043cc:	68ce      	ldr	r6, [r1, #12]
 80043ce:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043d0:	2604      	movs	r6, #4
 80043d2:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d4:	4290      	cmp	r0, r2
 80043d6:	d008      	beq.n	80043ea <TIM_OC1_SetConfig+0x5a>
 80043d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004408 <TIM_OC1_SetConfig+0x78>)
 80043da:	4290      	cmp	r0, r2
 80043dc:	d005      	beq.n	80043ea <TIM_OC1_SetConfig+0x5a>
 80043de:	4a0b      	ldr	r2, [pc, #44]	@ (800440c <TIM_OC1_SetConfig+0x7c>)
 80043e0:	4290      	cmp	r0, r2
 80043e2:	d002      	beq.n	80043ea <TIM_OC1_SetConfig+0x5a>
 80043e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004410 <TIM_OC1_SetConfig+0x80>)
 80043e6:	4290      	cmp	r0, r2
 80043e8:	d105      	bne.n	80043f6 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004414 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043ec:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043ee:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 80043f0:	694c      	ldr	r4, [r1, #20]
 80043f2:	4334      	orrs	r4, r6
 80043f4:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043f6:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80043f8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80043fa:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80043fc:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fe:	6203      	str	r3, [r0, #32]
}
 8004400:	bd70      	pop	{r4, r5, r6, pc}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800
 8004414:	fffffcff 	.word	0xfffffcff

08004418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800441a:	4a18      	ldr	r2, [pc, #96]	@ (800447c <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 800441c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800441e:	6a03      	ldr	r3, [r0, #32]
 8004420:	4013      	ands	r3, r2
 8004422:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004424:	2373      	movs	r3, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 8004426:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004428:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800442a:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800442c:	680b      	ldr	r3, [r1, #0]
 800442e:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004430:	4b13      	ldr	r3, [pc, #76]	@ (8004480 <TIM_OC3_SetConfig+0x68>)
 8004432:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004434:	688b      	ldr	r3, [r1, #8]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800443a:	4d12      	ldr	r5, [pc, #72]	@ (8004484 <TIM_OC3_SetConfig+0x6c>)
 800443c:	42a8      	cmp	r0, r5
 800443e:	d10e      	bne.n	800445e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004440:	4d11      	ldr	r5, [pc, #68]	@ (8004488 <TIM_OC3_SetConfig+0x70>)
 8004442:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004444:	68cb      	ldr	r3, [r1, #12]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800444a:	4d10      	ldr	r5, [pc, #64]	@ (800448c <TIM_OC3_SetConfig+0x74>)
 800444c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800444e:	4d10      	ldr	r5, [pc, #64]	@ (8004490 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004450:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004452:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004454:	698a      	ldr	r2, [r1, #24]
 8004456:	4332      	orrs	r2, r6
 8004458:	0112      	lsls	r2, r2, #4
 800445a:	432a      	orrs	r2, r5
 800445c:	e008      	b.n	8004470 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445e:	4d0d      	ldr	r5, [pc, #52]	@ (8004494 <TIM_OC3_SetConfig+0x7c>)
 8004460:	42a8      	cmp	r0, r5
 8004462:	d0f4      	beq.n	800444e <TIM_OC3_SetConfig+0x36>
 8004464:	4d0c      	ldr	r5, [pc, #48]	@ (8004498 <TIM_OC3_SetConfig+0x80>)
 8004466:	42a8      	cmp	r0, r5
 8004468:	d0f1      	beq.n	800444e <TIM_OC3_SetConfig+0x36>
 800446a:	4d0c      	ldr	r5, [pc, #48]	@ (800449c <TIM_OC3_SetConfig+0x84>)
 800446c:	42a8      	cmp	r0, r5
 800446e:	d0ee      	beq.n	800444e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004470:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004472:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004474:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004476:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004478:	6203      	str	r3, [r0, #32]
}
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	fffffeff 	.word	0xfffffeff
 8004480:	fffffdff 	.word	0xfffffdff
 8004484:	40012c00 	.word	0x40012c00
 8004488:	fffff7ff 	.word	0xfffff7ff
 800448c:	fffffbff 	.word	0xfffffbff
 8004490:	ffffcfff 	.word	0xffffcfff
 8004494:	40014000 	.word	0x40014000
 8004498:	40014400 	.word	0x40014400
 800449c:	40014800 	.word	0x40014800

080044a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a0:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a2:	4a14      	ldr	r2, [pc, #80]	@ (80044f4 <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 80044a4:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044a8:	4d13      	ldr	r5, [pc, #76]	@ (80044f8 <TIM_OC4_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044aa:	4013      	ands	r3, r2
 80044ac:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80044ae:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80044b0:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044b2:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b4:	680d      	ldr	r5, [r1, #0]
 80044b6:	022d      	lsls	r5, r5, #8
 80044b8:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044ba:	4a10      	ldr	r2, [pc, #64]	@ (80044fc <TIM_OC4_SetConfig+0x5c>)
 80044bc:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044be:	688a      	ldr	r2, [r1, #8]
 80044c0:	0312      	lsls	r2, r2, #12
 80044c2:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c4:	4c0e      	ldr	r4, [pc, #56]	@ (8004500 <TIM_OC4_SetConfig+0x60>)
 80044c6:	42a0      	cmp	r0, r4
 80044c8:	d008      	beq.n	80044dc <TIM_OC4_SetConfig+0x3c>
 80044ca:	4c0e      	ldr	r4, [pc, #56]	@ (8004504 <TIM_OC4_SetConfig+0x64>)
 80044cc:	42a0      	cmp	r0, r4
 80044ce:	d005      	beq.n	80044dc <TIM_OC4_SetConfig+0x3c>
 80044d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004508 <TIM_OC4_SetConfig+0x68>)
 80044d2:	42a0      	cmp	r0, r4
 80044d4:	d002      	beq.n	80044dc <TIM_OC4_SetConfig+0x3c>
 80044d6:	4c0d      	ldr	r4, [pc, #52]	@ (800450c <TIM_OC4_SetConfig+0x6c>)
 80044d8:	42a0      	cmp	r0, r4
 80044da:	d104      	bne.n	80044e6 <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044dc:	4c0c      	ldr	r4, [pc, #48]	@ (8004510 <TIM_OC4_SetConfig+0x70>)
 80044de:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e0:	694b      	ldr	r3, [r1, #20]
 80044e2:	019b      	lsls	r3, r3, #6
 80044e4:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e6:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044e8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80044ea:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80044ec:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ee:	6202      	str	r2, [r0, #32]
}
 80044f0:	bd30      	pop	{r4, r5, pc}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	ffffefff 	.word	0xffffefff
 80044f8:	ffff8cff 	.word	0xffff8cff
 80044fc:	ffffdfff 	.word	0xffffdfff
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40014000 	.word	0x40014000
 8004508:	40014400 	.word	0x40014400
 800450c:	40014800 	.word	0x40014800
 8004510:	ffffbfff 	.word	0xffffbfff

08004514 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004514:	0001      	movs	r1, r0
{
 8004516:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004518:	2001      	movs	r0, #1
{
 800451a:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 800451c:	313d      	adds	r1, #61	@ 0x3d
 800451e:	780c      	ldrb	r4, [r1, #0]
 8004520:	b2e2      	uxtb	r2, r4
 8004522:	4284      	cmp	r4, r0
 8004524:	d115      	bne.n	8004552 <HAL_TIM_Base_Start+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004526:	1800      	adds	r0, r0, r0
 8004528:	7008      	strb	r0, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	490a      	ldr	r1, [pc, #40]	@ (8004558 <HAL_TIM_Base_Start+0x44>)
 800452e:	428b      	cmp	r3, r1
 8004530:	d005      	beq.n	800453e <HAL_TIM_Base_Start+0x2a>
 8004532:	490a      	ldr	r1, [pc, #40]	@ (800455c <HAL_TIM_Base_Start+0x48>)
 8004534:	428b      	cmp	r3, r1
 8004536:	d002      	beq.n	800453e <HAL_TIM_Base_Start+0x2a>
 8004538:	4909      	ldr	r1, [pc, #36]	@ (8004560 <HAL_TIM_Base_Start+0x4c>)
 800453a:	428b      	cmp	r3, r1
 800453c:	d10a      	bne.n	8004554 <HAL_TIM_Base_Start+0x40>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800453e:	2107      	movs	r1, #7
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004544:	2a06      	cmp	r2, #6
 8004546:	d003      	beq.n	8004550 <HAL_TIM_Base_Start+0x3c>
      __HAL_TIM_ENABLE(htim);
 8004548:	2201      	movs	r2, #1
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004550:	2000      	movs	r0, #0
}
 8004552:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 8004554:	6819      	ldr	r1, [r3, #0]
 8004556:	e7f9      	b.n	800454c <HAL_TIM_Base_Start+0x38>
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40014000 	.word	0x40014000

08004564 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8004564:	4770      	bx	lr
	...

08004568 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004568:	4a1f      	ldr	r2, [pc, #124]	@ (80045e8 <TIM_Base_SetConfig+0x80>)
{
 800456a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800456c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800456e:	4290      	cmp	r0, r2
 8004570:	d002      	beq.n	8004578 <TIM_Base_SetConfig+0x10>
 8004572:	4c1e      	ldr	r4, [pc, #120]	@ (80045ec <TIM_Base_SetConfig+0x84>)
 8004574:	42a0      	cmp	r0, r4
 8004576:	d108      	bne.n	800458a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004578:	2470      	movs	r4, #112	@ 0x70
 800457a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800457c:	684c      	ldr	r4, [r1, #4]
 800457e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004580:	4290      	cmp	r0, r2
 8004582:	d00e      	beq.n	80045a2 <TIM_Base_SetConfig+0x3a>
 8004584:	4c19      	ldr	r4, [pc, #100]	@ (80045ec <TIM_Base_SetConfig+0x84>)
 8004586:	42a0      	cmp	r0, r4
 8004588:	d00b      	beq.n	80045a2 <TIM_Base_SetConfig+0x3a>
 800458a:	4c19      	ldr	r4, [pc, #100]	@ (80045f0 <TIM_Base_SetConfig+0x88>)
 800458c:	42a0      	cmp	r0, r4
 800458e:	d008      	beq.n	80045a2 <TIM_Base_SetConfig+0x3a>
 8004590:	4c18      	ldr	r4, [pc, #96]	@ (80045f4 <TIM_Base_SetConfig+0x8c>)
 8004592:	42a0      	cmp	r0, r4
 8004594:	d005      	beq.n	80045a2 <TIM_Base_SetConfig+0x3a>
 8004596:	4c18      	ldr	r4, [pc, #96]	@ (80045f8 <TIM_Base_SetConfig+0x90>)
 8004598:	42a0      	cmp	r0, r4
 800459a:	d002      	beq.n	80045a2 <TIM_Base_SetConfig+0x3a>
 800459c:	4c17      	ldr	r4, [pc, #92]	@ (80045fc <TIM_Base_SetConfig+0x94>)
 800459e:	42a0      	cmp	r0, r4
 80045a0:	d103      	bne.n	80045aa <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a2:	4c17      	ldr	r4, [pc, #92]	@ (8004600 <TIM_Base_SetConfig+0x98>)
 80045a4:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a6:	68cb      	ldr	r3, [r1, #12]
 80045a8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045aa:	2480      	movs	r4, #128	@ 0x80
 80045ac:	43a3      	bics	r3, r4
 80045ae:	694c      	ldr	r4, [r1, #20]
 80045b0:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80045b2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b4:	688b      	ldr	r3, [r1, #8]
 80045b6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045b8:	680b      	ldr	r3, [r1, #0]
 80045ba:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045bc:	4290      	cmp	r0, r2
 80045be:	d008      	beq.n	80045d2 <TIM_Base_SetConfig+0x6a>
 80045c0:	4b0c      	ldr	r3, [pc, #48]	@ (80045f4 <TIM_Base_SetConfig+0x8c>)
 80045c2:	4298      	cmp	r0, r3
 80045c4:	d005      	beq.n	80045d2 <TIM_Base_SetConfig+0x6a>
 80045c6:	4b0c      	ldr	r3, [pc, #48]	@ (80045f8 <TIM_Base_SetConfig+0x90>)
 80045c8:	4298      	cmp	r0, r3
 80045ca:	d002      	beq.n	80045d2 <TIM_Base_SetConfig+0x6a>
 80045cc:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <TIM_Base_SetConfig+0x94>)
 80045ce:	4298      	cmp	r0, r3
 80045d0:	d101      	bne.n	80045d6 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 80045d2:	690b      	ldr	r3, [r1, #16]
 80045d4:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80045d6:	2201      	movs	r2, #1
 80045d8:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045da:	6903      	ldr	r3, [r0, #16]
 80045dc:	4213      	tst	r3, r2
 80045de:	d002      	beq.n	80045e6 <TIM_Base_SetConfig+0x7e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045e0:	6903      	ldr	r3, [r0, #16]
 80045e2:	4393      	bics	r3, r2
 80045e4:	6103      	str	r3, [r0, #16]
}
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40002000 	.word	0x40002000
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40014400 	.word	0x40014400
 80045fc:	40014800 	.word	0x40014800
 8004600:	fffffcff 	.word	0xfffffcff

08004604 <HAL_TIM_Base_Init>:
{
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004608:	2001      	movs	r0, #1
  if (htim == NULL)
 800460a:	2c00      	cmp	r4, #0
 800460c:	d021      	beq.n	8004652 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800460e:	0025      	movs	r5, r4
 8004610:	353d      	adds	r5, #61	@ 0x3d
 8004612:	782b      	ldrb	r3, [r5, #0]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d105      	bne.n	8004626 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800461a:	0023      	movs	r3, r4
 800461c:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800461e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004620:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004622:	f7fd fbb9 	bl	8001d98 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004626:	2302      	movs	r3, #2
 8004628:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462a:	6820      	ldr	r0, [r4, #0]
 800462c:	1d21      	adds	r1, r4, #4
 800462e:	f7ff ff9b 	bl	8004568 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004632:	0022      	movs	r2, r4
 8004634:	2301      	movs	r3, #1
  return HAL_OK;
 8004636:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004638:	3246      	adds	r2, #70	@ 0x46
 800463a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	3a08      	subs	r2, #8
 8004640:	7013      	strb	r3, [r2, #0]
 8004642:	7053      	strb	r3, [r2, #1]
 8004644:	7093      	strb	r3, [r2, #2]
 8004646:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	7113      	strb	r3, [r2, #4]
 800464a:	7153      	strb	r3, [r2, #5]
 800464c:	7193      	strb	r3, [r2, #6]
 800464e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004650:	702b      	strb	r3, [r5, #0]
}
 8004652:	bd70      	pop	{r4, r5, r6, pc}

08004654 <HAL_TIM_PWM_Init>:
{
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004658:	2001      	movs	r0, #1
  if (htim == NULL)
 800465a:	2c00      	cmp	r4, #0
 800465c:	d021      	beq.n	80046a2 <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 800465e:	0025      	movs	r5, r4
 8004660:	353d      	adds	r5, #61	@ 0x3d
 8004662:	782b      	ldrb	r3, [r5, #0]
 8004664:	b2da      	uxtb	r2, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d105      	bne.n	8004676 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800466a:	0023      	movs	r3, r4
 800466c:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800466e:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004670:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 8004672:	f7ff ff77 	bl	8004564 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004676:	2302      	movs	r3, #2
 8004678:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800467a:	6820      	ldr	r0, [r4, #0]
 800467c:	1d21      	adds	r1, r4, #4
 800467e:	f7ff ff73 	bl	8004568 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004682:	0022      	movs	r2, r4
 8004684:	2301      	movs	r3, #1
  return HAL_OK;
 8004686:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004688:	3246      	adds	r2, #70	@ 0x46
 800468a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468e:	3a08      	subs	r2, #8
 8004690:	7013      	strb	r3, [r2, #0]
 8004692:	7053      	strb	r3, [r2, #1]
 8004694:	7093      	strb	r3, [r2, #2]
 8004696:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004698:	7113      	strb	r3, [r2, #4]
 800469a:	7153      	strb	r3, [r2, #5]
 800469c:	7193      	strb	r3, [r2, #6]
 800469e:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80046a0:	702b      	strb	r3, [r5, #0]
}
 80046a2:	bd70      	pop	{r4, r5, r6, pc}

080046a4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a4:	2210      	movs	r2, #16
{
 80046a6:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 80046a8:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046aa:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046ac:	4c17      	ldr	r4, [pc, #92]	@ (800470c <TIM_OC2_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ae:	4393      	bics	r3, r2
 80046b0:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80046b2:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80046b4:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046b6:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b8:	680c      	ldr	r4, [r1, #0]
 80046ba:	0224      	lsls	r4, r4, #8
 80046bc:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 80046be:	2320      	movs	r3, #32
 80046c0:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046c2:	688b      	ldr	r3, [r1, #8]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046c8:	4d11      	ldr	r5, [pc, #68]	@ (8004710 <TIM_OC2_SetConfig+0x6c>)
 80046ca:	42a8      	cmp	r0, r5
 80046cc:	d10f      	bne.n	80046ee <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80046ce:	2580      	movs	r5, #128	@ 0x80
 80046d0:	43ab      	bics	r3, r5
 80046d2:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046d4:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 80046d6:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80046dc:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046de:	4d0d      	ldr	r5, [pc, #52]	@ (8004714 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046e0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046e2:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046e4:	698a      	ldr	r2, [r1, #24]
 80046e6:	4332      	orrs	r2, r6
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	432a      	orrs	r2, r5
 80046ec:	e008      	b.n	8004700 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ee:	4d0a      	ldr	r5, [pc, #40]	@ (8004718 <TIM_OC2_SetConfig+0x74>)
 80046f0:	42a8      	cmp	r0, r5
 80046f2:	d0f4      	beq.n	80046de <TIM_OC2_SetConfig+0x3a>
 80046f4:	4d09      	ldr	r5, [pc, #36]	@ (800471c <TIM_OC2_SetConfig+0x78>)
 80046f6:	42a8      	cmp	r0, r5
 80046f8:	d0f1      	beq.n	80046de <TIM_OC2_SetConfig+0x3a>
 80046fa:	4d09      	ldr	r5, [pc, #36]	@ (8004720 <TIM_OC2_SetConfig+0x7c>)
 80046fc:	42a8      	cmp	r0, r5
 80046fe:	d0ee      	beq.n	80046de <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8004700:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8004702:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004704:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004706:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004708:	6203      	str	r3, [r0, #32]
}
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	ffff8cff 	.word	0xffff8cff
 8004710:	40012c00 	.word	0x40012c00
 8004714:	fffff3ff 	.word	0xfffff3ff
 8004718:	40014000 	.word	0x40014000
 800471c:	40014400 	.word	0x40014400
 8004720:	40014800 	.word	0x40014800

08004724 <HAL_TIM_PWM_ConfigChannel>:
{
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004726:	0006      	movs	r6, r0
 8004728:	363c      	adds	r6, #60	@ 0x3c
{
 800472a:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 800472c:	7832      	ldrb	r2, [r6, #0]
{
 800472e:	0003      	movs	r3, r0
 8004730:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 8004732:	2002      	movs	r0, #2
 8004734:	2a01      	cmp	r2, #1
 8004736:	d00a      	beq.n	800474e <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004738:	3801      	subs	r0, #1
 800473a:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 800473c:	2d08      	cmp	r5, #8
 800473e:	d03f      	beq.n	80047c0 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8004740:	d806      	bhi.n	8004750 <HAL_TIM_PWM_ConfigChannel+0x2c>
 8004742:	2d00      	cmp	r5, #0
 8004744:	d019      	beq.n	800477a <HAL_TIM_PWM_ConfigChannel+0x56>
 8004746:	2d04      	cmp	r5, #4
 8004748:	d029      	beq.n	800479e <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 800474a:	2300      	movs	r3, #0
 800474c:	7033      	strb	r3, [r6, #0]
}
 800474e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8004750:	2d0c      	cmp	r5, #12
 8004752:	d1fa      	bne.n	800474a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004754:	681d      	ldr	r5, [r3, #0]
 8004756:	0028      	movs	r0, r5
 8004758:	f7ff fea2 	bl	80044a0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800475c:	2380      	movs	r3, #128	@ 0x80
 800475e:	69ea      	ldr	r2, [r5, #28]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	4313      	orrs	r3, r2
 8004764:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004766:	69eb      	ldr	r3, [r5, #28]
 8004768:	4a1d      	ldr	r2, [pc, #116]	@ (80047e0 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 800476a:	4013      	ands	r3, r2
 800476c:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800476e:	6923      	ldr	r3, [r4, #16]
 8004770:	69ea      	ldr	r2, [r5, #28]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	4313      	orrs	r3, r2
 8004776:	61eb      	str	r3, [r5, #28]
      break;
 8004778:	e00f      	b.n	800479a <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800477a:	681d      	ldr	r5, [r3, #0]
 800477c:	0028      	movs	r0, r5
 800477e:	f7ff fe07 	bl	8004390 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004782:	2308      	movs	r3, #8
 8004784:	69aa      	ldr	r2, [r5, #24]
 8004786:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004788:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800478a:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800478c:	69ab      	ldr	r3, [r5, #24]
 800478e:	4393      	bics	r3, r2
 8004790:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004792:	69ab      	ldr	r3, [r5, #24]
 8004794:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004796:	4313      	orrs	r3, r2
 8004798:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2000      	movs	r0, #0
 800479c:	e7d5      	b.n	800474a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800479e:	681d      	ldr	r5, [r3, #0]
 80047a0:	0028      	movs	r0, r5
 80047a2:	f7ff ff7f 	bl	80046a4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a6:	2380      	movs	r3, #128	@ 0x80
 80047a8:	69aa      	ldr	r2, [r5, #24]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b0:	69ab      	ldr	r3, [r5, #24]
 80047b2:	4a0b      	ldr	r2, [pc, #44]	@ (80047e0 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047b8:	6923      	ldr	r3, [r4, #16]
 80047ba:	69aa      	ldr	r2, [r5, #24]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	e7ea      	b.n	8004796 <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047c0:	681f      	ldr	r7, [r3, #0]
 80047c2:	0038      	movs	r0, r7
 80047c4:	f7ff fe28 	bl	8004418 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047c8:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	431d      	orrs	r5, r3
 80047ce:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	4393      	bics	r3, r2
 80047d4:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	6922      	ldr	r2, [r4, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61fb      	str	r3, [r7, #28]
      break;
 80047de:	e7dc      	b.n	800479a <HAL_TIM_PWM_ConfigChannel+0x76>
 80047e0:	fffffbff 	.word	0xfffffbff

080047e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047e6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e8:	4d03      	ldr	r5, [pc, #12]	@ (80047f8 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ea:	430a      	orrs	r2, r1
 80047ec:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ee:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047f0:	4313      	orrs	r3, r2
 80047f2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f4:	6083      	str	r3, [r0, #8]
}
 80047f6:	bd30      	pop	{r4, r5, pc}
 80047f8:	ffff00ff 	.word	0xffff00ff

080047fc <HAL_TIM_ConfigClockSource>:
{
 80047fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80047fe:	0005      	movs	r5, r0
 8004800:	2202      	movs	r2, #2
 8004802:	353c      	adds	r5, #60	@ 0x3c
 8004804:	782c      	ldrb	r4, [r5, #0]
{
 8004806:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004808:	0010      	movs	r0, r2
 800480a:	2c01      	cmp	r4, #1
 800480c:	d01b      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800480e:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8004810:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004812:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 8004814:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004816:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004818:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800481a:	4a41      	ldr	r2, [pc, #260]	@ (8004920 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 800481c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800481e:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8004820:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004822:	680b      	ldr	r3, [r1, #0]
 8004824:	2b60      	cmp	r3, #96	@ 0x60
 8004826:	d04e      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0xca>
 8004828:	d82d      	bhi.n	8004886 <HAL_TIM_ConfigClockSource+0x8a>
 800482a:	2b40      	cmp	r3, #64	@ 0x40
 800482c:	d062      	beq.n	80048f4 <HAL_TIM_ConfigClockSource+0xf8>
 800482e:	d813      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x5c>
 8004830:	2b20      	cmp	r3, #32
 8004832:	d00b      	beq.n	800484c <HAL_TIM_ConfigClockSource+0x50>
 8004834:	d808      	bhi.n	8004848 <HAL_TIM_ConfigClockSource+0x4c>
 8004836:	2210      	movs	r2, #16
 8004838:	0019      	movs	r1, r3
 800483a:	4391      	bics	r1, r2
 800483c:	d006      	beq.n	800484c <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 800483e:	2301      	movs	r3, #1
 8004840:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8004842:	2300      	movs	r3, #0
 8004844:	702b      	strb	r3, [r5, #0]
}
 8004846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004848:	2b30      	cmp	r3, #48	@ 0x30
 800484a:	d1f8      	bne.n	800483e <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 800484c:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 800484e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004850:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004852:	4313      	orrs	r3, r2
 8004854:	2207      	movs	r2, #7
 8004856:	e028      	b.n	80048aa <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8004858:	2b50      	cmp	r3, #80	@ 0x50
 800485a:	d1f0      	bne.n	800483e <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 800485c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800485e:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004860:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004862:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004864:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004866:	4387      	bics	r7, r0
 8004868:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800486a:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800486c:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800486e:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004870:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004872:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8004874:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004876:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004878:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 800487a:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 800487c:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800487e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004880:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004882:	3b19      	subs	r3, #25
 8004884:	e011      	b.n	80048aa <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8004886:	2280      	movs	r2, #128	@ 0x80
 8004888:	0152      	lsls	r2, r2, #5
 800488a:	4293      	cmp	r3, r2
 800488c:	d00f      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0xb2>
 800488e:	2280      	movs	r2, #128	@ 0x80
 8004890:	0192      	lsls	r2, r2, #6
 8004892:	4293      	cmp	r3, r2
 8004894:	d00d      	beq.n	80048b2 <HAL_TIM_ConfigClockSource+0xb6>
 8004896:	2b70      	cmp	r3, #112	@ 0x70
 8004898:	d1d1      	bne.n	800483e <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 800489a:	68cb      	ldr	r3, [r1, #12]
 800489c:	684a      	ldr	r2, [r1, #4]
 800489e:	0020      	movs	r0, r4
 80048a0:	6889      	ldr	r1, [r1, #8]
 80048a2:	f7ff ff9f 	bl	80047e4 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048a6:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 80048a8:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048aa:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 80048ac:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80048ae:	2000      	movs	r0, #0
 80048b0:	e7c5      	b.n	800483e <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 80048b2:	68cb      	ldr	r3, [r1, #12]
 80048b4:	684a      	ldr	r2, [r1, #4]
 80048b6:	0020      	movs	r0, r4
 80048b8:	6889      	ldr	r1, [r1, #8]
 80048ba:	f7ff ff93 	bl	80047e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048be:	2380      	movs	r3, #128	@ 0x80
 80048c0:	68a2      	ldr	r2, [r4, #8]
 80048c2:	01db      	lsls	r3, r3, #7
 80048c4:	e7f1      	b.n	80048aa <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c6:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 80048c8:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80048ca:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80048cc:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ce:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048d0:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	43b8      	bics	r0, r7
 80048d4:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d6:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d8:	4f12      	ldr	r7, [pc, #72]	@ (8004924 <HAL_TIM_ConfigClockSource+0x128>)
  tmpccer |= (TIM_ICPolarity << 4U);
 80048da:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048dc:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048de:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048e0:	20a0      	movs	r0, #160	@ 0xa0
 80048e2:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e4:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 80048e6:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80048e8:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ea:	2370      	movs	r3, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80048ec:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ee:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048f0:	3b09      	subs	r3, #9
 80048f2:	e7da      	b.n	80048aa <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 80048f4:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80048f6:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80048f8:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048fa:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048fc:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048fe:	4387      	bics	r7, r0
 8004900:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004902:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004904:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004906:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004908:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800490a:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 800490c:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800490e:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004910:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8004912:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8004914:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004916:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004918:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800491a:	3b29      	subs	r3, #41	@ 0x29
 800491c:	e7c5      	b.n	80048aa <HAL_TIM_ConfigClockSource+0xae>
 800491e:	46c0      	nop			@ (mov r8, r8)
 8004920:	ffff0088 	.word	0xffff0088
 8004924:	ffff0fff 	.word	0xffff0fff

08004928 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004928:	230f      	movs	r3, #15
{
 800492a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800492c:	2404      	movs	r4, #4
 800492e:	4019      	ands	r1, r3
 8004930:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004932:	408a      	lsls	r2, r1
  TIMx->CCER &=  ~tmp;
 8004934:	6a03      	ldr	r3, [r0, #32]
 8004936:	43a3      	bics	r3, r4
 8004938:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800493a:	6a03      	ldr	r3, [r0, #32]
 800493c:	431a      	orrs	r2, r3
 800493e:	6202      	str	r2, [r0, #32]
}
 8004940:	bd10      	pop	{r4, pc}
	...

08004944 <HAL_TIMEx_OCN_Start>:
{
 8004944:	0003      	movs	r3, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004946:	0002      	movs	r2, r0
{
 8004948:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800494a:	2900      	cmp	r1, #0
 800494c:	d105      	bne.n	800495a <HAL_TIMEx_OCN_Start+0x16>
 800494e:	3242      	adds	r2, #66	@ 0x42
    return HAL_ERROR;
 8004950:	2001      	movs	r0, #1
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004952:	7814      	ldrb	r4, [r2, #0]
 8004954:	4284      	cmp	r4, r0
 8004956:	d00a      	beq.n	800496e <HAL_TIMEx_OCN_Start+0x2a>
}
 8004958:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800495a:	2904      	cmp	r1, #4
 800495c:	d101      	bne.n	8004962 <HAL_TIMEx_OCN_Start+0x1e>
 800495e:	3243      	adds	r2, #67	@ 0x43
 8004960:	e7f6      	b.n	8004950 <HAL_TIMEx_OCN_Start+0xc>
 8004962:	2908      	cmp	r1, #8
 8004964:	d101      	bne.n	800496a <HAL_TIMEx_OCN_Start+0x26>
 8004966:	3244      	adds	r2, #68	@ 0x44
 8004968:	e7f2      	b.n	8004950 <HAL_TIMEx_OCN_Start+0xc>
 800496a:	3245      	adds	r2, #69	@ 0x45
 800496c:	e7f0      	b.n	8004950 <HAL_TIMEx_OCN_Start+0xc>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800496e:	2002      	movs	r0, #2
 8004970:	7010      	strb	r0, [r2, #0]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004972:	681c      	ldr	r4, [r3, #0]
 8004974:	2204      	movs	r2, #4
 8004976:	0020      	movs	r0, r4
 8004978:	f7ff ffd6 	bl	8004928 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	4313      	orrs	r3, r2
 8004984:	6463      	str	r3, [r4, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004986:	4b0a      	ldr	r3, [pc, #40]	@ (80049b0 <HAL_TIMEx_OCN_Start+0x6c>)
 8004988:	429c      	cmp	r4, r3
 800498a:	d005      	beq.n	8004998 <HAL_TIMEx_OCN_Start+0x54>
 800498c:	4b09      	ldr	r3, [pc, #36]	@ (80049b4 <HAL_TIMEx_OCN_Start+0x70>)
 800498e:	429c      	cmp	r4, r3
 8004990:	d002      	beq.n	8004998 <HAL_TIMEx_OCN_Start+0x54>
 8004992:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <HAL_TIMEx_OCN_Start+0x74>)
 8004994:	429c      	cmp	r4, r3
 8004996:	d104      	bne.n	80049a2 <HAL_TIMEx_OCN_Start+0x5e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004998:	2207      	movs	r2, #7
 800499a:	68a3      	ldr	r3, [r4, #8]
 800499c:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499e:	2b06      	cmp	r3, #6
 80049a0:	d003      	beq.n	80049aa <HAL_TIMEx_OCN_Start+0x66>
      __HAL_TIM_ENABLE(htim);
 80049a2:	2301      	movs	r3, #1
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 80049aa:	2000      	movs	r0, #0
 80049ac:	e7d4      	b.n	8004958 <HAL_TIMEx_OCN_Start+0x14>
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	40012c00 	.word	0x40012c00
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40014000 	.word	0x40014000

080049bc <HAL_TIMEx_OCN_Stop>:
{
 80049bc:	b570      	push	{r4, r5, r6, lr}
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80049be:	6805      	ldr	r5, [r0, #0]
 80049c0:	2200      	movs	r2, #0
{
 80049c2:	0004      	movs	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80049c4:	0028      	movs	r0, r5
{
 80049c6:	000e      	movs	r6, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80049c8:	f7ff ffae 	bl	8004928 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 80049cc:	6a2b      	ldr	r3, [r5, #32]
 80049ce:	4a13      	ldr	r2, [pc, #76]	@ (8004a1c <HAL_TIMEx_OCN_Stop+0x60>)
 80049d0:	4213      	tst	r3, r2
 80049d2:	d107      	bne.n	80049e4 <HAL_TIMEx_OCN_Stop+0x28>
 80049d4:	6a29      	ldr	r1, [r5, #32]
 80049d6:	4b12      	ldr	r3, [pc, #72]	@ (8004a20 <HAL_TIMEx_OCN_Stop+0x64>)
 80049d8:	4219      	tst	r1, r3
 80049da:	d103      	bne.n	80049e4 <HAL_TIMEx_OCN_Stop+0x28>
 80049dc:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80049de:	4911      	ldr	r1, [pc, #68]	@ (8004a24 <HAL_TIMEx_OCN_Stop+0x68>)
 80049e0:	400b      	ands	r3, r1
 80049e2:	646b      	str	r3, [r5, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 80049e4:	6a2b      	ldr	r3, [r5, #32]
 80049e6:	4213      	tst	r3, r2
 80049e8:	d107      	bne.n	80049fa <HAL_TIMEx_OCN_Stop+0x3e>
 80049ea:	6a2a      	ldr	r2, [r5, #32]
 80049ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004a20 <HAL_TIMEx_OCN_Stop+0x64>)
 80049ee:	421a      	tst	r2, r3
 80049f0:	d103      	bne.n	80049fa <HAL_TIMEx_OCN_Stop+0x3e>
 80049f2:	2201      	movs	r2, #1
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	4393      	bics	r3, r2
 80049f8:	602b      	str	r3, [r5, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	2301      	movs	r3, #1
 80049fc:	2e00      	cmp	r6, #0
 80049fe:	d103      	bne.n	8004a08 <HAL_TIMEx_OCN_Stop+0x4c>
 8004a00:	3442      	adds	r4, #66	@ 0x42
}
 8004a02:	2000      	movs	r0, #0
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	7023      	strb	r3, [r4, #0]
}
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	2e04      	cmp	r6, #4
 8004a0a:	d101      	bne.n	8004a10 <HAL_TIMEx_OCN_Stop+0x54>
 8004a0c:	3443      	adds	r4, #67	@ 0x43
 8004a0e:	e7f8      	b.n	8004a02 <HAL_TIMEx_OCN_Stop+0x46>
 8004a10:	2e08      	cmp	r6, #8
 8004a12:	d101      	bne.n	8004a18 <HAL_TIMEx_OCN_Stop+0x5c>
 8004a14:	3444      	adds	r4, #68	@ 0x44
 8004a16:	e7f4      	b.n	8004a02 <HAL_TIMEx_OCN_Stop+0x46>
 8004a18:	3445      	adds	r4, #69	@ 0x45
 8004a1a:	e7f2      	b.n	8004a02 <HAL_TIMEx_OCN_Stop+0x46>
 8004a1c:	00001111 	.word	0x00001111
 8004a20:	00000444 	.word	0x00000444
 8004a24:	ffff7fff 	.word	0xffff7fff

08004a28 <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004a28:	b510      	push	{r4, lr}
 8004a2a:	f7ff ff8b 	bl	8004944 <HAL_TIMEx_OCN_Start>
 8004a2e:	bd10      	pop	{r4, pc}

08004a30 <HAL_TIMEx_PWMN_Stop>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004a30:	b510      	push	{r4, lr}
 8004a32:	f7ff ffc3 	bl	80049bc <HAL_TIMEx_OCN_Stop>
 8004a36:	bd10      	pop	{r4, pc}

08004a38 <HAL_TIMEx_MasterConfigSynchronization>:
{
 8004a38:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004a3a:	0004      	movs	r4, r0
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	343c      	adds	r4, #60	@ 0x3c
 8004a40:	7825      	ldrb	r5, [r4, #0]
{
 8004a42:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004a44:	0010      	movs	r0, r2
 8004a46:	2d01      	cmp	r5, #1
 8004a48:	d01c      	beq.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4a:	001d      	movs	r5, r3
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a4c:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4e:	353d      	adds	r5, #61	@ 0x3d
 8004a50:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004a56:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a58:	43b0      	bics	r0, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a5a:	680e      	ldr	r6, [r1, #0]
 8004a5c:	4330      	orrs	r0, r6
  htim->Instance->CR2 = tmpcr2;
 8004a5e:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a60:	4809      	ldr	r0, [pc, #36]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004a62:	4283      	cmp	r3, r0
 8004a64:	d005      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004a66:	4809      	ldr	r0, [pc, #36]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004a68:	4283      	cmp	r3, r0
 8004a6a:	d002      	beq.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004a6c:	4808      	ldr	r0, [pc, #32]	@ (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004a6e:	4283      	cmp	r3, r0
 8004a70:	d104      	bne.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x44>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a72:	2080      	movs	r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a74:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a76:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a78:	430a      	orrs	r2, r1
    htim->Instance->SMCR = tmpsmcr;
 8004a7a:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004a7e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004a80:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004a82:	7020      	strb	r0, [r4, #0]
}
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40014000 	.word	0x40014000

08004a94 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8004a94:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8004a96:	0004      	movs	r4, r0
 8004a98:	343c      	adds	r4, #60	@ 0x3c
 8004a9a:	7823      	ldrb	r3, [r4, #0]
{
 8004a9c:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8004a9e:	2002      	movs	r0, #2
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d01c      	beq.n	8004ade <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aa4:	68cb      	ldr	r3, [r1, #12]
 8004aa6:	480e      	ldr	r0, [pc, #56]	@ (8004ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  htim->Instance->BDTR = tmpbdtr;
 8004aa8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aaa:	4003      	ands	r3, r0
 8004aac:	6888      	ldr	r0, [r1, #8]
 8004aae:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ab0:	480c      	ldr	r0, [pc, #48]	@ (8004ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8004ab2:	4003      	ands	r3, r0
 8004ab4:	6848      	ldr	r0, [r1, #4]
 8004ab6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ab8:	480b      	ldr	r0, [pc, #44]	@ (8004ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8004aba:	4003      	ands	r3, r0
 8004abc:	6808      	ldr	r0, [r1, #0]
 8004abe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ac0:	480a      	ldr	r0, [pc, #40]	@ (8004aec <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8004ac2:	4003      	ands	r3, r0
 8004ac4:	6908      	ldr	r0, [r1, #16]
 8004ac6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ac8:	4809      	ldr	r0, [pc, #36]	@ (8004af0 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8004aca:	4003      	ands	r3, r0
 8004acc:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ace:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ad0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ad2:	4808      	ldr	r0, [pc, #32]	@ (8004af4 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8004ad4:	4003      	ands	r3, r0
  __HAL_UNLOCK(htim);
 8004ad6:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ad8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8004ada:	6453      	str	r3, [r2, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8004adc:	7020      	strb	r0, [r4, #0]
}
 8004ade:	bd10      	pop	{r4, pc}
 8004ae0:	fffffcff 	.word	0xfffffcff
 8004ae4:	fffffbff 	.word	0xfffffbff
 8004ae8:	fffff7ff 	.word	0xfffff7ff
 8004aec:	ffffefff 	.word	0xffffefff
 8004af0:	ffffdfff 	.word	0xffffdfff
 8004af4:	ffffbfff 	.word	0xffffbfff

08004af8 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004af8:	1d82      	adds	r2, r0, #6
{
 8004afa:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 8004afc:	2000      	movs	r0, #0
 8004afe:	87d0      	strh	r0, [r2, #62]	@ 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004b00:	4a01      	ldr	r2, [pc, #4]	@ (8004b08 <USB_EnableGlobalInt+0x10>)
 8004b02:	3302      	adds	r3, #2
 8004b04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
}
 8004b06:	4770      	bx	lr
 8004b08:	ffffbf80 	.word	0xffffbf80

08004b0c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b0c:	3002      	adds	r0, #2
 8004b0e:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8004b10:	4a02      	ldr	r2, [pc, #8]	@ (8004b1c <USB_DisableGlobalInt+0x10>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	87c3      	strh	r3, [r0, #62]	@ 0x3e

  return HAL_OK;
}
 8004b16:	2000      	movs	r0, #0
 8004b18:	4770      	bx	lr
 8004b1a:	46c0      	nop			@ (mov r8, r8)
 8004b1c:	0000407f 	.word	0x0000407f

08004b20 <USB_DevInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b20:	1c82      	adds	r2, r0, #2
{
 8004b22:	0003      	movs	r3, r0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b24:	2101      	movs	r1, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b26:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b28:	87d1      	strh	r1, [r2, #62]	@ 0x3e
{
 8004b2a:	b082      	sub	sp, #8
  USBx->CNTR = 0U;
 8004b2c:	87d0      	strh	r0, [r2, #62]	@ 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b2e:	1d9a      	adds	r2, r3, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b30:	3350      	adds	r3, #80	@ 0x50
  USBx->ISTR = 0U;
 8004b32:	87d0      	strh	r0, [r2, #62]	@ 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b34:	8018      	strh	r0, [r3, #0]

  return HAL_OK;
}
 8004b36:	b002      	add	sp, #8
 8004b38:	4770      	bx	lr
	...

08004b3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b3e:	780e      	ldrb	r6, [r1, #0]
 8004b40:	4a7a      	ldr	r2, [pc, #488]	@ (8004d2c <USB_ActivateEndpoint+0x1f0>)
 8004b42:	00b3      	lsls	r3, r6, #2
 8004b44:	18c3      	adds	r3, r0, r3
 8004b46:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004b48:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b4a:	4014      	ands	r4, r2
  switch (ep->type)
 8004b4c:	2201      	movs	r2, #1
{
 8004b4e:	0005      	movs	r5, r0
  switch (ep->type)
 8004b50:	9200      	str	r2, [sp, #0]
 8004b52:	2f03      	cmp	r7, #3
 8004b54:	d808      	bhi.n	8004b68 <USB_ActivateEndpoint+0x2c>
 8004b56:	0038      	movs	r0, r7
 8004b58:	f7fb fae8 	bl	800012c <__gnu_thumb1_case_uqi>
 8004b5c:	3c3f4202 	.word	0x3c3f4202
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004b60:	2280      	movs	r2, #128	@ 0x80
 8004b62:	0092      	lsls	r2, r2, #2
 8004b64:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8004b66:	9700      	str	r7, [sp, #0]
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004b68:	4a71      	ldr	r2, [pc, #452]	@ (8004d30 <USB_ActivateEndpoint+0x1f4>)
 8004b6a:	4314      	orrs	r4, r2
 8004b6c:	b2a4      	uxth	r4, r4
 8004b6e:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004b70:	8818      	ldrh	r0, [r3, #0]
 8004b72:	4c70      	ldr	r4, [pc, #448]	@ (8004d34 <USB_ActivateEndpoint+0x1f8>)
 8004b74:	4020      	ands	r0, r4
 8004b76:	4330      	orrs	r0, r6
 8004b78:	4310      	orrs	r0, r2
 8004b7a:	b280      	uxth	r0, r0
 8004b7c:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b7e:	00f0      	lsls	r0, r6, #3
 8004b80:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 8004b82:	7b08      	ldrb	r0, [r1, #12]
 8004b84:	44ac      	add	ip, r5
 8004b86:	3550      	adds	r5, #80	@ 0x50
 8004b88:	9501      	str	r5, [sp, #4]
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d000      	beq.n	8004b90 <USB_ActivateEndpoint+0x54>
 8004b8e:	e06b      	b.n	8004c68 <USB_ActivateEndpoint+0x12c>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b90:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 8004b92:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b94:	086d      	lsrs	r5, r5, #1
 8004b96:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	d023      	beq.n	8004be4 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b9c:	2080      	movs	r0, #128	@ 0x80
 8004b9e:	9901      	ldr	r1, [sp, #4]
 8004ba0:	00c0      	lsls	r0, r0, #3
 8004ba2:	8809      	ldrh	r1, [r1, #0]
 8004ba4:	4461      	add	r1, ip
 8004ba6:	1809      	adds	r1, r1, r0
 8004ba8:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004baa:	8819      	ldrh	r1, [r3, #0]
 8004bac:	0649      	lsls	r1, r1, #25
 8004bae:	d504      	bpl.n	8004bba <USB_ActivateEndpoint+0x7e>
 8004bb0:	8819      	ldrh	r1, [r3, #0]
 8004bb2:	4021      	ands	r1, r4
 8004bb4:	4c60      	ldr	r4, [pc, #384]	@ (8004d38 <USB_ActivateEndpoint+0x1fc>)
 8004bb6:	4321      	orrs	r1, r4
 8004bb8:	8019      	strh	r1, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bba:	4d60      	ldr	r5, [pc, #384]	@ (8004d3c <USB_ActivateEndpoint+0x200>)
 8004bbc:	2f01      	cmp	r7, #1
 8004bbe:	d100      	bne.n	8004bc2 <USB_ActivateEndpoint+0x86>
 8004bc0:	e0ae      	b.n	8004d20 <USB_ActivateEndpoint+0x1e4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004bc2:	2120      	movs	r1, #32
 8004bc4:	881c      	ldrh	r4, [r3, #0]
 8004bc6:	402c      	ands	r4, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004bc8:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004bce:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bd0:	801a      	strh	r2, [r3, #0]
}
 8004bd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8004bd4:	22c0      	movs	r2, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004bd6:	00d2      	lsls	r2, r2, #3
 8004bd8:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8004bda:	2200      	movs	r2, #0
 8004bdc:	9200      	str	r2, [sp, #0]
      break;
 8004bde:	e7c3      	b.n	8004b68 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004be0:	2280      	movs	r2, #128	@ 0x80
 8004be2:	e7f8      	b.n	8004bd6 <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004be4:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004be6:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004be8:	8807      	ldrh	r7, [r0, #0]
 8004bea:	4855      	ldr	r0, [pc, #340]	@ (8004d40 <USB_ActivateEndpoint+0x204>)
 8004bec:	4467      	add	r7, ip
 8004bee:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004bf0:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bf2:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004bf4:	8805      	ldrh	r5, [r0, #0]
 8004bf6:	4853      	ldr	r0, [pc, #332]	@ (8004d44 <USB_ActivateEndpoint+0x208>)
 8004bf8:	4465      	add	r5, ip
 8004bfa:	182d      	adds	r5, r5, r0
 8004bfc:	882f      	ldrh	r7, [r5, #0]
 8004bfe:	05bf      	lsls	r7, r7, #22
 8004c00:	0dbf      	lsrs	r7, r7, #22
 8004c02:	802f      	strh	r7, [r5, #0]
 8004c04:	2900      	cmp	r1, #0
 8004c06:	d115      	bne.n	8004c34 <USB_ActivateEndpoint+0xf8>
 8004c08:	2780      	movs	r7, #128	@ 0x80
 8004c0a:	8829      	ldrh	r1, [r5, #0]
 8004c0c:	023f      	lsls	r7, r7, #8
 8004c0e:	4339      	orrs	r1, r7
 8004c10:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c12:	8819      	ldrh	r1, [r3, #0]
 8004c14:	0449      	lsls	r1, r1, #17
 8004c16:	d504      	bpl.n	8004c22 <USB_ActivateEndpoint+0xe6>
 8004c18:	8819      	ldrh	r1, [r3, #0]
 8004c1a:	4021      	ands	r1, r4
 8004c1c:	4c4a      	ldr	r4, [pc, #296]	@ (8004d48 <USB_ActivateEndpoint+0x20c>)
 8004c1e:	4321      	orrs	r1, r4
 8004c20:	8019      	strh	r1, [r3, #0]
      if (ep->num == 0U)
 8004c22:	494a      	ldr	r1, [pc, #296]	@ (8004d4c <USB_ActivateEndpoint+0x210>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c24:	881c      	ldrh	r4, [r3, #0]
 8004c26:	400c      	ands	r4, r1
 8004c28:	21c0      	movs	r1, #192	@ 0xc0
      if (ep->num == 0U)
 8004c2a:	2e00      	cmp	r6, #0
 8004c2c:	d000      	beq.n	8004c30 <USB_ActivateEndpoint+0xf4>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004c2e:	2180      	movs	r1, #128	@ 0x80
 8004c30:	0189      	lsls	r1, r1, #6
 8004c32:	e7c9      	b.n	8004bc8 <USB_ActivateEndpoint+0x8c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c34:	293e      	cmp	r1, #62	@ 0x3e
 8004c36:	d808      	bhi.n	8004c4a <USB_ActivateEndpoint+0x10e>
 8004c38:	2001      	movs	r0, #1
 8004c3a:	084f      	lsrs	r7, r1, #1
 8004c3c:	4001      	ands	r1, r0
 8004c3e:	187f      	adds	r7, r7, r1
 8004c40:	8829      	ldrh	r1, [r5, #0]
 8004c42:	02bf      	lsls	r7, r7, #10
 8004c44:	4339      	orrs	r1, r7
 8004c46:	b289      	uxth	r1, r1
 8004c48:	e7e2      	b.n	8004c10 <USB_ActivateEndpoint+0xd4>
 8004c4a:	201f      	movs	r0, #31
 8004c4c:	094f      	lsrs	r7, r1, #5
 8004c4e:	4001      	ands	r1, r0
 8004c50:	0008      	movs	r0, r1
 8004c52:	4241      	negs	r1, r0
 8004c54:	4141      	adcs	r1, r0
 8004c56:	1a7f      	subs	r7, r7, r1
 8004c58:	8829      	ldrh	r1, [r5, #0]
 8004c5a:	02bf      	lsls	r7, r7, #10
 8004c5c:	4339      	orrs	r1, r7
 8004c5e:	4f3c      	ldr	r7, [pc, #240]	@ (8004d50 <USB_ActivateEndpoint+0x214>)
 8004c60:	430f      	orrs	r7, r1
 8004c62:	b2bf      	uxth	r7, r7
 8004c64:	802f      	strh	r7, [r5, #0]
 8004c66:	e7d4      	b.n	8004c12 <USB_ActivateEndpoint+0xd6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c68:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 8004c6a:	2f02      	cmp	r7, #2
 8004c6c:	d13a      	bne.n	8004ce4 <USB_ActivateEndpoint+0x1a8>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c6e:	4e39      	ldr	r6, [pc, #228]	@ (8004d54 <USB_ActivateEndpoint+0x218>)
 8004c70:	4025      	ands	r5, r4
 8004c72:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c74:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004c76:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c78:	8805      	ldrh	r5, [r0, #0]
 8004c7a:	2080      	movs	r0, #128	@ 0x80
 8004c7c:	890e      	ldrh	r6, [r1, #8]
 8004c7e:	4465      	add	r5, ip
 8004c80:	00c0      	lsls	r0, r0, #3
 8004c82:	0876      	lsrs	r6, r6, #1
 8004c84:	182d      	adds	r5, r5, r0
 8004c86:	0076      	lsls	r6, r6, #1
 8004c88:	9801      	ldr	r0, [sp, #4]
 8004c8a:	802e      	strh	r6, [r5, #0]
 8004c8c:	8805      	ldrh	r5, [r0, #0]
 8004c8e:	894e      	ldrh	r6, [r1, #10]
 8004c90:	482b      	ldr	r0, [pc, #172]	@ (8004d40 <USB_ActivateEndpoint+0x204>)
 8004c92:	4465      	add	r5, ip
 8004c94:	0876      	lsrs	r6, r6, #1
 8004c96:	182d      	adds	r5, r5, r0
 8004c98:	0076      	lsls	r6, r6, #1
 8004c9a:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 8004c9c:	7849      	ldrb	r1, [r1, #1]
 8004c9e:	4e27      	ldr	r6, [pc, #156]	@ (8004d3c <USB_ActivateEndpoint+0x200>)
 8004ca0:	468c      	mov	ip, r1
 8004ca2:	2180      	movs	r1, #128	@ 0x80
 8004ca4:	4660      	mov	r0, ip
 8004ca6:	4d29      	ldr	r5, [pc, #164]	@ (8004d4c <USB_ActivateEndpoint+0x210>)
 8004ca8:	01c9      	lsls	r1, r1, #7
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d11f      	bne.n	8004cee <USB_ActivateEndpoint+0x1b2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cae:	881f      	ldrh	r7, [r3, #0]
 8004cb0:	420f      	tst	r7, r1
 8004cb2:	d004      	beq.n	8004cbe <USB_ActivateEndpoint+0x182>
 8004cb4:	8819      	ldrh	r1, [r3, #0]
 8004cb6:	4f24      	ldr	r7, [pc, #144]	@ (8004d48 <USB_ActivateEndpoint+0x20c>)
 8004cb8:	4021      	ands	r1, r4
 8004cba:	4339      	orrs	r1, r7
 8004cbc:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cbe:	8819      	ldrh	r1, [r3, #0]
 8004cc0:	0649      	lsls	r1, r1, #25
 8004cc2:	d504      	bpl.n	8004cce <USB_ActivateEndpoint+0x192>
 8004cc4:	8819      	ldrh	r1, [r3, #0]
 8004cc6:	4021      	ands	r1, r4
 8004cc8:	4c1b      	ldr	r4, [pc, #108]	@ (8004d38 <USB_ActivateEndpoint+0x1fc>)
 8004cca:	4321      	orrs	r1, r4
 8004ccc:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004cce:	21c0      	movs	r1, #192	@ 0xc0
 8004cd0:	881c      	ldrh	r4, [r3, #0]
 8004cd2:	0189      	lsls	r1, r1, #6
 8004cd4:	402c      	ands	r4, r5
 8004cd6:	4061      	eors	r1, r4
 8004cd8:	4311      	orrs	r1, r2
 8004cda:	b289      	uxth	r1, r1
 8004cdc:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cde:	8819      	ldrh	r1, [r3, #0]
 8004ce0:	4031      	ands	r1, r6
 8004ce2:	e772      	b.n	8004bca <USB_ActivateEndpoint+0x8e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004ce4:	4e1c      	ldr	r6, [pc, #112]	@ (8004d58 <USB_ActivateEndpoint+0x21c>)
 8004ce6:	4035      	ands	r5, r6
 8004ce8:	4315      	orrs	r5, r2
 8004cea:	b2ad      	uxth	r5, r5
 8004cec:	e7c2      	b.n	8004c74 <USB_ActivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cee:	8818      	ldrh	r0, [r3, #0]
 8004cf0:	4208      	tst	r0, r1
 8004cf2:	d004      	beq.n	8004cfe <USB_ActivateEndpoint+0x1c2>
 8004cf4:	8819      	ldrh	r1, [r3, #0]
 8004cf6:	4814      	ldr	r0, [pc, #80]	@ (8004d48 <USB_ActivateEndpoint+0x20c>)
 8004cf8:	4021      	ands	r1, r4
 8004cfa:	4301      	orrs	r1, r0
 8004cfc:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cfe:	8819      	ldrh	r1, [r3, #0]
 8004d00:	0649      	lsls	r1, r1, #25
 8004d02:	d504      	bpl.n	8004d0e <USB_ActivateEndpoint+0x1d2>
 8004d04:	8819      	ldrh	r1, [r3, #0]
 8004d06:	4021      	ands	r1, r4
 8004d08:	4c0b      	ldr	r4, [pc, #44]	@ (8004d38 <USB_ActivateEndpoint+0x1fc>)
 8004d0a:	4321      	orrs	r1, r4
 8004d0c:	8019      	strh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8004d0e:	2f01      	cmp	r7, #1
 8004d10:	d009      	beq.n	8004d26 <USB_ActivateEndpoint+0x1ea>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d12:	2120      	movs	r1, #32
 8004d14:	881c      	ldrh	r4, [r3, #0]
 8004d16:	4034      	ands	r4, r6
 8004d18:	4061      	eors	r1, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d1a:	4311      	orrs	r1, r2
 8004d1c:	b289      	uxth	r1, r1
 8004d1e:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d20:	8819      	ldrh	r1, [r3, #0]
 8004d22:	4029      	ands	r1, r5
 8004d24:	e751      	b.n	8004bca <USB_ActivateEndpoint+0x8e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d26:	8819      	ldrh	r1, [r3, #0]
 8004d28:	4031      	ands	r1, r6
 8004d2a:	e7f6      	b.n	8004d1a <USB_ActivateEndpoint+0x1de>
 8004d2c:	ffff898f 	.word	0xffff898f
 8004d30:	ffff8080 	.word	0xffff8080
 8004d34:	ffff8f8f 	.word	0xffff8f8f
 8004d38:	000080c0 	.word	0x000080c0
 8004d3c:	ffff8fbf 	.word	0xffff8fbf
 8004d40:	00000404 	.word	0x00000404
 8004d44:	00000406 	.word	0x00000406
 8004d48:	0000c080 	.word	0x0000c080
 8004d4c:	ffffbf8f 	.word	0xffffbf8f
 8004d50:	ffff8000 	.word	0xffff8000
 8004d54:	00008180 	.word	0x00008180
 8004d58:	ffff8e8f 	.word	0xffff8e8f

08004d5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d5e:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8004d60:	784a      	ldrb	r2, [r1, #1]
  if (ep->doublebuffer == 0U)
 8004d62:	7b09      	ldrb	r1, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	18c0      	adds	r0, r0, r3
 8004d68:	4b31      	ldr	r3, [pc, #196]	@ (8004e30 <USB_DeactivateEndpoint+0xd4>)
  if (ep->doublebuffer == 0U)
 8004d6a:	2900      	cmp	r1, #0
 8004d6c:	d11a      	bne.n	8004da4 <USB_DeactivateEndpoint+0x48>
    if (ep->is_in != 0U)
 8004d6e:	2a00      	cmp	r2, #0
 8004d70:	d00c      	beq.n	8004d8c <USB_DeactivateEndpoint+0x30>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d72:	8802      	ldrh	r2, [r0, #0]
 8004d74:	0652      	lsls	r2, r2, #25
 8004d76:	d505      	bpl.n	8004d84 <USB_DeactivateEndpoint+0x28>
 8004d78:	8802      	ldrh	r2, [r0, #0]
 8004d7a:	492e      	ldr	r1, [pc, #184]	@ (8004e34 <USB_DeactivateEndpoint+0xd8>)
 8004d7c:	400a      	ands	r2, r1
 8004d7e:	492e      	ldr	r1, [pc, #184]	@ (8004e38 <USB_DeactivateEndpoint+0xdc>)
 8004d80:	430a      	orrs	r2, r1
 8004d82:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d84:	8802      	ldrh	r2, [r0, #0]
 8004d86:	492d      	ldr	r1, [pc, #180]	@ (8004e3c <USB_DeactivateEndpoint+0xe0>)
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d88:	400a      	ands	r2, r1
 8004d8a:	e02f      	b.n	8004dec <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d8c:	8802      	ldrh	r2, [r0, #0]
 8004d8e:	0452      	lsls	r2, r2, #17
 8004d90:	d505      	bpl.n	8004d9e <USB_DeactivateEndpoint+0x42>
 8004d92:	8802      	ldrh	r2, [r0, #0]
 8004d94:	4927      	ldr	r1, [pc, #156]	@ (8004e34 <USB_DeactivateEndpoint+0xd8>)
 8004d96:	400a      	ands	r2, r1
 8004d98:	4929      	ldr	r1, [pc, #164]	@ (8004e40 <USB_DeactivateEndpoint+0xe4>)
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d9e:	8802      	ldrh	r2, [r0, #0]
 8004da0:	4928      	ldr	r1, [pc, #160]	@ (8004e44 <USB_DeactivateEndpoint+0xe8>)
 8004da2:	e7f1      	b.n	8004d88 <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 8004da4:	2780      	movs	r7, #128	@ 0x80
 8004da6:	4e23      	ldr	r6, [pc, #140]	@ (8004e34 <USB_DeactivateEndpoint+0xd8>)
 8004da8:	4d24      	ldr	r5, [pc, #144]	@ (8004e3c <USB_DeactivateEndpoint+0xe0>)
 8004daa:	4926      	ldr	r1, [pc, #152]	@ (8004e44 <USB_DeactivateEndpoint+0xe8>)
 8004dac:	01ff      	lsls	r7, r7, #7
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d121      	bne.n	8004df6 <USB_DeactivateEndpoint+0x9a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004db2:	8802      	ldrh	r2, [r0, #0]
 8004db4:	423a      	tst	r2, r7
 8004db6:	d004      	beq.n	8004dc2 <USB_DeactivateEndpoint+0x66>
 8004db8:	8802      	ldrh	r2, [r0, #0]
 8004dba:	4c21      	ldr	r4, [pc, #132]	@ (8004e40 <USB_DeactivateEndpoint+0xe4>)
 8004dbc:	4032      	ands	r2, r6
 8004dbe:	4322      	orrs	r2, r4
 8004dc0:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dc2:	8802      	ldrh	r2, [r0, #0]
 8004dc4:	4c20      	ldr	r4, [pc, #128]	@ (8004e48 <USB_DeactivateEndpoint+0xec>)
 8004dc6:	0652      	lsls	r2, r2, #25
 8004dc8:	d504      	bpl.n	8004dd4 <USB_DeactivateEndpoint+0x78>
 8004dca:	8802      	ldrh	r2, [r0, #0]
 8004dcc:	4032      	ands	r2, r6
 8004dce:	4322      	orrs	r2, r4
 8004dd0:	b292      	uxth	r2, r2
 8004dd2:	8002      	strh	r2, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8004dd4:	8802      	ldrh	r2, [r0, #0]
 8004dd6:	4032      	ands	r2, r6
 8004dd8:	4314      	orrs	r4, r2
 8004dda:	b2a4      	uxth	r4, r4
 8004ddc:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dde:	8802      	ldrh	r2, [r0, #0]
 8004de0:	400a      	ands	r2, r1
 8004de2:	431a      	orrs	r2, r3
 8004de4:	b292      	uxth	r2, r2
 8004de6:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004de8:	8802      	ldrh	r2, [r0, #0]
 8004dea:	402a      	ands	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dec:	4313      	orrs	r3, r2
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004df2:	2000      	movs	r0, #0
 8004df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004df6:	8802      	ldrh	r2, [r0, #0]
 8004df8:	4c14      	ldr	r4, [pc, #80]	@ (8004e4c <USB_DeactivateEndpoint+0xf0>)
 8004dfa:	423a      	tst	r2, r7
 8004dfc:	d004      	beq.n	8004e08 <USB_DeactivateEndpoint+0xac>
 8004dfe:	8802      	ldrh	r2, [r0, #0]
 8004e00:	4032      	ands	r2, r6
 8004e02:	4322      	orrs	r2, r4
 8004e04:	b292      	uxth	r2, r2
 8004e06:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e08:	8802      	ldrh	r2, [r0, #0]
 8004e0a:	0652      	lsls	r2, r2, #25
 8004e0c:	d504      	bpl.n	8004e18 <USB_DeactivateEndpoint+0xbc>
 8004e0e:	8802      	ldrh	r2, [r0, #0]
 8004e10:	4f09      	ldr	r7, [pc, #36]	@ (8004e38 <USB_DeactivateEndpoint+0xdc>)
 8004e12:	4032      	ands	r2, r6
 8004e14:	433a      	orrs	r2, r7
 8004e16:	8002      	strh	r2, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e18:	8802      	ldrh	r2, [r0, #0]
 8004e1a:	4032      	ands	r2, r6
 8004e1c:	4314      	orrs	r4, r2
 8004e1e:	b2a4      	uxth	r4, r4
 8004e20:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e22:	8802      	ldrh	r2, [r0, #0]
 8004e24:	402a      	ands	r2, r5
 8004e26:	431a      	orrs	r2, r3
 8004e28:	b292      	uxth	r2, r2
 8004e2a:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e2c:	8802      	ldrh	r2, [r0, #0]
 8004e2e:	e7ab      	b.n	8004d88 <USB_DeactivateEndpoint+0x2c>
 8004e30:	ffff8080 	.word	0xffff8080
 8004e34:	ffff8f8f 	.word	0xffff8f8f
 8004e38:	000080c0 	.word	0x000080c0
 8004e3c:	ffff8fbf 	.word	0xffff8fbf
 8004e40:	0000c080 	.word	0x0000c080
 8004e44:	ffffbf8f 	.word	0xffffbf8f
 8004e48:	ffff80c0 	.word	0xffff80c0
 8004e4c:	ffffc080 	.word	0xffffc080

08004e50 <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e50:	780b      	ldrb	r3, [r1, #0]
 8004e52:	4a0c      	ldr	r2, [pc, #48]	@ (8004e84 <USB_EPSetStall+0x34>)
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8004e58:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e5a:	8801      	ldrh	r1, [r0, #0]
  if (ep->is_in != 0U)
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e60:	4b09      	ldr	r3, [pc, #36]	@ (8004e88 <USB_EPSetStall+0x38>)
 8004e62:	4019      	ands	r1, r3
 8004e64:	2310      	movs	r3, #16
 8004e66:	404b      	eors	r3, r1
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8004e6e:	2000      	movs	r0, #0
 8004e70:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e72:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <USB_EPSetStall+0x3c>)
 8004e74:	4019      	ands	r1, r3
 8004e76:	2380      	movs	r3, #128	@ 0x80
 8004e78:	015b      	lsls	r3, r3, #5
 8004e7a:	404b      	eors	r3, r1
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	8002      	strh	r2, [r0, #0]
 8004e82:	e7f4      	b.n	8004e6e <USB_EPSetStall+0x1e>
 8004e84:	ffff8080 	.word	0xffff8080
 8004e88:	ffff8fbf 	.word	0xffff8fbf
 8004e8c:	ffffbf8f 	.word	0xffffbf8f

08004e90 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004e90:	7b0b      	ldrb	r3, [r1, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d119      	bne.n	8004eca <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e96:	780b      	ldrb	r3, [r1, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 8004e9c:	784b      	ldrb	r3, [r1, #1]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d015      	beq.n	8004ece <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea2:	8803      	ldrh	r3, [r0, #0]
 8004ea4:	065b      	lsls	r3, r3, #25
 8004ea6:	d505      	bpl.n	8004eb4 <USB_EPClearStall+0x24>
 8004ea8:	8803      	ldrh	r3, [r0, #0]
 8004eaa:	4a10      	ldr	r2, [pc, #64]	@ (8004eec <USB_EPClearStall+0x5c>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	4a10      	ldr	r2, [pc, #64]	@ (8004ef0 <USB_EPClearStall+0x60>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eb4:	78cb      	ldrb	r3, [r1, #3]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d007      	beq.n	8004eca <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004eba:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef4 <USB_EPClearStall+0x64>)
 8004ebc:	8802      	ldrh	r2, [r0, #0]
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ec2:	4053      	eors	r3, r2
 8004ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef8 <USB_EPClearStall+0x68>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8004eca:	2000      	movs	r0, #0
 8004ecc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ece:	8803      	ldrh	r3, [r0, #0]
 8004ed0:	045b      	lsls	r3, r3, #17
 8004ed2:	d505      	bpl.n	8004ee0 <USB_EPClearStall+0x50>
 8004ed4:	8803      	ldrh	r3, [r0, #0]
 8004ed6:	4a05      	ldr	r2, [pc, #20]	@ (8004eec <USB_EPClearStall+0x5c>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	4a08      	ldr	r2, [pc, #32]	@ (8004efc <USB_EPClearStall+0x6c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ee0:	4b07      	ldr	r3, [pc, #28]	@ (8004f00 <USB_EPClearStall+0x70>)
 8004ee2:	8802      	ldrh	r2, [r0, #0]
 8004ee4:	401a      	ands	r2, r3
 8004ee6:	23c0      	movs	r3, #192	@ 0xc0
 8004ee8:	019b      	lsls	r3, r3, #6
 8004eea:	e7ea      	b.n	8004ec2 <USB_EPClearStall+0x32>
 8004eec:	ffff8f8f 	.word	0xffff8f8f
 8004ef0:	000080c0 	.word	0x000080c0
 8004ef4:	ffff8fbf 	.word	0xffff8fbf
 8004ef8:	00008080 	.word	0x00008080
 8004efc:	0000c080 	.word	0x0000c080
 8004f00:	ffffbf8f 	.word	0xffffbf8f

08004f04 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004f04:	2900      	cmp	r1, #0
 8004f06:	d102      	bne.n	8004f0e <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004f08:	2380      	movs	r3, #128	@ 0x80
 8004f0a:	304c      	adds	r0, #76	@ 0x4c
 8004f0c:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8004f0e:	2000      	movs	r0, #0
 8004f10:	4770      	bx	lr

08004f12 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004f12:	2280      	movs	r2, #128	@ 0x80
 8004f14:	3058      	adds	r0, #88	@ 0x58
 8004f16:	8803      	ldrh	r3, [r0, #0]
 8004f18:	0212      	lsls	r2, r2, #8
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8004f1e:	2000      	movs	r0, #0
 8004f20:	4770      	bx	lr

08004f22 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004f22:	3006      	adds	r0, #6
 8004f24:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 8004f26:	b280      	uxth	r0, r0
  return tmpreg;
}
 8004f28:	4770      	bx	lr

08004f2a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004f2a:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f2c:	2480      	movs	r4, #128	@ 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f2e:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f30:	00e4      	lsls	r4, r4, #3
 8004f32:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f34:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f36:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	18cb      	adds	r3, r1, r3
 8004f3c:	1a40      	subs	r0, r0, r1
 8004f3e:	180c      	adds	r4, r1, r0
 8004f40:	428b      	cmp	r3, r1
 8004f42:	d100      	bne.n	8004f46 <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8004f44:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004f46:	784a      	ldrb	r2, [r1, #1]
 8004f48:	780d      	ldrb	r5, [r1, #0]
 8004f4a:	0212      	lsls	r2, r2, #8
 8004f4c:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8004f4e:	8022      	strh	r2, [r4, #0]
    pBuf++;
 8004f50:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8004f52:	e7f4      	b.n	8004f3e <USB_WritePMA+0x14>

08004f54 <USB_EPStartXfer>:
{
 8004f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f56:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8004f58:	7849      	ldrb	r1, [r1, #1]
{
 8004f5a:	0005      	movs	r5, r0
    if (ep->doublebuffer == 0U)
 8004f5c:	7b22      	ldrb	r2, [r4, #12]
{
 8004f5e:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 8004f60:	2901      	cmp	r1, #1
 8004f62:	d000      	beq.n	8004f66 <USB_EPStartXfer+0x12>
 8004f64:	e11b      	b.n	800519e <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	69a7      	ldr	r7, [r4, #24]
 8004f6a:	9302      	str	r3, [sp, #8]
 8004f6c:	429f      	cmp	r7, r3
 8004f6e:	d900      	bls.n	8004f72 <USB_EPStartXfer+0x1e>
 8004f70:	001f      	movs	r7, r3
    if (ep->doublebuffer == 0U)
 8004f72:	002b      	movs	r3, r5
 8004f74:	3350      	adds	r3, #80	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f76:	6961      	ldr	r1, [r4, #20]
 8004f78:	9301      	str	r3, [sp, #4]
    if (ep->doublebuffer == 0U)
 8004f7a:	2a00      	cmp	r2, #0
 8004f7c:	d11d      	bne.n	8004fba <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f7e:	b2bf      	uxth	r7, r7
 8004f80:	003b      	movs	r3, r7
 8004f82:	88e2      	ldrh	r2, [r4, #6]
 8004f84:	0028      	movs	r0, r5
 8004f86:	f7ff ffd0 	bl	8004f2a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f8a:	9b01      	ldr	r3, [sp, #4]
 8004f8c:	4abe      	ldr	r2, [pc, #760]	@ (8005288 <USB_EPStartXfer+0x334>)
 8004f8e:	8819      	ldrh	r1, [r3, #0]
 8004f90:	7823      	ldrb	r3, [r4, #0]
 8004f92:	18aa      	adds	r2, r5, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	1852      	adds	r2, r2, r1
 8004f98:	189b      	adds	r3, r3, r2
 8004f9a:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004f9c:	7823      	ldrb	r3, [r4, #0]
 8004f9e:	4abb      	ldr	r2, [pc, #748]	@ (800528c <USB_EPStartXfer+0x338>)
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	18eb      	adds	r3, r5, r3
 8004fa4:	8819      	ldrh	r1, [r3, #0]
 8004fa6:	4011      	ands	r1, r2
 8004fa8:	2230      	movs	r2, #48	@ 0x30
 8004faa:	404a      	eors	r2, r1
 8004fac:	49b8      	ldr	r1, [pc, #736]	@ (8005290 <USB_EPStartXfer+0x33c>)
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	b292      	uxth	r2, r2
 8004fb2:	801a      	strh	r2, [r3, #0]
  return HAL_OK;
 8004fb4:	2000      	movs	r0, #0
}
 8004fb6:	b007      	add	sp, #28
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fba:	7822      	ldrb	r2, [r4, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 8004fbc:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fbe:	0093      	lsls	r3, r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fc0:	00d2      	lsls	r2, r2, #3
 8004fc2:	9203      	str	r2, [sp, #12]
      if (ep->type == EP_TYPE_BULK)
 8004fc4:	78e0      	ldrb	r0, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fc6:	18eb      	adds	r3, r5, r3
      if (ep->type == EP_TYPE_BULK)
 8004fc8:	2802      	cmp	r0, #2
 8004fca:	d000      	beq.n	8004fce <USB_EPStartXfer+0x7a>
 8004fcc:	e0d1      	b.n	8005172 <USB_EPStartXfer+0x21e>
        if (ep->xfer_len_db > ep->maxpacket)
 8004fce:	9a02      	ldr	r2, [sp, #8]
 8004fd0:	42b2      	cmp	r2, r6
 8004fd2:	d300      	bcc.n	8004fd6 <USB_EPStartXfer+0x82>
 8004fd4:	e0bb      	b.n	800514e <USB_EPStartXfer+0x1fa>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fd6:	881a      	ldrh	r2, [r3, #0]
 8004fd8:	48ae      	ldr	r0, [pc, #696]	@ (8005294 <USB_EPStartXfer+0x340>)
          ep->xfer_len_db -= len;
 8004fda:	1bf6      	subs	r6, r6, r7
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fdc:	4010      	ands	r0, r2
 8004fde:	4aae      	ldr	r2, [pc, #696]	@ (8005298 <USB_EPStartXfer+0x344>)
 8004fe0:	4310      	orrs	r0, r2
 8004fe2:	8018      	strh	r0, [r3, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	2040      	movs	r0, #64	@ 0x40
 8004fe8:	469c      	mov	ip, r3
 8004fea:	4662      	mov	r2, ip
 8004fec:	4002      	ands	r2, r0
 8004fee:	9205      	str	r2, [sp, #20]
 8004ff0:	4662      	mov	r2, ip
            ep->xfer_buff += len;
 8004ff2:	19cb      	adds	r3, r1, r7
 8004ff4:	9304      	str	r3, [sp, #16]
          ep->xfer_len_db -= len;
 8004ff6:	6226      	str	r6, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ff8:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ffa:	4202      	tst	r2, r0
 8004ffc:	d055      	beq.n	80050aa <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ffe:	9a01      	ldr	r2, [sp, #4]
 8005000:	8812      	ldrh	r2, [r2, #0]
 8005002:	4694      	mov	ip, r2
 8005004:	4aa5      	ldr	r2, [pc, #660]	@ (800529c <USB_EPStartXfer+0x348>)
 8005006:	18a8      	adds	r0, r5, r2
 8005008:	9a03      	ldr	r2, [sp, #12]
 800500a:	4460      	add	r0, ip
 800500c:	1882      	adds	r2, r0, r2
 800500e:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005010:	8962      	ldrh	r2, [r4, #10]
 8005012:	0028      	movs	r0, r5
 8005014:	f7ff ff89 	bl	8004f2a <USB_WritePMA>
            ep->xfer_buff += len;
 8005018:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 800501a:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 800501c:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 800501e:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8005020:	42b2      	cmp	r2, r6
 8005022:	d201      	bcs.n	8005028 <USB_EPStartXfer+0xd4>
              ep->xfer_len_db -= len;
 8005024:	1bf3      	subs	r3, r6, r7
 8005026:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005028:	7862      	ldrb	r2, [r4, #1]
 800502a:	6223      	str	r3, [r4, #32]
 800502c:	b2b3      	uxth	r3, r6
 800502e:	2a00      	cmp	r2, #0
 8005030:	d12e      	bne.n	8005090 <USB_EPStartXfer+0x13c>
 8005032:	9a01      	ldr	r2, [sp, #4]
 8005034:	4994      	ldr	r1, [pc, #592]	@ (8005288 <USB_EPStartXfer+0x334>)
 8005036:	8810      	ldrh	r0, [r2, #0]
 8005038:	7822      	ldrb	r2, [r4, #0]
 800503a:	1869      	adds	r1, r5, r1
 800503c:	1809      	adds	r1, r1, r0
 800503e:	00d2      	lsls	r2, r2, #3
 8005040:	1852      	adds	r2, r2, r1
 8005042:	8811      	ldrh	r1, [r2, #0]
 8005044:	0589      	lsls	r1, r1, #22
 8005046:	0d89      	lsrs	r1, r1, #22
 8005048:	8011      	strh	r1, [r2, #0]
 800504a:	2e00      	cmp	r6, #0
 800504c:	d10a      	bne.n	8005064 <USB_EPStartXfer+0x110>
 800504e:	2080      	movs	r0, #128	@ 0x80
 8005050:	8811      	ldrh	r1, [r2, #0]
 8005052:	0200      	lsls	r0, r0, #8
 8005054:	4301      	orrs	r1, r0
 8005056:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005058:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800505a:	9904      	ldr	r1, [sp, #16]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800505c:	0028      	movs	r0, r5
 800505e:	f7ff ff64 	bl	8004f2a <USB_WritePMA>
 8005062:	e79b      	b.n	8004f9c <USB_EPStartXfer+0x48>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005064:	2e3e      	cmp	r6, #62	@ 0x3e
 8005066:	d808      	bhi.n	800507a <USB_EPStartXfer+0x126>
 8005068:	2101      	movs	r1, #1
 800506a:	0870      	lsrs	r0, r6, #1
 800506c:	4031      	ands	r1, r6
 800506e:	1840      	adds	r0, r0, r1
 8005070:	8811      	ldrh	r1, [r2, #0]
 8005072:	0280      	lsls	r0, r0, #10
 8005074:	4301      	orrs	r1, r0
 8005076:	b289      	uxth	r1, r1
 8005078:	e7ed      	b.n	8005056 <USB_EPStartXfer+0x102>
 800507a:	201f      	movs	r0, #31
 800507c:	4030      	ands	r0, r6
 800507e:	0971      	lsrs	r1, r6, #5
 8005080:	4246      	negs	r6, r0
 8005082:	4170      	adcs	r0, r6
 8005084:	1a09      	subs	r1, r1, r0
 8005086:	8810      	ldrh	r0, [r2, #0]
 8005088:	0289      	lsls	r1, r1, #10
 800508a:	4308      	orrs	r0, r1
 800508c:	4984      	ldr	r1, [pc, #528]	@ (80052a0 <USB_EPStartXfer+0x34c>)
 800508e:	e7f1      	b.n	8005074 <USB_EPStartXfer+0x120>
 8005090:	2a01      	cmp	r2, #1
 8005092:	d1e1      	bne.n	8005058 <USB_EPStartXfer+0x104>
 8005094:	002a      	movs	r2, r5
 8005096:	497c      	ldr	r1, [pc, #496]	@ (8005288 <USB_EPStartXfer+0x334>)
 8005098:	3250      	adds	r2, #80	@ 0x50
 800509a:	8810      	ldrh	r0, [r2, #0]
 800509c:	7822      	ldrb	r2, [r4, #0]
 800509e:	1869      	adds	r1, r5, r1
 80050a0:	00d2      	lsls	r2, r2, #3
 80050a2:	1809      	adds	r1, r1, r0
 80050a4:	1852      	adds	r2, r2, r1
 80050a6:	8013      	strh	r3, [r2, #0]
 80050a8:	e7d6      	b.n	8005058 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050aa:	9a01      	ldr	r2, [sp, #4]
 80050ac:	8812      	ldrh	r2, [r2, #0]
 80050ae:	4694      	mov	ip, r2
 80050b0:	4a75      	ldr	r2, [pc, #468]	@ (8005288 <USB_EPStartXfer+0x334>)
 80050b2:	18a8      	adds	r0, r5, r2
 80050b4:	9a03      	ldr	r2, [sp, #12]
 80050b6:	4460      	add	r0, ip
 80050b8:	1882      	adds	r2, r0, r2
 80050ba:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050bc:	8922      	ldrh	r2, [r4, #8]
 80050be:	0028      	movs	r0, r5
 80050c0:	f7ff ff33 	bl	8004f2a <USB_WritePMA>
            ep->xfer_buff += len;
 80050c4:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 80050c6:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 80050c8:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 80050ca:	9b05      	ldr	r3, [sp, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80050cc:	42b2      	cmp	r2, r6
 80050ce:	d201      	bcs.n	80050d4 <USB_EPStartXfer+0x180>
              ep->xfer_len_db -= len;
 80050d0:	1bf3      	subs	r3, r6, r7
 80050d2:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050d4:	7862      	ldrb	r2, [r4, #1]
 80050d6:	6223      	str	r3, [r4, #32]
 80050d8:	b2b3      	uxth	r3, r6
 80050da:	2a00      	cmp	r2, #0
 80050dc:	d12a      	bne.n	8005134 <USB_EPStartXfer+0x1e0>
 80050de:	9a01      	ldr	r2, [sp, #4]
 80050e0:	496e      	ldr	r1, [pc, #440]	@ (800529c <USB_EPStartXfer+0x348>)
 80050e2:	8810      	ldrh	r0, [r2, #0]
 80050e4:	7822      	ldrb	r2, [r4, #0]
 80050e6:	1869      	adds	r1, r5, r1
 80050e8:	1809      	adds	r1, r1, r0
 80050ea:	00d2      	lsls	r2, r2, #3
 80050ec:	1852      	adds	r2, r2, r1
 80050ee:	8811      	ldrh	r1, [r2, #0]
 80050f0:	0589      	lsls	r1, r1, #22
 80050f2:	0d89      	lsrs	r1, r1, #22
 80050f4:	8011      	strh	r1, [r2, #0]
 80050f6:	2e00      	cmp	r6, #0
 80050f8:	d106      	bne.n	8005108 <USB_EPStartXfer+0x1b4>
 80050fa:	2080      	movs	r0, #128	@ 0x80
 80050fc:	8811      	ldrh	r1, [r2, #0]
 80050fe:	0200      	lsls	r0, r0, #8
 8005100:	4301      	orrs	r1, r0
 8005102:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005104:	8962      	ldrh	r2, [r4, #10]
 8005106:	e7a8      	b.n	800505a <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005108:	2e3e      	cmp	r6, #62	@ 0x3e
 800510a:	d808      	bhi.n	800511e <USB_EPStartXfer+0x1ca>
 800510c:	2101      	movs	r1, #1
 800510e:	0870      	lsrs	r0, r6, #1
 8005110:	4031      	ands	r1, r6
 8005112:	1840      	adds	r0, r0, r1
 8005114:	8811      	ldrh	r1, [r2, #0]
 8005116:	0280      	lsls	r0, r0, #10
 8005118:	4301      	orrs	r1, r0
 800511a:	b289      	uxth	r1, r1
 800511c:	e7f1      	b.n	8005102 <USB_EPStartXfer+0x1ae>
 800511e:	201f      	movs	r0, #31
 8005120:	0971      	lsrs	r1, r6, #5
 8005122:	4006      	ands	r6, r0
 8005124:	4270      	negs	r0, r6
 8005126:	4146      	adcs	r6, r0
 8005128:	8810      	ldrh	r0, [r2, #0]
 800512a:	1b89      	subs	r1, r1, r6
 800512c:	0289      	lsls	r1, r1, #10
 800512e:	4308      	orrs	r0, r1
 8005130:	495b      	ldr	r1, [pc, #364]	@ (80052a0 <USB_EPStartXfer+0x34c>)
 8005132:	e7f1      	b.n	8005118 <USB_EPStartXfer+0x1c4>
 8005134:	2a01      	cmp	r2, #1
 8005136:	d1e5      	bne.n	8005104 <USB_EPStartXfer+0x1b0>
 8005138:	002a      	movs	r2, r5
 800513a:	4958      	ldr	r1, [pc, #352]	@ (800529c <USB_EPStartXfer+0x348>)
 800513c:	3250      	adds	r2, #80	@ 0x50
 800513e:	8810      	ldrh	r0, [r2, #0]
 8005140:	7822      	ldrb	r2, [r4, #0]
 8005142:	1869      	adds	r1, r5, r1
 8005144:	00d2      	lsls	r2, r2, #3
 8005146:	1809      	adds	r1, r1, r0
 8005148:	1852      	adds	r2, r2, r1
 800514a:	8013      	strh	r3, [r2, #0]
 800514c:	e7da      	b.n	8005104 <USB_EPStartXfer+0x1b0>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800514e:	8818      	ldrh	r0, [r3, #0]
 8005150:	4f54      	ldr	r7, [pc, #336]	@ (80052a4 <USB_EPStartXfer+0x350>)
 8005152:	4a4f      	ldr	r2, [pc, #316]	@ (8005290 <USB_EPStartXfer+0x33c>)
 8005154:	4038      	ands	r0, r7
 8005156:	4310      	orrs	r0, r2
 8005158:	b280      	uxth	r0, r0
 800515a:	8018      	strh	r0, [r3, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800515c:	9b01      	ldr	r3, [sp, #4]
 800515e:	9a03      	ldr	r2, [sp, #12]
 8005160:	8818      	ldrh	r0, [r3, #0]
 8005162:	4b49      	ldr	r3, [pc, #292]	@ (8005288 <USB_EPStartXfer+0x334>)
 8005164:	18eb      	adds	r3, r5, r3
 8005166:	181b      	adds	r3, r3, r0
 8005168:	189a      	adds	r2, r3, r2
 800516a:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800516c:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800516e:	8922      	ldrh	r2, [r4, #8]
 8005170:	e774      	b.n	800505c <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005172:	8818      	ldrh	r0, [r3, #0]
        ep->xfer_len_db -= len;
 8005174:	1bf6      	subs	r6, r6, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005176:	9a01      	ldr	r2, [sp, #4]
        ep->xfer_len_db -= len;
 8005178:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800517a:	8816      	ldrh	r6, [r2, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800517c:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800517e:	0640      	lsls	r0, r0, #25
 8005180:	d507      	bpl.n	8005192 <USB_EPStartXfer+0x23e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005182:	4a46      	ldr	r2, [pc, #280]	@ (800529c <USB_EPStartXfer+0x348>)
 8005184:	18a8      	adds	r0, r5, r2
 8005186:	9a03      	ldr	r2, [sp, #12]
 8005188:	1980      	adds	r0, r0, r6
 800518a:	1882      	adds	r2, r0, r2
 800518c:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800518e:	8962      	ldrh	r2, [r4, #10]
 8005190:	e764      	b.n	800505c <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005192:	4a3d      	ldr	r2, [pc, #244]	@ (8005288 <USB_EPStartXfer+0x334>)
 8005194:	18a8      	adds	r0, r5, r2
 8005196:	9a03      	ldr	r2, [sp, #12]
 8005198:	1980      	adds	r0, r0, r6
 800519a:	1882      	adds	r2, r0, r2
 800519c:	e7e6      	b.n	800516c <USB_EPStartXfer+0x218>
    if (ep->doublebuffer == 0U)
 800519e:	2a00      	cmp	r2, #0
 80051a0:	d11c      	bne.n	80051dc <USB_EPStartXfer+0x288>
      if (ep->xfer_len > ep->maxpacket)
 80051a2:	69a3      	ldr	r3, [r4, #24]
 80051a4:	6921      	ldr	r1, [r4, #16]
 80051a6:	428b      	cmp	r3, r1
 80051a8:	d901      	bls.n	80051ae <USB_EPStartXfer+0x25a>
        ep->xfer_len -= len;
 80051aa:	1a5a      	subs	r2, r3, r1
 80051ac:	000b      	movs	r3, r1
 80051ae:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80051b0:	002a      	movs	r2, r5
 80051b2:	493a      	ldr	r1, [pc, #232]	@ (800529c <USB_EPStartXfer+0x348>)
 80051b4:	3250      	adds	r2, #80	@ 0x50
 80051b6:	8810      	ldrh	r0, [r2, #0]
 80051b8:	7822      	ldrb	r2, [r4, #0]
 80051ba:	1869      	adds	r1, r5, r1
 80051bc:	00d2      	lsls	r2, r2, #3
 80051be:	1809      	adds	r1, r1, r0
 80051c0:	1852      	adds	r2, r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80051c2:	8811      	ldrh	r1, [r2, #0]
 80051c4:	0589      	lsls	r1, r1, #22
 80051c6:	0d89      	lsrs	r1, r1, #22
 80051c8:	8011      	strh	r1, [r2, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d000      	beq.n	80051d0 <USB_EPStartXfer+0x27c>
 80051ce:	e0d6      	b.n	800537e <USB_EPStartXfer+0x42a>
 80051d0:	2180      	movs	r1, #128	@ 0x80
 80051d2:	8813      	ldrh	r3, [r2, #0]
 80051d4:	0209      	lsls	r1, r1, #8
 80051d6:	430b      	orrs	r3, r1
 80051d8:	8013      	strh	r3, [r2, #0]
 80051da:	e03d      	b.n	8005258 <USB_EPStartXfer+0x304>
      if (ep->type == EP_TYPE_BULK)
 80051dc:	78e3      	ldrb	r3, [r4, #3]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d000      	beq.n	80051e4 <USB_EPStartXfer+0x290>
 80051e2:	e08c      	b.n	80052fe <USB_EPStartXfer+0x3aa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80051e4:	2900      	cmp	r1, #0
 80051e6:	d124      	bne.n	8005232 <USB_EPStartXfer+0x2de>
 80051e8:	0006      	movs	r6, r0
 80051ea:	4a27      	ldr	r2, [pc, #156]	@ (8005288 <USB_EPStartXfer+0x334>)
 80051ec:	3650      	adds	r6, #80	@ 0x50
 80051ee:	8833      	ldrh	r3, [r6, #0]
 80051f0:	7820      	ldrb	r0, [r4, #0]
 80051f2:	18aa      	adds	r2, r5, r2
 80051f4:	18d2      	adds	r2, r2, r3
 80051f6:	00c0      	lsls	r0, r0, #3
 80051f8:	1812      	adds	r2, r2, r0
 80051fa:	8813      	ldrh	r3, [r2, #0]
 80051fc:	059b      	lsls	r3, r3, #22
 80051fe:	0d9b      	lsrs	r3, r3, #22
 8005200:	8013      	strh	r3, [r2, #0]
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d134      	bne.n	8005272 <USB_EPStartXfer+0x31e>
 8005208:	2780      	movs	r7, #128	@ 0x80
 800520a:	8811      	ldrh	r1, [r2, #0]
 800520c:	023f      	lsls	r7, r7, #8
 800520e:	4339      	orrs	r1, r7
 8005210:	8011      	strh	r1, [r2, #0]
 8005212:	4a22      	ldr	r2, [pc, #136]	@ (800529c <USB_EPStartXfer+0x348>)
 8005214:	8831      	ldrh	r1, [r6, #0]
 8005216:	18aa      	adds	r2, r5, r2
 8005218:	1852      	adds	r2, r2, r1
 800521a:	1812      	adds	r2, r2, r0
 800521c:	8811      	ldrh	r1, [r2, #0]
 800521e:	0589      	lsls	r1, r1, #22
 8005220:	0d89      	lsrs	r1, r1, #22
 8005222:	8011      	strh	r1, [r2, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d154      	bne.n	80052d2 <USB_EPStartXfer+0x37e>
 8005228:	2180      	movs	r1, #128	@ 0x80
 800522a:	8813      	ldrh	r3, [r2, #0]
 800522c:	0209      	lsls	r1, r1, #8
 800522e:	430b      	orrs	r3, r1
 8005230:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 8005232:	69e3      	ldr	r3, [r4, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00f      	beq.n	8005258 <USB_EPStartXfer+0x304>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005238:	7823      	ldrb	r3, [r4, #0]
 800523a:	491b      	ldr	r1, [pc, #108]	@ (80052a8 <USB_EPStartXfer+0x354>)
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	18eb      	adds	r3, r5, r3
 8005240:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005242:	400a      	ands	r2, r1
 8005244:	428a      	cmp	r2, r1
 8005246:	d001      	beq.n	800524c <USB_EPStartXfer+0x2f8>
 8005248:	2a00      	cmp	r2, #0
 800524a:	d105      	bne.n	8005258 <USB_EPStartXfer+0x304>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800524c:	881a      	ldrh	r2, [r3, #0]
 800524e:	4911      	ldr	r1, [pc, #68]	@ (8005294 <USB_EPStartXfer+0x340>)
 8005250:	400a      	ands	r2, r1
 8005252:	4916      	ldr	r1, [pc, #88]	@ (80052ac <USB_EPStartXfer+0x358>)
 8005254:	430a      	orrs	r2, r1
 8005256:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005258:	7823      	ldrb	r3, [r4, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	18ed      	adds	r5, r5, r3
 800525e:	882a      	ldrh	r2, [r5, #0]
 8005260:	4b13      	ldr	r3, [pc, #76]	@ (80052b0 <USB_EPStartXfer+0x35c>)
 8005262:	401a      	ands	r2, r3
 8005264:	23c0      	movs	r3, #192	@ 0xc0
 8005266:	019b      	lsls	r3, r3, #6
 8005268:	4053      	eors	r3, r2
 800526a:	4a12      	ldr	r2, [pc, #72]	@ (80052b4 <USB_EPStartXfer+0x360>)
 800526c:	4313      	orrs	r3, r2
 800526e:	802b      	strh	r3, [r5, #0]
 8005270:	e6a0      	b.n	8004fb4 <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005272:	2b3e      	cmp	r3, #62	@ 0x3e
 8005274:	d820      	bhi.n	80052b8 <USB_EPStartXfer+0x364>
 8005276:	2101      	movs	r1, #1
 8005278:	085f      	lsrs	r7, r3, #1
 800527a:	4019      	ands	r1, r3
 800527c:	187f      	adds	r7, r7, r1
 800527e:	8811      	ldrh	r1, [r2, #0]
 8005280:	02bf      	lsls	r7, r7, #10
 8005282:	4339      	orrs	r1, r7
 8005284:	b289      	uxth	r1, r1
 8005286:	e7c3      	b.n	8005210 <USB_EPStartXfer+0x2bc>
 8005288:	00000402 	.word	0x00000402
 800528c:	ffff8fbf 	.word	0xffff8fbf
 8005290:	ffff8080 	.word	0xffff8080
 8005294:	ffff8f8f 	.word	0xffff8f8f
 8005298:	00008180 	.word	0x00008180
 800529c:	00000406 	.word	0x00000406
 80052a0:	ffff8000 	.word	0xffff8000
 80052a4:	ffff8e8f 	.word	0xffff8e8f
 80052a8:	00004040 	.word	0x00004040
 80052ac:	000080c0 	.word	0x000080c0
 80052b0:	ffffbf8f 	.word	0xffffbf8f
 80052b4:	00008080 	.word	0x00008080
 80052b8:	271f      	movs	r7, #31
 80052ba:	401f      	ands	r7, r3
 80052bc:	0039      	movs	r1, r7
 80052be:	424f      	negs	r7, r1
 80052c0:	414f      	adcs	r7, r1
 80052c2:	0959      	lsrs	r1, r3, #5
 80052c4:	1bc9      	subs	r1, r1, r7
 80052c6:	8817      	ldrh	r7, [r2, #0]
 80052c8:	9101      	str	r1, [sp, #4]
 80052ca:	0289      	lsls	r1, r1, #10
 80052cc:	430f      	orrs	r7, r1
 80052ce:	4937      	ldr	r1, [pc, #220]	@ (80053ac <USB_EPStartXfer+0x458>)
 80052d0:	e7d7      	b.n	8005282 <USB_EPStartXfer+0x32e>
 80052d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80052d4:	d808      	bhi.n	80052e8 <USB_EPStartXfer+0x394>
 80052d6:	2001      	movs	r0, #1
 80052d8:	0859      	lsrs	r1, r3, #1
 80052da:	4003      	ands	r3, r0
 80052dc:	18c9      	adds	r1, r1, r3
 80052de:	8813      	ldrh	r3, [r2, #0]
 80052e0:	0289      	lsls	r1, r1, #10
 80052e2:	430b      	orrs	r3, r1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	e7a3      	b.n	8005230 <USB_EPStartXfer+0x2dc>
 80052e8:	201f      	movs	r0, #31
 80052ea:	0959      	lsrs	r1, r3, #5
 80052ec:	4003      	ands	r3, r0
 80052ee:	4258      	negs	r0, r3
 80052f0:	4143      	adcs	r3, r0
 80052f2:	1ac9      	subs	r1, r1, r3
 80052f4:	8813      	ldrh	r3, [r2, #0]
 80052f6:	0289      	lsls	r1, r1, #10
 80052f8:	4319      	orrs	r1, r3
 80052fa:	4b2c      	ldr	r3, [pc, #176]	@ (80053ac <USB_EPStartXfer+0x458>)
 80052fc:	e7f1      	b.n	80052e2 <USB_EPStartXfer+0x38e>
        return HAL_ERROR;
 80052fe:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8005300:	4283      	cmp	r3, r0
 8005302:	d000      	beq.n	8005306 <USB_EPStartXfer+0x3b2>
 8005304:	e657      	b.n	8004fb6 <USB_EPStartXfer+0x62>
        if (ep->xfer_len > ep->maxpacket)
 8005306:	69a3      	ldr	r3, [r4, #24]
 8005308:	6922      	ldr	r2, [r4, #16]
          ep->xfer_len = 0U;
 800530a:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 800530c:	4293      	cmp	r3, r2
 800530e:	d901      	bls.n	8005314 <USB_EPStartXfer+0x3c0>
          ep->xfer_len -= len;
 8005310:	1a98      	subs	r0, r3, r2
 8005312:	0013      	movs	r3, r2
 8005314:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005316:	2900      	cmp	r1, #0
 8005318:	d19e      	bne.n	8005258 <USB_EPStartXfer+0x304>
 800531a:	002e      	movs	r6, r5
 800531c:	4a24      	ldr	r2, [pc, #144]	@ (80053b0 <USB_EPStartXfer+0x45c>)
 800531e:	3650      	adds	r6, #80	@ 0x50
 8005320:	8831      	ldrh	r1, [r6, #0]
 8005322:	7820      	ldrb	r0, [r4, #0]
 8005324:	18aa      	adds	r2, r5, r2
 8005326:	1852      	adds	r2, r2, r1
 8005328:	00c0      	lsls	r0, r0, #3
 800532a:	1812      	adds	r2, r2, r0
 800532c:	8811      	ldrh	r1, [r2, #0]
 800532e:	0589      	lsls	r1, r1, #22
 8005330:	0d89      	lsrs	r1, r1, #22
 8005332:	8011      	strh	r1, [r2, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <USB_EPStartXfer+0x3fa>
 8005338:	2780      	movs	r7, #128	@ 0x80
 800533a:	8811      	ldrh	r1, [r2, #0]
 800533c:	023f      	lsls	r7, r7, #8
 800533e:	4339      	orrs	r1, r7
 8005340:	8011      	strh	r1, [r2, #0]
 8005342:	4a1c      	ldr	r2, [pc, #112]	@ (80053b4 <USB_EPStartXfer+0x460>)
 8005344:	8831      	ldrh	r1, [r6, #0]
 8005346:	18aa      	adds	r2, r5, r2
 8005348:	1852      	adds	r2, r2, r1
 800534a:	1812      	adds	r2, r2, r0
 800534c:	e739      	b.n	80051c2 <USB_EPStartXfer+0x26e>
 800534e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005350:	d808      	bhi.n	8005364 <USB_EPStartXfer+0x410>
 8005352:	2101      	movs	r1, #1
 8005354:	085f      	lsrs	r7, r3, #1
 8005356:	4019      	ands	r1, r3
 8005358:	187f      	adds	r7, r7, r1
 800535a:	8811      	ldrh	r1, [r2, #0]
 800535c:	02bf      	lsls	r7, r7, #10
 800535e:	4339      	orrs	r1, r7
 8005360:	b289      	uxth	r1, r1
 8005362:	e7ed      	b.n	8005340 <USB_EPStartXfer+0x3ec>
 8005364:	271f      	movs	r7, #31
 8005366:	401f      	ands	r7, r3
 8005368:	0039      	movs	r1, r7
 800536a:	424f      	negs	r7, r1
 800536c:	414f      	adcs	r7, r1
 800536e:	0959      	lsrs	r1, r3, #5
 8005370:	1bc9      	subs	r1, r1, r7
 8005372:	8817      	ldrh	r7, [r2, #0]
 8005374:	9101      	str	r1, [sp, #4]
 8005376:	0289      	lsls	r1, r1, #10
 8005378:	430f      	orrs	r7, r1
 800537a:	490c      	ldr	r1, [pc, #48]	@ (80053ac <USB_EPStartXfer+0x458>)
 800537c:	e7ef      	b.n	800535e <USB_EPStartXfer+0x40a>
 800537e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005380:	d808      	bhi.n	8005394 <USB_EPStartXfer+0x440>
 8005382:	2001      	movs	r0, #1
 8005384:	0859      	lsrs	r1, r3, #1
 8005386:	4003      	ands	r3, r0
 8005388:	18c9      	adds	r1, r1, r3
 800538a:	8813      	ldrh	r3, [r2, #0]
 800538c:	0289      	lsls	r1, r1, #10
 800538e:	430b      	orrs	r3, r1
 8005390:	b29b      	uxth	r3, r3
 8005392:	e721      	b.n	80051d8 <USB_EPStartXfer+0x284>
 8005394:	201f      	movs	r0, #31
 8005396:	0959      	lsrs	r1, r3, #5
 8005398:	4003      	ands	r3, r0
 800539a:	4258      	negs	r0, r3
 800539c:	4143      	adcs	r3, r0
 800539e:	1ac9      	subs	r1, r1, r3
 80053a0:	8813      	ldrh	r3, [r2, #0]
 80053a2:	0289      	lsls	r1, r1, #10
 80053a4:	4319      	orrs	r1, r3
 80053a6:	4b01      	ldr	r3, [pc, #4]	@ (80053ac <USB_EPStartXfer+0x458>)
 80053a8:	e7f1      	b.n	800538e <USB_EPStartXfer+0x43a>
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	ffff8000 	.word	0xffff8000
 80053b0:	00000402 	.word	0x00000402
 80053b4:	00000406 	.word	0x00000406

080053b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053ba:	2580      	movs	r5, #128	@ 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 80053bc:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053be:	00ed      	lsls	r5, r5, #3
 80053c0:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 80053c2:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 80053c4:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80053c6:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 80053c8:	1a47      	subs	r7, r0, r1
 80053ca:	19ea      	adds	r2, r5, r7
 80053cc:	2e00      	cmp	r6, #0
 80053ce:	d106      	bne.n	80053de <USB_ReadPMA+0x26>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80053d0:	07db      	lsls	r3, r3, #31
 80053d2:	d503      	bpl.n	80053dc <USB_ReadPMA+0x24>
 80053d4:	0064      	lsls	r4, r4, #1
  {
    RdVal = *pdwVal;
 80053d6:	1900      	adds	r0, r0, r4
 80053d8:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80053da:	550b      	strb	r3, [r1, r4]
  }
}
 80053dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 80053de:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 80053e0:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 80053e2:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80053e4:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80053e6:	0a12      	lsrs	r2, r2, #8
 80053e8:	706a      	strb	r2, [r5, #1]
    pBuf++;
 80053ea:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 80053ec:	e7ed      	b.n	80053ca <USB_ReadPMA+0x12>
	...

080053f0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053f0:	23af      	movs	r3, #175	@ 0xaf
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	58c3      	ldr	r3, [r0, r3]
{
 80053f6:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00e      	beq.n	800541a <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80053fc:	22ae      	movs	r2, #174	@ 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80053fe:	2580      	movs	r5, #128	@ 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005400:	0092      	lsls	r2, r2, #2
 8005402:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005404:	00ad      	lsls	r5, r5, #2
 8005406:	5d60      	ldrb	r0, [r4, r5]
 8005408:	28ff      	cmp	r0, #255	@ 0xff
 800540a:	d006      	beq.n	800541a <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800540c:	4a04      	ldr	r2, [pc, #16]	@ (8005420 <USBD_CDC_EP0_RxReady+0x30>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	0021      	movs	r1, r4
 8005412:	5ca2      	ldrb	r2, [r4, r2]
 8005414:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005416:	23ff      	movs	r3, #255	@ 0xff
 8005418:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 800541a:	2000      	movs	r0, #0
 800541c:	bd70      	pop	{r4, r5, r6, pc}
 800541e:	46c0      	nop			@ (mov r8, r8)
 8005420:	00000201 	.word	0x00000201

08005424 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005424:	2343      	movs	r3, #67	@ 0x43
 8005426:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
 8005428:	4800      	ldr	r0, [pc, #0]	@ (800542c <USBD_CDC_GetFSCfgDesc+0x8>)
}
 800542a:	4770      	bx	lr
 800542c:	20000064 	.word	0x20000064

08005430 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005430:	2343      	movs	r3, #67	@ 0x43
 8005432:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
 8005434:	4800      	ldr	r0, [pc, #0]	@ (8005438 <USBD_CDC_GetHSCfgDesc+0x8>)
}
 8005436:	4770      	bx	lr
 8005438:	200000a8 	.word	0x200000a8

0800543c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800543c:	2343      	movs	r3, #67	@ 0x43
 800543e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005440:	4800      	ldr	r0, [pc, #0]	@ (8005444 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
}
 8005442:	4770      	bx	lr
 8005444:	20000020 	.word	0x20000020

08005448 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005448:	230a      	movs	r3, #10
 800544a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800544c:	4800      	ldr	r0, [pc, #0]	@ (8005450 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 800544e:	4770      	bx	lr
 8005450:	20000124 	.word	0x20000124

08005454 <USBD_CDC_DataOut>:
{
 8005454:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005456:	26ae      	movs	r6, #174	@ 0xae
 8005458:	00b6      	lsls	r6, r6, #2
{
 800545a:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800545c:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800545e:	f000 ff59 	bl	8006314 <USBD_LL_GetRxDataSize>
 8005462:	2383      	movs	r3, #131	@ 0x83
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 8005468:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 800546a:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00a      	beq.n	8005486 <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005470:	2383      	movs	r3, #131	@ 0x83
 8005472:	2281      	movs	r2, #129	@ 0x81
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	18e9      	adds	r1, r5, r3
 8005478:	33b0      	adds	r3, #176	@ 0xb0
 800547a:	58e3      	ldr	r3, [r4, r3]
 800547c:	0092      	lsls	r2, r2, #2
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	58a8      	ldr	r0, [r5, r2]
 8005482:	4798      	blx	r3
    return USBD_OK;
 8005484:	2000      	movs	r0, #0
}
 8005486:	bd70      	pop	{r4, r5, r6, pc}

08005488 <USBD_CDC_DataIn>:
{
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800548a:	23ae      	movs	r3, #174	@ 0xae
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	58c7      	ldr	r7, [r0, r3]
{
 8005490:	0004      	movs	r4, r0
 8005492:	000e      	movs	r6, r1
    return USBD_FAIL;
 8005494:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 8005496:	2f00      	cmp	r7, #0
 8005498:	d016      	beq.n	80054c8 <USBD_CDC_DataIn+0x40>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800549a:	2514      	movs	r5, #20
 800549c:	434d      	muls	r5, r1
 800549e:	1965      	adds	r5, r4, r5
 80054a0:	69e8      	ldr	r0, [r5, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80054a2:	3308      	adds	r3, #8
 80054a4:	58e3      	ldr	r3, [r4, r3]
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d00f      	beq.n	80054ca <USBD_CDC_DataIn+0x42>
 80054aa:	2228      	movs	r2, #40	@ 0x28
 80054ac:	434a      	muls	r2, r1
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	6a19      	ldr	r1, [r3, #32]
 80054b2:	f7fa fedf 	bl	8000274 <__aeabi_uidivmod>
 80054b6:	1e0a      	subs	r2, r1, #0
 80054b8:	d107      	bne.n	80054ca <USBD_CDC_DataIn+0x42>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054ba:	000b      	movs	r3, r1
      pdev->ep_in[epnum].total_length = 0U;
 80054bc:	61e9      	str	r1, [r5, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054be:	0020      	movs	r0, r4
 80054c0:	0031      	movs	r1, r6
 80054c2:	f000 ff15 	bl	80062f0 <USBD_LL_Transmit>
    return USBD_OK;
 80054c6:	2000      	movs	r0, #0
}
 80054c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80054ca:	2385      	movs	r3, #133	@ 0x85
 80054cc:	2200      	movs	r2, #0
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	50fa      	str	r2, [r7, r3]
 80054d2:	e7f8      	b.n	80054c6 <USBD_CDC_DataIn+0x3e>

080054d4 <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054d4:	23ae      	movs	r3, #174	@ 0xae
{
 80054d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	58c6      	ldr	r6, [r0, r3]
  uint8_t ifalt = 0U;
 80054dc:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 80054de:	466a      	mov	r2, sp
{
 80054e0:	000d      	movs	r5, r1
  uint8_t ifalt = 0U;
 80054e2:	1d59      	adds	r1, r3, #5
 80054e4:	2300      	movs	r3, #0
{
 80054e6:	0004      	movs	r4, r0
  uint8_t ifalt = 0U;
 80054e8:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 80054ea:	80d3      	strh	r3, [r2, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054ec:	782b      	ldrb	r3, [r5, #0]
  uint16_t status_info = 0U;
 80054ee:	1d90      	adds	r0, r2, #6
 80054f0:	001f      	movs	r7, r3
 80054f2:	2260      	movs	r2, #96	@ 0x60
 80054f4:	4017      	ands	r7, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054f6:	4213      	tst	r3, r2
 80054f8:	d026      	beq.n	8005548 <USBD_CDC_Setup+0x74>
 80054fa:	2f20      	cmp	r7, #32
 80054fc:	d13f      	bne.n	800557e <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 80054fe:	88ea      	ldrh	r2, [r5, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005500:	7868      	ldrb	r0, [r5, #1]
      if (req->wLength)
 8005502:	2a00      	cmp	r2, #0
 8005504:	d019      	beq.n	800553a <USBD_CDC_Setup+0x66>
        if (req->bmRequest & 0x80U)
 8005506:	b25b      	sxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	da0b      	bge.n	8005524 <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800550c:	23af      	movs	r3, #175	@ 0xaf
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	58e3      	ldr	r3, [r4, r3]
 8005512:	0031      	movs	r1, r6
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005518:	0031      	movs	r1, r6
 800551a:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800551c:	0020      	movs	r0, r4
 800551e:	f000 fc94 	bl	8005e4a <USBD_CtlSendData>
 8005522:	e008      	b.n	8005536 <USBD_CDC_Setup+0x62>
          hcdc->CmdOpCode = req->bRequest;
 8005524:	2380      	movs	r3, #128	@ 0x80
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	54f0      	strb	r0, [r6, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800552a:	4b18      	ldr	r3, [pc, #96]	@ (800558c <USBD_CDC_Setup+0xb8>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800552c:	0031      	movs	r1, r6
 800552e:	0020      	movs	r0, r4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005530:	54f2      	strb	r2, [r6, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005532:	f000 fca0 	bl	8005e76 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8005536:	2000      	movs	r0, #0
}
 8005538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800553a:	23af      	movs	r3, #175	@ 0xaf
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	58e3      	ldr	r3, [r4, r3]
 8005540:	0029      	movs	r1, r5
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4798      	blx	r3
 8005546:	e7f6      	b.n	8005536 <USBD_CDC_Setup+0x62>
      switch (req->bRequest)
 8005548:	786b      	ldrb	r3, [r5, #1]
 800554a:	2b0a      	cmp	r3, #10
 800554c:	d00b      	beq.n	8005566 <USBD_CDC_Setup+0x92>
 800554e:	2b0b      	cmp	r3, #11
 8005550:	d010      	beq.n	8005574 <USBD_CDC_Setup+0xa0>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d113      	bne.n	800557e <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005556:	23a7      	movs	r3, #167	@ 0xa7
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	5ce3      	ldrb	r3, [r4, r3]
 800555c:	2b03      	cmp	r3, #3
 800555e:	d10e      	bne.n	800557e <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005560:	2202      	movs	r2, #2
 8005562:	0001      	movs	r1, r0
 8005564:	e7da      	b.n	800551c <USBD_CDC_Setup+0x48>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005566:	23a7      	movs	r3, #167	@ 0xa7
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	5ce3      	ldrb	r3, [r4, r3]
 800556c:	2b03      	cmp	r3, #3
 800556e:	d106      	bne.n	800557e <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005570:	2201      	movs	r2, #1
 8005572:	e7d3      	b.n	800551c <USBD_CDC_Setup+0x48>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005574:	23a7      	movs	r3, #167	@ 0xa7
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	5ce3      	ldrb	r3, [r4, r3]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d0db      	beq.n	8005536 <USBD_CDC_Setup+0x62>
          USBD_CtlError(pdev, req);
 800557e:	0020      	movs	r0, r4
 8005580:	0029      	movs	r1, r5
 8005582:	f000 fc3b 	bl	8005dfc <USBD_CtlError>
            ret = USBD_FAIL;
 8005586:	2002      	movs	r0, #2
 8005588:	e7d6      	b.n	8005538 <USBD_CDC_Setup+0x64>
 800558a:	46c0      	nop			@ (mov r8, r8)
 800558c:	00000201 	.word	0x00000201

08005590 <USBD_CDC_DeInit>:
{
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005594:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005596:	2181      	movs	r1, #129	@ 0x81
 8005598:	f000 fe73 	bl	8006282 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800559c:	2101      	movs	r1, #1
 800559e:	0020      	movs	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80055a0:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80055a2:	f000 fe6e 	bl	8006282 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80055a6:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 80055a8:	26ae      	movs	r6, #174	@ 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80055aa:	33fc      	adds	r3, #252	@ 0xfc
 80055ac:	671d      	str	r5, [r3, #112]	@ 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80055ae:	2182      	movs	r1, #130	@ 0x82
 80055b0:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 80055b2:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80055b4:	f000 fe65 	bl	8006282 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80055b8:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80055ba:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 80055bc:	42ab      	cmp	r3, r5
 80055be:	d008      	beq.n	80055d2 <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80055c0:	23af      	movs	r3, #175	@ 0xaf
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	58e3      	ldr	r3, [r4, r3]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80055ca:	59a0      	ldr	r0, [r4, r6]
 80055cc:	f000 feae 	bl	800632c <USBD_static_free>
    pdev->pClassData = NULL;
 80055d0:	51a5      	str	r5, [r4, r6]
}
 80055d2:	2000      	movs	r0, #0
 80055d4:	bd70      	pop	{r4, r5, r6, pc}

080055d6 <USBD_CDC_Init>:
{
 80055d6:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055d8:	7c03      	ldrb	r3, [r0, #16]
{
 80055da:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d13a      	bne.n	8005656 <USBD_CDC_Init+0x80>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80055e0:	2380      	movs	r3, #128	@ 0x80
 80055e2:	2181      	movs	r1, #129	@ 0x81
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	2202      	movs	r2, #2
 80055e8:	f000 fe3f 	bl	800626a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80055ec:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055ee:	2380      	movs	r3, #128	@ 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80055f0:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055f2:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80055f4:	2202      	movs	r2, #2
 80055f6:	0020      	movs	r0, r4
 80055f8:	f000 fe37 	bl	800626a <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80055fc:	0023      	movs	r3, r4
 80055fe:	2601      	movs	r6, #1
 8005600:	33fc      	adds	r3, #252	@ 0xfc
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005602:	2203      	movs	r2, #3
 8005604:	2182      	movs	r1, #130	@ 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005606:	671e      	str	r6, [r3, #112]	@ 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005608:	0020      	movs	r0, r4
 800560a:	2308      	movs	r3, #8
 800560c:	f000 fe2d 	bl	800626a <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005610:	2087      	movs	r0, #135	@ 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005612:	6426      	str	r6, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005614:	0080      	lsls	r0, r0, #2
 8005616:	f000 fe85 	bl	8006324 <USBD_static_malloc>
 800561a:	23ae      	movs	r3, #174	@ 0xae
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	0005      	movs	r5, r0
 8005620:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 8005622:	0030      	movs	r0, r6
  if (pdev->pClassData == NULL)
 8005624:	2d00      	cmp	r5, #0
 8005626:	d015      	beq.n	8005654 <USBD_CDC_Init+0x7e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005628:	3304      	adds	r3, #4
 800562a:	58e3      	ldr	r3, [r4, r3]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005630:	2285      	movs	r2, #133	@ 0x85
 8005632:	2300      	movs	r3, #0
 8005634:	0092      	lsls	r2, r2, #2
 8005636:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 8005638:	3204      	adds	r2, #4
 800563a:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800563c:	7c23      	ldrb	r3, [r4, #16]
 800563e:	3a14      	subs	r2, #20
 8005640:	2b00      	cmp	r3, #0
 8005642:	d111      	bne.n	8005668 <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005644:	2380      	movs	r3, #128	@ 0x80
 8005646:	009b      	lsls	r3, r3, #2
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005648:	0031      	movs	r1, r6
 800564a:	0020      	movs	r0, r4
 800564c:	58aa      	ldr	r2, [r5, r2]
 800564e:	f000 fe58 	bl	8006302 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8005652:	2000      	movs	r0, #0
}
 8005654:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005656:	2340      	movs	r3, #64	@ 0x40
 8005658:	2181      	movs	r1, #129	@ 0x81
 800565a:	2202      	movs	r2, #2
 800565c:	f000 fe05 	bl	800626a <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005660:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005662:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005664:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005666:	e7c5      	b.n	80055f4 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005668:	2340      	movs	r3, #64	@ 0x40
 800566a:	e7ed      	b.n	8005648 <USBD_CDC_Init+0x72>

0800566c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800566c:	0003      	movs	r3, r0
  uint8_t  ret = USBD_FAIL;
 800566e:	2002      	movs	r0, #2

  if (fops != NULL)
 8005670:	2900      	cmp	r1, #0
 8005672:	d003      	beq.n	800567c <USBD_CDC_RegisterInterface+0x10>
  {
    pdev->pUserData = fops;
 8005674:	22af      	movs	r2, #175	@ 0xaf
    ret = USBD_OK;
 8005676:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 8005678:	0092      	lsls	r2, r2, #2
 800567a:	5099      	str	r1, [r3, r2]
  }

  return ret;
}
 800567c:	4770      	bx	lr

0800567e <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800567e:	23ae      	movs	r3, #174	@ 0xae
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8005684:	2082      	movs	r0, #130	@ 0x82
 8005686:	0080      	lsls	r0, r0, #2
 8005688:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 800568a:	2184      	movs	r1, #132	@ 0x84
 800568c:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 800568e:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 8005690:	505a      	str	r2, [r3, r1]
}
 8005692:	4770      	bx	lr

08005694 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005694:	23ae      	movs	r3, #174	@ 0xae
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	58c2      	ldr	r2, [r0, r3]
 800569a:	3bb4      	subs	r3, #180	@ 0xb4

  return USBD_OK;
}
 800569c:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800569e:	50d1      	str	r1, [r2, r3]
}
 80056a0:	4770      	bx	lr

080056a2 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056a2:	23ae      	movs	r3, #174	@ 0xae
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	58c2      	ldr	r2, [r0, r3]
{
 80056a8:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80056aa:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 80056ac:	2a00      	cmp	r2, #0
 80056ae:	d012      	beq.n	80056d6 <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 80056b0:	2185      	movs	r1, #133	@ 0x85
 80056b2:	0089      	lsls	r1, r1, #2
 80056b4:	5854      	ldr	r4, [r2, r1]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	2c00      	cmp	r4, #0
 80056ba:	d10c      	bne.n	80056d6 <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 80056bc:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80056be:	2384      	movs	r3, #132	@ 0x84
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056c4:	390c      	subs	r1, #12
 80056c6:	5852      	ldr	r2, [r2, r1]
 80056c8:	3988      	subs	r1, #136	@ 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80056ca:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80056cc:	39ff      	subs	r1, #255	@ 0xff
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f000 fe0e 	bl	80062f0 <USBD_LL_Transmit>
      return USBD_OK;
 80056d4:	0023      	movs	r3, r4
  }
}
 80056d6:	0018      	movs	r0, r3
 80056d8:	bd10      	pop	{r4, pc}

080056da <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056da:	23ae      	movs	r3, #174	@ 0xae
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	58c2      	ldr	r2, [r0, r3]
{
 80056e0:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 80056e2:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 80056e4:	2a00      	cmp	r2, #0
 80056e6:	d00b      	beq.n	8005700 <USBD_CDC_ReceivePacket+0x26>
      USBD_LL_PrepareReceive(pdev,
 80056e8:	2381      	movs	r3, #129	@ 0x81
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	58d2      	ldr	r2, [r2, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056ee:	7c03      	ldrb	r3, [r0, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <USBD_CDC_ReceivePacket+0x2a>
      USBD_LL_PrepareReceive(pdev,
 80056f4:	2380      	movs	r3, #128	@ 0x80
 80056f6:	009b      	lsls	r3, r3, #2
      USBD_LL_PrepareReceive(pdev,
 80056f8:	2101      	movs	r1, #1
 80056fa:	f000 fe02 	bl	8006302 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80056fe:	2300      	movs	r3, #0
  }
}
 8005700:	0018      	movs	r0, r3
 8005702:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005704:	2340      	movs	r3, #64	@ 0x40
 8005706:	e7f7      	b.n	80056f8 <USBD_CDC_ReceivePacket+0x1e>

08005708 <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005708:	2302      	movs	r3, #2
{
 800570a:	b510      	push	{r4, lr}
  if (pdev == NULL)
 800570c:	2800      	cmp	r0, #0
 800570e:	d013      	beq.n	8005738 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005710:	23ad      	movs	r3, #173	@ 0xad
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	58c4      	ldr	r4, [r0, r3]
 8005716:	2c00      	cmp	r4, #0
 8005718:	d001      	beq.n	800571e <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 800571a:	2400      	movs	r4, #0
 800571c:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800571e:	2900      	cmp	r1, #0
 8005720:	d002      	beq.n	8005728 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8005722:	23ac      	movs	r3, #172	@ 0xac
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005728:	23a7      	movs	r3, #167	@ 0xa7
 800572a:	2101      	movs	r1, #1
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8005730:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005732:	f000 fd51 	bl	80061d8 <USBD_LL_Init>

  return USBD_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	0018      	movs	r0, r3
 800573a:	bd10      	pop	{r4, pc}

0800573c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800573c:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800573e:	2002      	movs	r0, #2
  if (pclass != NULL)
 8005740:	2900      	cmp	r1, #0
 8005742:	d003      	beq.n	800574c <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 8005744:	22ad      	movs	r2, #173	@ 0xad
    status = USBD_OK;
 8005746:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8005748:	0092      	lsls	r2, r2, #2
 800574a:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 800574c:	4770      	bx	lr

0800574e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800574e:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005750:	f000 fd82 	bl	8006258 <USBD_LL_Start>

  return USBD_OK;
}
 8005754:	2000      	movs	r0, #0
 8005756:	bd10      	pop	{r4, pc}

08005758 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005758:	23ad      	movs	r3, #173	@ 0xad
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	58c2      	ldr	r2, [r0, r3]
{
 800575e:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005760:	2302      	movs	r3, #2
  if (pdev->pClass != NULL)
 8005762:	2a00      	cmp	r2, #0
 8005764:	d004      	beq.n	8005770 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005766:	6813      	ldr	r3, [r2, #0]
 8005768:	4798      	blx	r3
 800576a:	1e43      	subs	r3, r0, #1
 800576c:	4198      	sbcs	r0, r3
 800576e:	0043      	lsls	r3, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8005770:	0018      	movs	r0, r3
 8005772:	bd10      	pop	{r4, pc}

08005774 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005774:	23ad      	movs	r3, #173	@ 0xad
{
 8005776:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	58c3      	ldr	r3, [r0, r3]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	4798      	blx	r3

  return USBD_OK;
}
 8005780:	2000      	movs	r0, #0
 8005782:	bd10      	pop	{r4, pc}

08005784 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005784:	23aa      	movs	r3, #170	@ 0xaa
 8005786:	009b      	lsls	r3, r3, #2
{
 8005788:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800578a:	18c5      	adds	r5, r0, r3
{
 800578c:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800578e:	0028      	movs	r0, r5
 8005790:	f000 fb20 	bl	8005dd4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005794:	23a5      	movs	r3, #165	@ 0xa5
 8005796:	2201      	movs	r2, #1
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800579c:	4b11      	ldr	r3, [pc, #68]	@ (80057e4 <USBD_LL_SetupStage+0x60>)
 800579e:	5ae2      	ldrh	r2, [r4, r3]
 80057a0:	3b16      	subs	r3, #22
 80057a2:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80057a4:	3310      	adds	r3, #16
 80057a6:	5ce1      	ldrb	r1, [r4, r3]
 80057a8:	231f      	movs	r3, #31
 80057aa:	400b      	ands	r3, r1
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d009      	beq.n	80057c4 <USBD_LL_SetupStage+0x40>
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d00c      	beq.n	80057ce <USBD_LL_SetupStage+0x4a>
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10f      	bne.n	80057d8 <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80057b8:	0029      	movs	r1, r5
 80057ba:	0020      	movs	r0, r4
 80057bc:	f000 f91a 	bl	80059f4 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80057c0:	2000      	movs	r0, #0
 80057c2:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80057c4:	0029      	movs	r1, r5
 80057c6:	0020      	movs	r0, r4
 80057c8:	f000 fa4a 	bl	8005c60 <USBD_StdItfReq>
      break;
 80057cc:	e7f8      	b.n	80057c0 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 80057ce:	0029      	movs	r1, r5
 80057d0:	0020      	movs	r0, r4
 80057d2:	f000 fa6d 	bl	8005cb0 <USBD_StdEPReq>
      break;
 80057d6:	e7f3      	b.n	80057c0 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80057d8:	237f      	movs	r3, #127	@ 0x7f
 80057da:	0020      	movs	r0, r4
 80057dc:	4399      	bics	r1, r3
 80057de:	f000 fd59 	bl	8006294 <USBD_LL_StallEP>
      break;
 80057e2:	e7ed      	b.n	80057c0 <USBD_LL_SetupStage+0x3c>
 80057e4:	000002ae 	.word	0x000002ae

080057e8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	0004      	movs	r4, r0
 80057ec:	0015      	movs	r5, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80057ee:	2900      	cmp	r1, #0
 80057f0:	d12e      	bne.n	8005850 <USBD_LL_DataOutStage+0x68>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057f2:	23a5      	movs	r3, #165	@ 0xa5
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	58c2      	ldr	r2, [r0, r3]
 80057f8:	2a03      	cmp	r2, #3
 80057fa:	d123      	bne.n	8005844 <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 80057fc:	0002      	movs	r2, r0
 80057fe:	3255      	adds	r2, #85	@ 0x55
 8005800:	32ff      	adds	r2, #255	@ 0xff
 8005802:	68d3      	ldr	r3, [r2, #12]
 8005804:	6910      	ldr	r0, [r2, #16]
 8005806:	4283      	cmp	r3, r0
 8005808:	d90b      	bls.n	8005822 <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 800580a:	1a1b      	subs	r3, r3, r0
 800580c:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 800580e:	b282      	uxth	r2, r0
 8005810:	4298      	cmp	r0, r3
 8005812:	d900      	bls.n	8005816 <USBD_LL_DataOutStage+0x2e>
 8005814:	b29a      	uxth	r2, r3
 8005816:	0029      	movs	r1, r5
 8005818:	0020      	movs	r0, r4
 800581a:	f000 fb3c 	bl	8005e96 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800581e:	2000      	movs	r0, #0
}
 8005820:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005822:	23ad      	movs	r3, #173	@ 0xad
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	58e3      	ldr	r3, [r4, r3]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d006      	beq.n	800583c <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800582e:	22a7      	movs	r2, #167	@ 0xa7
 8005830:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005832:	5ca2      	ldrb	r2, [r4, r2]
 8005834:	2a03      	cmp	r2, #3
 8005836:	d101      	bne.n	800583c <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8005838:	0020      	movs	r0, r4
 800583a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800583c:	0020      	movs	r0, r4
 800583e:	f000 fb32 	bl	8005ea6 <USBD_CtlSendStatus>
 8005842:	e7ec      	b.n	800581e <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005844:	2a05      	cmp	r2, #5
 8005846:	d1ea      	bne.n	800581e <USBD_LL_DataOutStage+0x36>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005848:	50c1      	str	r1, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 800584a:	f000 fd23 	bl	8006294 <USBD_LL_StallEP>
 800584e:	e7e6      	b.n	800581e <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005850:	23ad      	movs	r3, #173	@ 0xad
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 8005856:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0e0      	beq.n	8005820 <USBD_LL_DataOutStage+0x38>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800585e:	22a7      	movs	r2, #167	@ 0xa7
 8005860:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8005862:	5ca2      	ldrb	r2, [r4, r2]
 8005864:	2a03      	cmp	r2, #3
 8005866:	d1db      	bne.n	8005820 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 8005868:	0020      	movs	r0, r4
 800586a:	4798      	blx	r3
 800586c:	e7d7      	b.n	800581e <USBD_LL_DataOutStage+0x36>

0800586e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800586e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005870:	000d      	movs	r5, r1
 8005872:	0004      	movs	r4, r0
 8005874:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005876:	2d00      	cmp	r5, #0
 8005878:	d14d      	bne.n	8005916 <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800587a:	23a5      	movs	r3, #165	@ 0xa5
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	58c3      	ldr	r3, [r0, r3]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d13e      	bne.n	8005902 <USBD_LL_DataInStage+0x94>
    {
      if (pep->rem_length > pep->maxpacket)
 8005884:	6a03      	ldr	r3, [r0, #32]
 8005886:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8005888:	42b3      	cmp	r3, r6
 800588a:	d911      	bls.n	80058b0 <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 800588c:	1b9b      	subs	r3, r3, r6
 800588e:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005890:	b29a      	uxth	r2, r3
 8005892:	f000 fae8 	bl	8005e66 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005896:	002b      	movs	r3, r5
 8005898:	002a      	movs	r2, r5
 800589a:	0029      	movs	r1, r5
 800589c:	0020      	movs	r0, r4
 800589e:	f000 fd30 	bl	8006302 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80058a2:	23a8      	movs	r3, #168	@ 0xa8
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	5ce2      	ldrb	r2, [r4, r3]
 80058a8:	2a01      	cmp	r2, #1
 80058aa:	d031      	beq.n	8005910 <USBD_LL_DataInStage+0xa2>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80058ac:	2000      	movs	r0, #0
}
 80058ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80058b0:	69c7      	ldr	r7, [r0, #28]
 80058b2:	0031      	movs	r1, r6
 80058b4:	0038      	movs	r0, r7
 80058b6:	f7fa fcdd 	bl	8000274 <__aeabi_uidivmod>
 80058ba:	1e0d      	subs	r5, r1, #0
 80058bc:	d10c      	bne.n	80058d8 <USBD_LL_DataInStage+0x6a>
 80058be:	42be      	cmp	r6, r7
 80058c0:	d80a      	bhi.n	80058d8 <USBD_LL_DataInStage+0x6a>
            (pep->total_length < pdev->ep0_data_len))
 80058c2:	26a6      	movs	r6, #166	@ 0xa6
 80058c4:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 80058c6:	59a3      	ldr	r3, [r4, r6]
 80058c8:	429f      	cmp	r7, r3
 80058ca:	d205      	bcs.n	80058d8 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058cc:	000a      	movs	r2, r1
 80058ce:	0020      	movs	r0, r4
 80058d0:	f000 fac9 	bl	8005e66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058d4:	51a5      	str	r5, [r4, r6]
 80058d6:	e7de      	b.n	8005896 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058d8:	23ad      	movs	r3, #173	@ 0xad
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	58e3      	ldr	r3, [r4, r3]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d006      	beq.n	80058f2 <USBD_LL_DataInStage+0x84>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058e4:	22a7      	movs	r2, #167	@ 0xa7
 80058e6:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058e8:	5ca2      	ldrb	r2, [r4, r2]
 80058ea:	2a03      	cmp	r2, #3
 80058ec:	d101      	bne.n	80058f2 <USBD_LL_DataInStage+0x84>
            pdev->pClass->EP0_TxSent(pdev);
 80058ee:	0020      	movs	r0, r4
 80058f0:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80058f2:	2180      	movs	r1, #128	@ 0x80
 80058f4:	0020      	movs	r0, r4
 80058f6:	f000 fccd 	bl	8006294 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80058fa:	0020      	movs	r0, r4
 80058fc:	f000 fadf 	bl	8005ebe <USBD_CtlReceiveStatus>
 8005900:	e7cf      	b.n	80058a2 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005902:	2204      	movs	r2, #4
 8005904:	4393      	bics	r3, r2
 8005906:	d1cc      	bne.n	80058a2 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8005908:	2180      	movs	r1, #128	@ 0x80
 800590a:	f000 fcc3 	bl	8006294 <USBD_LL_StallEP>
 800590e:	e7c8      	b.n	80058a2 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8005910:	2200      	movs	r2, #0
 8005912:	54e2      	strb	r2, [r4, r3]
 8005914:	e7ca      	b.n	80058ac <USBD_LL_DataInStage+0x3e>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005916:	23ad      	movs	r3, #173	@ 0xad
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 800591c:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0c4      	beq.n	80058ae <USBD_LL_DataInStage+0x40>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005924:	22a7      	movs	r2, #167	@ 0xa7
 8005926:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8005928:	5ca2      	ldrb	r2, [r4, r2]
 800592a:	2a03      	cmp	r2, #3
 800592c:	d1bf      	bne.n	80058ae <USBD_LL_DataInStage+0x40>
    pdev->pClass->DataIn(pdev, epnum);
 800592e:	0029      	movs	r1, r5
 8005930:	0020      	movs	r0, r4
 8005932:	4798      	blx	r3
 8005934:	e7ba      	b.n	80058ac <USBD_LL_DataInStage+0x3e>

08005936 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005936:	2200      	movs	r2, #0
{
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800593c:	0011      	movs	r1, r2
 800593e:	2340      	movs	r3, #64	@ 0x40
 8005940:	f000 fc93 	bl	800626a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005944:	0023      	movs	r3, r4
 8005946:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005948:	2640      	movs	r6, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800594a:	33fc      	adds	r3, #252	@ 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800594c:	2180      	movs	r1, #128	@ 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800594e:	65dd      	str	r5, [r3, #92]	@ 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005950:	669e      	str	r6, [r3, #104]	@ 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005952:	2200      	movs	r2, #0
 8005954:	0033      	movs	r3, r6
 8005956:	0020      	movs	r0, r4
 8005958:	f000 fc87 	bl	800626a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800595c:	23a7      	movs	r3, #167	@ 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 800595e:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005960:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005962:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005964:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005966:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005968:	3b08      	subs	r3, #8
 800596a:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 800596c:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 800596e:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005970:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8005972:	3314      	adds	r3, #20
 8005974:	58e3      	ldr	r3, [r4, r3]
 8005976:	428b      	cmp	r3, r1
 8005978:	d005      	beq.n	8005986 <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800597a:	23ad      	movs	r3, #173	@ 0xad
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	58e3      	ldr	r3, [r4, r3]
 8005980:	0020      	movs	r0, r4
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005986:	2000      	movs	r0, #0
 8005988:	bd70      	pop	{r4, r5, r6, pc}

0800598a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800598a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800598c:	2000      	movs	r0, #0
 800598e:	4770      	bx	lr

08005990 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005990:	23a7      	movs	r3, #167	@ 0xa7
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	5cc1      	ldrb	r1, [r0, r3]
 8005996:	4a03      	ldr	r2, [pc, #12]	@ (80059a4 <USBD_LL_Suspend+0x14>)
 8005998:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800599a:	2204      	movs	r2, #4
 800599c:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 800599e:	2000      	movs	r0, #0
 80059a0:	4770      	bx	lr
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	0000029d 	.word	0x0000029d

080059a8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059a8:	23a7      	movs	r3, #167	@ 0xa7
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	5cc2      	ldrb	r2, [r0, r3]
 80059ae:	2a04      	cmp	r2, #4
 80059b0:	d102      	bne.n	80059b8 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059b2:	4a02      	ldr	r2, [pc, #8]	@ (80059bc <USBD_LL_Resume+0x14>)
 80059b4:	5c82      	ldrb	r2, [r0, r2]
 80059b6:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 80059b8:	2000      	movs	r0, #0
 80059ba:	4770      	bx	lr
 80059bc:	0000029d 	.word	0x0000029d

080059c0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c0:	23a7      	movs	r3, #167	@ 0xa7
{
 80059c2:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	5cc3      	ldrb	r3, [r0, r3]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d106      	bne.n	80059da <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 80059cc:	23ad      	movs	r3, #173	@ 0xad
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	58c3      	ldr	r3, [r0, r3]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d000      	beq.n	80059da <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 80059d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80059da:	2000      	movs	r0, #0
 80059dc:	bd10      	pop	{r4, pc}

080059de <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80059de:	b510      	push	{r4, lr}
 80059e0:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80059e2:	2180      	movs	r1, #128	@ 0x80
 80059e4:	f000 fc56 	bl	8006294 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80059e8:	2100      	movs	r1, #0
 80059ea:	0020      	movs	r0, r4
 80059ec:	f000 fc52 	bl	8006294 <USBD_LL_StallEP>
}
 80059f0:	bd10      	pop	{r4, pc}
	...

080059f4 <USBD_StdDevReq>:
{
 80059f4:	2260      	movs	r2, #96	@ 0x60
 80059f6:	780b      	ldrb	r3, [r1, #0]
 80059f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059fa:	4013      	ands	r3, r2
 80059fc:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059fe:	0019      	movs	r1, r3
 8005a00:	1892      	adds	r2, r2, r2
 8005a02:	3920      	subs	r1, #32
{
 8005a04:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a06:	4211      	tst	r1, r2
 8005a08:	d012      	beq.n	8005a30 <USBD_StdDevReq+0x3c>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d000      	beq.n	8005a10 <USBD_StdDevReq+0x1c>
 8005a0e:	e096      	b.n	8005b3e <USBD_StdDevReq+0x14a>
      switch (req->bRequest)
 8005a10:	7868      	ldrb	r0, [r5, #1]
 8005a12:	2809      	cmp	r0, #9
 8005a14:	d900      	bls.n	8005a18 <USBD_StdDevReq+0x24>
 8005a16:	e092      	b.n	8005b3e <USBD_StdDevReq+0x14a>
 8005a18:	f7fa fb9c 	bl	8000154 <__gnu_thumb1_case_uhi>
 8005a1c:	010d00f0 	.word	0x010d00f0
 8005a20:	01050091 	.word	0x01050091
 8005a24:	00830091 	.word	0x00830091
 8005a28:	00910012 	.word	0x00910012
 8005a2c:	00a400da 	.word	0x00a400da
      pdev->pClass->Setup(pdev, req);
 8005a30:	23ad      	movs	r3, #173	@ 0xad
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	58c3      	ldr	r3, [r0, r3]
 8005a36:	0029      	movs	r1, r5
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	4798      	blx	r3
}
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	466a      	mov	r2, sp
 8005a44:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 8005a46:	886b      	ldrh	r3, [r5, #2]
 8005a48:	0a18      	lsrs	r0, r3, #8
 8005a4a:	3801      	subs	r0, #1
 8005a4c:	2806      	cmp	r0, #6
 8005a4e:	d876      	bhi.n	8005b3e <USBD_StdDevReq+0x14a>
 8005a50:	f7fa fb6c 	bl	800012c <__gnu_thumb1_case_uqi>
 8005a54:	75261704 	.word	0x75261704
 8005a58:	4075      	.short	0x4075
 8005a5a:	4b          	.byte	0x4b
 8005a5b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a5c:	23ac      	movs	r3, #172	@ 0xac
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	58e3      	ldr	r3, [r4, r3]
 8005a62:	7c20      	ldrb	r0, [r4, #16]
 8005a64:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a66:	466a      	mov	r2, sp
 8005a68:	1d91      	adds	r1, r2, #6
 8005a6a:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005a6c:	466b      	mov	r3, sp
 8005a6e:	88d9      	ldrh	r1, [r3, #6]
 8005a70:	88ea      	ldrh	r2, [r5, #6]
 8005a72:	2900      	cmp	r1, #0
 8005a74:	d050      	beq.n	8005b18 <USBD_StdDevReq+0x124>
 8005a76:	2a00      	cmp	r2, #0
 8005a78:	d143      	bne.n	8005b02 <USBD_StdDevReq+0x10e>
        USBD_CtlSendStatus(pdev);
 8005a7a:	0020      	movs	r0, r4
 8005a7c:	f000 fa13 	bl	8005ea6 <USBD_CtlSendStatus>
 8005a80:	e7dc      	b.n	8005a3c <USBD_StdDevReq+0x48>
      pdev->pClass->Setup(pdev, req);
 8005a82:	23ad      	movs	r3, #173	@ 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a84:	7c22      	ldrb	r2, [r4, #16]
      pdev->pClass->Setup(pdev, req);
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	d106      	bne.n	8005a9c <USBD_StdDevReq+0xa8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a90:	466a      	mov	r2, sp
 8005a92:	1d90      	adds	r0, r2, #6
 8005a94:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a96:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005a98:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005a9a:	e7e7      	b.n	8005a6c <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	e7f7      	b.n	8005a90 <USBD_StdDevReq+0x9c>
      switch ((uint8_t)(req->wValue))
 8005aa0:	b2d8      	uxtb	r0, r3
 8005aa2:	2805      	cmp	r0, #5
 8005aa4:	d84b      	bhi.n	8005b3e <USBD_StdDevReq+0x14a>
 8005aa6:	23ac      	movs	r3, #172	@ 0xac
 8005aa8:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005aaa:	58e3      	ldr	r3, [r4, r3]
 8005aac:	f7fa fb3e 	bl	800012c <__gnu_thumb1_case_uqi>
 8005ab0:	0c0a0803 	.word	0x0c0a0803
 8005ab4:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d040      	beq.n	8005b3e <USBD_StdDevReq+0x14a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005abc:	7c20      	ldrb	r0, [r4, #16]
 8005abe:	e7d2      	b.n	8005a66 <USBD_StdDevReq+0x72>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	e7f9      	b.n	8005ab8 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	e7f7      	b.n	8005ab8 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	e7f5      	b.n	8005ab8 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	e7f3      	b.n	8005ab8 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	e7f1      	b.n	8005ab8 <USBD_StdDevReq+0xc4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ad4:	7c23      	ldrb	r3, [r4, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d131      	bne.n	8005b3e <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ada:	23ad      	movs	r3, #173	@ 0xad
 8005adc:	466a      	mov	r2, sp
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	58e3      	ldr	r3, [r4, r3]
 8005ae2:	1d90      	adds	r0, r2, #6
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae6:	4798      	blx	r3
  if (err != 0U)
 8005ae8:	e7c0      	b.n	8005a6c <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005aea:	7c23      	ldrb	r3, [r4, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d126      	bne.n	8005b3e <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005af0:	23ad      	movs	r3, #173	@ 0xad
 8005af2:	466a      	mov	r2, sp
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	58e3      	ldr	r3, [r4, r3]
 8005af8:	1d90      	adds	r0, r2, #6
 8005afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005afe:	2307      	movs	r3, #7
 8005b00:	e7ca      	b.n	8005a98 <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 8005b02:	1c0b      	adds	r3, r1, #0
 8005b04:	4291      	cmp	r1, r2
 8005b06:	d900      	bls.n	8005b0a <USBD_StdDevReq+0x116>
 8005b08:	1c13      	adds	r3, r2, #0
 8005b0a:	4669      	mov	r1, sp
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b10:	0001      	movs	r1, r0
 8005b12:	0020      	movs	r0, r4
 8005b14:	f000 f999 	bl	8005e4a <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005b18:	88eb      	ldrh	r3, [r5, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d000      	beq.n	8005b20 <USBD_StdDevReq+0x12c>
 8005b1e:	e78d      	b.n	8005a3c <USBD_StdDevReq+0x48>
 8005b20:	e7ab      	b.n	8005a7a <USBD_StdDevReq+0x86>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b22:	88ab      	ldrh	r3, [r5, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <USBD_StdDevReq+0x14a>
 8005b28:	88eb      	ldrh	r3, [r5, #6]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <USBD_StdDevReq+0x14a>
 8005b2e:	886e      	ldrh	r6, [r5, #2]
 8005b30:	2e7f      	cmp	r6, #127	@ 0x7f
 8005b32:	d804      	bhi.n	8005b3e <USBD_StdDevReq+0x14a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b34:	25a7      	movs	r5, #167	@ 0xa7
 8005b36:	00ad      	lsls	r5, r5, #2
 8005b38:	5d63      	ldrb	r3, [r4, r5]
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d103      	bne.n	8005b46 <USBD_StdDevReq+0x152>
        USBD_CtlError(pdev, req);
 8005b3e:	0020      	movs	r0, r4
 8005b40:	f7ff ff4d 	bl	80059de <USBD_CtlError.constprop.0>
        break;
 8005b44:	e77a      	b.n	8005a3c <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 8005b46:	4b44      	ldr	r3, [pc, #272]	@ (8005c58 <USBD_StdDevReq+0x264>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b48:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8005b4a:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b4c:	0020      	movs	r0, r4
 8005b4e:	f000 fbc6 	bl	80062de <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005b52:	0020      	movs	r0, r4
 8005b54:	f000 f9a7 	bl	8005ea6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b58:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	d100      	bne.n	8005b60 <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	5563      	strb	r3, [r4, r5]
 8005b62:	e76b      	b.n	8005a3c <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 8005b64:	78a9      	ldrb	r1, [r5, #2]
 8005b66:	4d3d      	ldr	r5, [pc, #244]	@ (8005c5c <USBD_StdDevReq+0x268>)
 8005b68:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005b6a:	2901      	cmp	r1, #1
 8005b6c:	d8e7      	bhi.n	8005b3e <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 8005b6e:	23a7      	movs	r3, #167	@ 0xa7
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	5ce2      	ldrb	r2, [r4, r3]
 8005b74:	2a02      	cmp	r2, #2
 8005b76:	d009      	beq.n	8005b8c <USBD_StdDevReq+0x198>
 8005b78:	2a03      	cmp	r2, #3
 8005b7a:	d015      	beq.n	8005ba8 <USBD_StdDevReq+0x1b4>
        USBD_CtlError(pdev, req);
 8005b7c:	0020      	movs	r0, r4
 8005b7e:	f7ff ff2e 	bl	80059de <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005b82:	0020      	movs	r0, r4
 8005b84:	7829      	ldrb	r1, [r5, #0]
 8005b86:	f7ff fdf5 	bl	8005774 <USBD_ClrClassConfig>
        break;
 8005b8a:	e757      	b.n	8005a3c <USBD_StdDevReq+0x48>
        if (cfgidx)
 8005b8c:	2900      	cmp	r1, #0
 8005b8e:	d100      	bne.n	8005b92 <USBD_StdDevReq+0x19e>
 8005b90:	e773      	b.n	8005a7a <USBD_StdDevReq+0x86>
          pdev->dev_config = cfgidx;
 8005b92:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005b94:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 8005b96:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005b98:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005b9a:	0020      	movs	r0, r4
 8005b9c:	f7ff fddc 	bl	8005758 <USBD_SetClassConfig>
 8005ba0:	2802      	cmp	r0, #2
 8005ba2:	d000      	beq.n	8005ba6 <USBD_StdDevReq+0x1b2>
 8005ba4:	e769      	b.n	8005a7a <USBD_StdDevReq+0x86>
 8005ba6:	e7ca      	b.n	8005b3e <USBD_StdDevReq+0x14a>
        if (cfgidx == 0U)
 8005ba8:	2900      	cmp	r1, #0
 8005baa:	d106      	bne.n	8005bba <USBD_StdDevReq+0x1c6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bac:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8005bae:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bb0:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8005bb2:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005bb4:	f7ff fdde 	bl	8005774 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005bb8:	e75f      	b.n	8005a7a <USBD_StdDevReq+0x86>
        else if (cfgidx != pdev->dev_config)
 8005bba:	6861      	ldr	r1, [r4, #4]
 8005bbc:	2901      	cmp	r1, #1
 8005bbe:	d100      	bne.n	8005bc2 <USBD_StdDevReq+0x1ce>
 8005bc0:	e75b      	b.n	8005a7a <USBD_StdDevReq+0x86>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005bc2:	b2c9      	uxtb	r1, r1
 8005bc4:	0020      	movs	r0, r4
 8005bc6:	f7ff fdd5 	bl	8005774 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005bca:	7829      	ldrb	r1, [r5, #0]
 8005bcc:	6061      	str	r1, [r4, #4]
 8005bce:	e7e4      	b.n	8005b9a <USBD_StdDevReq+0x1a6>
  if (req->wLength != 1U)
 8005bd0:	88ea      	ldrh	r2, [r5, #6]
 8005bd2:	2a01      	cmp	r2, #1
 8005bd4:	d1b3      	bne.n	8005b3e <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 8005bd6:	23a7      	movs	r3, #167	@ 0xa7
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	5ce3      	ldrb	r3, [r4, r3]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d806      	bhi.n	8005bee <USBD_StdDevReq+0x1fa>
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0ac      	beq.n	8005b3e <USBD_StdDevReq+0x14a>
        pdev->dev_default_config = 0U;
 8005be4:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005be6:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8005be8:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005bea:	3108      	adds	r1, #8
 8005bec:	e002      	b.n	8005bf4 <USBD_StdDevReq+0x200>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005bee:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d1a4      	bne.n	8005b3e <USBD_StdDevReq+0x14a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005bf4:	0020      	movs	r0, r4
 8005bf6:	f000 f928 	bl	8005e4a <USBD_CtlSendData>
      break;
 8005bfa:	e71f      	b.n	8005a3c <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8005bfc:	23a7      	movs	r3, #167	@ 0xa7
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	5ce3      	ldrb	r3, [r4, r3]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d89a      	bhi.n	8005b3e <USBD_StdDevReq+0x14a>
      if (req->wLength != 0x2U)
 8005c08:	88eb      	ldrh	r3, [r5, #6]
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d197      	bne.n	8005b3e <USBD_StdDevReq+0x14a>
      if (pdev->dev_remote_wakeup)
 8005c0e:	23a9      	movs	r3, #169	@ 0xa9
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	58e2      	ldr	r2, [r4, r3]
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c14:	2301      	movs	r3, #1
      if (pdev->dev_remote_wakeup)
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	d000      	beq.n	8005c1c <USBD_StdDevReq+0x228>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c1a:	3302      	adds	r3, #2
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005c1c:	0021      	movs	r1, r4
 8005c1e:	2202      	movs	r2, #2
 8005c20:	60e3      	str	r3, [r4, #12]
 8005c22:	310c      	adds	r1, #12
 8005c24:	e7e6      	b.n	8005bf4 <USBD_StdDevReq+0x200>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c26:	886b      	ldrh	r3, [r5, #2]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d000      	beq.n	8005c2e <USBD_StdDevReq+0x23a>
 8005c2c:	e706      	b.n	8005a3c <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 8005c2e:	22a9      	movs	r2, #169	@ 0xa9
 8005c30:	0092      	lsls	r2, r2, #2
 8005c32:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 8005c34:	e721      	b.n	8005a7a <USBD_StdDevReq+0x86>
  switch (pdev->dev_state)
 8005c36:	23a7      	movs	r3, #167	@ 0xa7
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	5ce3      	ldrb	r3, [r4, r3]
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d900      	bls.n	8005c44 <USBD_StdDevReq+0x250>
 8005c42:	e77c      	b.n	8005b3e <USBD_StdDevReq+0x14a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c44:	886b      	ldrh	r3, [r5, #2]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d000      	beq.n	8005c4c <USBD_StdDevReq+0x258>
 8005c4a:	e6f7      	b.n	8005a3c <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8005c4c:	23a9      	movs	r3, #169	@ 0xa9
 8005c4e:	2200      	movs	r2, #0
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	50e2      	str	r2, [r4, r3]
 8005c54:	e711      	b.n	8005a7a <USBD_StdDevReq+0x86>
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	0000029e 	.word	0x0000029e
 8005c5c:	20000838 	.word	0x20000838

08005c60 <USBD_StdItfReq>:
{
 8005c60:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c62:	780a      	ldrb	r2, [r1, #0]
{
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	4013      	ands	r3, r2
 8005c68:	0004      	movs	r4, r0
 8005c6a:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c6c:	0652      	lsls	r2, r2, #25
 8005c6e:	d501      	bpl.n	8005c74 <USBD_StdItfReq+0x14>
 8005c70:	2b40      	cmp	r3, #64	@ 0x40
 8005c72:	d119      	bne.n	8005ca8 <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 8005c74:	23a7      	movs	r3, #167	@ 0xa7
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	5ce3      	ldrb	r3, [r4, r3]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d813      	bhi.n	8005ca8 <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c80:	792b      	ldrb	r3, [r5, #4]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d810      	bhi.n	8005ca8 <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c86:	23ad      	movs	r3, #173	@ 0xad
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	58e3      	ldr	r3, [r4, r3]
 8005c8c:	0029      	movs	r1, r5
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	0020      	movs	r0, r4
 8005c92:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c94:	88eb      	ldrh	r3, [r5, #6]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d104      	bne.n	8005ca4 <USBD_StdItfReq+0x44>
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d102      	bne.n	8005ca4 <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	f000 f901 	bl	8005ea6 <USBD_CtlSendStatus>
}
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8005ca8:	0020      	movs	r0, r4
 8005caa:	f7ff fe98 	bl	80059de <USBD_CtlError.constprop.0>
          break;
 8005cae:	e7f9      	b.n	8005ca4 <USBD_StdItfReq+0x44>

08005cb0 <USBD_StdEPReq>:
{
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	780a      	ldrb	r2, [r1, #0]
 8005cb4:	0004      	movs	r4, r0
 8005cb6:	000b      	movs	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8005cb8:	8888      	ldrh	r0, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cba:	2160      	movs	r1, #96	@ 0x60
 8005cbc:	400a      	ands	r2, r1
 8005cbe:	0015      	movs	r5, r2
 8005cc0:	1849      	adds	r1, r1, r1
 8005cc2:	3d20      	subs	r5, #32
 8005cc4:	420d      	tst	r5, r1
 8005cc6:	d026      	beq.n	8005d16 <USBD_StdEPReq+0x66>
 8005cc8:	2a00      	cmp	r2, #0
 8005cca:	d134      	bne.n	8005d36 <USBD_StdEPReq+0x86>
      switch (req->bRequest)
 8005ccc:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005cce:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 8005cd0:	2a01      	cmp	r2, #1
 8005cd2:	d043      	beq.n	8005d5c <USBD_StdEPReq+0xac>
 8005cd4:	2a03      	cmp	r2, #3
 8005cd6:	d027      	beq.n	8005d28 <USBD_StdEPReq+0x78>
 8005cd8:	2a00      	cmp	r2, #0
 8005cda:	d12c      	bne.n	8005d36 <USBD_StdEPReq+0x86>
          switch (pdev->dev_state)
 8005cdc:	23a7      	movs	r3, #167	@ 0xa7
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	5ce3      	ldrb	r3, [r4, r3]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d054      	beq.n	8005d90 <USBD_StdEPReq+0xe0>
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d125      	bne.n	8005d36 <USBD_StdEPReq+0x86>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cea:	230f      	movs	r3, #15
 8005cec:	2214      	movs	r2, #20
 8005cee:	400b      	ands	r3, r1
 8005cf0:	4353      	muls	r3, r2
 8005cf2:	18e3      	adds	r3, r4, r3
              if ((ep_addr & 0x80U) == 0x80U)
 8005cf4:	0600      	lsls	r0, r0, #24
 8005cf6:	d55b      	bpl.n	8005db0 <USBD_StdEPReq+0x100>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d01b      	beq.n	8005d36 <USBD_StdEPReq+0x86>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cfe:	237f      	movs	r3, #127	@ 0x7f
 8005d00:	400b      	ands	r3, r1
 8005d02:	3301      	adds	r3, #1
 8005d04:	4353      	muls	r3, r2
 8005d06:	18e5      	adds	r5, r4, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d08:	064b      	lsls	r3, r1, #25
 8005d0a:	d15c      	bne.n	8005dc6 <USBD_StdEPReq+0x116>
{
 8005d0c:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d0e:	2202      	movs	r2, #2
 8005d10:	0029      	movs	r1, r5
                pep->status = 0x0000U;
 8005d12:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005d14:	e048      	b.n	8005da8 <USBD_StdEPReq+0xf8>
      pdev->pClass->Setup(pdev, req);
 8005d16:	22ad      	movs	r2, #173	@ 0xad
 8005d18:	0092      	lsls	r2, r2, #2
 8005d1a:	58a2      	ldr	r2, [r4, r2]
 8005d1c:	0019      	movs	r1, r3
 8005d1e:	0020      	movs	r0, r4
 8005d20:	6892      	ldr	r2, [r2, #8]
 8005d22:	4790      	blx	r2
}
 8005d24:	2000      	movs	r0, #0
 8005d26:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8005d28:	22a7      	movs	r2, #167	@ 0xa7
 8005d2a:	0092      	lsls	r2, r2, #2
 8005d2c:	5ca2      	ldrb	r2, [r4, r2]
 8005d2e:	2a02      	cmp	r2, #2
 8005d30:	d024      	beq.n	8005d7c <USBD_StdEPReq+0xcc>
 8005d32:	2a03      	cmp	r2, #3
 8005d34:	d003      	beq.n	8005d3e <USBD_StdEPReq+0x8e>
              USBD_CtlError(pdev, req);
 8005d36:	0020      	movs	r0, r4
 8005d38:	f7ff fe51 	bl	80059de <USBD_CtlError.constprop.0>
              break;
 8005d3c:	e7f2      	b.n	8005d24 <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d3e:	885a      	ldrh	r2, [r3, #2]
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	d107      	bne.n	8005d54 <USBD_StdEPReq+0xa4>
                if ((ep_addr != 0x00U) &&
 8005d44:	064a      	lsls	r2, r1, #25
 8005d46:	d005      	beq.n	8005d54 <USBD_StdEPReq+0xa4>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d48:	88db      	ldrh	r3, [r3, #6]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d102      	bne.n	8005d54 <USBD_StdEPReq+0xa4>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005d4e:	0020      	movs	r0, r4
 8005d50:	f000 faa0 	bl	8006294 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005d54:	0020      	movs	r0, r4
 8005d56:	f000 f8a6 	bl	8005ea6 <USBD_CtlSendStatus>
              break;
 8005d5a:	e7e3      	b.n	8005d24 <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 8005d5c:	22a7      	movs	r2, #167	@ 0xa7
 8005d5e:	0092      	lsls	r2, r2, #2
 8005d60:	5ca2      	ldrb	r2, [r4, r2]
 8005d62:	2a02      	cmp	r2, #2
 8005d64:	d00a      	beq.n	8005d7c <USBD_StdEPReq+0xcc>
 8005d66:	2a03      	cmp	r2, #3
 8005d68:	d1e5      	bne.n	8005d36 <USBD_StdEPReq+0x86>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d6a:	885b      	ldrh	r3, [r3, #2]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1d9      	bne.n	8005d24 <USBD_StdEPReq+0x74>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005d70:	064b      	lsls	r3, r1, #25
 8005d72:	d0ef      	beq.n	8005d54 <USBD_StdEPReq+0xa4>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d74:	0020      	movs	r0, r4
 8005d76:	f000 fa96 	bl	80062a6 <USBD_LL_ClearStallEP>
 8005d7a:	e7eb      	b.n	8005d54 <USBD_StdEPReq+0xa4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d7c:	064b      	lsls	r3, r1, #25
 8005d7e:	d0da      	beq.n	8005d36 <USBD_StdEPReq+0x86>
                USBD_LL_StallEP(pdev, ep_addr);
 8005d80:	0020      	movs	r0, r4
 8005d82:	f000 fa87 	bl	8006294 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005d86:	2180      	movs	r1, #128	@ 0x80
 8005d88:	0020      	movs	r0, r4
 8005d8a:	f000 fa83 	bl	8006294 <USBD_LL_StallEP>
 8005d8e:	e7c9      	b.n	8005d24 <USBD_StdEPReq+0x74>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d90:	0649      	lsls	r1, r1, #25
 8005d92:	d1d0      	bne.n	8005d36 <USBD_StdEPReq+0x86>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d94:	0021      	movs	r1, r4
 8005d96:	3155      	adds	r1, #85	@ 0x55
 8005d98:	31ff      	adds	r1, #255	@ 0xff
 8005d9a:	0600      	lsls	r0, r0, #24
 8005d9c:	d501      	bpl.n	8005da2 <USBD_StdEPReq+0xf2>
 8005d9e:	3941      	subs	r1, #65	@ 0x41
 8005da0:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 8005da2:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005da4:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8005da6:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005da8:	0020      	movs	r0, r4
 8005daa:	f000 f84e 	bl	8005e4a <USBD_CtlSendData>
              break;
 8005dae:	e7b9      	b.n	8005d24 <USBD_StdEPReq+0x74>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005db0:	33fc      	adds	r3, #252	@ 0xfc
 8005db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0be      	beq.n	8005d36 <USBD_StdEPReq+0x86>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005db8:	237f      	movs	r3, #127	@ 0x7f
 8005dba:	400b      	ands	r3, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dbc:	435a      	muls	r2, r3
 8005dbe:	3255      	adds	r2, #85	@ 0x55
 8005dc0:	32ff      	adds	r2, #255	@ 0xff
 8005dc2:	18a5      	adds	r5, r4, r2
 8005dc4:	e7a0      	b.n	8005d08 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005dc6:	0020      	movs	r0, r4
 8005dc8:	f000 fa76 	bl	80062b8 <USBD_LL_IsStallEP>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d09d      	beq.n	8005d0c <USBD_StdEPReq+0x5c>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e79c      	b.n	8005d0e <USBD_StdEPReq+0x5e>

08005dd4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005dd4:	780b      	ldrb	r3, [r1, #0]
 8005dd6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005dd8:	784b      	ldrb	r3, [r1, #1]
 8005dda:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005ddc:	78cb      	ldrb	r3, [r1, #3]
 8005dde:	788a      	ldrb	r2, [r1, #2]
 8005de0:	021b      	lsls	r3, r3, #8
 8005de2:	4313      	orrs	r3, r2
 8005de4:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005de6:	794b      	ldrb	r3, [r1, #5]
 8005de8:	790a      	ldrb	r2, [r1, #4]
 8005dea:	021b      	lsls	r3, r3, #8
 8005dec:	4313      	orrs	r3, r2
 8005dee:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005df0:	79cb      	ldrb	r3, [r1, #7]
 8005df2:	798a      	ldrb	r2, [r1, #6]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	4313      	orrs	r3, r2
 8005df8:	80c3      	strh	r3, [r0, #6]
}
 8005dfa:	4770      	bx	lr

08005dfc <USBD_CtlError>:
{
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005e00:	2180      	movs	r1, #128	@ 0x80
 8005e02:	f000 fa47 	bl	8006294 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005e06:	2100      	movs	r1, #0
 8005e08:	0020      	movs	r0, r4
 8005e0a:	f000 fa43 	bl	8006294 <USBD_LL_StallEP>
}
 8005e0e:	bd10      	pop	{r4, pc}

08005e10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	0004      	movs	r4, r0
 8005e14:	000d      	movs	r5, r1
 8005e16:	0016      	movs	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d00d      	beq.n	8005e38 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005e1c:	f7fa f97e 	bl	800011c <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005e20:	b2c3      	uxtb	r3, r0
 8005e22:	3301      	adds	r3, #1
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005e28:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005e2a:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8005e2c:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005e2e:	706b      	strb	r3, [r5, #1]
 8005e30:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8005e32:	7821      	ldrb	r1, [r4, #0]
 8005e34:	2900      	cmp	r1, #0
 8005e36:	d100      	bne.n	8005e3a <USBD_GetString+0x2a>
}
 8005e38:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	54e9      	strb	r1, [r5, r3]
 8005e3e:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005e40:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8005e42:	3401      	adds	r4, #1
      unicode[idx++] =  0U;
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	54a8      	strb	r0, [r5, r2]
 8005e48:	e7f3      	b.n	8005e32 <USBD_GetString+0x22>

08005e4a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005e4a:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e4c:	22a5      	movs	r2, #165	@ 0xa5
{
 8005e4e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e50:	2402      	movs	r4, #2
 8005e52:	0092      	lsls	r2, r2, #2
 8005e54:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e56:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8005e58:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e5a:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8005e5c:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e5e:	f000 fa47 	bl	80062f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005e62:	2000      	movs	r0, #0
 8005e64:	bd10      	pop	{r4, pc}

08005e66 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005e66:	b510      	push	{r4, lr}
 8005e68:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e6a:	000a      	movs	r2, r1
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	f000 fa3f 	bl	80062f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005e72:	2000      	movs	r0, #0
 8005e74:	bd10      	pop	{r4, pc}

08005e76 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005e76:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e78:	22a5      	movs	r2, #165	@ 0xa5
{
 8005e7a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e7c:	2403      	movs	r4, #3
 8005e7e:	0092      	lsls	r2, r2, #2
 8005e80:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8005e82:	0002      	movs	r2, r0
 8005e84:	32fc      	adds	r2, #252	@ 0xfc
 8005e86:	6613      	str	r3, [r2, #96]	@ 0x60
  pdev->ep_out[0].rem_length   = len;
 8005e88:	6653      	str	r3, [r2, #100]	@ 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e8a:	000a      	movs	r2, r1
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	f000 fa38 	bl	8006302 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005e92:	2000      	movs	r0, #0
 8005e94:	bd10      	pop	{r4, pc}

08005e96 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005e96:	b510      	push	{r4, lr}
 8005e98:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e9a:	000a      	movs	r2, r1
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	f000 fa30 	bl	8006302 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	bd10      	pop	{r4, pc}

08005ea6 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ea6:	23a5      	movs	r3, #165	@ 0xa5
 8005ea8:	2204      	movs	r2, #4
 8005eaa:	009b      	lsls	r3, r3, #2
{
 8005eac:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005eae:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	001a      	movs	r2, r3
 8005eb4:	0019      	movs	r1, r3
 8005eb6:	f000 fa1b 	bl	80062f0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005eba:	2000      	movs	r0, #0
 8005ebc:	bd10      	pop	{r4, pc}

08005ebe <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ebe:	23a5      	movs	r3, #165	@ 0xa5
 8005ec0:	2205      	movs	r2, #5
 8005ec2:	009b      	lsls	r3, r3, #2
{
 8005ec4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ec6:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ec8:	2300      	movs	r3, #0
 8005eca:	001a      	movs	r2, r3
 8005ecc:	0019      	movs	r1, r3
 8005ece:	f000 fa18 	bl	8006302 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	bd10      	pop	{r4, pc}
	...

08005ed8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005ed8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005eda:	4c11      	ldr	r4, [pc, #68]	@ (8005f20 <MX_USB_DEVICE_Init+0x48>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	0020      	movs	r0, r4
 8005ee0:	4910      	ldr	r1, [pc, #64]	@ (8005f24 <MX_USB_DEVICE_Init+0x4c>)
 8005ee2:	f7ff fc11 	bl	8005708 <USBD_Init>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d001      	beq.n	8005eee <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8005eea:	f7fa ffb1 	bl	8000e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005eee:	0020      	movs	r0, r4
 8005ef0:	490d      	ldr	r1, [pc, #52]	@ (8005f28 <MX_USB_DEVICE_Init+0x50>)
 8005ef2:	f7ff fc23 	bl	800573c <USBD_RegisterClass>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d001      	beq.n	8005efe <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8005efa:	f7fa ffa9 	bl	8000e50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005efe:	0020      	movs	r0, r4
 8005f00:	490a      	ldr	r1, [pc, #40]	@ (8005f2c <MX_USB_DEVICE_Init+0x54>)
 8005f02:	f7ff fbb3 	bl	800566c <USBD_CDC_RegisterInterface>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d001      	beq.n	8005f0e <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8005f0a:	f7fa ffa1 	bl	8000e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005f0e:	0020      	movs	r0, r4
 8005f10:	f7ff fc1d 	bl	800574e <USBD_Start>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d001      	beq.n	8005f1c <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8005f18:	f7fa ff9a 	bl	8000e50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	46c0      	nop			@ (mov r8, r8)
 8005f20:	2000083c 	.word	0x2000083c
 8005f24:	20000174 	.word	0x20000174
 8005f28:	200000ec 	.word	0x200000ec
 8005f2c:	20000130 	.word	0x20000130

08005f30 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
  /* USER CODE END 4 */
}
 8005f30:	2000      	movs	r0, #0
 8005f32:	4770      	bx	lr

08005f34 <CDC_Control_FS>:
			break;
	}

	return (USBD_OK);
  /* USER CODE END 5 */
}
 8005f34:	2000      	movs	r0, #0
 8005f36:	4770      	bx	lr

08005f38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	000f      	movs	r7, r1
 8005f3c:	0004      	movs	r4, r0
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005f3e:	4d0f      	ldr	r5, [pc, #60]	@ (8005f7c <CDC_Receive_FS+0x44>)
 8005f40:	0001      	movs	r1, r0
 8005f42:	0028      	movs	r0, r5
 8005f44:	f7ff fba6 	bl	8005694 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005f48:	0028      	movs	r0, r5
 8005f4a:	f7ff fbc6 	bl	80056da <USBD_CDC_ReceivePacket>

	memset(buffer, '\0', 64);  // clear the buffer
 8005f4e:	4e0c      	ldr	r6, [pc, #48]	@ (8005f80 <CDC_Receive_FS+0x48>)
 8005f50:	2240      	movs	r2, #64	@ 0x40
 8005f52:	0030      	movs	r0, r6
 8005f54:	2100      	movs	r1, #0
 8005f56:	f000 fbb7 	bl	80066c8 <memset>
	uint8_t len = (uint8_t) *Len;
	memcpy(buffer, Buf, len);  // copy the data to the buffer
 8005f5a:	683d      	ldr	r5, [r7, #0]
 8005f5c:	0021      	movs	r1, r4
 8005f5e:	b2ed      	uxtb	r5, r5
 8005f60:	002a      	movs	r2, r5
 8005f62:	0030      	movs	r0, r6
 8005f64:	f000 fc9b 	bl	800689e <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8005f68:	002a      	movs	r2, r5
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	0020      	movs	r0, r4
 8005f6e:	f000 fbab 	bl	80066c8 <memset>
	commandRecieved = TRUE;
 8005f72:	2201      	movs	r2, #1
 8005f74:	4b03      	ldr	r3, [pc, #12]	@ (8005f84 <CDC_Receive_FS+0x4c>)

	return (USBD_OK);
  /* USER CODE END 6 */
}
 8005f76:	2000      	movs	r0, #0
	commandRecieved = TRUE;
 8005f78:	701a      	strb	r2, [r3, #0]
}
 8005f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f7c:	2000083c 	.word	0x2000083c
 8005f80:	200007ee 	.word	0x200007ee
 8005f84:	2000054e 	.word	0x2000054e

08005f88 <CDC_Init_FS>:
{
 8005f88:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005f8a:	4c06      	ldr	r4, [pc, #24]	@ (8005fa4 <CDC_Init_FS+0x1c>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	0020      	movs	r0, r4
 8005f90:	4905      	ldr	r1, [pc, #20]	@ (8005fa8 <CDC_Init_FS+0x20>)
 8005f92:	f7ff fb74 	bl	800567e <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005f96:	0020      	movs	r0, r4
 8005f98:	4904      	ldr	r1, [pc, #16]	@ (8005fac <CDC_Init_FS+0x24>)
 8005f9a:	f7ff fb7b 	bl	8005694 <USBD_CDC_SetRxBuffer>
}
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	bd10      	pop	{r4, pc}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	2000083c 	.word	0x2000083c
 8005fa8:	20000b00 	.word	0x20000b00
 8005fac:	20000f00 	.word	0x20000f00

08005fb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005fb0:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8005fb2:	21ae      	movs	r1, #174	@ 0xae
{
 8005fb4:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8005fb6:	4c08      	ldr	r4, [pc, #32]	@ (8005fd8 <CDC_Transmit_FS+0x28>)
 8005fb8:	0089      	lsls	r1, r1, #2
{
 8005fba:	0003      	movs	r3, r0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8005fbc:	5860      	ldr	r0, [r4, r1]
	if (hcdc->TxState != 0) {
 8005fbe:	39a4      	subs	r1, #164	@ 0xa4
 8005fc0:	5841      	ldr	r1, [r0, r1]
		return USBD_BUSY;
 8005fc2:	2001      	movs	r0, #1
	if (hcdc->TxState != 0) {
 8005fc4:	2900      	cmp	r1, #0
 8005fc6:	d106      	bne.n	8005fd6 <CDC_Transmit_FS+0x26>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005fc8:	0019      	movs	r1, r3
 8005fca:	0020      	movs	r0, r4
 8005fcc:	f7ff fb57 	bl	800567e <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005fd0:	0020      	movs	r0, r4
 8005fd2:	f7ff fb66 	bl	80056a2 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8005fd6:	bd10      	pop	{r4, pc}
 8005fd8:	2000083c 	.word	0x2000083c

08005fdc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fdc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
 8005fde:	4801      	ldr	r0, [pc, #4]	@ (8005fe4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fe0:	800b      	strh	r3, [r1, #0]
}
 8005fe2:	4770      	bx	lr
 8005fe4:	20000160 	.word	0x20000160

08005fe8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005fe8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 8005fea:	4801      	ldr	r0, [pc, #4]	@ (8005ff0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005fec:	800b      	strh	r3, [r1, #0]
}
 8005fee:	4770      	bx	lr
 8005ff0:	2000015c 	.word	0x2000015c

08005ff4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005ff4:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005ff6:	2600      	movs	r6, #0
 8005ff8:	0052      	lsls	r2, r2, #1
 8005ffa:	188a      	adds	r2, r1, r2
  for (idx = 0; idx < len; idx++)
 8005ffc:	428a      	cmp	r2, r1
 8005ffe:	d100      	bne.n	8006002 <IntToUnicode+0xe>
  }
}
 8006000:	bd70      	pop	{r4, r5, r6, pc}
    if (((value >> 28)) < 0xA)
 8006002:	0f05      	lsrs	r5, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006004:	b2ec      	uxtb	r4, r5
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006006:	0023      	movs	r3, r4
 8006008:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 800600a:	2d09      	cmp	r5, #9
 800600c:	d800      	bhi.n	8006010 <IntToUnicode+0x1c>
      pbuf[2 * idx] = (value >> 28) + '0';
 800600e:	3b07      	subs	r3, #7
 8006010:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8006012:	704e      	strb	r6, [r1, #1]
    value = value << 4;
 8006014:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8006016:	3102      	adds	r1, #2
 8006018:	e7f0      	b.n	8005ffc <IntToUnicode+0x8>
	...

0800601c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800601c:	231a      	movs	r3, #26
{
 800601e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006020:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006022:	4b0a      	ldr	r3, [pc, #40]	@ (800604c <USBD_FS_SerialStrDescriptor+0x30>)
 8006024:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006026:	4b0a      	ldr	r3, [pc, #40]	@ (8006050 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 += deviceserial2;
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 800602c:	2800      	cmp	r0, #0
 800602e:	d00a      	beq.n	8006046 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006030:	4b08      	ldr	r3, [pc, #32]	@ (8006054 <USBD_FS_SerialStrDescriptor+0x38>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006032:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006034:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006036:	4908      	ldr	r1, [pc, #32]	@ (8006058 <USBD_FS_SerialStrDescriptor+0x3c>)
 8006038:	f7ff ffdc 	bl	8005ff4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800603c:	2204      	movs	r2, #4
 800603e:	0020      	movs	r0, r4
 8006040:	4906      	ldr	r1, [pc, #24]	@ (800605c <USBD_FS_SerialStrDescriptor+0x40>)
 8006042:	f7ff ffd7 	bl	8005ff4 <IntToUnicode>
  return (uint8_t *) USBD_StringSerial;
 8006046:	4806      	ldr	r0, [pc, #24]	@ (8006060 <USBD_FS_SerialStrDescriptor+0x44>)
}
 8006048:	bd10      	pop	{r4, pc}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	1ffff7ac 	.word	0x1ffff7ac
 8006050:	1ffff7b4 	.word	0x1ffff7b4
 8006054:	1ffff7b0 	.word	0x1ffff7b0
 8006058:	20000142 	.word	0x20000142
 800605c:	20000152 	.word	0x20000152
 8006060:	20000140 	.word	0x20000140

08006064 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006064:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006066:	4c04      	ldr	r4, [pc, #16]	@ (8006078 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8006068:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800606a:	0021      	movs	r1, r4
 800606c:	4803      	ldr	r0, [pc, #12]	@ (800607c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800606e:	f7ff fecf 	bl	8005e10 <USBD_GetString>
}
 8006072:	0020      	movs	r0, r4
 8006074:	bd10      	pop	{r4, pc}
 8006076:	46c0      	nop			@ (mov r8, r8)
 8006078:	20001300 	.word	0x20001300
 800607c:	08007a72 	.word	0x08007a72

08006080 <USBD_FS_ProductStrDescriptor>:
{
 8006080:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006082:	4c04      	ldr	r4, [pc, #16]	@ (8006094 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006084:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006086:	0021      	movs	r1, r4
 8006088:	4803      	ldr	r0, [pc, #12]	@ (8006098 <USBD_FS_ProductStrDescriptor+0x18>)
 800608a:	f7ff fec1 	bl	8005e10 <USBD_GetString>
}
 800608e:	0020      	movs	r0, r4
 8006090:	bd10      	pop	{r4, pc}
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	20001300 	.word	0x20001300
 8006098:	08007a85 	.word	0x08007a85

0800609c <USBD_FS_ConfigStrDescriptor>:
{
 800609c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800609e:	4c04      	ldr	r4, [pc, #16]	@ (80060b0 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80060a0:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060a2:	0021      	movs	r1, r4
 80060a4:	4803      	ldr	r0, [pc, #12]	@ (80060b4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80060a6:	f7ff feb3 	bl	8005e10 <USBD_GetString>
}
 80060aa:	0020      	movs	r0, r4
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	46c0      	nop			@ (mov r8, r8)
 80060b0:	20001300 	.word	0x20001300
 80060b4:	08007a9b 	.word	0x08007a9b

080060b8 <USBD_FS_InterfaceStrDescriptor>:
{
 80060b8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060ba:	4c04      	ldr	r4, [pc, #16]	@ (80060cc <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80060bc:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060be:	0021      	movs	r1, r4
 80060c0:	4803      	ldr	r0, [pc, #12]	@ (80060d0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80060c2:	f7ff fea5 	bl	8005e10 <USBD_GetString>
}
 80060c6:	0020      	movs	r0, r4
 80060c8:	bd10      	pop	{r4, pc}
 80060ca:	46c0      	nop			@ (mov r8, r8)
 80060cc:	20001300 	.word	0x20001300
 80060d0:	08007aa6 	.word	0x08007aa6

080060d4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d003      	beq.n	80060e0 <USBD_Get_USB_Status+0xc>
 80060d8:	3802      	subs	r0, #2
 80060da:	1e43      	subs	r3, r0, #1
 80060dc:	4198      	sbcs	r0, r3
 80060de:	3001      	adds	r0, #1
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80060e0:	4770      	bx	lr
	...

080060e4 <HAL_PCD_MspInit>:
{
 80060e4:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80060e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006114 <HAL_PCD_MspInit+0x30>)
 80060e8:	6802      	ldr	r2, [r0, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d111      	bne.n	8006112 <HAL_PCD_MspInit+0x2e>
    __HAL_RCC_USB_CLK_ENABLE();
 80060ee:	2180      	movs	r1, #128	@ 0x80
 80060f0:	4b09      	ldr	r3, [pc, #36]	@ (8006118 <HAL_PCD_MspInit+0x34>)
 80060f2:	0409      	lsls	r1, r1, #16
 80060f4:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80060f6:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 80060f8:	430a      	orrs	r2, r1
 80060fa:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80060fc:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	400b      	ands	r3, r1
 8006102:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006104:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8006106:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006108:	f7fc fa36 	bl	8002578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800610c:	201f      	movs	r0, #31
 800610e:	f7fc fa5d 	bl	80025cc <HAL_NVIC_EnableIRQ>
}
 8006112:	bd07      	pop	{r0, r1, r2, pc}
 8006114:	40005c00 	.word	0x40005c00
 8006118:	40021000 	.word	0x40021000

0800611c <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800611c:	23a6      	movs	r3, #166	@ 0xa6
{
 800611e:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	18c1      	adds	r1, r0, r3
 8006124:	3340      	adds	r3, #64	@ 0x40
 8006126:	58c0      	ldr	r0, [r0, r3]
 8006128:	f7ff fb2c 	bl	8005784 <USBD_LL_SetupStage>
}
 800612c:	bd10      	pop	{r4, pc}

0800612e <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800612e:	2328      	movs	r3, #40	@ 0x28
 8006130:	434b      	muls	r3, r1
 8006132:	18c3      	adds	r3, r0, r3
 8006134:	33fc      	adds	r3, #252	@ 0xfc
 8006136:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006138:	23b6      	movs	r3, #182	@ 0xb6
{
 800613a:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	58c0      	ldr	r0, [r0, r3]
 8006140:	f7ff fb52 	bl	80057e8 <USBD_LL_DataOutStage>
}
 8006144:	bd10      	pop	{r4, pc}

08006146 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006146:	2328      	movs	r3, #40	@ 0x28
 8006148:	434b      	muls	r3, r1
 800614a:	18c3      	adds	r3, r0, r3
 800614c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800614e:	23b6      	movs	r3, #182	@ 0xb6
{
 8006150:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	58c0      	ldr	r0, [r0, r3]
 8006156:	f7ff fb8a 	bl	800586e <USBD_LL_DataInStage>
}
 800615a:	bd10      	pop	{r4, pc}

0800615c <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800615c:	23b6      	movs	r3, #182	@ 0xb6
{
 800615e:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	58c0      	ldr	r0, [r0, r3]
 8006164:	f7ff fc2c 	bl	80059c0 <USBD_LL_SOF>
}
 8006168:	bd10      	pop	{r4, pc}

0800616a <HAL_PCD_ResetCallback>:
{
 800616a:	b570      	push	{r4, r5, r6, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800616c:	7943      	ldrb	r3, [r0, #5]
{
 800616e:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006170:	2b02      	cmp	r3, #2
 8006172:	d001      	beq.n	8006178 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8006174:	f7fa fe6c 	bl	8000e50 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006178:	25b6      	movs	r5, #182	@ 0xb6
 800617a:	00ad      	lsls	r5, r5, #2
 800617c:	2101      	movs	r1, #1
 800617e:	5960      	ldr	r0, [r4, r5]
 8006180:	f7ff fc03 	bl	800598a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006184:	5960      	ldr	r0, [r4, r5]
 8006186:	f7ff fbd6 	bl	8005936 <USBD_LL_Reset>
}
 800618a:	bd70      	pop	{r4, r5, r6, pc}

0800618c <HAL_PCD_SuspendCallback>:
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800618c:	23b6      	movs	r3, #182	@ 0xb6
{
 800618e:	b510      	push	{r4, lr}
 8006190:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	58c0      	ldr	r0, [r0, r3]
 8006196:	f7ff fbfb 	bl	8005990 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800619a:	7a63      	ldrb	r3, [r4, #9]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d004      	beq.n	80061aa <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061a0:	2306      	movs	r3, #6
 80061a2:	4a02      	ldr	r2, [pc, #8]	@ (80061ac <HAL_PCD_SuspendCallback+0x20>)
 80061a4:	6911      	ldr	r1, [r2, #16]
 80061a6:	430b      	orrs	r3, r1
 80061a8:	6113      	str	r3, [r2, #16]
}
 80061aa:	bd10      	pop	{r4, pc}
 80061ac:	e000ed00 	.word	0xe000ed00

080061b0 <HAL_PCD_ResumeCallback>:
{
 80061b0:	b510      	push	{r4, lr}
  if (hpcd->Init.low_power_enable)
 80061b2:	7a43      	ldrb	r3, [r0, #9]
{
 80061b4:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d006      	beq.n	80061c8 <HAL_PCD_ResumeCallback+0x18>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061ba:	2106      	movs	r1, #6
 80061bc:	4a05      	ldr	r2, [pc, #20]	@ (80061d4 <HAL_PCD_ResumeCallback+0x24>)
 80061be:	6913      	ldr	r3, [r2, #16]
 80061c0:	438b      	bics	r3, r1
 80061c2:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 80061c4:	f7fa fa02 	bl	80005cc <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80061c8:	23b6      	movs	r3, #182	@ 0xb6
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	58e0      	ldr	r0, [r4, r3]
 80061ce:	f7ff fbeb 	bl	80059a8 <USBD_LL_Resume>
}
 80061d2:	bd10      	pop	{r4, pc}
 80061d4:	e000ed00 	.word	0xe000ed00

080061d8 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 80061d8:	23b6      	movs	r3, #182	@ 0xb6
{
 80061da:	b570      	push	{r4, r5, r6, lr}
 80061dc:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 80061de:	481c      	ldr	r0, [pc, #112]	@ (8006250 <USBD_LL_Init+0x78>)
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 80061e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 80061e6:	25b0      	movs	r5, #176	@ 0xb0
  hpcd_USB_FS.Instance = USB;
 80061e8:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80061ea:	2382      	movs	r3, #130	@ 0x82
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80061f0:	2302      	movs	r3, #2
 80061f2:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80061f4:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 80061f6:	00ad      	lsls	r5, r5, #2
 80061f8:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80061fa:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80061fc:	8143      	strh	r3, [r0, #10]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80061fe:	f7fc ff1f 	bl	8003040 <HAL_PCD_Init>
 8006202:	2800      	cmp	r0, #0
 8006204:	d001      	beq.n	800620a <USBD_LL_Init+0x32>
    Error_Handler( );
 8006206:	f7fa fe23 	bl	8000e50 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800620a:	2200      	movs	r2, #0
 800620c:	5960      	ldr	r0, [r4, r5]
 800620e:	0011      	movs	r1, r2
 8006210:	2318      	movs	r3, #24
 8006212:	f7fd fd54 	bl	8003cbe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006216:	5960      	ldr	r0, [r4, r5]
 8006218:	2358      	movs	r3, #88	@ 0x58
 800621a:	2200      	movs	r2, #0
 800621c:	2180      	movs	r1, #128	@ 0x80
 800621e:	f7fd fd4e 	bl	8003cbe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006222:	5960      	ldr	r0, [r4, r5]
 8006224:	23c0      	movs	r3, #192	@ 0xc0
 8006226:	2200      	movs	r2, #0
 8006228:	2181      	movs	r1, #129	@ 0x81
 800622a:	f7fd fd48 	bl	8003cbe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800622e:	2388      	movs	r3, #136	@ 0x88
 8006230:	5960      	ldr	r0, [r4, r5]
 8006232:	2200      	movs	r2, #0
 8006234:	2101      	movs	r1, #1
 8006236:	005b      	lsls	r3, r3, #1
 8006238:	f7fd fd41 	bl	8003cbe <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800623c:	2380      	movs	r3, #128	@ 0x80
 800623e:	5960      	ldr	r0, [r4, r5]
 8006240:	2200      	movs	r2, #0
 8006242:	2182      	movs	r1, #130	@ 0x82
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	f7fd fd3a 	bl	8003cbe <HAL_PCDEx_PMAConfig>
}
 800624a:	2000      	movs	r0, #0
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	46c0      	nop			@ (mov r8, r8)
 8006250:	20001720 	.word	0x20001720
 8006254:	40005c00 	.word	0x40005c00

08006258 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8006258:	23b0      	movs	r3, #176	@ 0xb0
{
 800625a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	58c0      	ldr	r0, [r0, r3]
 8006260:	f7fc ff3a 	bl	80030d8 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006264:	f7ff ff36 	bl	80060d4 <USBD_Get_USB_Status>
}
 8006268:	bd10      	pop	{r4, pc}

0800626a <USBD_LL_OpenEP>:
{
 800626a:	b510      	push	{r4, lr}
 800626c:	0014      	movs	r4, r2
 800626e:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006270:	0023      	movs	r3, r4
 8006272:	24b0      	movs	r4, #176	@ 0xb0
 8006274:	00a4      	lsls	r4, r4, #2
 8006276:	5900      	ldr	r0, [r0, r4]
 8006278:	f7fd fc38 	bl	8003aec <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800627c:	f7ff ff2a 	bl	80060d4 <USBD_Get_USB_Status>
}
 8006280:	bd10      	pop	{r4, pc}

08006282 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006282:	23b0      	movs	r3, #176	@ 0xb0
{
 8006284:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	58c0      	ldr	r0, [r0, r3]
 800628a:	f7fd fc5b 	bl	8003b44 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800628e:	f7ff ff21 	bl	80060d4 <USBD_Get_USB_Status>
}
 8006292:	bd10      	pop	{r4, pc}

08006294 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006294:	23b0      	movs	r3, #176	@ 0xb0
{
 8006296:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	58c0      	ldr	r0, [r0, r3]
 800629c:	f7fd fcb3 	bl	8003c06 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80062a0:	f7ff ff18 	bl	80060d4 <USBD_Get_USB_Status>
}
 80062a4:	bd10      	pop	{r4, pc}

080062a6 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80062a6:	23b0      	movs	r3, #176	@ 0xb0
{
 80062a8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	58c0      	ldr	r0, [r0, r3]
 80062ae:	f7fd fcd8 	bl	8003c62 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80062b2:	f7ff ff0f 	bl	80060d4 <USBD_Get_USB_Status>
}
 80062b6:	bd10      	pop	{r4, pc}

080062b8 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80062b8:	23b0      	movs	r3, #176	@ 0xb0
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 80062be:	b248      	sxtb	r0, r1
 80062c0:	2228      	movs	r2, #40	@ 0x28
 80062c2:	2800      	cmp	r0, #0
 80062c4:	da05      	bge.n	80062d2 <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80062c6:	207f      	movs	r0, #127	@ 0x7f
 80062c8:	4001      	ands	r1, r0
 80062ca:	434a      	muls	r2, r1
 80062cc:	189b      	adds	r3, r3, r2
 80062ce:	7c98      	ldrb	r0, [r3, #18]
}
 80062d0:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80062d2:	434a      	muls	r2, r1
 80062d4:	189b      	adds	r3, r3, r2
 80062d6:	3353      	adds	r3, #83	@ 0x53
 80062d8:	33ff      	adds	r3, #255	@ 0xff
 80062da:	7818      	ldrb	r0, [r3, #0]
 80062dc:	e7f8      	b.n	80062d0 <USBD_LL_IsStallEP+0x18>

080062de <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062de:	23b0      	movs	r3, #176	@ 0xb0
{
 80062e0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	58c0      	ldr	r0, [r0, r3]
 80062e6:	f7fc ff0a 	bl	80030fe <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80062ea:	f7ff fef3 	bl	80060d4 <USBD_Get_USB_Status>
}
 80062ee:	bd10      	pop	{r4, pc}

080062f0 <USBD_LL_Transmit>:
{
 80062f0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80062f2:	24b0      	movs	r4, #176	@ 0xb0
 80062f4:	00a4      	lsls	r4, r4, #2
 80062f6:	5900      	ldr	r0, [r0, r4]
 80062f8:	f7fd fc6d 	bl	8003bd6 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80062fc:	f7ff feea 	bl	80060d4 <USBD_Get_USB_Status>
}
 8006300:	bd10      	pop	{r4, pc}

08006302 <USBD_LL_PrepareReceive>:
{
 8006302:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006304:	24b0      	movs	r4, #176	@ 0xb0
 8006306:	00a4      	lsls	r4, r4, #2
 8006308:	5900      	ldr	r0, [r0, r4]
 800630a:	f7fd fc41 	bl	8003b90 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800630e:	f7ff fee1 	bl	80060d4 <USBD_Get_USB_Status>
}
 8006312:	bd10      	pop	{r4, pc}

08006314 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006314:	23b0      	movs	r3, #176	@ 0xb0
{
 8006316:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	58c0      	ldr	r0, [r0, r3]
 800631c:	f7fd fc53 	bl	8003bc6 <HAL_PCD_EP_GetRxCount>
}
 8006320:	bd10      	pop	{r4, pc}
	...

08006324 <USBD_static_malloc>:
  return mem;
 8006324:	4800      	ldr	r0, [pc, #0]	@ (8006328 <USBD_static_malloc+0x4>)
}
 8006326:	4770      	bx	lr
 8006328:	20001500 	.word	0x20001500

0800632c <USBD_static_free>:
}
 800632c:	4770      	bx	lr

0800632e <atoi>:
 800632e:	b510      	push	{r4, lr}
 8006330:	220a      	movs	r2, #10
 8006332:	2100      	movs	r1, #0
 8006334:	f000 f88c 	bl	8006450 <strtol>
 8006338:	bd10      	pop	{r4, pc}
	...

0800633c <_strtol_l.constprop.0>:
 800633c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633e:	b085      	sub	sp, #20
 8006340:	0017      	movs	r7, r2
 8006342:	001e      	movs	r6, r3
 8006344:	9003      	str	r0, [sp, #12]
 8006346:	9101      	str	r1, [sp, #4]
 8006348:	2b24      	cmp	r3, #36	@ 0x24
 800634a:	d844      	bhi.n	80063d6 <_strtol_l.constprop.0+0x9a>
 800634c:	000c      	movs	r4, r1
 800634e:	2b01      	cmp	r3, #1
 8006350:	d041      	beq.n	80063d6 <_strtol_l.constprop.0+0x9a>
 8006352:	4b3d      	ldr	r3, [pc, #244]	@ (8006448 <_strtol_l.constprop.0+0x10c>)
 8006354:	2208      	movs	r2, #8
 8006356:	469c      	mov	ip, r3
 8006358:	0023      	movs	r3, r4
 800635a:	4661      	mov	r1, ip
 800635c:	781d      	ldrb	r5, [r3, #0]
 800635e:	3401      	adds	r4, #1
 8006360:	5d48      	ldrb	r0, [r1, r5]
 8006362:	0001      	movs	r1, r0
 8006364:	4011      	ands	r1, r2
 8006366:	4210      	tst	r0, r2
 8006368:	d1f6      	bne.n	8006358 <_strtol_l.constprop.0+0x1c>
 800636a:	2d2d      	cmp	r5, #45	@ 0x2d
 800636c:	d13a      	bne.n	80063e4 <_strtol_l.constprop.0+0xa8>
 800636e:	7825      	ldrb	r5, [r4, #0]
 8006370:	1c9c      	adds	r4, r3, #2
 8006372:	2301      	movs	r3, #1
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	2210      	movs	r2, #16
 8006378:	0033      	movs	r3, r6
 800637a:	4393      	bics	r3, r2
 800637c:	d109      	bne.n	8006392 <_strtol_l.constprop.0+0x56>
 800637e:	2d30      	cmp	r5, #48	@ 0x30
 8006380:	d136      	bne.n	80063f0 <_strtol_l.constprop.0+0xb4>
 8006382:	2120      	movs	r1, #32
 8006384:	7823      	ldrb	r3, [r4, #0]
 8006386:	438b      	bics	r3, r1
 8006388:	2b58      	cmp	r3, #88	@ 0x58
 800638a:	d131      	bne.n	80063f0 <_strtol_l.constprop.0+0xb4>
 800638c:	0016      	movs	r6, r2
 800638e:	7865      	ldrb	r5, [r4, #1]
 8006390:	3402      	adds	r4, #2
 8006392:	4a2e      	ldr	r2, [pc, #184]	@ (800644c <_strtol_l.constprop.0+0x110>)
 8006394:	9b00      	ldr	r3, [sp, #0]
 8006396:	4694      	mov	ip, r2
 8006398:	4463      	add	r3, ip
 800639a:	0031      	movs	r1, r6
 800639c:	0018      	movs	r0, r3
 800639e:	9302      	str	r3, [sp, #8]
 80063a0:	f7f9 ff68 	bl	8000274 <__aeabi_uidivmod>
 80063a4:	2200      	movs	r2, #0
 80063a6:	4684      	mov	ip, r0
 80063a8:	0010      	movs	r0, r2
 80063aa:	002b      	movs	r3, r5
 80063ac:	3b30      	subs	r3, #48	@ 0x30
 80063ae:	2b09      	cmp	r3, #9
 80063b0:	d825      	bhi.n	80063fe <_strtol_l.constprop.0+0xc2>
 80063b2:	001d      	movs	r5, r3
 80063b4:	42ae      	cmp	r6, r5
 80063b6:	dd31      	ble.n	800641c <_strtol_l.constprop.0+0xe0>
 80063b8:	1c53      	adds	r3, r2, #1
 80063ba:	d009      	beq.n	80063d0 <_strtol_l.constprop.0+0x94>
 80063bc:	2201      	movs	r2, #1
 80063be:	4252      	negs	r2, r2
 80063c0:	4584      	cmp	ip, r0
 80063c2:	d305      	bcc.n	80063d0 <_strtol_l.constprop.0+0x94>
 80063c4:	d101      	bne.n	80063ca <_strtol_l.constprop.0+0x8e>
 80063c6:	42a9      	cmp	r1, r5
 80063c8:	db25      	blt.n	8006416 <_strtol_l.constprop.0+0xda>
 80063ca:	2201      	movs	r2, #1
 80063cc:	4370      	muls	r0, r6
 80063ce:	1828      	adds	r0, r5, r0
 80063d0:	7825      	ldrb	r5, [r4, #0]
 80063d2:	3401      	adds	r4, #1
 80063d4:	e7e9      	b.n	80063aa <_strtol_l.constprop.0+0x6e>
 80063d6:	f000 fa2d 	bl	8006834 <__errno>
 80063da:	2316      	movs	r3, #22
 80063dc:	6003      	str	r3, [r0, #0]
 80063de:	2000      	movs	r0, #0
 80063e0:	b005      	add	sp, #20
 80063e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e4:	9100      	str	r1, [sp, #0]
 80063e6:	2d2b      	cmp	r5, #43	@ 0x2b
 80063e8:	d1c5      	bne.n	8006376 <_strtol_l.constprop.0+0x3a>
 80063ea:	7825      	ldrb	r5, [r4, #0]
 80063ec:	1c9c      	adds	r4, r3, #2
 80063ee:	e7c2      	b.n	8006376 <_strtol_l.constprop.0+0x3a>
 80063f0:	2e00      	cmp	r6, #0
 80063f2:	d1ce      	bne.n	8006392 <_strtol_l.constprop.0+0x56>
 80063f4:	3608      	adds	r6, #8
 80063f6:	2d30      	cmp	r5, #48	@ 0x30
 80063f8:	d0cb      	beq.n	8006392 <_strtol_l.constprop.0+0x56>
 80063fa:	3602      	adds	r6, #2
 80063fc:	e7c9      	b.n	8006392 <_strtol_l.constprop.0+0x56>
 80063fe:	002b      	movs	r3, r5
 8006400:	3b41      	subs	r3, #65	@ 0x41
 8006402:	2b19      	cmp	r3, #25
 8006404:	d801      	bhi.n	800640a <_strtol_l.constprop.0+0xce>
 8006406:	3d37      	subs	r5, #55	@ 0x37
 8006408:	e7d4      	b.n	80063b4 <_strtol_l.constprop.0+0x78>
 800640a:	002b      	movs	r3, r5
 800640c:	3b61      	subs	r3, #97	@ 0x61
 800640e:	2b19      	cmp	r3, #25
 8006410:	d804      	bhi.n	800641c <_strtol_l.constprop.0+0xe0>
 8006412:	3d57      	subs	r5, #87	@ 0x57
 8006414:	e7ce      	b.n	80063b4 <_strtol_l.constprop.0+0x78>
 8006416:	2201      	movs	r2, #1
 8006418:	4252      	negs	r2, r2
 800641a:	e7d9      	b.n	80063d0 <_strtol_l.constprop.0+0x94>
 800641c:	1c53      	adds	r3, r2, #1
 800641e:	d108      	bne.n	8006432 <_strtol_l.constprop.0+0xf6>
 8006420:	2322      	movs	r3, #34	@ 0x22
 8006422:	9a03      	ldr	r2, [sp, #12]
 8006424:	9802      	ldr	r0, [sp, #8]
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	2f00      	cmp	r7, #0
 800642a:	d0d9      	beq.n	80063e0 <_strtol_l.constprop.0+0xa4>
 800642c:	1e63      	subs	r3, r4, #1
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	e007      	b.n	8006442 <_strtol_l.constprop.0+0x106>
 8006432:	9b00      	ldr	r3, [sp, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d000      	beq.n	800643a <_strtol_l.constprop.0+0xfe>
 8006438:	4240      	negs	r0, r0
 800643a:	2f00      	cmp	r7, #0
 800643c:	d0d0      	beq.n	80063e0 <_strtol_l.constprop.0+0xa4>
 800643e:	2a00      	cmp	r2, #0
 8006440:	d1f4      	bne.n	800642c <_strtol_l.constprop.0+0xf0>
 8006442:	9b01      	ldr	r3, [sp, #4]
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	e7cb      	b.n	80063e0 <_strtol_l.constprop.0+0xa4>
 8006448:	08007ab5 	.word	0x08007ab5
 800644c:	7fffffff 	.word	0x7fffffff

08006450 <strtol>:
 8006450:	b510      	push	{r4, lr}
 8006452:	4c04      	ldr	r4, [pc, #16]	@ (8006464 <strtol+0x14>)
 8006454:	0013      	movs	r3, r2
 8006456:	000a      	movs	r2, r1
 8006458:	0001      	movs	r1, r0
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	f7ff ff6e 	bl	800633c <_strtol_l.constprop.0>
 8006460:	bd10      	pop	{r4, pc}
 8006462:	46c0      	nop			@ (mov r8, r8)
 8006464:	2000019c 	.word	0x2000019c

08006468 <std>:
 8006468:	2300      	movs	r3, #0
 800646a:	b510      	push	{r4, lr}
 800646c:	0004      	movs	r4, r0
 800646e:	6003      	str	r3, [r0, #0]
 8006470:	6043      	str	r3, [r0, #4]
 8006472:	6083      	str	r3, [r0, #8]
 8006474:	8181      	strh	r1, [r0, #12]
 8006476:	6643      	str	r3, [r0, #100]	@ 0x64
 8006478:	81c2      	strh	r2, [r0, #14]
 800647a:	6103      	str	r3, [r0, #16]
 800647c:	6143      	str	r3, [r0, #20]
 800647e:	6183      	str	r3, [r0, #24]
 8006480:	0019      	movs	r1, r3
 8006482:	2208      	movs	r2, #8
 8006484:	305c      	adds	r0, #92	@ 0x5c
 8006486:	f000 f91f 	bl	80066c8 <memset>
 800648a:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <std+0x50>)
 800648c:	6224      	str	r4, [r4, #32]
 800648e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006490:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <std+0x54>)
 8006492:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006494:	4b0a      	ldr	r3, [pc, #40]	@ (80064c0 <std+0x58>)
 8006496:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006498:	4b0a      	ldr	r3, [pc, #40]	@ (80064c4 <std+0x5c>)
 800649a:	6323      	str	r3, [r4, #48]	@ 0x30
 800649c:	4b0a      	ldr	r3, [pc, #40]	@ (80064c8 <std+0x60>)
 800649e:	429c      	cmp	r4, r3
 80064a0:	d005      	beq.n	80064ae <std+0x46>
 80064a2:	4b0a      	ldr	r3, [pc, #40]	@ (80064cc <std+0x64>)
 80064a4:	429c      	cmp	r4, r3
 80064a6:	d002      	beq.n	80064ae <std+0x46>
 80064a8:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <std+0x68>)
 80064aa:	429c      	cmp	r4, r3
 80064ac:	d103      	bne.n	80064b6 <std+0x4e>
 80064ae:	0020      	movs	r0, r4
 80064b0:	3058      	adds	r0, #88	@ 0x58
 80064b2:	f000 f9e9 	bl	8006888 <__retarget_lock_init_recursive>
 80064b6:	bd10      	pop	{r4, pc}
 80064b8:	08006631 	.word	0x08006631
 80064bc:	08006659 	.word	0x08006659
 80064c0:	08006691 	.word	0x08006691
 80064c4:	080066bd 	.word	0x080066bd
 80064c8:	200019fc 	.word	0x200019fc
 80064cc:	20001a64 	.word	0x20001a64
 80064d0:	20001acc 	.word	0x20001acc

080064d4 <stdio_exit_handler>:
 80064d4:	b510      	push	{r4, lr}
 80064d6:	4a03      	ldr	r2, [pc, #12]	@ (80064e4 <stdio_exit_handler+0x10>)
 80064d8:	4903      	ldr	r1, [pc, #12]	@ (80064e8 <stdio_exit_handler+0x14>)
 80064da:	4804      	ldr	r0, [pc, #16]	@ (80064ec <stdio_exit_handler+0x18>)
 80064dc:	f000 f86c 	bl	80065b8 <_fwalk_sglue>
 80064e0:	bd10      	pop	{r4, pc}
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	20000190 	.word	0x20000190
 80064e8:	080071bd 	.word	0x080071bd
 80064ec:	200001a0 	.word	0x200001a0

080064f0 <cleanup_stdio>:
 80064f0:	6841      	ldr	r1, [r0, #4]
 80064f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006520 <cleanup_stdio+0x30>)
 80064f4:	b510      	push	{r4, lr}
 80064f6:	0004      	movs	r4, r0
 80064f8:	4299      	cmp	r1, r3
 80064fa:	d001      	beq.n	8006500 <cleanup_stdio+0x10>
 80064fc:	f000 fe5e 	bl	80071bc <_fflush_r>
 8006500:	68a1      	ldr	r1, [r4, #8]
 8006502:	4b08      	ldr	r3, [pc, #32]	@ (8006524 <cleanup_stdio+0x34>)
 8006504:	4299      	cmp	r1, r3
 8006506:	d002      	beq.n	800650e <cleanup_stdio+0x1e>
 8006508:	0020      	movs	r0, r4
 800650a:	f000 fe57 	bl	80071bc <_fflush_r>
 800650e:	68e1      	ldr	r1, [r4, #12]
 8006510:	4b05      	ldr	r3, [pc, #20]	@ (8006528 <cleanup_stdio+0x38>)
 8006512:	4299      	cmp	r1, r3
 8006514:	d002      	beq.n	800651c <cleanup_stdio+0x2c>
 8006516:	0020      	movs	r0, r4
 8006518:	f000 fe50 	bl	80071bc <_fflush_r>
 800651c:	bd10      	pop	{r4, pc}
 800651e:	46c0      	nop			@ (mov r8, r8)
 8006520:	200019fc 	.word	0x200019fc
 8006524:	20001a64 	.word	0x20001a64
 8006528:	20001acc 	.word	0x20001acc

0800652c <global_stdio_init.part.0>:
 800652c:	b510      	push	{r4, lr}
 800652e:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <global_stdio_init.part.0+0x28>)
 8006530:	4a09      	ldr	r2, [pc, #36]	@ (8006558 <global_stdio_init.part.0+0x2c>)
 8006532:	2104      	movs	r1, #4
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	4809      	ldr	r0, [pc, #36]	@ (800655c <global_stdio_init.part.0+0x30>)
 8006538:	2200      	movs	r2, #0
 800653a:	f7ff ff95 	bl	8006468 <std>
 800653e:	2201      	movs	r2, #1
 8006540:	2109      	movs	r1, #9
 8006542:	4807      	ldr	r0, [pc, #28]	@ (8006560 <global_stdio_init.part.0+0x34>)
 8006544:	f7ff ff90 	bl	8006468 <std>
 8006548:	2202      	movs	r2, #2
 800654a:	2112      	movs	r1, #18
 800654c:	4805      	ldr	r0, [pc, #20]	@ (8006564 <global_stdio_init.part.0+0x38>)
 800654e:	f7ff ff8b 	bl	8006468 <std>
 8006552:	bd10      	pop	{r4, pc}
 8006554:	20001b34 	.word	0x20001b34
 8006558:	080064d5 	.word	0x080064d5
 800655c:	200019fc 	.word	0x200019fc
 8006560:	20001a64 	.word	0x20001a64
 8006564:	20001acc 	.word	0x20001acc

08006568 <__sfp_lock_acquire>:
 8006568:	b510      	push	{r4, lr}
 800656a:	4802      	ldr	r0, [pc, #8]	@ (8006574 <__sfp_lock_acquire+0xc>)
 800656c:	f000 f98d 	bl	800688a <__retarget_lock_acquire_recursive>
 8006570:	bd10      	pop	{r4, pc}
 8006572:	46c0      	nop			@ (mov r8, r8)
 8006574:	20001b3d 	.word	0x20001b3d

08006578 <__sfp_lock_release>:
 8006578:	b510      	push	{r4, lr}
 800657a:	4802      	ldr	r0, [pc, #8]	@ (8006584 <__sfp_lock_release+0xc>)
 800657c:	f000 f986 	bl	800688c <__retarget_lock_release_recursive>
 8006580:	bd10      	pop	{r4, pc}
 8006582:	46c0      	nop			@ (mov r8, r8)
 8006584:	20001b3d 	.word	0x20001b3d

08006588 <__sinit>:
 8006588:	b510      	push	{r4, lr}
 800658a:	0004      	movs	r4, r0
 800658c:	f7ff ffec 	bl	8006568 <__sfp_lock_acquire>
 8006590:	6a23      	ldr	r3, [r4, #32]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <__sinit+0x14>
 8006596:	f7ff ffef 	bl	8006578 <__sfp_lock_release>
 800659a:	bd10      	pop	{r4, pc}
 800659c:	4b04      	ldr	r3, [pc, #16]	@ (80065b0 <__sinit+0x28>)
 800659e:	6223      	str	r3, [r4, #32]
 80065a0:	4b04      	ldr	r3, [pc, #16]	@ (80065b4 <__sinit+0x2c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1f6      	bne.n	8006596 <__sinit+0xe>
 80065a8:	f7ff ffc0 	bl	800652c <global_stdio_init.part.0>
 80065ac:	e7f3      	b.n	8006596 <__sinit+0xe>
 80065ae:	46c0      	nop			@ (mov r8, r8)
 80065b0:	080064f1 	.word	0x080064f1
 80065b4:	20001b34 	.word	0x20001b34

080065b8 <_fwalk_sglue>:
 80065b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ba:	0014      	movs	r4, r2
 80065bc:	2600      	movs	r6, #0
 80065be:	9000      	str	r0, [sp, #0]
 80065c0:	9101      	str	r1, [sp, #4]
 80065c2:	68a5      	ldr	r5, [r4, #8]
 80065c4:	6867      	ldr	r7, [r4, #4]
 80065c6:	3f01      	subs	r7, #1
 80065c8:	d504      	bpl.n	80065d4 <_fwalk_sglue+0x1c>
 80065ca:	6824      	ldr	r4, [r4, #0]
 80065cc:	2c00      	cmp	r4, #0
 80065ce:	d1f8      	bne.n	80065c2 <_fwalk_sglue+0xa>
 80065d0:	0030      	movs	r0, r6
 80065d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065d4:	89ab      	ldrh	r3, [r5, #12]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d908      	bls.n	80065ec <_fwalk_sglue+0x34>
 80065da:	220e      	movs	r2, #14
 80065dc:	5eab      	ldrsh	r3, [r5, r2]
 80065de:	3301      	adds	r3, #1
 80065e0:	d004      	beq.n	80065ec <_fwalk_sglue+0x34>
 80065e2:	0029      	movs	r1, r5
 80065e4:	9800      	ldr	r0, [sp, #0]
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	4798      	blx	r3
 80065ea:	4306      	orrs	r6, r0
 80065ec:	3568      	adds	r5, #104	@ 0x68
 80065ee:	e7ea      	b.n	80065c6 <_fwalk_sglue+0xe>

080065f0 <siprintf>:
 80065f0:	b40e      	push	{r1, r2, r3}
 80065f2:	b500      	push	{lr}
 80065f4:	490b      	ldr	r1, [pc, #44]	@ (8006624 <siprintf+0x34>)
 80065f6:	b09c      	sub	sp, #112	@ 0x70
 80065f8:	ab1d      	add	r3, sp, #116	@ 0x74
 80065fa:	9002      	str	r0, [sp, #8]
 80065fc:	9006      	str	r0, [sp, #24]
 80065fe:	9107      	str	r1, [sp, #28]
 8006600:	9104      	str	r1, [sp, #16]
 8006602:	4809      	ldr	r0, [pc, #36]	@ (8006628 <siprintf+0x38>)
 8006604:	4909      	ldr	r1, [pc, #36]	@ (800662c <siprintf+0x3c>)
 8006606:	cb04      	ldmia	r3!, {r2}
 8006608:	9105      	str	r1, [sp, #20]
 800660a:	6800      	ldr	r0, [r0, #0]
 800660c:	a902      	add	r1, sp, #8
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	f000 fad2 	bl	8006bb8 <_svfiprintf_r>
 8006614:	2200      	movs	r2, #0
 8006616:	9b02      	ldr	r3, [sp, #8]
 8006618:	701a      	strb	r2, [r3, #0]
 800661a:	b01c      	add	sp, #112	@ 0x70
 800661c:	bc08      	pop	{r3}
 800661e:	b003      	add	sp, #12
 8006620:	4718      	bx	r3
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	7fffffff 	.word	0x7fffffff
 8006628:	2000019c 	.word	0x2000019c
 800662c:	ffff0208 	.word	0xffff0208

08006630 <__sread>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	000c      	movs	r4, r1
 8006634:	250e      	movs	r5, #14
 8006636:	5f49      	ldrsh	r1, [r1, r5]
 8006638:	f000 f8d4 	bl	80067e4 <_read_r>
 800663c:	2800      	cmp	r0, #0
 800663e:	db03      	blt.n	8006648 <__sread+0x18>
 8006640:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006642:	181b      	adds	r3, r3, r0
 8006644:	6563      	str	r3, [r4, #84]	@ 0x54
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	4a02      	ldr	r2, [pc, #8]	@ (8006654 <__sread+0x24>)
 800664c:	4013      	ands	r3, r2
 800664e:	81a3      	strh	r3, [r4, #12]
 8006650:	e7f9      	b.n	8006646 <__sread+0x16>
 8006652:	46c0      	nop			@ (mov r8, r8)
 8006654:	ffffefff 	.word	0xffffefff

08006658 <__swrite>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	001f      	movs	r7, r3
 800665c:	898b      	ldrh	r3, [r1, #12]
 800665e:	0005      	movs	r5, r0
 8006660:	000c      	movs	r4, r1
 8006662:	0016      	movs	r6, r2
 8006664:	05db      	lsls	r3, r3, #23
 8006666:	d505      	bpl.n	8006674 <__swrite+0x1c>
 8006668:	230e      	movs	r3, #14
 800666a:	5ec9      	ldrsh	r1, [r1, r3]
 800666c:	2200      	movs	r2, #0
 800666e:	2302      	movs	r3, #2
 8006670:	f000 f8a4 	bl	80067bc <_lseek_r>
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	4a05      	ldr	r2, [pc, #20]	@ (800668c <__swrite+0x34>)
 8006678:	0028      	movs	r0, r5
 800667a:	4013      	ands	r3, r2
 800667c:	81a3      	strh	r3, [r4, #12]
 800667e:	0032      	movs	r2, r6
 8006680:	230e      	movs	r3, #14
 8006682:	5ee1      	ldrsh	r1, [r4, r3]
 8006684:	003b      	movs	r3, r7
 8006686:	f000 f8c1 	bl	800680c <_write_r>
 800668a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800668c:	ffffefff 	.word	0xffffefff

08006690 <__sseek>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	000c      	movs	r4, r1
 8006694:	250e      	movs	r5, #14
 8006696:	5f49      	ldrsh	r1, [r1, r5]
 8006698:	f000 f890 	bl	80067bc <_lseek_r>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	1c42      	adds	r2, r0, #1
 80066a0:	d103      	bne.n	80066aa <__sseek+0x1a>
 80066a2:	4a05      	ldr	r2, [pc, #20]	@ (80066b8 <__sseek+0x28>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	81a3      	strh	r3, [r4, #12]
 80066a8:	bd70      	pop	{r4, r5, r6, pc}
 80066aa:	2280      	movs	r2, #128	@ 0x80
 80066ac:	0152      	lsls	r2, r2, #5
 80066ae:	4313      	orrs	r3, r2
 80066b0:	81a3      	strh	r3, [r4, #12]
 80066b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80066b4:	e7f8      	b.n	80066a8 <__sseek+0x18>
 80066b6:	46c0      	nop			@ (mov r8, r8)
 80066b8:	ffffefff 	.word	0xffffefff

080066bc <__sclose>:
 80066bc:	b510      	push	{r4, lr}
 80066be:	230e      	movs	r3, #14
 80066c0:	5ec9      	ldrsh	r1, [r1, r3]
 80066c2:	f000 f869 	bl	8006798 <_close_r>
 80066c6:	bd10      	pop	{r4, pc}

080066c8 <memset>:
 80066c8:	0003      	movs	r3, r0
 80066ca:	1882      	adds	r2, r0, r2
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d100      	bne.n	80066d2 <memset+0xa>
 80066d0:	4770      	bx	lr
 80066d2:	7019      	strb	r1, [r3, #0]
 80066d4:	3301      	adds	r3, #1
 80066d6:	e7f9      	b.n	80066cc <memset+0x4>

080066d8 <strtok>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	4b16      	ldr	r3, [pc, #88]	@ (8006734 <strtok+0x5c>)
 80066dc:	0005      	movs	r5, r0
 80066de:	681f      	ldr	r7, [r3, #0]
 80066e0:	000e      	movs	r6, r1
 80066e2:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80066e4:	2c00      	cmp	r4, #0
 80066e6:	d11d      	bne.n	8006724 <strtok+0x4c>
 80066e8:	2050      	movs	r0, #80	@ 0x50
 80066ea:	f000 f949 	bl	8006980 <malloc>
 80066ee:	1e02      	subs	r2, r0, #0
 80066f0:	6478      	str	r0, [r7, #68]	@ 0x44
 80066f2:	d104      	bne.n	80066fe <strtok+0x26>
 80066f4:	215b      	movs	r1, #91	@ 0x5b
 80066f6:	4b10      	ldr	r3, [pc, #64]	@ (8006738 <strtok+0x60>)
 80066f8:	4810      	ldr	r0, [pc, #64]	@ (800673c <strtok+0x64>)
 80066fa:	f000 f8d9 	bl	80068b0 <__assert_func>
 80066fe:	6004      	str	r4, [r0, #0]
 8006700:	6044      	str	r4, [r0, #4]
 8006702:	6084      	str	r4, [r0, #8]
 8006704:	60c4      	str	r4, [r0, #12]
 8006706:	6104      	str	r4, [r0, #16]
 8006708:	6144      	str	r4, [r0, #20]
 800670a:	6184      	str	r4, [r0, #24]
 800670c:	6284      	str	r4, [r0, #40]	@ 0x28
 800670e:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8006710:	6304      	str	r4, [r0, #48]	@ 0x30
 8006712:	6344      	str	r4, [r0, #52]	@ 0x34
 8006714:	6384      	str	r4, [r0, #56]	@ 0x38
 8006716:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8006718:	6404      	str	r4, [r0, #64]	@ 0x40
 800671a:	6444      	str	r4, [r0, #68]	@ 0x44
 800671c:	6484      	str	r4, [r0, #72]	@ 0x48
 800671e:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8006720:	7704      	strb	r4, [r0, #28]
 8006722:	6244      	str	r4, [r0, #36]	@ 0x24
 8006724:	0031      	movs	r1, r6
 8006726:	0028      	movs	r0, r5
 8006728:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800672a:	2301      	movs	r3, #1
 800672c:	f000 f808 	bl	8006740 <__strtok_r>
 8006730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006732:	46c0      	nop			@ (mov r8, r8)
 8006734:	2000019c 	.word	0x2000019c
 8006738:	08007bb5 	.word	0x08007bb5
 800673c:	08007bcc 	.word	0x08007bcc

08006740 <__strtok_r>:
 8006740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006742:	1e04      	subs	r4, r0, #0
 8006744:	d102      	bne.n	800674c <__strtok_r+0xc>
 8006746:	6814      	ldr	r4, [r2, #0]
 8006748:	2c00      	cmp	r4, #0
 800674a:	d009      	beq.n	8006760 <__strtok_r+0x20>
 800674c:	0020      	movs	r0, r4
 800674e:	000e      	movs	r6, r1
 8006750:	7805      	ldrb	r5, [r0, #0]
 8006752:	3401      	adds	r4, #1
 8006754:	7837      	ldrb	r7, [r6, #0]
 8006756:	2f00      	cmp	r7, #0
 8006758:	d104      	bne.n	8006764 <__strtok_r+0x24>
 800675a:	2d00      	cmp	r5, #0
 800675c:	d10d      	bne.n	800677a <__strtok_r+0x3a>
 800675e:	6015      	str	r5, [r2, #0]
 8006760:	2000      	movs	r0, #0
 8006762:	e006      	b.n	8006772 <__strtok_r+0x32>
 8006764:	3601      	adds	r6, #1
 8006766:	42bd      	cmp	r5, r7
 8006768:	d1f4      	bne.n	8006754 <__strtok_r+0x14>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1ee      	bne.n	800674c <__strtok_r+0xc>
 800676e:	6014      	str	r4, [r2, #0]
 8006770:	7003      	strb	r3, [r0, #0]
 8006772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006774:	3301      	adds	r3, #1
 8006776:	2d00      	cmp	r5, #0
 8006778:	d102      	bne.n	8006780 <__strtok_r+0x40>
 800677a:	000b      	movs	r3, r1
 800677c:	7826      	ldrb	r6, [r4, #0]
 800677e:	3401      	adds	r4, #1
 8006780:	781d      	ldrb	r5, [r3, #0]
 8006782:	42ae      	cmp	r6, r5
 8006784:	d1f6      	bne.n	8006774 <__strtok_r+0x34>
 8006786:	2300      	movs	r3, #0
 8006788:	001d      	movs	r5, r3
 800678a:	429e      	cmp	r6, r3
 800678c:	d002      	beq.n	8006794 <__strtok_r+0x54>
 800678e:	0023      	movs	r3, r4
 8006790:	1e61      	subs	r1, r4, #1
 8006792:	700d      	strb	r5, [r1, #0]
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	e7ec      	b.n	8006772 <__strtok_r+0x32>

08006798 <_close_r>:
 8006798:	2300      	movs	r3, #0
 800679a:	b570      	push	{r4, r5, r6, lr}
 800679c:	4d06      	ldr	r5, [pc, #24]	@ (80067b8 <_close_r+0x20>)
 800679e:	0004      	movs	r4, r0
 80067a0:	0008      	movs	r0, r1
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	f7fb fc1e 	bl	8001fe4 <_close>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d103      	bne.n	80067b4 <_close_r+0x1c>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d000      	beq.n	80067b4 <_close_r+0x1c>
 80067b2:	6023      	str	r3, [r4, #0]
 80067b4:	bd70      	pop	{r4, r5, r6, pc}
 80067b6:	46c0      	nop			@ (mov r8, r8)
 80067b8:	20001b38 	.word	0x20001b38

080067bc <_lseek_r>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	0004      	movs	r4, r0
 80067c0:	0008      	movs	r0, r1
 80067c2:	0011      	movs	r1, r2
 80067c4:	001a      	movs	r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	4d05      	ldr	r5, [pc, #20]	@ (80067e0 <_lseek_r+0x24>)
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	f7fb fc14 	bl	8001ff8 <_lseek>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d103      	bne.n	80067dc <_lseek_r+0x20>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d000      	beq.n	80067dc <_lseek_r+0x20>
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	46c0      	nop			@ (mov r8, r8)
 80067e0:	20001b38 	.word	0x20001b38

080067e4 <_read_r>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	0004      	movs	r4, r0
 80067e8:	0008      	movs	r0, r1
 80067ea:	0011      	movs	r1, r2
 80067ec:	001a      	movs	r2, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	4d05      	ldr	r5, [pc, #20]	@ (8006808 <_read_r+0x24>)
 80067f2:	602b      	str	r3, [r5, #0]
 80067f4:	f7fb fbdc 	bl	8001fb0 <_read>
 80067f8:	1c43      	adds	r3, r0, #1
 80067fa:	d103      	bne.n	8006804 <_read_r+0x20>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d000      	beq.n	8006804 <_read_r+0x20>
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	bd70      	pop	{r4, r5, r6, pc}
 8006806:	46c0      	nop			@ (mov r8, r8)
 8006808:	20001b38 	.word	0x20001b38

0800680c <_write_r>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	0004      	movs	r4, r0
 8006810:	0008      	movs	r0, r1
 8006812:	0011      	movs	r1, r2
 8006814:	001a      	movs	r2, r3
 8006816:	2300      	movs	r3, #0
 8006818:	4d05      	ldr	r5, [pc, #20]	@ (8006830 <_write_r+0x24>)
 800681a:	602b      	str	r3, [r5, #0]
 800681c:	f7fb fbd5 	bl	8001fca <_write>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d103      	bne.n	800682c <_write_r+0x20>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d000      	beq.n	800682c <_write_r+0x20>
 800682a:	6023      	str	r3, [r4, #0]
 800682c:	bd70      	pop	{r4, r5, r6, pc}
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	20001b38 	.word	0x20001b38

08006834 <__errno>:
 8006834:	4b01      	ldr	r3, [pc, #4]	@ (800683c <__errno+0x8>)
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	4770      	bx	lr
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	2000019c 	.word	0x2000019c

08006840 <__libc_init_array>:
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	2600      	movs	r6, #0
 8006844:	4c0c      	ldr	r4, [pc, #48]	@ (8006878 <__libc_init_array+0x38>)
 8006846:	4d0d      	ldr	r5, [pc, #52]	@ (800687c <__libc_init_array+0x3c>)
 8006848:	1b64      	subs	r4, r4, r5
 800684a:	10a4      	asrs	r4, r4, #2
 800684c:	42a6      	cmp	r6, r4
 800684e:	d109      	bne.n	8006864 <__libc_init_array+0x24>
 8006850:	2600      	movs	r6, #0
 8006852:	f001 f81b 	bl	800788c <_init>
 8006856:	4c0a      	ldr	r4, [pc, #40]	@ (8006880 <__libc_init_array+0x40>)
 8006858:	4d0a      	ldr	r5, [pc, #40]	@ (8006884 <__libc_init_array+0x44>)
 800685a:	1b64      	subs	r4, r4, r5
 800685c:	10a4      	asrs	r4, r4, #2
 800685e:	42a6      	cmp	r6, r4
 8006860:	d105      	bne.n	800686e <__libc_init_array+0x2e>
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	00b3      	lsls	r3, r6, #2
 8006866:	58eb      	ldr	r3, [r5, r3]
 8006868:	4798      	blx	r3
 800686a:	3601      	adds	r6, #1
 800686c:	e7ee      	b.n	800684c <__libc_init_array+0xc>
 800686e:	00b3      	lsls	r3, r6, #2
 8006870:	58eb      	ldr	r3, [r5, r3]
 8006872:	4798      	blx	r3
 8006874:	3601      	adds	r6, #1
 8006876:	e7f2      	b.n	800685e <__libc_init_array+0x1e>
 8006878:	08007c98 	.word	0x08007c98
 800687c:	08007c98 	.word	0x08007c98
 8006880:	08007c9c 	.word	0x08007c9c
 8006884:	08007c98 	.word	0x08007c98

08006888 <__retarget_lock_init_recursive>:
 8006888:	4770      	bx	lr

0800688a <__retarget_lock_acquire_recursive>:
 800688a:	4770      	bx	lr

0800688c <__retarget_lock_release_recursive>:
 800688c:	4770      	bx	lr

0800688e <strcpy>:
 800688e:	0003      	movs	r3, r0
 8006890:	780a      	ldrb	r2, [r1, #0]
 8006892:	3101      	adds	r1, #1
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	3301      	adds	r3, #1
 8006898:	2a00      	cmp	r2, #0
 800689a:	d1f9      	bne.n	8006890 <strcpy+0x2>
 800689c:	4770      	bx	lr

0800689e <memcpy>:
 800689e:	2300      	movs	r3, #0
 80068a0:	b510      	push	{r4, lr}
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d100      	bne.n	80068a8 <memcpy+0xa>
 80068a6:	bd10      	pop	{r4, pc}
 80068a8:	5ccc      	ldrb	r4, [r1, r3]
 80068aa:	54c4      	strb	r4, [r0, r3]
 80068ac:	3301      	adds	r3, #1
 80068ae:	e7f8      	b.n	80068a2 <memcpy+0x4>

080068b0 <__assert_func>:
 80068b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80068b2:	0014      	movs	r4, r2
 80068b4:	001a      	movs	r2, r3
 80068b6:	4b09      	ldr	r3, [pc, #36]	@ (80068dc <__assert_func+0x2c>)
 80068b8:	0005      	movs	r5, r0
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	000e      	movs	r6, r1
 80068be:	68d8      	ldr	r0, [r3, #12]
 80068c0:	4b07      	ldr	r3, [pc, #28]	@ (80068e0 <__assert_func+0x30>)
 80068c2:	2c00      	cmp	r4, #0
 80068c4:	d101      	bne.n	80068ca <__assert_func+0x1a>
 80068c6:	4b07      	ldr	r3, [pc, #28]	@ (80068e4 <__assert_func+0x34>)
 80068c8:	001c      	movs	r4, r3
 80068ca:	4907      	ldr	r1, [pc, #28]	@ (80068e8 <__assert_func+0x38>)
 80068cc:	9301      	str	r3, [sp, #4]
 80068ce:	9402      	str	r4, [sp, #8]
 80068d0:	002b      	movs	r3, r5
 80068d2:	9600      	str	r6, [sp, #0]
 80068d4:	f000 fc9e 	bl	8007214 <fiprintf>
 80068d8:	f000 fcdd 	bl	8007296 <abort>
 80068dc:	2000019c 	.word	0x2000019c
 80068e0:	08007c26 	.word	0x08007c26
 80068e4:	080079a0 	.word	0x080079a0
 80068e8:	08007c33 	.word	0x08007c33

080068ec <_free_r>:
 80068ec:	b570      	push	{r4, r5, r6, lr}
 80068ee:	0005      	movs	r5, r0
 80068f0:	1e0c      	subs	r4, r1, #0
 80068f2:	d010      	beq.n	8006916 <_free_r+0x2a>
 80068f4:	3c04      	subs	r4, #4
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	da00      	bge.n	80068fe <_free_r+0x12>
 80068fc:	18e4      	adds	r4, r4, r3
 80068fe:	0028      	movs	r0, r5
 8006900:	f000 f8ea 	bl	8006ad8 <__malloc_lock>
 8006904:	4a1d      	ldr	r2, [pc, #116]	@ (800697c <_free_r+0x90>)
 8006906:	6813      	ldr	r3, [r2, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <_free_r+0x2c>
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	6014      	str	r4, [r2, #0]
 8006910:	0028      	movs	r0, r5
 8006912:	f000 f8e9 	bl	8006ae8 <__malloc_unlock>
 8006916:	bd70      	pop	{r4, r5, r6, pc}
 8006918:	42a3      	cmp	r3, r4
 800691a:	d908      	bls.n	800692e <_free_r+0x42>
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	1821      	adds	r1, r4, r0
 8006920:	428b      	cmp	r3, r1
 8006922:	d1f3      	bne.n	800690c <_free_r+0x20>
 8006924:	6819      	ldr	r1, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	1809      	adds	r1, r1, r0
 800692a:	6021      	str	r1, [r4, #0]
 800692c:	e7ee      	b.n	800690c <_free_r+0x20>
 800692e:	001a      	movs	r2, r3
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <_free_r+0x4e>
 8006936:	42a3      	cmp	r3, r4
 8006938:	d9f9      	bls.n	800692e <_free_r+0x42>
 800693a:	6811      	ldr	r1, [r2, #0]
 800693c:	1850      	adds	r0, r2, r1
 800693e:	42a0      	cmp	r0, r4
 8006940:	d10b      	bne.n	800695a <_free_r+0x6e>
 8006942:	6820      	ldr	r0, [r4, #0]
 8006944:	1809      	adds	r1, r1, r0
 8006946:	1850      	adds	r0, r2, r1
 8006948:	6011      	str	r1, [r2, #0]
 800694a:	4283      	cmp	r3, r0
 800694c:	d1e0      	bne.n	8006910 <_free_r+0x24>
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	1841      	adds	r1, r0, r1
 8006954:	6011      	str	r1, [r2, #0]
 8006956:	6053      	str	r3, [r2, #4]
 8006958:	e7da      	b.n	8006910 <_free_r+0x24>
 800695a:	42a0      	cmp	r0, r4
 800695c:	d902      	bls.n	8006964 <_free_r+0x78>
 800695e:	230c      	movs	r3, #12
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	e7d5      	b.n	8006910 <_free_r+0x24>
 8006964:	6820      	ldr	r0, [r4, #0]
 8006966:	1821      	adds	r1, r4, r0
 8006968:	428b      	cmp	r3, r1
 800696a:	d103      	bne.n	8006974 <_free_r+0x88>
 800696c:	6819      	ldr	r1, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	1809      	adds	r1, r1, r0
 8006972:	6021      	str	r1, [r4, #0]
 8006974:	6063      	str	r3, [r4, #4]
 8006976:	6054      	str	r4, [r2, #4]
 8006978:	e7ca      	b.n	8006910 <_free_r+0x24>
 800697a:	46c0      	nop			@ (mov r8, r8)
 800697c:	20001b44 	.word	0x20001b44

08006980 <malloc>:
 8006980:	b510      	push	{r4, lr}
 8006982:	4b03      	ldr	r3, [pc, #12]	@ (8006990 <malloc+0x10>)
 8006984:	0001      	movs	r1, r0
 8006986:	6818      	ldr	r0, [r3, #0]
 8006988:	f000 f826 	bl	80069d8 <_malloc_r>
 800698c:	bd10      	pop	{r4, pc}
 800698e:	46c0      	nop			@ (mov r8, r8)
 8006990:	2000019c 	.word	0x2000019c

08006994 <sbrk_aligned>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4e0f      	ldr	r6, [pc, #60]	@ (80069d4 <sbrk_aligned+0x40>)
 8006998:	000d      	movs	r5, r1
 800699a:	6831      	ldr	r1, [r6, #0]
 800699c:	0004      	movs	r4, r0
 800699e:	2900      	cmp	r1, #0
 80069a0:	d102      	bne.n	80069a8 <sbrk_aligned+0x14>
 80069a2:	f000 fc5b 	bl	800725c <_sbrk_r>
 80069a6:	6030      	str	r0, [r6, #0]
 80069a8:	0029      	movs	r1, r5
 80069aa:	0020      	movs	r0, r4
 80069ac:	f000 fc56 	bl	800725c <_sbrk_r>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d103      	bne.n	80069bc <sbrk_aligned+0x28>
 80069b4:	2501      	movs	r5, #1
 80069b6:	426d      	negs	r5, r5
 80069b8:	0028      	movs	r0, r5
 80069ba:	bd70      	pop	{r4, r5, r6, pc}
 80069bc:	2303      	movs	r3, #3
 80069be:	1cc5      	adds	r5, r0, #3
 80069c0:	439d      	bics	r5, r3
 80069c2:	42a8      	cmp	r0, r5
 80069c4:	d0f8      	beq.n	80069b8 <sbrk_aligned+0x24>
 80069c6:	1a29      	subs	r1, r5, r0
 80069c8:	0020      	movs	r0, r4
 80069ca:	f000 fc47 	bl	800725c <_sbrk_r>
 80069ce:	3001      	adds	r0, #1
 80069d0:	d1f2      	bne.n	80069b8 <sbrk_aligned+0x24>
 80069d2:	e7ef      	b.n	80069b4 <sbrk_aligned+0x20>
 80069d4:	20001b40 	.word	0x20001b40

080069d8 <_malloc_r>:
 80069d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069da:	2203      	movs	r2, #3
 80069dc:	1ccb      	adds	r3, r1, #3
 80069de:	4393      	bics	r3, r2
 80069e0:	3308      	adds	r3, #8
 80069e2:	0005      	movs	r5, r0
 80069e4:	001f      	movs	r7, r3
 80069e6:	2b0c      	cmp	r3, #12
 80069e8:	d234      	bcs.n	8006a54 <_malloc_r+0x7c>
 80069ea:	270c      	movs	r7, #12
 80069ec:	42b9      	cmp	r1, r7
 80069ee:	d833      	bhi.n	8006a58 <_malloc_r+0x80>
 80069f0:	0028      	movs	r0, r5
 80069f2:	f000 f871 	bl	8006ad8 <__malloc_lock>
 80069f6:	4e37      	ldr	r6, [pc, #220]	@ (8006ad4 <_malloc_r+0xfc>)
 80069f8:	6833      	ldr	r3, [r6, #0]
 80069fa:	001c      	movs	r4, r3
 80069fc:	2c00      	cmp	r4, #0
 80069fe:	d12f      	bne.n	8006a60 <_malloc_r+0x88>
 8006a00:	0039      	movs	r1, r7
 8006a02:	0028      	movs	r0, r5
 8006a04:	f7ff ffc6 	bl	8006994 <sbrk_aligned>
 8006a08:	0004      	movs	r4, r0
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	d15f      	bne.n	8006ace <_malloc_r+0xf6>
 8006a0e:	6834      	ldr	r4, [r6, #0]
 8006a10:	9400      	str	r4, [sp, #0]
 8006a12:	9b00      	ldr	r3, [sp, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d14a      	bne.n	8006aae <_malloc_r+0xd6>
 8006a18:	2c00      	cmp	r4, #0
 8006a1a:	d052      	beq.n	8006ac2 <_malloc_r+0xea>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	0028      	movs	r0, r5
 8006a20:	18e3      	adds	r3, r4, r3
 8006a22:	9900      	ldr	r1, [sp, #0]
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	f000 fc19 	bl	800725c <_sbrk_r>
 8006a2a:	9b01      	ldr	r3, [sp, #4]
 8006a2c:	4283      	cmp	r3, r0
 8006a2e:	d148      	bne.n	8006ac2 <_malloc_r+0xea>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	0028      	movs	r0, r5
 8006a34:	1aff      	subs	r7, r7, r3
 8006a36:	0039      	movs	r1, r7
 8006a38:	f7ff ffac 	bl	8006994 <sbrk_aligned>
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d040      	beq.n	8006ac2 <_malloc_r+0xea>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	19db      	adds	r3, r3, r7
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	6833      	ldr	r3, [r6, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	2a00      	cmp	r2, #0
 8006a4c:	d133      	bne.n	8006ab6 <_malloc_r+0xde>
 8006a4e:	9b00      	ldr	r3, [sp, #0]
 8006a50:	6033      	str	r3, [r6, #0]
 8006a52:	e019      	b.n	8006a88 <_malloc_r+0xb0>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dac9      	bge.n	80069ec <_malloc_r+0x14>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	602b      	str	r3, [r5, #0]
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a60:	6821      	ldr	r1, [r4, #0]
 8006a62:	1bc9      	subs	r1, r1, r7
 8006a64:	d420      	bmi.n	8006aa8 <_malloc_r+0xd0>
 8006a66:	290b      	cmp	r1, #11
 8006a68:	d90a      	bls.n	8006a80 <_malloc_r+0xa8>
 8006a6a:	19e2      	adds	r2, r4, r7
 8006a6c:	6027      	str	r7, [r4, #0]
 8006a6e:	42a3      	cmp	r3, r4
 8006a70:	d104      	bne.n	8006a7c <_malloc_r+0xa4>
 8006a72:	6032      	str	r2, [r6, #0]
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	6011      	str	r1, [r2, #0]
 8006a78:	6053      	str	r3, [r2, #4]
 8006a7a:	e005      	b.n	8006a88 <_malloc_r+0xb0>
 8006a7c:	605a      	str	r2, [r3, #4]
 8006a7e:	e7f9      	b.n	8006a74 <_malloc_r+0x9c>
 8006a80:	6862      	ldr	r2, [r4, #4]
 8006a82:	42a3      	cmp	r3, r4
 8006a84:	d10e      	bne.n	8006aa4 <_malloc_r+0xcc>
 8006a86:	6032      	str	r2, [r6, #0]
 8006a88:	0028      	movs	r0, r5
 8006a8a:	f000 f82d 	bl	8006ae8 <__malloc_unlock>
 8006a8e:	0020      	movs	r0, r4
 8006a90:	2207      	movs	r2, #7
 8006a92:	300b      	adds	r0, #11
 8006a94:	1d23      	adds	r3, r4, #4
 8006a96:	4390      	bics	r0, r2
 8006a98:	1ac2      	subs	r2, r0, r3
 8006a9a:	4298      	cmp	r0, r3
 8006a9c:	d0df      	beq.n	8006a5e <_malloc_r+0x86>
 8006a9e:	1a1b      	subs	r3, r3, r0
 8006aa0:	50a3      	str	r3, [r4, r2]
 8006aa2:	e7dc      	b.n	8006a5e <_malloc_r+0x86>
 8006aa4:	605a      	str	r2, [r3, #4]
 8006aa6:	e7ef      	b.n	8006a88 <_malloc_r+0xb0>
 8006aa8:	0023      	movs	r3, r4
 8006aaa:	6864      	ldr	r4, [r4, #4]
 8006aac:	e7a6      	b.n	80069fc <_malloc_r+0x24>
 8006aae:	9c00      	ldr	r4, [sp, #0]
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	e7ad      	b.n	8006a12 <_malloc_r+0x3a>
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	d1fb      	bne.n	8006ab6 <_malloc_r+0xde>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	e7da      	b.n	8006a78 <_malloc_r+0xa0>
 8006ac2:	230c      	movs	r3, #12
 8006ac4:	0028      	movs	r0, r5
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	f000 f80e 	bl	8006ae8 <__malloc_unlock>
 8006acc:	e7c6      	b.n	8006a5c <_malloc_r+0x84>
 8006ace:	6007      	str	r7, [r0, #0]
 8006ad0:	e7da      	b.n	8006a88 <_malloc_r+0xb0>
 8006ad2:	46c0      	nop			@ (mov r8, r8)
 8006ad4:	20001b44 	.word	0x20001b44

08006ad8 <__malloc_lock>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	4802      	ldr	r0, [pc, #8]	@ (8006ae4 <__malloc_lock+0xc>)
 8006adc:	f7ff fed5 	bl	800688a <__retarget_lock_acquire_recursive>
 8006ae0:	bd10      	pop	{r4, pc}
 8006ae2:	46c0      	nop			@ (mov r8, r8)
 8006ae4:	20001b3c 	.word	0x20001b3c

08006ae8 <__malloc_unlock>:
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	4802      	ldr	r0, [pc, #8]	@ (8006af4 <__malloc_unlock+0xc>)
 8006aec:	f7ff fece 	bl	800688c <__retarget_lock_release_recursive>
 8006af0:	bd10      	pop	{r4, pc}
 8006af2:	46c0      	nop			@ (mov r8, r8)
 8006af4:	20001b3c 	.word	0x20001b3c

08006af8 <__ssputs_r>:
 8006af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006afa:	688e      	ldr	r6, [r1, #8]
 8006afc:	b085      	sub	sp, #20
 8006afe:	001f      	movs	r7, r3
 8006b00:	000c      	movs	r4, r1
 8006b02:	680b      	ldr	r3, [r1, #0]
 8006b04:	9002      	str	r0, [sp, #8]
 8006b06:	9203      	str	r2, [sp, #12]
 8006b08:	42be      	cmp	r6, r7
 8006b0a:	d830      	bhi.n	8006b6e <__ssputs_r+0x76>
 8006b0c:	210c      	movs	r1, #12
 8006b0e:	5e62      	ldrsh	r2, [r4, r1]
 8006b10:	2190      	movs	r1, #144	@ 0x90
 8006b12:	00c9      	lsls	r1, r1, #3
 8006b14:	420a      	tst	r2, r1
 8006b16:	d028      	beq.n	8006b6a <__ssputs_r+0x72>
 8006b18:	2003      	movs	r0, #3
 8006b1a:	6921      	ldr	r1, [r4, #16]
 8006b1c:	1a5b      	subs	r3, r3, r1
 8006b1e:	9301      	str	r3, [sp, #4]
 8006b20:	6963      	ldr	r3, [r4, #20]
 8006b22:	4343      	muls	r3, r0
 8006b24:	9801      	ldr	r0, [sp, #4]
 8006b26:	0fdd      	lsrs	r5, r3, #31
 8006b28:	18ed      	adds	r5, r5, r3
 8006b2a:	1c7b      	adds	r3, r7, #1
 8006b2c:	181b      	adds	r3, r3, r0
 8006b2e:	106d      	asrs	r5, r5, #1
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	d900      	bls.n	8006b36 <__ssputs_r+0x3e>
 8006b34:	001d      	movs	r5, r3
 8006b36:	0552      	lsls	r2, r2, #21
 8006b38:	d528      	bpl.n	8006b8c <__ssputs_r+0x94>
 8006b3a:	0029      	movs	r1, r5
 8006b3c:	9802      	ldr	r0, [sp, #8]
 8006b3e:	f7ff ff4b 	bl	80069d8 <_malloc_r>
 8006b42:	1e06      	subs	r6, r0, #0
 8006b44:	d02c      	beq.n	8006ba0 <__ssputs_r+0xa8>
 8006b46:	9a01      	ldr	r2, [sp, #4]
 8006b48:	6921      	ldr	r1, [r4, #16]
 8006b4a:	f7ff fea8 	bl	800689e <memcpy>
 8006b4e:	89a2      	ldrh	r2, [r4, #12]
 8006b50:	4b18      	ldr	r3, [pc, #96]	@ (8006bb4 <__ssputs_r+0xbc>)
 8006b52:	401a      	ands	r2, r3
 8006b54:	2380      	movs	r3, #128	@ 0x80
 8006b56:	4313      	orrs	r3, r2
 8006b58:	81a3      	strh	r3, [r4, #12]
 8006b5a:	9b01      	ldr	r3, [sp, #4]
 8006b5c:	6126      	str	r6, [r4, #16]
 8006b5e:	18f6      	adds	r6, r6, r3
 8006b60:	6026      	str	r6, [r4, #0]
 8006b62:	003e      	movs	r6, r7
 8006b64:	6165      	str	r5, [r4, #20]
 8006b66:	1aed      	subs	r5, r5, r3
 8006b68:	60a5      	str	r5, [r4, #8]
 8006b6a:	42be      	cmp	r6, r7
 8006b6c:	d900      	bls.n	8006b70 <__ssputs_r+0x78>
 8006b6e:	003e      	movs	r6, r7
 8006b70:	0032      	movs	r2, r6
 8006b72:	9903      	ldr	r1, [sp, #12]
 8006b74:	6820      	ldr	r0, [r4, #0]
 8006b76:	f000 fb5d 	bl	8007234 <memmove>
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	68a3      	ldr	r3, [r4, #8]
 8006b7e:	1b9b      	subs	r3, r3, r6
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	199b      	adds	r3, r3, r6
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	b005      	add	sp, #20
 8006b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8c:	002a      	movs	r2, r5
 8006b8e:	9802      	ldr	r0, [sp, #8]
 8006b90:	f000 fb88 	bl	80072a4 <_realloc_r>
 8006b94:	1e06      	subs	r6, r0, #0
 8006b96:	d1e0      	bne.n	8006b5a <__ssputs_r+0x62>
 8006b98:	6921      	ldr	r1, [r4, #16]
 8006b9a:	9802      	ldr	r0, [sp, #8]
 8006b9c:	f7ff fea6 	bl	80068ec <_free_r>
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	2001      	movs	r0, #1
 8006ba4:	9a02      	ldr	r2, [sp, #8]
 8006ba6:	4240      	negs	r0, r0
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	89a2      	ldrh	r2, [r4, #12]
 8006bac:	3334      	adds	r3, #52	@ 0x34
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	e7e9      	b.n	8006b88 <__ssputs_r+0x90>
 8006bb4:	fffffb7f 	.word	0xfffffb7f

08006bb8 <_svfiprintf_r>:
 8006bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bba:	b0a1      	sub	sp, #132	@ 0x84
 8006bbc:	9003      	str	r0, [sp, #12]
 8006bbe:	001d      	movs	r5, r3
 8006bc0:	898b      	ldrh	r3, [r1, #12]
 8006bc2:	000f      	movs	r7, r1
 8006bc4:	0016      	movs	r6, r2
 8006bc6:	061b      	lsls	r3, r3, #24
 8006bc8:	d511      	bpl.n	8006bee <_svfiprintf_r+0x36>
 8006bca:	690b      	ldr	r3, [r1, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10e      	bne.n	8006bee <_svfiprintf_r+0x36>
 8006bd0:	2140      	movs	r1, #64	@ 0x40
 8006bd2:	f7ff ff01 	bl	80069d8 <_malloc_r>
 8006bd6:	6038      	str	r0, [r7, #0]
 8006bd8:	6138      	str	r0, [r7, #16]
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d105      	bne.n	8006bea <_svfiprintf_r+0x32>
 8006bde:	230c      	movs	r3, #12
 8006be0:	9a03      	ldr	r2, [sp, #12]
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	2001      	movs	r0, #1
 8006be6:	4240      	negs	r0, r0
 8006be8:	e0cf      	b.n	8006d8a <_svfiprintf_r+0x1d2>
 8006bea:	2340      	movs	r3, #64	@ 0x40
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	ac08      	add	r4, sp, #32
 8006bf2:	6163      	str	r3, [r4, #20]
 8006bf4:	3320      	adds	r3, #32
 8006bf6:	7663      	strb	r3, [r4, #25]
 8006bf8:	3310      	adds	r3, #16
 8006bfa:	76a3      	strb	r3, [r4, #26]
 8006bfc:	9507      	str	r5, [sp, #28]
 8006bfe:	0035      	movs	r5, r6
 8006c00:	782b      	ldrb	r3, [r5, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <_svfiprintf_r+0x52>
 8006c06:	2b25      	cmp	r3, #37	@ 0x25
 8006c08:	d148      	bne.n	8006c9c <_svfiprintf_r+0xe4>
 8006c0a:	1bab      	subs	r3, r5, r6
 8006c0c:	9305      	str	r3, [sp, #20]
 8006c0e:	42b5      	cmp	r5, r6
 8006c10:	d00b      	beq.n	8006c2a <_svfiprintf_r+0x72>
 8006c12:	0032      	movs	r2, r6
 8006c14:	0039      	movs	r1, r7
 8006c16:	9803      	ldr	r0, [sp, #12]
 8006c18:	f7ff ff6e 	bl	8006af8 <__ssputs_r>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d100      	bne.n	8006c22 <_svfiprintf_r+0x6a>
 8006c20:	e0ae      	b.n	8006d80 <_svfiprintf_r+0x1c8>
 8006c22:	6963      	ldr	r3, [r4, #20]
 8006c24:	9a05      	ldr	r2, [sp, #20]
 8006c26:	189b      	adds	r3, r3, r2
 8006c28:	6163      	str	r3, [r4, #20]
 8006c2a:	782b      	ldrb	r3, [r5, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d100      	bne.n	8006c32 <_svfiprintf_r+0x7a>
 8006c30:	e0a6      	b.n	8006d80 <_svfiprintf_r+0x1c8>
 8006c32:	2201      	movs	r2, #1
 8006c34:	2300      	movs	r3, #0
 8006c36:	4252      	negs	r2, r2
 8006c38:	6062      	str	r2, [r4, #4]
 8006c3a:	a904      	add	r1, sp, #16
 8006c3c:	3254      	adds	r2, #84	@ 0x54
 8006c3e:	1852      	adds	r2, r2, r1
 8006c40:	1c6e      	adds	r6, r5, #1
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	60e3      	str	r3, [r4, #12]
 8006c46:	60a3      	str	r3, [r4, #8]
 8006c48:	7013      	strb	r3, [r2, #0]
 8006c4a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006c4c:	4b54      	ldr	r3, [pc, #336]	@ (8006da0 <_svfiprintf_r+0x1e8>)
 8006c4e:	2205      	movs	r2, #5
 8006c50:	0018      	movs	r0, r3
 8006c52:	7831      	ldrb	r1, [r6, #0]
 8006c54:	9305      	str	r3, [sp, #20]
 8006c56:	f000 fb13 	bl	8007280 <memchr>
 8006c5a:	1c75      	adds	r5, r6, #1
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d11f      	bne.n	8006ca0 <_svfiprintf_r+0xe8>
 8006c60:	6822      	ldr	r2, [r4, #0]
 8006c62:	06d3      	lsls	r3, r2, #27
 8006c64:	d504      	bpl.n	8006c70 <_svfiprintf_r+0xb8>
 8006c66:	2353      	movs	r3, #83	@ 0x53
 8006c68:	a904      	add	r1, sp, #16
 8006c6a:	185b      	adds	r3, r3, r1
 8006c6c:	2120      	movs	r1, #32
 8006c6e:	7019      	strb	r1, [r3, #0]
 8006c70:	0713      	lsls	r3, r2, #28
 8006c72:	d504      	bpl.n	8006c7e <_svfiprintf_r+0xc6>
 8006c74:	2353      	movs	r3, #83	@ 0x53
 8006c76:	a904      	add	r1, sp, #16
 8006c78:	185b      	adds	r3, r3, r1
 8006c7a:	212b      	movs	r1, #43	@ 0x2b
 8006c7c:	7019      	strb	r1, [r3, #0]
 8006c7e:	7833      	ldrb	r3, [r6, #0]
 8006c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c82:	d016      	beq.n	8006cb2 <_svfiprintf_r+0xfa>
 8006c84:	0035      	movs	r5, r6
 8006c86:	2100      	movs	r1, #0
 8006c88:	200a      	movs	r0, #10
 8006c8a:	68e3      	ldr	r3, [r4, #12]
 8006c8c:	782a      	ldrb	r2, [r5, #0]
 8006c8e:	1c6e      	adds	r6, r5, #1
 8006c90:	3a30      	subs	r2, #48	@ 0x30
 8006c92:	2a09      	cmp	r2, #9
 8006c94:	d950      	bls.n	8006d38 <_svfiprintf_r+0x180>
 8006c96:	2900      	cmp	r1, #0
 8006c98:	d111      	bne.n	8006cbe <_svfiprintf_r+0x106>
 8006c9a:	e017      	b.n	8006ccc <_svfiprintf_r+0x114>
 8006c9c:	3501      	adds	r5, #1
 8006c9e:	e7af      	b.n	8006c00 <_svfiprintf_r+0x48>
 8006ca0:	9b05      	ldr	r3, [sp, #20]
 8006ca2:	6822      	ldr	r2, [r4, #0]
 8006ca4:	1ac0      	subs	r0, r0, r3
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4083      	lsls	r3, r0
 8006caa:	4313      	orrs	r3, r2
 8006cac:	002e      	movs	r6, r5
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	e7cc      	b.n	8006c4c <_svfiprintf_r+0x94>
 8006cb2:	9b07      	ldr	r3, [sp, #28]
 8006cb4:	1d19      	adds	r1, r3, #4
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	9107      	str	r1, [sp, #28]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	db01      	blt.n	8006cc2 <_svfiprintf_r+0x10a>
 8006cbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cc0:	e004      	b.n	8006ccc <_svfiprintf_r+0x114>
 8006cc2:	425b      	negs	r3, r3
 8006cc4:	60e3      	str	r3, [r4, #12]
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	6023      	str	r3, [r4, #0]
 8006ccc:	782b      	ldrb	r3, [r5, #0]
 8006cce:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cd0:	d10c      	bne.n	8006cec <_svfiprintf_r+0x134>
 8006cd2:	786b      	ldrb	r3, [r5, #1]
 8006cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd6:	d134      	bne.n	8006d42 <_svfiprintf_r+0x18a>
 8006cd8:	9b07      	ldr	r3, [sp, #28]
 8006cda:	3502      	adds	r5, #2
 8006cdc:	1d1a      	adds	r2, r3, #4
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	9207      	str	r2, [sp, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da01      	bge.n	8006cea <_svfiprintf_r+0x132>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	425b      	negs	r3, r3
 8006cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cec:	4e2d      	ldr	r6, [pc, #180]	@ (8006da4 <_svfiprintf_r+0x1ec>)
 8006cee:	2203      	movs	r2, #3
 8006cf0:	0030      	movs	r0, r6
 8006cf2:	7829      	ldrb	r1, [r5, #0]
 8006cf4:	f000 fac4 	bl	8007280 <memchr>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d006      	beq.n	8006d0a <_svfiprintf_r+0x152>
 8006cfc:	2340      	movs	r3, #64	@ 0x40
 8006cfe:	1b80      	subs	r0, r0, r6
 8006d00:	4083      	lsls	r3, r0
 8006d02:	6822      	ldr	r2, [r4, #0]
 8006d04:	3501      	adds	r5, #1
 8006d06:	4313      	orrs	r3, r2
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	7829      	ldrb	r1, [r5, #0]
 8006d0c:	2206      	movs	r2, #6
 8006d0e:	4826      	ldr	r0, [pc, #152]	@ (8006da8 <_svfiprintf_r+0x1f0>)
 8006d10:	1c6e      	adds	r6, r5, #1
 8006d12:	7621      	strb	r1, [r4, #24]
 8006d14:	f000 fab4 	bl	8007280 <memchr>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	d038      	beq.n	8006d8e <_svfiprintf_r+0x1d6>
 8006d1c:	4b23      	ldr	r3, [pc, #140]	@ (8006dac <_svfiprintf_r+0x1f4>)
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d122      	bne.n	8006d68 <_svfiprintf_r+0x1b0>
 8006d22:	2207      	movs	r2, #7
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	3307      	adds	r3, #7
 8006d28:	4393      	bics	r3, r2
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	9307      	str	r3, [sp, #28]
 8006d2e:	6963      	ldr	r3, [r4, #20]
 8006d30:	9a04      	ldr	r2, [sp, #16]
 8006d32:	189b      	adds	r3, r3, r2
 8006d34:	6163      	str	r3, [r4, #20]
 8006d36:	e762      	b.n	8006bfe <_svfiprintf_r+0x46>
 8006d38:	4343      	muls	r3, r0
 8006d3a:	0035      	movs	r5, r6
 8006d3c:	2101      	movs	r1, #1
 8006d3e:	189b      	adds	r3, r3, r2
 8006d40:	e7a4      	b.n	8006c8c <_svfiprintf_r+0xd4>
 8006d42:	2300      	movs	r3, #0
 8006d44:	200a      	movs	r0, #10
 8006d46:	0019      	movs	r1, r3
 8006d48:	3501      	adds	r5, #1
 8006d4a:	6063      	str	r3, [r4, #4]
 8006d4c:	782a      	ldrb	r2, [r5, #0]
 8006d4e:	1c6e      	adds	r6, r5, #1
 8006d50:	3a30      	subs	r2, #48	@ 0x30
 8006d52:	2a09      	cmp	r2, #9
 8006d54:	d903      	bls.n	8006d5e <_svfiprintf_r+0x1a6>
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0c8      	beq.n	8006cec <_svfiprintf_r+0x134>
 8006d5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d5c:	e7c6      	b.n	8006cec <_svfiprintf_r+0x134>
 8006d5e:	4341      	muls	r1, r0
 8006d60:	0035      	movs	r5, r6
 8006d62:	2301      	movs	r3, #1
 8006d64:	1889      	adds	r1, r1, r2
 8006d66:	e7f1      	b.n	8006d4c <_svfiprintf_r+0x194>
 8006d68:	aa07      	add	r2, sp, #28
 8006d6a:	9200      	str	r2, [sp, #0]
 8006d6c:	0021      	movs	r1, r4
 8006d6e:	003a      	movs	r2, r7
 8006d70:	4b0f      	ldr	r3, [pc, #60]	@ (8006db0 <_svfiprintf_r+0x1f8>)
 8006d72:	9803      	ldr	r0, [sp, #12]
 8006d74:	e000      	b.n	8006d78 <_svfiprintf_r+0x1c0>
 8006d76:	bf00      	nop
 8006d78:	9004      	str	r0, [sp, #16]
 8006d7a:	9b04      	ldr	r3, [sp, #16]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	d1d6      	bne.n	8006d2e <_svfiprintf_r+0x176>
 8006d80:	89bb      	ldrh	r3, [r7, #12]
 8006d82:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006d84:	065b      	lsls	r3, r3, #25
 8006d86:	d500      	bpl.n	8006d8a <_svfiprintf_r+0x1d2>
 8006d88:	e72c      	b.n	8006be4 <_svfiprintf_r+0x2c>
 8006d8a:	b021      	add	sp, #132	@ 0x84
 8006d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d8e:	aa07      	add	r2, sp, #28
 8006d90:	9200      	str	r2, [sp, #0]
 8006d92:	0021      	movs	r1, r4
 8006d94:	003a      	movs	r2, r7
 8006d96:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <_svfiprintf_r+0x1f8>)
 8006d98:	9803      	ldr	r0, [sp, #12]
 8006d9a:	f000 f87b 	bl	8006e94 <_printf_i>
 8006d9e:	e7eb      	b.n	8006d78 <_svfiprintf_r+0x1c0>
 8006da0:	08007c62 	.word	0x08007c62
 8006da4:	08007c68 	.word	0x08007c68
 8006da8:	08007c6c 	.word	0x08007c6c
 8006dac:	00000000 	.word	0x00000000
 8006db0:	08006af9 	.word	0x08006af9

08006db4 <_printf_common>:
 8006db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006db6:	0016      	movs	r6, r2
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	688a      	ldr	r2, [r1, #8]
 8006dbc:	690b      	ldr	r3, [r1, #16]
 8006dbe:	000c      	movs	r4, r1
 8006dc0:	9000      	str	r0, [sp, #0]
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	da00      	bge.n	8006dc8 <_printf_common+0x14>
 8006dc6:	0013      	movs	r3, r2
 8006dc8:	0022      	movs	r2, r4
 8006dca:	6033      	str	r3, [r6, #0]
 8006dcc:	3243      	adds	r2, #67	@ 0x43
 8006dce:	7812      	ldrb	r2, [r2, #0]
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	d001      	beq.n	8006dd8 <_printf_common+0x24>
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	6033      	str	r3, [r6, #0]
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	069b      	lsls	r3, r3, #26
 8006ddc:	d502      	bpl.n	8006de4 <_printf_common+0x30>
 8006dde:	6833      	ldr	r3, [r6, #0]
 8006de0:	3302      	adds	r3, #2
 8006de2:	6033      	str	r3, [r6, #0]
 8006de4:	6822      	ldr	r2, [r4, #0]
 8006de6:	2306      	movs	r3, #6
 8006de8:	0015      	movs	r5, r2
 8006dea:	401d      	ands	r5, r3
 8006dec:	421a      	tst	r2, r3
 8006dee:	d027      	beq.n	8006e40 <_printf_common+0x8c>
 8006df0:	0023      	movs	r3, r4
 8006df2:	3343      	adds	r3, #67	@ 0x43
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	1e5a      	subs	r2, r3, #1
 8006df8:	4193      	sbcs	r3, r2
 8006dfa:	6822      	ldr	r2, [r4, #0]
 8006dfc:	0692      	lsls	r2, r2, #26
 8006dfe:	d430      	bmi.n	8006e62 <_printf_common+0xae>
 8006e00:	0022      	movs	r2, r4
 8006e02:	9901      	ldr	r1, [sp, #4]
 8006e04:	9800      	ldr	r0, [sp, #0]
 8006e06:	9d08      	ldr	r5, [sp, #32]
 8006e08:	3243      	adds	r2, #67	@ 0x43
 8006e0a:	47a8      	blx	r5
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d025      	beq.n	8006e5c <_printf_common+0xa8>
 8006e10:	2206      	movs	r2, #6
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	2500      	movs	r5, #0
 8006e16:	4013      	ands	r3, r2
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d105      	bne.n	8006e28 <_printf_common+0x74>
 8006e1c:	6833      	ldr	r3, [r6, #0]
 8006e1e:	68e5      	ldr	r5, [r4, #12]
 8006e20:	1aed      	subs	r5, r5, r3
 8006e22:	43eb      	mvns	r3, r5
 8006e24:	17db      	asrs	r3, r3, #31
 8006e26:	401d      	ands	r5, r3
 8006e28:	68a3      	ldr	r3, [r4, #8]
 8006e2a:	6922      	ldr	r2, [r4, #16]
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	dd01      	ble.n	8006e34 <_printf_common+0x80>
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	18ed      	adds	r5, r5, r3
 8006e34:	2600      	movs	r6, #0
 8006e36:	42b5      	cmp	r5, r6
 8006e38:	d120      	bne.n	8006e7c <_printf_common+0xc8>
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	e010      	b.n	8006e60 <_printf_common+0xac>
 8006e3e:	3501      	adds	r5, #1
 8006e40:	68e3      	ldr	r3, [r4, #12]
 8006e42:	6832      	ldr	r2, [r6, #0]
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	42ab      	cmp	r3, r5
 8006e48:	ddd2      	ble.n	8006df0 <_printf_common+0x3c>
 8006e4a:	0022      	movs	r2, r4
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	9901      	ldr	r1, [sp, #4]
 8006e50:	9800      	ldr	r0, [sp, #0]
 8006e52:	9f08      	ldr	r7, [sp, #32]
 8006e54:	3219      	adds	r2, #25
 8006e56:	47b8      	blx	r7
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d1f0      	bne.n	8006e3e <_printf_common+0x8a>
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	4240      	negs	r0, r0
 8006e60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e62:	2030      	movs	r0, #48	@ 0x30
 8006e64:	18e1      	adds	r1, r4, r3
 8006e66:	3143      	adds	r1, #67	@ 0x43
 8006e68:	7008      	strb	r0, [r1, #0]
 8006e6a:	0021      	movs	r1, r4
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	3145      	adds	r1, #69	@ 0x45
 8006e70:	7809      	ldrb	r1, [r1, #0]
 8006e72:	18a2      	adds	r2, r4, r2
 8006e74:	3243      	adds	r2, #67	@ 0x43
 8006e76:	3302      	adds	r3, #2
 8006e78:	7011      	strb	r1, [r2, #0]
 8006e7a:	e7c1      	b.n	8006e00 <_printf_common+0x4c>
 8006e7c:	0022      	movs	r2, r4
 8006e7e:	2301      	movs	r3, #1
 8006e80:	9901      	ldr	r1, [sp, #4]
 8006e82:	9800      	ldr	r0, [sp, #0]
 8006e84:	9f08      	ldr	r7, [sp, #32]
 8006e86:	321a      	adds	r2, #26
 8006e88:	47b8      	blx	r7
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	d0e6      	beq.n	8006e5c <_printf_common+0xa8>
 8006e8e:	3601      	adds	r6, #1
 8006e90:	e7d1      	b.n	8006e36 <_printf_common+0x82>
	...

08006e94 <_printf_i>:
 8006e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e96:	b08b      	sub	sp, #44	@ 0x2c
 8006e98:	9206      	str	r2, [sp, #24]
 8006e9a:	000a      	movs	r2, r1
 8006e9c:	3243      	adds	r2, #67	@ 0x43
 8006e9e:	9307      	str	r3, [sp, #28]
 8006ea0:	9005      	str	r0, [sp, #20]
 8006ea2:	9203      	str	r2, [sp, #12]
 8006ea4:	7e0a      	ldrb	r2, [r1, #24]
 8006ea6:	000c      	movs	r4, r1
 8006ea8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006eaa:	2a78      	cmp	r2, #120	@ 0x78
 8006eac:	d809      	bhi.n	8006ec2 <_printf_i+0x2e>
 8006eae:	2a62      	cmp	r2, #98	@ 0x62
 8006eb0:	d80b      	bhi.n	8006eca <_printf_i+0x36>
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	d100      	bne.n	8006eb8 <_printf_i+0x24>
 8006eb6:	e0bc      	b.n	8007032 <_printf_i+0x19e>
 8006eb8:	497b      	ldr	r1, [pc, #492]	@ (80070a8 <_printf_i+0x214>)
 8006eba:	9104      	str	r1, [sp, #16]
 8006ebc:	2a58      	cmp	r2, #88	@ 0x58
 8006ebe:	d100      	bne.n	8006ec2 <_printf_i+0x2e>
 8006ec0:	e090      	b.n	8006fe4 <_printf_i+0x150>
 8006ec2:	0025      	movs	r5, r4
 8006ec4:	3542      	adds	r5, #66	@ 0x42
 8006ec6:	702a      	strb	r2, [r5, #0]
 8006ec8:	e022      	b.n	8006f10 <_printf_i+0x7c>
 8006eca:	0010      	movs	r0, r2
 8006ecc:	3863      	subs	r0, #99	@ 0x63
 8006ece:	2815      	cmp	r0, #21
 8006ed0:	d8f7      	bhi.n	8006ec2 <_printf_i+0x2e>
 8006ed2:	f7f9 f935 	bl	8000140 <__gnu_thumb1_case_shi>
 8006ed6:	0016      	.short	0x0016
 8006ed8:	fff6001f 	.word	0xfff6001f
 8006edc:	fff6fff6 	.word	0xfff6fff6
 8006ee0:	001ffff6 	.word	0x001ffff6
 8006ee4:	fff6fff6 	.word	0xfff6fff6
 8006ee8:	fff6fff6 	.word	0xfff6fff6
 8006eec:	003600a1 	.word	0x003600a1
 8006ef0:	fff60080 	.word	0xfff60080
 8006ef4:	00b2fff6 	.word	0x00b2fff6
 8006ef8:	0036fff6 	.word	0x0036fff6
 8006efc:	fff6fff6 	.word	0xfff6fff6
 8006f00:	0084      	.short	0x0084
 8006f02:	0025      	movs	r5, r4
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	3542      	adds	r5, #66	@ 0x42
 8006f08:	1d11      	adds	r1, r2, #4
 8006f0a:	6019      	str	r1, [r3, #0]
 8006f0c:	6813      	ldr	r3, [r2, #0]
 8006f0e:	702b      	strb	r3, [r5, #0]
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0a0      	b.n	8007056 <_printf_i+0x1c2>
 8006f14:	6818      	ldr	r0, [r3, #0]
 8006f16:	6809      	ldr	r1, [r1, #0]
 8006f18:	1d02      	adds	r2, r0, #4
 8006f1a:	060d      	lsls	r5, r1, #24
 8006f1c:	d50b      	bpl.n	8006f36 <_printf_i+0xa2>
 8006f1e:	6806      	ldr	r6, [r0, #0]
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	2e00      	cmp	r6, #0
 8006f24:	da03      	bge.n	8006f2e <_printf_i+0x9a>
 8006f26:	232d      	movs	r3, #45	@ 0x2d
 8006f28:	9a03      	ldr	r2, [sp, #12]
 8006f2a:	4276      	negs	r6, r6
 8006f2c:	7013      	strb	r3, [r2, #0]
 8006f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80070a8 <_printf_i+0x214>)
 8006f30:	270a      	movs	r7, #10
 8006f32:	9304      	str	r3, [sp, #16]
 8006f34:	e018      	b.n	8006f68 <_printf_i+0xd4>
 8006f36:	6806      	ldr	r6, [r0, #0]
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	0649      	lsls	r1, r1, #25
 8006f3c:	d5f1      	bpl.n	8006f22 <_printf_i+0x8e>
 8006f3e:	b236      	sxth	r6, r6
 8006f40:	e7ef      	b.n	8006f22 <_printf_i+0x8e>
 8006f42:	6808      	ldr	r0, [r1, #0]
 8006f44:	6819      	ldr	r1, [r3, #0]
 8006f46:	c940      	ldmia	r1!, {r6}
 8006f48:	0605      	lsls	r5, r0, #24
 8006f4a:	d402      	bmi.n	8006f52 <_printf_i+0xbe>
 8006f4c:	0640      	lsls	r0, r0, #25
 8006f4e:	d500      	bpl.n	8006f52 <_printf_i+0xbe>
 8006f50:	b2b6      	uxth	r6, r6
 8006f52:	6019      	str	r1, [r3, #0]
 8006f54:	4b54      	ldr	r3, [pc, #336]	@ (80070a8 <_printf_i+0x214>)
 8006f56:	270a      	movs	r7, #10
 8006f58:	9304      	str	r3, [sp, #16]
 8006f5a:	2a6f      	cmp	r2, #111	@ 0x6f
 8006f5c:	d100      	bne.n	8006f60 <_printf_i+0xcc>
 8006f5e:	3f02      	subs	r7, #2
 8006f60:	0023      	movs	r3, r4
 8006f62:	2200      	movs	r2, #0
 8006f64:	3343      	adds	r3, #67	@ 0x43
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	6863      	ldr	r3, [r4, #4]
 8006f6a:	60a3      	str	r3, [r4, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	db03      	blt.n	8006f78 <_printf_i+0xe4>
 8006f70:	2104      	movs	r1, #4
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	438a      	bics	r2, r1
 8006f76:	6022      	str	r2, [r4, #0]
 8006f78:	2e00      	cmp	r6, #0
 8006f7a:	d102      	bne.n	8006f82 <_printf_i+0xee>
 8006f7c:	9d03      	ldr	r5, [sp, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <_printf_i+0x108>
 8006f82:	9d03      	ldr	r5, [sp, #12]
 8006f84:	0030      	movs	r0, r6
 8006f86:	0039      	movs	r1, r7
 8006f88:	f7f9 f974 	bl	8000274 <__aeabi_uidivmod>
 8006f8c:	9b04      	ldr	r3, [sp, #16]
 8006f8e:	3d01      	subs	r5, #1
 8006f90:	5c5b      	ldrb	r3, [r3, r1]
 8006f92:	702b      	strb	r3, [r5, #0]
 8006f94:	0033      	movs	r3, r6
 8006f96:	0006      	movs	r6, r0
 8006f98:	429f      	cmp	r7, r3
 8006f9a:	d9f3      	bls.n	8006f84 <_printf_i+0xf0>
 8006f9c:	2f08      	cmp	r7, #8
 8006f9e:	d109      	bne.n	8006fb4 <_printf_i+0x120>
 8006fa0:	6823      	ldr	r3, [r4, #0]
 8006fa2:	07db      	lsls	r3, r3, #31
 8006fa4:	d506      	bpl.n	8006fb4 <_printf_i+0x120>
 8006fa6:	6862      	ldr	r2, [r4, #4]
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	dc02      	bgt.n	8006fb4 <_printf_i+0x120>
 8006fae:	2330      	movs	r3, #48	@ 0x30
 8006fb0:	3d01      	subs	r5, #1
 8006fb2:	702b      	strb	r3, [r5, #0]
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	1b5b      	subs	r3, r3, r5
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	9b07      	ldr	r3, [sp, #28]
 8006fbc:	0021      	movs	r1, r4
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	9805      	ldr	r0, [sp, #20]
 8006fc2:	9b06      	ldr	r3, [sp, #24]
 8006fc4:	aa09      	add	r2, sp, #36	@ 0x24
 8006fc6:	f7ff fef5 	bl	8006db4 <_printf_common>
 8006fca:	3001      	adds	r0, #1
 8006fcc:	d148      	bne.n	8007060 <_printf_i+0x1cc>
 8006fce:	2001      	movs	r0, #1
 8006fd0:	4240      	negs	r0, r0
 8006fd2:	b00b      	add	sp, #44	@ 0x2c
 8006fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	6809      	ldr	r1, [r1, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	6022      	str	r2, [r4, #0]
 8006fde:	2278      	movs	r2, #120	@ 0x78
 8006fe0:	4932      	ldr	r1, [pc, #200]	@ (80070ac <_printf_i+0x218>)
 8006fe2:	9104      	str	r1, [sp, #16]
 8006fe4:	0021      	movs	r1, r4
 8006fe6:	3145      	adds	r1, #69	@ 0x45
 8006fe8:	700a      	strb	r2, [r1, #0]
 8006fea:	6819      	ldr	r1, [r3, #0]
 8006fec:	6822      	ldr	r2, [r4, #0]
 8006fee:	c940      	ldmia	r1!, {r6}
 8006ff0:	0610      	lsls	r0, r2, #24
 8006ff2:	d402      	bmi.n	8006ffa <_printf_i+0x166>
 8006ff4:	0650      	lsls	r0, r2, #25
 8006ff6:	d500      	bpl.n	8006ffa <_printf_i+0x166>
 8006ff8:	b2b6      	uxth	r6, r6
 8006ffa:	6019      	str	r1, [r3, #0]
 8006ffc:	07d3      	lsls	r3, r2, #31
 8006ffe:	d502      	bpl.n	8007006 <_printf_i+0x172>
 8007000:	2320      	movs	r3, #32
 8007002:	4313      	orrs	r3, r2
 8007004:	6023      	str	r3, [r4, #0]
 8007006:	2e00      	cmp	r6, #0
 8007008:	d001      	beq.n	800700e <_printf_i+0x17a>
 800700a:	2710      	movs	r7, #16
 800700c:	e7a8      	b.n	8006f60 <_printf_i+0xcc>
 800700e:	2220      	movs	r2, #32
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	4393      	bics	r3, r2
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	e7f8      	b.n	800700a <_printf_i+0x176>
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	680d      	ldr	r5, [r1, #0]
 800701c:	1d10      	adds	r0, r2, #4
 800701e:	6949      	ldr	r1, [r1, #20]
 8007020:	6018      	str	r0, [r3, #0]
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	062e      	lsls	r6, r5, #24
 8007026:	d501      	bpl.n	800702c <_printf_i+0x198>
 8007028:	6019      	str	r1, [r3, #0]
 800702a:	e002      	b.n	8007032 <_printf_i+0x19e>
 800702c:	066d      	lsls	r5, r5, #25
 800702e:	d5fb      	bpl.n	8007028 <_printf_i+0x194>
 8007030:	8019      	strh	r1, [r3, #0]
 8007032:	2300      	movs	r3, #0
 8007034:	9d03      	ldr	r5, [sp, #12]
 8007036:	6123      	str	r3, [r4, #16]
 8007038:	e7bf      	b.n	8006fba <_printf_i+0x126>
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	1d11      	adds	r1, r2, #4
 800703e:	6019      	str	r1, [r3, #0]
 8007040:	6815      	ldr	r5, [r2, #0]
 8007042:	2100      	movs	r1, #0
 8007044:	0028      	movs	r0, r5
 8007046:	6862      	ldr	r2, [r4, #4]
 8007048:	f000 f91a 	bl	8007280 <memchr>
 800704c:	2800      	cmp	r0, #0
 800704e:	d001      	beq.n	8007054 <_printf_i+0x1c0>
 8007050:	1b40      	subs	r0, r0, r5
 8007052:	6060      	str	r0, [r4, #4]
 8007054:	6863      	ldr	r3, [r4, #4]
 8007056:	6123      	str	r3, [r4, #16]
 8007058:	2300      	movs	r3, #0
 800705a:	9a03      	ldr	r2, [sp, #12]
 800705c:	7013      	strb	r3, [r2, #0]
 800705e:	e7ac      	b.n	8006fba <_printf_i+0x126>
 8007060:	002a      	movs	r2, r5
 8007062:	6923      	ldr	r3, [r4, #16]
 8007064:	9906      	ldr	r1, [sp, #24]
 8007066:	9805      	ldr	r0, [sp, #20]
 8007068:	9d07      	ldr	r5, [sp, #28]
 800706a:	47a8      	blx	r5
 800706c:	3001      	adds	r0, #1
 800706e:	d0ae      	beq.n	8006fce <_printf_i+0x13a>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	079b      	lsls	r3, r3, #30
 8007074:	d415      	bmi.n	80070a2 <_printf_i+0x20e>
 8007076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007078:	68e0      	ldr	r0, [r4, #12]
 800707a:	4298      	cmp	r0, r3
 800707c:	daa9      	bge.n	8006fd2 <_printf_i+0x13e>
 800707e:	0018      	movs	r0, r3
 8007080:	e7a7      	b.n	8006fd2 <_printf_i+0x13e>
 8007082:	0022      	movs	r2, r4
 8007084:	2301      	movs	r3, #1
 8007086:	9906      	ldr	r1, [sp, #24]
 8007088:	9805      	ldr	r0, [sp, #20]
 800708a:	9e07      	ldr	r6, [sp, #28]
 800708c:	3219      	adds	r2, #25
 800708e:	47b0      	blx	r6
 8007090:	3001      	adds	r0, #1
 8007092:	d09c      	beq.n	8006fce <_printf_i+0x13a>
 8007094:	3501      	adds	r5, #1
 8007096:	68e3      	ldr	r3, [r4, #12]
 8007098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800709a:	1a9b      	subs	r3, r3, r2
 800709c:	42ab      	cmp	r3, r5
 800709e:	dcf0      	bgt.n	8007082 <_printf_i+0x1ee>
 80070a0:	e7e9      	b.n	8007076 <_printf_i+0x1e2>
 80070a2:	2500      	movs	r5, #0
 80070a4:	e7f7      	b.n	8007096 <_printf_i+0x202>
 80070a6:	46c0      	nop			@ (mov r8, r8)
 80070a8:	08007c73 	.word	0x08007c73
 80070ac:	08007c84 	.word	0x08007c84

080070b0 <__sflush_r>:
 80070b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b2:	220c      	movs	r2, #12
 80070b4:	5e8b      	ldrsh	r3, [r1, r2]
 80070b6:	0005      	movs	r5, r0
 80070b8:	000c      	movs	r4, r1
 80070ba:	071a      	lsls	r2, r3, #28
 80070bc:	d456      	bmi.n	800716c <__sflush_r+0xbc>
 80070be:	684a      	ldr	r2, [r1, #4]
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	dc02      	bgt.n	80070ca <__sflush_r+0x1a>
 80070c4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80070c6:	2a00      	cmp	r2, #0
 80070c8:	dd4e      	ble.n	8007168 <__sflush_r+0xb8>
 80070ca:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80070cc:	2f00      	cmp	r7, #0
 80070ce:	d04b      	beq.n	8007168 <__sflush_r+0xb8>
 80070d0:	2200      	movs	r2, #0
 80070d2:	2080      	movs	r0, #128	@ 0x80
 80070d4:	682e      	ldr	r6, [r5, #0]
 80070d6:	602a      	str	r2, [r5, #0]
 80070d8:	001a      	movs	r2, r3
 80070da:	0140      	lsls	r0, r0, #5
 80070dc:	6a21      	ldr	r1, [r4, #32]
 80070de:	4002      	ands	r2, r0
 80070e0:	4203      	tst	r3, r0
 80070e2:	d033      	beq.n	800714c <__sflush_r+0x9c>
 80070e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80070e6:	89a3      	ldrh	r3, [r4, #12]
 80070e8:	075b      	lsls	r3, r3, #29
 80070ea:	d506      	bpl.n	80070fa <__sflush_r+0x4a>
 80070ec:	6863      	ldr	r3, [r4, #4]
 80070ee:	1ad2      	subs	r2, r2, r3
 80070f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <__sflush_r+0x4a>
 80070f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80070f8:	1ad2      	subs	r2, r2, r3
 80070fa:	2300      	movs	r3, #0
 80070fc:	0028      	movs	r0, r5
 80070fe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007100:	6a21      	ldr	r1, [r4, #32]
 8007102:	47b8      	blx	r7
 8007104:	89a2      	ldrh	r2, [r4, #12]
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	d106      	bne.n	8007118 <__sflush_r+0x68>
 800710a:	6829      	ldr	r1, [r5, #0]
 800710c:	291d      	cmp	r1, #29
 800710e:	d846      	bhi.n	800719e <__sflush_r+0xee>
 8007110:	4b29      	ldr	r3, [pc, #164]	@ (80071b8 <__sflush_r+0x108>)
 8007112:	410b      	asrs	r3, r1
 8007114:	07db      	lsls	r3, r3, #31
 8007116:	d442      	bmi.n	800719e <__sflush_r+0xee>
 8007118:	2300      	movs	r3, #0
 800711a:	6063      	str	r3, [r4, #4]
 800711c:	6923      	ldr	r3, [r4, #16]
 800711e:	6023      	str	r3, [r4, #0]
 8007120:	04d2      	lsls	r2, r2, #19
 8007122:	d505      	bpl.n	8007130 <__sflush_r+0x80>
 8007124:	1c43      	adds	r3, r0, #1
 8007126:	d102      	bne.n	800712e <__sflush_r+0x7e>
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d100      	bne.n	8007130 <__sflush_r+0x80>
 800712e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007132:	602e      	str	r6, [r5, #0]
 8007134:	2900      	cmp	r1, #0
 8007136:	d017      	beq.n	8007168 <__sflush_r+0xb8>
 8007138:	0023      	movs	r3, r4
 800713a:	3344      	adds	r3, #68	@ 0x44
 800713c:	4299      	cmp	r1, r3
 800713e:	d002      	beq.n	8007146 <__sflush_r+0x96>
 8007140:	0028      	movs	r0, r5
 8007142:	f7ff fbd3 	bl	80068ec <_free_r>
 8007146:	2300      	movs	r3, #0
 8007148:	6363      	str	r3, [r4, #52]	@ 0x34
 800714a:	e00d      	b.n	8007168 <__sflush_r+0xb8>
 800714c:	2301      	movs	r3, #1
 800714e:	0028      	movs	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	0002      	movs	r2, r0
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d1c6      	bne.n	80070e6 <__sflush_r+0x36>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0c3      	beq.n	80070e6 <__sflush_r+0x36>
 800715e:	2b1d      	cmp	r3, #29
 8007160:	d001      	beq.n	8007166 <__sflush_r+0xb6>
 8007162:	2b16      	cmp	r3, #22
 8007164:	d11a      	bne.n	800719c <__sflush_r+0xec>
 8007166:	602e      	str	r6, [r5, #0]
 8007168:	2000      	movs	r0, #0
 800716a:	e01e      	b.n	80071aa <__sflush_r+0xfa>
 800716c:	690e      	ldr	r6, [r1, #16]
 800716e:	2e00      	cmp	r6, #0
 8007170:	d0fa      	beq.n	8007168 <__sflush_r+0xb8>
 8007172:	680f      	ldr	r7, [r1, #0]
 8007174:	600e      	str	r6, [r1, #0]
 8007176:	1bba      	subs	r2, r7, r6
 8007178:	9201      	str	r2, [sp, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	079b      	lsls	r3, r3, #30
 800717e:	d100      	bne.n	8007182 <__sflush_r+0xd2>
 8007180:	694a      	ldr	r2, [r1, #20]
 8007182:	60a2      	str	r2, [r4, #8]
 8007184:	9b01      	ldr	r3, [sp, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	ddee      	ble.n	8007168 <__sflush_r+0xb8>
 800718a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800718c:	0032      	movs	r2, r6
 800718e:	001f      	movs	r7, r3
 8007190:	0028      	movs	r0, r5
 8007192:	9b01      	ldr	r3, [sp, #4]
 8007194:	6a21      	ldr	r1, [r4, #32]
 8007196:	47b8      	blx	r7
 8007198:	2800      	cmp	r0, #0
 800719a:	dc07      	bgt.n	80071ac <__sflush_r+0xfc>
 800719c:	89a2      	ldrh	r2, [r4, #12]
 800719e:	2340      	movs	r3, #64	@ 0x40
 80071a0:	2001      	movs	r0, #1
 80071a2:	4313      	orrs	r3, r2
 80071a4:	b21b      	sxth	r3, r3
 80071a6:	81a3      	strh	r3, [r4, #12]
 80071a8:	4240      	negs	r0, r0
 80071aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071ac:	9b01      	ldr	r3, [sp, #4]
 80071ae:	1836      	adds	r6, r6, r0
 80071b0:	1a1b      	subs	r3, r3, r0
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	e7e6      	b.n	8007184 <__sflush_r+0xd4>
 80071b6:	46c0      	nop			@ (mov r8, r8)
 80071b8:	dfbffffe 	.word	0xdfbffffe

080071bc <_fflush_r>:
 80071bc:	690b      	ldr	r3, [r1, #16]
 80071be:	b570      	push	{r4, r5, r6, lr}
 80071c0:	0005      	movs	r5, r0
 80071c2:	000c      	movs	r4, r1
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <_fflush_r+0x12>
 80071c8:	2500      	movs	r5, #0
 80071ca:	0028      	movs	r0, r5
 80071cc:	bd70      	pop	{r4, r5, r6, pc}
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d004      	beq.n	80071dc <_fflush_r+0x20>
 80071d2:	6a03      	ldr	r3, [r0, #32]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <_fflush_r+0x20>
 80071d8:	f7ff f9d6 	bl	8006588 <__sinit>
 80071dc:	220c      	movs	r2, #12
 80071de:	5ea3      	ldrsh	r3, [r4, r2]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0f1      	beq.n	80071c8 <_fflush_r+0xc>
 80071e4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80071e6:	07d2      	lsls	r2, r2, #31
 80071e8:	d404      	bmi.n	80071f4 <_fflush_r+0x38>
 80071ea:	059b      	lsls	r3, r3, #22
 80071ec:	d402      	bmi.n	80071f4 <_fflush_r+0x38>
 80071ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071f0:	f7ff fb4b 	bl	800688a <__retarget_lock_acquire_recursive>
 80071f4:	0028      	movs	r0, r5
 80071f6:	0021      	movs	r1, r4
 80071f8:	f7ff ff5a 	bl	80070b0 <__sflush_r>
 80071fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071fe:	0005      	movs	r5, r0
 8007200:	07db      	lsls	r3, r3, #31
 8007202:	d4e2      	bmi.n	80071ca <_fflush_r+0xe>
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	059b      	lsls	r3, r3, #22
 8007208:	d4df      	bmi.n	80071ca <_fflush_r+0xe>
 800720a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800720c:	f7ff fb3e 	bl	800688c <__retarget_lock_release_recursive>
 8007210:	e7db      	b.n	80071ca <_fflush_r+0xe>
	...

08007214 <fiprintf>:
 8007214:	b40e      	push	{r1, r2, r3}
 8007216:	b517      	push	{r0, r1, r2, r4, lr}
 8007218:	4c05      	ldr	r4, [pc, #20]	@ (8007230 <fiprintf+0x1c>)
 800721a:	ab05      	add	r3, sp, #20
 800721c:	cb04      	ldmia	r3!, {r2}
 800721e:	0001      	movs	r1, r0
 8007220:	6820      	ldr	r0, [r4, #0]
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	f000 f894 	bl	8007350 <_vfiprintf_r>
 8007228:	bc1e      	pop	{r1, r2, r3, r4}
 800722a:	bc08      	pop	{r3}
 800722c:	b003      	add	sp, #12
 800722e:	4718      	bx	r3
 8007230:	2000019c 	.word	0x2000019c

08007234 <memmove>:
 8007234:	b510      	push	{r4, lr}
 8007236:	4288      	cmp	r0, r1
 8007238:	d806      	bhi.n	8007248 <memmove+0x14>
 800723a:	2300      	movs	r3, #0
 800723c:	429a      	cmp	r2, r3
 800723e:	d008      	beq.n	8007252 <memmove+0x1e>
 8007240:	5ccc      	ldrb	r4, [r1, r3]
 8007242:	54c4      	strb	r4, [r0, r3]
 8007244:	3301      	adds	r3, #1
 8007246:	e7f9      	b.n	800723c <memmove+0x8>
 8007248:	188b      	adds	r3, r1, r2
 800724a:	4298      	cmp	r0, r3
 800724c:	d2f5      	bcs.n	800723a <memmove+0x6>
 800724e:	3a01      	subs	r2, #1
 8007250:	d200      	bcs.n	8007254 <memmove+0x20>
 8007252:	bd10      	pop	{r4, pc}
 8007254:	5c8b      	ldrb	r3, [r1, r2]
 8007256:	5483      	strb	r3, [r0, r2]
 8007258:	e7f9      	b.n	800724e <memmove+0x1a>
	...

0800725c <_sbrk_r>:
 800725c:	2300      	movs	r3, #0
 800725e:	b570      	push	{r4, r5, r6, lr}
 8007260:	4d06      	ldr	r5, [pc, #24]	@ (800727c <_sbrk_r+0x20>)
 8007262:	0004      	movs	r4, r0
 8007264:	0008      	movs	r0, r1
 8007266:	602b      	str	r3, [r5, #0]
 8007268:	f7fa fec8 	bl	8001ffc <_sbrk>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d103      	bne.n	8007278 <_sbrk_r+0x1c>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d000      	beq.n	8007278 <_sbrk_r+0x1c>
 8007276:	6023      	str	r3, [r4, #0]
 8007278:	bd70      	pop	{r4, r5, r6, pc}
 800727a:	46c0      	nop			@ (mov r8, r8)
 800727c:	20001b38 	.word	0x20001b38

08007280 <memchr>:
 8007280:	b2c9      	uxtb	r1, r1
 8007282:	1882      	adds	r2, r0, r2
 8007284:	4290      	cmp	r0, r2
 8007286:	d101      	bne.n	800728c <memchr+0xc>
 8007288:	2000      	movs	r0, #0
 800728a:	4770      	bx	lr
 800728c:	7803      	ldrb	r3, [r0, #0]
 800728e:	428b      	cmp	r3, r1
 8007290:	d0fb      	beq.n	800728a <memchr+0xa>
 8007292:	3001      	adds	r0, #1
 8007294:	e7f6      	b.n	8007284 <memchr+0x4>

08007296 <abort>:
 8007296:	2006      	movs	r0, #6
 8007298:	b510      	push	{r4, lr}
 800729a:	f000 fa3f 	bl	800771c <raise>
 800729e:	2001      	movs	r0, #1
 80072a0:	f7fa fe80 	bl	8001fa4 <_exit>

080072a4 <_realloc_r>:
 80072a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072a6:	0006      	movs	r6, r0
 80072a8:	000c      	movs	r4, r1
 80072aa:	0015      	movs	r5, r2
 80072ac:	2900      	cmp	r1, #0
 80072ae:	d105      	bne.n	80072bc <_realloc_r+0x18>
 80072b0:	0011      	movs	r1, r2
 80072b2:	f7ff fb91 	bl	80069d8 <_malloc_r>
 80072b6:	0004      	movs	r4, r0
 80072b8:	0020      	movs	r0, r4
 80072ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072bc:	2a00      	cmp	r2, #0
 80072be:	d103      	bne.n	80072c8 <_realloc_r+0x24>
 80072c0:	f7ff fb14 	bl	80068ec <_free_r>
 80072c4:	2400      	movs	r4, #0
 80072c6:	e7f7      	b.n	80072b8 <_realloc_r+0x14>
 80072c8:	f000 fa48 	bl	800775c <_malloc_usable_size_r>
 80072cc:	0007      	movs	r7, r0
 80072ce:	4285      	cmp	r5, r0
 80072d0:	d802      	bhi.n	80072d8 <_realloc_r+0x34>
 80072d2:	0843      	lsrs	r3, r0, #1
 80072d4:	42ab      	cmp	r3, r5
 80072d6:	d3ef      	bcc.n	80072b8 <_realloc_r+0x14>
 80072d8:	0029      	movs	r1, r5
 80072da:	0030      	movs	r0, r6
 80072dc:	f7ff fb7c 	bl	80069d8 <_malloc_r>
 80072e0:	9001      	str	r0, [sp, #4]
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d0ee      	beq.n	80072c4 <_realloc_r+0x20>
 80072e6:	002a      	movs	r2, r5
 80072e8:	42bd      	cmp	r5, r7
 80072ea:	d900      	bls.n	80072ee <_realloc_r+0x4a>
 80072ec:	003a      	movs	r2, r7
 80072ee:	0021      	movs	r1, r4
 80072f0:	9801      	ldr	r0, [sp, #4]
 80072f2:	f7ff fad4 	bl	800689e <memcpy>
 80072f6:	0021      	movs	r1, r4
 80072f8:	0030      	movs	r0, r6
 80072fa:	f7ff faf7 	bl	80068ec <_free_r>
 80072fe:	9c01      	ldr	r4, [sp, #4]
 8007300:	e7da      	b.n	80072b8 <_realloc_r+0x14>

08007302 <__sfputc_r>:
 8007302:	6893      	ldr	r3, [r2, #8]
 8007304:	b510      	push	{r4, lr}
 8007306:	3b01      	subs	r3, #1
 8007308:	6093      	str	r3, [r2, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	da04      	bge.n	8007318 <__sfputc_r+0x16>
 800730e:	6994      	ldr	r4, [r2, #24]
 8007310:	42a3      	cmp	r3, r4
 8007312:	db07      	blt.n	8007324 <__sfputc_r+0x22>
 8007314:	290a      	cmp	r1, #10
 8007316:	d005      	beq.n	8007324 <__sfputc_r+0x22>
 8007318:	6813      	ldr	r3, [r2, #0]
 800731a:	1c58      	adds	r0, r3, #1
 800731c:	6010      	str	r0, [r2, #0]
 800731e:	7019      	strb	r1, [r3, #0]
 8007320:	0008      	movs	r0, r1
 8007322:	bd10      	pop	{r4, pc}
 8007324:	f000 f930 	bl	8007588 <__swbuf_r>
 8007328:	0001      	movs	r1, r0
 800732a:	e7f9      	b.n	8007320 <__sfputc_r+0x1e>

0800732c <__sfputs_r>:
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732e:	0006      	movs	r6, r0
 8007330:	000f      	movs	r7, r1
 8007332:	0014      	movs	r4, r2
 8007334:	18d5      	adds	r5, r2, r3
 8007336:	42ac      	cmp	r4, r5
 8007338:	d101      	bne.n	800733e <__sfputs_r+0x12>
 800733a:	2000      	movs	r0, #0
 800733c:	e007      	b.n	800734e <__sfputs_r+0x22>
 800733e:	7821      	ldrb	r1, [r4, #0]
 8007340:	003a      	movs	r2, r7
 8007342:	0030      	movs	r0, r6
 8007344:	f7ff ffdd 	bl	8007302 <__sfputc_r>
 8007348:	3401      	adds	r4, #1
 800734a:	1c43      	adds	r3, r0, #1
 800734c:	d1f3      	bne.n	8007336 <__sfputs_r+0xa>
 800734e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007350 <_vfiprintf_r>:
 8007350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007352:	b0a1      	sub	sp, #132	@ 0x84
 8007354:	000f      	movs	r7, r1
 8007356:	0015      	movs	r5, r2
 8007358:	001e      	movs	r6, r3
 800735a:	9003      	str	r0, [sp, #12]
 800735c:	2800      	cmp	r0, #0
 800735e:	d004      	beq.n	800736a <_vfiprintf_r+0x1a>
 8007360:	6a03      	ldr	r3, [r0, #32]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <_vfiprintf_r+0x1a>
 8007366:	f7ff f90f 	bl	8006588 <__sinit>
 800736a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800736c:	07db      	lsls	r3, r3, #31
 800736e:	d405      	bmi.n	800737c <_vfiprintf_r+0x2c>
 8007370:	89bb      	ldrh	r3, [r7, #12]
 8007372:	059b      	lsls	r3, r3, #22
 8007374:	d402      	bmi.n	800737c <_vfiprintf_r+0x2c>
 8007376:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007378:	f7ff fa87 	bl	800688a <__retarget_lock_acquire_recursive>
 800737c:	89bb      	ldrh	r3, [r7, #12]
 800737e:	071b      	lsls	r3, r3, #28
 8007380:	d502      	bpl.n	8007388 <_vfiprintf_r+0x38>
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d113      	bne.n	80073b0 <_vfiprintf_r+0x60>
 8007388:	0039      	movs	r1, r7
 800738a:	9803      	ldr	r0, [sp, #12]
 800738c:	f000 f93e 	bl	800760c <__swsetup_r>
 8007390:	2800      	cmp	r0, #0
 8007392:	d00d      	beq.n	80073b0 <_vfiprintf_r+0x60>
 8007394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007396:	07db      	lsls	r3, r3, #31
 8007398:	d503      	bpl.n	80073a2 <_vfiprintf_r+0x52>
 800739a:	2001      	movs	r0, #1
 800739c:	4240      	negs	r0, r0
 800739e:	b021      	add	sp, #132	@ 0x84
 80073a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a2:	89bb      	ldrh	r3, [r7, #12]
 80073a4:	059b      	lsls	r3, r3, #22
 80073a6:	d4f8      	bmi.n	800739a <_vfiprintf_r+0x4a>
 80073a8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80073aa:	f7ff fa6f 	bl	800688c <__retarget_lock_release_recursive>
 80073ae:	e7f4      	b.n	800739a <_vfiprintf_r+0x4a>
 80073b0:	2300      	movs	r3, #0
 80073b2:	ac08      	add	r4, sp, #32
 80073b4:	6163      	str	r3, [r4, #20]
 80073b6:	3320      	adds	r3, #32
 80073b8:	7663      	strb	r3, [r4, #25]
 80073ba:	3310      	adds	r3, #16
 80073bc:	76a3      	strb	r3, [r4, #26]
 80073be:	9607      	str	r6, [sp, #28]
 80073c0:	002e      	movs	r6, r5
 80073c2:	7833      	ldrb	r3, [r6, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <_vfiprintf_r+0x7c>
 80073c8:	2b25      	cmp	r3, #37	@ 0x25
 80073ca:	d148      	bne.n	800745e <_vfiprintf_r+0x10e>
 80073cc:	1b73      	subs	r3, r6, r5
 80073ce:	9305      	str	r3, [sp, #20]
 80073d0:	42ae      	cmp	r6, r5
 80073d2:	d00b      	beq.n	80073ec <_vfiprintf_r+0x9c>
 80073d4:	002a      	movs	r2, r5
 80073d6:	0039      	movs	r1, r7
 80073d8:	9803      	ldr	r0, [sp, #12]
 80073da:	f7ff ffa7 	bl	800732c <__sfputs_r>
 80073de:	3001      	adds	r0, #1
 80073e0:	d100      	bne.n	80073e4 <_vfiprintf_r+0x94>
 80073e2:	e0ae      	b.n	8007542 <_vfiprintf_r+0x1f2>
 80073e4:	6963      	ldr	r3, [r4, #20]
 80073e6:	9a05      	ldr	r2, [sp, #20]
 80073e8:	189b      	adds	r3, r3, r2
 80073ea:	6163      	str	r3, [r4, #20]
 80073ec:	7833      	ldrb	r3, [r6, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d100      	bne.n	80073f4 <_vfiprintf_r+0xa4>
 80073f2:	e0a6      	b.n	8007542 <_vfiprintf_r+0x1f2>
 80073f4:	2201      	movs	r2, #1
 80073f6:	2300      	movs	r3, #0
 80073f8:	4252      	negs	r2, r2
 80073fa:	6062      	str	r2, [r4, #4]
 80073fc:	a904      	add	r1, sp, #16
 80073fe:	3254      	adds	r2, #84	@ 0x54
 8007400:	1852      	adds	r2, r2, r1
 8007402:	1c75      	adds	r5, r6, #1
 8007404:	6023      	str	r3, [r4, #0]
 8007406:	60e3      	str	r3, [r4, #12]
 8007408:	60a3      	str	r3, [r4, #8]
 800740a:	7013      	strb	r3, [r2, #0]
 800740c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800740e:	4b59      	ldr	r3, [pc, #356]	@ (8007574 <_vfiprintf_r+0x224>)
 8007410:	2205      	movs	r2, #5
 8007412:	0018      	movs	r0, r3
 8007414:	7829      	ldrb	r1, [r5, #0]
 8007416:	9305      	str	r3, [sp, #20]
 8007418:	f7ff ff32 	bl	8007280 <memchr>
 800741c:	1c6e      	adds	r6, r5, #1
 800741e:	2800      	cmp	r0, #0
 8007420:	d11f      	bne.n	8007462 <_vfiprintf_r+0x112>
 8007422:	6822      	ldr	r2, [r4, #0]
 8007424:	06d3      	lsls	r3, r2, #27
 8007426:	d504      	bpl.n	8007432 <_vfiprintf_r+0xe2>
 8007428:	2353      	movs	r3, #83	@ 0x53
 800742a:	a904      	add	r1, sp, #16
 800742c:	185b      	adds	r3, r3, r1
 800742e:	2120      	movs	r1, #32
 8007430:	7019      	strb	r1, [r3, #0]
 8007432:	0713      	lsls	r3, r2, #28
 8007434:	d504      	bpl.n	8007440 <_vfiprintf_r+0xf0>
 8007436:	2353      	movs	r3, #83	@ 0x53
 8007438:	a904      	add	r1, sp, #16
 800743a:	185b      	adds	r3, r3, r1
 800743c:	212b      	movs	r1, #43	@ 0x2b
 800743e:	7019      	strb	r1, [r3, #0]
 8007440:	782b      	ldrb	r3, [r5, #0]
 8007442:	2b2a      	cmp	r3, #42	@ 0x2a
 8007444:	d016      	beq.n	8007474 <_vfiprintf_r+0x124>
 8007446:	002e      	movs	r6, r5
 8007448:	2100      	movs	r1, #0
 800744a:	200a      	movs	r0, #10
 800744c:	68e3      	ldr	r3, [r4, #12]
 800744e:	7832      	ldrb	r2, [r6, #0]
 8007450:	1c75      	adds	r5, r6, #1
 8007452:	3a30      	subs	r2, #48	@ 0x30
 8007454:	2a09      	cmp	r2, #9
 8007456:	d950      	bls.n	80074fa <_vfiprintf_r+0x1aa>
 8007458:	2900      	cmp	r1, #0
 800745a:	d111      	bne.n	8007480 <_vfiprintf_r+0x130>
 800745c:	e017      	b.n	800748e <_vfiprintf_r+0x13e>
 800745e:	3601      	adds	r6, #1
 8007460:	e7af      	b.n	80073c2 <_vfiprintf_r+0x72>
 8007462:	9b05      	ldr	r3, [sp, #20]
 8007464:	6822      	ldr	r2, [r4, #0]
 8007466:	1ac0      	subs	r0, r0, r3
 8007468:	2301      	movs	r3, #1
 800746a:	4083      	lsls	r3, r0
 800746c:	4313      	orrs	r3, r2
 800746e:	0035      	movs	r5, r6
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	e7cc      	b.n	800740e <_vfiprintf_r+0xbe>
 8007474:	9b07      	ldr	r3, [sp, #28]
 8007476:	1d19      	adds	r1, r3, #4
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	9107      	str	r1, [sp, #28]
 800747c:	2b00      	cmp	r3, #0
 800747e:	db01      	blt.n	8007484 <_vfiprintf_r+0x134>
 8007480:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007482:	e004      	b.n	800748e <_vfiprintf_r+0x13e>
 8007484:	425b      	negs	r3, r3
 8007486:	60e3      	str	r3, [r4, #12]
 8007488:	2302      	movs	r3, #2
 800748a:	4313      	orrs	r3, r2
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	7833      	ldrb	r3, [r6, #0]
 8007490:	2b2e      	cmp	r3, #46	@ 0x2e
 8007492:	d10c      	bne.n	80074ae <_vfiprintf_r+0x15e>
 8007494:	7873      	ldrb	r3, [r6, #1]
 8007496:	2b2a      	cmp	r3, #42	@ 0x2a
 8007498:	d134      	bne.n	8007504 <_vfiprintf_r+0x1b4>
 800749a:	9b07      	ldr	r3, [sp, #28]
 800749c:	3602      	adds	r6, #2
 800749e:	1d1a      	adds	r2, r3, #4
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	9207      	str	r2, [sp, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da01      	bge.n	80074ac <_vfiprintf_r+0x15c>
 80074a8:	2301      	movs	r3, #1
 80074aa:	425b      	negs	r3, r3
 80074ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ae:	4d32      	ldr	r5, [pc, #200]	@ (8007578 <_vfiprintf_r+0x228>)
 80074b0:	2203      	movs	r2, #3
 80074b2:	0028      	movs	r0, r5
 80074b4:	7831      	ldrb	r1, [r6, #0]
 80074b6:	f7ff fee3 	bl	8007280 <memchr>
 80074ba:	2800      	cmp	r0, #0
 80074bc:	d006      	beq.n	80074cc <_vfiprintf_r+0x17c>
 80074be:	2340      	movs	r3, #64	@ 0x40
 80074c0:	1b40      	subs	r0, r0, r5
 80074c2:	4083      	lsls	r3, r0
 80074c4:	6822      	ldr	r2, [r4, #0]
 80074c6:	3601      	adds	r6, #1
 80074c8:	4313      	orrs	r3, r2
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	7831      	ldrb	r1, [r6, #0]
 80074ce:	2206      	movs	r2, #6
 80074d0:	482a      	ldr	r0, [pc, #168]	@ (800757c <_vfiprintf_r+0x22c>)
 80074d2:	1c75      	adds	r5, r6, #1
 80074d4:	7621      	strb	r1, [r4, #24]
 80074d6:	f7ff fed3 	bl	8007280 <memchr>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d040      	beq.n	8007560 <_vfiprintf_r+0x210>
 80074de:	4b28      	ldr	r3, [pc, #160]	@ (8007580 <_vfiprintf_r+0x230>)
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d122      	bne.n	800752a <_vfiprintf_r+0x1da>
 80074e4:	2207      	movs	r2, #7
 80074e6:	9b07      	ldr	r3, [sp, #28]
 80074e8:	3307      	adds	r3, #7
 80074ea:	4393      	bics	r3, r2
 80074ec:	3308      	adds	r3, #8
 80074ee:	9307      	str	r3, [sp, #28]
 80074f0:	6963      	ldr	r3, [r4, #20]
 80074f2:	9a04      	ldr	r2, [sp, #16]
 80074f4:	189b      	adds	r3, r3, r2
 80074f6:	6163      	str	r3, [r4, #20]
 80074f8:	e762      	b.n	80073c0 <_vfiprintf_r+0x70>
 80074fa:	4343      	muls	r3, r0
 80074fc:	002e      	movs	r6, r5
 80074fe:	2101      	movs	r1, #1
 8007500:	189b      	adds	r3, r3, r2
 8007502:	e7a4      	b.n	800744e <_vfiprintf_r+0xfe>
 8007504:	2300      	movs	r3, #0
 8007506:	200a      	movs	r0, #10
 8007508:	0019      	movs	r1, r3
 800750a:	3601      	adds	r6, #1
 800750c:	6063      	str	r3, [r4, #4]
 800750e:	7832      	ldrb	r2, [r6, #0]
 8007510:	1c75      	adds	r5, r6, #1
 8007512:	3a30      	subs	r2, #48	@ 0x30
 8007514:	2a09      	cmp	r2, #9
 8007516:	d903      	bls.n	8007520 <_vfiprintf_r+0x1d0>
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0c8      	beq.n	80074ae <_vfiprintf_r+0x15e>
 800751c:	9109      	str	r1, [sp, #36]	@ 0x24
 800751e:	e7c6      	b.n	80074ae <_vfiprintf_r+0x15e>
 8007520:	4341      	muls	r1, r0
 8007522:	002e      	movs	r6, r5
 8007524:	2301      	movs	r3, #1
 8007526:	1889      	adds	r1, r1, r2
 8007528:	e7f1      	b.n	800750e <_vfiprintf_r+0x1be>
 800752a:	aa07      	add	r2, sp, #28
 800752c:	9200      	str	r2, [sp, #0]
 800752e:	0021      	movs	r1, r4
 8007530:	003a      	movs	r2, r7
 8007532:	4b14      	ldr	r3, [pc, #80]	@ (8007584 <_vfiprintf_r+0x234>)
 8007534:	9803      	ldr	r0, [sp, #12]
 8007536:	e000      	b.n	800753a <_vfiprintf_r+0x1ea>
 8007538:	bf00      	nop
 800753a:	9004      	str	r0, [sp, #16]
 800753c:	9b04      	ldr	r3, [sp, #16]
 800753e:	3301      	adds	r3, #1
 8007540:	d1d6      	bne.n	80074f0 <_vfiprintf_r+0x1a0>
 8007542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007544:	07db      	lsls	r3, r3, #31
 8007546:	d405      	bmi.n	8007554 <_vfiprintf_r+0x204>
 8007548:	89bb      	ldrh	r3, [r7, #12]
 800754a:	059b      	lsls	r3, r3, #22
 800754c:	d402      	bmi.n	8007554 <_vfiprintf_r+0x204>
 800754e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007550:	f7ff f99c 	bl	800688c <__retarget_lock_release_recursive>
 8007554:	89bb      	ldrh	r3, [r7, #12]
 8007556:	065b      	lsls	r3, r3, #25
 8007558:	d500      	bpl.n	800755c <_vfiprintf_r+0x20c>
 800755a:	e71e      	b.n	800739a <_vfiprintf_r+0x4a>
 800755c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800755e:	e71e      	b.n	800739e <_vfiprintf_r+0x4e>
 8007560:	aa07      	add	r2, sp, #28
 8007562:	9200      	str	r2, [sp, #0]
 8007564:	0021      	movs	r1, r4
 8007566:	003a      	movs	r2, r7
 8007568:	4b06      	ldr	r3, [pc, #24]	@ (8007584 <_vfiprintf_r+0x234>)
 800756a:	9803      	ldr	r0, [sp, #12]
 800756c:	f7ff fc92 	bl	8006e94 <_printf_i>
 8007570:	e7e3      	b.n	800753a <_vfiprintf_r+0x1ea>
 8007572:	46c0      	nop			@ (mov r8, r8)
 8007574:	08007c62 	.word	0x08007c62
 8007578:	08007c68 	.word	0x08007c68
 800757c:	08007c6c 	.word	0x08007c6c
 8007580:	00000000 	.word	0x00000000
 8007584:	0800732d 	.word	0x0800732d

08007588 <__swbuf_r>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	0006      	movs	r6, r0
 800758c:	000d      	movs	r5, r1
 800758e:	0014      	movs	r4, r2
 8007590:	2800      	cmp	r0, #0
 8007592:	d004      	beq.n	800759e <__swbuf_r+0x16>
 8007594:	6a03      	ldr	r3, [r0, #32]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <__swbuf_r+0x16>
 800759a:	f7fe fff5 	bl	8006588 <__sinit>
 800759e:	69a3      	ldr	r3, [r4, #24]
 80075a0:	60a3      	str	r3, [r4, #8]
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	071b      	lsls	r3, r3, #28
 80075a6:	d502      	bpl.n	80075ae <__swbuf_r+0x26>
 80075a8:	6923      	ldr	r3, [r4, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d109      	bne.n	80075c2 <__swbuf_r+0x3a>
 80075ae:	0021      	movs	r1, r4
 80075b0:	0030      	movs	r0, r6
 80075b2:	f000 f82b 	bl	800760c <__swsetup_r>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d003      	beq.n	80075c2 <__swbuf_r+0x3a>
 80075ba:	2501      	movs	r5, #1
 80075bc:	426d      	negs	r5, r5
 80075be:	0028      	movs	r0, r5
 80075c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c2:	6923      	ldr	r3, [r4, #16]
 80075c4:	6820      	ldr	r0, [r4, #0]
 80075c6:	b2ef      	uxtb	r7, r5
 80075c8:	1ac0      	subs	r0, r0, r3
 80075ca:	6963      	ldr	r3, [r4, #20]
 80075cc:	b2ed      	uxtb	r5, r5
 80075ce:	4283      	cmp	r3, r0
 80075d0:	dc05      	bgt.n	80075de <__swbuf_r+0x56>
 80075d2:	0021      	movs	r1, r4
 80075d4:	0030      	movs	r0, r6
 80075d6:	f7ff fdf1 	bl	80071bc <_fflush_r>
 80075da:	2800      	cmp	r0, #0
 80075dc:	d1ed      	bne.n	80075ba <__swbuf_r+0x32>
 80075de:	68a3      	ldr	r3, [r4, #8]
 80075e0:	3001      	adds	r0, #1
 80075e2:	3b01      	subs	r3, #1
 80075e4:	60a3      	str	r3, [r4, #8]
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	6022      	str	r2, [r4, #0]
 80075ec:	701f      	strb	r7, [r3, #0]
 80075ee:	6963      	ldr	r3, [r4, #20]
 80075f0:	4283      	cmp	r3, r0
 80075f2:	d004      	beq.n	80075fe <__swbuf_r+0x76>
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	07db      	lsls	r3, r3, #31
 80075f8:	d5e1      	bpl.n	80075be <__swbuf_r+0x36>
 80075fa:	2d0a      	cmp	r5, #10
 80075fc:	d1df      	bne.n	80075be <__swbuf_r+0x36>
 80075fe:	0021      	movs	r1, r4
 8007600:	0030      	movs	r0, r6
 8007602:	f7ff fddb 	bl	80071bc <_fflush_r>
 8007606:	2800      	cmp	r0, #0
 8007608:	d0d9      	beq.n	80075be <__swbuf_r+0x36>
 800760a:	e7d6      	b.n	80075ba <__swbuf_r+0x32>

0800760c <__swsetup_r>:
 800760c:	4b2d      	ldr	r3, [pc, #180]	@ (80076c4 <__swsetup_r+0xb8>)
 800760e:	b570      	push	{r4, r5, r6, lr}
 8007610:	0005      	movs	r5, r0
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	000c      	movs	r4, r1
 8007616:	2800      	cmp	r0, #0
 8007618:	d004      	beq.n	8007624 <__swsetup_r+0x18>
 800761a:	6a03      	ldr	r3, [r0, #32]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <__swsetup_r+0x18>
 8007620:	f7fe ffb2 	bl	8006588 <__sinit>
 8007624:	230c      	movs	r3, #12
 8007626:	5ee2      	ldrsh	r2, [r4, r3]
 8007628:	0713      	lsls	r3, r2, #28
 800762a:	d423      	bmi.n	8007674 <__swsetup_r+0x68>
 800762c:	06d3      	lsls	r3, r2, #27
 800762e:	d407      	bmi.n	8007640 <__swsetup_r+0x34>
 8007630:	2309      	movs	r3, #9
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	2340      	movs	r3, #64	@ 0x40
 8007636:	2001      	movs	r0, #1
 8007638:	4313      	orrs	r3, r2
 800763a:	81a3      	strh	r3, [r4, #12]
 800763c:	4240      	negs	r0, r0
 800763e:	e03a      	b.n	80076b6 <__swsetup_r+0xaa>
 8007640:	0752      	lsls	r2, r2, #29
 8007642:	d513      	bpl.n	800766c <__swsetup_r+0x60>
 8007644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007646:	2900      	cmp	r1, #0
 8007648:	d008      	beq.n	800765c <__swsetup_r+0x50>
 800764a:	0023      	movs	r3, r4
 800764c:	3344      	adds	r3, #68	@ 0x44
 800764e:	4299      	cmp	r1, r3
 8007650:	d002      	beq.n	8007658 <__swsetup_r+0x4c>
 8007652:	0028      	movs	r0, r5
 8007654:	f7ff f94a 	bl	80068ec <_free_r>
 8007658:	2300      	movs	r3, #0
 800765a:	6363      	str	r3, [r4, #52]	@ 0x34
 800765c:	2224      	movs	r2, #36	@ 0x24
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	4393      	bics	r3, r2
 8007662:	81a3      	strh	r3, [r4, #12]
 8007664:	2300      	movs	r3, #0
 8007666:	6063      	str	r3, [r4, #4]
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	2308      	movs	r3, #8
 800766e:	89a2      	ldrh	r2, [r4, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	81a3      	strh	r3, [r4, #12]
 8007674:	6923      	ldr	r3, [r4, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <__swsetup_r+0x86>
 800767a:	21a0      	movs	r1, #160	@ 0xa0
 800767c:	2280      	movs	r2, #128	@ 0x80
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	0089      	lsls	r1, r1, #2
 8007682:	0092      	lsls	r2, r2, #2
 8007684:	400b      	ands	r3, r1
 8007686:	4293      	cmp	r3, r2
 8007688:	d003      	beq.n	8007692 <__swsetup_r+0x86>
 800768a:	0021      	movs	r1, r4
 800768c:	0028      	movs	r0, r5
 800768e:	f000 f897 	bl	80077c0 <__smakebuf_r>
 8007692:	230c      	movs	r3, #12
 8007694:	5ee2      	ldrsh	r2, [r4, r3]
 8007696:	2101      	movs	r1, #1
 8007698:	0013      	movs	r3, r2
 800769a:	400b      	ands	r3, r1
 800769c:	420a      	tst	r2, r1
 800769e:	d00b      	beq.n	80076b8 <__swsetup_r+0xac>
 80076a0:	2300      	movs	r3, #0
 80076a2:	60a3      	str	r3, [r4, #8]
 80076a4:	6963      	ldr	r3, [r4, #20]
 80076a6:	425b      	negs	r3, r3
 80076a8:	61a3      	str	r3, [r4, #24]
 80076aa:	2000      	movs	r0, #0
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	4283      	cmp	r3, r0
 80076b0:	d101      	bne.n	80076b6 <__swsetup_r+0xaa>
 80076b2:	0613      	lsls	r3, r2, #24
 80076b4:	d4be      	bmi.n	8007634 <__swsetup_r+0x28>
 80076b6:	bd70      	pop	{r4, r5, r6, pc}
 80076b8:	0791      	lsls	r1, r2, #30
 80076ba:	d400      	bmi.n	80076be <__swsetup_r+0xb2>
 80076bc:	6963      	ldr	r3, [r4, #20]
 80076be:	60a3      	str	r3, [r4, #8]
 80076c0:	e7f3      	b.n	80076aa <__swsetup_r+0x9e>
 80076c2:	46c0      	nop			@ (mov r8, r8)
 80076c4:	2000019c 	.word	0x2000019c

080076c8 <_raise_r>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	0004      	movs	r4, r0
 80076cc:	000d      	movs	r5, r1
 80076ce:	291f      	cmp	r1, #31
 80076d0:	d904      	bls.n	80076dc <_raise_r+0x14>
 80076d2:	2316      	movs	r3, #22
 80076d4:	6003      	str	r3, [r0, #0]
 80076d6:	2001      	movs	r0, #1
 80076d8:	4240      	negs	r0, r0
 80076da:	bd70      	pop	{r4, r5, r6, pc}
 80076dc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d004      	beq.n	80076ec <_raise_r+0x24>
 80076e2:	008a      	lsls	r2, r1, #2
 80076e4:	189b      	adds	r3, r3, r2
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	d108      	bne.n	80076fe <_raise_r+0x36>
 80076ec:	0020      	movs	r0, r4
 80076ee:	f000 f831 	bl	8007754 <_getpid_r>
 80076f2:	002a      	movs	r2, r5
 80076f4:	0001      	movs	r1, r0
 80076f6:	0020      	movs	r0, r4
 80076f8:	f000 f81a 	bl	8007730 <_kill_r>
 80076fc:	e7ed      	b.n	80076da <_raise_r+0x12>
 80076fe:	2a01      	cmp	r2, #1
 8007700:	d009      	beq.n	8007716 <_raise_r+0x4e>
 8007702:	1c51      	adds	r1, r2, #1
 8007704:	d103      	bne.n	800770e <_raise_r+0x46>
 8007706:	2316      	movs	r3, #22
 8007708:	6003      	str	r3, [r0, #0]
 800770a:	2001      	movs	r0, #1
 800770c:	e7e5      	b.n	80076da <_raise_r+0x12>
 800770e:	2100      	movs	r1, #0
 8007710:	0028      	movs	r0, r5
 8007712:	6019      	str	r1, [r3, #0]
 8007714:	4790      	blx	r2
 8007716:	2000      	movs	r0, #0
 8007718:	e7df      	b.n	80076da <_raise_r+0x12>
	...

0800771c <raise>:
 800771c:	b510      	push	{r4, lr}
 800771e:	4b03      	ldr	r3, [pc, #12]	@ (800772c <raise+0x10>)
 8007720:	0001      	movs	r1, r0
 8007722:	6818      	ldr	r0, [r3, #0]
 8007724:	f7ff ffd0 	bl	80076c8 <_raise_r>
 8007728:	bd10      	pop	{r4, pc}
 800772a:	46c0      	nop			@ (mov r8, r8)
 800772c:	2000019c 	.word	0x2000019c

08007730 <_kill_r>:
 8007730:	2300      	movs	r3, #0
 8007732:	b570      	push	{r4, r5, r6, lr}
 8007734:	4d06      	ldr	r5, [pc, #24]	@ (8007750 <_kill_r+0x20>)
 8007736:	0004      	movs	r4, r0
 8007738:	0008      	movs	r0, r1
 800773a:	0011      	movs	r1, r2
 800773c:	602b      	str	r3, [r5, #0]
 800773e:	f7fa fc29 	bl	8001f94 <_kill>
 8007742:	1c43      	adds	r3, r0, #1
 8007744:	d103      	bne.n	800774e <_kill_r+0x1e>
 8007746:	682b      	ldr	r3, [r5, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d000      	beq.n	800774e <_kill_r+0x1e>
 800774c:	6023      	str	r3, [r4, #0]
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	20001b38 	.word	0x20001b38

08007754 <_getpid_r>:
 8007754:	b510      	push	{r4, lr}
 8007756:	f7fa fc1b 	bl	8001f90 <_getpid>
 800775a:	bd10      	pop	{r4, pc}

0800775c <_malloc_usable_size_r>:
 800775c:	1f0b      	subs	r3, r1, #4
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	1f18      	subs	r0, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	da01      	bge.n	800776a <_malloc_usable_size_r+0xe>
 8007766:	580b      	ldr	r3, [r1, r0]
 8007768:	18c0      	adds	r0, r0, r3
 800776a:	4770      	bx	lr

0800776c <__swhatbuf_r>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	000e      	movs	r6, r1
 8007770:	001d      	movs	r5, r3
 8007772:	230e      	movs	r3, #14
 8007774:	5ec9      	ldrsh	r1, [r1, r3]
 8007776:	0014      	movs	r4, r2
 8007778:	b096      	sub	sp, #88	@ 0x58
 800777a:	2900      	cmp	r1, #0
 800777c:	da0c      	bge.n	8007798 <__swhatbuf_r+0x2c>
 800777e:	89b2      	ldrh	r2, [r6, #12]
 8007780:	2380      	movs	r3, #128	@ 0x80
 8007782:	0011      	movs	r1, r2
 8007784:	4019      	ands	r1, r3
 8007786:	421a      	tst	r2, r3
 8007788:	d114      	bne.n	80077b4 <__swhatbuf_r+0x48>
 800778a:	2380      	movs	r3, #128	@ 0x80
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	2000      	movs	r0, #0
 8007790:	6029      	str	r1, [r5, #0]
 8007792:	6023      	str	r3, [r4, #0]
 8007794:	b016      	add	sp, #88	@ 0x58
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	466a      	mov	r2, sp
 800779a:	f000 f853 	bl	8007844 <_fstat_r>
 800779e:	2800      	cmp	r0, #0
 80077a0:	dbed      	blt.n	800777e <__swhatbuf_r+0x12>
 80077a2:	23f0      	movs	r3, #240	@ 0xf0
 80077a4:	9901      	ldr	r1, [sp, #4]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	4019      	ands	r1, r3
 80077aa:	4b04      	ldr	r3, [pc, #16]	@ (80077bc <__swhatbuf_r+0x50>)
 80077ac:	18c9      	adds	r1, r1, r3
 80077ae:	424b      	negs	r3, r1
 80077b0:	4159      	adcs	r1, r3
 80077b2:	e7ea      	b.n	800778a <__swhatbuf_r+0x1e>
 80077b4:	2100      	movs	r1, #0
 80077b6:	2340      	movs	r3, #64	@ 0x40
 80077b8:	e7e9      	b.n	800778e <__swhatbuf_r+0x22>
 80077ba:	46c0      	nop			@ (mov r8, r8)
 80077bc:	ffffe000 	.word	0xffffe000

080077c0 <__smakebuf_r>:
 80077c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077c2:	2602      	movs	r6, #2
 80077c4:	898b      	ldrh	r3, [r1, #12]
 80077c6:	0005      	movs	r5, r0
 80077c8:	000c      	movs	r4, r1
 80077ca:	b085      	sub	sp, #20
 80077cc:	4233      	tst	r3, r6
 80077ce:	d007      	beq.n	80077e0 <__smakebuf_r+0x20>
 80077d0:	0023      	movs	r3, r4
 80077d2:	3347      	adds	r3, #71	@ 0x47
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	6123      	str	r3, [r4, #16]
 80077d8:	2301      	movs	r3, #1
 80077da:	6163      	str	r3, [r4, #20]
 80077dc:	b005      	add	sp, #20
 80077de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077e0:	ab03      	add	r3, sp, #12
 80077e2:	aa02      	add	r2, sp, #8
 80077e4:	f7ff ffc2 	bl	800776c <__swhatbuf_r>
 80077e8:	9f02      	ldr	r7, [sp, #8]
 80077ea:	9001      	str	r0, [sp, #4]
 80077ec:	0039      	movs	r1, r7
 80077ee:	0028      	movs	r0, r5
 80077f0:	f7ff f8f2 	bl	80069d8 <_malloc_r>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d108      	bne.n	800780a <__smakebuf_r+0x4a>
 80077f8:	220c      	movs	r2, #12
 80077fa:	5ea3      	ldrsh	r3, [r4, r2]
 80077fc:	059a      	lsls	r2, r3, #22
 80077fe:	d4ed      	bmi.n	80077dc <__smakebuf_r+0x1c>
 8007800:	2203      	movs	r2, #3
 8007802:	4393      	bics	r3, r2
 8007804:	431e      	orrs	r6, r3
 8007806:	81a6      	strh	r6, [r4, #12]
 8007808:	e7e2      	b.n	80077d0 <__smakebuf_r+0x10>
 800780a:	2380      	movs	r3, #128	@ 0x80
 800780c:	89a2      	ldrh	r2, [r4, #12]
 800780e:	6020      	str	r0, [r4, #0]
 8007810:	4313      	orrs	r3, r2
 8007812:	81a3      	strh	r3, [r4, #12]
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	6120      	str	r0, [r4, #16]
 8007818:	6167      	str	r7, [r4, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00c      	beq.n	8007838 <__smakebuf_r+0x78>
 800781e:	0028      	movs	r0, r5
 8007820:	230e      	movs	r3, #14
 8007822:	5ee1      	ldrsh	r1, [r4, r3]
 8007824:	f000 f820 	bl	8007868 <_isatty_r>
 8007828:	2800      	cmp	r0, #0
 800782a:	d005      	beq.n	8007838 <__smakebuf_r+0x78>
 800782c:	2303      	movs	r3, #3
 800782e:	89a2      	ldrh	r2, [r4, #12]
 8007830:	439a      	bics	r2, r3
 8007832:	3b02      	subs	r3, #2
 8007834:	4313      	orrs	r3, r2
 8007836:	81a3      	strh	r3, [r4, #12]
 8007838:	89a3      	ldrh	r3, [r4, #12]
 800783a:	9a01      	ldr	r2, [sp, #4]
 800783c:	4313      	orrs	r3, r2
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	e7cc      	b.n	80077dc <__smakebuf_r+0x1c>
	...

08007844 <_fstat_r>:
 8007844:	2300      	movs	r3, #0
 8007846:	b570      	push	{r4, r5, r6, lr}
 8007848:	4d06      	ldr	r5, [pc, #24]	@ (8007864 <_fstat_r+0x20>)
 800784a:	0004      	movs	r4, r0
 800784c:	0008      	movs	r0, r1
 800784e:	0011      	movs	r1, r2
 8007850:	602b      	str	r3, [r5, #0]
 8007852:	f7fa fbca 	bl	8001fea <_fstat>
 8007856:	1c43      	adds	r3, r0, #1
 8007858:	d103      	bne.n	8007862 <_fstat_r+0x1e>
 800785a:	682b      	ldr	r3, [r5, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d000      	beq.n	8007862 <_fstat_r+0x1e>
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	bd70      	pop	{r4, r5, r6, pc}
 8007864:	20001b38 	.word	0x20001b38

08007868 <_isatty_r>:
 8007868:	2300      	movs	r3, #0
 800786a:	b570      	push	{r4, r5, r6, lr}
 800786c:	4d06      	ldr	r5, [pc, #24]	@ (8007888 <_isatty_r+0x20>)
 800786e:	0004      	movs	r4, r0
 8007870:	0008      	movs	r0, r1
 8007872:	602b      	str	r3, [r5, #0]
 8007874:	f7fa fbbe 	bl	8001ff4 <_isatty>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d103      	bne.n	8007884 <_isatty_r+0x1c>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d000      	beq.n	8007884 <_isatty_r+0x1c>
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	bd70      	pop	{r4, r5, r6, pc}
 8007886:	46c0      	nop			@ (mov r8, r8)
 8007888:	20001b38 	.word	0x20001b38

0800788c <_init>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	46c0      	nop			@ (mov r8, r8)
 8007890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007892:	bc08      	pop	{r3}
 8007894:	469e      	mov	lr, r3
 8007896:	4770      	bx	lr

08007898 <_fini>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	46c0      	nop			@ (mov r8, r8)
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr
