
FAC firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000791c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080079dc  080079dc  000089dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dd0  08007dd0  000091ec  2**0
                  CONTENTS
  4 .ARM          00000000  08007dd0  08007dd0  000091ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007dd0  08007dd0  000091ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dd0  08007dd0  00008dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007dd4  08007dd4  00008dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08007dd8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000195c  200001ec  08007fc4  000091ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b48  08007fc4  00009b48  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000091ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002147e  00000000  00000000  00009214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000585d  00000000  00000000  0002a692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d37e  00000000  00000000  0002feef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0003d270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001722  00000000  00000000  0003e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc9b  00000000  00000000  0003fee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005f16  00000000  00000000  0005bb7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  00061a93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004478  00000000  00000000  00061b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00065f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080079c4 	.word	0x080079c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	080079c4 	.word	0x080079c4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	@ 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	@ 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	@ 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <setSoftPWM>:
		r = 1;
	}
	return r;	// 1 = ok, 0 = no compatible port found
}

void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (i < duty) { //set pin
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
			softpwmbuffer[i] |= (uint32_t) pin;
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8000456:	0405      	lsls	r5, r0, #16
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8000458:	43ee      	mvns	r6, r5
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
 800045a:	2400      	movs	r4, #0
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 800045c:	43c7      	mvns	r7, r0
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 800045e:	6813      	ldr	r3, [r2, #0]
		if (i < duty) { //set pin
 8000460:	42a1      	cmp	r1, r4
 8000462:	d906      	bls.n	8000472 <setSoftPWM+0x1e>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8000464:	4033      	ands	r3, r6
			softpwmbuffer[i] |= (uint32_t) pin;
 8000466:	4303      	orrs	r3, r0
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
 8000468:	3401      	adds	r4, #1
			softpwmbuffer[i] |= (uint32_t) pin;
 800046a:	c208      	stmia	r2!, {r3}
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
 800046c:	2c64      	cmp	r4, #100	@ 0x64
 800046e:	d1f6      	bne.n	800045e <setSoftPWM+0xa>
		}
	}
}
 8000470:	bdf0      	pop	{r4, r5, r6, r7, pc}
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8000472:	403b      	ands	r3, r7
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8000474:	432b      	orrs	r3, r5
 8000476:	e7f7      	b.n	8000468 <setSoftPWM+0x14>

08000478 <setDMApwmDuty>:
uint8_t setDMApwmDuty(GPIO_TypeDef *port, uint16_t pin, uint16_t duty) {
 8000478:	0003      	movs	r3, r0
 800047a:	0008      	movs	r0, r1
 800047c:	0011      	movs	r1, r2
	if (port == GPIOA) {
 800047e:	2290      	movs	r2, #144	@ 0x90
uint8_t setDMApwmDuty(GPIO_TypeDef *port, uint16_t pin, uint16_t duty) {
 8000480:	b510      	push	{r4, lr}
	if (port == GPIOA) {
 8000482:	05d2      	lsls	r2, r2, #23
 8000484:	4293      	cmp	r3, r2
 8000486:	d105      	bne.n	8000494 <setDMApwmDuty+0x1c>
		setSoftPWM(pin, duty, (uint32_t*) &dataA);
 8000488:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <setDMApwmDuty+0x28>)
		setSoftPWM(pin, duty, (uint32_t*) &dataB);
 800048a:	f7ff ffe3 	bl	8000454 <setSoftPWM>
		r = 1;
 800048e:	2201      	movs	r2, #1
}
 8000490:	0010      	movs	r0, r2
 8000492:	bd10      	pop	{r4, pc}
	if (port == GPIOB) {
 8000494:	4c03      	ldr	r4, [pc, #12]	@ (80004a4 <setDMApwmDuty+0x2c>)
	uint8_t r = 0;
 8000496:	2200      	movs	r2, #0
	if (port == GPIOB) {
 8000498:	42a3      	cmp	r3, r4
 800049a:	d1f9      	bne.n	8000490 <setDMApwmDuty+0x18>
		setSoftPWM(pin, duty, (uint32_t*) &dataB);
 800049c:	4a02      	ldr	r2, [pc, #8]	@ (80004a8 <setDMApwmDuty+0x30>)
 800049e:	e7f4      	b.n	800048a <setDMApwmDuty+0x12>
 80004a0:	20000398 	.word	0x20000398
 80004a4:	48000400 	.word	0x48000400
 80004a8:	20000208 	.word	0x20000208

080004ac <zeroSoftPWM>:

void zeroSoftPWM(uint32_t softpwmbuffer[]) {
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
		softpwmbuffer[i] = 0;
 80004ac:	22c8      	movs	r2, #200	@ 0xc8
void zeroSoftPWM(uint32_t softpwmbuffer[]) {
 80004ae:	b510      	push	{r4, lr}
		softpwmbuffer[i] = 0;
 80004b0:	2100      	movs	r1, #0
 80004b2:	0052      	lsls	r2, r2, #1
 80004b4:	f006 f9a4 	bl	8006800 <memset>
	}
}
 80004b8:	bd10      	pop	{r4, pc}
	...

080004bc <initDMApwm>:
void initDMApwm() {
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	htim1.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80004be:	23e0      	movs	r3, #224	@ 0xe0
	htim3.Init.Period = TIMER_FREQ - 1;
 80004c0:	4f17      	ldr	r7, [pc, #92]	@ (8000520 <initDMApwm+0x64>)
	htim1.Init.Period = TIMER_FREQ - 1;
 80004c2:	4c18      	ldr	r4, [pc, #96]	@ (8000524 <initDMApwm+0x68>)
 80004c4:	4a18      	ldr	r2, [pc, #96]	@ (8000528 <initDMApwm+0x6c>)
	htim1.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80004c6:	6821      	ldr	r1, [r4, #0]
	htim3.Init.Period = TIMER_FREQ - 1;
 80004c8:	60fa      	str	r2, [r7, #12]
	htim1.Init.Period = TIMER_FREQ - 1;
 80004ca:	60e2      	str	r2, [r4, #12]
	htim3.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80004cc:	683a      	ldr	r2, [r7, #0]
	htim1.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80004ce:	33ff      	adds	r3, #255	@ 0xff
 80004d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
	HAL_TIM_Base_Start(&htim1);
 80004d2:	0020      	movs	r0, r4
	htim3.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80004d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	HAL_TIM_Base_Start(&htim1);
 80004d6:	f004 f8b9 	bl	800464c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 80004da:	0038      	movs	r0, r7
 80004dc:	f004 f8b6 	bl	800464c <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_ch3_up, (uint32_t) &(dataA[0]), (uint32_t) &(GPIOA->BSRR), sizeof(dataA) / sizeof(dataA[0]));
 80004e0:	4e12      	ldr	r6, [pc, #72]	@ (800052c <initDMApwm+0x70>)
 80004e2:	2364      	movs	r3, #100	@ 0x64
 80004e4:	0031      	movs	r1, r6
 80004e6:	4a12      	ldr	r2, [pc, #72]	@ (8000530 <initDMApwm+0x74>)
 80004e8:	4812      	ldr	r0, [pc, #72]	@ (8000534 <initDMApwm+0x78>)
 80004ea:	f002 f963 	bl	80027b4 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim3_ch4_up, (uint32_t) &(dataB[0]), (uint32_t) &(GPIOB->BSRR), sizeof(dataB) / sizeof(dataB[0]));
 80004ee:	4d12      	ldr	r5, [pc, #72]	@ (8000538 <initDMApwm+0x7c>)
 80004f0:	2364      	movs	r3, #100	@ 0x64
 80004f2:	0029      	movs	r1, r5
 80004f4:	4a11      	ldr	r2, [pc, #68]	@ (800053c <initDMApwm+0x80>)
 80004f6:	4812      	ldr	r0, [pc, #72]	@ (8000540 <initDMApwm+0x84>)
 80004f8:	f002 f95c 	bl	80027b4 <HAL_DMA_Start>
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80004fc:	2380      	movs	r3, #128	@ 0x80
 80004fe:	6821      	ldr	r1, [r4, #0]
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	68ca      	ldr	r2, [r1, #12]
	zeroSoftPWM(dataA);
 8000504:	0030      	movs	r0, r6
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8000506:	431a      	orrs	r2, r3
 8000508:	60ca      	str	r2, [r1, #12]
	__HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_UPDATE);
 800050a:	683a      	ldr	r2, [r7, #0]
 800050c:	68d1      	ldr	r1, [r2, #12]
 800050e:	430b      	orrs	r3, r1
 8000510:	60d3      	str	r3, [r2, #12]
	zeroSoftPWM(dataA);
 8000512:	f7ff ffcb 	bl	80004ac <zeroSoftPWM>
	zeroSoftPWM(dataB);
 8000516:	0028      	movs	r0, r5
 8000518:	f7ff ffc8 	bl	80004ac <zeroSoftPWM>
}
 800051c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	200006b4 	.word	0x200006b4
 8000524:	200006fc 	.word	0x200006fc
 8000528:	02dc6bff 	.word	0x02dc6bff
 800052c:	20000398 	.word	0x20000398
 8000530:	48000018 	.word	0x48000018
 8000534:	20000598 	.word	0x20000598
 8000538:	20000208 	.word	0x20000208
 800053c:	48000418 	.word	0x48000418
 8000540:	20000554 	.word	0x20000554

08000544 <getADCValue>:
	if (vbat >= MIN_1S_VOLTAGE && vbat <= MAX_1S_VOLTAGE) return 1;	// add (or subtracted) 200 to have some margin
	if (vbat >= MIN_2S_VOLTAGE && vbat <= MAX_2S_VOLTAGE) return 2;	// add (or subtracted) 200 to have some margin
	return 0;
}

uint16_t getADCValue(uint8_t channel) {
 8000544:	b570      	push	{r4, r5, r6, lr}
	uint16_t adc;
	HAL_ADC_Start(&hadc);
 8000546:	4d06      	ldr	r5, [pc, #24]	@ (8000560 <getADCValue+0x1c>)
 8000548:	0028      	movs	r0, r5
 800054a:	f001 fff3 	bl	8002534 <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc);
 800054e:	0028      	movs	r0, r5
 8000550:	f002 f83a 	bl	80025c8 <HAL_ADC_GetValue>
 8000554:	0004      	movs	r4, r0
	HAL_ADC_Stop(&hadc);
 8000556:	0028      	movs	r0, r5
 8000558:	f002 f818 	bl	800258c <HAL_ADC_Stop>
	return adc;
 800055c:	b2a0      	uxth	r0, r4
}
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	20000798 	.word	0x20000798

08000564 <initBattery>:
void initBattery() {
 8000564:	b510      	push	{r4, lr}
	HAL_ADC_Init(&hadc);
 8000566:	4803      	ldr	r0, [pc, #12]	@ (8000574 <initBattery+0x10>)
 8000568:	f001 ff42 	bl	80023f0 <HAL_ADC_Init>
	getADCValue(BATTERY_CHANNEL);	// make the first conversion because it always returns 0
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ffe9 	bl	8000544 <getADCValue>
}
 8000572:	bd10      	pop	{r4, pc}
 8000574:	20000798 	.word	0x20000798

08000578 <getBattVoltage>:

uint16_t getBattVoltage() {
 8000578:	b510      	push	{r4, lr}
	const uint32_t vref = 3300000;		// 3.3V in uV to make the result an integer
	const uint32_t adcRes = 4096;		// 12 bit resolution
	const uint32_t dividerRatio = 3;	// voltage divider in the circuit is 1/3
	uint32_t adc = getADCValue(BATTERY_CHANNEL);
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff ffe2 	bl	8000544 <getADCValue>
	uint32_t vbat = ((vref / adcRes) * adc * dividerRatio) / 1000;	// /1000 to have the value in mV
 8000580:	21fa      	movs	r1, #250	@ 0xfa
 8000582:	4b04      	ldr	r3, [pc, #16]	@ (8000594 <getBattVoltage+0x1c>)
 8000584:	0089      	lsls	r1, r1, #2
 8000586:	4358      	muls	r0, r3
 8000588:	f7ff fdee 	bl	8000168 <__udivsi3>
	return vbat + COMPENSATION_VALUE;
 800058c:	3064      	adds	r0, #100	@ 0x64
 800058e:	b280      	uxth	r0, r0
}
 8000590:	bd10      	pop	{r4, pc}
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	0000096f 	.word	0x0000096f

08000598 <getBatteryConfiguration>:
uint8_t getBatteryConfiguration() {
 8000598:	b510      	push	{r4, lr}
	uint16_t vbat = getBattVoltage();
 800059a:	f7ff ffed 	bl	8000578 <getBattVoltage>
	if (vbat >= MIN_1S_VOLTAGE && vbat <= MAX_1S_VOLTAGE) return 1;	// add (or subtracted) 200 to have some margin
 800059e:	21af      	movs	r1, #175	@ 0xaf
 80005a0:	4a08      	ldr	r2, [pc, #32]	@ (80005c4 <getBatteryConfiguration+0x2c>)
	uint16_t vbat = getBattVoltage();
 80005a2:	0003      	movs	r3, r0
	if (vbat >= MIN_1S_VOLTAGE && vbat <= MAX_1S_VOLTAGE) return 1;	// add (or subtracted) 200 to have some margin
 80005a4:	1882      	adds	r2, r0, r2
 80005a6:	b292      	uxth	r2, r2
 80005a8:	2001      	movs	r0, #1
 80005aa:	00c9      	lsls	r1, r1, #3
 80005ac:	428a      	cmp	r2, r1
 80005ae:	d908      	bls.n	80005c2 <getBatteryConfiguration+0x2a>
	if (vbat >= MIN_2S_VOLTAGE && vbat <= MAX_2S_VOLTAGE) return 2;	// add (or subtracted) 200 to have some margin
 80005b0:	4a05      	ldr	r2, [pc, #20]	@ (80005c8 <getBatteryConfiguration+0x30>)
 80005b2:	2000      	movs	r0, #0
 80005b4:	189b      	adds	r3, r3, r2
 80005b6:	22af      	movs	r2, #175	@ 0xaf
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	0112      	lsls	r2, r2, #4
 80005bc:	429a      	cmp	r2, r3
 80005be:	4140      	adcs	r0, r0
 80005c0:	0040      	lsls	r0, r0, #1
}
 80005c2:	bd10      	pop	{r4, pc}
 80005c4:	fffff510 	.word	0xfffff510
 80005c8:	ffffea20 	.word	0xffffea20

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ce:	2510      	movs	r5, #16
{
 80005d0:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	2228      	movs	r2, #40	@ 0x28
 80005d4:	2100      	movs	r1, #0
 80005d6:	a80c      	add	r0, sp, #48	@ 0x30
 80005d8:	f006 f912 	bl	8006800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	002a      	movs	r2, r5
 80005de:	2100      	movs	r1, #0
 80005e0:	a801      	add	r0, sp, #4
 80005e2:	f006 f90d 	bl	8006800 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e6:	2214      	movs	r2, #20
 80005e8:	2100      	movs	r1, #0
 80005ea:	a805      	add	r0, sp, #20
 80005ec:	f006 f908 	bl	8006800 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80005f0:	2313      	movs	r3, #19
 80005f2:	930a      	str	r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005fa:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fc:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fe:	950e      	str	r5, [sp, #56]	@ 0x38
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000600:	9510      	str	r5, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000602:	035b      	lsls	r3, r3, #13
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	3d0e      	subs	r5, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060a:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800060c:	940f      	str	r4, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	9512      	str	r5, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000610:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f003 fc1d 	bl	8003e50 <HAL_RCC_OscConfig>
 8000616:	2800      	cmp	r0, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x52>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800061c:	e7fe      	b.n	800061c <SystemClock_Config+0x50>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000624:	0021      	movs	r1, r4
 8000626:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800062c:	f003 fe38 	bl	80042a0 <HAL_RCC_ClockConfig>
 8000630:	2800      	cmp	r0, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x6c>
 8000634:	b672      	cpsid	i
	while (1) {
 8000636:	e7fe      	b.n	8000636 <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <SystemClock_Config+0x88>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800063a:	9008      	str	r0, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800063c:	9305      	str	r3, [sp, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800063e:	2380      	movs	r3, #128	@ 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	a805      	add	r0, sp, #20
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000642:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000644:	f003 feb0 	bl	80043a8 <HAL_RCCEx_PeriphCLKConfig>
 8000648:	2800      	cmp	r0, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x84>
 800064c:	b672      	cpsid	i
	while (1) {
 800064e:	e7fe      	b.n	800064e <SystemClock_Config+0x82>
}
 8000650:	b017      	add	sp, #92	@ 0x5c
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	00020020 	.word	0x00020020

08000658 <main>:
{
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	b099      	sub	sp, #100	@ 0x64
  HAL_Init();
 800065c:	f001 fdda 	bl	8002214 <HAL_Init>
  SystemClock_Config();
 8000660:	f7ff ffb4 	bl	80005cc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	2214      	movs	r2, #20
 8000666:	2100      	movs	r1, #0
 8000668:	a810      	add	r0, sp, #64	@ 0x40
 800066a:	f006 f8c9 	bl	8006800 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2280      	movs	r2, #128	@ 0x80
 8000670:	4dd7      	ldr	r5, [pc, #860]	@ (80009d0 <main+0x378>)
 8000672:	0312      	lsls	r2, r2, #12
 8000674:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 8000676:	2480      	movs	r4, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	4313      	orrs	r3, r2
 800067a:	616b      	str	r3, [r5, #20]
 800067c:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin|PWM_M3_B_Pin|SLEEPN_M2_Pin|PWM_M2_B_Pin
 800067e:	27fc      	movs	r7, #252	@ 0xfc
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4013      	ands	r3, r2
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000682:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000684:	9305      	str	r3, [sp, #20]
 8000686:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000688:	696b      	ldr	r3, [r5, #20]
 800068a:	03d2      	lsls	r2, r2, #15
 800068c:	4313      	orrs	r3, r2
 800068e:	616b      	str	r3, [r5, #20]
 8000690:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 8000692:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000694:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000698:	9306      	str	r3, [sp, #24]
 800069a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	696b      	ldr	r3, [r5, #20]
 800069e:	0292      	lsls	r2, r2, #10
 80006a0:	4313      	orrs	r3, r2
 80006a2:	616b      	str	r3, [r5, #20]
 80006a4:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80006a6:	0021      	movs	r1, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ac:	9307      	str	r3, [sp, #28]
 80006ae:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	696b      	ldr	r3, [r5, #20]
 80006b2:	02d2      	lsls	r2, r2, #11
 80006b4:	4313      	orrs	r3, r2
 80006b6:	616b      	str	r3, [r5, #20]
 80006b8:	696b      	ldr	r3, [r5, #20]
  HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin|PWM_M3_B_Pin|SLEEPN_M2_Pin|PWM_M2_B_Pin
 80006ba:	023f      	lsls	r7, r7, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	4013      	ands	r3, r2
  HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80006be:	48c5      	ldr	r0, [pc, #788]	@ (80009d4 <main+0x37c>)
 80006c0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	9308      	str	r3, [sp, #32]
 80006c4:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80006c6:	f002 f9ab 	bl	8002a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin|PWM_M3_B_Pin|SLEEPN_M2_Pin|PWM_M2_B_Pin
 80006ca:	0039      	movs	r1, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	48c2      	ldr	r0, [pc, #776]	@ (80009d8 <main+0x380>)
 80006d0:	f002 f9a6 	bl	8002a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, PWM_M1_F_Pin|PWM_M2_F_Pin|PWM_M3_F_Pin, GPIO_PIN_RESET);
 80006d4:	21e0      	movs	r1, #224	@ 0xe0
 80006d6:	2090      	movs	r0, #144	@ 0x90
 80006d8:	2200      	movs	r2, #0
 80006da:	00c9      	lsls	r1, r1, #3
 80006dc:	05c0      	lsls	r0, r0, #23
 80006de:	f002 f99f 	bl	8002a20 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = U_LED_Pin;
 80006e4:	9410      	str	r4, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2400      	movs	r4, #0
  HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 80006e8:	48ba      	ldr	r0, [pc, #744]	@ (80009d4 <main+0x37c>)
 80006ea:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	9413      	str	r4, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f002 f8d7 	bl	80028a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006f6:	23c4      	movs	r3, #196	@ 0xc4
  HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 80006f8:	48b7      	ldr	r0, [pc, #732]	@ (80009d8 <main+0x380>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006fa:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 80006fc:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = CH1_Pin;
 80006fe:	9610      	str	r6, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000700:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000702:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000704:	f002 f8ce 	bl	80028a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CH2_Pin|CH3_Pin|CH4_Pin;
 8000708:	230e      	movs	r3, #14
 800070a:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070c:	2384      	movs	r3, #132	@ 0x84
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	48b2      	ldr	r0, [pc, #712]	@ (80009d8 <main+0x380>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000710:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000714:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000716:	9612      	str	r6, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	f002 f8c4 	bl	80028a4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	48ae      	ldr	r0, [pc, #696]	@ (80009d8 <main+0x380>)
 800071e:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = SLEEPN_M3_Pin|PWM_M3_B_Pin|SLEEPN_M2_Pin|PWM_M2_B_Pin
 8000720:	9710      	str	r7, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	9413      	str	r4, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	f002 f8bc 	bl	80028a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PWM_M1_F_Pin|PWM_M2_F_Pin|PWM_M3_F_Pin;
 800072c:	23e0      	movs	r3, #224	@ 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	2090      	movs	r0, #144	@ 0x90
  htim16.Init.Prescaler = 24-1;
 8000730:	2717      	movs	r7, #23
  GPIO_InitStruct.Pin = PWM_M1_F_Pin|PWM_M2_F_Pin|PWM_M3_F_Pin;
 8000732:	00db      	lsls	r3, r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	a910      	add	r1, sp, #64	@ 0x40
 8000736:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = PWM_M1_F_Pin|PWM_M2_F_Pin|PWM_M3_F_Pin;
 8000738:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	9611      	str	r6, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	9413      	str	r4, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f002 f8b0 	bl	80028a4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000744:	0022      	movs	r2, r4
 8000746:	0021      	movs	r1, r4
 8000748:	2005      	movs	r0, #5
 800074a:	f001 ffb1 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800074e:	2005      	movs	r0, #5
 8000750:	f001 ffd8 	bl	8002704 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000754:	0022      	movs	r2, r4
 8000756:	0021      	movs	r1, r4
 8000758:	2006      	movs	r0, #6
 800075a:	f001 ffa9 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800075e:	2006      	movs	r0, #6
 8000760:	f001 ffd0 	bl	8002704 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000764:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000766:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000768:	4333      	orrs	r3, r6
 800076a:	616b      	str	r3, [r5, #20]
 800076c:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800076e:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000770:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000772:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000774:	9304      	str	r3, [sp, #16]
 8000776:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000778:	f001 ff9a 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800077c:	200a      	movs	r0, #10
 800077e:	f001 ffc1 	bl	8002704 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000782:	0022      	movs	r2, r4
 8000784:	0021      	movs	r1, r4
 8000786:	200b      	movs	r0, #11
 8000788:	f001 ff92 	bl	80026b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800078c:	200b      	movs	r0, #11
 800078e:	f001 ffb9 	bl	8002704 <HAL_NVIC_EnableIRQ>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000792:	221c      	movs	r2, #28
 8000794:	0021      	movs	r1, r4
 8000796:	a809      	add	r0, sp, #36	@ 0x24
 8000798:	f006 f832 	bl	8006800 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079c:	2220      	movs	r2, #32
 800079e:	0021      	movs	r1, r4
 80007a0:	a810      	add	r0, sp, #64	@ 0x40
 80007a2:	f006 f82d 	bl	8006800 <memset>
  htim16.Instance = TIM16;
 80007a6:	4d8d      	ldr	r5, [pc, #564]	@ (80009dc <main+0x384>)
 80007a8:	4b8d      	ldr	r3, [pc, #564]	@ (80009e0 <main+0x388>)
  htim16.Init.Period = 10000-1;
 80007aa:	4e8e      	ldr	r6, [pc, #568]	@ (80009e4 <main+0x38c>)
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007ac:	0028      	movs	r0, r5
  htim16.Instance = TIM16;
 80007ae:	602b      	str	r3, [r5, #0]
  htim16.Init.Prescaler = 24-1;
 80007b0:	606f      	str	r7, [r5, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	60ac      	str	r4, [r5, #8]
  htim16.Init.Period = 10000-1;
 80007b4:	60ee      	str	r6, [r5, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b6:	612c      	str	r4, [r5, #16]
  htim16.Init.RepetitionCounter = 0;
 80007b8:	616c      	str	r4, [r5, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007bc:	f003 ffbe 	bl	800473c <HAL_TIM_Base_Init>
 80007c0:	42a0      	cmp	r0, r4
 80007c2:	d001      	beq.n	80007c8 <main+0x170>
 80007c4:	b672      	cpsid	i
	while (1) {
 80007c6:	e7fe      	b.n	80007c6 <main+0x16e>
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80007c8:	0028      	movs	r0, r5
 80007ca:	f003 ffdf 	bl	800478c <HAL_TIM_PWM_Init>
 80007ce:	1e02      	subs	r2, r0, #0
 80007d0:	d001      	beq.n	80007d6 <main+0x17e>
 80007d2:	b672      	cpsid	i
	while (1) {
 80007d4:	e7fe      	b.n	80007d4 <main+0x17c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 80007d8:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007da:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007dc:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007de:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007e0:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e2:	900f      	str	r0, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e4:	a909      	add	r1, sp, #36	@ 0x24
 80007e6:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ea:	f004 f837 	bl	800485c <HAL_TIM_PWM_ConfigChannel>
 80007ee:	2800      	cmp	r0, #0
 80007f0:	d001      	beq.n	80007f6 <main+0x19e>
 80007f2:	b672      	cpsid	i
	while (1) {
 80007f4:	e7fe      	b.n	80007f4 <main+0x19c>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007f6:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f8:	9010      	str	r0, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007fa:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007fc:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 80007fe:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000800:	9014      	str	r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000802:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000804:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000806:	a910      	add	r1, sp, #64	@ 0x40
 8000808:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800080a:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800080c:	f004 f9de 	bl	8004bcc <HAL_TIMEx_ConfigBreakDeadTime>
 8000810:	1e04      	subs	r4, r0, #0
 8000812:	d001      	beq.n	8000818 <main+0x1c0>
 8000814:	b672      	cpsid	i
	while (1) {
 8000816:	e7fe      	b.n	8000816 <main+0x1be>
  HAL_TIM_MspPostInit(&htim16);
 8000818:	0028      	movs	r0, r5
 800081a:	f001 fbeb 	bl	8001ff4 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	221c      	movs	r2, #28
 8000820:	0021      	movs	r1, r4
 8000822:	a809      	add	r0, sp, #36	@ 0x24
 8000824:	f005 ffec 	bl	8006800 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000828:	2220      	movs	r2, #32
 800082a:	0021      	movs	r1, r4
 800082c:	a810      	add	r0, sp, #64	@ 0x40
 800082e:	f005 ffe7 	bl	8006800 <memset>
  htim17.Instance = TIM17;
 8000832:	4d6d      	ldr	r5, [pc, #436]	@ (80009e8 <main+0x390>)
 8000834:	4b6d      	ldr	r3, [pc, #436]	@ (80009ec <main+0x394>)
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000836:	0028      	movs	r0, r5
  htim17.Instance = TIM17;
 8000838:	602b      	str	r3, [r5, #0]
  htim17.Init.Prescaler = 24-1;
 800083a:	606f      	str	r7, [r5, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	60ac      	str	r4, [r5, #8]
  htim17.Init.Period = 10000-1;
 800083e:	60ee      	str	r6, [r5, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	612c      	str	r4, [r5, #16]
  htim17.Init.RepetitionCounter = 0;
 8000842:	616c      	str	r4, [r5, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000846:	f003 ff79 	bl	800473c <HAL_TIM_Base_Init>
 800084a:	2800      	cmp	r0, #0
 800084c:	d001      	beq.n	8000852 <main+0x1fa>
 800084e:	b672      	cpsid	i
	while (1) {
 8000850:	e7fe      	b.n	8000850 <main+0x1f8>
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000852:	0028      	movs	r0, r5
 8000854:	f003 ff9a 	bl	800478c <HAL_TIM_PWM_Init>
 8000858:	1e02      	subs	r2, r0, #0
 800085a:	d001      	beq.n	8000860 <main+0x208>
 800085c:	b672      	cpsid	i
	while (1) {
 800085e:	e7fe      	b.n	800085e <main+0x206>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000860:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.Pulse = 0;
 8000862:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000864:	900b      	str	r0, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000866:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000868:	900d      	str	r0, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086a:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086c:	900f      	str	r0, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	a909      	add	r1, sp, #36	@ 0x24
 8000870:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000872:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000874:	f003 fff2 	bl	800485c <HAL_TIM_PWM_ConfigChannel>
 8000878:	2800      	cmp	r0, #0
 800087a:	d001      	beq.n	8000880 <main+0x228>
 800087c:	b672      	cpsid	i
	while (1) {
 800087e:	e7fe      	b.n	800087e <main+0x226>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000880:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000882:	9010      	str	r0, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000884:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000886:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8000888:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800088a:	9014      	str	r0, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088c:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800088e:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000890:	a910      	add	r1, sp, #64	@ 0x40
 8000892:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000894:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000896:	f004 f999 	bl	8004bcc <HAL_TIMEx_ConfigBreakDeadTime>
 800089a:	1e06      	subs	r6, r0, #0
 800089c:	d001      	beq.n	80008a2 <main+0x24a>
 800089e:	b672      	cpsid	i
	while (1) {
 80008a0:	e7fe      	b.n	80008a0 <main+0x248>
  HAL_TIM_MspPostInit(&htim17);
 80008a2:	0028      	movs	r0, r5
 80008a4:	f001 fba6 	bl	8001ff4 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a8:	2210      	movs	r2, #16
 80008aa:	0031      	movs	r1, r6
 80008ac:	a810      	add	r0, sp, #64	@ 0x40
 80008ae:	f005 ffa7 	bl	8006800 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	2208      	movs	r2, #8
 80008b4:	0031      	movs	r1, r6
 80008b6:	a809      	add	r0, sp, #36	@ 0x24
 80008b8:	f005 ffa2 	bl	8006800 <memset>
  htim1.Instance = TIM1;
 80008bc:	4c4c      	ldr	r4, [pc, #304]	@ (80009f0 <main+0x398>)
 80008be:	4b4d      	ldr	r3, [pc, #308]	@ (80009f4 <main+0x39c>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c0:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 80008c2:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 100-1;
 80008c4:	2363      	movs	r3, #99	@ 0x63
  htim1.Init.Prescaler = 0;
 80008c6:	6066      	str	r6, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	60a6      	str	r6, [r4, #8]
  htim1.Init.Period = 100-1;
 80008ca:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	6126      	str	r6, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80008ce:	6166      	str	r6, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d0:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008d2:	f003 ff33 	bl	800473c <HAL_TIM_Base_Init>
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d001      	beq.n	80008de <main+0x286>
 80008da:	b672      	cpsid	i
	while (1) {
 80008dc:	e7fe      	b.n	80008dc <main+0x284>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008de:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e0:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e2:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e4:	a910      	add	r1, sp, #64	@ 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e6:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e8:	f004 f824 	bl	8004934 <HAL_TIM_ConfigClockSource>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d001      	beq.n	80008f4 <main+0x29c>
 80008f0:	b672      	cpsid	i
	while (1) {
 80008f2:	e7fe      	b.n	80008f2 <main+0x29a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008f4:	2320      	movs	r3, #32
 80008f6:	9309      	str	r3, [sp, #36]	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008fa:	0020      	movs	r0, r4
 80008fc:	a909      	add	r1, sp, #36	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000900:	f004 f936 	bl	8004b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	2800      	cmp	r0, #0
 8000906:	d001      	beq.n	800090c <main+0x2b4>
 8000908:	b672      	cpsid	i
	while (1) {
 800090a:	e7fe      	b.n	800090a <main+0x2b2>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090c:	2701      	movs	r7, #1
  hi2c1.Instance = I2C1;
 800090e:	4c3a      	ldr	r4, [pc, #232]	@ (80009f8 <main+0x3a0>)
 8000910:	4b3a      	ldr	r3, [pc, #232]	@ (80009fc <main+0x3a4>)
  hi2c1.Init.OwnAddress1 = 0;
 8000912:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8000914:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000916:	4b3a      	ldr	r3, [pc, #232]	@ (8000a00 <main+0x3a8>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800091a:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800091c:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000922:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00201D2B;
 8000924:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000926:	60e7      	str	r7, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000928:	f002 f9c6 	bl	8002cb8 <HAL_I2C_Init>
 800092c:	1e01      	subs	r1, r0, #0
 800092e:	d001      	beq.n	8000934 <main+0x2dc>
 8000930:	b672      	cpsid	i
	while (1) {
 8000932:	e7fe      	b.n	8000932 <main+0x2da>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000934:	0020      	movs	r0, r4
 8000936:	f002 fbd5 	bl	80030e4 <HAL_I2CEx_ConfigAnalogFilter>
 800093a:	1e01      	subs	r1, r0, #0
 800093c:	d001      	beq.n	8000942 <main+0x2ea>
 800093e:	b672      	cpsid	i
	while (1) {
 8000940:	e7fe      	b.n	8000940 <main+0x2e8>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000942:	0020      	movs	r0, r4
 8000944:	f002 fbf4 	bl	8003130 <HAL_I2CEx_ConfigDigitalFilter>
 8000948:	1e06      	subs	r6, r0, #0
 800094a:	d001      	beq.n	8000950 <main+0x2f8>
 800094c:	b672      	cpsid	i
	while (1) {
 800094e:	e7fe      	b.n	800094e <main+0x2f6>
  MX_USB_DEVICE_Init();
 8000950:	f005 fb5e 	bl	8006010 <MX_USB_DEVICE_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000954:	220c      	movs	r2, #12
 8000956:	0031      	movs	r1, r6
 8000958:	a810      	add	r0, sp, #64	@ 0x40
 800095a:	f005 ff51 	bl	8006800 <memset>
  hadc.Instance = ADC1;
 800095e:	4c29      	ldr	r4, [pc, #164]	@ (8000a04 <main+0x3ac>)
 8000960:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <main+0x3b0>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000962:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8000964:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000966:	2304      	movs	r3, #4
 8000968:	6163      	str	r3, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800096a:	2380      	movs	r3, #128	@ 0x80
 800096c:	045b      	lsls	r3, r3, #17
 800096e:	61a3      	str	r3, [r4, #24]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000970:	23c2      	movs	r3, #194	@ 0xc2
 8000972:	33ff      	adds	r3, #255	@ 0xff
 8000974:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000976:	1d63      	adds	r3, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000978:	6066      	str	r6, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800097a:	60a6      	str	r6, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097c:	60e6      	str	r6, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800097e:	6127      	str	r7, [r4, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000980:	6226      	str	r6, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000982:	77de      	strb	r6, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000984:	62a7      	str	r7, [r4, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000986:	f001 fd33 	bl	80023f0 <HAL_ADC_Init>
 800098a:	2800      	cmp	r0, #0
 800098c:	d001      	beq.n	8000992 <main+0x33a>
 800098e:	b672      	cpsid	i
	while (1) {
 8000990:	e7fe      	b.n	8000990 <main+0x338>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000992:	2680      	movs	r6, #128	@ 0x80
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000994:	2380      	movs	r3, #128	@ 0x80
  sConfig.Channel = ADC_CHANNEL_0;
 8000996:	9010      	str	r0, [sp, #64]	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000998:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800099a:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800099c:	0176      	lsls	r6, r6, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800099e:	a910      	add	r1, sp, #64	@ 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009a0:	9312      	str	r3, [sp, #72]	@ 0x48
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80009a2:	9611      	str	r6, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009a4:	f001 fe14 	bl	80025d0 <HAL_ADC_ConfigChannel>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <main+0x358>
 80009ac:	b672      	cpsid	i
	while (1) {
 80009ae:	e7fe      	b.n	80009ae <main+0x356>
  htim6.Instance = TIM6;
 80009b0:	4816      	ldr	r0, [pc, #88]	@ (8000a0c <main+0x3b4>)
 80009b2:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <main+0x3b8>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	6083      	str	r3, [r0, #8]
  htim6.Instance = TIM6;
 80009b6:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 48-1;
 80009b8:	222f      	movs	r2, #47	@ 0x2f
 80009ba:	6042      	str	r2, [r0, #4]
  htim6.Init.Period = 65535;
 80009bc:	4a15      	ldr	r2, [pc, #84]	@ (8000a14 <main+0x3bc>)
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009be:	6183      	str	r3, [r0, #24]
  htim6.Init.Period = 65535;
 80009c0:	60c2      	str	r2, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009c2:	f003 febb 	bl	800473c <HAL_TIM_Base_Init>
 80009c6:	1e07      	subs	r7, r0, #0
 80009c8:	d026      	beq.n	8000a18 <main+0x3c0>
 80009ca:	b672      	cpsid	i
	while (1) {
 80009cc:	e7fe      	b.n	80009cc <main+0x374>
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000800 	.word	0x48000800
 80009d8:	48000400 	.word	0x48000400
 80009dc:	20000624 	.word	0x20000624
 80009e0:	40014400 	.word	0x40014400
 80009e4:	0000270f 	.word	0x0000270f
 80009e8:	200005dc 	.word	0x200005dc
 80009ec:	40014800 	.word	0x40014800
 80009f0:	200006fc 	.word	0x200006fc
 80009f4:	40012c00 	.word	0x40012c00
 80009f8:	20000744 	.word	0x20000744
 80009fc:	40005400 	.word	0x40005400
 8000a00:	00201d2b 	.word	0x00201d2b
 8000a04:	20000798 	.word	0x20000798
 8000a08:	40012400 	.word	0x40012400
 8000a0c:	2000066c 	.word	0x2000066c
 8000a10:	40001000 	.word	0x40001000
 8000a14:	0000ffff 	.word	0x0000ffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a18:	0001      	movs	r1, r0
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	a810      	add	r0, sp, #64	@ 0x40
 8000a1e:	f005 feef 	bl	8006800 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a22:	2208      	movs	r2, #8
 8000a24:	0039      	movs	r1, r7
 8000a26:	a809      	add	r0, sp, #36	@ 0x24
 8000a28:	f005 feea 	bl	8006800 <memset>
  htim3.Instance = TIM3;
 8000a2c:	4cca      	ldr	r4, [pc, #808]	@ (8000d58 <main+0x700>)
 8000a2e:	4bcb      	ldr	r3, [pc, #812]	@ (8000d5c <main+0x704>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a30:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 8000a32:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 100-1;
 8000a34:	2363      	movs	r3, #99	@ 0x63
  htim3.Init.Prescaler = 0;
 8000a36:	6067      	str	r7, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a38:	60a7      	str	r7, [r4, #8]
  htim3.Init.Period = 100-1;
 8000a3a:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3c:	6127      	str	r7, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3e:	61a7      	str	r7, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a40:	f003 fe7c 	bl	800473c <HAL_TIM_Base_Init>
 8000a44:	2800      	cmp	r0, #0
 8000a46:	d001      	beq.n	8000a4c <main+0x3f4>
 8000a48:	b672      	cpsid	i
	while (1) {
 8000a4a:	e7fe      	b.n	8000a4a <main+0x3f2>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a4c:	0020      	movs	r0, r4
 8000a4e:	a910      	add	r1, sp, #64	@ 0x40
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	9610      	str	r6, [sp, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a52:	f003 ff6f 	bl	8004934 <HAL_TIM_ConfigClockSource>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d001      	beq.n	8000a5e <main+0x406>
 8000a5a:	b672      	cpsid	i
	while (1) {
 8000a5c:	e7fe      	b.n	8000a5c <main+0x404>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a5e:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a62:	a909      	add	r1, sp, #36	@ 0x24
 8000a64:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a66:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a68:	f004 f882 	bl	8004b70 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d001      	beq.n	8000a74 <main+0x41c>
 8000a70:	b672      	cpsid	i
	while (1) {
 8000a72:	e7fe      	b.n	8000a72 <main+0x41a>
	initReciever(&htim6);
 8000a74:	48ba      	ldr	r0, [pc, #744]	@ (8000d60 <main+0x708>)
 8000a76:	f000 fbb9 	bl	80011ec <initReciever>
	initMotors();
 8000a7a:	f000 f9eb 	bl	8000e54 <initMotors>
	initBattery(&hadc);
 8000a7e:	48b9      	ldr	r0, [pc, #740]	@ (8000d64 <main+0x70c>)
 8000a80:	f7ff fd70 	bl	8000564 <initBattery>
	uint8_t isFirstWrite = read_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS);
 8000a84:	2064      	movs	r0, #100	@ 0x64
 8000a86:	f000 fd29 	bl	80014dc <read_byte_eeprom>
	if (isFirstWrite) {	// if is the first time the value is 255 (value of the memory empty)
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d05f      	beq.n	8000b4e <main+0x4f6>
			HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000a8e:	2680      	movs	r6, #128	@ 0x80
 8000a90:	240a      	movs	r4, #10
 8000a92:	0236      	lsls	r6, r6, #8
 8000a94:	0031      	movs	r1, r6
 8000a96:	48b4      	ldr	r0, [pc, #720]	@ (8000d68 <main+0x710>)
 8000a98:	f001 ffc8 	bl	8002a2c <HAL_GPIO_TogglePin>
		for (int i = 0; i < 10; i++) {
 8000a9c:	3c01      	subs	r4, #1
			HAL_Delay(100);
 8000a9e:	2064      	movs	r0, #100	@ 0x64
 8000aa0:	f001 fbda 	bl	8002258 <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 8000aa4:	2c00      	cmp	r4, #0
 8000aa6:	d1f5      	bne.n	8000a94 <main+0x43c>
		storeSettingsToEeprom();	// write the default settings
 8000aa8:	f000 fde0 	bl	800166c <storeSettingsToEeprom>
		write_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS, isFirstWrite);
 8000aac:	0021      	movs	r1, r4
 8000aae:	2064      	movs	r0, #100	@ 0x64
 8000ab0:	f000 fdc4 	bl	800163c <write_byte_eeprom>
	uint32_t timeLowBattery = 0;
 8000ab4:	2600      	movs	r6, #0
	uint32_t time1 = 0;
 8000ab6:	0037      	movs	r7, r6
	disableMotor(M1);
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 fb0d 	bl	80010d8 <disableMotor>
	disableMotor(M2);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f000 fb0a 	bl	80010d8 <disableMotor>
	disableMotor(M3);
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f000 fb07 	bl	80010d8 <disableMotor>
	uint32_t timeLimitBattery = 0;
 8000aca:	9602      	str	r6, [sp, #8]
	uint32_t time3 = 0;
 8000acc:	9601      	str	r6, [sp, #4]
	uint32_t time2 = 0;
 8000ace:	9600      	str	r6, [sp, #0]
		if (!cutoff) {	// if the robot is not in cutoff
 8000ad0:	4ba6      	ldr	r3, [pc, #664]	@ (8000d6c <main+0x714>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d000      	beq.n	8000ada <main+0x482>
 8000ad8:	e17e      	b.n	8000dd8 <main+0x780>
			if (!noDisarm) {
 8000ada:	4ba5      	ldr	r3, [pc, #660]	@ (8000d70 <main+0x718>)
 8000adc:	4ca5      	ldr	r4, [pc, #660]	@ (8000d74 <main+0x71c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	9303      	str	r3, [sp, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d105      	bne.n	8000af2 <main+0x49a>
				if (getChannelValuePercentage(armChannel) > 75)
 8000ae6:	4ba4      	ldr	r3, [pc, #656]	@ (8000d78 <main+0x720>)
 8000ae8:	7818      	ldrb	r0, [r3, #0]
 8000aea:	f000 fb63 	bl	80011b4 <getChannelValuePercentage>
 8000aee:	284b      	cmp	r0, #75	@ 0x4b
 8000af0:	d930      	bls.n	8000b54 <main+0x4fc>
					armed = TRUE;
 8000af2:	2301      	movs	r3, #1
 8000af4:	7023      	strb	r3, [r4, #0]
				enableMotor(M1);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 fb06 	bl	8001108 <enableMotor>
				enableMotor(M2);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f000 fb03 	bl	8001108 <enableMotor>
				enableMotor(M3);
 8000b02:	2002      	movs	r0, #2
 8000b04:	f000 fb00 	bl	8001108 <enableMotor>
				setServoIsEnable(TRUE, &htim17); // start servo 1 HV
 8000b08:	0029      	movs	r1, r5
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 fc8a 	bl	8001424 <setServoIsEnable>
				setServoIsEnable(TRUE, &htim16); // start servo 2
 8000b10:	2001      	movs	r0, #1
 8000b12:	499a      	ldr	r1, [pc, #616]	@ (8000d7c <main+0x724>)
 8000b14:	f000 fc86 	bl	8001424 <setServoIsEnable>
				if (tankMixIsON) {	// calculate and use the tank mix only if it's enabled
 8000b18:	4b99      	ldr	r3, [pc, #612]	@ (8000d80 <main+0x728>)
 8000b1a:	781c      	ldrb	r4, [r3, #0]
 8000b1c:	2c00      	cmp	r4, #0
 8000b1e:	d138      	bne.n	8000b92 <main+0x53a>
					setMotorSpeedBidirectional(M1, getChannelValuePercentage(thChannel));
 8000b20:	4b98      	ldr	r3, [pc, #608]	@ (8000d84 <main+0x72c>)
 8000b22:	7818      	ldrb	r0, [r3, #0]
 8000b24:	f000 fb46 	bl	80011b4 <getChannelValuePercentage>
 8000b28:	b241      	sxtb	r1, r0
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	f000 fa40 	bl	8000fb0 <setMotorSpeedBidirectional>
					setMotorSpeedBidirectional(M2, getChannelValuePercentage(stChannel));
 8000b30:	4b95      	ldr	r3, [pc, #596]	@ (8000d88 <main+0x730>)
 8000b32:	7818      	ldrb	r0, [r3, #0]
 8000b34:	f000 fb3e 	bl	80011b4 <getChannelValuePercentage>
 8000b38:	b241      	sxtb	r1, r0
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f000 fa38 	bl	8000fb0 <setMotorSpeedBidirectional>
					setMotorSpeedBidirectional(M3, getChannelValuePercentage(wpChannel));
 8000b40:	4b92      	ldr	r3, [pc, #584]	@ (8000d8c <main+0x734>)
 8000b42:	7818      	ldrb	r0, [r3, #0]
 8000b44:	f000 fb36 	bl	80011b4 <getChannelValuePercentage>
 8000b48:	b241      	sxtb	r1, r0
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	e046      	b.n	8000bdc <main+0x584>
		loadSettingsFromEeprom();	// load the settings from the eeprom memory
 8000b4e:	f000 fd71 	bl	8001634 <loadSettingsFromEeprom>
 8000b52:	e7af      	b.n	8000ab4 <main+0x45c>
					armed = FALSE;
 8000b54:	9b03      	ldr	r3, [sp, #12]
				makeSound(mLeft, 50);
 8000b56:	2132      	movs	r1, #50	@ 0x32
					armed = FALSE;
 8000b58:	7023      	strb	r3, [r4, #0]
				makeSound(mLeft, 50);
 8000b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8000d90 <main+0x738>)
 8000b5c:	7818      	ldrb	r0, [r3, #0]
 8000b5e:	f000 faeb 	bl	8001138 <makeSound>
				HAL_Delay(50);
 8000b62:	2032      	movs	r0, #50	@ 0x32
 8000b64:	f001 fb78 	bl	8002258 <HAL_Delay>
			if (armed) {	// if armed do...
 8000b68:	7824      	ldrb	r4, [r4, #0]
 8000b6a:	2c00      	cmp	r4, #0
 8000b6c:	d1c3      	bne.n	8000af6 <main+0x49e>
				disableMotor(M1);
 8000b6e:	0020      	movs	r0, r4
 8000b70:	f000 fab2 	bl	80010d8 <disableMotor>
				disableMotor(M2);
 8000b74:	2001      	movs	r0, #1
 8000b76:	f000 faaf 	bl	80010d8 <disableMotor>
				disableMotor(M3);
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f000 faac 	bl	80010d8 <disableMotor>
				setServoIsEnable(FALSE, &htim17); // stop servo 1 HV
 8000b80:	0029      	movs	r1, r5
 8000b82:	0020      	movs	r0, r4
 8000b84:	f000 fc4e 	bl	8001424 <setServoIsEnable>
				setServoIsEnable(FALSE, &htim16); // stop servo 2
 8000b88:	0020      	movs	r0, r4
 8000b8a:	497c      	ldr	r1, [pc, #496]	@ (8000d7c <main+0x724>)
 8000b8c:	f000 fc4a 	bl	8001424 <setServoIsEnable>
 8000b90:	e04f      	b.n	8000c32 <main+0x5da>
					tank = tankMix(getChannelValuePercentage(stChannel), getChannelValuePercentage(thChannel));
 8000b92:	4b7d      	ldr	r3, [pc, #500]	@ (8000d88 <main+0x730>)
 8000b94:	7818      	ldrb	r0, [r3, #0]
 8000b96:	f000 fb0d 	bl	80011b4 <getChannelValuePercentage>
 8000b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8000d84 <main+0x72c>)
 8000b9c:	0004      	movs	r4, r0
 8000b9e:	7818      	ldrb	r0, [r3, #0]
 8000ba0:	f000 fb08 	bl	80011b4 <getChannelValuePercentage>
 8000ba4:	0001      	movs	r1, r0
 8000ba6:	0020      	movs	r0, r4
 8000ba8:	f000 fbca 	bl	8001340 <tankMix>
 8000bac:	b200      	sxth	r0, r0
 8000bae:	4a79      	ldr	r2, [pc, #484]	@ (8000d94 <main+0x73c>)
 8000bb0:	0403      	lsls	r3, r0, #16
 8000bb2:	0e1b      	lsrs	r3, r3, #24
 8000bb4:	7010      	strb	r0, [r2, #0]
 8000bb6:	7053      	strb	r3, [r2, #1]
					setTankMotor(tank);
 8000bb8:	b2c2      	uxtb	r2, r0
 8000bba:	b2d8      	uxtb	r0, r3
 8000bbc:	0200      	lsls	r0, r0, #8
 8000bbe:	4310      	orrs	r0, r2
 8000bc0:	f000 fa76 	bl	80010b0 <setTankMotor>
					if (weaponDoubleDirection) {
 8000bc4:	4b74      	ldr	r3, [pc, #464]	@ (8000d98 <main+0x740>)
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	4b70      	ldr	r3, [pc, #448]	@ (8000d8c <main+0x734>)
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d009      	beq.n	8000be2 <main+0x58a>
						setMotorSpeedBidirectional(mWeapon, getChannelValuePercentage(wpChannel));
 8000bce:	4a73      	ldr	r2, [pc, #460]	@ (8000d9c <main+0x744>)
 8000bd0:	7818      	ldrb	r0, [r3, #0]
 8000bd2:	7814      	ldrb	r4, [r2, #0]
 8000bd4:	f000 faee 	bl	80011b4 <getChannelValuePercentage>
 8000bd8:	b241      	sxtb	r1, r0
 8000bda:	0020      	movs	r0, r4
					setMotorSpeedBidirectional(M3, getChannelValuePercentage(wpChannel));
 8000bdc:	f000 f9e8 	bl	8000fb0 <setMotorSpeedBidirectional>
 8000be0:	e00d      	b.n	8000bfe <main+0x5a6>
						uint8_t wp = getChannelValuePercentage(wpChannel);
 8000be2:	7818      	ldrb	r0, [r3, #0]
 8000be4:	f000 fae6 	bl	80011b4 <getChannelValuePercentage>
						if (limit == TRUE) wp = wp / 2;	// valid only in the unidirectional mode  !!FOR DC MOTOR ONLY!!
 8000be8:	4b6d      	ldr	r3, [pc, #436]	@ (8000da0 <main+0x748>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d101      	bne.n	8000bf4 <main+0x59c>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	b2c0      	uxtb	r0, r0
						setMotorSpeedUnidirectional(mWeapon, wp);
 8000bf4:	4b69      	ldr	r3, [pc, #420]	@ (8000d9c <main+0x744>)
 8000bf6:	b241      	sxtb	r1, r0
 8000bf8:	7818      	ldrb	r0, [r3, #0]
 8000bfa:	f000 f955 	bl	8000ea8 <setMotorSpeedUnidirectional>
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000bfe:	4b69      	ldr	r3, [pc, #420]	@ (8000da4 <main+0x74c>)
				if (limit == TRUE) { // !!ASUME THAT S1 IS CONNECTED TO THE WEAPON ESC
 8000c00:	4c67      	ldr	r4, [pc, #412]	@ (8000da0 <main+0x748>)
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000c02:	7818      	ldrb	r0, [r3, #0]
				if (limit == TRUE) { // !!ASUME THAT S1 IS CONNECTED TO THE WEAPON ESC
 8000c04:	7823      	ldrb	r3, [r4, #0]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d000      	beq.n	8000c0c <main+0x5b4>
 8000c0a:	e0a0      	b.n	8000d4e <main+0x6f6>
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000c0c:	f000 fad2 	bl	80011b4 <getChannelValuePercentage>
					if (limit == TRUE) s1 = s1 / 2;
 8000c10:	7823      	ldrb	r3, [r4, #0]
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000c12:	0001      	movs	r1, r0
					if (limit == TRUE) s1 = s1 / 2;
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d101      	bne.n	8000c1c <main+0x5c4>
 8000c18:	0841      	lsrs	r1, r0, #1
 8000c1a:	b2c9      	uxtb	r1, r1
					setServoAngle(S1, getChannelValuePercentage(s1Channel));	// servo 1 attached to channel s1Channel
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 fbc9 	bl	80013b4 <setServoAngle>
				setServoAngle(S2, getChannelValuePercentage(s2Channel));
 8000c22:	4b61      	ldr	r3, [pc, #388]	@ (8000da8 <main+0x750>)
 8000c24:	7818      	ldrb	r0, [r3, #0]
 8000c26:	f000 fac5 	bl	80011b4 <getChannelValuePercentage>
 8000c2a:	0001      	movs	r1, r0
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 fbc1 	bl	80013b4 <setServoAngle>
			if (HAL_GetTick() - time2 >= 200) {
 8000c32:	f001 fb0b 	bl	800224c <HAL_GetTick>
 8000c36:	9b00      	ldr	r3, [sp, #0]
 8000c38:	1ac0      	subs	r0, r0, r3
 8000c3a:	28c7      	cmp	r0, #199	@ 0xc7
 8000c3c:	d941      	bls.n	8000cc2 <main+0x66a>
				batteryVoltage = getBattVoltage();
 8000c3e:	f7ff fc9b 	bl	8000578 <getBattVoltage>
 8000c42:	4c5a      	ldr	r4, [pc, #360]	@ (8000dac <main+0x754>)
 8000c44:	8020      	strh	r0, [r4, #0]
				batteryConfiguration = getBatteryConfiguration();
 8000c46:	f7ff fca7 	bl	8000598 <getBatteryConfiguration>
 8000c4a:	4b59      	ldr	r3, [pc, #356]	@ (8000db0 <main+0x758>)
 8000c4c:	7018      	strb	r0, [r3, #0]
				if (HAL_GetTick() - timeLimitBattery >= CUTOFF_BATTERY_TIMEOUT * 1000) {
 8000c4e:	f001 fafd 	bl	800224c <HAL_GetTick>
 8000c52:	9b02      	ldr	r3, [sp, #8]
 8000c54:	1ac0      	subs	r0, r0, r3
 8000c56:	4b57      	ldr	r3, [pc, #348]	@ (8000db4 <main+0x75c>)
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	d902      	bls.n	8000c62 <main+0x60a>
					limit = TRUE;	// activate limit state (weapon speed limited)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4b50      	ldr	r3, [pc, #320]	@ (8000da0 <main+0x748>)
 8000c60:	701a      	strb	r2, [r3, #0]
				if (batteryVoltage >= limitVoltage * 100 * batteryConfiguration && !limit)
 8000c62:	4b55      	ldr	r3, [pc, #340]	@ (8000db8 <main+0x760>)
 8000c64:	4a52      	ldr	r2, [pc, #328]	@ (8000db0 <main+0x758>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	8821      	ldrh	r1, [r4, #0]
 8000c6c:	435a      	muls	r2, r3
 8000c6e:	2364      	movs	r3, #100	@ 0x64
 8000c70:	4353      	muls	r3, r2
 8000c72:	4299      	cmp	r1, r3
 8000c74:	db07      	blt.n	8000c86 <main+0x62e>
 8000c76:	4b4a      	ldr	r3, [pc, #296]	@ (8000da0 <main+0x748>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d103      	bne.n	8000c86 <main+0x62e>
					timeLimitBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8000c7e:	f001 fae5 	bl	800224c <HAL_GetTick>
 8000c82:	300a      	adds	r0, #10
 8000c84:	9002      	str	r0, [sp, #8]
				if (HAL_GetTick() - timeLowBattery >= CUTOFF_BATTERY_TIMEOUT * 1000) {
 8000c86:	f001 fae1 	bl	800224c <HAL_GetTick>
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8000db4 <main+0x75c>)
 8000c8c:	1b80      	subs	r0, r0, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d902      	bls.n	8000c98 <main+0x640>
					cutoff = TRUE;	// activate cutoff state (robot disarmed)
 8000c92:	2201      	movs	r2, #1
 8000c94:	4b35      	ldr	r3, [pc, #212]	@ (8000d6c <main+0x714>)
 8000c96:	701a      	strb	r2, [r3, #0]
				if (batteryVoltage >= cutOffVoltage * 100 * batteryConfiguration && !cutoff)
 8000c98:	4b48      	ldr	r3, [pc, #288]	@ (8000dbc <main+0x764>)
 8000c9a:	4a45      	ldr	r2, [pc, #276]	@ (8000db0 <main+0x758>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	8821      	ldrh	r1, [r4, #0]
 8000ca2:	435a      	muls	r2, r3
 8000ca4:	2364      	movs	r3, #100	@ 0x64
 8000ca6:	4353      	muls	r3, r2
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	db07      	blt.n	8000cbc <main+0x664>
 8000cac:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <main+0x714>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d103      	bne.n	8000cbc <main+0x664>
					timeLowBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8000cb4:	f001 faca 	bl	800224c <HAL_GetTick>
 8000cb8:	300a      	adds	r0, #10
 8000cba:	0006      	movs	r6, r0
				time2 = HAL_GetTick();
 8000cbc:	f001 fac6 	bl	800224c <HAL_GetTick>
 8000cc0:	9000      	str	r0, [sp, #0]
			if (HAL_GetTick() - time1 >= 2000 && limit == FALSE) {
 8000cc2:	f001 fac3 	bl	800224c <HAL_GetTick>
 8000cc6:	23fa      	movs	r3, #250	@ 0xfa
 8000cc8:	1bc0      	subs	r0, r0, r7
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	d30b      	bcc.n	8000ce8 <main+0x690>
 8000cd0:	4b33      	ldr	r3, [pc, #204]	@ (8000da0 <main+0x748>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d107      	bne.n	8000ce8 <main+0x690>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000cd8:	2180      	movs	r1, #128	@ 0x80
 8000cda:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <main+0x710>)
 8000cdc:	0209      	lsls	r1, r1, #8
 8000cde:	f001 fea5 	bl	8002a2c <HAL_GPIO_TogglePin>
				time1 = HAL_GetTick();
 8000ce2:	f001 fab3 	bl	800224c <HAL_GetTick>
 8000ce6:	0007      	movs	r7, r0
			if (HAL_GetTick() - time3 >= 350 && limit == TRUE) {
 8000ce8:	f001 fab0 	bl	800224c <HAL_GetTick>
 8000cec:	9b01      	ldr	r3, [sp, #4]
 8000cee:	1ac0      	subs	r0, r0, r3
 8000cf0:	23af      	movs	r3, #175	@ 0xaf
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4298      	cmp	r0, r3
 8000cf6:	d30b      	bcc.n	8000d10 <main+0x6b8>
 8000cf8:	4b29      	ldr	r3, [pc, #164]	@ (8000da0 <main+0x748>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d107      	bne.n	8000d10 <main+0x6b8>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000d00:	2180      	movs	r1, #128	@ 0x80
 8000d02:	4819      	ldr	r0, [pc, #100]	@ (8000d68 <main+0x710>)
 8000d04:	0209      	lsls	r1, r1, #8
 8000d06:	f001 fe91 	bl	8002a2c <HAL_GPIO_TogglePin>
				time3 = HAL_GetTick();
 8000d0a:	f001 fa9f 	bl	800224c <HAL_GetTick>
 8000d0e:	9001      	str	r0, [sp, #4]
		if (commandRecieved) {	// recieved a command from the USB
 8000d10:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc0 <main+0x768>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00f      	beq.n	8000d38 <main+0x6e0>
			if (modifySettingsWithCommand()) {
 8000d18:	f000 fe5e 	bl	80019d8 <modifySettingsWithCommand>
 8000d1c:	2800      	cmp	r0, #0
 8000d1e:	d100      	bne.n	8000d22 <main+0x6ca>
 8000d20:	e07e      	b.n	8000e20 <main+0x7c8>
				uint8_t s[] = "\nOK\n";
 8000d22:	2205      	movs	r2, #5
 8000d24:	4927      	ldr	r1, [pc, #156]	@ (8000dc4 <main+0x76c>)
				uint8_t s[] = "\nWHAT??\n";
 8000d26:	a810      	add	r0, sp, #64	@ 0x40
 8000d28:	f005 fe55 	bl	80069d6 <memcpy>
				serialPrintString(s);
 8000d2c:	a810      	add	r0, sp, #64	@ 0x40
 8000d2e:	f000 fbcb 	bl	80014c8 <serialPrintString>
			commandRecieved = FALSE;
 8000d32:	2200      	movs	r2, #0
 8000d34:	4b22      	ldr	r3, [pc, #136]	@ (8000dc0 <main+0x768>)
 8000d36:	701a      	strb	r2, [r3, #0]
		ccr1 = TIM1->CCR1;
 8000d38:	4923      	ldr	r1, [pc, #140]	@ (8000dc8 <main+0x770>)
 8000d3a:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <main+0x774>)
 8000d3c:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8000d3e:	801a      	strh	r2, [r3, #0]
		ccr2 = TIM1->CCR2;
 8000d40:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <main+0x778>)
 8000d44:	801a      	strh	r2, [r3, #0]
		ccr3 = TIM1->CCR3;
 8000d46:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <main+0x77c>)
 8000d4a:	801a      	strh	r2, [r3, #0]
		if (!cutoff) {	// if the robot is not in cutoff
 8000d4c:	e6c0      	b.n	8000ad0 <main+0x478>
					setServoAngle(S1, getChannelValuePercentage(s1Channel));	// servo 1 attached to channel s1Channel
 8000d4e:	f000 fa31 	bl	80011b4 <getChannelValuePercentage>
 8000d52:	0001      	movs	r1, r0
 8000d54:	e762      	b.n	8000c1c <main+0x5c4>
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	200006b4 	.word	0x200006b4
 8000d5c:	40000400 	.word	0x40000400
 8000d60:	2000066c 	.word	0x2000066c
 8000d64:	20000798 	.word	0x20000798
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	2000054a 	.word	0x2000054a
 8000d70:	20000006 	.word	0x20000006
 8000d74:	20000547 	.word	0x20000547
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	20000624 	.word	0x20000624
 8000d80:	20000007 	.word	0x20000007
 8000d84:	20000011 	.word	0x20000011
 8000d88:	20000010 	.word	0x20000010
 8000d8c:	2000000f 	.word	0x2000000f
 8000d90:	20000543 	.word	0x20000543
 8000d94:	2000054f 	.word	0x2000054f
 8000d98:	20000542 	.word	0x20000542
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000549 	.word	0x20000549
 8000da4:	2000000e 	.word	0x2000000e
 8000da8:	2000000d 	.word	0x2000000d
 8000dac:	2000054c 	.word	0x2000054c
 8000db0:	20000548 	.word	0x20000548
 8000db4:	0000270f 	.word	0x0000270f
 8000db8:	20000005 	.word	0x20000005
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	2000054e 	.word	0x2000054e
 8000dc4:	08007a2c 	.word	0x08007a2c
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	20000540 	.word	0x20000540
 8000dd0:	2000053e 	.word	0x2000053e
 8000dd4:	2000053c 	.word	0x2000053c
			disableMotor(M1);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f000 f97d 	bl	80010d8 <disableMotor>
			disableMotor(M2);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f000 f97a 	bl	80010d8 <disableMotor>
			disableMotor(M3);
 8000de4:	2002      	movs	r0, #2
 8000de6:	f000 f977 	bl	80010d8 <disableMotor>
			setServoAngle(S1, 0);	// servo 1 attached to channel s1Channel
 8000dea:	2100      	movs	r1, #0
 8000dec:	0008      	movs	r0, r1
 8000dee:	f000 fae1 	bl	80013b4 <setServoAngle>
			setServoAngle(S2, 0);
 8000df2:	2100      	movs	r1, #0
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 fadd 	bl	80013b4 <setServoAngle>
			if (HAL_GetTick() - time1 >= 100) {
 8000dfa:	f001 fa27 	bl	800224c <HAL_GetTick>
 8000dfe:	1bc0      	subs	r0, r0, r7
 8000e00:	2863      	cmp	r0, #99	@ 0x63
 8000e02:	d985      	bls.n	8000d10 <main+0x6b8>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	4808      	ldr	r0, [pc, #32]	@ (8000e28 <main+0x7d0>)
 8000e08:	0209      	lsls	r1, r1, #8
 8000e0a:	f001 fe0f 	bl	8002a2c <HAL_GPIO_TogglePin>
				makeSound(mLeft, 100);	// beep while in cutoff mode
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <main+0x7d4>)
 8000e10:	2164      	movs	r1, #100	@ 0x64
 8000e12:	7818      	ldrb	r0, [r3, #0]
 8000e14:	f000 f990 	bl	8001138 <makeSound>
				time1 = HAL_GetTick();
 8000e18:	f001 fa18 	bl	800224c <HAL_GetTick>
 8000e1c:	0007      	movs	r7, r0
 8000e1e:	e777      	b.n	8000d10 <main+0x6b8>
				uint8_t s[] = "\nWHAT??\n";
 8000e20:	2209      	movs	r2, #9
 8000e22:	4903      	ldr	r1, [pc, #12]	@ (8000e30 <main+0x7d8>)
 8000e24:	e77f      	b.n	8000d26 <main+0x6ce>
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	48000800 	.word	0x48000800
 8000e2c:	20000543 	.word	0x20000543
 8000e30:	08007a31 	.word	0x08007a31

08000e34 <map>:
int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	001d      	movs	r5, r3
 8000e38:	ab04      	add	r3, sp, #16
 8000e3a:	2400      	movs	r4, #0
 8000e3c:	5f1c      	ldrsh	r4, [r3, r4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000e3e:	1a43      	subs	r3, r0, r1
 8000e40:	1b60      	subs	r0, r4, r5
 8000e42:	4358      	muls	r0, r3
 8000e44:	1a51      	subs	r1, r2, r1
 8000e46:	f7ff fa19 	bl	800027c <__divsi3>
 8000e4a:	1940      	adds	r0, r0, r5
 8000e4c:	b200      	sxth	r0, r0
}
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}

08000e50 <Error_Handler>:
 8000e50:	b672      	cpsid	i
	while (1) {
 8000e52:	e7fe      	b.n	8000e52 <Error_Handler+0x2>

08000e54 <initMotors>:

extern uint8_t m1Rev;
extern uint8_t m2Rev;
extern uint8_t m3Rev;

void initMotors() {
 8000e54:	b510      	push	{r4, lr}
	initDMApwm();
 8000e56:	f7ff fb31 	bl	80004bc <initDMApwm>
}
 8000e5a:	bd10      	pop	{r4, pc}

08000e5c <getMotorRev>:
	// set the speed of the motors
	setMotorSpeedBidirectional(mLeft, t.speedL);
	setMotorSpeedBidirectional(mRight, t.speedR);
}

uint8_t getMotorRev(uint8_t motorN) {	// return 1 if the motorN is reversed, else 0
 8000e5c:	0003      	movs	r3, r0
	uint8_t isRev = 0;
	switch (motorN) {
 8000e5e:	2801      	cmp	r0, #1
 8000e60:	d007      	beq.n	8000e72 <getMotorRev+0x16>
 8000e62:	2802      	cmp	r0, #2
 8000e64:	d007      	beq.n	8000e76 <getMotorRev+0x1a>
 8000e66:	2000      	movs	r0, #0
 8000e68:	4283      	cmp	r3, r0
 8000e6a:	d101      	bne.n	8000e70 <getMotorRev+0x14>
		case M1:
			isRev = m1Rev;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	@ (8000e7c <getMotorRev+0x20>)
			break;
		case M2:
			isRev = m2Rev;
			break;
		case M3:
			isRev = m3Rev;
 8000e6e:	7818      	ldrb	r0, [r3, #0]
			break;
	}
	return isRev;
}
 8000e70:	4770      	bx	lr
			isRev = m2Rev;
 8000e72:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <getMotorRev+0x24>)
 8000e74:	e7fb      	b.n	8000e6e <getMotorRev+0x12>
			isRev = m3Rev;
 8000e76:	4b03      	ldr	r3, [pc, #12]	@ (8000e84 <getMotorRev+0x28>)
 8000e78:	e7f9      	b.n	8000e6e <getMotorRev+0x12>
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	2000000b 	.word	0x2000000b
 8000e80:	2000000a 	.word	0x2000000a
 8000e84:	20000546 	.word	0x20000546

08000e88 <calculateSpeedWithDeadZoneSingle>:
 *	change the deadzone value according your needs
 */
#define DEADZONE 10
uint8_t calculateSpeedWithDeadZoneSingle(uint8_t speed) {
	uint8_t returnValue = speed;
	if (speed > (50 - DEADZONE) && speed < (50 + DEADZONE)) returnValue = 50;	// central deadzone
 8000e88:	0003      	movs	r3, r0
 8000e8a:	3b29      	subs	r3, #41	@ 0x29
 8000e8c:	2b12      	cmp	r3, #18
 8000e8e:	d904      	bls.n	8000e9a <calculateSpeedWithDeadZoneSingle+0x12>
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8000e90:	2809      	cmp	r0, #9
 8000e92:	d904      	bls.n	8000e9e <calculateSpeedWithDeadZoneSingle+0x16>
	if (speed > 100 - DEADZONE) returnValue = 100;	// upper deadzone
 8000e94:	285a      	cmp	r0, #90	@ 0x5a
 8000e96:	d804      	bhi.n	8000ea2 <calculateSpeedWithDeadZoneSingle+0x1a>
	return returnValue;
}
 8000e98:	4770      	bx	lr
	if (speed > (50 - DEADZONE) && speed < (50 + DEADZONE)) returnValue = 50;	// central deadzone
 8000e9a:	2032      	movs	r0, #50	@ 0x32
 8000e9c:	e7fc      	b.n	8000e98 <calculateSpeedWithDeadZoneSingle+0x10>
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	e7fa      	b.n	8000e98 <calculateSpeedWithDeadZoneSingle+0x10>
	if (speed > 100 - DEADZONE) returnValue = 100;	// upper deadzone
 8000ea2:	2064      	movs	r0, #100	@ 0x64
 8000ea4:	e7f8      	b.n	8000e98 <calculateSpeedWithDeadZoneSingle+0x10>
	...

08000ea8 <setMotorSpeedUnidirectional>:
void setMotorSpeedUnidirectional(uint8_t motorN, int8_t speed) {
 8000ea8:	b570      	push	{r4, r5, r6, lr}
	uint8_t dir = m1Rev;
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <setMotorSpeedUnidirectional+0xf0>)
void setMotorSpeedUnidirectional(uint8_t motorN, int8_t speed) {
 8000eac:	0004      	movs	r4, r0
 8000eae:	000e      	movs	r6, r1
	uint8_t dir = m1Rev;
 8000eb0:	781d      	ldrb	r5, [r3, #0]
	if (speed == 0) {	// brake if speed is 0
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d127      	bne.n	8000f06 <setMotorSpeedUnidirectional+0x5e>
		switch (motorN) {
 8000eb6:	2801      	cmp	r0, #1
 8000eb8:	d011      	beq.n	8000ede <setMotorSpeedUnidirectional+0x36>
 8000eba:	2802      	cmp	r0, #2
 8000ebc:	d019      	beq.n	8000ef2 <setMotorSpeedUnidirectional+0x4a>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	d10c      	bne.n	8000edc <setMotorSpeedUnidirectional+0x34>
				setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE);
 8000ec2:	2264      	movs	r2, #100	@ 0x64
 8000ec4:	2180      	movs	r1, #128	@ 0x80
 8000ec6:	4835      	ldr	r0, [pc, #212]	@ (8000f9c <setMotorSpeedUnidirectional+0xf4>)
 8000ec8:	0209      	lsls	r1, r1, #8
 8000eca:	f7ff fad5 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, MAX_DMA_PWM_VALUE);
 8000ece:	2264      	movs	r2, #100	@ 0x64
 8000ed0:	2180      	movs	r1, #128	@ 0x80
 8000ed2:	0049      	lsls	r1, r1, #1
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 8000ed4:	2090      	movs	r0, #144	@ 0x90
 8000ed6:	05c0      	lsls	r0, r0, #23
 8000ed8:	f7ff face 	bl	8000478 <setDMApwmDuty>
}
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8000ede:	2180      	movs	r1, #128	@ 0x80
 8000ee0:	2264      	movs	r2, #100	@ 0x64
 8000ee2:	482e      	ldr	r0, [pc, #184]	@ (8000f9c <setMotorSpeedUnidirectional+0xf4>)
 8000ee4:	0189      	lsls	r1, r1, #6
 8000ee6:	f7ff fac7 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE);
 8000eea:	2264      	movs	r2, #100	@ 0x64
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE);
 8000eec:	2180      	movs	r1, #128	@ 0x80
 8000eee:	0089      	lsls	r1, r1, #2
 8000ef0:	e7f0      	b.n	8000ed4 <setMotorSpeedUnidirectional+0x2c>
				setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE);
 8000ef2:	2180      	movs	r1, #128	@ 0x80
 8000ef4:	2264      	movs	r2, #100	@ 0x64
 8000ef6:	4829      	ldr	r0, [pc, #164]	@ (8000f9c <setMotorSpeedUnidirectional+0xf4>)
 8000ef8:	0109      	lsls	r1, r1, #4
 8000efa:	f7ff fabd 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 8000efe:	2264      	movs	r2, #100	@ 0x64
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 8000f00:	2180      	movs	r1, #128	@ 0x80
 8000f02:	00c9      	lsls	r1, r1, #3
 8000f04:	e7e6      	b.n	8000ed4 <setMotorSpeedUnidirectional+0x2c>
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000f06:	f7ff ffa9 	bl	8000e5c <getMotorRev>
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d002      	beq.n	8000f14 <setMotorSpeedUnidirectional+0x6c>
 8000f0e:	426b      	negs	r3, r5
 8000f10:	415d      	adcs	r5, r3
 8000f12:	b2ed      	uxtb	r5, r5
	uint8_t sp = calculateSpeedWithDeadZoneSingle(speed);
 8000f14:	b2f0      	uxtb	r0, r6
 8000f16:	f7ff ffb7 	bl	8000e88 <calculateSpeedWithDeadZoneSingle>
	switch (motorN) {
 8000f1a:	2c01      	cmp	r4, #1
 8000f1c:	d011      	beq.n	8000f42 <setMotorSpeedUnidirectional+0x9a>
 8000f1e:	2c02      	cmp	r4, #2
 8000f20:	d024      	beq.n	8000f6c <setMotorSpeedUnidirectional+0xc4>
 8000f22:	2c00      	cmp	r4, #0
 8000f24:	d1da      	bne.n	8000edc <setMotorSpeedUnidirectional+0x34>
				setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f26:	2664      	movs	r6, #100	@ 0x64
 8000f28:	1a30      	subs	r0, r6, r0
 8000f2a:	b284      	uxth	r4, r0
				setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f2c:	0022      	movs	r2, r4
			if (dir == TRUE) {
 8000f2e:	2d01      	cmp	r5, #1
 8000f30:	d1c8      	bne.n	8000ec4 <setMotorSpeedUnidirectional+0x1c>
				setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE);
 8000f32:	2180      	movs	r1, #128	@ 0x80
 8000f34:	0032      	movs	r2, r6
 8000f36:	4819      	ldr	r0, [pc, #100]	@ (8000f9c <setMotorSpeedUnidirectional+0xf4>)
 8000f38:	0209      	lsls	r1, r1, #8
 8000f3a:	f7ff fa9d 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f3e:	0022      	movs	r2, r4
 8000f40:	e7c6      	b.n	8000ed0 <setMotorSpeedUnidirectional+0x28>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f42:	2664      	movs	r6, #100	@ 0x64
 8000f44:	1a30      	subs	r0, r6, r0
 8000f46:	b284      	uxth	r4, r0
			if (dir == TRUE) {
 8000f48:	2d01      	cmp	r5, #1
 8000f4a:	d107      	bne.n	8000f5c <setMotorSpeedUnidirectional+0xb4>
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8000f4c:	2180      	movs	r1, #128	@ 0x80
 8000f4e:	0032      	movs	r2, r6
 8000f50:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <setMotorSpeedUnidirectional+0xf4>)
 8000f52:	0189      	lsls	r1, r1, #6
 8000f54:	f7ff fa90 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f58:	0022      	movs	r2, r4
 8000f5a:	e7c7      	b.n	8000eec <setMotorSpeedUnidirectional+0x44>
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f5c:	2180      	movs	r1, #128	@ 0x80
 8000f5e:	0022      	movs	r2, r4
 8000f60:	480e      	ldr	r0, [pc, #56]	@ (8000f9c <setMotorSpeedUnidirectional+0xf4>)
 8000f62:	0189      	lsls	r1, r1, #6
 8000f64:	f7ff fa88 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE);
 8000f68:	0032      	movs	r2, r6
 8000f6a:	e7bf      	b.n	8000eec <setMotorSpeedUnidirectional+0x44>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f6c:	2664      	movs	r6, #100	@ 0x64
 8000f6e:	1a30      	subs	r0, r6, r0
 8000f70:	b284      	uxth	r4, r0
			if (dir == TRUE) {
 8000f72:	2d01      	cmp	r5, #1
 8000f74:	d107      	bne.n	8000f86 <setMotorSpeedUnidirectional+0xde>
				setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE);
 8000f76:	2180      	movs	r1, #128	@ 0x80
 8000f78:	0032      	movs	r2, r6
 8000f7a:	4808      	ldr	r0, [pc, #32]	@ (8000f9c <setMotorSpeedUnidirectional+0xf4>)
 8000f7c:	0109      	lsls	r1, r1, #4
 8000f7e:	f7ff fa7b 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f82:	0022      	movs	r2, r4
 8000f84:	e7bc      	b.n	8000f00 <setMotorSpeedUnidirectional+0x58>
				setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE - sp);
 8000f86:	2180      	movs	r1, #128	@ 0x80
 8000f88:	0022      	movs	r2, r4
 8000f8a:	4804      	ldr	r0, [pc, #16]	@ (8000f9c <setMotorSpeedUnidirectional+0xf4>)
 8000f8c:	0109      	lsls	r1, r1, #4
 8000f8e:	f7ff fa73 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 8000f92:	0032      	movs	r2, r6
 8000f94:	e7b4      	b.n	8000f00 <setMotorSpeedUnidirectional+0x58>
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	2000000b 	.word	0x2000000b
 8000f9c:	48000400 	.word	0x48000400

08000fa0 <calculateSpeedWithDeadZoneDouble>:
 *  max -3, min +3
 *	change the deadzone value according your needs
 */
uint8_t calculateSpeedWithDeadZoneDouble(uint8_t speed) {
	uint8_t returnValue = speed;
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8000fa0:	2809      	cmp	r0, #9
 8000fa2:	d903      	bls.n	8000fac <calculateSpeedWithDeadZoneDouble+0xc>
	if (speed > 100 - DEADZONE) returnValue = 100;	// upper deadzone
 8000fa4:	285a      	cmp	r0, #90	@ 0x5a
 8000fa6:	d900      	bls.n	8000faa <calculateSpeedWithDeadZoneDouble+0xa>
 8000fa8:	2064      	movs	r0, #100	@ 0x64
	return returnValue;
}
 8000faa:	4770      	bx	lr
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8000fac:	2000      	movs	r0, #0
 8000fae:	e7fc      	b.n	8000faa <calculateSpeedWithDeadZoneDouble+0xa>

08000fb0 <setMotorSpeedBidirectional>:
void setMotorSpeedBidirectional(uint8_t motorN, int8_t speed) {
 8000fb0:	b570      	push	{r4, r5, r6, lr}
 8000fb2:	0005      	movs	r5, r0
	speed = calculateSpeedWithDeadZoneDouble(speed);
 8000fb4:	b2c8      	uxtb	r0, r1
 8000fb6:	f7ff fff3 	bl	8000fa0 <calculateSpeedWithDeadZoneDouble>
	speed = (speed - MAX_SPEED_VALUE / 2) * 2;
 8000fba:	b244      	sxtb	r4, r0
 8000fbc:	3c32      	subs	r4, #50	@ 0x32
 8000fbe:	0064      	lsls	r4, r4, #1
 8000fc0:	b264      	sxtb	r4, r4
	if (speed == 0) { // brake if speed is 0
 8000fc2:	2c00      	cmp	r4, #0
 8000fc4:	d127      	bne.n	8001016 <setMotorSpeedBidirectional+0x66>
		switch (motorN) {
 8000fc6:	2d01      	cmp	r5, #1
 8000fc8:	d011      	beq.n	8000fee <setMotorSpeedBidirectional+0x3e>
 8000fca:	2d02      	cmp	r5, #2
 8000fcc:	d019      	beq.n	8001002 <setMotorSpeedBidirectional+0x52>
 8000fce:	2d00      	cmp	r5, #0
 8000fd0:	d10c      	bne.n	8000fec <setMotorSpeedBidirectional+0x3c>
				setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE);
 8000fd2:	2264      	movs	r2, #100	@ 0x64
 8000fd4:	2180      	movs	r1, #128	@ 0x80
 8000fd6:	4835      	ldr	r0, [pc, #212]	@ (80010ac <setMotorSpeedBidirectional+0xfc>)
 8000fd8:	0209      	lsls	r1, r1, #8
 8000fda:	f7ff fa4d 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, MAX_DMA_PWM_VALUE);
 8000fde:	2264      	movs	r2, #100	@ 0x64
 8000fe0:	2180      	movs	r1, #128	@ 0x80
 8000fe2:	0049      	lsls	r1, r1, #1
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 8000fe4:	2090      	movs	r0, #144	@ 0x90
 8000fe6:	05c0      	lsls	r0, r0, #23
 8000fe8:	f7ff fa46 	bl	8000478 <setDMApwmDuty>
}
 8000fec:	bd70      	pop	{r4, r5, r6, pc}
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8000fee:	2180      	movs	r1, #128	@ 0x80
 8000ff0:	2264      	movs	r2, #100	@ 0x64
 8000ff2:	482e      	ldr	r0, [pc, #184]	@ (80010ac <setMotorSpeedBidirectional+0xfc>)
 8000ff4:	0189      	lsls	r1, r1, #6
 8000ff6:	f7ff fa3f 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE);
 8000ffa:	2264      	movs	r2, #100	@ 0x64
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE);
 8000ffc:	2180      	movs	r1, #128	@ 0x80
 8000ffe:	0089      	lsls	r1, r1, #2
 8001000:	e7f0      	b.n	8000fe4 <setMotorSpeedBidirectional+0x34>
				setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE);
 8001002:	2180      	movs	r1, #128	@ 0x80
 8001004:	2264      	movs	r2, #100	@ 0x64
 8001006:	4829      	ldr	r0, [pc, #164]	@ (80010ac <setMotorSpeedBidirectional+0xfc>)
 8001008:	0109      	lsls	r1, r1, #4
 800100a:	f7ff fa35 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 800100e:	2264      	movs	r2, #100	@ 0x64
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 8001010:	2180      	movs	r1, #128	@ 0x80
 8001012:	00c9      	lsls	r1, r1, #3
 8001014:	e7e6      	b.n	8000fe4 <setMotorSpeedBidirectional+0x34>
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8001016:	0028      	movs	r0, r5
 8001018:	f7ff ff20 	bl	8000e5c <getMotorRev>
 800101c:	0fe3      	lsrs	r3, r4, #31
 800101e:	2800      	cmp	r0, #0
 8001020:	d101      	bne.n	8001026 <setMotorSpeedBidirectional+0x76>
	if (speed >= 0)
 8001022:	43e3      	mvns	r3, r4
 8001024:	0fdb      	lsrs	r3, r3, #31
	uint8_t sp = abs(speed);
 8001026:	17e2      	asrs	r2, r4, #31
 8001028:	18a4      	adds	r4, r4, r2
 800102a:	4054      	eors	r4, r2
 800102c:	b2e4      	uxtb	r4, r4
	switch (motorN) {
 800102e:	2d01      	cmp	r5, #1
 8001030:	d011      	beq.n	8001056 <setMotorSpeedBidirectional+0xa6>
 8001032:	2d02      	cmp	r5, #2
 8001034:	d024      	beq.n	8001080 <setMotorSpeedBidirectional+0xd0>
 8001036:	2d00      	cmp	r5, #0
 8001038:	d1d8      	bne.n	8000fec <setMotorSpeedBidirectional+0x3c>
				setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, MAX_DMA_PWM_VALUE - sp);
 800103a:	3564      	adds	r5, #100	@ 0x64
 800103c:	1b2c      	subs	r4, r5, r4
 800103e:	b2a4      	uxth	r4, r4
				setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE - sp);
 8001040:	0022      	movs	r2, r4
			if (dir == TRUE) {
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0c6      	beq.n	8000fd4 <setMotorSpeedBidirectional+0x24>
				setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE);
 8001046:	2180      	movs	r1, #128	@ 0x80
 8001048:	002a      	movs	r2, r5
 800104a:	4818      	ldr	r0, [pc, #96]	@ (80010ac <setMotorSpeedBidirectional+0xfc>)
 800104c:	0209      	lsls	r1, r1, #8
 800104e:	f7ff fa13 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8001052:	0022      	movs	r2, r4
 8001054:	e7c4      	b.n	8000fe0 <setMotorSpeedBidirectional+0x30>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8001056:	2564      	movs	r5, #100	@ 0x64
 8001058:	1b2c      	subs	r4, r5, r4
 800105a:	b2a4      	uxth	r4, r4
			if (dir == TRUE) {
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <setMotorSpeedBidirectional+0xc0>
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8001060:	2180      	movs	r1, #128	@ 0x80
 8001062:	002a      	movs	r2, r5
 8001064:	4811      	ldr	r0, [pc, #68]	@ (80010ac <setMotorSpeedBidirectional+0xfc>)
 8001066:	0189      	lsls	r1, r1, #6
 8001068:	f7ff fa06 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE - sp);
 800106c:	0022      	movs	r2, r4
 800106e:	e7c5      	b.n	8000ffc <setMotorSpeedBidirectional+0x4c>
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE - sp);
 8001070:	2180      	movs	r1, #128	@ 0x80
 8001072:	0022      	movs	r2, r4
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <setMotorSpeedBidirectional+0xfc>)
 8001076:	0189      	lsls	r1, r1, #6
 8001078:	f7ff f9fe 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE);
 800107c:	002a      	movs	r2, r5
 800107e:	e7bd      	b.n	8000ffc <setMotorSpeedBidirectional+0x4c>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8001080:	2564      	movs	r5, #100	@ 0x64
 8001082:	1b2c      	subs	r4, r5, r4
 8001084:	b2a4      	uxth	r4, r4
			if (dir == TRUE) {
 8001086:	2b00      	cmp	r3, #0
 8001088:	d007      	beq.n	800109a <setMotorSpeedBidirectional+0xea>
				setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE);
 800108a:	2180      	movs	r1, #128	@ 0x80
 800108c:	002a      	movs	r2, r5
 800108e:	4807      	ldr	r0, [pc, #28]	@ (80010ac <setMotorSpeedBidirectional+0xfc>)
 8001090:	0109      	lsls	r1, r1, #4
 8001092:	f7ff f9f1 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8001096:	0022      	movs	r2, r4
 8001098:	e7ba      	b.n	8001010 <setMotorSpeedBidirectional+0x60>
				setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE - sp);
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	0022      	movs	r2, r4
 800109e:	4803      	ldr	r0, [pc, #12]	@ (80010ac <setMotorSpeedBidirectional+0xfc>)
 80010a0:	0109      	lsls	r1, r1, #4
 80010a2:	f7ff f9e9 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE);
 80010a6:	002a      	movs	r2, r5
 80010a8:	e7b2      	b.n	8001010 <setMotorSpeedBidirectional+0x60>
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	48000400 	.word	0x48000400

080010b0 <setTankMotor>:
void setTankMotor(TankMotors t) {
 80010b0:	b513      	push	{r0, r1, r4, lr}
	setMotorSpeedBidirectional(mLeft, t.speedL);
 80010b2:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <setTankMotor+0x20>)
void setTankMotor(TankMotors t) {
 80010b4:	ac01      	add	r4, sp, #4
 80010b6:	8020      	strh	r0, [r4, #0]
	setMotorSpeedBidirectional(mLeft, t.speedL);
 80010b8:	b241      	sxtb	r1, r0
 80010ba:	7818      	ldrb	r0, [r3, #0]
 80010bc:	f7ff ff78 	bl	8000fb0 <setMotorSpeedBidirectional>
	setMotorSpeedBidirectional(mRight, t.speedR);
 80010c0:	2101      	movs	r1, #1
 80010c2:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <setTankMotor+0x24>)
 80010c4:	5661      	ldrsb	r1, [r4, r1]
 80010c6:	7818      	ldrb	r0, [r3, #0]
 80010c8:	f7ff ff72 	bl	8000fb0 <setMotorSpeedBidirectional>
}
 80010cc:	bd13      	pop	{r0, r1, r4, pc}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	20000543 	.word	0x20000543
 80010d4:	20000009 	.word	0x20000009

080010d8 <disableMotor>:
		}
	}
	disableMotor(motorN);
}

void disableMotor(uint8_t motorN) {
 80010d8:	0002      	movs	r2, r0
 80010da:	b510      	push	{r4, lr}
	switch (motorN) {
 80010dc:	2801      	cmp	r0, #1
 80010de:	d009      	beq.n	80010f4 <disableMotor+0x1c>
 80010e0:	2802      	cmp	r0, #2
 80010e2:	d00b      	beq.n	80010fc <disableMotor+0x24>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d104      	bne.n	80010f2 <disableMotor+0x1a>
		case M1:
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, FALSE);
 80010e8:	2180      	movs	r1, #128	@ 0x80
 80010ea:	01c9      	lsls	r1, r1, #7
			break;
		case M2:
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
			break;
		case M3:
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 80010ec:	4805      	ldr	r0, [pc, #20]	@ (8001104 <disableMotor+0x2c>)
 80010ee:	f001 fc97 	bl	8002a20 <HAL_GPIO_WritePin>
			break;
	}
}
 80010f2:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
 80010f4:	2180      	movs	r1, #128	@ 0x80
 80010f6:	2200      	movs	r2, #0
 80010f8:	0149      	lsls	r1, r1, #5
 80010fa:	e7f7      	b.n	80010ec <disableMotor+0x14>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 80010fc:	2180      	movs	r1, #128	@ 0x80
 80010fe:	2200      	movs	r2, #0
 8001100:	00c9      	lsls	r1, r1, #3
 8001102:	e7f3      	b.n	80010ec <disableMotor+0x14>
 8001104:	48000400 	.word	0x48000400

08001108 <enableMotor>:

void enableMotor(uint8_t motorN) {
 8001108:	0002      	movs	r2, r0
 800110a:	b510      	push	{r4, lr}
	switch (motorN) {
 800110c:	2801      	cmp	r0, #1
 800110e:	d00a      	beq.n	8001126 <enableMotor+0x1e>
 8001110:	2802      	cmp	r0, #2
 8001112:	d00b      	beq.n	800112c <enableMotor+0x24>
 8001114:	2800      	cmp	r0, #0
 8001116:	d105      	bne.n	8001124 <enableMotor+0x1c>
		case M1:
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	3201      	adds	r2, #1
 800111c:	01c9      	lsls	r1, r1, #7
			break;
		case M2:
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
			break;
		case M3:
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <enableMotor+0x2c>)
 8001120:	f001 fc7e 	bl	8002a20 <HAL_GPIO_WritePin>
			break;
	}
}
 8001124:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
 8001126:	2180      	movs	r1, #128	@ 0x80
 8001128:	0149      	lsls	r1, r1, #5
 800112a:	e7f8      	b.n	800111e <enableMotor+0x16>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 800112c:	2180      	movs	r1, #128	@ 0x80
 800112e:	2201      	movs	r2, #1
 8001130:	00c9      	lsls	r1, r1, #3
 8001132:	e7f4      	b.n	800111e <enableMotor+0x16>
 8001134:	48000400 	.word	0x48000400

08001138 <makeSound>:
void makeSound(uint8_t motorN, uint8_t duration) {
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	0004      	movs	r4, r0
 800113c:	000e      	movs	r6, r1
	uint32_t time = HAL_GetTick();
 800113e:	f001 f885 	bl	800224c <HAL_GetTick>
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8001142:	2780      	movs	r7, #128	@ 0x80
	uint32_t time = HAL_GetTick();
 8001144:	0005      	movs	r5, r0
	enableMotor(motorN);
 8001146:	0020      	movs	r0, r4
 8001148:	f7ff ffde 	bl	8001108 <enableMotor>
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 800114c:	01bf      	lsls	r7, r7, #6
	while (HAL_GetTick() <= time + duration) {
 800114e:	f001 f87d 	bl	800224c <HAL_GetTick>
 8001152:	1973      	adds	r3, r6, r5
 8001154:	4298      	cmp	r0, r3
 8001156:	d903      	bls.n	8001160 <makeSound+0x28>
	disableMotor(motorN);
 8001158:	0020      	movs	r0, r4
 800115a:	f7ff ffbd 	bl	80010d8 <disableMotor>
}
 800115e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (motorN) {
 8001160:	2c01      	cmp	r4, #1
 8001162:	d011      	beq.n	8001188 <makeSound+0x50>
 8001164:	2c02      	cmp	r4, #2
 8001166:	d018      	beq.n	800119a <makeSound+0x62>
 8001168:	2c00      	cmp	r4, #0
 800116a:	d1f0      	bne.n	800114e <makeSound+0x16>
				setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE);
 800116c:	2180      	movs	r1, #128	@ 0x80
 800116e:	2264      	movs	r2, #100	@ 0x64
 8001170:	0209      	lsls	r1, r1, #8
 8001172:	480f      	ldr	r0, [pc, #60]	@ (80011b0 <makeSound+0x78>)
 8001174:	f7ff f980 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8001178:	2180      	movs	r1, #128	@ 0x80
 800117a:	2262      	movs	r2, #98	@ 0x62
 800117c:	0049      	lsls	r1, r1, #1
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE - sp);
 800117e:	2090      	movs	r0, #144	@ 0x90
 8001180:	05c0      	lsls	r0, r0, #23
 8001182:	f7ff f979 	bl	8000478 <setDMApwmDuty>
				break;
 8001186:	e7e2      	b.n	800114e <makeSound+0x16>
				setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8001188:	2264      	movs	r2, #100	@ 0x64
 800118a:	0039      	movs	r1, r7
 800118c:	4808      	ldr	r0, [pc, #32]	@ (80011b0 <makeSound+0x78>)
 800118e:	f7ff f973 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, MAX_DMA_PWM_VALUE - sp);
 8001192:	2180      	movs	r1, #128	@ 0x80
 8001194:	2262      	movs	r2, #98	@ 0x62
 8001196:	0089      	lsls	r1, r1, #2
 8001198:	e7f1      	b.n	800117e <makeSound+0x46>
				setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE);
 800119a:	2180      	movs	r1, #128	@ 0x80
 800119c:	2264      	movs	r2, #100	@ 0x64
 800119e:	0109      	lsls	r1, r1, #4
 80011a0:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <makeSound+0x78>)
 80011a2:	f7ff f969 	bl	8000478 <setDMApwmDuty>
				setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, MAX_DMA_PWM_VALUE - sp);
 80011a6:	2180      	movs	r1, #128	@ 0x80
 80011a8:	2262      	movs	r2, #98	@ 0x62
 80011aa:	00c9      	lsls	r1, r1, #3
 80011ac:	e7e7      	b.n	800117e <makeSound+0x46>
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	48000400 	.word	0x48000400

080011b4 <getChannelValuePercentage>:
//		}
//	}
//}

uint8_t getChannelValuePercentage(uint8_t channelNumber) {
	int temp = (reciever_channels[channelNumber] - 1000) / 10;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <getChannelValuePercentage+0x28>)
 80011b6:	0040      	lsls	r0, r0, #1
 80011b8:	5ac3      	ldrh	r3, [r0, r3]
	if (temp > 100) temp = 100;
 80011ba:	4a09      	ldr	r2, [pc, #36]	@ (80011e0 <getChannelValuePercentage+0x2c>)
 80011bc:	2064      	movs	r0, #100	@ 0x64
uint8_t getChannelValuePercentage(uint8_t channelNumber) {
 80011be:	b510      	push	{r4, lr}
	if (temp > 100) temp = 100;
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d808      	bhi.n	80011d6 <getChannelValuePercentage+0x22>
	if (temp < 0) temp = 0;
 80011c4:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <getChannelValuePercentage+0x30>)
 80011c6:	2000      	movs	r0, #0
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d904      	bls.n	80011d6 <getChannelValuePercentage+0x22>
	int temp = (reciever_channels[channelNumber] - 1000) / 10;
 80011cc:	4a06      	ldr	r2, [pc, #24]	@ (80011e8 <getChannelValuePercentage+0x34>)
 80011ce:	210a      	movs	r1, #10
 80011d0:	1898      	adds	r0, r3, r2
 80011d2:	f7ff f853 	bl	800027c <__divsi3>
	return temp;
 80011d6:	b2c0      	uxtb	r0, r0
}
 80011d8:	bd10      	pop	{r4, pc}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	200007da 	.word	0x200007da
 80011e0:	000007d9 	.word	0x000007d9
 80011e4:	000003de 	.word	0x000003de
 80011e8:	fffffc18 	.word	0xfffffc18

080011ec <initReciever>:

//void initRecieverPPM(TIM_HandleTypeDef *htim) {
//	HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_3);
//}

void initReciever(TIM_HandleTypeDef *htim) {
 80011ec:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(htim);
 80011ee:	f003 fa2d 	bl	800464c <HAL_TIM_Base_Start>
}
 80011f2:	bd10      	pop	{r4, pc}

080011f4 <HAL_GPIO_EXTI_Callback>:

uint8_t aligned = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (recieverIsPWM) {
 80011f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001320 <HAL_GPIO_EXTI_Callback+0x12c>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011f6:	b570      	push	{r4, r5, r6, lr}
	if (recieverIsPWM) {
 80011f8:	681b      	ldr	r3, [r3, #0]
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011fa:	0004      	movs	r4, r0
	if (recieverIsPWM) {
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d100      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0xe>
 8001200:	e069      	b.n	80012d6 <HAL_GPIO_EXTI_Callback+0xe2>
		// channel 1
		if (GPIO_Pin == CH1_Pin) {
 8001202:	4d48      	ldr	r5, [pc, #288]	@ (8001324 <HAL_GPIO_EXTI_Callback+0x130>)
 8001204:	2801      	cmp	r0, #1
 8001206:	d10f      	bne.n	8001228 <HAL_GPIO_EXTI_Callback+0x34>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 1) {	// rising edge
 8001208:	0001      	movs	r1, r0
 800120a:	4847      	ldr	r0, [pc, #284]	@ (8001328 <HAL_GPIO_EXTI_Callback+0x134>)
 800120c:	f001 fc02 	bl	8002a14 <HAL_GPIO_ReadPin>
 8001210:	4b46      	ldr	r3, [pc, #280]	@ (800132c <HAL_GPIO_EXTI_Callback+0x138>)
 8001212:	2801      	cmp	r0, #1
 8001214:	d116      	bne.n	8001244 <HAL_GPIO_EXTI_Callback+0x50>
				aligned = 0;
 8001216:	2200      	movs	r2, #0
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001218:	681b      	ldr	r3, [r3, #0]
				aligned = HAL_GPIO_ReadPin(CH2_GPIO_Port, CH2_Pin);	// if the second channel are high means that all the channels are aligned
 800121a:	2102      	movs	r1, #2
 800121c:	4842      	ldr	r0, [pc, #264]	@ (8001328 <HAL_GPIO_EXTI_Callback+0x134>)
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 800121e:	625a      	str	r2, [r3, #36]	@ 0x24
				aligned = 0;
 8001220:	702a      	strb	r2, [r5, #0]
				aligned = HAL_GPIO_ReadPin(CH2_GPIO_Port, CH2_Pin);	// if the second channel are high means that all the channels are aligned
 8001222:	f001 fbf7 	bl	8002a14 <HAL_GPIO_ReadPin>
 8001226:	7028      	strb	r0, [r5, #0]
			} else {	// falling edge
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[1] = usWidth;
			}
		}
		if (aligned) {
 8001228:	782b      	ldrb	r3, [r5, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d028      	beq.n	8001280 <HAL_GPIO_EXTI_Callback+0x8c>
			// channel 2 (only falling, because it starts with ch1)
			if (GPIO_Pin == CH2_Pin) {
 800122e:	2c02      	cmp	r4, #2
 8001230:	d110      	bne.n	8001254 <HAL_GPIO_EXTI_Callback+0x60>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001232:	4b3e      	ldr	r3, [pc, #248]	@ (800132c <HAL_GPIO_EXTI_Callback+0x138>)
 8001234:	4a3e      	ldr	r2, [pc, #248]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123a:	b29b      	uxth	r3, r3
 800123c:	8013      	strh	r3, [r2, #0]
				reciever_channels[2] = usWidth;
 800123e:	4a3d      	ldr	r2, [pc, #244]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x140>)
			}
		} else {	// not aligned, subtract channel 1 time from ch2 time etc.
			// channel 2 (only falling, because it starts after ch1)
			if (GPIO_Pin == CH2_Pin) {
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[2] = usWidth - (reciever_channels[1]);
 8001240:	8093      	strh	r3, [r2, #4]
			if (GPIO_Pin == CH3_Pin) {
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[3] = usWidth - (reciever_channels[1] + reciever_channels[2]);
			}
			// channel 4 (only falling, because it starts after ch3)
			if (GPIO_Pin == CH4_Pin) {
 8001242:	e01c      	b.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a3a      	ldr	r2, [pc, #232]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124a:	b29b      	uxth	r3, r3
 800124c:	8013      	strh	r3, [r2, #0]
				reciever_channels[1] = usWidth;
 800124e:	4a39      	ldr	r2, [pc, #228]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x140>)
 8001250:	8053      	strh	r3, [r2, #2]
 8001252:	e7e9      	b.n	8001228 <HAL_GPIO_EXTI_Callback+0x34>
			if (GPIO_Pin == CH3_Pin) {
 8001254:	2c04      	cmp	r4, #4
 8001256:	d108      	bne.n	800126a <HAL_GPIO_EXTI_Callback+0x76>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001258:	4b34      	ldr	r3, [pc, #208]	@ (800132c <HAL_GPIO_EXTI_Callback+0x138>)
 800125a:	4a35      	ldr	r2, [pc, #212]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x13c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001260:	b29b      	uxth	r3, r3
 8001262:	8013      	strh	r3, [r2, #0]
				reciever_channels[3] = usWidth;
 8001264:	4a33      	ldr	r2, [pc, #204]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x140>)
				reciever_channels[3] = usWidth - (reciever_channels[1] + reciever_channels[2]);
 8001266:	80d3      	strh	r3, [r2, #6]
			if (GPIO_Pin == CH4_Pin) {
 8001268:	e009      	b.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
			if (GPIO_Pin == CH4_Pin) {
 800126a:	2c08      	cmp	r4, #8
 800126c:	d107      	bne.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 800126e:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <HAL_GPIO_EXTI_Callback+0x138>)
 8001270:	4a2f      	ldr	r2, [pc, #188]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	b29b      	uxth	r3, r3
 8001278:	8013      	strh	r3, [r2, #0]
				reciever_channels[4] = usWidth;
 800127a:	4a2e      	ldr	r2, [pc, #184]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x140>)
 800127c:	8113      	strh	r3, [r2, #8]
					}
				}
			}
		}
	}
}
 800127e:	bd70      	pop	{r4, r5, r6, pc}
			if (GPIO_Pin == CH2_Pin) {
 8001280:	2c02      	cmp	r4, #2
 8001282:	d109      	bne.n	8001298 <HAL_GPIO_EXTI_Callback+0xa4>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <HAL_GPIO_EXTI_Callback+0x138>)
 8001286:	4a2a      	ldr	r2, [pc, #168]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128c:	b29b      	uxth	r3, r3
 800128e:	8013      	strh	r3, [r2, #0]
				reciever_channels[2] = usWidth - (reciever_channels[1]);
 8001290:	4a28      	ldr	r2, [pc, #160]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x140>)
 8001292:	8851      	ldrh	r1, [r2, #2]
 8001294:	1a5b      	subs	r3, r3, r1
 8001296:	e7d3      	b.n	8001240 <HAL_GPIO_EXTI_Callback+0x4c>
			if (GPIO_Pin == CH3_Pin) {
 8001298:	2c04      	cmp	r4, #4
 800129a:	d10b      	bne.n	80012b4 <HAL_GPIO_EXTI_Callback+0xc0>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 800129c:	4b23      	ldr	r3, [pc, #140]	@ (800132c <HAL_GPIO_EXTI_Callback+0x138>)
 800129e:	4a24      	ldr	r2, [pc, #144]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x13c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	8013      	strh	r3, [r2, #0]
				reciever_channels[3] = usWidth - (reciever_channels[1] + reciever_channels[2]);
 80012a8:	4a22      	ldr	r2, [pc, #136]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x140>)
 80012aa:	8851      	ldrh	r1, [r2, #2]
 80012ac:	8890      	ldrh	r0, [r2, #4]
 80012ae:	1809      	adds	r1, r1, r0
 80012b0:	1a5b      	subs	r3, r3, r1
 80012b2:	e7d8      	b.n	8001266 <HAL_GPIO_EXTI_Callback+0x72>
			if (GPIO_Pin == CH4_Pin) {
 80012b4:	2c08      	cmp	r4, #8
 80012b6:	d1e2      	bne.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_GPIO_EXTI_Callback+0x138>)
 80012ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x13c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
				reciever_channels[4] = usWidth - (reciever_channels[1] + reciever_channels[2] + reciever_channels[3]);
 80012be:	491d      	ldr	r1, [pc, #116]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x140>)
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	8013      	strh	r3, [r2, #0]
				reciever_channels[4] = usWidth - (reciever_channels[1] + reciever_channels[2] + reciever_channels[3]);
 80012c6:	8888      	ldrh	r0, [r1, #4]
 80012c8:	884a      	ldrh	r2, [r1, #2]
 80012ca:	1812      	adds	r2, r2, r0
 80012cc:	88c8      	ldrh	r0, [r1, #6]
 80012ce:	1812      	adds	r2, r2, r0
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	810b      	strh	r3, [r1, #8]
 80012d4:	e7d3      	b.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
		if (GPIO_Pin == CH1_Pin) {
 80012d6:	2801      	cmp	r0, #1
 80012d8:	d1d1      	bne.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 0) {
 80012da:	0001      	movs	r1, r0
 80012dc:	4812      	ldr	r0, [pc, #72]	@ (8001328 <HAL_GPIO_EXTI_Callback+0x134>)
 80012de:	f001 fb99 	bl	8002a14 <HAL_GPIO_ReadPin>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d1cb      	bne.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80012e6:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_GPIO_EXTI_Callback+0x138>)
 80012e8:	4911      	ldr	r1, [pc, #68]	@ (8001330 <HAL_GPIO_EXTI_Callback+0x13c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
				__HAL_TIM_SET_COUNTER(&htim6, 0);  // reset the counter
 80012ee:	6258      	str	r0, [r3, #36]	@ 0x24
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_GPIO_EXTI_Callback+0x144>)
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80012f2:	b292      	uxth	r2, r2
 80012f4:	800a      	strh	r2, [r1, #0]
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 80012f6:	4911      	ldr	r1, [pc, #68]	@ (800133c <HAL_GPIO_EXTI_Callback+0x148>)
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d903      	bls.n	8001304 <HAL_GPIO_EXTI_Callback+0x110>
					reciever_channels[0] = usWidth;	// store the separation pulse width
 80012fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x140>)
					channelToRead = 1;	// next channel is ch1
 80012fe:	700c      	strb	r4, [r1, #0]
					reciever_channels[0] = usWidth;	// store the separation pulse width
 8001300:	801a      	strh	r2, [r3, #0]
					channelToRead = 1;	// next channel is ch1
 8001302:	e7bc      	b.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
					if (channelToRead != 0) {
 8001304:	780b      	ldrb	r3, [r1, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0b9      	beq.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 800130a:	005d      	lsls	r5, r3, #1
 800130c:	4c09      	ldr	r4, [pc, #36]	@ (8001334 <HAL_GPIO_EXTI_Callback+0x140>)
						channelToRead++;
 800130e:	3301      	adds	r3, #1
 8001310:	b2db      	uxtb	r3, r3
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 8001312:	532a      	strh	r2, [r5, r4]
						if (channelToRead > NUMBER_OF_PPM_CHANNEL) {
 8001314:	2b08      	cmp	r3, #8
 8001316:	d801      	bhi.n	800131c <HAL_GPIO_EXTI_Callback+0x128>
						channelToRead++;
 8001318:	700b      	strb	r3, [r1, #0]
 800131a:	e7b0      	b.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
							channelToRead = 0;
 800131c:	7008      	strb	r0, [r1, #0]
}
 800131e:	e7ae      	b.n	800127e <HAL_GPIO_EXTI_Callback+0x8a>
 8001320:	20000000 	.word	0x20000000
 8001324:	200007d8 	.word	0x200007d8
 8001328:	48000400 	.word	0x48000400
 800132c:	2000066c 	.word	0x2000066c
 8001330:	200007ec 	.word	0x200007ec
 8001334:	200007da 	.word	0x200007da
 8001338:	00001194 	.word	0x00001194
 800133c:	20000012 	.word	0x20000012

08001340 <tankMix>:

TankMotors tankMix(uint8_t STchannel, uint8_t THchannel) {
 8001340:	b513      	push	{r0, r1, r4, lr}
	TankMotors t;
	int8_t st = (STchannel - 50) * 2;
	int8_t th = (THchannel - 50) * 2;
 8001342:	3932      	subs	r1, #50	@ 0x32
	int8_t st = (STchannel - 50) * 2;
 8001344:	3832      	subs	r0, #50	@ 0x32
	int8_t th = (THchannel - 50) * 2;
 8001346:	004b      	lsls	r3, r1, #1
	int8_t st = (STchannel - 50) * 2;
 8001348:	0040      	lsls	r0, r0, #1
	int16_t ml = th + st;	// mixing
 800134a:	b25b      	sxtb	r3, r3
 800134c:	b240      	sxtb	r0, r0
 800134e:	181c      	adds	r4, r3, r0
	if (ml < -100) ml = -100;
	if (mr > 100) mr = 100;
	if (mr < -100) mr = -100;
	t.speedL = (ml + 100) / 2;	// keep value inside 0 and 100
	t.speedR = (mr + 100) / 2;
	return t;
 8001350:	a901      	add	r1, sp, #4
	if (ml < -100) ml = -100;
 8001352:	1c22      	adds	r2, r4, #0
 8001354:	3464      	adds	r4, #100	@ 0x64
 8001356:	da01      	bge.n	800135c <tankMix+0x1c>
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <tankMix+0x50>)
 800135a:	8812      	ldrh	r2, [r2, #0]
	t.speedL = (ml + 100) / 2;	// keep value inside 0 and 100
 800135c:	b214      	sxth	r4, r2
 800135e:	2c64      	cmp	r4, #100	@ 0x64
 8001360:	dd00      	ble.n	8001364 <tankMix+0x24>
 8001362:	2264      	movs	r2, #100	@ 0x64
 8001364:	3264      	adds	r2, #100	@ 0x64
 8001366:	b212      	sxth	r2, r2
 8001368:	1052      	asrs	r2, r2, #1
	int16_t mr = th - st;	// mixing
 800136a:	1a1b      	subs	r3, r3, r0
	return t;
 800136c:	700a      	strb	r2, [r1, #0]
	if (mr < -100) mr = -100;
 800136e:	1c18      	adds	r0, r3, #0
 8001370:	3364      	adds	r3, #100	@ 0x64
 8001372:	da01      	bge.n	8001378 <tankMix+0x38>
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <tankMix+0x50>)
 8001376:	8818      	ldrh	r0, [r3, #0]
	t.speedR = (mr + 100) / 2;
 8001378:	b203      	sxth	r3, r0
 800137a:	2b64      	cmp	r3, #100	@ 0x64
 800137c:	dd00      	ble.n	8001380 <tankMix+0x40>
 800137e:	2064      	movs	r0, #100	@ 0x64
 8001380:	3064      	adds	r0, #100	@ 0x64
 8001382:	05c3      	lsls	r3, r0, #23
	return t;
 8001384:	0e1b      	lsrs	r3, r3, #24
 8001386:	7808      	ldrb	r0, [r1, #0]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	4318      	orrs	r0, r3
}
 800138c:	bd16      	pop	{r1, r2, r4, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	08007a3a 	.word	0x08007a3a

08001394 <getServoRev>:
extern uint8_t s1Rev;
extern uint8_t s2Rev;

uint8_t getServoRev(uint8_t servoN) {	// return 1 if the motorN is reversed, else 0
	uint8_t isRev = 0;
	switch (servoN) {
 8001394:	2800      	cmp	r0, #0
 8001396:	d003      	beq.n	80013a0 <getServoRev+0xc>
 8001398:	2801      	cmp	r0, #1
 800139a:	d004      	beq.n	80013a6 <getServoRev+0x12>
 800139c:	2000      	movs	r0, #0
		case S2:
			isRev = s2Rev;
			break;
	}
	return isRev;
}
 800139e:	4770      	bx	lr
			isRev = s1Rev;
 80013a0:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <getServoRev+0x18>)
			isRev = s2Rev;
 80013a2:	7818      	ldrb	r0, [r3, #0]
			break;
 80013a4:	e7fb      	b.n	800139e <getServoRev+0xa>
			isRev = s2Rev;
 80013a6:	4b02      	ldr	r3, [pc, #8]	@ (80013b0 <getServoRev+0x1c>)
 80013a8:	e7fb      	b.n	80013a2 <getServoRev+0xe>
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	20000545 	.word	0x20000545
 80013b0:	20000544 	.word	0x20000544

080013b4 <setServoAngle>:
 * P(us) = P * 1'000'000
 * factor = 10000/P(us)
 * if factor < 1 divide by the new factor
 * new factor = 1/factor
 */
void setServoAngle(uint8_t servoN, uint8_t percentage) {
 80013b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80013b6:	0005      	movs	r5, r0
 80013b8:	0008      	movs	r0, r1
	const uint8_t factor = 2;
	uint16_t temp = calculateSpeedWithDeadZoneDouble(percentage);
 80013ba:	f7ff fdf1 	bl	8000fa0 <calculateSpeedWithDeadZoneDouble>
 80013be:	1c04      	adds	r4, r0, #0
 80013c0:	2864      	cmp	r0, #100	@ 0x64
 80013c2:	d900      	bls.n	80013c6 <setServoAngle+0x12>
 80013c4:	2464      	movs	r4, #100	@ 0x64
	if (temp > 100) temp = 100;
	if (temp < 0) temp = 0;

	if (getServoRev(servoN)) temp = 100 - temp;	// take in count if the servo must be reversed or not
 80013c6:	0028      	movs	r0, r5
 80013c8:	b2a4      	uxth	r4, r4
 80013ca:	f7ff ffe3 	bl	8001394 <getServoRev>
 80013ce:	2800      	cmp	r0, #0
 80013d0:	d002      	beq.n	80013d8 <setServoAngle+0x24>
 80013d2:	2364      	movs	r3, #100	@ 0x64
 80013d4:	1b1c      	subs	r4, r3, r4
 80013d6:	b2a4      	uxth	r4, r4

	switch (servoN) {
 80013d8:	2d00      	cmp	r5, #0
 80013da:	d002      	beq.n	80013e2 <setServoAngle+0x2e>
 80013dc:	2d01      	cmp	r5, #1
 80013de:	d00f      	beq.n	8001400 <setServoAngle+0x4c>
		case S2:
			temp = map(temp, 0, 100, S2_MIN_TIME_PWM, S2_MAX_TIME_PWM);
			TIM17->CCR1 = temp * factor;
			break;
	}
}
 80013e0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
			temp = map(temp, 0, 100, S1_MIN_TIME_PWM, S1_MAX_TIME_PWM);
 80013e2:	23fa      	movs	r3, #250	@ 0xfa
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	23fa      	movs	r3, #250	@ 0xfa
 80013ea:	2264      	movs	r2, #100	@ 0x64
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	0029      	movs	r1, r5
 80013f0:	b220      	sxth	r0, r4
 80013f2:	f7ff fd1f 	bl	8000e34 <map>
			TIM16->CCR1 = temp * factor;
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <setServoAngle+0x68>)
 80013f8:	b280      	uxth	r0, r0
 80013fa:	0040      	lsls	r0, r0, #1
			TIM17->CCR1 = temp * factor;
 80013fc:	6358      	str	r0, [r3, #52]	@ 0x34
}
 80013fe:	e7ef      	b.n	80013e0 <setServoAngle+0x2c>
			temp = map(temp, 0, 100, S2_MIN_TIME_PWM, S2_MAX_TIME_PWM);
 8001400:	2396      	movs	r3, #150	@ 0x96
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	2388      	movs	r3, #136	@ 0x88
 8001408:	2264      	movs	r2, #100	@ 0x64
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	2100      	movs	r1, #0
 800140e:	b220      	sxth	r0, r4
 8001410:	f7ff fd10 	bl	8000e34 <map>
			TIM17->CCR1 = temp * factor;
 8001414:	b280      	uxth	r0, r0
 8001416:	4b02      	ldr	r3, [pc, #8]	@ (8001420 <setServoAngle+0x6c>)
 8001418:	0040      	lsls	r0, r0, #1
 800141a:	e7ef      	b.n	80013fc <setServoAngle+0x48>
 800141c:	40014400 	.word	0x40014400
 8001420:	40014800 	.word	0x40014800

08001424 <setServoIsEnable>:

void setServoIsEnable(uint8_t state, TIM_HandleTypeDef *htim){
 8001424:	0003      	movs	r3, r0
 8001426:	b510      	push	{r4, lr}
 8001428:	0008      	movs	r0, r1
	if(state == TRUE){	// turn of the pwm generation
		HAL_TIMEx_PWMN_Start(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 800142a:	2100      	movs	r1, #0
	if(state == TRUE){	// turn of the pwm generation
 800142c:	2b01      	cmp	r3, #1
 800142e:	d102      	bne.n	8001436 <setServoIsEnable+0x12>
		HAL_TIMEx_PWMN_Start(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 8001430:	f003 fb96 	bl	8004b60 <HAL_TIMEx_PWMN_Start>
	}else{
		HAL_TIMEx_PWMN_Stop(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
	}
}
 8001434:	bd10      	pop	{r4, pc}
		HAL_TIMEx_PWMN_Stop(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 8001436:	f003 fb97 	bl	8004b68 <HAL_TIMEx_PWMN_Stop>
}
 800143a:	e7fb      	b.n	8001434 <setServoIsEnable+0x10>

0800143c <remove_all_chars>:
	strcpy(c.value, token);
	return c;
}

void remove_all_chars(char *str, char c) {
	char *pr = str, *pw = str;
 800143c:	0002      	movs	r2, r0
void remove_all_chars(char *str, char c) {
 800143e:	b510      	push	{r4, lr}
	while (*pr) {
 8001440:	7803      	ldrb	r3, [r0, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <remove_all_chars+0xe>
		*pw = *pr++;
		pw += (*pw != c);
	}
	*pw = '\0';
 8001446:	7013      	strb	r3, [r2, #0]
}
 8001448:	bd10      	pop	{r4, pc}
		*pw = *pr++;
 800144a:	7013      	strb	r3, [r2, #0]
		pw += (*pw != c);
 800144c:	1a5b      	subs	r3, r3, r1
 800144e:	1e5c      	subs	r4, r3, #1
 8001450:	41a3      	sbcs	r3, r4
		*pw = *pr++;
 8001452:	3001      	adds	r0, #1
		pw += (*pw != c);
 8001454:	18d2      	adds	r2, r2, r3
 8001456:	e7f3      	b.n	8001440 <remove_all_chars+0x4>

08001458 <decodeCommand>:
Command decodeCommand(char *buffer) {
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	0004      	movs	r4, r0
	char temp[strlen(buffer)];
 8001460:	0008      	movs	r0, r1
Command decodeCommand(char *buffer) {
 8001462:	000d      	movs	r5, r1
	char temp[strlen(buffer)];
 8001464:	f7fe fe5a 	bl	800011c <strlen>
 8001468:	466a      	mov	r2, sp
 800146a:	3007      	adds	r0, #7
 800146c:	08c3      	lsrs	r3, r0, #3
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	469d      	mov	sp, r3
	strcpy(temp, buffer);
 8001474:	0029      	movs	r1, r5
 8001476:	4668      	mov	r0, sp
 8001478:	f005 faa5 	bl	80069c6 <strcpy>
	remove_all_chars(temp, ' ');	// remove all the spaces form the string
 800147c:	2120      	movs	r1, #32
 800147e:	4668      	mov	r0, sp
 8001480:	f7ff ffdc 	bl	800143c <remove_all_chars>
	remove_all_chars(temp, '\n');	// remove all the spaces form the string
 8001484:	210a      	movs	r1, #10
 8001486:	4668      	mov	r0, sp
 8001488:	f7ff ffd8 	bl	800143c <remove_all_chars>
	char *token = strtok(temp, COMMAND_TYPE_SEPARATOR);
 800148c:	4d0d      	ldr	r5, [pc, #52]	@ (80014c4 <decodeCommand+0x6c>)
 800148e:	4668      	mov	r0, sp
 8001490:	0029      	movs	r1, r5
 8001492:	f005 f9bd 	bl	8006810 <strtok>
 8001496:	0001      	movs	r1, r0
	strcpy(c.type, token);
 8001498:	1d38      	adds	r0, r7, #4
 800149a:	f005 fa94 	bl	80069c6 <strcpy>
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 800149e:	0029      	movs	r1, r5
 80014a0:	2000      	movs	r0, #0
 80014a2:	f005 f9b5 	bl	8006810 <strtok>
	strcpy(c.value, token);
 80014a6:	230e      	movs	r3, #14
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 80014a8:	0001      	movs	r1, r0
	strcpy(c.value, token);
 80014aa:	18f8      	adds	r0, r7, r3
 80014ac:	f005 fa8b 	bl	80069c6 <strcpy>
	return c;
 80014b0:	2214      	movs	r2, #20
 80014b2:	0020      	movs	r0, r4
 80014b4:	1d39      	adds	r1, r7, #4
 80014b6:	f005 fa8e 	bl	80069d6 <memcpy>
}
 80014ba:	0020      	movs	r0, r4
 80014bc:	46bd      	mov	sp, r7
 80014be:	b006      	add	sp, #24
 80014c0:	bdb0      	pop	{r4, r5, r7, pc}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	08007a3c 	.word	0x08007a3c

080014c8 <serialPrintString>:

void serialPrintString(uint8_t *s) {
 80014c8:	b510      	push	{r4, lr}
 80014ca:	0004      	movs	r4, r0
	CDC_Transmit_FS(s, strlen(s));
 80014cc:	f7fe fe26 	bl	800011c <strlen>
 80014d0:	b281      	uxth	r1, r0
 80014d2:	0020      	movs	r0, r4
 80014d4:	f004 fe08 	bl	80060e8 <CDC_Transmit_FS>
}
 80014d8:	bd10      	pop	{r4, pc}
	...

080014dc <read_byte_eeprom>:
	readSettingsFromEeprom();
}

uint8_t read_byte_eeprom(uint8_t address) {
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80014dc:	23fa      	movs	r3, #250	@ 0xfa
uint8_t read_byte_eeprom(uint8_t address) {
 80014de:	b530      	push	{r4, r5, lr}
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80014e0:	009b      	lsls	r3, r3, #2
uint8_t read_byte_eeprom(uint8_t address) {
 80014e2:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80014e4:	2517      	movs	r5, #23
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	2301      	movs	r3, #1
 80014ea:	4c06      	ldr	r4, [pc, #24]	@ (8001504 <read_byte_eeprom+0x28>)
 80014ec:	446d      	add	r5, sp
uint8_t read_byte_eeprom(uint8_t address) {
 80014ee:	0002      	movs	r2, r0
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80014f0:	21a0      	movs	r1, #160	@ 0xa0
 80014f2:	0020      	movs	r0, r4
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	9500      	str	r5, [sp, #0]
 80014f8:	f001 fd16 	bl	8002f28 <HAL_I2C_Mem_Read>
	return data;
 80014fc:	7828      	ldrb	r0, [r5, #0]
}
 80014fe:	b007      	add	sp, #28
 8001500:	bd30      	pop	{r4, r5, pc}
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	20000744 	.word	0x20000744

08001508 <readSettingsFromEeprom>:
void readSettingsFromEeprom() {
 8001508:	b510      	push	{r4, lr}
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800150a:	2400      	movs	r4, #0
void readSettingsFromEeprom() {
 800150c:	b086      	sub	sp, #24
		dataRead[i] = read_byte_eeprom(i);
 800150e:	b2e0      	uxtb	r0, r4
 8001510:	f7ff ffe4 	bl	80014dc <read_byte_eeprom>
 8001514:	ab01      	add	r3, sp, #4
 8001516:	5518      	strb	r0, [r3, r4]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001518:	3401      	adds	r4, #1
 800151a:	2c14      	cmp	r4, #20
 800151c:	d1f7      	bne.n	800150e <readSettingsFromEeprom+0x6>
	thChannel = dataRead[0];
 800151e:	4a31      	ldr	r2, [pc, #196]	@ (80015e4 <readSettingsFromEeprom+0xdc>)
 8001520:	7819      	ldrb	r1, [r3, #0]
 8001522:	7011      	strb	r1, [r2, #0]
	stChannel = dataRead[1];
 8001524:	7859      	ldrb	r1, [r3, #1]
 8001526:	4a30      	ldr	r2, [pc, #192]	@ (80015e8 <readSettingsFromEeprom+0xe0>)
 8001528:	7011      	strb	r1, [r2, #0]
	wpChannel = dataRead[2];
 800152a:	7899      	ldrb	r1, [r3, #2]
 800152c:	4a2f      	ldr	r2, [pc, #188]	@ (80015ec <readSettingsFromEeprom+0xe4>)
 800152e:	7011      	strb	r1, [r2, #0]
	s1Channel = dataRead[3];
 8001530:	78d9      	ldrb	r1, [r3, #3]
 8001532:	4a2f      	ldr	r2, [pc, #188]	@ (80015f0 <readSettingsFromEeprom+0xe8>)
 8001534:	7011      	strb	r1, [r2, #0]
	s2Channel = dataRead[4];
 8001536:	7919      	ldrb	r1, [r3, #4]
 8001538:	4a2e      	ldr	r2, [pc, #184]	@ (80015f4 <readSettingsFromEeprom+0xec>)
 800153a:	7011      	strb	r1, [r2, #0]
	armChannel = dataRead[5];
 800153c:	7959      	ldrb	r1, [r3, #5]
 800153e:	4a2e      	ldr	r2, [pc, #184]	@ (80015f8 <readSettingsFromEeprom+0xf0>)
 8001540:	7011      	strb	r1, [r2, #0]
	m1Rev = dataRead[6];
 8001542:	7999      	ldrb	r1, [r3, #6]
 8001544:	4a2d      	ldr	r2, [pc, #180]	@ (80015fc <readSettingsFromEeprom+0xf4>)
 8001546:	7011      	strb	r1, [r2, #0]
	m2Rev = dataRead[7];
 8001548:	79d9      	ldrb	r1, [r3, #7]
 800154a:	4a2d      	ldr	r2, [pc, #180]	@ (8001600 <readSettingsFromEeprom+0xf8>)
 800154c:	7011      	strb	r1, [r2, #0]
	m3Rev = dataRead[8];
 800154e:	7a19      	ldrb	r1, [r3, #8]
 8001550:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <readSettingsFromEeprom+0xfc>)
 8001552:	7011      	strb	r1, [r2, #0]
	s1Rev = dataRead[9];
 8001554:	7a59      	ldrb	r1, [r3, #9]
 8001556:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <readSettingsFromEeprom+0x100>)
 8001558:	7011      	strb	r1, [r2, #0]
	s2Rev = dataRead[10];
 800155a:	7a99      	ldrb	r1, [r3, #10]
 800155c:	4a2b      	ldr	r2, [pc, #172]	@ (800160c <readSettingsFromEeprom+0x104>)
 800155e:	7011      	strb	r1, [r2, #0]
	switch (dataRead[11]) {	// control M1 at which motor is assigned
 8001560:	7ada      	ldrb	r2, [r3, #11]
 8001562:	2a01      	cmp	r2, #1
 8001564:	d010      	beq.n	8001588 <readSettingsFromEeprom+0x80>
 8001566:	2a02      	cmp	r2, #2
 8001568:	d012      	beq.n	8001590 <readSettingsFromEeprom+0x88>
 800156a:	2a00      	cmp	r2, #0
 800156c:	d101      	bne.n	8001572 <readSettingsFromEeprom+0x6a>
			mLeft = M1;
 800156e:	4928      	ldr	r1, [pc, #160]	@ (8001610 <readSettingsFromEeprom+0x108>)
 8001570:	700a      	strb	r2, [r1, #0]
	switch (dataRead[12]) {	// control M2 at which motor is assigned
 8001572:	7b1a      	ldrb	r2, [r3, #12]
 8001574:	2a01      	cmp	r2, #1
 8001576:	d00d      	beq.n	8001594 <readSettingsFromEeprom+0x8c>
 8001578:	2a02      	cmp	r2, #2
 800157a:	d02b      	beq.n	80015d4 <readSettingsFromEeprom+0xcc>
 800157c:	2a00      	cmp	r2, #0
 800157e:	d10b      	bne.n	8001598 <readSettingsFromEeprom+0x90>
			mLeft = M2;
 8001580:	4a23      	ldr	r2, [pc, #140]	@ (8001610 <readSettingsFromEeprom+0x108>)
			mWeapon = M2;
 8001582:	2101      	movs	r1, #1
 8001584:	7011      	strb	r1, [r2, #0]
			break;
 8001586:	e007      	b.n	8001598 <readSettingsFromEeprom+0x90>
			mRight = M1;
 8001588:	4a22      	ldr	r2, [pc, #136]	@ (8001614 <readSettingsFromEeprom+0x10c>)
			mWeapon = M1;
 800158a:	2100      	movs	r1, #0
 800158c:	7011      	strb	r1, [r2, #0]
			break;
 800158e:	e7f0      	b.n	8001572 <readSettingsFromEeprom+0x6a>
			mWeapon = M1;
 8001590:	4a21      	ldr	r2, [pc, #132]	@ (8001618 <readSettingsFromEeprom+0x110>)
 8001592:	e7fa      	b.n	800158a <readSettingsFromEeprom+0x82>
			mRight = M2;
 8001594:	491f      	ldr	r1, [pc, #124]	@ (8001614 <readSettingsFromEeprom+0x10c>)
 8001596:	700a      	strb	r2, [r1, #0]
	switch (dataRead[13]) {	// control M3 at which motor is assigned
 8001598:	7b5a      	ldrb	r2, [r3, #13]
 800159a:	2a01      	cmp	r2, #1
 800159c:	d01c      	beq.n	80015d8 <readSettingsFromEeprom+0xd0>
 800159e:	2a02      	cmp	r2, #2
 80015a0:	d01c      	beq.n	80015dc <readSettingsFromEeprom+0xd4>
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d102      	bne.n	80015ac <readSettingsFromEeprom+0xa4>
			mLeft = M3;
 80015a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001610 <readSettingsFromEeprom+0x108>)
			mRight = M3;
 80015a8:	2102      	movs	r1, #2
 80015aa:	7011      	strb	r1, [r2, #0]
	weaponDoubleDirection = dataRead[14];
 80015ac:	7b99      	ldrb	r1, [r3, #14]
 80015ae:	4a1b      	ldr	r2, [pc, #108]	@ (800161c <readSettingsFromEeprom+0x114>)
 80015b0:	7011      	strb	r1, [r2, #0]
	tankMixIsON = dataRead[15];
 80015b2:	7bd9      	ldrb	r1, [r3, #15]
 80015b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001620 <readSettingsFromEeprom+0x118>)
 80015b6:	7011      	strb	r1, [r2, #0]
	noDisarm = dataRead[16];
 80015b8:	7c19      	ldrb	r1, [r3, #16]
 80015ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001624 <readSettingsFromEeprom+0x11c>)
 80015bc:	7011      	strb	r1, [r2, #0]
	limitVoltage = dataRead[17];
 80015be:	7c59      	ldrb	r1, [r3, #17]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <readSettingsFromEeprom+0x120>)
 80015c2:	7011      	strb	r1, [r2, #0]
	cutOffVoltage = dataRead[18];
 80015c4:	7c99      	ldrb	r1, [r3, #18]
 80015c6:	4a19      	ldr	r2, [pc, #100]	@ (800162c <readSettingsFromEeprom+0x124>)
 80015c8:	7011      	strb	r1, [r2, #0]
	recieverIsPWM = dataRead[19];
 80015ca:	7cdb      	ldrb	r3, [r3, #19]
 80015cc:	4a18      	ldr	r2, [pc, #96]	@ (8001630 <readSettingsFromEeprom+0x128>)
 80015ce:	7013      	strb	r3, [r2, #0]
}
 80015d0:	b006      	add	sp, #24
 80015d2:	bd10      	pop	{r4, pc}
			mWeapon = M2;
 80015d4:	4a10      	ldr	r2, [pc, #64]	@ (8001618 <readSettingsFromEeprom+0x110>)
 80015d6:	e7d4      	b.n	8001582 <readSettingsFromEeprom+0x7a>
			mRight = M3;
 80015d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001614 <readSettingsFromEeprom+0x10c>)
 80015da:	e7e5      	b.n	80015a8 <readSettingsFromEeprom+0xa0>
			mWeapon = M3;
 80015dc:	490e      	ldr	r1, [pc, #56]	@ (8001618 <readSettingsFromEeprom+0x110>)
 80015de:	700a      	strb	r2, [r1, #0]
			break;
 80015e0:	e7e4      	b.n	80015ac <readSettingsFromEeprom+0xa4>
 80015e2:	46c0      	nop			@ (mov r8, r8)
 80015e4:	20000011 	.word	0x20000011
 80015e8:	20000010 	.word	0x20000010
 80015ec:	2000000f 	.word	0x2000000f
 80015f0:	2000000e 	.word	0x2000000e
 80015f4:	2000000d 	.word	0x2000000d
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	2000000b 	.word	0x2000000b
 8001600:	2000000a 	.word	0x2000000a
 8001604:	20000546 	.word	0x20000546
 8001608:	20000545 	.word	0x20000545
 800160c:	20000544 	.word	0x20000544
 8001610:	20000543 	.word	0x20000543
 8001614:	20000009 	.word	0x20000009
 8001618:	20000008 	.word	0x20000008
 800161c:	20000542 	.word	0x20000542
 8001620:	20000007 	.word	0x20000007
 8001624:	20000006 	.word	0x20000006
 8001628:	20000005 	.word	0x20000005
 800162c:	20000004 	.word	0x20000004
 8001630:	20000000 	.word	0x20000000

08001634 <loadSettingsFromEeprom>:
void loadSettingsFromEeprom() {
 8001634:	b510      	push	{r4, lr}
	readSettingsFromEeprom();
 8001636:	f7ff ff67 	bl	8001508 <readSettingsFromEeprom>
}
 800163a:	bd10      	pop	{r4, pc}

0800163c <write_byte_eeprom>:

void write_byte_eeprom(uint8_t address, uint8_t value) {
 800163c:	0002      	movs	r2, r0
	uint8_t data = value;
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800163e:	23fa      	movs	r3, #250	@ 0xfa
	uint8_t data = value;
 8001640:	2017      	movs	r0, #23
void write_byte_eeprom(uint8_t address, uint8_t value) {
 8001642:	b510      	push	{r4, lr}
 8001644:	b086      	sub	sp, #24
	uint8_t data = value;
 8001646:	4468      	add	r0, sp
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001648:	009b      	lsls	r3, r3, #2
	uint8_t data = value;
 800164a:	7001      	strb	r1, [r0, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2301      	movs	r3, #1
 8001650:	4c05      	ldr	r4, [pc, #20]	@ (8001668 <write_byte_eeprom+0x2c>)
 8001652:	21a0      	movs	r1, #160	@ 0xa0
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	9000      	str	r0, [sp, #0]
 8001658:	0020      	movs	r0, r4
 800165a:	f001 fb8b 	bl	8002d74 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800165e:	200a      	movs	r0, #10
 8001660:	f000 fdfa 	bl	8002258 <HAL_Delay>
}
 8001664:	b006      	add	sp, #24
 8001666:	bd10      	pop	{r4, pc}
 8001668:	20000744 	.word	0x20000744

0800166c <storeSettingsToEeprom>:
void storeSettingsToEeprom() {
 800166c:	b530      	push	{r4, r5, lr}
	dataToStore[0] = thChannel;
 800166e:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <storeSettingsToEeprom+0xd8>)
void storeSettingsToEeprom() {
 8001670:	b087      	sub	sp, #28
	dataToStore[0] = thChannel;
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	ac01      	add	r4, sp, #4
 8001676:	7023      	strb	r3, [r4, #0]
	dataToStore[1] = stChannel;
 8001678:	4b33      	ldr	r3, [pc, #204]	@ (8001748 <storeSettingsToEeprom+0xdc>)
 800167a:	2200      	movs	r2, #0
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	7063      	strb	r3, [r4, #1]
	dataToStore[2] = wpChannel;
 8001680:	4b32      	ldr	r3, [pc, #200]	@ (800174c <storeSettingsToEeprom+0xe0>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	70a3      	strb	r3, [r4, #2]
	dataToStore[3] = s1Channel;
 8001686:	4b32      	ldr	r3, [pc, #200]	@ (8001750 <storeSettingsToEeprom+0xe4>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	70e3      	strb	r3, [r4, #3]
	dataToStore[4] = s2Channel;
 800168c:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <storeSettingsToEeprom+0xe8>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	7123      	strb	r3, [r4, #4]
	dataToStore[5] = armChannel;
 8001692:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <storeSettingsToEeprom+0xec>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	7163      	strb	r3, [r4, #5]
	dataToStore[6] = m1Rev;
 8001698:	4b30      	ldr	r3, [pc, #192]	@ (800175c <storeSettingsToEeprom+0xf0>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	71a3      	strb	r3, [r4, #6]
	dataToStore[7] = m2Rev;
 800169e:	4b30      	ldr	r3, [pc, #192]	@ (8001760 <storeSettingsToEeprom+0xf4>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	71e3      	strb	r3, [r4, #7]
	dataToStore[8] = m3Rev;
 80016a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <storeSettingsToEeprom+0xf8>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	7223      	strb	r3, [r4, #8]
	dataToStore[9] = s1Rev;
 80016aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001768 <storeSettingsToEeprom+0xfc>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	7263      	strb	r3, [r4, #9]
	dataToStore[10] = s2Rev;
 80016b0:	4b2e      	ldr	r3, [pc, #184]	@ (800176c <storeSettingsToEeprom+0x100>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	72a3      	strb	r3, [r4, #10]
	switch (mLeft) {	// mLeft is code 0
 80016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001770 <storeSettingsToEeprom+0x104>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d034      	beq.n	8001728 <storeSettingsToEeprom+0xbc>
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d034      	beq.n	800172c <storeSettingsToEeprom+0xc0>
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d100      	bne.n	80016c8 <storeSettingsToEeprom+0x5c>
			dataToStore[11] = 0;
 80016c6:	72e3      	strb	r3, [r4, #11]
	switch (mRight) {	// mRight is code 1
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <storeSettingsToEeprom+0x108>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d02f      	beq.n	8001730 <storeSettingsToEeprom+0xc4>
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d02f      	beq.n	8001734 <storeSettingsToEeprom+0xc8>
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <storeSettingsToEeprom+0x70>
			dataToStore[11] = 1;
 80016d8:	3301      	adds	r3, #1
 80016da:	72e3      	strb	r3, [r4, #11]
	switch (mWeapon) {	// mWeapon is code 2
 80016dc:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <storeSettingsToEeprom+0x10c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d02a      	beq.n	800173a <storeSettingsToEeprom+0xce>
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d02b      	beq.n	8001740 <storeSettingsToEeprom+0xd4>
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <storeSettingsToEeprom+0x84>
			dataToStore[11] = 2;
 80016ec:	3302      	adds	r3, #2
 80016ee:	72e3      	strb	r3, [r4, #11]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 80016f0:	2500      	movs	r5, #0
	dataToStore[14] = weaponDoubleDirection;
 80016f2:	4b22      	ldr	r3, [pc, #136]	@ (800177c <storeSettingsToEeprom+0x110>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	73a3      	strb	r3, [r4, #14]
	dataToStore[15] = tankMixIsON;
 80016f8:	4b21      	ldr	r3, [pc, #132]	@ (8001780 <storeSettingsToEeprom+0x114>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	73e3      	strb	r3, [r4, #15]
	dataToStore[16] = noDisarm;
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <storeSettingsToEeprom+0x118>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	7423      	strb	r3, [r4, #16]
	dataToStore[17] = limitVoltage;
 8001704:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <storeSettingsToEeprom+0x11c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	7463      	strb	r3, [r4, #17]
	dataToStore[18] = cutOffVoltage;
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <storeSettingsToEeprom+0x120>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	74a3      	strb	r3, [r4, #18]
	dataToStore[19] = recieverIsPWM;
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <storeSettingsToEeprom+0x124>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	74e3      	strb	r3, [r4, #19]
		write_byte_eeprom(i, dataToStore[i]);
 8001716:	5d61      	ldrb	r1, [r4, r5]
 8001718:	b2e8      	uxtb	r0, r5
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800171a:	3501      	adds	r5, #1
		write_byte_eeprom(i, dataToStore[i]);
 800171c:	f7ff ff8e 	bl	800163c <write_byte_eeprom>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001720:	2d14      	cmp	r5, #20
 8001722:	d1f8      	bne.n	8001716 <storeSettingsToEeprom+0xaa>
}
 8001724:	b007      	add	sp, #28
 8001726:	bd30      	pop	{r4, r5, pc}
			dataToStore[12] = 0;
 8001728:	7322      	strb	r2, [r4, #12]
			break;
 800172a:	e7cd      	b.n	80016c8 <storeSettingsToEeprom+0x5c>
			dataToStore[13] = 0;
 800172c:	7362      	strb	r2, [r4, #13]
			break;
 800172e:	e7cb      	b.n	80016c8 <storeSettingsToEeprom+0x5c>
			dataToStore[12] = 1;
 8001730:	7323      	strb	r3, [r4, #12]
			break;
 8001732:	e7d3      	b.n	80016dc <storeSettingsToEeprom+0x70>
			dataToStore[13] = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	7363      	strb	r3, [r4, #13]
			break;
 8001738:	e7d0      	b.n	80016dc <storeSettingsToEeprom+0x70>
			dataToStore[12] = 2;
 800173a:	2302      	movs	r3, #2
 800173c:	7323      	strb	r3, [r4, #12]
			break;
 800173e:	e7d7      	b.n	80016f0 <storeSettingsToEeprom+0x84>
			dataToStore[13] = 2;
 8001740:	7363      	strb	r3, [r4, #13]
			break;
 8001742:	e7d5      	b.n	80016f0 <storeSettingsToEeprom+0x84>
 8001744:	20000011 	.word	0x20000011
 8001748:	20000010 	.word	0x20000010
 800174c:	2000000f 	.word	0x2000000f
 8001750:	2000000e 	.word	0x2000000e
 8001754:	2000000d 	.word	0x2000000d
 8001758:	2000000c 	.word	0x2000000c
 800175c:	2000000b 	.word	0x2000000b
 8001760:	2000000a 	.word	0x2000000a
 8001764:	20000546 	.word	0x20000546
 8001768:	20000545 	.word	0x20000545
 800176c:	20000544 	.word	0x20000544
 8001770:	20000543 	.word	0x20000543
 8001774:	20000009 	.word	0x20000009
 8001778:	20000008 	.word	0x20000008
 800177c:	20000542 	.word	0x20000542
 8001780:	20000007 	.word	0x20000007
 8001784:	20000006 	.word	0x20000006
 8001788:	20000005 	.word	0x20000005
 800178c:	20000004 	.word	0x20000004
 8001790:	20000000 	.word	0x20000000

08001794 <serialPrintStatus>:

void serialPrintStatus() {
 8001794:	b530      	push	{r4, r5, lr}
 8001796:	b089      	sub	sp, #36	@ 0x24
	uint8_t string[30];
	// print voltage
	sprintf(string, "VBATT > %d\n", getBattVoltage());
 8001798:	f7fe feee 	bl	8000578 <getBattVoltage>
 800179c:	4929      	ldr	r1, [pc, #164]	@ (8001844 <serialPrintStatus+0xb0>)
 800179e:	0002      	movs	r2, r0
 80017a0:	4668      	mov	r0, sp
 80017a2:	f004 ffc1 	bl	8006728 <siprintf>
	serialPrintString(string);
 80017a6:	4668      	mov	r0, sp
 80017a8:	f7ff fe8e 	bl	80014c8 <serialPrintString>
	HAL_Delay(1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f000 fd53 	bl	8002258 <HAL_Delay>
	// which battery detected
	sprintf(string, "BATT > %d\n", batteryConfiguration);
 80017b2:	4b25      	ldr	r3, [pc, #148]	@ (8001848 <serialPrintStatus+0xb4>)
 80017b4:	4925      	ldr	r1, [pc, #148]	@ (800184c <serialPrintStatus+0xb8>)
 80017b6:	781a      	ldrb	r2, [r3, #0]
 80017b8:	4668      	mov	r0, sp
 80017ba:	f004 ffb5 	bl	8006728 <siprintf>
	serialPrintString(string);
 80017be:	4668      	mov	r0, sp
 80017c0:	f7ff fe82 	bl	80014c8 <serialPrintString>
	HAL_Delay(1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f000 fd47 	bl	8002258 <HAL_Delay>
	// print RX channels
	if (recieverIsPWM) {	// print only four channel
 80017ca:	4b21      	ldr	r3, [pc, #132]	@ (8001850 <serialPrintStatus+0xbc>)
		for (int i = 1; i < 5; i++) {
 80017cc:	2401      	movs	r4, #1
	if (recieverIsPWM) {	// print only four channel
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4d20      	ldr	r5, [pc, #128]	@ (8001854 <serialPrintStatus+0xc0>)
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d022      	beq.n	800181c <serialPrintStatus+0x88>
			sprintf(string, "CH%d > %d\n", i, getChannelValuePercentage(i));
 80017d6:	b2e0      	uxtb	r0, r4
 80017d8:	f7ff fcec 	bl	80011b4 <getChannelValuePercentage>
 80017dc:	0022      	movs	r2, r4
 80017de:	0003      	movs	r3, r0
 80017e0:	0029      	movs	r1, r5
 80017e2:	4668      	mov	r0, sp
 80017e4:	f004 ffa0 	bl	8006728 <siprintf>
			serialPrintString(string);
 80017e8:	4668      	mov	r0, sp
 80017ea:	f7ff fe6d 	bl	80014c8 <serialPrintString>
		for (int i = 1; i < 5; i++) {
 80017ee:	3401      	adds	r4, #1
			HAL_Delay(2);
 80017f0:	2002      	movs	r0, #2
 80017f2:	f000 fd31 	bl	8002258 <HAL_Delay>
		for (int i = 1; i < 5; i++) {
 80017f6:	2c05      	cmp	r4, #5
 80017f8:	d1ed      	bne.n	80017d6 <serialPrintStatus+0x42>
			serialPrintString(string);
			HAL_Delay(2);
		}
	}
	// print armed
	if (armed) {
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <serialPrintStatus+0xc4>)
		sprintf(string, "ARMED > TRUE\n");
 80017fc:	4917      	ldr	r1, [pc, #92]	@ (800185c <serialPrintStatus+0xc8>)
	if (armed) {
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <serialPrintStatus+0x72>
		serialPrintString(string);
		HAL_Delay(1);
	} else {
		sprintf(string, "ARMED > FALSE\n");
 8001804:	4916      	ldr	r1, [pc, #88]	@ (8001860 <serialPrintStatus+0xcc>)
 8001806:	4668      	mov	r0, sp
 8001808:	f005 f8dd 	bl	80069c6 <strcpy>
		serialPrintString(string);
 800180c:	4668      	mov	r0, sp
 800180e:	f7ff fe5b 	bl	80014c8 <serialPrintString>
		HAL_Delay(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f000 fd20 	bl	8002258 <HAL_Delay>
	}
}
 8001818:	b009      	add	sp, #36	@ 0x24
 800181a:	bd30      	pop	{r4, r5, pc}
			sprintf(string, "CH%d > %d\n", i, getChannelValuePercentage(i));
 800181c:	b2e0      	uxtb	r0, r4
 800181e:	f7ff fcc9 	bl	80011b4 <getChannelValuePercentage>
 8001822:	0022      	movs	r2, r4
 8001824:	0003      	movs	r3, r0
 8001826:	0029      	movs	r1, r5
 8001828:	4668      	mov	r0, sp
 800182a:	f004 ff7d 	bl	8006728 <siprintf>
			serialPrintString(string);
 800182e:	4668      	mov	r0, sp
 8001830:	f7ff fe4a 	bl	80014c8 <serialPrintString>
		for (int i = 1; i < 9; i++) {
 8001834:	3401      	adds	r4, #1
			HAL_Delay(2);
 8001836:	2002      	movs	r0, #2
 8001838:	f000 fd0e 	bl	8002258 <HAL_Delay>
		for (int i = 1; i < 9; i++) {
 800183c:	2c09      	cmp	r4, #9
 800183e:	d1ed      	bne.n	800181c <serialPrintStatus+0x88>
 8001840:	e7db      	b.n	80017fa <serialPrintStatus+0x66>
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	08007a3e 	.word	0x08007a3e
 8001848:	20000548 	.word	0x20000548
 800184c:	08007a3f 	.word	0x08007a3f
 8001850:	20000000 	.word	0x20000000
 8001854:	08007a4a 	.word	0x08007a4a
 8001858:	20000547 	.word	0x20000547
 800185c:	08007a55 	.word	0x08007a55
 8001860:	08007a63 	.word	0x08007a63

08001864 <serialPrintSettings>:

void serialPrintSettings() {
 8001864:	b570      	push	{r4, r5, r6, lr}
	uint8_t dataRead[SETTINGS_NUMBER];
	dataRead[0] = thChannel;
 8001866:	4b44      	ldr	r3, [pc, #272]	@ (8001978 <serialPrintSettings+0x114>)
void serialPrintSettings() {
 8001868:	b0a4      	sub	sp, #144	@ 0x90
	dataRead[0] = thChannel;
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	ac03      	add	r4, sp, #12
 800186e:	7023      	strb	r3, [r4, #0]
	dataRead[1] = stChannel;
 8001870:	4b42      	ldr	r3, [pc, #264]	@ (800197c <serialPrintSettings+0x118>)
 8001872:	2200      	movs	r2, #0
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	7063      	strb	r3, [r4, #1]
	dataRead[2] = wpChannel;
 8001878:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <serialPrintSettings+0x11c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	70a3      	strb	r3, [r4, #2]
	dataRead[3] = s1Channel;
 800187e:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <serialPrintSettings+0x120>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	70e3      	strb	r3, [r4, #3]
	dataRead[4] = s2Channel;
 8001884:	4b40      	ldr	r3, [pc, #256]	@ (8001988 <serialPrintSettings+0x124>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	7123      	strb	r3, [r4, #4]
	dataRead[5] = armChannel;
 800188a:	4b40      	ldr	r3, [pc, #256]	@ (800198c <serialPrintSettings+0x128>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	7163      	strb	r3, [r4, #5]

	dataRead[6] = m1Rev;
 8001890:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <serialPrintSettings+0x12c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	71a3      	strb	r3, [r4, #6]
	dataRead[7] = m2Rev;
 8001896:	4b3f      	ldr	r3, [pc, #252]	@ (8001994 <serialPrintSettings+0x130>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	71e3      	strb	r3, [r4, #7]
	dataRead[8] = m3Rev;
 800189c:	4b3e      	ldr	r3, [pc, #248]	@ (8001998 <serialPrintSettings+0x134>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	7223      	strb	r3, [r4, #8]
	dataRead[9] = s1Rev;
 80018a2:	4b3e      	ldr	r3, [pc, #248]	@ (800199c <serialPrintSettings+0x138>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	7263      	strb	r3, [r4, #9]
	dataRead[10] = s2Rev;
 80018a8:	4b3d      	ldr	r3, [pc, #244]	@ (80019a0 <serialPrintSettings+0x13c>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	72a3      	strb	r3, [r4, #10]

	switch (mLeft) {	// mleft is code 0
 80018ae:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <serialPrintSettings+0x140>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d051      	beq.n	800195a <serialPrintSettings+0xf6>
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d051      	beq.n	800195e <serialPrintSettings+0xfa>
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d100      	bne.n	80018c0 <serialPrintSettings+0x5c>
		case M1:
			dataRead[11] = 0;
 80018be:	72e3      	strb	r3, [r4, #11]
		case M3:
			dataRead[13] = 0;
			break;
	}

	switch (mRight) {	// mright is code 1
 80018c0:	4b39      	ldr	r3, [pc, #228]	@ (80019a8 <serialPrintSettings+0x144>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d04c      	beq.n	8001962 <serialPrintSettings+0xfe>
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d04c      	beq.n	8001966 <serialPrintSettings+0x102>
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <serialPrintSettings+0x70>
		case M1:
			dataRead[11] = 1;
 80018d0:	3301      	adds	r3, #1
 80018d2:	72e3      	strb	r3, [r4, #11]
		case M3:
			dataRead[13] = 1;
			break;
	}

	switch (mWeapon) {	// mweapon is code 2
 80018d4:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <serialPrintSettings+0x148>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d047      	beq.n	800196c <serialPrintSettings+0x108>
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d048      	beq.n	8001972 <serialPrintSettings+0x10e>
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <serialPrintSettings+0x84>
		case M1:
			dataRead[11] = 2;
 80018e4:	3302      	adds	r3, #2
 80018e6:	72e3      	strb	r3, [r4, #11]
		case M3:
			dataRead[13] = 2;
			break;
	}

	dataRead[14] = weaponDoubleDirection;
 80018e8:	4b31      	ldr	r3, [pc, #196]	@ (80019b0 <serialPrintSettings+0x14c>)
	dataRead[16] = noDisarm;
	dataRead[17] = limitVoltage;
	dataRead[18] = cutOffVoltage;
	dataRead[19] = recieverIsPWM;

	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80018ea:	ae10      	add	r6, sp, #64	@ 0x40
	dataRead[14] = weaponDoubleDirection;
 80018ec:	781b      	ldrb	r3, [r3, #0]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80018ee:	2250      	movs	r2, #80	@ 0x50
	dataRead[14] = weaponDoubleDirection;
 80018f0:	73a3      	strb	r3, [r4, #14]
	dataRead[15] = tankMixIsON;
 80018f2:	4b30      	ldr	r3, [pc, #192]	@ (80019b4 <serialPrintSettings+0x150>)
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80018f4:	4930      	ldr	r1, [pc, #192]	@ (80019b8 <serialPrintSettings+0x154>)
	dataRead[15] = tankMixIsON;
 80018f6:	781b      	ldrb	r3, [r3, #0]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80018f8:	0030      	movs	r0, r6
	dataRead[15] = tankMixIsON;
 80018fa:	73e3      	strb	r3, [r4, #15]
	dataRead[16] = noDisarm;
 80018fc:	4b2f      	ldr	r3, [pc, #188]	@ (80019bc <serialPrintSettings+0x158>)
			(const uint8_t*) COMMAND_RXPWMMODE };

	uint8_t c[] = "\nSETTINGS:\n";
	serialPrintString(c);
	HAL_Delay(0);
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 80018fe:	2500      	movs	r5, #0
	dataRead[16] = noDisarm;
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	7423      	strb	r3, [r4, #16]
	dataRead[17] = limitVoltage;
 8001904:	4b2e      	ldr	r3, [pc, #184]	@ (80019c0 <serialPrintSettings+0x15c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	7463      	strb	r3, [r4, #17]
	dataRead[18] = cutOffVoltage;
 800190a:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <serialPrintSettings+0x160>)
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	74a3      	strb	r3, [r4, #18]
	dataRead[19] = recieverIsPWM;
 8001910:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <serialPrintSettings+0x164>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	74e3      	strb	r3, [r4, #19]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 8001916:	f005 f85e 	bl	80069d6 <memcpy>
	uint8_t c[] = "\nSETTINGS:\n";
 800191a:	220c      	movs	r2, #12
 800191c:	492b      	ldr	r1, [pc, #172]	@ (80019cc <serialPrintSettings+0x168>)
 800191e:	4668      	mov	r0, sp
 8001920:	f005 f859 	bl	80069d6 <memcpy>
	serialPrintString(c);
 8001924:	4668      	mov	r0, sp
 8001926:	f7ff fdcf 	bl	80014c8 <serialPrintString>
	HAL_Delay(0);
 800192a:	2000      	movs	r0, #0
 800192c:	f000 fc94 	bl	8002258 <HAL_Delay>
		uint8_t string[30];
		sprintf(string, "%s > %d\n", commands[i], dataRead[i]);
 8001930:	00aa      	lsls	r2, r5, #2
 8001932:	5d63      	ldrb	r3, [r4, r5]
 8001934:	4926      	ldr	r1, [pc, #152]	@ (80019d0 <serialPrintSettings+0x16c>)
 8001936:	58b2      	ldr	r2, [r6, r2]
 8001938:	a808      	add	r0, sp, #32
 800193a:	f004 fef5 	bl	8006728 <siprintf>
		serialPrintString(string);
 800193e:	a808      	add	r0, sp, #32
 8001940:	f7ff fdc2 	bl	80014c8 <serialPrintString>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 8001944:	3501      	adds	r5, #1
		HAL_Delay(10);
 8001946:	200a      	movs	r0, #10
 8001948:	f000 fc86 	bl	8002258 <HAL_Delay>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 800194c:	2d14      	cmp	r5, #20
 800194e:	d1ef      	bne.n	8001930 <serialPrintSettings+0xcc>
	}
	serialPrintString("\nwrite COMAND > VALUE (e.g. TH2CH>3)\nthan SAVE>1 to store all settings on EEPROM\n");
 8001950:	4820      	ldr	r0, [pc, #128]	@ (80019d4 <serialPrintSettings+0x170>)
 8001952:	f7ff fdb9 	bl	80014c8 <serialPrintString>
}
 8001956:	b024      	add	sp, #144	@ 0x90
 8001958:	bd70      	pop	{r4, r5, r6, pc}
			dataRead[12] = 0;
 800195a:	7322      	strb	r2, [r4, #12]
			break;
 800195c:	e7b0      	b.n	80018c0 <serialPrintSettings+0x5c>
			dataRead[13] = 0;
 800195e:	7362      	strb	r2, [r4, #13]
			break;
 8001960:	e7ae      	b.n	80018c0 <serialPrintSettings+0x5c>
			dataRead[12] = 1;
 8001962:	7323      	strb	r3, [r4, #12]
			break;
 8001964:	e7b6      	b.n	80018d4 <serialPrintSettings+0x70>
			dataRead[13] = 1;
 8001966:	2301      	movs	r3, #1
 8001968:	7363      	strb	r3, [r4, #13]
			break;
 800196a:	e7b3      	b.n	80018d4 <serialPrintSettings+0x70>
			dataRead[12] = 2;
 800196c:	2302      	movs	r3, #2
 800196e:	7323      	strb	r3, [r4, #12]
			break;
 8001970:	e7ba      	b.n	80018e8 <serialPrintSettings+0x84>
			dataRead[13] = 2;
 8001972:	7363      	strb	r3, [r4, #13]
			break;
 8001974:	e7b8      	b.n	80018e8 <serialPrintSettings+0x84>
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	20000011 	.word	0x20000011
 800197c:	20000010 	.word	0x20000010
 8001980:	2000000f 	.word	0x2000000f
 8001984:	2000000e 	.word	0x2000000e
 8001988:	2000000d 	.word	0x2000000d
 800198c:	2000000c 	.word	0x2000000c
 8001990:	2000000b 	.word	0x2000000b
 8001994:	2000000a 	.word	0x2000000a
 8001998:	20000546 	.word	0x20000546
 800199c:	20000545 	.word	0x20000545
 80019a0:	20000544 	.word	0x20000544
 80019a4:	20000543 	.word	0x20000543
 80019a8:	20000009 	.word	0x20000009
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000542 	.word	0x20000542
 80019b4:	20000007 	.word	0x20000007
 80019b8:	080079dc 	.word	0x080079dc
 80019bc:	20000006 	.word	0x20000006
 80019c0:	20000005 	.word	0x20000005
 80019c4:	20000004 	.word	0x20000004
 80019c8:	20000000 	.word	0x20000000
 80019cc:	08007acd 	.word	0x08007acd
 80019d0:	08007a72 	.word	0x08007a72
 80019d4:	08007a7b 	.word	0x08007a7b

080019d8 <modifySettingsWithCommand>:
int modifySettingsWithCommand() {
 80019d8:	b510      	push	{r4, lr}
 80019da:	b086      	sub	sp, #24
	Command c = decodeCommand(buffer);
 80019dc:	49cc      	ldr	r1, [pc, #816]	@ (8001d10 <modifySettingsWithCommand+0x338>)
 80019de:	a801      	add	r0, sp, #4
 80019e0:	f7ff fd3a 	bl	8001458 <decodeCommand>
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 80019e4:	49cb      	ldr	r1, [pc, #812]	@ (8001d14 <modifySettingsWithCommand+0x33c>)
 80019e6:	a801      	add	r0, sp, #4
 80019e8:	f7fe fb8e 	bl	8000108 <strcmp>
	uint8_t isOK = FALSE;
 80019ec:	2400      	movs	r4, #0
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 80019ee:	42a0      	cmp	r0, r4
 80019f0:	d107      	bne.n	8001a02 <modifySettingsWithCommand+0x2a>
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 80019f2:	230e      	movs	r3, #14
 80019f4:	446b      	add	r3, sp
 80019f6:	0018      	movs	r0, r3
 80019f8:	f004 fd35 	bl	8006466 <atoi>
 80019fc:	4bc6      	ldr	r3, [pc, #792]	@ (8001d18 <modifySettingsWithCommand+0x340>)
		isOK = TRUE;
 80019fe:	3401      	adds	r4, #1
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 8001a00:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 8001a02:	49c6      	ldr	r1, [pc, #792]	@ (8001d1c <modifySettingsWithCommand+0x344>)
 8001a04:	a801      	add	r0, sp, #4
 8001a06:	f7fe fb7f 	bl	8000108 <strcmp>
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	d107      	bne.n	8001a1e <modifySettingsWithCommand+0x46>
		stChannel = atoi(c.value);
 8001a0e:	230e      	movs	r3, #14
 8001a10:	446b      	add	r3, sp
 8001a12:	0018      	movs	r0, r3
 8001a14:	f004 fd27 	bl	8006466 <atoi>
		isOK = TRUE;
 8001a18:	2401      	movs	r4, #1
		stChannel = atoi(c.value);
 8001a1a:	4bc1      	ldr	r3, [pc, #772]	@ (8001d20 <modifySettingsWithCommand+0x348>)
 8001a1c:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 8001a1e:	49c1      	ldr	r1, [pc, #772]	@ (8001d24 <modifySettingsWithCommand+0x34c>)
 8001a20:	a801      	add	r0, sp, #4
 8001a22:	f7fe fb71 	bl	8000108 <strcmp>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d107      	bne.n	8001a3a <modifySettingsWithCommand+0x62>
		wpChannel = atoi(c.value);
 8001a2a:	230e      	movs	r3, #14
 8001a2c:	446b      	add	r3, sp
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f004 fd19 	bl	8006466 <atoi>
		isOK = TRUE;
 8001a34:	2401      	movs	r4, #1
		wpChannel = atoi(c.value);
 8001a36:	4bbc      	ldr	r3, [pc, #752]	@ (8001d28 <modifySettingsWithCommand+0x350>)
 8001a38:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 8001a3a:	49bc      	ldr	r1, [pc, #752]	@ (8001d2c <modifySettingsWithCommand+0x354>)
 8001a3c:	a801      	add	r0, sp, #4
 8001a3e:	f7fe fb63 	bl	8000108 <strcmp>
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d107      	bne.n	8001a56 <modifySettingsWithCommand+0x7e>
		s1Channel = atoi(c.value);
 8001a46:	230e      	movs	r3, #14
 8001a48:	446b      	add	r3, sp
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f004 fd0b 	bl	8006466 <atoi>
		isOK = TRUE;
 8001a50:	2401      	movs	r4, #1
		s1Channel = atoi(c.value);
 8001a52:	4bb7      	ldr	r3, [pc, #732]	@ (8001d30 <modifySettingsWithCommand+0x358>)
 8001a54:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 8001a56:	49b7      	ldr	r1, [pc, #732]	@ (8001d34 <modifySettingsWithCommand+0x35c>)
 8001a58:	a801      	add	r0, sp, #4
 8001a5a:	f7fe fb55 	bl	8000108 <strcmp>
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d107      	bne.n	8001a72 <modifySettingsWithCommand+0x9a>
		s2Channel = atoi(c.value);
 8001a62:	230e      	movs	r3, #14
 8001a64:	446b      	add	r3, sp
 8001a66:	0018      	movs	r0, r3
 8001a68:	f004 fcfd 	bl	8006466 <atoi>
		isOK = TRUE;
 8001a6c:	2401      	movs	r4, #1
		s2Channel = atoi(c.value);
 8001a6e:	4bb2      	ldr	r3, [pc, #712]	@ (8001d38 <modifySettingsWithCommand+0x360>)
 8001a70:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001a72:	49b2      	ldr	r1, [pc, #712]	@ (8001d3c <modifySettingsWithCommand+0x364>)
 8001a74:	a801      	add	r0, sp, #4
 8001a76:	f7fe fb47 	bl	8000108 <strcmp>
 8001a7a:	2800      	cmp	r0, #0
 8001a7c:	d107      	bne.n	8001a8e <modifySettingsWithCommand+0xb6>
		armChannel = atoi(c.value);
 8001a7e:	230e      	movs	r3, #14
 8001a80:	446b      	add	r3, sp
 8001a82:	0018      	movs	r0, r3
 8001a84:	f004 fcef 	bl	8006466 <atoi>
		isOK = TRUE;
 8001a88:	2401      	movs	r4, #1
		armChannel = atoi(c.value);
 8001a8a:	4bad      	ldr	r3, [pc, #692]	@ (8001d40 <modifySettingsWithCommand+0x368>)
 8001a8c:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001a8e:	49ad      	ldr	r1, [pc, #692]	@ (8001d44 <modifySettingsWithCommand+0x36c>)
 8001a90:	a801      	add	r0, sp, #4
 8001a92:	f7fe fb39 	bl	8000108 <strcmp>
 8001a96:	2800      	cmp	r0, #0
 8001a98:	d107      	bne.n	8001aaa <modifySettingsWithCommand+0xd2>
		m1Rev = atoi(c.value);
 8001a9a:	230e      	movs	r3, #14
 8001a9c:	446b      	add	r3, sp
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f004 fce1 	bl	8006466 <atoi>
		isOK = TRUE;
 8001aa4:	2401      	movs	r4, #1
		m1Rev = atoi(c.value);
 8001aa6:	4ba8      	ldr	r3, [pc, #672]	@ (8001d48 <modifySettingsWithCommand+0x370>)
 8001aa8:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 8001aaa:	49a8      	ldr	r1, [pc, #672]	@ (8001d4c <modifySettingsWithCommand+0x374>)
 8001aac:	a801      	add	r0, sp, #4
 8001aae:	f7fe fb2b 	bl	8000108 <strcmp>
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	d107      	bne.n	8001ac6 <modifySettingsWithCommand+0xee>
		m2Rev = atoi(c.value);
 8001ab6:	230e      	movs	r3, #14
 8001ab8:	446b      	add	r3, sp
 8001aba:	0018      	movs	r0, r3
 8001abc:	f004 fcd3 	bl	8006466 <atoi>
		isOK = TRUE;
 8001ac0:	2401      	movs	r4, #1
		m2Rev = atoi(c.value);
 8001ac2:	4ba3      	ldr	r3, [pc, #652]	@ (8001d50 <modifySettingsWithCommand+0x378>)
 8001ac4:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 8001ac6:	49a3      	ldr	r1, [pc, #652]	@ (8001d54 <modifySettingsWithCommand+0x37c>)
 8001ac8:	a801      	add	r0, sp, #4
 8001aca:	f7fe fb1d 	bl	8000108 <strcmp>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d107      	bne.n	8001ae2 <modifySettingsWithCommand+0x10a>
		m3Rev = atoi(c.value);
 8001ad2:	230e      	movs	r3, #14
 8001ad4:	446b      	add	r3, sp
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f004 fcc5 	bl	8006466 <atoi>
		isOK = TRUE;
 8001adc:	2401      	movs	r4, #1
		m3Rev = atoi(c.value);
 8001ade:	4b9e      	ldr	r3, [pc, #632]	@ (8001d58 <modifySettingsWithCommand+0x380>)
 8001ae0:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 8001ae2:	499e      	ldr	r1, [pc, #632]	@ (8001d5c <modifySettingsWithCommand+0x384>)
 8001ae4:	a801      	add	r0, sp, #4
 8001ae6:	f7fe fb0f 	bl	8000108 <strcmp>
 8001aea:	2800      	cmp	r0, #0
 8001aec:	d107      	bne.n	8001afe <modifySettingsWithCommand+0x126>
		s1Rev = atoi(c.value);
 8001aee:	230e      	movs	r3, #14
 8001af0:	446b      	add	r3, sp
 8001af2:	0018      	movs	r0, r3
 8001af4:	f004 fcb7 	bl	8006466 <atoi>
		isOK = TRUE;
 8001af8:	2401      	movs	r4, #1
		s1Rev = atoi(c.value);
 8001afa:	4b99      	ldr	r3, [pc, #612]	@ (8001d60 <modifySettingsWithCommand+0x388>)
 8001afc:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 8001afe:	4999      	ldr	r1, [pc, #612]	@ (8001d64 <modifySettingsWithCommand+0x38c>)
 8001b00:	a801      	add	r0, sp, #4
 8001b02:	f7fe fb01 	bl	8000108 <strcmp>
 8001b06:	2800      	cmp	r0, #0
 8001b08:	d107      	bne.n	8001b1a <modifySettingsWithCommand+0x142>
		s2Rev = atoi(c.value);
 8001b0a:	230e      	movs	r3, #14
 8001b0c:	446b      	add	r3, sp
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f004 fca9 	bl	8006466 <atoi>
		isOK = TRUE;
 8001b14:	2401      	movs	r4, #1
		s2Rev = atoi(c.value);
 8001b16:	4b94      	ldr	r3, [pc, #592]	@ (8001d68 <modifySettingsWithCommand+0x390>)
 8001b18:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 8001b1a:	4994      	ldr	r1, [pc, #592]	@ (8001d6c <modifySettingsWithCommand+0x394>)
 8001b1c:	a801      	add	r0, sp, #4
 8001b1e:	f7fe faf3 	bl	8000108 <strcmp>
 8001b22:	2800      	cmp	r0, #0
 8001b24:	d120      	bne.n	8001b68 <modifySettingsWithCommand+0x190>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001b26:	230e      	movs	r3, #14
 8001b28:	446b      	add	r3, sp
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	4990      	ldr	r1, [pc, #576]	@ (8001d70 <modifySettingsWithCommand+0x398>)
 8001b2e:	f7fe faeb 	bl	8000108 <strcmp>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	d102      	bne.n	8001b3c <modifySettingsWithCommand+0x164>
			isOK = TRUE;
 8001b36:	2401      	movs	r4, #1
			mLeft = M1;
 8001b38:	4b8e      	ldr	r3, [pc, #568]	@ (8001d74 <modifySettingsWithCommand+0x39c>)
 8001b3a:	7018      	strb	r0, [r3, #0]
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001b3c:	230e      	movs	r3, #14
 8001b3e:	446b      	add	r3, sp
 8001b40:	0018      	movs	r0, r3
 8001b42:	498d      	ldr	r1, [pc, #564]	@ (8001d78 <modifySettingsWithCommand+0x3a0>)
 8001b44:	f7fe fae0 	bl	8000108 <strcmp>
 8001b48:	2800      	cmp	r0, #0
 8001b4a:	d102      	bne.n	8001b52 <modifySettingsWithCommand+0x17a>
			isOK = TRUE;
 8001b4c:	2401      	movs	r4, #1
			mRight = M1;
 8001b4e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d7c <modifySettingsWithCommand+0x3a4>)
 8001b50:	7018      	strb	r0, [r3, #0]
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001b52:	230e      	movs	r3, #14
 8001b54:	446b      	add	r3, sp
 8001b56:	0018      	movs	r0, r3
 8001b58:	4989      	ldr	r1, [pc, #548]	@ (8001d80 <modifySettingsWithCommand+0x3a8>)
 8001b5a:	f7fe fad5 	bl	8000108 <strcmp>
 8001b5e:	2800      	cmp	r0, #0
 8001b60:	d102      	bne.n	8001b68 <modifySettingsWithCommand+0x190>
			isOK = TRUE;
 8001b62:	2401      	movs	r4, #1
			mWeapon = M1;
 8001b64:	4b87      	ldr	r3, [pc, #540]	@ (8001d84 <modifySettingsWithCommand+0x3ac>)
 8001b66:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M2ASS) == 0) {
 8001b68:	4987      	ldr	r1, [pc, #540]	@ (8001d88 <modifySettingsWithCommand+0x3b0>)
 8001b6a:	a801      	add	r0, sp, #4
 8001b6c:	f7fe facc 	bl	8000108 <strcmp>
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d120      	bne.n	8001bb6 <modifySettingsWithCommand+0x1de>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001b74:	230e      	movs	r3, #14
 8001b76:	446b      	add	r3, sp
 8001b78:	0018      	movs	r0, r3
 8001b7a:	497d      	ldr	r1, [pc, #500]	@ (8001d70 <modifySettingsWithCommand+0x398>)
 8001b7c:	f7fe fac4 	bl	8000108 <strcmp>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	d102      	bne.n	8001b8a <modifySettingsWithCommand+0x1b2>
			mLeft = M2;
 8001b84:	2401      	movs	r4, #1
 8001b86:	4b7b      	ldr	r3, [pc, #492]	@ (8001d74 <modifySettingsWithCommand+0x39c>)
 8001b88:	701c      	strb	r4, [r3, #0]
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001b8a:	230e      	movs	r3, #14
 8001b8c:	446b      	add	r3, sp
 8001b8e:	0018      	movs	r0, r3
 8001b90:	4979      	ldr	r1, [pc, #484]	@ (8001d78 <modifySettingsWithCommand+0x3a0>)
 8001b92:	f7fe fab9 	bl	8000108 <strcmp>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	d102      	bne.n	8001ba0 <modifySettingsWithCommand+0x1c8>
			mRight = M2;
 8001b9a:	2401      	movs	r4, #1
 8001b9c:	4b77      	ldr	r3, [pc, #476]	@ (8001d7c <modifySettingsWithCommand+0x3a4>)
 8001b9e:	701c      	strb	r4, [r3, #0]
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001ba0:	230e      	movs	r3, #14
 8001ba2:	446b      	add	r3, sp
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	4976      	ldr	r1, [pc, #472]	@ (8001d80 <modifySettingsWithCommand+0x3a8>)
 8001ba8:	f7fe faae 	bl	8000108 <strcmp>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d102      	bne.n	8001bb6 <modifySettingsWithCommand+0x1de>
			mWeapon = M2;
 8001bb0:	2401      	movs	r4, #1
 8001bb2:	4b74      	ldr	r3, [pc, #464]	@ (8001d84 <modifySettingsWithCommand+0x3ac>)
 8001bb4:	701c      	strb	r4, [r3, #0]
	if (strcmp(c.type, COMMAND_M3ASS) == 0) {
 8001bb6:	4975      	ldr	r1, [pc, #468]	@ (8001d8c <modifySettingsWithCommand+0x3b4>)
 8001bb8:	a801      	add	r0, sp, #4
 8001bba:	f7fe faa5 	bl	8000108 <strcmp>
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	d123      	bne.n	8001c0a <modifySettingsWithCommand+0x232>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001bc2:	230e      	movs	r3, #14
 8001bc4:	446b      	add	r3, sp
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	4969      	ldr	r1, [pc, #420]	@ (8001d70 <modifySettingsWithCommand+0x398>)
 8001bca:	f7fe fa9d 	bl	8000108 <strcmp>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d103      	bne.n	8001bda <modifySettingsWithCommand+0x202>
			mLeft = M3;
 8001bd2:	2202      	movs	r2, #2
			isOK = TRUE;
 8001bd4:	2401      	movs	r4, #1
			mLeft = M3;
 8001bd6:	4b67      	ldr	r3, [pc, #412]	@ (8001d74 <modifySettingsWithCommand+0x39c>)
 8001bd8:	701a      	strb	r2, [r3, #0]
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001bda:	230e      	movs	r3, #14
 8001bdc:	446b      	add	r3, sp
 8001bde:	0018      	movs	r0, r3
 8001be0:	4965      	ldr	r1, [pc, #404]	@ (8001d78 <modifySettingsWithCommand+0x3a0>)
 8001be2:	f7fe fa91 	bl	8000108 <strcmp>
 8001be6:	2800      	cmp	r0, #0
 8001be8:	d103      	bne.n	8001bf2 <modifySettingsWithCommand+0x21a>
			mRight = M3;
 8001bea:	2202      	movs	r2, #2
			isOK = TRUE;
 8001bec:	2401      	movs	r4, #1
			mRight = M3;
 8001bee:	4b63      	ldr	r3, [pc, #396]	@ (8001d7c <modifySettingsWithCommand+0x3a4>)
 8001bf0:	701a      	strb	r2, [r3, #0]
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001bf2:	230e      	movs	r3, #14
 8001bf4:	446b      	add	r3, sp
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	4961      	ldr	r1, [pc, #388]	@ (8001d80 <modifySettingsWithCommand+0x3a8>)
 8001bfa:	f7fe fa85 	bl	8000108 <strcmp>
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d103      	bne.n	8001c0a <modifySettingsWithCommand+0x232>
			mWeapon = M3;
 8001c02:	2202      	movs	r2, #2
			isOK = TRUE;
 8001c04:	2401      	movs	r4, #1
			mWeapon = M3;
 8001c06:	4b5f      	ldr	r3, [pc, #380]	@ (8001d84 <modifySettingsWithCommand+0x3ac>)
 8001c08:	701a      	strb	r2, [r3, #0]
	if (strcmp(c.type, COMMAND_WPDD) == 0) {
 8001c0a:	4961      	ldr	r1, [pc, #388]	@ (8001d90 <modifySettingsWithCommand+0x3b8>)
 8001c0c:	a801      	add	r0, sp, #4
 8001c0e:	f7fe fa7b 	bl	8000108 <strcmp>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d107      	bne.n	8001c26 <modifySettingsWithCommand+0x24e>
		weaponDoubleDirection = atoi(c.value);
 8001c16:	230e      	movs	r3, #14
 8001c18:	446b      	add	r3, sp
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f004 fc23 	bl	8006466 <atoi>
		isOK = TRUE;
 8001c20:	2401      	movs	r4, #1
		weaponDoubleDirection = atoi(c.value);
 8001c22:	4b5c      	ldr	r3, [pc, #368]	@ (8001d94 <modifySettingsWithCommand+0x3bc>)
 8001c24:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_TANKON) == 0) {
 8001c26:	495c      	ldr	r1, [pc, #368]	@ (8001d98 <modifySettingsWithCommand+0x3c0>)
 8001c28:	a801      	add	r0, sp, #4
 8001c2a:	f7fe fa6d 	bl	8000108 <strcmp>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	d107      	bne.n	8001c42 <modifySettingsWithCommand+0x26a>
		tankMixIsON = atoi(c.value);
 8001c32:	230e      	movs	r3, #14
 8001c34:	446b      	add	r3, sp
 8001c36:	0018      	movs	r0, r3
 8001c38:	f004 fc15 	bl	8006466 <atoi>
		isOK = TRUE;
 8001c3c:	2401      	movs	r4, #1
		tankMixIsON = atoi(c.value);
 8001c3e:	4b57      	ldr	r3, [pc, #348]	@ (8001d9c <modifySettingsWithCommand+0x3c4>)
 8001c40:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_NODISARM) == 0) {
 8001c42:	4957      	ldr	r1, [pc, #348]	@ (8001da0 <modifySettingsWithCommand+0x3c8>)
 8001c44:	a801      	add	r0, sp, #4
 8001c46:	f7fe fa5f 	bl	8000108 <strcmp>
 8001c4a:	2800      	cmp	r0, #0
 8001c4c:	d107      	bne.n	8001c5e <modifySettingsWithCommand+0x286>
		noDisarm = atoi(c.value);
 8001c4e:	230e      	movs	r3, #14
 8001c50:	446b      	add	r3, sp
 8001c52:	0018      	movs	r0, r3
 8001c54:	f004 fc07 	bl	8006466 <atoi>
		isOK = TRUE;
 8001c58:	2401      	movs	r4, #1
		noDisarm = atoi(c.value);
 8001c5a:	4b52      	ldr	r3, [pc, #328]	@ (8001da4 <modifySettingsWithCommand+0x3cc>)
 8001c5c:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_LIMITVOLTAGE) == 0) {
 8001c5e:	4952      	ldr	r1, [pc, #328]	@ (8001da8 <modifySettingsWithCommand+0x3d0>)
 8001c60:	a801      	add	r0, sp, #4
 8001c62:	f7fe fa51 	bl	8000108 <strcmp>
 8001c66:	2800      	cmp	r0, #0
 8001c68:	d107      	bne.n	8001c7a <modifySettingsWithCommand+0x2a2>
		limitVoltage = atoi(c.value);
 8001c6a:	230e      	movs	r3, #14
 8001c6c:	446b      	add	r3, sp
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f004 fbf9 	bl	8006466 <atoi>
		isOK = TRUE;
 8001c74:	2401      	movs	r4, #1
		limitVoltage = atoi(c.value);
 8001c76:	4b4d      	ldr	r3, [pc, #308]	@ (8001dac <modifySettingsWithCommand+0x3d4>)
 8001c78:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_CUTOFFVOLTAGE) == 0) {
 8001c7a:	494d      	ldr	r1, [pc, #308]	@ (8001db0 <modifySettingsWithCommand+0x3d8>)
 8001c7c:	a801      	add	r0, sp, #4
 8001c7e:	f7fe fa43 	bl	8000108 <strcmp>
 8001c82:	2800      	cmp	r0, #0
 8001c84:	d107      	bne.n	8001c96 <modifySettingsWithCommand+0x2be>
		cutOffVoltage = atoi(c.value);
 8001c86:	230e      	movs	r3, #14
 8001c88:	446b      	add	r3, sp
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f004 fbeb 	bl	8006466 <atoi>
		isOK = TRUE;
 8001c90:	2401      	movs	r4, #1
		cutOffVoltage = atoi(c.value);
 8001c92:	4b48      	ldr	r3, [pc, #288]	@ (8001db4 <modifySettingsWithCommand+0x3dc>)
 8001c94:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_RXPWMMODE) == 0) {
 8001c96:	4948      	ldr	r1, [pc, #288]	@ (8001db8 <modifySettingsWithCommand+0x3e0>)
 8001c98:	a801      	add	r0, sp, #4
 8001c9a:	f7fe fa35 	bl	8000108 <strcmp>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d107      	bne.n	8001cb2 <modifySettingsWithCommand+0x2da>
		recieverIsPWM = atoi(c.value);
 8001ca2:	230e      	movs	r3, #14
 8001ca4:	446b      	add	r3, sp
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f004 fbdd 	bl	8006466 <atoi>
		isOK = TRUE;
 8001cac:	2401      	movs	r4, #1
		recieverIsPWM = atoi(c.value);
 8001cae:	4b43      	ldr	r3, [pc, #268]	@ (8001dbc <modifySettingsWithCommand+0x3e4>)
 8001cb0:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_SAVE) == 0) {
 8001cb2:	4943      	ldr	r1, [pc, #268]	@ (8001dc0 <modifySettingsWithCommand+0x3e8>)
 8001cb4:	a801      	add	r0, sp, #4
 8001cb6:	f7fe fa27 	bl	8000108 <strcmp>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d102      	bne.n	8001cc4 <modifySettingsWithCommand+0x2ec>
		storeSettingsToEeprom();
 8001cbe:	f7ff fcd5 	bl	800166c <storeSettingsToEeprom>
		isOK = TRUE;
 8001cc2:	2401      	movs	r4, #1
	if (strcmp(c.type, COMMAND_READ) == 0) {
 8001cc4:	493f      	ldr	r1, [pc, #252]	@ (8001dc4 <modifySettingsWithCommand+0x3ec>)
 8001cc6:	a801      	add	r0, sp, #4
 8001cc8:	f7fe fa1e 	bl	8000108 <strcmp>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d104      	bne.n	8001cda <modifySettingsWithCommand+0x302>
		readSettingsFromEeprom();
 8001cd0:	f7ff fc1a 	bl	8001508 <readSettingsFromEeprom>
		isOK = TRUE;
 8001cd4:	2401      	movs	r4, #1
		serialPrintSettings();
 8001cd6:	f7ff fdc5 	bl	8001864 <serialPrintSettings>
	if (strcmp(c.type, COMMAND_CONNECTED) == 0) {
 8001cda:	493b      	ldr	r1, [pc, #236]	@ (8001dc8 <modifySettingsWithCommand+0x3f0>)
 8001cdc:	a801      	add	r0, sp, #4
 8001cde:	f7fe fa13 	bl	8000108 <strcmp>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d100      	bne.n	8001ce8 <modifySettingsWithCommand+0x310>
		isOK = TRUE;
 8001ce6:	2401      	movs	r4, #1
	if (strcmp(c.type, COMMAND_STATUS) == 0) {
 8001ce8:	4938      	ldr	r1, [pc, #224]	@ (8001dcc <modifySettingsWithCommand+0x3f4>)
 8001cea:	a801      	add	r0, sp, #4
 8001cec:	f7fe fa0c 	bl	8000108 <strcmp>
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	d102      	bne.n	8001cfa <modifySettingsWithCommand+0x322>
		serialPrintStatus();
 8001cf4:	f7ff fd4e 	bl	8001794 <serialPrintStatus>
		isOK = TRUE;
 8001cf8:	2401      	movs	r4, #1
	sprintf(recievedString, "%s, %s", c.type, c.value);
 8001cfa:	230e      	movs	r3, #14
 8001cfc:	4934      	ldr	r1, [pc, #208]	@ (8001dd0 <modifySettingsWithCommand+0x3f8>)
 8001cfe:	446b      	add	r3, sp
 8001d00:	aa01      	add	r2, sp, #4
 8001d02:	4834      	ldr	r0, [pc, #208]	@ (8001dd4 <modifySettingsWithCommand+0x3fc>)
 8001d04:	f004 fd10 	bl	8006728 <siprintf>
}
 8001d08:	0020      	movs	r0, r4
 8001d0a:	b006      	add	sp, #24
 8001d0c:	bd10      	pop	{r4, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	200007ee 	.word	0x200007ee
 8001d14:	08007ad9 	.word	0x08007ad9
 8001d18:	20000011 	.word	0x20000011
 8001d1c:	08007adf 	.word	0x08007adf
 8001d20:	20000010 	.word	0x20000010
 8001d24:	08007ae5 	.word	0x08007ae5
 8001d28:	2000000f 	.word	0x2000000f
 8001d2c:	08007aeb 	.word	0x08007aeb
 8001d30:	2000000e 	.word	0x2000000e
 8001d34:	08007af1 	.word	0x08007af1
 8001d38:	2000000d 	.word	0x2000000d
 8001d3c:	08007af7 	.word	0x08007af7
 8001d40:	2000000c 	.word	0x2000000c
 8001d44:	08007afe 	.word	0x08007afe
 8001d48:	2000000b 	.word	0x2000000b
 8001d4c:	08007b04 	.word	0x08007b04
 8001d50:	2000000a 	.word	0x2000000a
 8001d54:	08007b0a 	.word	0x08007b0a
 8001d58:	20000546 	.word	0x20000546
 8001d5c:	08007b10 	.word	0x08007b10
 8001d60:	20000545 	.word	0x20000545
 8001d64:	08007b16 	.word	0x08007b16
 8001d68:	20000544 	.word	0x20000544
 8001d6c:	08007b1c 	.word	0x08007b1c
 8001d70:	08007b22 	.word	0x08007b22
 8001d74:	20000543 	.word	0x20000543
 8001d78:	08007b25 	.word	0x08007b25
 8001d7c:	20000009 	.word	0x20000009
 8001d80:	08007b28 	.word	0x08007b28
 8001d84:	20000008 	.word	0x20000008
 8001d88:	08007b2b 	.word	0x08007b2b
 8001d8c:	08007b31 	.word	0x08007b31
 8001d90:	08007b37 	.word	0x08007b37
 8001d94:	20000542 	.word	0x20000542
 8001d98:	08007b3c 	.word	0x08007b3c
 8001d9c:	20000007 	.word	0x20000007
 8001da0:	08007b42 	.word	0x08007b42
 8001da4:	20000006 	.word	0x20000006
 8001da8:	08007b4b 	.word	0x08007b4b
 8001dac:	20000005 	.word	0x20000005
 8001db0:	08007b50 	.word	0x08007b50
 8001db4:	20000004 	.word	0x20000004
 8001db8:	08007b58 	.word	0x08007b58
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	08007b5e 	.word	0x08007b5e
 8001dc4:	08007b63 	.word	0x08007b63
 8001dc8:	08007b68 	.word	0x08007b68
 8001dcc:	08007b6c 	.word	0x08007b6c
 8001dd0:	08007b73 	.word	0x08007b73
 8001dd4:	20000528 	.word	0x20000528

08001dd8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd8:	2101      	movs	r1, #1
 8001dda:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <HAL_MspInit+0x2c>)
{
 8001ddc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dde:	699a      	ldr	r2, [r3, #24]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	619a      	str	r2, [r3, #24]
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de8:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	9200      	str	r2, [sp, #0]
 8001dec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	69da      	ldr	r2, [r3, #28]
 8001df0:	0549      	lsls	r1, r1, #21
 8001df2:	430a      	orrs	r2, r1
 8001df4:	61da      	str	r2, [r3, #28]
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	400b      	ands	r3, r1
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfe:	b002      	add	sp, #8
 8001e00:	4770      	bx	lr
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	0004      	movs	r4, r0
 8001e0c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	2214      	movs	r2, #20
 8001e10:	2100      	movs	r1, #0
 8001e12:	a803      	add	r0, sp, #12
 8001e14:	f004 fcf4 	bl	8006800 <memset>
  if(hadc->Instance==ADC1)
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_ADC_MspInit+0x54>)
 8001e1a:	6822      	ldr	r2, [r4, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d11b      	bne.n	8001e58 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <HAL_ADC_MspInit+0x58>)
 8001e24:	0089      	lsls	r1, r1, #2
 8001e26:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	619a      	str	r2, [r3, #24]
 8001e2e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e30:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e32:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e34:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e36:	9201      	str	r2, [sp, #4]
 8001e38:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	0289      	lsls	r1, r1, #10
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	615a      	str	r2, [r3, #20]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	400b      	ands	r3, r1
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8001e4a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8001e4e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e50:	3b04      	subs	r3, #4
 8001e52:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f000 fd26 	bl	80028a4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e58:	b008      	add	sp, #32
 8001e5a:	bd10      	pop	{r4, pc}
 8001e5c:	40012400 	.word	0x40012400
 8001e60:	40021000 	.word	0x40021000

08001e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b510      	push	{r4, lr}
 8001e66:	0004      	movs	r4, r0
 8001e68:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6a:	2214      	movs	r2, #20
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	a803      	add	r0, sp, #12
 8001e70:	f004 fcc6 	bl	8006800 <memset>
  if(hi2c->Instance==I2C1)
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <HAL_I2C_MspInit+0x60>)
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d120      	bne.n	8001ebe <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7c:	2280      	movs	r2, #128	@ 0x80
 8001e7e:	4c12      	ldr	r4, [pc, #72]	@ (8001ec8 <HAL_I2C_MspInit+0x64>)
 8001e80:	02d2      	lsls	r2, r2, #11
 8001e82:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	4811      	ldr	r0, [pc, #68]	@ (8001ecc <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	4313      	orrs	r3, r2
 8001e88:	6163      	str	r3, [r4, #20]
 8001e8a:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	4013      	ands	r3, r2
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e94:	23c0      	movs	r3, #192	@ 0xc0
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9a:	2312      	movs	r3, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9c:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea0:	3b11      	subs	r3, #17
 8001ea2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea4:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001ea6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	f000 fcfc 	bl	80028a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eac:	2280      	movs	r2, #128	@ 0x80
 8001eae:	69e3      	ldr	r3, [r4, #28]
 8001eb0:	0392      	lsls	r2, r2, #14
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61e3      	str	r3, [r4, #28]
 8001eb6:	69e3      	ldr	r3, [r4, #28]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	9b02      	ldr	r3, [sp, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ebe:	b008      	add	sp, #32
 8001ec0:	bd10      	pop	{r4, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	40005400 	.word	0x40005400
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000400 	.word	0x48000400

08001ed0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed0:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM1)
 8001ed2:	6803      	ldr	r3, [r0, #0]
 8001ed4:	4a3d      	ldr	r2, [pc, #244]	@ (8001fcc <HAL_TIM_Base_MspInit+0xfc>)
{
 8001ed6:	0005      	movs	r5, r0
 8001ed8:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM1)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d125      	bne.n	8001f2a <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ede:	2380      	movs	r3, #128	@ 0x80
 8001ee0:	4a3b      	ldr	r2, [pc, #236]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x100>)
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	6991      	ldr	r1, [r2, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH3_UP Init */
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8001ee6:	4c3b      	ldr	r4, [pc, #236]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x104>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee8:	4319      	orrs	r1, r3
 8001eea:	6191      	str	r1, [r2, #24]
 8001eec:	6992      	ldr	r2, [r2, #24]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001eee:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	9201      	str	r2, [sp, #4]
 8001ef4:	9a01      	ldr	r2, [sp, #4]
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8001ef6:	4a38      	ldr	r2, [pc, #224]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x108>)
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_tim1_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ef8:	6163      	str	r3, [r4, #20]
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8001efa:	6022      	str	r2, [r4, #0]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001efc:	2210      	movs	r2, #16
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8001efe:	2320      	movs	r3, #32
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f00:	6062      	str	r2, [r4, #4]
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f02:	2200      	movs	r2, #0
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8001f04:	60e1      	str	r1, [r4, #12]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f06:	3181      	adds	r1, #129	@ 0x81
 8001f08:	31ff      	adds	r1, #255	@ 0xff
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8001f0a:	0020      	movs	r0, r4
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0c:	60a2      	str	r2, [r4, #8]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f0e:	6121      	str	r1, [r4, #16]
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8001f10:	61a3      	str	r3, [r4, #24]
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 8001f12:	61e2      	str	r2, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8001f14:	f000 fc1c 	bl	8002750 <HAL_DMA_Init>
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8001f1c:	f7fe ff98 	bl	8000e50 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
 8001f20:	62ec      	str	r4, [r5, #44]	@ 0x2c
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8001f22:	622c      	str	r4, [r5, #32]
 8001f24:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f26:	b007      	add	sp, #28
 8001f28:	bd30      	pop	{r4, r5, pc}
  else if(htim_base->Instance==TIM3)
 8001f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001fdc <HAL_TIM_Base_MspInit+0x10c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d123      	bne.n	8001f78 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f30:	2102      	movs	r1, #2
 8001f32:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x100>)
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001f34:	4c2a      	ldr	r4, [pc, #168]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x110>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f36:	69da      	ldr	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001f38:	0020      	movs	r0, r4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001f3e:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f40:	69db      	ldr	r3, [r3, #28]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8001f42:	60e2      	str	r2, [r4, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f44:	400b      	ands	r3, r1
 8001f46:	9302      	str	r3, [sp, #8]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f48:	3281      	adds	r2, #129	@ 0x81
 8001f4a:	32ff      	adds	r2, #255	@ 0xff
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f4c:	9b02      	ldr	r3, [sp, #8]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001f4e:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x114>)
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f50:	6122      	str	r2, [r4, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f52:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8001f54:	6023      	str	r3, [r4, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f56:	2310      	movs	r3, #16
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f58:	0112      	lsls	r2, r2, #4
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f5a:	6063      	str	r3, [r4, #4]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f5c:	6162      	str	r2, [r4, #20]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5e:	2300      	movs	r3, #0
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8001f60:	2220      	movs	r2, #32
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f62:	60a3      	str	r3, [r4, #8]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8001f64:	61a2      	str	r2, [r4, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8001f66:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8001f68:	f000 fbf2 	bl	8002750 <HAL_DMA_Init>
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001f70:	f7fe ff6e 	bl	8000e50 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8001f74:	632c      	str	r4, [r5, #48]	@ 0x30
 8001f76:	e7d4      	b.n	8001f22 <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM6)
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x118>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d109      	bne.n	8001f92 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f7e:	2110      	movs	r1, #16
 8001f80:	4b13      	ldr	r3, [pc, #76]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x100>)
 8001f82:	69da      	ldr	r2, [r3, #28]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	61da      	str	r2, [r3, #28]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	9303      	str	r3, [sp, #12]
 8001f8e:	9b03      	ldr	r3, [sp, #12]
 8001f90:	e7c9      	b.n	8001f26 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM16)
 8001f92:	4a16      	ldr	r2, [pc, #88]	@ (8001fec <HAL_TIM_Base_MspInit+0x11c>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d10a      	bne.n	8001fae <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f98:	2180      	movs	r1, #128	@ 0x80
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x100>)
 8001f9c:	0289      	lsls	r1, r1, #10
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	619a      	str	r2, [r3, #24]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	9304      	str	r3, [sp, #16]
 8001faa:	9b04      	ldr	r3, [sp, #16]
 8001fac:	e7bb      	b.n	8001f26 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 8001fae:	4a10      	ldr	r2, [pc, #64]	@ (8001ff0 <HAL_TIM_Base_MspInit+0x120>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d1b8      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <HAL_TIM_Base_MspInit+0x100>)
 8001fb8:	02c9      	lsls	r1, r1, #11
 8001fba:	699a      	ldr	r2, [r3, #24]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	619a      	str	r2, [r3, #24]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	9305      	str	r3, [sp, #20]
 8001fc6:	9b05      	ldr	r3, [sp, #20]
}
 8001fc8:	e7ad      	b.n	8001f26 <HAL_TIM_Base_MspInit+0x56>
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	40012c00 	.word	0x40012c00
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	20000598 	.word	0x20000598
 8001fd8:	40020058 	.word	0x40020058
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	20000554 	.word	0x20000554
 8001fe4:	40020030 	.word	0x40020030
 8001fe8:	40001000 	.word	0x40001000
 8001fec:	40014400 	.word	0x40014400
 8001ff0:	40014800 	.word	0x40014800

08001ff4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ff4:	b510      	push	{r4, lr}
 8001ff6:	0004      	movs	r4, r0
 8001ff8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	2214      	movs	r2, #20
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	a803      	add	r0, sp, #12
 8002000:	f004 fbfe 	bl	8006800 <memset>
  if(htim->Instance==TIM16)
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <HAL_TIM_MspPostInit+0x64>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d114      	bne.n	8002036 <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	2180      	movs	r1, #128	@ 0x80
 800200e:	4b13      	ldr	r3, [pc, #76]	@ (800205c <HAL_TIM_MspPostInit+0x68>)
 8002010:	02c9      	lsls	r1, r1, #11
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	430a      	orrs	r2, r1
 8002016:	615a      	str	r2, [r3, #20]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	400b      	ands	r3, r1
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	9b01      	ldr	r3, [sp, #4]
    /**TIM16 GPIO Configuration
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = SERVO1_HV_Pin;
 8002020:	2340      	movs	r3, #64	@ 0x40
 8002022:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	3b3e      	subs	r3, #62	@ 0x3e
    GPIO_InitStruct.Pin = SERVO2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8002026:	480e      	ldr	r0, [pc, #56]	@ (8002060 <HAL_TIM_MspPostInit+0x6c>)
 8002028:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800202c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 800202e:	f000 fc39 	bl	80028a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002032:	b008      	add	sp, #32
 8002034:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM17)
 8002036:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <HAL_TIM_MspPostInit+0x70>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d1fa      	bne.n	8002032 <HAL_TIM_MspPostInit+0x3e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203c:	2180      	movs	r1, #128	@ 0x80
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_TIM_MspPostInit+0x68>)
 8002040:	02c9      	lsls	r1, r1, #11
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	430a      	orrs	r2, r1
 8002046:	615a      	str	r2, [r3, #20]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	400b      	ands	r3, r1
 800204c:	9302      	str	r3, [sp, #8]
 800204e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	3b7e      	subs	r3, #126	@ 0x7e
 8002056:	e7e6      	b.n	8002026 <HAL_TIM_MspPostInit+0x32>
 8002058:	40014400 	.word	0x40014400
 800205c:	40021000 	.word	0x40021000
 8002060:	48000400 	.word	0x48000400
 8002064:	40014800 	.word	0x40014800

08002068 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002068:	e7fe      	b.n	8002068 <NMI_Handler>

0800206a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <HardFault_Handler>

0800206c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800206e:	4770      	bx	lr

08002070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002070:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002072:	f000 f8df 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002076:	bd10      	pop	{r4, pc}

08002078 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002078:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH1_Pin);
 800207a:	2001      	movs	r0, #1
 800207c:	f000 fcde 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH2_Pin);
 8002080:	2002      	movs	r0, #2
 8002082:	f000 fcdb 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002086:	bd10      	pop	{r4, pc}

08002088 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002088:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH3_Pin);
 800208a:	2004      	movs	r0, #4
 800208c:	f000 fcd6 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH4_Pin);
 8002090:	2008      	movs	r0, #8
 8002092:	f000 fcd3 	bl	8002a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002096:	bd10      	pop	{r4, pc}

08002098 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002098:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 800209a:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <DMA1_Channel2_3_IRQHandler+0xc>)
 800209c:	f000 fbb8 	bl	8002810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80020a0:	bd10      	pop	{r4, pc}
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	20000554 	.word	0x20000554

080020a8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80020a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3_up);
 80020aa:	4802      	ldr	r0, [pc, #8]	@ (80020b4 <DMA1_Channel4_5_IRQHandler+0xc>)
 80020ac:	f000 fbb0 	bl	8002810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80020b0:	bd10      	pop	{r4, pc}
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	20000598 	.word	0x20000598

080020b8 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80020b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80020ba:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <USB_IRQHandler+0xc>)
 80020bc:	f001 f8cc 	bl	8003258 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80020c0:	bd10      	pop	{r4, pc}
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	20001720 	.word	0x20001720

080020c8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80020c8:	2001      	movs	r0, #1
 80020ca:	4770      	bx	lr

080020cc <_kill>:

int _kill(int pid, int sig)
{
 80020cc:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ce:	f004 fc4d 	bl	800696c <__errno>
 80020d2:	2316      	movs	r3, #22
 80020d4:	6003      	str	r3, [r0, #0]
  return -1;
 80020d6:	2001      	movs	r0, #1
}
 80020d8:	4240      	negs	r0, r0
 80020da:	bd10      	pop	{r4, pc}

080020dc <_exit>:

void _exit (int status)
{
 80020dc:	b510      	push	{r4, lr}
  errno = EINVAL;
 80020de:	f004 fc45 	bl	800696c <__errno>
 80020e2:	2316      	movs	r3, #22
 80020e4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80020e6:	e7fe      	b.n	80020e6 <_exit+0xa>

080020e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	000e      	movs	r6, r1
 80020ec:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	2500      	movs	r5, #0
 80020f0:	42a5      	cmp	r5, r4
 80020f2:	db01      	blt.n	80020f8 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80020f4:	0020      	movs	r0, r4
 80020f6:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80020f8:	e000      	b.n	80020fc <_read+0x14>
 80020fa:	bf00      	nop
 80020fc:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	3501      	adds	r5, #1
 8002100:	e7f6      	b.n	80020f0 <_read+0x8>

08002102 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002102:	b570      	push	{r4, r5, r6, lr}
 8002104:	000e      	movs	r6, r1
 8002106:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002108:	2500      	movs	r5, #0
 800210a:	42a5      	cmp	r5, r4
 800210c:	db01      	blt.n	8002112 <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800210e:	0020      	movs	r0, r4
 8002110:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8002112:	5d70      	ldrb	r0, [r6, r5]
 8002114:	e000      	b.n	8002118 <_write+0x16>
 8002116:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002118:	3501      	adds	r5, #1
 800211a:	e7f6      	b.n	800210a <_write+0x8>

0800211c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 800211c:	2001      	movs	r0, #1
}
 800211e:	4240      	negs	r0, r0
 8002120:	4770      	bx	lr

08002122 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	019b      	lsls	r3, r3, #6
  return 0;
}
 8002126:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002128:	604b      	str	r3, [r1, #4]
}
 800212a:	4770      	bx	lr

0800212c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800212c:	2001      	movs	r0, #1
 800212e:	4770      	bx	lr

08002130 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002130:	2000      	movs	r0, #0
 8002132:	4770      	bx	lr

08002134 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002134:	490b      	ldr	r1, [pc, #44]	@ (8002164 <_sbrk+0x30>)
 8002136:	4a0c      	ldr	r2, [pc, #48]	@ (8002168 <_sbrk+0x34>)
{
 8002138:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800213a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800213c:	490b      	ldr	r1, [pc, #44]	@ (800216c <_sbrk+0x38>)
{
 800213e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002140:	6808      	ldr	r0, [r1, #0]
 8002142:	2800      	cmp	r0, #0
 8002144:	d101      	bne.n	800214a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002146:	480a      	ldr	r0, [pc, #40]	@ (8002170 <_sbrk+0x3c>)
 8002148:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800214a:	6808      	ldr	r0, [r1, #0]
 800214c:	18c3      	adds	r3, r0, r3
 800214e:	4293      	cmp	r3, r2
 8002150:	d906      	bls.n	8002160 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002152:	f004 fc0b 	bl	800696c <__errno>
 8002156:	230c      	movs	r3, #12
 8002158:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800215a:	2001      	movs	r0, #1
 800215c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800215e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002160:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8002162:	e7fc      	b.n	800215e <_sbrk+0x2a>
 8002164:	00000400 	.word	0x00000400
 8002168:	20004000 	.word	0x20004000
 800216c:	20000830 	.word	0x20000830
 8002170:	20001b48 	.word	0x20001b48

08002174 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002174:	4770      	bx	lr
	...

08002178 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002178:	480d      	ldr	r0, [pc, #52]	@ (80021b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800217a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/

  bl  SystemInit
 800217c:	f7ff fffa 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480c      	ldr	r0, [pc, #48]	@ (80021b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002182:	490d      	ldr	r1, [pc, #52]	@ (80021b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002184:	4a0d      	ldr	r2, [pc, #52]	@ (80021bc <LoopForever+0xe>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002198:	4c0a      	ldr	r4, [pc, #40]	@ (80021c4 <LoopForever+0x16>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021a6:	f004 fbe7 	bl	8006978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021aa:	f7fe fa55 	bl	8000658 <main>

080021ae <LoopForever>:

LoopForever:
    b LoopForever
 80021ae:	e7fe      	b.n	80021ae <LoopForever>
  ldr   r0, =_estack
 80021b0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80021bc:	08007dd8 	.word	0x08007dd8
  ldr r2, =_sbss
 80021c0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80021c4:	20001b48 	.word	0x20001b48

080021c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c8:	e7fe      	b.n	80021c8 <ADC1_IRQHandler>
	...

080021cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021cc:	b570      	push	{r4, r5, r6, lr}
 80021ce:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d0:	20fa      	movs	r0, #250	@ 0xfa
 80021d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002208 <HAL_InitTick+0x3c>)
 80021d4:	0080      	lsls	r0, r0, #2
 80021d6:	7819      	ldrb	r1, [r3, #0]
 80021d8:	f7fd ffc6 	bl	8000168 <__udivsi3>
 80021dc:	4c0b      	ldr	r4, [pc, #44]	@ (800220c <HAL_InitTick+0x40>)
 80021de:	0001      	movs	r1, r0
 80021e0:	6820      	ldr	r0, [r4, #0]
 80021e2:	f7fd ffc1 	bl	8000168 <__udivsi3>
 80021e6:	f000 fa99 	bl	800271c <HAL_SYSTICK_Config>
 80021ea:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 80021ec:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ee:	2c00      	cmp	r4, #0
 80021f0:	d109      	bne.n	8002206 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f2:	2d03      	cmp	r5, #3
 80021f4:	d807      	bhi.n	8002206 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f6:	3802      	subs	r0, #2
 80021f8:	0022      	movs	r2, r4
 80021fa:	0029      	movs	r1, r5
 80021fc:	f000 fa58 	bl	80026b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002200:	0020      	movs	r0, r4
 8002202:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_InitTick+0x44>)
 8002204:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002206:	bd70      	pop	{r4, r5, r6, pc}
 8002208:	20000018 	.word	0x20000018
 800220c:	20000014 	.word	0x20000014
 8002210:	2000001c 	.word	0x2000001c

08002214 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002214:	2310      	movs	r3, #16
 8002216:	4a06      	ldr	r2, [pc, #24]	@ (8002230 <HAL_Init+0x1c>)
{
 8002218:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800221c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800221e:	430b      	orrs	r3, r1
 8002220:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002222:	f7ff ffd3 	bl	80021cc <HAL_InitTick>
  HAL_MspInit();
 8002226:	f7ff fdd7 	bl	8001dd8 <HAL_MspInit>
}
 800222a:	2000      	movs	r0, #0
 800222c:	bd10      	pop	{r4, pc}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	40022000 	.word	0x40022000

08002234 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002234:	4a03      	ldr	r2, [pc, #12]	@ (8002244 <HAL_IncTick+0x10>)
 8002236:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <HAL_IncTick+0x14>)
 8002238:	6811      	ldr	r1, [r2, #0]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	185b      	adds	r3, r3, r1
 800223e:	6013      	str	r3, [r2, #0]
}
 8002240:	4770      	bx	lr
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	20000834 	.word	0x20000834
 8002248:	20000018 	.word	0x20000018

0800224c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800224c:	4b01      	ldr	r3, [pc, #4]	@ (8002254 <HAL_GetTick+0x8>)
 800224e:	6818      	ldr	r0, [r3, #0]
}
 8002250:	4770      	bx	lr
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	20000834 	.word	0x20000834

08002258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff fff6 	bl	800224c <HAL_GetTick>
 8002260:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002262:	1c63      	adds	r3, r4, #1
 8002264:	d002      	beq.n	800226c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002266:	4b04      	ldr	r3, [pc, #16]	@ (8002278 <HAL_Delay+0x20>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800226c:	f7ff ffee 	bl	800224c <HAL_GetTick>
 8002270:	1b40      	subs	r0, r0, r5
 8002272:	42a0      	cmp	r0, r4
 8002274:	d3fa      	bcc.n	800226c <HAL_Delay+0x14>
  {
  }
}
 8002276:	bd70      	pop	{r4, r5, r6, pc}
 8002278:	20000018 	.word	0x20000018

0800227c <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800227c:	2204      	movs	r2, #4
 800227e:	6803      	ldr	r3, [r0, #0]
{
 8002280:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002282:	6899      	ldr	r1, [r3, #8]
{
 8002284:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002286:	4211      	tst	r1, r2
 8002288:	d101      	bne.n	800228e <ADC_ConversionStop+0x12>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800228a:	2000      	movs	r0, #0
}
 800228c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800228e:	6899      	ldr	r1, [r3, #8]
 8002290:	4211      	tst	r1, r2
 8002292:	d006      	beq.n	80022a2 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002294:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002296:	0792      	lsls	r2, r2, #30
 8002298:	d403      	bmi.n	80022a2 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800229a:	2210      	movs	r2, #16
 800229c:	6899      	ldr	r1, [r3, #8]
 800229e:	430a      	orrs	r2, r1
 80022a0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80022a2:	f7ff ffd3 	bl	800224c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80022a6:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 80022a8:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	4233      	tst	r3, r6
 80022b0:	d0eb      	beq.n	800228a <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022b2:	f7ff ffcb 	bl	800224c <HAL_GetTick>
 80022b6:	1b40      	subs	r0, r0, r5
 80022b8:	2802      	cmp	r0, #2
 80022ba:	d9f6      	bls.n	80022aa <ADC_ConversionStop+0x2e>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4233      	tst	r3, r6
 80022c2:	d0f2      	beq.n	80022aa <ADC_ConversionStop+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c4:	2310      	movs	r3, #16
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80022ca:	4313      	orrs	r3, r2
 80022cc:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80022d0:	4303      	orrs	r3, r0
 80022d2:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80022d4:	e7da      	b.n	800228c <ADC_ConversionStop+0x10>

080022d6 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022d6:	2103      	movs	r1, #3
 80022d8:	6803      	ldr	r3, [r0, #0]
{
 80022da:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022dc:	689a      	ldr	r2, [r3, #8]
{
 80022de:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022e0:	400a      	ands	r2, r1
 80022e2:	2a01      	cmp	r2, #1
 80022e4:	d001      	beq.n	80022ea <ADC_Disable+0x14>
  return HAL_OK;
 80022e6:	2000      	movs	r0, #0
}
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022ea:	6819      	ldr	r1, [r3, #0]
 80022ec:	4211      	tst	r1, r2
 80022ee:	d102      	bne.n	80022f6 <ADC_Disable+0x20>
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	0412      	lsls	r2, r2, #16
 80022f4:	d5f7      	bpl.n	80022e6 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80022f6:	2205      	movs	r2, #5
 80022f8:	689d      	ldr	r5, [r3, #8]
 80022fa:	4015      	ands	r5, r2
 80022fc:	2d01      	cmp	r5, #1
 80022fe:	d11c      	bne.n	800233a <ADC_Disable+0x64>
      __HAL_ADC_DISABLE(hadc);
 8002300:	6899      	ldr	r1, [r3, #8]
 8002302:	3a03      	subs	r2, #3
 8002304:	430a      	orrs	r2, r1
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	2203      	movs	r2, #3
 800230a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800230c:	f7ff ff9e 	bl	800224c <HAL_GetTick>
 8002310:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	422b      	tst	r3, r5
 8002318:	d0e5      	beq.n	80022e6 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800231a:	f7ff ff97 	bl	800224c <HAL_GetTick>
 800231e:	1b80      	subs	r0, r0, r6
 8002320:	2802      	cmp	r0, #2
 8002322:	d9f6      	bls.n	8002312 <ADC_Disable+0x3c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	422b      	tst	r3, r5
 800232a:	d0f2      	beq.n	8002312 <ADC_Disable+0x3c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232c:	2310      	movs	r3, #16
 800232e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002330:	4313      	orrs	r3, r2
 8002332:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002334:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002336:	432b      	orrs	r3, r5
 8002338:	e006      	b.n	8002348 <ADC_Disable+0x72>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233a:	2310      	movs	r3, #16
 800233c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800233e:	4313      	orrs	r3, r2
 8002340:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002342:	2301      	movs	r3, #1
 8002344:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002346:	4313      	orrs	r3, r2
      return HAL_ERROR;
 8002348:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234a:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800234c:	e7cc      	b.n	80022e8 <ADC_Disable+0x12>
	...

08002350 <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 8002350:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8002352:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002354:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8002356:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002358:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800235a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	400a      	ands	r2, r1
 8002360:	2a01      	cmp	r2, #1
 8002362:	d107      	bne.n	8002374 <ADC_Enable.constprop.0+0x24>
 8002364:	6819      	ldr	r1, [r3, #0]
 8002366:	4211      	tst	r1, r2
 8002368:	d001      	beq.n	800236e <ADC_Enable.constprop.0+0x1e>
  return HAL_OK;
 800236a:	2000      	movs	r0, #0
}
 800236c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	0412      	lsls	r2, r2, #16
 8002372:	d4fa      	bmi.n	800236a <ADC_Enable.constprop.0+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002374:	6899      	ldr	r1, [r3, #8]
 8002376:	4a1b      	ldr	r2, [pc, #108]	@ (80023e4 <ADC_Enable.constprop.0+0x94>)
 8002378:	4211      	tst	r1, r2
 800237a:	d009      	beq.n	8002390 <ADC_Enable.constprop.0+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800237c:	2310      	movs	r3, #16
 800237e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002380:	4313      	orrs	r3, r2
 8002382:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002384:	2301      	movs	r3, #1
 8002386:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002388:	4313      	orrs	r3, r2
      return HAL_ERROR;
 800238a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238c:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800238e:	e7ed      	b.n	800236c <ADC_Enable.constprop.0+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8002390:	2201      	movs	r2, #1
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <ADC_Enable.constprop.0+0x98>)
 800239a:	4914      	ldr	r1, [pc, #80]	@ (80023ec <ADC_Enable.constprop.0+0x9c>)
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	f7fd fee3 	bl	8000168 <__udivsi3>
 80023a2:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80023a4:	9b01      	ldr	r3, [sp, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d117      	bne.n	80023da <ADC_Enable.constprop.0+0x8a>
    tickstart = HAL_GetTick();
 80023aa:	f7ff ff4f 	bl	800224c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023ae:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80023b0:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	422b      	tst	r3, r5
 80023b8:	d1d7      	bne.n	800236a <ADC_Enable.constprop.0+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ba:	f7ff ff47 	bl	800224c <HAL_GetTick>
 80023be:	1b80      	subs	r0, r0, r6
 80023c0:	2802      	cmp	r0, #2
 80023c2:	d9f6      	bls.n	80023b2 <ADC_Enable.constprop.0+0x62>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	422b      	tst	r3, r5
 80023ca:	d1f2      	bne.n	80023b2 <ADC_Enable.constprop.0+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023cc:	2310      	movs	r3, #16
 80023ce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80023d0:	4313      	orrs	r3, r2
 80023d2:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80023d6:	432b      	orrs	r3, r5
 80023d8:	e7d7      	b.n	800238a <ADC_Enable.constprop.0+0x3a>
      wait_loop_index--;
 80023da:	9b01      	ldr	r3, [sp, #4]
 80023dc:	3b01      	subs	r3, #1
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	e7e0      	b.n	80023a4 <ADC_Enable.constprop.0+0x54>
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	80000017 	.word	0x80000017
 80023e8:	20000014 	.word	0x20000014
 80023ec:	000f4240 	.word	0x000f4240

080023f0 <HAL_ADC_Init>:
{
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80023f4:	d100      	bne.n	80023f8 <HAL_ADC_Init+0x8>
 80023f6:	e090      	b.n	800251a <HAL_ADC_Init+0x12a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_ADC_Init+0x1a>
    hadc->Lock = HAL_UNLOCKED;
 80023fe:	0002      	movs	r2, r0
 8002400:	3234      	adds	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8002402:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8002404:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002406:	f7ff fcff 	bl	8001e08 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800240a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800240c:	06db      	lsls	r3, r3, #27
 800240e:	d500      	bpl.n	8002412 <HAL_ADC_Init+0x22>
 8002410:	e085      	b.n	800251e <HAL_ADC_Init+0x12e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002412:	6822      	ldr	r2, [r4, #0]
 8002414:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002416:	075b      	lsls	r3, r3, #29
 8002418:	d500      	bpl.n	800241c <HAL_ADC_Init+0x2c>
 800241a:	e080      	b.n	800251e <HAL_ADC_Init+0x12e>
    ADC_STATE_CLR_SET(hadc->State,
 800241c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800241e:	4b42      	ldr	r3, [pc, #264]	@ (8002528 <HAL_ADC_Init+0x138>)
 8002420:	4019      	ands	r1, r3
 8002422:	3306      	adds	r3, #6
 8002424:	33ff      	adds	r3, #255	@ 0xff
 8002426:	430b      	orrs	r3, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002428:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 800242c:	6893      	ldr	r3, [r2, #8]
 800242e:	400b      	ands	r3, r1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_ADC_Init+0x50>
 8002434:	6811      	ldr	r1, [r2, #0]
 8002436:	4219      	tst	r1, r3
 8002438:	d10e      	bne.n	8002458 <HAL_ADC_Init+0x68>
 800243a:	68d3      	ldr	r3, [r2, #12]
 800243c:	041b      	lsls	r3, r3, #16
 800243e:	d40b      	bmi.n	8002458 <HAL_ADC_Init+0x68>
      MODIFY_REG(hadc->Instance->CFGR1,
 8002440:	2118      	movs	r1, #24
 8002442:	68d3      	ldr	r3, [r2, #12]
 8002444:	438b      	bics	r3, r1
 8002446:	68a1      	ldr	r1, [r4, #8]
 8002448:	430b      	orrs	r3, r1
 800244a:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800244c:	6913      	ldr	r3, [r2, #16]
 800244e:	6861      	ldr	r1, [r4, #4]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	430b      	orrs	r3, r1
 8002456:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002458:	68d3      	ldr	r3, [r2, #12]
 800245a:	4934      	ldr	r1, [pc, #208]	@ (800252c <HAL_ADC_Init+0x13c>)
 800245c:	400b      	ands	r3, r1
 800245e:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002460:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002462:	7e60      	ldrb	r0, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002464:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002466:	03c0      	lsls	r0, r0, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002468:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800246a:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800246c:	68e0      	ldr	r0, [r4, #12]
 800246e:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002470:	0348      	lsls	r0, r1, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002472:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002474:	1d60      	adds	r0, r4, #5
 8002476:	7fc0      	ldrb	r0, [r0, #31]
 8002478:	0040      	lsls	r0, r0, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800247a:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800247c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800247e:	3801      	subs	r0, #1
 8002480:	1e45      	subs	r5, r0, #1
 8002482:	41a8      	sbcs	r0, r5
 8002484:	0300      	lsls	r0, r0, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002486:	4303      	orrs	r3, r0
 8002488:	6920      	ldr	r0, [r4, #16]
 800248a:	3802      	subs	r0, #2
 800248c:	4245      	negs	r5, r0
 800248e:	4168      	adcs	r0, r5
 8002490:	0080      	lsls	r0, r0, #2
 8002492:	4303      	orrs	r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002494:	7ee0      	ldrb	r0, [r4, #27]
 8002496:	2801      	cmp	r0, #1
 8002498:	d104      	bne.n	80024a4 <HAL_ADC_Init+0xb4>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800249a:	2900      	cmp	r1, #0
 800249c:	d12b      	bne.n	80024f6 <HAL_ADC_Init+0x106>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800249e:	2180      	movs	r1, #128	@ 0x80
 80024a0:	0249      	lsls	r1, r1, #9
 80024a2:	430b      	orrs	r3, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a4:	20c2      	movs	r0, #194	@ 0xc2
 80024a6:	69e1      	ldr	r1, [r4, #28]
 80024a8:	30ff      	adds	r0, #255	@ 0xff
 80024aa:	4281      	cmp	r1, r0
 80024ac:	d002      	beq.n	80024b4 <HAL_ADC_Init+0xc4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80024ae:	6a20      	ldr	r0, [r4, #32]
 80024b0:	4301      	orrs	r1, r0
 80024b2:	430b      	orrs	r3, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024b4:	2080      	movs	r0, #128	@ 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80024b6:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024b8:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80024ba:	4319      	orrs	r1, r3
 80024bc:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024be:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80024c0:	4281      	cmp	r1, r0
 80024c2:	d002      	beq.n	80024ca <HAL_ADC_Init+0xda>
 80024c4:	1e48      	subs	r0, r1, #1
 80024c6:	2806      	cmp	r0, #6
 80024c8:	d807      	bhi.n	80024da <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80024ca:	2507      	movs	r5, #7
 80024cc:	6950      	ldr	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80024ce:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80024d0:	43a8      	bics	r0, r5
 80024d2:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80024d4:	6950      	ldr	r0, [r2, #20]
 80024d6:	4301      	orrs	r1, r0
 80024d8:	6151      	str	r1, [r2, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80024da:	68d2      	ldr	r2, [r2, #12]
 80024dc:	4914      	ldr	r1, [pc, #80]	@ (8002530 <HAL_ADC_Init+0x140>)
 80024de:	400a      	ands	r2, r1
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d110      	bne.n	8002506 <HAL_ADC_Init+0x116>
      ADC_CLEAR_ERRORCODE(hadc);
 80024e4:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80024e6:	2303      	movs	r3, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80024e8:	63e0      	str	r0, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80024ea:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80024ec:	439a      	bics	r2, r3
 80024ee:	3b02      	subs	r3, #2
 80024f0:	4313      	orrs	r3, r2
 80024f2:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f6:	2120      	movs	r1, #32
 80024f8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80024fa:	4329      	orrs	r1, r5
 80024fc:	63a1      	str	r1, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fe:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8002500:	4308      	orrs	r0, r1
 8002502:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8002504:	e7ce      	b.n	80024a4 <HAL_ADC_Init+0xb4>
      ADC_STATE_CLR_SET(hadc->State,
 8002506:	2312      	movs	r3, #18
 8002508:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800250a:	439a      	bics	r2, r3
 800250c:	3b02      	subs	r3, #2
 800250e:	4313      	orrs	r3, r2
 8002510:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002512:	2301      	movs	r3, #1
 8002514:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8002516:	4313      	orrs	r3, r2
 8002518:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 800251a:	2001      	movs	r0, #1
 800251c:	e7ea      	b.n	80024f4 <HAL_ADC_Init+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251e:	2310      	movs	r3, #16
 8002520:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002522:	4313      	orrs	r3, r2
 8002524:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8002526:	e7f8      	b.n	800251a <HAL_ADC_Init+0x12a>
 8002528:	fffffefd 	.word	0xfffffefd
 800252c:	fffe0219 	.word	0xfffe0219
 8002530:	833fffe7 	.word	0x833fffe7

08002534 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002534:	6803      	ldr	r3, [r0, #0]
{
 8002536:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002538:	689b      	ldr	r3, [r3, #8]
{
 800253a:	0004      	movs	r4, r0
    __HAL_LOCK(hadc);
 800253c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800253e:	075b      	lsls	r3, r3, #29
 8002540:	d41a      	bmi.n	8002578 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8002542:	0025      	movs	r5, r4
 8002544:	3534      	adds	r5, #52	@ 0x34
 8002546:	782b      	ldrb	r3, [r5, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d015      	beq.n	8002578 <HAL_ADC_Start+0x44>
 800254c:	2301      	movs	r3, #1
 800254e:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002550:	7e63      	ldrb	r3, [r4, #25]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d111      	bne.n	800257a <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8002556:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002558:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800255a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800255c:	401a      	ands	r2, r3
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002564:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8002566:	63a3      	str	r3, [r4, #56]	@ 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 8002568:	63e0      	str	r0, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hadc);
 800256a:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002570:	6899      	ldr	r1, [r3, #8]
 8002572:	3a18      	subs	r2, #24
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800257a:	0020      	movs	r0, r4
 800257c:	f7ff fee8 	bl	8002350 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8002580:	2800      	cmp	r0, #0
 8002582:	d0e8      	beq.n	8002556 <HAL_ADC_Start+0x22>
 8002584:	e7f8      	b.n	8002578 <HAL_ADC_Start+0x44>
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	fffff0fe 	.word	0xfffff0fe

0800258c <HAL_ADC_Stop>:
{ 
 800258c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800258e:	0006      	movs	r6, r0
 8002590:	3634      	adds	r6, #52	@ 0x34
 8002592:	7833      	ldrb	r3, [r6, #0]
{ 
 8002594:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002596:	2002      	movs	r0, #2
 8002598:	2b01      	cmp	r3, #1
 800259a:	d012      	beq.n	80025c2 <HAL_ADC_Stop+0x36>
 800259c:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 800259e:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 80025a0:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80025a2:	f7ff fe6b 	bl	800227c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d109      	bne.n	80025be <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 80025aa:	0020      	movs	r0, r4
 80025ac:	f7ff fe93 	bl	80022d6 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d104      	bne.n	80025be <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 80025b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025b6:	4a03      	ldr	r2, [pc, #12]	@ (80025c4 <HAL_ADC_Stop+0x38>)
 80025b8:	4013      	ands	r3, r2
 80025ba:	431d      	orrs	r5, r3
 80025bc:	63a5      	str	r5, [r4, #56]	@ 0x38
  __HAL_UNLOCK(hadc);
 80025be:	2300      	movs	r3, #0
 80025c0:	7033      	strb	r3, [r6, #0]
}
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
 80025c4:	fffffefe 	.word	0xfffffefe

080025c8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80025c8:	6803      	ldr	r3, [r0, #0]
 80025ca:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_ADC_ConfigChannel>:
{
 80025d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80025d2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80025d4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80025d6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80025d8:	3434      	adds	r4, #52	@ 0x34
 80025da:	7822      	ldrb	r2, [r4, #0]
{
 80025dc:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025de:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 80025e0:	2002      	movs	r0, #2
 80025e2:	2a01      	cmp	r2, #1
 80025e4:	d02a      	beq.n	800263c <HAL_ADC_ConfigChannel+0x6c>
 80025e6:	3801      	subs	r0, #1
 80025e8:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	6895      	ldr	r5, [r2, #8]
 80025ee:	076d      	lsls	r5, r5, #29
 80025f0:	d44e      	bmi.n	8002690 <HAL_ADC_ConfigChannel+0xc0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025f2:	680d      	ldr	r5, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80025f4:	684f      	ldr	r7, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025f6:	002b      	movs	r3, r5
    if (sConfig->Rank != ADC_RANK_NONE)
 80025f8:	46bc      	mov	ip, r7
 80025fa:	4f28      	ldr	r7, [pc, #160]	@ (800269c <HAL_ADC_ConfigChannel+0xcc>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025fc:	40a8      	lsls	r0, r5
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025fe:	3b10      	subs	r3, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8002600:	45bc      	cmp	ip, r7
 8002602:	d036      	beq.n	8002672 <HAL_ADC_ConfigChannel+0xa2>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002604:	6a97      	ldr	r7, [r2, #40]	@ 0x28
 8002606:	4338      	orrs	r0, r7
 8002608:	6290      	str	r0, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800260a:	2080      	movs	r0, #128	@ 0x80
 800260c:	0540      	lsls	r0, r0, #21
 800260e:	4286      	cmp	r6, r0
 8002610:	d00f      	beq.n	8002632 <HAL_ADC_ConfigChannel+0x62>
 8002612:	3e01      	subs	r6, #1
 8002614:	2e06      	cmp	r6, #6
 8002616:	d90c      	bls.n	8002632 <HAL_ADC_ConfigChannel+0x62>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002618:	2007      	movs	r0, #7
 800261a:	6956      	ldr	r6, [r2, #20]
 800261c:	6889      	ldr	r1, [r1, #8]
 800261e:	4006      	ands	r6, r0
 8002620:	42b1      	cmp	r1, r6
 8002622:	d006      	beq.n	8002632 <HAL_ADC_ConfigChannel+0x62>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002624:	6956      	ldr	r6, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002626:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002628:	4386      	bics	r6, r0
 800262a:	6156      	str	r6, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800262c:	6956      	ldr	r6, [r2, #20]
 800262e:	4331      	orrs	r1, r6
 8002630:	6151      	str	r1, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002632:	2b01      	cmp	r3, #1
 8002634:	d903      	bls.n	800263e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002636:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002638:	2300      	movs	r3, #0
 800263a:	7023      	strb	r3, [r4, #0]
}
 800263c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800263e:	4a18      	ldr	r2, [pc, #96]	@ (80026a0 <HAL_ADC_ConfigChannel+0xd0>)
 8002640:	2180      	movs	r1, #128	@ 0x80
 8002642:	6813      	ldr	r3, [r2, #0]
 8002644:	2d10      	cmp	r5, #16
 8002646:	d012      	beq.n	800266e <HAL_ADC_ConfigChannel+0x9e>
 8002648:	03c9      	lsls	r1, r1, #15
 800264a:	430b      	orrs	r3, r1
 800264c:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800264e:	2d10      	cmp	r5, #16
 8002650:	d1f1      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002652:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <HAL_ADC_ConfigChannel+0xd4>)
 8002654:	4914      	ldr	r1, [pc, #80]	@ (80026a8 <HAL_ADC_ConfigChannel+0xd8>)
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	f7fd fd86 	bl	8000168 <__udivsi3>
 800265c:	230a      	movs	r3, #10
 800265e:	4343      	muls	r3, r0
            wait_loop_index--;
 8002660:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002662:	9b01      	ldr	r3, [sp, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0e6      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8002668:	9b01      	ldr	r3, [sp, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	e7f8      	b.n	8002660 <HAL_ADC_ConfigChannel+0x90>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800266e:	0409      	lsls	r1, r1, #16
 8002670:	e7eb      	b.n	800264a <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002672:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002674:	4381      	bics	r1, r0
 8002676:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002678:	2b01      	cmp	r3, #1
 800267a:	d8dc      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800267c:	1e58      	subs	r0, r3, #1
 800267e:	4183      	sbcs	r3, r0
 8002680:	4a07      	ldr	r2, [pc, #28]	@ (80026a0 <HAL_ADC_ConfigChannel+0xd0>)
 8002682:	480a      	ldr	r0, [pc, #40]	@ (80026ac <HAL_ADC_ConfigChannel+0xdc>)
 8002684:	6811      	ldr	r1, [r2, #0]
 8002686:	059b      	lsls	r3, r3, #22
 8002688:	181b      	adds	r3, r3, r0
 800268a:	400b      	ands	r3, r1
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e7d2      	b.n	8002636 <HAL_ADC_ConfigChannel+0x66>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	2220      	movs	r2, #32
 8002692:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002694:	430a      	orrs	r2, r1
 8002696:	639a      	str	r2, [r3, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8002698:	e7ce      	b.n	8002638 <HAL_ADC_ConfigChannel+0x68>
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	00001001 	.word	0x00001001
 80026a0:	40012708 	.word	0x40012708
 80026a4:	20000014 	.word	0x20000014
 80026a8:	000f4240 	.word	0x000f4240
 80026ac:	ff7fffff 	.word	0xff7fffff

080026b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b0:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026b2:	24ff      	movs	r4, #255	@ 0xff
 80026b4:	2203      	movs	r2, #3
 80026b6:	000b      	movs	r3, r1
 80026b8:	0021      	movs	r1, r4
 80026ba:	4002      	ands	r2, r0
 80026bc:	00d2      	lsls	r2, r2, #3
 80026be:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026c0:	019b      	lsls	r3, r3, #6
 80026c2:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026c4:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026c6:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80026c8:	2800      	cmp	r0, #0
 80026ca:	db0a      	blt.n	80026e2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026cc:	24c0      	movs	r4, #192	@ 0xc0
 80026ce:	4a0b      	ldr	r2, [pc, #44]	@ (80026fc <HAL_NVIC_SetPriority+0x4c>)
 80026d0:	0880      	lsrs	r0, r0, #2
 80026d2:	0080      	lsls	r0, r0, #2
 80026d4:	1880      	adds	r0, r0, r2
 80026d6:	00a4      	lsls	r4, r4, #2
 80026d8:	5902      	ldr	r2, [r0, r4]
 80026da:	400a      	ands	r2, r1
 80026dc:	4313      	orrs	r3, r2
 80026de:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80026e0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026e2:	220f      	movs	r2, #15
 80026e4:	4010      	ands	r0, r2
 80026e6:	3808      	subs	r0, #8
 80026e8:	4a05      	ldr	r2, [pc, #20]	@ (8002700 <HAL_NVIC_SetPriority+0x50>)
 80026ea:	0880      	lsrs	r0, r0, #2
 80026ec:	0080      	lsls	r0, r0, #2
 80026ee:	1880      	adds	r0, r0, r2
 80026f0:	69c2      	ldr	r2, [r0, #28]
 80026f2:	4011      	ands	r1, r2
 80026f4:	4319      	orrs	r1, r3
 80026f6:	61c1      	str	r1, [r0, #28]
 80026f8:	e7f2      	b.n	80026e0 <HAL_NVIC_SetPriority+0x30>
 80026fa:	46c0      	nop			@ (mov r8, r8)
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002704:	2800      	cmp	r0, #0
 8002706:	db05      	blt.n	8002714 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002708:	231f      	movs	r3, #31
 800270a:	4018      	ands	r0, r3
 800270c:	3b1e      	subs	r3, #30
 800270e:	4083      	lsls	r3, r0
 8002710:	4a01      	ldr	r2, [pc, #4]	@ (8002718 <HAL_NVIC_EnableIRQ+0x14>)
 8002712:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002714:	4770      	bx	lr
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	e000e100 	.word	0xe000e100

0800271c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800271c:	2280      	movs	r2, #128	@ 0x80
 800271e:	1e43      	subs	r3, r0, #1
 8002720:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002722:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002724:	4293      	cmp	r3, r2
 8002726:	d20d      	bcs.n	8002744 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002728:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272a:	4a07      	ldr	r2, [pc, #28]	@ (8002748 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800272c:	4807      	ldr	r0, [pc, #28]	@ (800274c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800272e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002730:	6a03      	ldr	r3, [r0, #32]
 8002732:	0609      	lsls	r1, r1, #24
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	430b      	orrs	r3, r1
 800273a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800273c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800273e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002740:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002742:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002744:	4770      	bx	lr
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	e000e010 	.word	0xe000e010
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 8002754:	2001      	movs	r0, #1
  if (NULL == hdma)
 8002756:	2c00      	cmp	r4, #0
 8002758:	d024      	beq.n	80027a4 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800275a:	2302      	movs	r3, #2
 800275c:	1ca5      	adds	r5, r4, #2
 800275e:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002760:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002762:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8002764:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002766:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002768:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800276a:	6863      	ldr	r3, [r4, #4]
 800276c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276e:	68e1      	ldr	r1, [r4, #12]
 8002770:	430b      	orrs	r3, r1
 8002772:	6921      	ldr	r1, [r4, #16]
 8002774:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002776:	6961      	ldr	r1, [r4, #20]
 8002778:	430b      	orrs	r3, r1
 800277a:	69a1      	ldr	r1, [r4, #24]
 800277c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800277e:	69e1      	ldr	r1, [r4, #28]
 8002780:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002782:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002784:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <HAL_DMA_Init+0x5c>)
 8002788:	2114      	movs	r1, #20
 800278a:	18c0      	adds	r0, r0, r3
 800278c:	f7fd fcec 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002790:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002792:	0080      	lsls	r0, r0, #2
 8002794:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002796:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002798:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800279a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800279c:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 800279e:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80027a0:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80027a2:	77e0      	strb	r0, [r4, #31]
}
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	46c0      	nop			@ (mov r8, r8)
 80027a8:	ffffc00f 	.word	0xffffc00f
 80027ac:	bffdfff8 	.word	0xbffdfff8
 80027b0:	40020000 	.word	0x40020000

080027b4 <HAL_DMA_Start>:
{
 80027b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80027b6:	1c44      	adds	r4, r0, #1
{
 80027b8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80027ba:	7fe5      	ldrb	r5, [r4, #31]
 80027bc:	2d01      	cmp	r5, #1
 80027be:	d025      	beq.n	800280c <HAL_DMA_Start+0x58>
 80027c0:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 80027c2:	1c87      	adds	r7, r0, #2
  __HAL_LOCK(hdma);
 80027c4:	77e5      	strb	r5, [r4, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 80027c6:	7ffd      	ldrb	r5, [r7, #31]
 80027c8:	2600      	movs	r6, #0
 80027ca:	46ac      	mov	ip, r5
 80027cc:	4663      	mov	r3, ip
 80027ce:	b2ed      	uxtb	r5, r5
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d11a      	bne.n	800280a <HAL_DMA_Start+0x56>
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d4:	2402      	movs	r4, #2
 80027d6:	77fc      	strb	r4, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027d8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027da:	6386      	str	r6, [r0, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027dc:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027de:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027e0:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027e2:	40bd      	lsls	r5, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027e4:	6026      	str	r6, [r4, #0]
  hdma->Instance->CNDTR = DataLength;
 80027e6:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80027e8:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 80027ea:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80027ec:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ee:	6843      	ldr	r3, [r0, #4]
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d107      	bne.n	8002804 <HAL_DMA_Start+0x50>
    hdma->Instance->CPAR = DstAddress;
 80027f4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80027f6:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80027f8:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80027fa:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 80027fc:	6822      	ldr	r2, [r4, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	6023      	str	r3, [r4, #0]
}
 8002802:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8002804:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002806:	60e2      	str	r2, [r4, #12]
 8002808:	e7f6      	b.n	80027f8 <HAL_DMA_Start+0x44>
    __HAL_UNLOCK(hdma);
 800280a:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 800280c:	2002      	movs	r0, #2
 800280e:	e7f8      	b.n	8002802 <HAL_DMA_Start+0x4e>

08002810 <HAL_DMA_IRQHandler>:
{
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002812:	2704      	movs	r7, #4
 8002814:	003e      	movs	r6, r7
 8002816:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002818:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800281a:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800281c:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800281e:	6803      	ldr	r3, [r0, #0]
 8002820:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002822:	4235      	tst	r5, r6
 8002824:	d00d      	beq.n	8002842 <HAL_DMA_IRQHandler+0x32>
 8002826:	423c      	tst	r4, r7
 8002828:	d00b      	beq.n	8002842 <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800282a:	6819      	ldr	r1, [r3, #0]
 800282c:	0689      	lsls	r1, r1, #26
 800282e:	d402      	bmi.n	8002836 <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002830:	6819      	ldr	r1, [r3, #0]
 8002832:	43b9      	bics	r1, r7
 8002834:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8002836:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002838:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 800283a:	2b00      	cmp	r3, #0
 800283c:	d019      	beq.n	8002872 <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 800283e:	4798      	blx	r3
}
 8002840:	e017      	b.n	8002872 <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002842:	2702      	movs	r7, #2
 8002844:	003e      	movs	r6, r7
 8002846:	408e      	lsls	r6, r1
 8002848:	4235      	tst	r5, r6
 800284a:	d013      	beq.n	8002874 <HAL_DMA_IRQHandler+0x64>
 800284c:	423c      	tst	r4, r7
 800284e:	d011      	beq.n	8002874 <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	0689      	lsls	r1, r1, #26
 8002854:	d406      	bmi.n	8002864 <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002856:	240a      	movs	r4, #10
 8002858:	6819      	ldr	r1, [r3, #0]
 800285a:	43a1      	bics	r1, r4
 800285c:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800285e:	2101      	movs	r1, #1
 8002860:	19c3      	adds	r3, r0, r7
 8002862:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002864:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002866:	2200      	movs	r2, #0
 8002868:	1c43      	adds	r3, r0, #1
 800286a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 800286c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 800286e:	4293      	cmp	r3, r2
 8002870:	d1e5      	bne.n	800283e <HAL_DMA_IRQHandler+0x2e>
}
 8002872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002874:	2608      	movs	r6, #8
 8002876:	0037      	movs	r7, r6
 8002878:	408f      	lsls	r7, r1
 800287a:	423d      	tst	r5, r7
 800287c:	d0f9      	beq.n	8002872 <HAL_DMA_IRQHandler+0x62>
 800287e:	4234      	tst	r4, r6
 8002880:	d0f7      	beq.n	8002872 <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002882:	250e      	movs	r5, #14
 8002884:	681c      	ldr	r4, [r3, #0]
 8002886:	43ac      	bics	r4, r5
 8002888:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800288a:	2301      	movs	r3, #1
 800288c:	001c      	movs	r4, r3
 800288e:	408c      	lsls	r4, r1
 8002890:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002892:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002894:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002896:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8002898:	2200      	movs	r2, #0
 800289a:	18c3      	adds	r3, r0, r3
 800289c:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800289e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80028a0:	e7e5      	b.n	800286e <HAL_DMA_IRQHandler+0x5e>
	...

080028a4 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80028a4:	2300      	movs	r3, #0
{
 80028a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a8:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028aa:	680a      	ldr	r2, [r1, #0]
 80028ac:	0014      	movs	r4, r2
 80028ae:	40dc      	lsrs	r4, r3
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 80028b2:	b007      	add	sp, #28
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028b6:	2501      	movs	r5, #1
 80028b8:	0014      	movs	r4, r2
 80028ba:	409d      	lsls	r5, r3
 80028bc:	402c      	ands	r4, r5
 80028be:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 80028c0:	422a      	tst	r2, r5
 80028c2:	d100      	bne.n	80028c6 <HAL_GPIO_Init+0x22>
 80028c4:	e098      	b.n	80029f8 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028c6:	684a      	ldr	r2, [r1, #4]
 80028c8:	005f      	lsls	r7, r3, #1
 80028ca:	4694      	mov	ip, r2
 80028cc:	2203      	movs	r2, #3
 80028ce:	4664      	mov	r4, ip
 80028d0:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028d2:	2403      	movs	r4, #3
 80028d4:	40bc      	lsls	r4, r7
 80028d6:	43e4      	mvns	r4, r4
 80028d8:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028da:	1e54      	subs	r4, r2, #1
 80028dc:	2c01      	cmp	r4, #1
 80028de:	d82e      	bhi.n	800293e <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 80028e0:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028e2:	9c01      	ldr	r4, [sp, #4]
 80028e4:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028e6:	68cc      	ldr	r4, [r1, #12]
 80028e8:	40bc      	lsls	r4, r7
 80028ea:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80028ec:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80028ee:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f0:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f2:	43ac      	bics	r4, r5
 80028f4:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f6:	4664      	mov	r4, ip
 80028f8:	0924      	lsrs	r4, r4, #4
 80028fa:	4034      	ands	r4, r6
 80028fc:	409c      	lsls	r4, r3
 80028fe:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002900:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8002902:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002904:	9c01      	ldr	r4, [sp, #4]
 8002906:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002908:	688c      	ldr	r4, [r1, #8]
 800290a:	40bc      	lsls	r4, r7
 800290c:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 800290e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002910:	2a02      	cmp	r2, #2
 8002912:	d116      	bne.n	8002942 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002914:	2507      	movs	r5, #7
 8002916:	260f      	movs	r6, #15
 8002918:	401d      	ands	r5, r3
 800291a:	00ad      	lsls	r5, r5, #2
 800291c:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 800291e:	08dc      	lsrs	r4, r3, #3
 8002920:	00a4      	lsls	r4, r4, #2
 8002922:	1904      	adds	r4, r0, r4
 8002924:	9402      	str	r4, [sp, #8]
 8002926:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002928:	9603      	str	r6, [sp, #12]
 800292a:	0026      	movs	r6, r4
 800292c:	9c03      	ldr	r4, [sp, #12]
 800292e:	43a6      	bics	r6, r4
 8002930:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002932:	690e      	ldr	r6, [r1, #16]
 8002934:	40ae      	lsls	r6, r5
 8002936:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8002938:	9c02      	ldr	r4, [sp, #8]
 800293a:	6226      	str	r6, [r4, #32]
 800293c:	e001      	b.n	8002942 <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800293e:	2a03      	cmp	r2, #3
 8002940:	d1df      	bne.n	8002902 <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002942:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8002944:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002946:	9d01      	ldr	r5, [sp, #4]
 8002948:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800294a:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800294c:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 800294e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002950:	4662      	mov	r2, ip
 8002952:	02a4      	lsls	r4, r4, #10
 8002954:	4222      	tst	r2, r4
 8002956:	d04f      	beq.n	80029f8 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002958:	2501      	movs	r5, #1
 800295a:	4a28      	ldr	r2, [pc, #160]	@ (80029fc <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800295c:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295e:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002960:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002962:	432c      	orrs	r4, r5
 8002964:	6194      	str	r4, [r2, #24]
 8002966:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002968:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296a:	402a      	ands	r2, r5
 800296c:	9205      	str	r2, [sp, #20]
 800296e:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002970:	4a23      	ldr	r2, [pc, #140]	@ (8002a00 <HAL_GPIO_Init+0x15c>)
 8002972:	00a4      	lsls	r4, r4, #2
 8002974:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002976:	220f      	movs	r2, #15
 8002978:	3502      	adds	r5, #2
 800297a:	401d      	ands	r5, r3
 800297c:	00ad      	lsls	r5, r5, #2
 800297e:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8002980:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002982:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002984:	2200      	movs	r2, #0
 8002986:	42b8      	cmp	r0, r7
 8002988:	d00c      	beq.n	80029a4 <HAL_GPIO_Init+0x100>
 800298a:	4f1e      	ldr	r7, [pc, #120]	@ (8002a04 <HAL_GPIO_Init+0x160>)
 800298c:	3201      	adds	r2, #1
 800298e:	42b8      	cmp	r0, r7
 8002990:	d008      	beq.n	80029a4 <HAL_GPIO_Init+0x100>
 8002992:	4f1d      	ldr	r7, [pc, #116]	@ (8002a08 <HAL_GPIO_Init+0x164>)
 8002994:	3201      	adds	r2, #1
 8002996:	42b8      	cmp	r0, r7
 8002998:	d004      	beq.n	80029a4 <HAL_GPIO_Init+0x100>
 800299a:	4f1c      	ldr	r7, [pc, #112]	@ (8002a0c <HAL_GPIO_Init+0x168>)
 800299c:	3203      	adds	r2, #3
 800299e:	42b8      	cmp	r0, r7
 80029a0:	d100      	bne.n	80029a4 <HAL_GPIO_Init+0x100>
 80029a2:	3a02      	subs	r2, #2
 80029a4:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029a6:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029a8:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029aa:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 80029ac:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 80029ae:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 80029b0:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 80029b2:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 80029b4:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80029b6:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b8:	02ff      	lsls	r7, r7, #11
 80029ba:	d401      	bmi.n	80029c0 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 80029bc:	0035      	movs	r5, r6
 80029be:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029c0:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 80029c2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80029c4:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80029c6:	9d00      	ldr	r5, [sp, #0]
 80029c8:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029ca:	02bf      	lsls	r7, r7, #10
 80029cc:	d401      	bmi.n	80029d2 <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 80029ce:	0035      	movs	r5, r6
 80029d0:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029d2:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 80029d4:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 80029d6:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80029d8:	9d00      	ldr	r5, [sp, #0]
 80029da:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029dc:	03bf      	lsls	r7, r7, #14
 80029de:	d401      	bmi.n	80029e4 <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 80029e0:	0035      	movs	r5, r6
 80029e2:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029e4:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80029e6:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 80029e8:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 80029ea:	9e00      	ldr	r6, [sp, #0]
 80029ec:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029ee:	03ff      	lsls	r7, r7, #15
 80029f0:	d401      	bmi.n	80029f6 <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 80029f2:	4025      	ands	r5, r4
 80029f4:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 80029f6:	6016      	str	r6, [r2, #0]
    position++;
 80029f8:	3301      	adds	r3, #1
 80029fa:	e756      	b.n	80028aa <HAL_GPIO_Init+0x6>
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40010000 	.word	0x40010000
 8002a04:	48000400 	.word	0x48000400
 8002a08:	48000800 	.word	0x48000800
 8002a0c:	48000c00 	.word	0x48000c00
 8002a10:	40010400 	.word	0x40010400

08002a14 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a14:	6900      	ldr	r0, [r0, #16]
 8002a16:	4008      	ands	r0, r1
 8002a18:	1e43      	subs	r3, r0, #1
 8002a1a:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002a1c:	b2c0      	uxtb	r0, r0
  }
 8002a1e:	4770      	bx	lr

08002a20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a20:	2a00      	cmp	r2, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a24:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a26:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a28:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002a2a:	e7fc      	b.n	8002a26 <HAL_GPIO_WritePin+0x6>

08002a2c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a2c:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a2e:	0013      	movs	r3, r2
 8002a30:	400b      	ands	r3, r1
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	4391      	bics	r1, r2
 8002a36:	430b      	orrs	r3, r1
 8002a38:	6183      	str	r3, [r0, #24]
}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a3c:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8002a3e:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	4210      	tst	r0, r2
 8002a44:	d002      	beq.n	8002a4c <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a46:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a48:	f7fe fbd4 	bl	80011f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	40010400 	.word	0x40010400

08002a54 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a54:	6803      	ldr	r3, [r0, #0]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	0792      	lsls	r2, r2, #30
 8002a5a:	d501      	bpl.n	8002a60 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a60:	2201      	movs	r2, #1
 8002a62:	6999      	ldr	r1, [r3, #24]
 8002a64:	4211      	tst	r1, r2
 8002a66:	d102      	bne.n	8002a6e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a68:	6999      	ldr	r1, [r3, #24]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	619a      	str	r2, [r3, #24]
  }
}
 8002a6e:	4770      	bx	lr

08002a70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a70:	b530      	push	{r4, r5, lr}
 8002a72:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a74:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a76:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a78:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a7a:	0589      	lsls	r1, r1, #22
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <I2C_TransferConfig+0x28>)
 8002a82:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a84:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a86:	0d64      	lsrs	r4, r4, #21
 8002a88:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a8a:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a8c:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a8e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a90:	432a      	orrs	r2, r5
 8002a92:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a94:	bd30      	pop	{r4, r5, pc}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	03ff63ff 	.word	0x03ff63ff

08002a9c <I2C_IsErrorOccurred>:
{
 8002a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a9e:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8002aa0:	6802      	ldr	r2, [r0, #0]
{
 8002aa2:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8002aa4:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aa6:	2310      	movs	r3, #16
 8002aa8:	000f      	movs	r7, r1
{
 8002aaa:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aac:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ab0:	4219      	tst	r1, r3
 8002ab2:	d00d      	beq.n	8002ad0 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab6:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8002ab8:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	2120      	movs	r1, #32
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	420a      	tst	r2, r1
 8002ac2:	d15f      	bne.n	8002b84 <I2C_IsErrorOccurred+0xe8>
 8002ac4:	2f00      	cmp	r7, #0
 8002ac6:	d031      	beq.n	8002b2c <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 8002ac8:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8002aca:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8002acc:	9b01      	ldr	r3, [sp, #4]
 8002ace:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ad0:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002ad2:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ad4:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 8002ad6:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ad8:	4213      	tst	r3, r2
 8002ada:	d002      	beq.n	8002ae2 <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 8002adc:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ade:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002ae0:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	00d2      	lsls	r2, r2, #3
 8002ae6:	4213      	tst	r3, r2
 8002ae8:	d003      	beq.n	8002af2 <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 8002aea:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8002aec:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8002aee:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002af0:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002af2:	2280      	movs	r2, #128	@ 0x80
 8002af4:	0092      	lsls	r2, r2, #2
 8002af6:	4213      	tst	r3, r2
 8002af8:	d049      	beq.n	8002b8e <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002afa:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002afc:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8002afe:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8002b00:	0020      	movs	r0, r4
 8002b02:	f7ff ffa7 	bl	8002a54 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002b06:	686b      	ldr	r3, [r5, #4]
 8002b08:	4a22      	ldr	r2, [pc, #136]	@ (8002b94 <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 8002b0a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8002b10:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002b14:	433b      	orrs	r3, r7
 8002b16:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	0023      	movs	r3, r4
 8002b1a:	3341      	adds	r3, #65	@ 0x41
 8002b1c:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1e:	0022      	movs	r2, r4
 8002b20:	2300      	movs	r3, #0
 8002b22:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002b24:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b26:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002b28:	7023      	strb	r3, [r4, #0]
 8002b2a:	e032      	b.n	8002b92 <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 8002b2c:	1c72      	adds	r2, r6, #1
 8002b2e:	d0c5      	beq.n	8002abc <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b30:	f7ff fb8c 	bl	800224c <HAL_GetTick>
 8002b34:	1b40      	subs	r0, r0, r5
 8002b36:	42b0      	cmp	r0, r6
 8002b38:	d801      	bhi.n	8002b3e <I2C_IsErrorOccurred+0xa2>
 8002b3a:	2e00      	cmp	r6, #0
 8002b3c:	d1bd      	bne.n	8002aba <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 8002b3e:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b40:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8002b42:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b44:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002b46:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b48:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 8002b4a:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b4c:	0412      	lsls	r2, r2, #16
 8002b4e:	d50b      	bpl.n	8002b68 <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b50:	2280      	movs	r2, #128	@ 0x80
 8002b52:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b54:	4210      	tst	r0, r2
 8002b56:	d107      	bne.n	8002b68 <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b58:	2920      	cmp	r1, #32
 8002b5a:	d005      	beq.n	8002b68 <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b5c:	6859      	ldr	r1, [r3, #4]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002b62:	f7ff fb73 	bl	800224c <HAL_GetTick>
 8002b66:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b68:	2220      	movs	r2, #32
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	4213      	tst	r3, r2
 8002b70:	d1a3      	bne.n	8002aba <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b72:	f7ff fb6b 	bl	800224c <HAL_GetTick>
 8002b76:	1b40      	subs	r0, r0, r5
 8002b78:	2819      	cmp	r0, #25
 8002b7a:	d9f5      	bls.n	8002b68 <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	2320      	movs	r3, #32
              status = HAL_ERROR;
 8002b7e:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b80:	9301      	str	r3, [sp, #4]
 8002b82:	e79a      	b.n	8002aba <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 8002b84:	2f00      	cmp	r7, #0
 8002b86:	d19f      	bne.n	8002ac8 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b88:	2220      	movs	r2, #32
 8002b8a:	61da      	str	r2, [r3, #28]
 8002b8c:	e79c      	b.n	8002ac8 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d1b6      	bne.n	8002b00 <I2C_IsErrorOccurred+0x64>
}
 8002b92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b94:	fe00e800 	.word	0xfe00e800

08002b98 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	0004      	movs	r4, r0
 8002b9c:	000d      	movs	r5, r1
 8002b9e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ba0:	2702      	movs	r7, #2
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	423b      	tst	r3, r7
 8002ba8:	d001      	beq.n	8002bae <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8002baa:	2000      	movs	r0, #0
 8002bac:	e021      	b.n	8002bf2 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bae:	0032      	movs	r2, r6
 8002bb0:	0029      	movs	r1, r5
 8002bb2:	0020      	movs	r0, r4
 8002bb4:	f7ff ff72 	bl	8002a9c <I2C_IsErrorOccurred>
 8002bb8:	2800      	cmp	r0, #0
 8002bba:	d119      	bne.n	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8002bbc:	1c6b      	adds	r3, r5, #1
 8002bbe:	d0f0      	beq.n	8002ba2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc0:	f7ff fb44 	bl	800224c <HAL_GetTick>
 8002bc4:	1b80      	subs	r0, r0, r6
 8002bc6:	42a8      	cmp	r0, r5
 8002bc8:	d801      	bhi.n	8002bce <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8002bca:	2d00      	cmp	r5, #0
 8002bcc:	d1e9      	bne.n	8002ba2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	6999      	ldr	r1, [r3, #24]
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	4219      	tst	r1, r3
 8002bda:	d1e2      	bne.n	8002ba2 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	2120      	movs	r1, #32
 8002bde:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002be4:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8002be6:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	3341      	adds	r3, #65	@ 0x41
 8002bea:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bec:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8002bee:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002bf0:	2001      	movs	r0, #1
}
 8002bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002bf4 <I2C_WaitOnFlagUntilTimeout>:
{
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	0004      	movs	r4, r0
 8002bf8:	000d      	movs	r5, r1
 8002bfa:	0017      	movs	r7, r2
 8002bfc:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	402b      	ands	r3, r5
 8002c04:	1b5b      	subs	r3, r3, r5
 8002c06:	425a      	negs	r2, r3
 8002c08:	4153      	adcs	r3, r2
 8002c0a:	42bb      	cmp	r3, r7
 8002c0c:	d001      	beq.n	8002c12 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8002c0e:	2000      	movs	r0, #0
 8002c10:	e026      	b.n	8002c60 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c12:	0031      	movs	r1, r6
 8002c14:	0020      	movs	r0, r4
 8002c16:	9a06      	ldr	r2, [sp, #24]
 8002c18:	f7ff ff40 	bl	8002a9c <I2C_IsErrorOccurred>
 8002c1c:	2800      	cmp	r0, #0
 8002c1e:	d11e      	bne.n	8002c5e <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002c20:	1c73      	adds	r3, r6, #1
 8002c22:	d0ec      	beq.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7ff fb12 	bl	800224c <HAL_GetTick>
 8002c28:	9b06      	ldr	r3, [sp, #24]
 8002c2a:	1ac0      	subs	r0, r0, r3
 8002c2c:	42b0      	cmp	r0, r6
 8002c2e:	d801      	bhi.n	8002c34 <I2C_WaitOnFlagUntilTimeout+0x40>
 8002c30:	2e00      	cmp	r6, #0
 8002c32:	d1e4      	bne.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	402b      	ands	r3, r5
 8002c3a:	1b5b      	subs	r3, r3, r5
 8002c3c:	425a      	negs	r2, r3
 8002c3e:	4153      	adcs	r3, r2
 8002c40:	42bb      	cmp	r3, r7
 8002c42:	d1dc      	bne.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c44:	2220      	movs	r2, #32
 8002c46:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c4c:	0023      	movs	r3, r4
 8002c4e:	3341      	adds	r3, #65	@ 0x41
 8002c50:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c52:	0022      	movs	r2, r4
 8002c54:	2300      	movs	r3, #0
 8002c56:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002c58:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5a:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8002c5c:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002c5e:	2001      	movs	r0, #1
}
 8002c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c62 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002c62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c64:	0004      	movs	r4, r0
 8002c66:	000e      	movs	r6, r1
 8002c68:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c6a:	2520      	movs	r5, #32
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	422b      	tst	r3, r5
 8002c72:	d001      	beq.n	8002c78 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002c74:	2000      	movs	r0, #0
 8002c76:	e01d      	b.n	8002cb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c78:	003a      	movs	r2, r7
 8002c7a:	0031      	movs	r1, r6
 8002c7c:	0020      	movs	r0, r4
 8002c7e:	f7ff ff0d 	bl	8002a9c <I2C_IsErrorOccurred>
 8002c82:	2800      	cmp	r0, #0
 8002c84:	d115      	bne.n	8002cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7ff fae1 	bl	800224c <HAL_GetTick>
 8002c8a:	1bc0      	subs	r0, r0, r7
 8002c8c:	42b0      	cmp	r0, r6
 8002c8e:	d801      	bhi.n	8002c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8002c90:	2e00      	cmp	r6, #0
 8002c92:	d1eb      	bne.n	8002c6c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	001a      	movs	r2, r3
 8002c9a:	402a      	ands	r2, r5
 8002c9c:	422b      	tst	r3, r5
 8002c9e:	d1e5      	bne.n	8002c6c <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ca2:	432b      	orrs	r3, r5
 8002ca4:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8002ca8:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	3341      	adds	r3, #65	@ 0x41
 8002cac:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cae:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8002cb0:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8002cb2:	2001      	movs	r0, #1
}
 8002cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002cb8 <HAL_I2C_Init>:
{
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002cbc:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002cbe:	2c00      	cmp	r4, #0
 8002cc0:	d04e      	beq.n	8002d60 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cc2:	0025      	movs	r5, r4
 8002cc4:	3541      	adds	r5, #65	@ 0x41
 8002cc6:	782b      	ldrb	r3, [r5, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d105      	bne.n	8002cda <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8002cce:	0023      	movs	r3, r4
 8002cd0:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8002cd2:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002cd4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8002cd6:	f7ff f8c5 	bl	8001e64 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cda:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002cdc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cde:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002ce0:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002ce4:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ce6:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002ce8:	438a      	bics	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cec:	491d      	ldr	r1, [pc, #116]	@ (8002d64 <HAL_I2C_Init+0xac>)
 8002cee:	6862      	ldr	r2, [r4, #4]
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	491c      	ldr	r1, [pc, #112]	@ (8002d68 <HAL_I2C_Init+0xb0>)
 8002cf8:	400a      	ands	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cfc:	2801      	cmp	r0, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d00:	2280      	movs	r2, #128	@ 0x80
 8002d02:	0212      	lsls	r2, r2, #8
 8002d04:	4332      	orrs	r2, r6
 8002d06:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	4818      	ldr	r0, [pc, #96]	@ (8002d6c <HAL_I2C_Init+0xb4>)
 8002d0c:	4002      	ands	r2, r0
 8002d0e:	e009      	b.n	8002d24 <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d10:	2284      	movs	r2, #132	@ 0x84
 8002d12:	0212      	lsls	r2, r2, #8
 8002d14:	4332      	orrs	r2, r6
 8002d16:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d18:	2802      	cmp	r0, #2
 8002d1a:	d1f5      	bne.n	8002d08 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d1c:	2280      	movs	r2, #128	@ 0x80
 8002d1e:	6858      	ldr	r0, [r3, #4]
 8002d20:	0112      	lsls	r2, r2, #4
 8002d22:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d24:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d26:	6858      	ldr	r0, [r3, #4]
 8002d28:	4a11      	ldr	r2, [pc, #68]	@ (8002d70 <HAL_I2C_Init+0xb8>)
 8002d2a:	4302      	orrs	r2, r0
 8002d2c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d2e:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d30:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d32:	400a      	ands	r2, r1
 8002d34:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d36:	6961      	ldr	r1, [r4, #20]
 8002d38:	6922      	ldr	r2, [r4, #16]
 8002d3a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d3c:	69a1      	ldr	r1, [r4, #24]
 8002d3e:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d40:	430a      	orrs	r2, r1
 8002d42:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d44:	6a21      	ldr	r1, [r4, #32]
 8002d46:	69e2      	ldr	r2, [r4, #28]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	6819      	ldr	r1, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d56:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	3442      	adds	r4, #66	@ 0x42
 8002d5e:	7020      	strb	r0, [r4, #0]
}
 8002d60:	bd70      	pop	{r4, r5, r6, pc}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	f0ffffff 	.word	0xf0ffffff
 8002d68:	ffff7fff 	.word	0xffff7fff
 8002d6c:	fffff7ff 	.word	0xfffff7ff
 8002d70:	02008000 	.word	0x02008000

08002d74 <HAL_I2C_Mem_Write>:
{
 8002d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d76:	0007      	movs	r7, r0
{
 8002d78:	b087      	sub	sp, #28
 8002d7a:	9303      	str	r3, [sp, #12]
 8002d7c:	ab0c      	add	r3, sp, #48	@ 0x30
 8002d7e:	9202      	str	r2, [sp, #8]
 8002d80:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d82:	3741      	adds	r7, #65	@ 0x41
{
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	9204      	str	r2, [sp, #16]
 8002d88:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	783b      	ldrb	r3, [r7, #0]
{
 8002d8c:	0004      	movs	r4, r0
 8002d8e:	000e      	movs	r6, r1
    __HAL_LOCK(hi2c);
 8002d90:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d108      	bne.n	8002da8 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_I2C_Mem_Write+0x2c>
 8002d9a:	9b05      	ldr	r3, [sp, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d105      	bne.n	8002dac <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002da0:	2380      	movs	r3, #128	@ 0x80
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002da6:	2001      	movs	r0, #1
}
 8002da8:	b007      	add	sp, #28
 8002daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002dac:	0023      	movs	r3, r4
 8002dae:	3340      	adds	r3, #64	@ 0x40
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	2002      	movs	r0, #2
 8002db4:	2a01      	cmp	r2, #1
 8002db6:	d0f7      	beq.n	8002da8 <HAL_I2C_Mem_Write+0x34>
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002dbc:	f7ff fa46 	bl	800224c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dc0:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8002dc2:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dc4:	9000      	str	r0, [sp, #0]
 8002dc6:	2319      	movs	r3, #25
 8002dc8:	2201      	movs	r2, #1
 8002dca:	0020      	movs	r0, r4
 8002dcc:	0209      	lsls	r1, r1, #8
 8002dce:	f7ff ff11 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	2800      	cmp	r0, #0
 8002dd4:	d1e7      	bne.n	8002da6 <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dd6:	2321      	movs	r3, #33	@ 0x21
 8002dd8:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dda:	0027      	movs	r7, r4
 8002ddc:	331f      	adds	r3, #31
 8002dde:	3742      	adds	r7, #66	@ 0x42
 8002de0:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8002de2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de4:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8002de6:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002de8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8002dea:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8002dec:	8563      	strh	r3, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dee:	466b      	mov	r3, sp
 8002df0:	7b1a      	ldrb	r2, [r3, #12]
 8002df2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f20 <HAL_I2C_Mem_Write+0x1ac>)
 8002df4:	0031      	movs	r1, r6
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	2380      	movs	r3, #128	@ 0x80
 8002dfa:	0020      	movs	r0, r4
 8002dfc:	045b      	lsls	r3, r3, #17
 8002dfe:	f7ff fe37 	bl	8002a70 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e02:	002a      	movs	r2, r5
 8002e04:	0020      	movs	r0, r4
 8002e06:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002e08:	f7ff fec6 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	d129      	bne.n	8002e64 <HAL_I2C_Mem_Write+0xf0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e10:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e12:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	d116      	bne.n	8002e46 <HAL_I2C_Mem_Write+0xd2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e18:	466a      	mov	r2, sp
 8002e1a:	7a12      	ldrb	r2, [r2, #8]
 8002e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2180      	movs	r1, #128	@ 0x80
 8002e22:	0020      	movs	r0, r4
 8002e24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002e26:	9500      	str	r5, [sp, #0]
 8002e28:	f7ff fee4 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d119      	bne.n	8002e64 <HAL_I2C_Mem_Write+0xf0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e30:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e32:	2bff      	cmp	r3, #255	@ 0xff
 8002e34:	d81a      	bhi.n	8002e6c <HAL_I2C_Mem_Write+0xf8>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e36:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 8002e38:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e3a:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	9000      	str	r0, [sp, #0]
 8002e44:	e017      	b.n	8002e76 <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e46:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e48:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e4a:	0a12      	lsrs	r2, r2, #8
 8002e4c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002e50:	002a      	movs	r2, r5
 8002e52:	f7ff fea1 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e56:	2800      	cmp	r0, #0
 8002e58:	d104      	bne.n	8002e64 <HAL_I2C_Mem_Write+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5a:	466b      	mov	r3, sp
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	7a1b      	ldrb	r3, [r3, #8]
 8002e60:	6293      	str	r3, [r2, #40]	@ 0x28
 8002e62:	e7dc      	b.n	8002e1e <HAL_I2C_Mem_Write+0xaa>
      __HAL_UNLOCK(hi2c);
 8002e64:	2300      	movs	r3, #0
 8002e66:	3440      	adds	r4, #64	@ 0x40
 8002e68:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8002e6a:	e79c      	b.n	8002da6 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e6c:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e6e:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e70:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e72:	045b      	lsls	r3, r3, #17
 8002e74:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e76:	0031      	movs	r1, r6
 8002e78:	0020      	movs	r0, r4
 8002e7a:	f7ff fdf9 	bl	8002a70 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e7e:	002a      	movs	r2, r5
 8002e80:	0020      	movs	r0, r4
 8002e82:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002e84:	f7ff fe88 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e88:	2800      	cmp	r0, #0
 8002e8a:	d000      	beq.n	8002e8e <HAL_I2C_Mem_Write+0x11a>
 8002e8c:	e78b      	b.n	8002da6 <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e8e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e90:	6822      	ldr	r2, [r4, #0]
 8002e92:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002e94:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e96:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002e98:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002e9a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e9c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ea4:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ea6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d016      	beq.n	8002ede <HAL_I2C_Mem_Write+0x16a>
 8002eb0:	2a00      	cmp	r2, #0
 8002eb2:	d114      	bne.n	8002ede <HAL_I2C_Mem_Write+0x16a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eb4:	2180      	movs	r1, #128	@ 0x80
 8002eb6:	0020      	movs	r0, r4
 8002eb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002eba:	9500      	str	r5, [sp, #0]
 8002ebc:	f7ff fe9a 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d000      	beq.n	8002ec6 <HAL_I2C_Mem_Write+0x152>
 8002ec4:	e76f      	b.n	8002da6 <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ec8:	2bff      	cmp	r3, #255	@ 0xff
 8002eca:	d921      	bls.n	8002f10 <HAL_I2C_Mem_Write+0x19c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ecc:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ece:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ed2:	045b      	lsls	r3, r3, #17
 8002ed4:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ed6:	0031      	movs	r1, r6
 8002ed8:	0020      	movs	r0, r4
 8002eda:	f7ff fdc9 	bl	8002a70 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002ede:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1cc      	bne.n	8002e7e <HAL_I2C_Mem_Write+0x10a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee4:	002a      	movs	r2, r5
 8002ee6:	0020      	movs	r0, r4
 8002ee8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002eea:	f7ff feba 	bl	8002c62 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d000      	beq.n	8002ef4 <HAL_I2C_Mem_Write+0x180>
 8002ef2:	e758      	b.n	8002da6 <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef4:	2120      	movs	r1, #32
 8002ef6:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002ef8:	4d0a      	ldr	r5, [pc, #40]	@ (8002f24 <HAL_I2C_Mem_Write+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efa:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	402a      	ands	r2, r5
 8002f00:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002f04:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002f06:	3341      	adds	r3, #65	@ 0x41
 8002f08:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f0a:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8002f0c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002f0e:	e74b      	b.n	8002da8 <HAL_I2C_Mem_Write+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f10:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8002f12:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f14:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8002f16:	b292      	uxth	r2, r2
 8002f18:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	9000      	str	r0, [sp, #0]
 8002f1e:	e7da      	b.n	8002ed6 <HAL_I2C_Mem_Write+0x162>
 8002f20:	80002000 	.word	0x80002000
 8002f24:	fe00e800 	.word	0xfe00e800

08002f28 <HAL_I2C_Mem_Read>:
{
 8002f28:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f2a:	0006      	movs	r6, r0
{
 8002f2c:	b087      	sub	sp, #28
 8002f2e:	9303      	str	r3, [sp, #12]
 8002f30:	ab0c      	add	r3, sp, #48	@ 0x30
 8002f32:	9202      	str	r2, [sp, #8]
 8002f34:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	3641      	adds	r6, #65	@ 0x41
{
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	9204      	str	r2, [sp, #16]
 8002f3c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3e:	7833      	ldrb	r3, [r6, #0]
{
 8002f40:	0004      	movs	r4, r0
 8002f42:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8002f44:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	d108      	bne.n	8002f5c <HAL_I2C_Mem_Read+0x34>
    if ((pData == NULL) || (Size == 0U))
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_I2C_Mem_Read+0x2c>
 8002f4e:	9b05      	ldr	r3, [sp, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f54:	2380      	movs	r3, #128	@ 0x80
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002f5a:	2001      	movs	r0, #1
}
 8002f5c:	b007      	add	sp, #28
 8002f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002f60:	0023      	movs	r3, r4
 8002f62:	3340      	adds	r3, #64	@ 0x40
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	2002      	movs	r0, #2
 8002f68:	2a01      	cmp	r2, #1
 8002f6a:	d0f7      	beq.n	8002f5c <HAL_I2C_Mem_Read+0x34>
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002f70:	f7ff f96c 	bl	800224c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f74:	2180      	movs	r1, #128	@ 0x80
 8002f76:	2319      	movs	r3, #25
 8002f78:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002f7a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	0020      	movs	r0, r4
 8002f80:	0209      	lsls	r1, r1, #8
 8002f82:	f7ff fe37 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002f86:	1e03      	subs	r3, r0, #0
 8002f88:	d1e7      	bne.n	8002f5a <HAL_I2C_Mem_Read+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f8a:	2222      	movs	r2, #34	@ 0x22
 8002f8c:	7032      	strb	r2, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f8e:	0026      	movs	r6, r4
 8002f90:	321e      	adds	r2, #30
 8002f92:	3642      	adds	r6, #66	@ 0x42
 8002f94:	7032      	strb	r2, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8002f96:	9a04      	ldr	r2, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f98:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8002f9a:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f9c:	9a05      	ldr	r2, [sp, #20]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f9e:	494e      	ldr	r1, [pc, #312]	@ (80030d8 <HAL_I2C_Mem_Read+0x1b0>)
    hi2c->XferCount = Size;
 8002fa0:	8562      	strh	r2, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fa2:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8002fa4:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fa6:	7b12      	ldrb	r2, [r2, #12]
 8002fa8:	0020      	movs	r0, r4
 8002faa:	9100      	str	r1, [sp, #0]
 8002fac:	0039      	movs	r1, r7
 8002fae:	f7ff fd5f 	bl	8002a70 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb2:	002a      	movs	r2, r5
 8002fb4:	0020      	movs	r0, r4
 8002fb6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8002fb8:	f7ff fdee 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d12a      	bne.n	8003016 <HAL_I2C_Mem_Read+0xee>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fc0:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fc4:	2a01      	cmp	r2, #1
 8002fc6:	d117      	bne.n	8002ff8 <HAL_I2C_Mem_Read+0xd0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc8:	466a      	mov	r2, sp
 8002fca:	7a12      	ldrb	r2, [r2, #8]
 8002fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2140      	movs	r1, #64	@ 0x40
 8002fd2:	0020      	movs	r0, r4
 8002fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002fd6:	9500      	str	r5, [sp, #0]
 8002fd8:	f7ff fe0c 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d11a      	bne.n	8003016 <HAL_I2C_Mem_Read+0xee>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80030dc <HAL_I2C_Mem_Read+0x1b4>)
 8002fe4:	2aff      	cmp	r2, #255	@ 0xff
 8002fe6:	d81a      	bhi.n	800301e <HAL_I2C_Mem_Read+0xf6>
      hi2c->XferSize = hi2c->XferCount;
 8002fe8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002fea:	b292      	uxth	r2, r2
 8002fec:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	049b      	lsls	r3, r3, #18
 8002ff6:	e017      	b.n	8003028 <HAL_I2C_Mem_Read+0x100>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ff8:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffa:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ffc:	0a12      	lsrs	r2, r2, #8
 8002ffe:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003000:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003002:	002a      	movs	r2, r5
 8003004:	f7ff fdc8 	bl	8002b98 <I2C_WaitOnTXISFlagUntilTimeout>
 8003008:	2800      	cmp	r0, #0
 800300a:	d104      	bne.n	8003016 <HAL_I2C_Mem_Read+0xee>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800300c:	466b      	mov	r3, sp
 800300e:	6822      	ldr	r2, [r4, #0]
 8003010:	7a1b      	ldrb	r3, [r3, #8]
 8003012:	6293      	str	r3, [r2, #40]	@ 0x28
 8003014:	e7db      	b.n	8002fce <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 8003016:	2300      	movs	r3, #0
 8003018:	3440      	adds	r4, #64	@ 0x40
 800301a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800301c:	e79d      	b.n	8002f5a <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = 1U;
 800301e:	2201      	movs	r2, #1
 8003020:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2380      	movs	r3, #128	@ 0x80
 8003026:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003028:	0039      	movs	r1, r7
 800302a:	0020      	movs	r0, r4
 800302c:	f7ff fd20 	bl	8002a70 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003030:	2200      	movs	r2, #0
 8003032:	2104      	movs	r1, #4
 8003034:	0020      	movs	r0, r4
 8003036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003038:	9500      	str	r5, [sp, #0]
 800303a:	f7ff fddb 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 800303e:	2800      	cmp	r0, #0
 8003040:	d000      	beq.n	8003044 <HAL_I2C_Mem_Read+0x11c>
 8003042:	e78a      	b.n	8002f5a <HAL_I2C_Mem_Read+0x32>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003048:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800304a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800304c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800304e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003050:	3301      	adds	r3, #1
 8003052:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003054:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003056:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003058:	3b01      	subs	r3, #1
 800305a:	b29b      	uxth	r3, r3
 800305c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800305e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003060:	b292      	uxth	r2, r2
 8003062:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003064:	2b00      	cmp	r3, #0
 8003066:	d016      	beq.n	8003096 <HAL_I2C_Mem_Read+0x16e>
 8003068:	2a00      	cmp	r2, #0
 800306a:	d114      	bne.n	8003096 <HAL_I2C_Mem_Read+0x16e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800306c:	2180      	movs	r1, #128	@ 0x80
 800306e:	0020      	movs	r0, r4
 8003070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003072:	9500      	str	r5, [sp, #0]
 8003074:	f7ff fdbe 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8003078:	2800      	cmp	r0, #0
 800307a:	d000      	beq.n	800307e <HAL_I2C_Mem_Read+0x156>
 800307c:	e76d      	b.n	8002f5a <HAL_I2C_Mem_Read+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800307e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003080:	2bff      	cmp	r3, #255	@ 0xff
 8003082:	d921      	bls.n	80030c8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = 1U;
 8003084:	2201      	movs	r2, #1
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003086:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = 1U;
 8003088:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800308a:	045b      	lsls	r3, r3, #17
 800308c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800308e:	0039      	movs	r1, r7
 8003090:	0020      	movs	r0, r4
 8003092:	f7ff fced 	bl	8002a70 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003096:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1c9      	bne.n	8003030 <HAL_I2C_Mem_Read+0x108>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309c:	002a      	movs	r2, r5
 800309e:	0020      	movs	r0, r4
 80030a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80030a2:	f7ff fdde 	bl	8002c62 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030a6:	2800      	cmp	r0, #0
 80030a8:	d000      	beq.n	80030ac <HAL_I2C_Mem_Read+0x184>
 80030aa:	e756      	b.n	8002f5a <HAL_I2C_Mem_Read+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ac:	2120      	movs	r1, #32
 80030ae:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80030b0:	4d0b      	ldr	r5, [pc, #44]	@ (80030e0 <HAL_I2C_Mem_Read+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	402a      	ands	r2, r5
 80030b8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80030ba:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 80030bc:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80030be:	3341      	adds	r3, #65	@ 0x41
 80030c0:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030c2:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 80030c4:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80030c6:	e749      	b.n	8002f5c <HAL_I2C_Mem_Read+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030c8:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 80030ca:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030cc:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 80030ce:	b292      	uxth	r2, r2
 80030d0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	9000      	str	r0, [sp, #0]
 80030d6:	e7da      	b.n	800308e <HAL_I2C_Mem_Read+0x166>
 80030d8:	80002000 	.word	0x80002000
 80030dc:	80002400 	.word	0x80002400
 80030e0:	fe00e800 	.word	0xfe00e800

080030e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e6:	0004      	movs	r4, r0
 80030e8:	3441      	adds	r4, #65	@ 0x41
 80030ea:	7822      	ldrb	r2, [r4, #0]
{
 80030ec:	0003      	movs	r3, r0
 80030ee:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f2:	b2d6      	uxtb	r6, r2
 80030f4:	2a20      	cmp	r2, #32
 80030f6:	d118      	bne.n	800312a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80030f8:	001d      	movs	r5, r3
 80030fa:	3540      	adds	r5, #64	@ 0x40
 80030fc:	782a      	ldrb	r2, [r5, #0]
 80030fe:	2a01      	cmp	r2, #1
 8003100:	d013      	beq.n	800312a <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003102:	2224      	movs	r2, #36	@ 0x24
 8003104:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3a23      	subs	r2, #35	@ 0x23
 800310a:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800310c:	4807      	ldr	r0, [pc, #28]	@ (800312c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800310e:	4391      	bics	r1, r2
 8003110:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003112:	6819      	ldr	r1, [r3, #0]
 8003114:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003116:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003118:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	4339      	orrs	r1, r7
 800311e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003126:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003128:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 800312a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800312c:	ffffefff 	.word	0xffffefff

08003130 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003130:	0002      	movs	r2, r0
{
 8003132:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003134:	3241      	adds	r2, #65	@ 0x41
 8003136:	7814      	ldrb	r4, [r2, #0]
{
 8003138:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800313a:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800313e:	2c20      	cmp	r4, #32
 8003140:	d117      	bne.n	8003172 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003142:	001c      	movs	r4, r3
 8003144:	3440      	adds	r4, #64	@ 0x40
 8003146:	7826      	ldrb	r6, [r4, #0]
 8003148:	2e01      	cmp	r6, #1
 800314a:	d012      	beq.n	8003172 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800314c:	3022      	adds	r0, #34	@ 0x22
 800314e:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3823      	subs	r0, #35	@ 0x23
 8003154:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003156:	4f07      	ldr	r7, [pc, #28]	@ (8003174 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003158:	4386      	bics	r6, r0
 800315a:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800315c:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800315e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003160:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003162:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003164:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	4308      	orrs	r0, r1
 800316a:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800316e:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003170:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003174:	fffff0ff 	.word	0xfffff0ff

08003178 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 800317c:	2001      	movs	r0, #1
  if (hpcd == NULL)
 800317e:	2c00      	cmp	r4, #0
 8003180:	d02b      	beq.n	80031da <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003182:	4d22      	ldr	r5, [pc, #136]	@ (800320c <HAL_PCD_Init+0x94>)
 8003184:	5d63      	ldrb	r3, [r4, r5]
 8003186:	b2da      	uxtb	r2, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d105      	bne.n	8003198 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800318c:	23a4      	movs	r3, #164	@ 0xa4
 800318e:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003190:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 8003192:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 8003194:	f003 f842 	bl	800621c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003198:	2303      	movs	r3, #3
 800319a:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800319c:	6820      	ldr	r0, [r4, #0]
 800319e:	f001 fd51 	bl	8004c44 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	0022      	movs	r2, r4
 80031a6:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031a8:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031aa:	7920      	ldrb	r0, [r4, #4]
 80031ac:	3210      	adds	r2, #16
 80031ae:	4298      	cmp	r0, r3
 80031b0:	d114      	bne.n	80031dc <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b2:	2100      	movs	r1, #0
 80031b4:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b6:	0008      	movs	r0, r1
 80031b8:	3251      	adds	r2, #81	@ 0x51
 80031ba:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031bc:	428b      	cmp	r3, r1
 80031be:	d117      	bne.n	80031f0 <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80031c0:	6861      	ldr	r1, [r4, #4]
 80031c2:	68a2      	ldr	r2, [r4, #8]
 80031c4:	6820      	ldr	r0, [r4, #0]
 80031c6:	f001 fd47 	bl	8004c58 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80031ce:	3301      	adds	r3, #1
 80031d0:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031d2:	7aa3      	ldrb	r3, [r4, #10]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d015      	beq.n	8003204 <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 80031d8:	2000      	movs	r0, #0
}
 80031da:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 80031dc:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031de:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 80031e0:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031e2:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031e4:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031e6:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031e8:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	3228      	adds	r2, #40	@ 0x28
 80031ee:	e7de      	b.n	80031ae <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 80031f0:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f2:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80031f4:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031f6:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031f8:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031fa:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031fc:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fe:	b2c9      	uxtb	r1, r1
 8003200:	3228      	adds	r2, #40	@ 0x28
 8003202:	e7db      	b.n	80031bc <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003204:	0020      	movs	r0, r4
 8003206:	f000 fe0e 	bl	8003e26 <HAL_PCDEx_ActivateLPM>
 800320a:	e7e5      	b.n	80031d8 <HAL_PCD_Init+0x60>
 800320c:	00000291 	.word	0x00000291

08003210 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003210:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8003212:	25a4      	movs	r5, #164	@ 0xa4
 8003214:	00ad      	lsls	r5, r5, #2
 8003216:	5d43      	ldrb	r3, [r0, r5]
{
 8003218:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800321a:	2002      	movs	r0, #2
 800321c:	2b01      	cmp	r3, #1
 800321e:	d009      	beq.n	8003234 <HAL_PCD_Start+0x24>
 8003220:	2301      	movs	r3, #1
 8003222:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 8003224:	6820      	ldr	r0, [r4, #0]
 8003226:	f001 fd03 	bl	8004c30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800322a:	6820      	ldr	r0, [r4, #0]
 800322c:	f001 ff0d 	bl	800504a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003230:	2000      	movs	r0, #0
 8003232:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8003234:	bd70      	pop	{r4, r5, r6, pc}

08003236 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003236:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8003238:	25a4      	movs	r5, #164	@ 0xa4
 800323a:	00ad      	lsls	r5, r5, #2
 800323c:	5d43      	ldrb	r3, [r0, r5]
{
 800323e:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8003240:	2002      	movs	r0, #2
 8003242:	2b01      	cmp	r3, #1
 8003244:	d007      	beq.n	8003256 <HAL_PCD_SetAddress+0x20>
 8003246:	2301      	movs	r3, #1
 8003248:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800324a:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 800324c:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800324e:	f001 fef5 	bl	800503c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003252:	2000      	movs	r0, #0
 8003254:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8003256:	bd70      	pop	{r4, r5, r6, pc}

08003258 <HAL_PCD_IRQHandler>:
{
 8003258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325a:	0004      	movs	r4, r0
 800325c:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800325e:	6800      	ldr	r0, [r0, #0]
 8003260:	f001 fefb 	bl	800505a <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003264:	2380      	movs	r3, #128	@ 0x80
 8003266:	0005      	movs	r5, r0
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	401d      	ands	r5, r3
 800326c:	4218      	tst	r0, r3
 800326e:	d101      	bne.n	8003274 <HAL_PCD_IRQHandler+0x1c>
 8003270:	f000 fc27 	bl	8003ac2 <HAL_PCD_IRQHandler+0x86a>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003274:	6820      	ldr	r0, [r4, #0]
 8003276:	1d82      	adds	r2, r0, #6
 8003278:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 800327a:	b21b      	sxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	db01      	blt.n	8003284 <HAL_PCD_IRQHandler+0x2c>
}
 8003280:	b005      	add	sp, #20
 8003282:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003284:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8003286:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003288:	4019      	ands	r1, r3
 800328a:	9100      	str	r1, [sp, #0]

    if (epindex == 0U)
 800328c:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 800328e:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 8003290:	420b      	tst	r3, r1
 8003292:	d000      	beq.n	8003296 <HAL_PCD_IRQHandler+0x3e>
 8003294:	e0c0      	b.n	8003418 <HAL_PCD_IRQHandler+0x1c0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003296:	2310      	movs	r3, #16
 8003298:	0011      	movs	r1, r2
 800329a:	4019      	ands	r1, r3
 800329c:	421a      	tst	r2, r3
 800329e:	d127      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x98>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032a0:	8803      	ldrh	r3, [r0, #0]
 80032a2:	4aca      	ldr	r2, [pc, #808]	@ (80035cc <HAL_PCD_IRQHandler+0x374>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	2280      	movs	r2, #128	@ 0x80
 80032a8:	0212      	lsls	r2, r2, #8
 80032aa:	4313      	orrs	r3, r2
 80032ac:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032ae:	0003      	movs	r3, r0
 80032b0:	3350      	adds	r3, #80	@ 0x50
 80032b2:	881a      	ldrh	r2, [r3, #0]
 80032b4:	7c23      	ldrb	r3, [r4, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	18c3      	adds	r3, r0, r3
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	4ac4      	ldr	r2, [pc, #784]	@ (80035d0 <HAL_PCD_IRQHandler+0x378>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032be:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032c0:	189b      	adds	r3, r3, r2
 80032c2:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 80032c4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032c6:	059b      	lsls	r3, r3, #22
 80032c8:	0d9b      	lsrs	r3, r3, #22
 80032ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 80032cc:	18d3      	adds	r3, r2, r3
 80032ce:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032d0:	f002 ffd5 	bl	800627e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032d4:	7b23      	ldrb	r3, [r4, #12]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0cc      	beq.n	8003274 <HAL_PCD_IRQHandler+0x1c>
 80032da:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032dc:	6823      	ldr	r3, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032de:	2900      	cmp	r1, #0
 80032e0:	d1c8      	bne.n	8003274 <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032e2:	2080      	movs	r0, #128	@ 0x80
 80032e4:	7b22      	ldrb	r2, [r4, #12]
 80032e6:	334c      	adds	r3, #76	@ 0x4c
 80032e8:	4302      	orrs	r2, r0
 80032ea:	801a      	strh	r2, [r3, #0]
          hpcd->USB_Address = 0U;
 80032ec:	7321      	strb	r1, [r4, #12]
 80032ee:	e7c1      	b.n	8003274 <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032f0:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032f2:	2180      	movs	r1, #128	@ 0x80
 80032f4:	0016      	movs	r6, r2
 80032f6:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032f8:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80032fa:	400e      	ands	r6, r1
 80032fc:	420a      	tst	r2, r1
 80032fe:	d022      	beq.n	8003346 <HAL_PCD_IRQHandler+0xee>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003300:	0003      	movs	r3, r0
 8003302:	3350      	adds	r3, #80	@ 0x50
 8003304:	881a      	ldrh	r2, [r3, #0]
 8003306:	23a8      	movs	r3, #168	@ 0xa8
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800330c:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	18c3      	adds	r3, r0, r3
 8003312:	189b      	adds	r3, r3, r2
 8003314:	4aaf      	ldr	r2, [pc, #700]	@ (80035d4 <HAL_PCD_IRQHandler+0x37c>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003316:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003318:	189b      	adds	r3, r3, r2
 800331a:	0022      	movs	r2, r4
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	3251      	adds	r2, #81	@ 0x51
 8003320:	059b      	lsls	r3, r3, #22
 8003322:	0d9b      	lsrs	r3, r3, #22
 8003324:	32ff      	adds	r2, #255	@ 0xff
 8003326:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003328:	1861      	adds	r1, r4, r1
 800332a:	88d2      	ldrh	r2, [r2, #6]
 800332c:	f002 f8e0 	bl	80054f0 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003330:	6821      	ldr	r1, [r4, #0]
 8003332:	4ba9      	ldr	r3, [pc, #676]	@ (80035d8 <HAL_PCD_IRQHandler+0x380>)
 8003334:	880a      	ldrh	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003336:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003338:	401a      	ands	r2, r3
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	4313      	orrs	r3, r2
 800333e:	800b      	strh	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003340:	f002 ff88 	bl	8006254 <HAL_PCD_SetupStageCallback>
 8003344:	e796      	b.n	8003274 <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003346:	b21b      	sxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	db00      	blt.n	800334e <HAL_PCD_IRQHandler+0xf6>
 800334c:	e792      	b.n	8003274 <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800334e:	8802      	ldrh	r2, [r0, #0]
 8003350:	4ba1      	ldr	r3, [pc, #644]	@ (80035d8 <HAL_PCD_IRQHandler+0x380>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003352:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003354:	401a      	ands	r2, r3
 8003356:	2380      	movs	r3, #128	@ 0x80
 8003358:	4313      	orrs	r3, r2
 800335a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800335c:	0003      	movs	r3, r0
 800335e:	3350      	adds	r3, #80	@ 0x50
 8003360:	881a      	ldrh	r2, [r3, #0]
 8003362:	23a8      	movs	r3, #168	@ 0xa8
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	5ce3      	ldrb	r3, [r4, r3]
 8003368:	3551      	adds	r5, #81	@ 0x51
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	18c3      	adds	r3, r0, r3
 800336e:	189b      	adds	r3, r3, r2
 8003370:	4a98      	ldr	r2, [pc, #608]	@ (80035d4 <HAL_PCD_IRQHandler+0x37c>)
 8003372:	35ff      	adds	r5, #255	@ 0xff
 8003374:	189b      	adds	r3, r3, r2
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	059b      	lsls	r3, r3, #22
 800337a:	0d9b      	lsrs	r3, r3, #22
 800337c:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800337e:	d00d      	beq.n	800339c <HAL_PCD_IRQHandler+0x144>
 8003380:	6969      	ldr	r1, [r5, #20]
 8003382:	2900      	cmp	r1, #0
 8003384:	d00a      	beq.n	800339c <HAL_PCD_IRQHandler+0x144>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003386:	88ea      	ldrh	r2, [r5, #6]
 8003388:	f002 f8b2 	bl	80054f0 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 800338c:	696b      	ldr	r3, [r5, #20]
 800338e:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003390:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 8003392:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003394:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8003396:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003398:	f002 ff65 	bl	8006266 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800339c:	6821      	ldr	r1, [r4, #0]
 800339e:	880a      	ldrh	r2, [r1, #0]
 80033a0:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80033a2:	0512      	lsls	r2, r2, #20
 80033a4:	d500      	bpl.n	80033a8 <HAL_PCD_IRQHandler+0x150>
 80033a6:	e765      	b.n	8003274 <HAL_PCD_IRQHandler+0x1c>
 80033a8:	22c0      	movs	r2, #192	@ 0xc0
 80033aa:	0192      	lsls	r2, r2, #6
 80033ac:	4013      	ands	r3, r2
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d100      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x15c>
 80033b2:	e75f      	b.n	8003274 <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80033b4:	000b      	movs	r3, r1
 80033b6:	4a87      	ldr	r2, [pc, #540]	@ (80035d4 <HAL_PCD_IRQHandler+0x37c>)
 80033b8:	3350      	adds	r3, #80	@ 0x50
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	188a      	adds	r2, r1, r2
 80033be:	18d2      	adds	r2, r2, r3
 80033c0:	8813      	ldrh	r3, [r2, #0]
 80033c2:	059b      	lsls	r3, r3, #22
 80033c4:	0d9b      	lsrs	r3, r3, #22
 80033c6:	8013      	strh	r3, [r2, #0]
 80033c8:	692b      	ldr	r3, [r5, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_PCD_IRQHandler+0x194>
 80033ce:	2080      	movs	r0, #128	@ 0x80
 80033d0:	8813      	ldrh	r3, [r2, #0]
 80033d2:	0200      	lsls	r0, r0, #8
 80033d4:	4303      	orrs	r3, r0
 80033d6:	8013      	strh	r3, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033d8:	880a      	ldrh	r2, [r1, #0]
 80033da:	4b80      	ldr	r3, [pc, #512]	@ (80035dc <HAL_PCD_IRQHandler+0x384>)
 80033dc:	401a      	ands	r2, r3
 80033de:	23c0      	movs	r3, #192	@ 0xc0
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	4053      	eors	r3, r2
 80033e4:	4a7e      	ldr	r2, [pc, #504]	@ (80035e0 <HAL_PCD_IRQHandler+0x388>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	800b      	strh	r3, [r1, #0]
 80033ea:	e743      	b.n	8003274 <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80033ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80033ee:	d808      	bhi.n	8003402 <HAL_PCD_IRQHandler+0x1aa>
 80033f0:	2501      	movs	r5, #1
 80033f2:	0858      	lsrs	r0, r3, #1
 80033f4:	402b      	ands	r3, r5
 80033f6:	18c0      	adds	r0, r0, r3
 80033f8:	8813      	ldrh	r3, [r2, #0]
 80033fa:	0280      	lsls	r0, r0, #10
 80033fc:	4303      	orrs	r3, r0
 80033fe:	b29b      	uxth	r3, r3
 8003400:	e7e9      	b.n	80033d6 <HAL_PCD_IRQHandler+0x17e>
 8003402:	251f      	movs	r5, #31
 8003404:	0958      	lsrs	r0, r3, #5
 8003406:	402b      	ands	r3, r5
 8003408:	425d      	negs	r5, r3
 800340a:	416b      	adcs	r3, r5
 800340c:	1ac0      	subs	r0, r0, r3
 800340e:	8813      	ldrh	r3, [r2, #0]
 8003410:	0280      	lsls	r0, r0, #10
 8003412:	4318      	orrs	r0, r3
 8003414:	4b73      	ldr	r3, [pc, #460]	@ (80035e4 <HAL_PCD_IRQHandler+0x38c>)
 8003416:	e7f1      	b.n	80033fc <HAL_PCD_IRQHandler+0x1a4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003418:	9b00      	ldr	r3, [sp, #0]
 800341a:	009f      	lsls	r7, r3, #2
 800341c:	19c2      	adds	r2, r0, r7
 800341e:	8813      	ldrh	r3, [r2, #0]
 8003420:	b299      	uxth	r1, r3

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003422:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003424:	9101      	str	r1, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003426:	2b00      	cmp	r3, #0
 8003428:	db00      	blt.n	800342c <HAL_PCD_IRQHandler+0x1d4>
 800342a:	e092      	b.n	8003552 <HAL_PCD_IRQHandler+0x2fa>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800342c:	8813      	ldrh	r3, [r2, #0]
 800342e:	496a      	ldr	r1, [pc, #424]	@ (80035d8 <HAL_PCD_IRQHandler+0x380>)
 8003430:	400b      	ands	r3, r1
 8003432:	2180      	movs	r1, #128	@ 0x80
 8003434:	430b      	orrs	r3, r1
 8003436:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003438:	2328      	movs	r3, #40	@ 0x28
 800343a:	9a00      	ldr	r2, [sp, #0]
 800343c:	4353      	muls	r3, r2
 800343e:	18e3      	adds	r3, r4, r3
 8003440:	001a      	movs	r2, r3
 8003442:	001d      	movs	r5, r3
 8003444:	325d      	adds	r2, #93	@ 0x5d
 8003446:	32ff      	adds	r2, #255	@ 0xff
 8003448:	7812      	ldrb	r2, [r2, #0]
 800344a:	3551      	adds	r5, #81	@ 0x51
 800344c:	35ff      	adds	r5, #255	@ 0xff
 800344e:	2a00      	cmp	r2, #0
 8003450:	d114      	bne.n	800347c <HAL_PCD_IRQHandler+0x224>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003452:	0002      	movs	r2, r0
 8003454:	3250      	adds	r2, #80	@ 0x50
 8003456:	8811      	ldrh	r1, [r2, #0]
 8003458:	782a      	ldrb	r2, [r5, #0]
 800345a:	00d2      	lsls	r2, r2, #3
 800345c:	1852      	adds	r2, r2, r1
 800345e:	495d      	ldr	r1, [pc, #372]	@ (80035d4 <HAL_PCD_IRQHandler+0x37c>)
 8003460:	1812      	adds	r2, r2, r0
 8003462:	1852      	adds	r2, r2, r1
 8003464:	8812      	ldrh	r2, [r2, #0]
 8003466:	0592      	lsls	r2, r2, #22
 8003468:	0d95      	lsrs	r5, r2, #22

          if (count != 0U)
 800346a:	2a00      	cmp	r2, #0
 800346c:	d056      	beq.n	800351c <HAL_PCD_IRQHandler+0x2c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800346e:	001a      	movs	r2, r3
 8003470:	3257      	adds	r2, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003472:	32ff      	adds	r2, #255	@ 0xff
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003474:	33fc      	adds	r3, #252	@ 0xfc
 8003476:	0019      	movs	r1, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003478:	8812      	ldrh	r2, [r2, #0]
 800347a:	e04b      	b.n	8003514 <HAL_PCD_IRQHandler+0x2bc>
          if (ep->type == EP_TYPE_BULK)
 800347c:	0019      	movs	r1, r3
 800347e:	3154      	adds	r1, #84	@ 0x54
 8003480:	31ff      	adds	r1, #255	@ 0xff
 8003482:	7809      	ldrb	r1, [r1, #0]

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003484:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 8003486:	2902      	cmp	r1, #2
 8003488:	d000      	beq.n	800348c <HAL_PCD_IRQHandler+0x234>
 800348a:	e0e3      	b.n	8003654 <HAL_PCD_IRQHandler+0x3fc>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800348c:	2680      	movs	r6, #128	@ 0x80
 800348e:	01f6      	lsls	r6, r6, #7
 8003490:	46b4      	mov	ip, r6
 8003492:	4665      	mov	r5, ip
 8003494:	9e01      	ldr	r6, [sp, #4]

    if (ep->xfer_len >= count)
 8003496:	33fc      	adds	r3, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003498:	402e      	ands	r6, r5
 800349a:	9603      	str	r6, [sp, #12]
 800349c:	0006      	movs	r6, r0
 800349e:	3650      	adds	r6, #80	@ 0x50
 80034a0:	9602      	str	r6, [sp, #8]
 80034a2:	4666      	mov	r6, ip
 80034a4:	9d01      	ldr	r5, [sp, #4]
    if (ep->xfer_len >= count)
 80034a6:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034a8:	4235      	tst	r5, r6
 80034aa:	d100      	bne.n	80034ae <HAL_PCD_IRQHandler+0x256>
 80034ac:	e0a0      	b.n	80035f0 <HAL_PCD_IRQHandler+0x398>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034ae:	9d02      	ldr	r5, [sp, #8]
 80034b0:	882e      	ldrh	r6, [r5, #0]
 80034b2:	00d5      	lsls	r5, r2, #3
 80034b4:	1986      	adds	r6, r0, r6
 80034b6:	1976      	adds	r6, r6, r5
 80034b8:	4d45      	ldr	r5, [pc, #276]	@ (80035d0 <HAL_PCD_IRQHandler+0x378>)
 80034ba:	1976      	adds	r6, r6, r5
 80034bc:	8835      	ldrh	r5, [r6, #0]
 80034be:	05ad      	lsls	r5, r5, #22
 80034c0:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 80034c2:	428d      	cmp	r5, r1
 80034c4:	d90d      	bls.n	80034e2 <HAL_PCD_IRQHandler+0x28a>
 80034c6:	2100      	movs	r1, #0
 80034c8:	66d9      	str	r1, [r3, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034ca:	0091      	lsls	r1, r2, #2
 80034cc:	1841      	adds	r1, r0, r1
 80034ce:	880e      	ldrh	r6, [r1, #0]
 80034d0:	4b42      	ldr	r3, [pc, #264]	@ (80035dc <HAL_PCD_IRQHandler+0x384>)
 80034d2:	401e      	ands	r6, r3
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	019b      	lsls	r3, r3, #6
 80034d8:	4073      	eors	r3, r6
 80034da:	4e41      	ldr	r6, [pc, #260]	@ (80035e0 <HAL_PCD_IRQHandler+0x388>)
 80034dc:	4333      	orrs	r3, r6
 80034de:	800b      	strh	r3, [r1, #0]
 80034e0:	e002      	b.n	80034e8 <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 80034e2:	1b49      	subs	r1, r1, r5
 80034e4:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 80034e6:	d0f0      	beq.n	80034ca <HAL_PCD_IRQHandler+0x272>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034e8:	9b01      	ldr	r3, [sp, #4]
 80034ea:	065b      	lsls	r3, r3, #25
 80034ec:	d507      	bpl.n	80034fe <HAL_PCD_IRQHandler+0x2a6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034ee:	0092      	lsls	r2, r2, #2
 80034f0:	1882      	adds	r2, r0, r2
 80034f2:	8813      	ldrh	r3, [r2, #0]
 80034f4:	493c      	ldr	r1, [pc, #240]	@ (80035e8 <HAL_PCD_IRQHandler+0x390>)
 80034f6:	400b      	ands	r3, r1
 80034f8:	493c      	ldr	r1, [pc, #240]	@ (80035ec <HAL_PCD_IRQHandler+0x394>)
 80034fa:	430b      	orrs	r3, r1
 80034fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80034fe:	2d00      	cmp	r5, #0
 8003500:	d00c      	beq.n	800351c <HAL_PCD_IRQHandler+0x2c4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003502:	2328      	movs	r3, #40	@ 0x28
 8003504:	9a00      	ldr	r2, [sp, #0]
 8003506:	4353      	muls	r3, r2
 8003508:	18e1      	adds	r1, r4, r3
 800350a:	000a      	movs	r2, r1
 800350c:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800350e:	32ff      	adds	r2, #255	@ 0xff
 8003510:	8812      	ldrh	r2, [r2, #0]
 8003512:	31fc      	adds	r1, #252	@ 0xfc
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003514:	002b      	movs	r3, r5
 8003516:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003518:	f001 ffea 	bl	80054f0 <USB_ReadPMA>
        ep->xfer_count += count;
 800351c:	2328      	movs	r3, #40	@ 0x28
 800351e:	9900      	ldr	r1, [sp, #0]
 8003520:	4359      	muls	r1, r3
 8003522:	1862      	adds	r2, r4, r1
 8003524:	32fc      	adds	r2, #252	@ 0xfc
 8003526:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8003528:	1940      	adds	r0, r0, r5
 800352a:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 800352c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 800352e:	1940      	adds	r0, r0, r5
 8003530:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003532:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8003534:	2800      	cmp	r0, #0
 8003536:	d003      	beq.n	8003540 <HAL_PCD_IRQHandler+0x2e8>
 8003538:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800353a:	4295      	cmp	r5, r2
 800353c:	d300      	bcc.n	8003540 <HAL_PCD_IRQHandler+0x2e8>
 800353e:	e0b3      	b.n	80036a8 <HAL_PCD_IRQHandler+0x450>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003540:	9a00      	ldr	r2, [sp, #0]
 8003542:	0020      	movs	r0, r4
 8003544:	4353      	muls	r3, r2
 8003546:	18e3      	adds	r3, r4, r3
 8003548:	3351      	adds	r3, #81	@ 0x51
 800354a:	33ff      	adds	r3, #255	@ 0xff
 800354c:	7819      	ldrb	r1, [r3, #0]
 800354e:	f002 fe8a 	bl	8006266 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003552:	2280      	movs	r2, #128	@ 0x80
 8003554:	9b01      	ldr	r3, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003556:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003558:	4213      	tst	r3, r2
 800355a:	d100      	bne.n	800355e <HAL_PCD_IRQHandler+0x306>
 800355c:	e68a      	b.n	8003274 <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800355e:	19c2      	adds	r2, r0, r7
 8003560:	8813      	ldrh	r3, [r2, #0]
 8003562:	491a      	ldr	r1, [pc, #104]	@ (80035cc <HAL_PCD_IRQHandler+0x374>)
        if (ep->type == EP_TYPE_ISOC)
 8003564:	9e00      	ldr	r6, [sp, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003566:	400b      	ands	r3, r1
 8003568:	491e      	ldr	r1, [pc, #120]	@ (80035e4 <HAL_PCD_IRQHandler+0x38c>)
 800356a:	430b      	orrs	r3, r1
 800356c:	b29b      	uxth	r3, r3
 800356e:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 8003570:	2228      	movs	r2, #40	@ 0x28
 8003572:	4356      	muls	r6, r2
 8003574:	19a3      	adds	r3, r4, r6
 8003576:	7cd9      	ldrb	r1, [r3, #19]
 8003578:	2901      	cmp	r1, #1
 800357a:	d000      	beq.n	800357e <HAL_PCD_IRQHandler+0x326>
 800357c:	e0c7      	b.n	800370e <HAL_PCD_IRQHandler+0x4b6>
          ep->xfer_len = 0U;
 800357e:	9900      	ldr	r1, [sp, #0]
 8003580:	3101      	adds	r1, #1
 8003582:	434a      	muls	r2, r1
 8003584:	2100      	movs	r1, #0
 8003586:	5111      	str	r1, [r2, r4]
          if (ep->doublebuffer != 0U)
 8003588:	7f1a      	ldrb	r2, [r3, #28]
 800358a:	428a      	cmp	r2, r1
 800358c:	d100      	bne.n	8003590 <HAL_PCD_IRQHandler+0x338>
 800358e:	e09e      	b.n	80036ce <HAL_PCD_IRQHandler+0x476>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003590:	2240      	movs	r2, #64	@ 0x40
 8003592:	9d01      	ldr	r5, [sp, #4]
 8003594:	9e01      	ldr	r6, [sp, #4]
 8003596:	4015      	ands	r5, r2
 8003598:	4216      	tst	r6, r2
 800359a:	d100      	bne.n	800359e <HAL_PCD_IRQHandler+0x346>
 800359c:	e0a0      	b.n	80036e0 <HAL_PCD_IRQHandler+0x488>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800359e:	7c5a      	ldrb	r2, [r3, #17]
 80035a0:	428a      	cmp	r2, r1
 80035a2:	d000      	beq.n	80035a6 <HAL_PCD_IRQHandler+0x34e>
 80035a4:	e087      	b.n	80036b6 <HAL_PCD_IRQHandler+0x45e>
 80035a6:	0002      	movs	r2, r0
 80035a8:	3250      	adds	r2, #80	@ 0x50
 80035aa:	8811      	ldrh	r1, [r2, #0]
 80035ac:	7c1a      	ldrb	r2, [r3, #16]
 80035ae:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <HAL_PCD_IRQHandler+0x378>)
 80035b0:	00d2      	lsls	r2, r2, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035b2:	18c0      	adds	r0, r0, r3
 80035b4:	1841      	adds	r1, r0, r1
 80035b6:	1852      	adds	r2, r2, r1
 80035b8:	8813      	ldrh	r3, [r2, #0]
 80035ba:	490a      	ldr	r1, [pc, #40]	@ (80035e4 <HAL_PCD_IRQHandler+0x38c>)
 80035bc:	059b      	lsls	r3, r3, #22
 80035be:	0d9b      	lsrs	r3, r3, #22
 80035c0:	8013      	strh	r3, [r2, #0]
 80035c2:	8813      	ldrh	r3, [r2, #0]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	8013      	strh	r3, [r2, #0]
 80035ca:	e080      	b.n	80036ce <HAL_PCD_IRQHandler+0x476>
 80035cc:	ffff8f0f 	.word	0xffff8f0f
 80035d0:	00000402 	.word	0x00000402
 80035d4:	00000406 	.word	0x00000406
 80035d8:	00000f8f 	.word	0x00000f8f
 80035dc:	ffffbf8f 	.word	0xffffbf8f
 80035e0:	00008080 	.word	0x00008080
 80035e4:	ffff8000 	.word	0xffff8000
 80035e8:	ffff8f8f 	.word	0xffff8f8f
 80035ec:	000080c0 	.word	0x000080c0
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80035f0:	9d02      	ldr	r5, [sp, #8]
 80035f2:	882e      	ldrh	r6, [r5, #0]
 80035f4:	00d5      	lsls	r5, r2, #3
 80035f6:	1986      	adds	r6, r0, r6
 80035f8:	1976      	adds	r6, r6, r5
 80035fa:	4dc7      	ldr	r5, [pc, #796]	@ (8003918 <HAL_PCD_IRQHandler+0x6c0>)
 80035fc:	1976      	adds	r6, r6, r5
 80035fe:	8835      	ldrh	r5, [r6, #0]
 8003600:	05ad      	lsls	r5, r5, #22
 8003602:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8003604:	428d      	cmp	r5, r1
 8003606:	d90d      	bls.n	8003624 <HAL_PCD_IRQHandler+0x3cc>
 8003608:	9903      	ldr	r1, [sp, #12]
 800360a:	66d9      	str	r1, [r3, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800360c:	0091      	lsls	r1, r2, #2
 800360e:	1841      	adds	r1, r0, r1
 8003610:	880e      	ldrh	r6, [r1, #0]
 8003612:	4bc2      	ldr	r3, [pc, #776]	@ (800391c <HAL_PCD_IRQHandler+0x6c4>)
 8003614:	401e      	ands	r6, r3
 8003616:	2380      	movs	r3, #128	@ 0x80
 8003618:	019b      	lsls	r3, r3, #6
 800361a:	4073      	eors	r3, r6
 800361c:	4ec0      	ldr	r6, [pc, #768]	@ (8003920 <HAL_PCD_IRQHandler+0x6c8>)
 800361e:	4333      	orrs	r3, r6
 8003620:	800b      	strh	r3, [r1, #0]
 8003622:	e002      	b.n	800362a <HAL_PCD_IRQHandler+0x3d2>
      ep->xfer_len -= count;
 8003624:	1b49      	subs	r1, r1, r5
 8003626:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 8003628:	d0f0      	beq.n	800360c <HAL_PCD_IRQHandler+0x3b4>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800362a:	9b01      	ldr	r3, [sp, #4]
 800362c:	065b      	lsls	r3, r3, #25
 800362e:	d407      	bmi.n	8003640 <HAL_PCD_IRQHandler+0x3e8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003630:	0092      	lsls	r2, r2, #2
 8003632:	1882      	adds	r2, r0, r2
 8003634:	8813      	ldrh	r3, [r2, #0]
 8003636:	49bb      	ldr	r1, [pc, #748]	@ (8003924 <HAL_PCD_IRQHandler+0x6cc>)
 8003638:	400b      	ands	r3, r1
 800363a:	49bb      	ldr	r1, [pc, #748]	@ (8003928 <HAL_PCD_IRQHandler+0x6d0>)
 800363c:	430b      	orrs	r3, r1
 800363e:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8003640:	2d00      	cmp	r5, #0
 8003642:	d100      	bne.n	8003646 <HAL_PCD_IRQHandler+0x3ee>
 8003644:	e76a      	b.n	800351c <HAL_PCD_IRQHandler+0x2c4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003646:	2328      	movs	r3, #40	@ 0x28
 8003648:	9a00      	ldr	r2, [sp, #0]
 800364a:	4353      	muls	r3, r2
 800364c:	18e1      	adds	r1, r4, r3
 800364e:	000a      	movs	r2, r1
 8003650:	325b      	adds	r2, #91	@ 0x5b
 8003652:	e75c      	b.n	800350e <HAL_PCD_IRQHandler+0x2b6>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003654:	0092      	lsls	r2, r2, #2
 8003656:	1882      	adds	r2, r0, r2
 8003658:	8816      	ldrh	r6, [r2, #0]
 800365a:	49b2      	ldr	r1, [pc, #712]	@ (8003924 <HAL_PCD_IRQHandler+0x6cc>)
 800365c:	4031      	ands	r1, r6
 800365e:	4eb2      	ldr	r6, [pc, #712]	@ (8003928 <HAL_PCD_IRQHandler+0x6d0>)
 8003660:	4331      	orrs	r1, r6
 8003662:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003664:	782a      	ldrb	r2, [r5, #0]
 8003666:	0091      	lsls	r1, r2, #2
 8003668:	1841      	adds	r1, r0, r1
 800366a:	880d      	ldrh	r5, [r1, #0]
 800366c:	0001      	movs	r1, r0
 800366e:	3150      	adds	r1, #80	@ 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003670:	8809      	ldrh	r1, [r1, #0]
 8003672:	00d2      	lsls	r2, r2, #3
 8003674:	1852      	adds	r2, r2, r1
 8003676:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003678:	046d      	lsls	r5, r5, #17
 800367a:	d50a      	bpl.n	8003692 <HAL_PCD_IRQHandler+0x43a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800367c:	49ab      	ldr	r1, [pc, #684]	@ (800392c <HAL_PCD_IRQHandler+0x6d4>)
 800367e:	1852      	adds	r2, r2, r1
 8003680:	8812      	ldrh	r2, [r2, #0]
 8003682:	0592      	lsls	r2, r2, #22
 8003684:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8003686:	2a00      	cmp	r2, #0
 8003688:	d100      	bne.n	800368c <HAL_PCD_IRQHandler+0x434>
 800368a:	e747      	b.n	800351c <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800368c:	001a      	movs	r2, r3
 800368e:	3259      	adds	r2, #89	@ 0x59
 8003690:	e6ef      	b.n	8003472 <HAL_PCD_IRQHandler+0x21a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003692:	49a1      	ldr	r1, [pc, #644]	@ (8003918 <HAL_PCD_IRQHandler+0x6c0>)
 8003694:	1852      	adds	r2, r2, r1
 8003696:	8812      	ldrh	r2, [r2, #0]
 8003698:	0592      	lsls	r2, r2, #22
 800369a:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 800369c:	2a00      	cmp	r2, #0
 800369e:	d100      	bne.n	80036a2 <HAL_PCD_IRQHandler+0x44a>
 80036a0:	e73c      	b.n	800351c <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036a2:	001a      	movs	r2, r3
 80036a4:	325b      	adds	r2, #91	@ 0x5b
 80036a6:	e6e4      	b.n	8003472 <HAL_PCD_IRQHandler+0x21a>
        ep = &hpcd->OUT_ep[epindex];
 80036a8:	3151      	adds	r1, #81	@ 0x51
 80036aa:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036ac:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036ae:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036b0:	f001 fcec 	bl	800508c <USB_EPStartXfer>
 80036b4:	e74d      	b.n	8003552 <HAL_PCD_IRQHandler+0x2fa>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036b6:	2a01      	cmp	r2, #1
 80036b8:	d109      	bne.n	80036ce <HAL_PCD_IRQHandler+0x476>
 80036ba:	0002      	movs	r2, r0
 80036bc:	4d9b      	ldr	r5, [pc, #620]	@ (800392c <HAL_PCD_IRQHandler+0x6d4>)
 80036be:	3250      	adds	r2, #80	@ 0x50
 80036c0:	8812      	ldrh	r2, [r2, #0]
 80036c2:	7c1b      	ldrb	r3, [r3, #16]
 80036c4:	1940      	adds	r0, r0, r5
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	1880      	adds	r0, r0, r2
 80036ca:	181b      	adds	r3, r3, r0
 80036cc:	8019      	strh	r1, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036ce:	2328      	movs	r3, #40	@ 0x28
 80036d0:	9a00      	ldr	r2, [sp, #0]
 80036d2:	4353      	muls	r3, r2
 80036d4:	18e3      	adds	r3, r4, r3
 80036d6:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036d8:	0020      	movs	r0, r4
 80036da:	f002 fdd0 	bl	800627e <HAL_PCD_DataInStageCallback>
 80036de:	e5c9      	b.n	8003274 <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036e0:	7c5a      	ldrb	r2, [r3, #17]
 80036e2:	2a00      	cmp	r2, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_PCD_IRQHandler+0x49c>
 80036e6:	0002      	movs	r2, r0
 80036e8:	3250      	adds	r2, #80	@ 0x50
 80036ea:	8811      	ldrh	r1, [r2, #0]
 80036ec:	7c1a      	ldrb	r2, [r3, #16]
 80036ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003918 <HAL_PCD_IRQHandler+0x6c0>)
 80036f0:	00d2      	lsls	r2, r2, #3
 80036f2:	e75e      	b.n	80035b2 <HAL_PCD_IRQHandler+0x35a>
 80036f4:	2a01      	cmp	r2, #1
 80036f6:	d1ea      	bne.n	80036ce <HAL_PCD_IRQHandler+0x476>
 80036f8:	0002      	movs	r2, r0
 80036fa:	4987      	ldr	r1, [pc, #540]	@ (8003918 <HAL_PCD_IRQHandler+0x6c0>)
 80036fc:	3250      	adds	r2, #80	@ 0x50
 80036fe:	8812      	ldrh	r2, [r2, #0]
 8003700:	7c1b      	ldrb	r3, [r3, #16]
 8003702:	1840      	adds	r0, r0, r1
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	1880      	adds	r0, r0, r2
 8003708:	181b      	adds	r3, r3, r0
 800370a:	801d      	strh	r5, [r3, #0]
 800370c:	e7df      	b.n	80036ce <HAL_PCD_IRQHandler+0x476>
          if ((wEPVal & USB_EP_KIND) == 0U)
 800370e:	2780      	movs	r7, #128	@ 0x80
 8003710:	9901      	ldr	r1, [sp, #4]
 8003712:	007f      	lsls	r7, r7, #1
 8003714:	4039      	ands	r1, r7
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003716:	7c1a      	ldrb	r2, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003718:	468c      	mov	ip, r1
 800371a:	9901      	ldr	r1, [sp, #4]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800371c:	9202      	str	r2, [sp, #8]
            if (ep->xfer_len > TxPctSize)
 800371e:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003720:	00d2      	lsls	r2, r2, #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003722:	4239      	tst	r1, r7
 8003724:	d11c      	bne.n	8003760 <HAL_PCD_IRQHandler+0x508>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003726:	0007      	movs	r7, r0
 8003728:	3750      	adds	r7, #80	@ 0x50
 800372a:	883f      	ldrh	r7, [r7, #0]
 800372c:	18bf      	adds	r7, r7, r2
 800372e:	4a7f      	ldr	r2, [pc, #508]	@ (800392c <HAL_PCD_IRQHandler+0x6d4>)
 8003730:	183f      	adds	r7, r7, r0
 8003732:	18bf      	adds	r7, r7, r2
 8003734:	883a      	ldrh	r2, [r7, #0]
 8003736:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 8003738:	0d92      	lsrs	r2, r2, #22
 800373a:	42aa      	cmp	r2, r5
 800373c:	d303      	bcc.n	8003746 <HAL_PCD_IRQHandler+0x4ee>
 800373e:	4662      	mov	r2, ip
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003740:	9902      	ldr	r1, [sp, #8]
 8003742:	629a      	str	r2, [r3, #40]	@ 0x28
 8003744:	e7c8      	b.n	80036d8 <HAL_PCD_IRQHandler+0x480>
              ep->xfer_buff += TxPctSize;
 8003746:	6a59      	ldr	r1, [r3, #36]	@ 0x24
              ep->xfer_len -= TxPctSize;
 8003748:	1aad      	subs	r5, r5, r2
              ep->xfer_buff += TxPctSize;
 800374a:	1889      	adds	r1, r1, r2
 800374c:	6259      	str	r1, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 800374e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8003750:	3610      	adds	r6, #16
              ep->xfer_count += TxPctSize;
 8003752:	188a      	adds	r2, r1, r2
 8003754:	629d      	str	r5, [r3, #40]	@ 0x28
 8003756:	62da      	str	r2, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8003758:	19a1      	adds	r1, r4, r6
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800375a:	f001 fc97 	bl	800508c <USB_EPStartXfer>
 800375e:	e589      	b.n	8003274 <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003760:	2140      	movs	r1, #64	@ 0x40
 8003762:	468c      	mov	ip, r1
 8003764:	9f01      	ldr	r7, [sp, #4]
 8003766:	0006      	movs	r6, r0
 8003768:	400f      	ands	r7, r1
 800376a:	9703      	str	r7, [sp, #12]
 800376c:	4667      	mov	r7, ip
 800376e:	9901      	ldr	r1, [sp, #4]
 8003770:	3650      	adds	r6, #80	@ 0x50
 8003772:	4239      	tst	r1, r7
 8003774:	d100      	bne.n	8003778 <HAL_PCD_IRQHandler+0x520>
 8003776:	e0df      	b.n	8003938 <HAL_PCD_IRQHandler+0x6e0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003778:	496c      	ldr	r1, [pc, #432]	@ (800392c <HAL_PCD_IRQHandler+0x6d4>)
 800377a:	8837      	ldrh	r7, [r6, #0]
 800377c:	1846      	adds	r6, r0, r1
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 800377e:	2100      	movs	r1, #0
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003780:	19f7      	adds	r7, r6, r7
 8003782:	5abf      	ldrh	r7, [r7, r2]
      ep->xfer_len = 0U;
 8003784:	468c      	mov	ip, r1
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003786:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len > TxPctSize)
 8003788:	0dbf      	lsrs	r7, r7, #22
 800378a:	42af      	cmp	r7, r5
 800378c:	d201      	bcs.n	8003792 <HAL_PCD_IRQHandler+0x53a>
      ep->xfer_len -= TxPctSize;
 800378e:	1be9      	subs	r1, r5, r7
 8003790:	468c      	mov	ip, r1
 8003792:	4661      	mov	r1, ip
 8003794:	2580      	movs	r5, #128	@ 0x80
 8003796:	6299      	str	r1, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003798:	9901      	ldr	r1, [sp, #4]
 800379a:	01ed      	lsls	r5, r5, #7
 800379c:	4029      	ands	r1, r5
 800379e:	000d      	movs	r5, r1
 80037a0:	4661      	mov	r1, ip
 80037a2:	2900      	cmp	r1, #0
 80037a4:	d147      	bne.n	8003836 <HAL_PCD_IRQHandler+0x5de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037a6:	2328      	movs	r3, #40	@ 0x28
 80037a8:	9900      	ldr	r1, [sp, #0]
 80037aa:	434b      	muls	r3, r1
 80037ac:	18e3      	adds	r3, r4, r3
 80037ae:	7c5b      	ldrb	r3, [r3, #17]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d130      	bne.n	8003816 <HAL_PCD_IRQHandler+0x5be>
 80037b4:	0007      	movs	r7, r0
 80037b6:	3750      	adds	r7, #80	@ 0x50
 80037b8:	883b      	ldrh	r3, [r7, #0]
 80037ba:	495d      	ldr	r1, [pc, #372]	@ (8003930 <HAL_PCD_IRQHandler+0x6d8>)
 80037bc:	18f3      	adds	r3, r6, r3
 80037be:	189b      	adds	r3, r3, r2
 80037c0:	881e      	ldrh	r6, [r3, #0]
 80037c2:	05b6      	lsls	r6, r6, #22
 80037c4:	0db6      	lsrs	r6, r6, #22
 80037c6:	801e      	strh	r6, [r3, #0]
 80037c8:	881e      	ldrh	r6, [r3, #0]
 80037ca:	430e      	orrs	r6, r1
 80037cc:	b2b6      	uxth	r6, r6
 80037ce:	801e      	strh	r6, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037d0:	4e51      	ldr	r6, [pc, #324]	@ (8003918 <HAL_PCD_IRQHandler+0x6c0>)
 80037d2:	883b      	ldrh	r3, [r7, #0]
 80037d4:	1980      	adds	r0, r0, r6
 80037d6:	18c0      	adds	r0, r0, r3
 80037d8:	1880      	adds	r0, r0, r2
 80037da:	8803      	ldrh	r3, [r0, #0]
 80037dc:	059b      	lsls	r3, r3, #22
 80037de:	0d9b      	lsrs	r3, r3, #22
 80037e0:	8003      	strh	r3, [r0, #0]
 80037e2:	8803      	ldrh	r3, [r0, #0]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	8003      	strh	r3, [r0, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037ea:	0020      	movs	r0, r4
 80037ec:	9902      	ldr	r1, [sp, #8]
 80037ee:	f002 fd46 	bl	800627e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	d100      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x5a0>
 80037f6:	e0dc      	b.n	80039b2 <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80037f8:	2328      	movs	r3, #40	@ 0x28
 80037fa:	9a00      	ldr	r2, [sp, #0]
 80037fc:	4949      	ldr	r1, [pc, #292]	@ (8003924 <HAL_PCD_IRQHandler+0x6cc>)
 80037fe:	4353      	muls	r3, r2
 8003800:	18e3      	adds	r3, r4, r3
 8003802:	7c1b      	ldrb	r3, [r3, #16]
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	18d2      	adds	r2, r2, r3
 800380a:	8813      	ldrh	r3, [r2, #0]
 800380c:	400b      	ands	r3, r1
 800380e:	4949      	ldr	r1, [pc, #292]	@ (8003934 <HAL_PCD_IRQHandler+0x6dc>)
 8003810:	430b      	orrs	r3, r1
 8003812:	8013      	strh	r3, [r2, #0]
 8003814:	e0cd      	b.n	80039b2 <HAL_PCD_IRQHandler+0x75a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003816:	2b01      	cmp	r3, #1
 8003818:	d1e7      	bne.n	80037ea <HAL_PCD_IRQHandler+0x592>
 800381a:	0007      	movs	r7, r0
 800381c:	4661      	mov	r1, ip
 800381e:	3750      	adds	r7, #80	@ 0x50
 8003820:	883b      	ldrh	r3, [r7, #0]
 8003822:	18f3      	adds	r3, r6, r3
 8003824:	189b      	adds	r3, r3, r2
 8003826:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003828:	493b      	ldr	r1, [pc, #236]	@ (8003918 <HAL_PCD_IRQHandler+0x6c0>)
 800382a:	883b      	ldrh	r3, [r7, #0]
 800382c:	1840      	adds	r0, r0, r1
 800382e:	18c0      	adds	r0, r0, r3
 8003830:	1880      	adds	r0, r0, r2
 8003832:	4663      	mov	r3, ip
 8003834:	e7d8      	b.n	80037e8 <HAL_PCD_IRQHandler+0x590>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003836:	2d00      	cmp	r5, #0
 8003838:	d00c      	beq.n	8003854 <HAL_PCD_IRQHandler+0x5fc>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800383a:	9902      	ldr	r1, [sp, #8]
 800383c:	0089      	lsls	r1, r1, #2
 800383e:	1841      	adds	r1, r0, r1
 8003840:	880d      	ldrh	r5, [r1, #0]
 8003842:	9101      	str	r1, [sp, #4]
 8003844:	46ac      	mov	ip, r5
 8003846:	4661      	mov	r1, ip
 8003848:	4d36      	ldr	r5, [pc, #216]	@ (8003924 <HAL_PCD_IRQHandler+0x6cc>)
 800384a:	400d      	ands	r5, r1
 800384c:	4939      	ldr	r1, [pc, #228]	@ (8003934 <HAL_PCD_IRQHandler+0x6dc>)
 800384e:	430d      	orrs	r5, r1
 8003850:	9901      	ldr	r1, [sp, #4]
 8003852:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 8003854:	2528      	movs	r5, #40	@ 0x28
 8003856:	9900      	ldr	r1, [sp, #0]
 8003858:	434d      	muls	r5, r1
 800385a:	2134      	movs	r1, #52	@ 0x34
 800385c:	468c      	mov	ip, r1
 800385e:	1965      	adds	r5, r4, r5
 8003860:	44ac      	add	ip, r5
 8003862:	4661      	mov	r1, ip
 8003864:	7809      	ldrb	r1, [r1, #0]
 8003866:	2901      	cmp	r1, #1
 8003868:	d000      	beq.n	800386c <HAL_PCD_IRQHandler+0x614>
 800386a:	e0a2      	b.n	80039b2 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 800386c:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800386e:	19c9      	adds	r1, r1, r7
 8003870:	6269      	str	r1, [r5, #36]	@ 0x24
 8003872:	9101      	str	r1, [sp, #4]
        ep->xfer_count += TxPctSize;
 8003874:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003876:	19c9      	adds	r1, r1, r7
 8003878:	62d9      	str	r1, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800387a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800387c:	6a29      	ldr	r1, [r5, #32]
 800387e:	428b      	cmp	r3, r1
 8003880:	d317      	bcc.n	80038b2 <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_len_db -= len;
 8003882:	1a5b      	subs	r3, r3, r1
 8003884:	632b      	str	r3, [r5, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003886:	2328      	movs	r3, #40	@ 0x28
 8003888:	9d00      	ldr	r5, [sp, #0]
 800388a:	436b      	muls	r3, r5
 800388c:	18e3      	adds	r3, r4, r3
 800388e:	7c5d      	ldrb	r5, [r3, #17]
 8003890:	b28b      	uxth	r3, r1
 8003892:	2d00      	cmp	r5, #0
 8003894:	d137      	bne.n	8003906 <HAL_PCD_IRQHandler+0x6ae>
 8003896:	0005      	movs	r5, r0
 8003898:	3550      	adds	r5, #80	@ 0x50
 800389a:	882d      	ldrh	r5, [r5, #0]
 800389c:	1975      	adds	r5, r6, r5
 800389e:	18aa      	adds	r2, r5, r2
 80038a0:	8815      	ldrh	r5, [r2, #0]
 80038a2:	05ad      	lsls	r5, r5, #22
 80038a4:	0dad      	lsrs	r5, r5, #22
 80038a6:	8015      	strh	r5, [r2, #0]
 80038a8:	2900      	cmp	r1, #0
 80038aa:	d10e      	bne.n	80038ca <HAL_PCD_IRQHandler+0x672>
 80038ac:	8811      	ldrh	r1, [r2, #0]
 80038ae:	4d20      	ldr	r5, [pc, #128]	@ (8003930 <HAL_PCD_IRQHandler+0x6d8>)
 80038b0:	e013      	b.n	80038da <HAL_PCD_IRQHandler+0x682>
        else if (ep->xfer_len_db == 0U)
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <HAL_PCD_IRQHandler+0x666>
          ep->xfer_fill_db = 0U;
 80038b6:	4661      	mov	r1, ip
 80038b8:	700b      	strb	r3, [r1, #0]
    if (ep->xfer_len > TxPctSize)
 80038ba:	0039      	movs	r1, r7
 80038bc:	e7e3      	b.n	8003886 <HAL_PCD_IRQHandler+0x62e>
          ep->xfer_fill_db = 0U;
 80038be:	2100      	movs	r1, #0
 80038c0:	4667      	mov	r7, ip
 80038c2:	7039      	strb	r1, [r7, #0]
          ep->xfer_len_db = 0U;
 80038c4:	6329      	str	r1, [r5, #48]	@ 0x30
 80038c6:	0019      	movs	r1, r3
 80038c8:	e7dd      	b.n	8003886 <HAL_PCD_IRQHandler+0x62e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038ca:	293e      	cmp	r1, #62	@ 0x3e
 80038cc:	d811      	bhi.n	80038f2 <HAL_PCD_IRQHandler+0x69a>
 80038ce:	2601      	movs	r6, #1
 80038d0:	084d      	lsrs	r5, r1, #1
 80038d2:	400e      	ands	r6, r1
 80038d4:	19ad      	adds	r5, r5, r6
 80038d6:	8811      	ldrh	r1, [r2, #0]
 80038d8:	02ad      	lsls	r5, r5, #10
 80038da:	4329      	orrs	r1, r5
 80038dc:	b289      	uxth	r1, r1
 80038de:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038e0:	2228      	movs	r2, #40	@ 0x28
 80038e2:	9900      	ldr	r1, [sp, #0]
 80038e4:	434a      	muls	r2, r1
 80038e6:	18a2      	adds	r2, r4, r2
 80038e8:	8b12      	ldrh	r2, [r2, #24]
 80038ea:	9901      	ldr	r1, [sp, #4]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80038ec:	f001 fbb9 	bl	8005062 <USB_WritePMA>
 80038f0:	e05f      	b.n	80039b2 <HAL_PCD_IRQHandler+0x75a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80038f2:	261f      	movs	r6, #31
 80038f4:	094d      	lsrs	r5, r1, #5
 80038f6:	4031      	ands	r1, r6
 80038f8:	424e      	negs	r6, r1
 80038fa:	4171      	adcs	r1, r6
 80038fc:	1a6d      	subs	r5, r5, r1
 80038fe:	8811      	ldrh	r1, [r2, #0]
 8003900:	02ad      	lsls	r5, r5, #10
 8003902:	4329      	orrs	r1, r5
 8003904:	e7d3      	b.n	80038ae <HAL_PCD_IRQHandler+0x656>
 8003906:	2d01      	cmp	r5, #1
 8003908:	d1ea      	bne.n	80038e0 <HAL_PCD_IRQHandler+0x688>
 800390a:	0001      	movs	r1, r0
 800390c:	3150      	adds	r1, #80	@ 0x50
 800390e:	8809      	ldrh	r1, [r1, #0]
 8003910:	1876      	adds	r6, r6, r1
 8003912:	18b6      	adds	r6, r6, r2
 8003914:	8033      	strh	r3, [r6, #0]
 8003916:	e7e3      	b.n	80038e0 <HAL_PCD_IRQHandler+0x688>
 8003918:	00000406 	.word	0x00000406
 800391c:	ffffbf8f 	.word	0xffffbf8f
 8003920:	00008080 	.word	0x00008080
 8003924:	ffff8f8f 	.word	0xffff8f8f
 8003928:	000080c0 	.word	0x000080c0
 800392c:	00000402 	.word	0x00000402
 8003930:	ffff8000 	.word	0xffff8000
 8003934:	0000c080 	.word	0x0000c080
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003938:	49ac      	ldr	r1, [pc, #688]	@ (8003bec <HAL_PCD_IRQHandler+0x994>)
 800393a:	8836      	ldrh	r6, [r6, #0]
 800393c:	468c      	mov	ip, r1
 800393e:	4484      	add	ip, r0
 8003940:	4466      	add	r6, ip
 8003942:	5ab6      	ldrh	r6, [r6, r2]
      ep->xfer_len = 0U;
 8003944:	9f03      	ldr	r7, [sp, #12]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003946:	05b6      	lsls	r6, r6, #22
    if (ep->xfer_len >= TxPctSize)
 8003948:	0db6      	lsrs	r6, r6, #22
 800394a:	42ae      	cmp	r6, r5
 800394c:	d800      	bhi.n	8003950 <HAL_PCD_IRQHandler+0x6f8>
      ep->xfer_len -= TxPctSize;
 800394e:	1baf      	subs	r7, r5, r6
 8003950:	2580      	movs	r5, #128	@ 0x80
 8003952:	9901      	ldr	r1, [sp, #4]
 8003954:	01ed      	lsls	r5, r5, #7
 8003956:	4029      	ands	r1, r5
 8003958:	000d      	movs	r5, r1
 800395a:	629f      	str	r7, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 800395c:	2f00      	cmp	r7, #0
 800395e:	d149      	bne.n	80039f4 <HAL_PCD_IRQHandler+0x79c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003960:	2328      	movs	r3, #40	@ 0x28
 8003962:	9900      	ldr	r1, [sp, #0]
 8003964:	434b      	muls	r3, r1
 8003966:	18e3      	adds	r3, r4, r3
 8003968:	7c5b      	ldrb	r3, [r3, #17]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d133      	bne.n	80039d6 <HAL_PCD_IRQHandler+0x77e>
 800396e:	0003      	movs	r3, r0
 8003970:	499f      	ldr	r1, [pc, #636]	@ (8003bf0 <HAL_PCD_IRQHandler+0x998>)
 8003972:	3350      	adds	r3, #80	@ 0x50
 8003974:	881e      	ldrh	r6, [r3, #0]
 8003976:	1840      	adds	r0, r0, r1
 8003978:	1980      	adds	r0, r0, r6
 800397a:	1880      	adds	r0, r0, r2
 800397c:	8806      	ldrh	r6, [r0, #0]
 800397e:	499d      	ldr	r1, [pc, #628]	@ (8003bf4 <HAL_PCD_IRQHandler+0x99c>)
 8003980:	05b6      	lsls	r6, r6, #22
 8003982:	0db6      	lsrs	r6, r6, #22
 8003984:	8006      	strh	r6, [r0, #0]
 8003986:	8806      	ldrh	r6, [r0, #0]
 8003988:	430e      	orrs	r6, r1
 800398a:	b2b6      	uxth	r6, r6
 800398c:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	4463      	add	r3, ip
 8003992:	189b      	adds	r3, r3, r2
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	0592      	lsls	r2, r2, #22
 8003998:	0d92      	lsrs	r2, r2, #22
 800399a:	801a      	strh	r2, [r3, #0]
 800399c:	881a      	ldrh	r2, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	b292      	uxth	r2, r2
 80039a2:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039a4:	0020      	movs	r0, r4
 80039a6:	9902      	ldr	r1, [sp, #8]
 80039a8:	f002 fc69 	bl	800627e <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039ac:	2d00      	cmp	r5, #0
 80039ae:	d100      	bne.n	80039b2 <HAL_PCD_IRQHandler+0x75a>
 80039b0:	e722      	b.n	80037f8 <HAL_PCD_IRQHandler+0x5a0>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80039b2:	2328      	movs	r3, #40	@ 0x28
 80039b4:	9a00      	ldr	r2, [sp, #0]
 80039b6:	4353      	muls	r3, r2
 80039b8:	18e3      	adds	r3, r4, r3
 80039ba:	7c1b      	ldrb	r3, [r3, #16]
 80039bc:	6822      	ldr	r2, [r4, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	18d2      	adds	r2, r2, r3
 80039c2:	8811      	ldrh	r1, [r2, #0]
 80039c4:	4b8c      	ldr	r3, [pc, #560]	@ (8003bf8 <HAL_PCD_IRQHandler+0x9a0>)
 80039c6:	4019      	ands	r1, r3
 80039c8:	2330      	movs	r3, #48	@ 0x30
 80039ca:	404b      	eors	r3, r1
 80039cc:	498b      	ldr	r1, [pc, #556]	@ (8003bfc <HAL_PCD_IRQHandler+0x9a4>)
 80039ce:	430b      	orrs	r3, r1
 80039d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80039d2:	f7ff fc4f 	bl	8003274 <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d1e4      	bne.n	80039a4 <HAL_PCD_IRQHandler+0x74c>
 80039da:	0003      	movs	r3, r0
 80039dc:	4984      	ldr	r1, [pc, #528]	@ (8003bf0 <HAL_PCD_IRQHandler+0x998>)
 80039de:	3350      	adds	r3, #80	@ 0x50
 80039e0:	881e      	ldrh	r6, [r3, #0]
 80039e2:	1840      	adds	r0, r0, r1
 80039e4:	1980      	adds	r0, r0, r6
 80039e6:	1880      	adds	r0, r0, r2
 80039e8:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	4463      	add	r3, ip
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	801f      	strh	r7, [r3, #0]
 80039f2:	e7d7      	b.n	80039a4 <HAL_PCD_IRQHandler+0x74c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039f4:	2900      	cmp	r1, #0
 80039f6:	d108      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x7b2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039f8:	9902      	ldr	r1, [sp, #8]
 80039fa:	4d81      	ldr	r5, [pc, #516]	@ (8003c00 <HAL_PCD_IRQHandler+0x9a8>)
 80039fc:	0089      	lsls	r1, r1, #2
 80039fe:	1841      	adds	r1, r0, r1
 8003a00:	880f      	ldrh	r7, [r1, #0]
 8003a02:	403d      	ands	r5, r7
 8003a04:	4f7f      	ldr	r7, [pc, #508]	@ (8003c04 <HAL_PCD_IRQHandler+0x9ac>)
 8003a06:	433d      	orrs	r5, r7
 8003a08:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 8003a0a:	2728      	movs	r7, #40	@ 0x28
 8003a0c:	9900      	ldr	r1, [sp, #0]
 8003a0e:	434f      	muls	r7, r1
 8003a10:	19e7      	adds	r7, r4, r7
 8003a12:	0039      	movs	r1, r7
 8003a14:	3134      	adds	r1, #52	@ 0x34
 8003a16:	9101      	str	r1, [sp, #4]
 8003a18:	7809      	ldrb	r1, [r1, #0]
 8003a1a:	2901      	cmp	r1, #1
 8003a1c:	d1c9      	bne.n	80039b2 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 8003a1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a20:	1989      	adds	r1, r1, r6
 8003a22:	6279      	str	r1, [r7, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8003a24:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8003a26:	19ad      	adds	r5, r5, r6
 8003a28:	62dd      	str	r5, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2c:	6a3d      	ldr	r5, [r7, #32]
 8003a2e:	42ab      	cmp	r3, r5
 8003a30:	d317      	bcc.n	8003a62 <HAL_PCD_IRQHandler+0x80a>
          ep->xfer_len_db -= len;
 8003a32:	1b5b      	subs	r3, r3, r5
 8003a34:	633b      	str	r3, [r7, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a36:	2328      	movs	r3, #40	@ 0x28
 8003a38:	9e00      	ldr	r6, [sp, #0]
 8003a3a:	4373      	muls	r3, r6
 8003a3c:	18e3      	adds	r3, r4, r3
 8003a3e:	7c5e      	ldrb	r6, [r3, #17]
 8003a40:	b2ab      	uxth	r3, r5
 8003a42:	2e00      	cmp	r6, #0
 8003a44:	d134      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x858>
 8003a46:	0006      	movs	r6, r0
 8003a48:	3650      	adds	r6, #80	@ 0x50
 8003a4a:	8836      	ldrh	r6, [r6, #0]
 8003a4c:	4466      	add	r6, ip
 8003a4e:	18b2      	adds	r2, r6, r2
 8003a50:	8816      	ldrh	r6, [r2, #0]
 8003a52:	05b6      	lsls	r6, r6, #22
 8003a54:	0db6      	lsrs	r6, r6, #22
 8003a56:	8016      	strh	r6, [r2, #0]
 8003a58:	2d00      	cmp	r5, #0
 8003a5a:	d10e      	bne.n	8003a7a <HAL_PCD_IRQHandler+0x822>
 8003a5c:	8815      	ldrh	r5, [r2, #0]
 8003a5e:	4e65      	ldr	r6, [pc, #404]	@ (8003bf4 <HAL_PCD_IRQHandler+0x99c>)
 8003a60:	e013      	b.n	8003a8a <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d103      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x816>
          ep->xfer_fill_db = 0U;
 8003a66:	9d01      	ldr	r5, [sp, #4]
 8003a68:	702b      	strb	r3, [r5, #0]
    if (ep->xfer_len >= TxPctSize)
 8003a6a:	0035      	movs	r5, r6
 8003a6c:	e7e3      	b.n	8003a36 <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db = 0U;
 8003a6e:	2500      	movs	r5, #0
          ep->xfer_fill_db = 0;
 8003a70:	9e01      	ldr	r6, [sp, #4]
          ep->xfer_len_db = 0U;
 8003a72:	633d      	str	r5, [r7, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8003a74:	7035      	strb	r5, [r6, #0]
 8003a76:	001d      	movs	r5, r3
 8003a78:	e7dd      	b.n	8003a36 <HAL_PCD_IRQHandler+0x7de>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a7a:	2d3e      	cmp	r5, #62	@ 0x3e
 8003a7c:	d80e      	bhi.n	8003a9c <HAL_PCD_IRQHandler+0x844>
 8003a7e:	2701      	movs	r7, #1
 8003a80:	086e      	lsrs	r6, r5, #1
 8003a82:	402f      	ands	r7, r5
 8003a84:	19f6      	adds	r6, r6, r7
 8003a86:	8815      	ldrh	r5, [r2, #0]
 8003a88:	02b6      	lsls	r6, r6, #10
 8003a8a:	4335      	orrs	r5, r6
 8003a8c:	b2ad      	uxth	r5, r5
 8003a8e:	8015      	strh	r5, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a90:	2228      	movs	r2, #40	@ 0x28
 8003a92:	9d00      	ldr	r5, [sp, #0]
 8003a94:	436a      	muls	r2, r5
 8003a96:	18a2      	adds	r2, r4, r2
 8003a98:	8b52      	ldrh	r2, [r2, #26]
 8003a9a:	e727      	b.n	80038ec <HAL_PCD_IRQHandler+0x694>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a9c:	271f      	movs	r7, #31
 8003a9e:	096e      	lsrs	r6, r5, #5
 8003aa0:	403d      	ands	r5, r7
 8003aa2:	426f      	negs	r7, r5
 8003aa4:	417d      	adcs	r5, r7
 8003aa6:	1b76      	subs	r6, r6, r5
 8003aa8:	8815      	ldrh	r5, [r2, #0]
 8003aaa:	02b6      	lsls	r6, r6, #10
 8003aac:	4335      	orrs	r5, r6
 8003aae:	e7d6      	b.n	8003a5e <HAL_PCD_IRQHandler+0x806>
 8003ab0:	2e01      	cmp	r6, #1
 8003ab2:	d1ed      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x838>
 8003ab4:	0005      	movs	r5, r0
 8003ab6:	3550      	adds	r5, #80	@ 0x50
 8003ab8:	882d      	ldrh	r5, [r5, #0]
 8003aba:	4465      	add	r5, ip
 8003abc:	18aa      	adds	r2, r5, r2
 8003abe:	8013      	strh	r3, [r2, #0]
 8003ac0:	e7e6      	b.n	8003a90 <HAL_PCD_IRQHandler+0x838>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003ac2:	0543      	lsls	r3, r0, #21
 8003ac4:	d50e      	bpl.n	8003ae4 <HAL_PCD_IRQHandler+0x88c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	494f      	ldr	r1, [pc, #316]	@ (8003c08 <HAL_PCD_IRQHandler+0x9b0>)
 8003aca:	3306      	adds	r3, #6
 8003acc:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8003ace:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8003ad4:	f002 fbe5 	bl	80062a2 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003ad8:	0029      	movs	r1, r5
 8003ada:	0020      	movs	r0, r4
 8003adc:	f7ff fbab 	bl	8003236 <HAL_PCD_SetAddress>
    return;
 8003ae0:	f7ff fbce 	bl	8003280 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003ae4:	0443      	lsls	r3, r0, #17
 8003ae6:	d507      	bpl.n	8003af8 <HAL_PCD_IRQHandler+0x8a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	4948      	ldr	r1, [pc, #288]	@ (8003c0c <HAL_PCD_IRQHandler+0x9b4>)
 8003aec:	3306      	adds	r3, #6
 8003aee:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003af0:	400a      	ands	r2, r1
 8003af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    return;
 8003af4:	f7ff fbc4 	bl	8003280 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003af8:	2380      	movs	r3, #128	@ 0x80
 8003afa:	0001      	movs	r1, r0
 8003afc:	019b      	lsls	r3, r3, #6
 8003afe:	4019      	ands	r1, r3
 8003b00:	4218      	tst	r0, r3
 8003b02:	d004      	beq.n	8003b0e <HAL_PCD_IRQHandler+0x8b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	4942      	ldr	r1, [pc, #264]	@ (8003c10 <HAL_PCD_IRQHandler+0x9b8>)
 8003b08:	3306      	adds	r3, #6
 8003b0a:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8003b0c:	e7f0      	b.n	8003af0 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003b0e:	04c3      	lsls	r3, r0, #19
 8003b10:	d51a      	bpl.n	8003b48 <HAL_PCD_IRQHandler+0x8f0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003b12:	2004      	movs	r0, #4
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	3302      	adds	r3, #2
 8003b18:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8003b1a:	4382      	bics	r2, r0
 8003b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003b1e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8003b20:	1800      	adds	r0, r0, r0
 8003b22:	4382      	bics	r2, r0
 8003b24:	87da      	strh	r2, [r3, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L1)
 8003b26:	23b2      	movs	r3, #178	@ 0xb2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	5ce2      	ldrb	r2, [r4, r3]
 8003b2c:	2a01      	cmp	r2, #1
 8003b2e:	d103      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x8e0>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b30:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 8003b32:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b34:	f000 f98b 	bl	8003e4e <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8003b38:	0020      	movs	r0, r4
 8003b3a:	f002 fbd5 	bl	80062e8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	4934      	ldr	r1, [pc, #208]	@ (8003c14 <HAL_PCD_IRQHandler+0x9bc>)
 8003b42:	3306      	adds	r3, #6
 8003b44:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8003b46:	e7d3      	b.n	8003af0 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003b48:	0503      	lsls	r3, r0, #20
 8003b4a:	d513      	bpl.n	8003b74 <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b4c:	2108      	movs	r1, #8
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	1c9a      	adds	r2, r3, #2
 8003b52:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003b54:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b56:	4301      	orrs	r1, r0
 8003b58:	87d1      	strh	r1, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003b5a:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 8003b5c:	482e      	ldr	r0, [pc, #184]	@ (8003c18 <HAL_PCD_IRQHandler+0x9c0>)
 8003b5e:	4001      	ands	r1, r0
 8003b60:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b62:	2304      	movs	r3, #4
 8003b64:	8fd1      	ldrh	r1, [r2, #62]	@ 0x3e
 8003b66:	430b      	orrs	r3, r1
 8003b68:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 8003b6a:	0020      	movs	r0, r4
 8003b6c:	f002 fbaa 	bl	80062c4 <HAL_PCD_SuspendCallback>
 8003b70:	f7ff fb86 	bl	8003280 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003b74:	2580      	movs	r5, #128	@ 0x80
 8003b76:	4228      	tst	r0, r5
 8003b78:	d021      	beq.n	8003bbe <HAL_PCD_IRQHandler+0x966>
    if (hpcd->LPM_State == LPM_L0)
 8003b7a:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003b7c:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8003b7e:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003b80:	1d99      	adds	r1, r3, #6
 8003b82:	8fca      	ldrh	r2, [r1, #62]	@ 0x3e
 8003b84:	43aa      	bics	r2, r5
 8003b86:	87ca      	strh	r2, [r1, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8003b88:	5c22      	ldrb	r2, [r4, r0]
 8003b8a:	2a00      	cmp	r2, #0
 8003b8c:	d1ed      	bne.n	8003b6a <HAL_PCD_IRQHandler+0x912>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b8e:	2104      	movs	r1, #4
 8003b90:	1c9a      	adds	r2, r3, #2
 8003b92:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003b94:	3354      	adds	r3, #84	@ 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003b96:	4329      	orrs	r1, r5
 8003b98:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003b9a:	2108      	movs	r1, #8
 8003b9c:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
 8003b9e:	4329      	orrs	r1, r5
 8003ba0:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->LPM_State = LPM_L1;
 8003ba2:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003ba4:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 8003ba6:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003ba8:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003baa:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003bac:	089b      	lsrs	r3, r3, #2
 8003bae:	4013      	ands	r3, r2
 8003bb0:	22b3      	movs	r2, #179	@ 0xb3
 8003bb2:	0092      	lsls	r2, r2, #2
 8003bb4:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003bb6:	f000 f94a 	bl	8003e4e <HAL_PCDEx_LPM_Callback>
 8003bba:	f7ff fb61 	bl	8003280 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003bbe:	0583      	lsls	r3, r0, #22
 8003bc0:	d50a      	bpl.n	8003bd8 <HAL_PCD_IRQHandler+0x980>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	4915      	ldr	r1, [pc, #84]	@ (8003c1c <HAL_PCD_IRQHandler+0x9c4>)
 8003bc6:	3306      	adds	r3, #6
 8003bc8:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8003bca:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003bcc:	400a      	ands	r2, r1
 8003bce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8003bd0:	f002 fb60 	bl	8006294 <HAL_PCD_SOFCallback>
    return;
 8003bd4:	f7ff fb54 	bl	8003280 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003bd8:	05c0      	lsls	r0, r0, #23
 8003bda:	d401      	bmi.n	8003be0 <HAL_PCD_IRQHandler+0x988>
 8003bdc:	f7ff fb50 	bl	8003280 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	490f      	ldr	r1, [pc, #60]	@ (8003c20 <HAL_PCD_IRQHandler+0x9c8>)
 8003be4:	3306      	adds	r3, #6
 8003be6:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8003be8:	e782      	b.n	8003af0 <HAL_PCD_IRQHandler+0x898>
 8003bea:	46c0      	nop			@ (mov r8, r8)
 8003bec:	00000406 	.word	0x00000406
 8003bf0:	00000402 	.word	0x00000402
 8003bf4:	ffff8000 	.word	0xffff8000
 8003bf8:	ffff8fbf 	.word	0xffff8fbf
 8003bfc:	00008080 	.word	0x00008080
 8003c00:	ffff8f8f 	.word	0xffff8f8f
 8003c04:	0000c080 	.word	0x0000c080
 8003c08:	fffffbff 	.word	0xfffffbff
 8003c0c:	ffffbfff 	.word	0xffffbfff
 8003c10:	ffffdfff 	.word	0xffffdfff
 8003c14:	ffffefff 	.word	0xffffefff
 8003c18:	fffff7ff 	.word	0xfffff7ff
 8003c1c:	fffffdff 	.word	0xfffffdff
 8003c20:	fffffeff 	.word	0xfffffeff

08003c24 <HAL_PCD_EP_Open>:
{
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	0004      	movs	r4, r0
 8003c28:	2007      	movs	r0, #7
 8003c2a:	000d      	movs	r5, r1
 8003c2c:	4008      	ands	r0, r1
 8003c2e:	2128      	movs	r1, #40	@ 0x28
 8003c30:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8003c32:	b26d      	sxtb	r5, r5
 8003c34:	1866      	adds	r6, r4, r1
 8003c36:	2d00      	cmp	r5, #0
 8003c38:	da18      	bge.n	8003c6c <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8003c3a:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c3c:	3110      	adds	r1, #16
 8003c3e:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003c40:	7475      	strb	r5, [r6, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c42:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8003c44:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8003c46:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d101      	bne.n	8003c50 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003c50:	25a4      	movs	r5, #164	@ 0xa4
 8003c52:	00ad      	lsls	r5, r5, #2
 8003c54:	5d63      	ldrb	r3, [r4, r5]
 8003c56:	2002      	movs	r0, #2
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d006      	beq.n	8003c6a <HAL_PCD_EP_Open+0x46>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c60:	6820      	ldr	r0, [r4, #0]
 8003c62:	f001 f807 	bl	8004c74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c66:	2000      	movs	r0, #0
 8003c68:	5560      	strb	r0, [r4, r5]
}
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8003c6c:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c6e:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8003c70:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c72:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8003c74:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c76:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003c78:	7035      	strb	r5, [r6, #0]
 8003c7a:	e7e2      	b.n	8003c42 <HAL_PCD_EP_Open+0x1e>

08003c7c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8003c7c:	2207      	movs	r2, #7
{
 8003c7e:	000b      	movs	r3, r1
 8003c80:	400a      	ands	r2, r1
 8003c82:	2128      	movs	r1, #40	@ 0x28
 8003c84:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 8003c86:	b25b      	sxtb	r3, r3
{
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	0004      	movs	r4, r0
 8003c8c:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	da12      	bge.n	8003cb8 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 8003c92:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c94:	3110      	adds	r1, #16
 8003c96:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003c98:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 8003c9a:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c9c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003c9e:	00ad      	lsls	r5, r5, #2
 8003ca0:	5d63      	ldrb	r3, [r4, r5]
 8003ca2:	2002      	movs	r0, #2
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d006      	beq.n	8003cb6 <HAL_PCD_EP_Close+0x3a>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cac:	6820      	ldr	r0, [r4, #0]
 8003cae:	f001 f8f1 	bl	8004e94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	5560      	strb	r0, [r4, r5]
}
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8003cb8:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cba:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8003cbc:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cbe:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8003cc0:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cc2:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003cc4:	7003      	strb	r3, [r0, #0]
 8003cc6:	e7e8      	b.n	8003c9a <HAL_PCD_EP_Close+0x1e>

08003cc8 <HAL_PCD_EP_Receive>:
{
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	2407      	movs	r4, #7
}
 8003ccc:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 8003cce:	3421      	adds	r4, #33	@ 0x21
 8003cd0:	434c      	muls	r4, r1
 8003cd2:	1906      	adds	r6, r0, r4
 8003cd4:	0037      	movs	r7, r6
 8003cd6:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 8003cd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 8003cda:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8003cdc:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8003cde:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce0:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce2:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 8003ce4:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce6:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce8:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 8003cea:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8003cec:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 8003cee:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf0:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cf2:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cf4:	6800      	ldr	r0, [r0, #0]
 8003cf6:	f001 f9c9 	bl	800508c <USB_EPStartXfer>
}
 8003cfa:	0028      	movs	r0, r5
 8003cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003cfe <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cfe:	2307      	movs	r3, #7
 8003d00:	400b      	ands	r3, r1
 8003d02:	2128      	movs	r1, #40	@ 0x28
 8003d04:	4359      	muls	r1, r3
 8003d06:	1840      	adds	r0, r0, r1
 8003d08:	30fc      	adds	r0, #252	@ 0xfc
 8003d0a:	6f00      	ldr	r0, [r0, #112]	@ 0x70
}
 8003d0c:	4770      	bx	lr

08003d0e <HAL_PCD_EP_Transmit>:
{
 8003d0e:	b570      	push	{r4, r5, r6, lr}
 8003d10:	2407      	movs	r4, #7
}
 8003d12:	4021      	ands	r1, r4
 8003d14:	3421      	adds	r4, #33	@ 0x21
 8003d16:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 8003d18:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 8003d1a:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 8003d1c:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8003d1e:	2201      	movs	r2, #1
 8003d20:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 8003d22:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 8003d24:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 8003d26:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d28:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 8003d2a:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d2c:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 8003d2e:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 8003d30:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d32:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d34:	6800      	ldr	r0, [r0, #0]
 8003d36:	f001 f9a9 	bl	800508c <USB_EPStartXfer>
}
 8003d3a:	0028      	movs	r0, r5
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}

08003d3e <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d3e:	2207      	movs	r2, #7
{
 8003d40:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d42:	7903      	ldrb	r3, [r0, #4]
{
 8003d44:	0004      	movs	r4, r0
 8003d46:	400a      	ands	r2, r1
    return HAL_ERROR;
 8003d48:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d319      	bcc.n	8003d82 <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8003d4e:	b248      	sxtb	r0, r1
 8003d50:	2328      	movs	r3, #40	@ 0x28
 8003d52:	2800      	cmp	r0, #0
 8003d54:	da16      	bge.n	8003d84 <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d56:	4353      	muls	r3, r2
 8003d58:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8003d5a:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d5c:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8003d5e:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d60:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003d62:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 8003d64:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8003d66:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 8003d68:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d6a:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003d6c:	00ad      	lsls	r5, r5, #2
 8003d6e:	5d62      	ldrb	r2, [r4, r5]
 8003d70:	2002      	movs	r0, #2
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d005      	beq.n	8003d82 <HAL_PCD_EP_SetStall+0x44>
 8003d76:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	f001 f905 	bl	8004f88 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	5560      	strb	r0, [r4, r5]
}
 8003d82:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003d84:	434b      	muls	r3, r1
 8003d86:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8003d88:	2000      	movs	r0, #0
 8003d8a:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8003d8c:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8003d8e:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 8003d90:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8003d92:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8003d94:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003d96:	7018      	strb	r0, [r3, #0]
 8003d98:	e7e4      	b.n	8003d64 <HAL_PCD_EP_SetStall+0x26>

08003d9a <HAL_PCD_EP_ClrStall>:
{
 8003d9a:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d9c:	220f      	movs	r2, #15
{
 8003d9e:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003da0:	7901      	ldrb	r1, [r0, #4]
{
 8003da2:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003da4:	401a      	ands	r2, r3
    return HAL_ERROR;
 8003da6:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003da8:	4291      	cmp	r1, r2
 8003daa:	d31b      	bcc.n	8003de4 <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 8003dac:	2207      	movs	r2, #7
 8003dae:	2128      	movs	r1, #40	@ 0x28
 8003db0:	401a      	ands	r2, r3
 8003db2:	4351      	muls	r1, r2
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	1860      	adds	r0, r4, r1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	da14      	bge.n	8003de6 <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 8003dbc:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dbe:	3110      	adds	r1, #16
 8003dc0:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003dc2:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 8003dc4:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8003dc6:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 8003dc8:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dca:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003dcc:	00b6      	lsls	r6, r6, #2
 8003dce:	5da3      	ldrb	r3, [r4, r6]
 8003dd0:	2002      	movs	r0, #2
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d006      	beq.n	8003de4 <HAL_PCD_EP_ClrStall+0x4a>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003dda:	6820      	ldr	r0, [r4, #0]
 8003ddc:	f001 f8f4 	bl	8004fc8 <USB_EPClearStall>
  return HAL_OK;
 8003de0:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 8003de2:	55a5      	strb	r5, [r4, r6]
}
 8003de4:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8003de6:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003de8:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8003dea:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dec:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8003dee:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df0:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003df2:	7003      	strb	r3, [r0, #0]
 8003df4:	e7e6      	b.n	8003dc4 <HAL_PCD_EP_ClrStall+0x2a>

08003df6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003df6:	b530      	push	{r4, r5, lr}
 8003df8:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003dfa:	060d      	lsls	r5, r1, #24
 8003dfc:	d50b      	bpl.n	8003e16 <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dfe:	2507      	movs	r5, #7
 8003e00:	4029      	ands	r1, r5
 8003e02:	434c      	muls	r4, r1
 8003e04:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e06:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e08:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8003e0a:	2a00      	cmp	r2, #0
 8003e0c:	d107      	bne.n	8003e1e <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 8003e0e:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8003e10:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003e12:	2000      	movs	r0, #0
 8003e14:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003e16:	434c      	muls	r4, r1
 8003e18:	3451      	adds	r4, #81	@ 0x51
 8003e1a:	34ff      	adds	r4, #255	@ 0xff
 8003e1c:	e7f3      	b.n	8003e06 <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 8003e1e:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e20:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8003e22:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e24:	e7f5      	b.n	8003e12 <HAL_PCDEx_PMAConfig+0x1c>

08003e26 <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8003e26:	6803      	ldr	r3, [r0, #0]
{
 8003e28:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8003e2a:	20b4      	movs	r0, #180	@ 0xb4
 8003e2c:	2101      	movs	r1, #1
{
 8003e2e:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8003e30:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8003e32:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 8003e34:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8003e36:	2000      	movs	r0, #0
 8003e38:	00a4      	lsls	r4, r4, #2
 8003e3a:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003e3c:	3354      	adds	r3, #84	@ 0x54
 8003e3e:	881a      	ldrh	r2, [r3, #0]
 8003e40:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003e42:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003e44:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003e46:	8819      	ldrh	r1, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8003e4c:	bd10      	pop	{r4, pc}

08003e4e <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e4e:	4770      	bx	lr

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e52:	0004      	movs	r4, r0
 8003e54:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d04a      	beq.n	8003ef0 <HAL_RCC_OscConfig+0xa0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e5a:	6803      	ldr	r3, [r0, #0]
 8003e5c:	07db      	lsls	r3, r3, #31
 8003e5e:	d42f      	bmi.n	8003ec0 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	079b      	lsls	r3, r3, #30
 8003e64:	d500      	bpl.n	8003e68 <HAL_RCC_OscConfig+0x18>
 8003e66:	e086      	b.n	8003f76 <HAL_RCC_OscConfig+0x126>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	071b      	lsls	r3, r3, #28
 8003e6c:	d500      	bpl.n	8003e70 <HAL_RCC_OscConfig+0x20>
 8003e6e:	e0c6      	b.n	8003ffe <HAL_RCC_OscConfig+0x1ae>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	075b      	lsls	r3, r3, #29
 8003e74:	d500      	bpl.n	8003e78 <HAL_RCC_OscConfig+0x28>
 8003e76:	e0e9      	b.n	800404c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	06db      	lsls	r3, r3, #27
 8003e7c:	d51a      	bpl.n	8003eb4 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e7e:	6962      	ldr	r2, [r4, #20]
 8003e80:	2304      	movs	r3, #4
 8003e82:	4db9      	ldr	r5, [pc, #740]	@ (8004168 <HAL_RCC_OscConfig+0x318>)
 8003e84:	2a01      	cmp	r2, #1
 8003e86:	d000      	beq.n	8003e8a <HAL_RCC_OscConfig+0x3a>
 8003e88:	e152      	b.n	8004130 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e8a:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e8c:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003e92:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003e94:	431a      	orrs	r2, r3
 8003e96:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8003e98:	f7fe f9d8 	bl	800224c <HAL_GetTick>
 8003e9c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e9e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8003ea0:	423b      	tst	r3, r7
 8003ea2:	d100      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x56>
 8003ea4:	e13d      	b.n	8004122 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ea6:	21f8      	movs	r1, #248	@ 0xf8
 8003ea8:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8003eaa:	69a3      	ldr	r3, [r4, #24]
 8003eac:	438a      	bics	r2, r1
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb4:	6a23      	ldr	r3, [r4, #32]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d000      	beq.n	8003ebc <HAL_RCC_OscConfig+0x6c>
 8003eba:	e161      	b.n	8004180 <HAL_RCC_OscConfig+0x330>
        }
      }
    }
  }

  return HAL_OK;
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	e02f      	b.n	8003f20 <HAL_RCC_OscConfig+0xd0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ec0:	220c      	movs	r2, #12
 8003ec2:	4da9      	ldr	r5, [pc, #676]	@ (8004168 <HAL_RCC_OscConfig+0x318>)
 8003ec4:	686b      	ldr	r3, [r5, #4]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d00b      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x94>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ecc:	686b      	ldr	r3, [r5, #4]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d10f      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xa4>
 8003ed4:	22c0      	movs	r2, #192	@ 0xc0
 8003ed6:	686b      	ldr	r3, [r5, #4]
 8003ed8:	0252      	lsls	r2, r2, #9
 8003eda:	4013      	ands	r3, r2
 8003edc:	2280      	movs	r2, #128	@ 0x80
 8003ede:	0252      	lsls	r2, r2, #9
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	682b      	ldr	r3, [r5, #0]
 8003ee6:	039b      	lsls	r3, r3, #14
 8003ee8:	d5ba      	bpl.n	8003e60 <HAL_RCC_OscConfig+0x10>
 8003eea:	6863      	ldr	r3, [r4, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1b7      	bne.n	8003e60 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8003ef0:	2001      	movs	r0, #1
 8003ef2:	e015      	b.n	8003f20 <HAL_RCC_OscConfig+0xd0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef4:	6863      	ldr	r3, [r4, #4]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d114      	bne.n	8003f24 <HAL_RCC_OscConfig+0xd4>
 8003efa:	2380      	movs	r3, #128	@ 0x80
 8003efc:	682a      	ldr	r2, [r5, #0]
 8003efe:	025b      	lsls	r3, r3, #9
 8003f00:	4313      	orrs	r3, r2
 8003f02:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f04:	f7fe f9a2 	bl	800224c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f08:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003f0a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0c:	02bf      	lsls	r7, r7, #10
 8003f0e:	682b      	ldr	r3, [r5, #0]
 8003f10:	423b      	tst	r3, r7
 8003f12:	d1a5      	bne.n	8003e60 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fe f99a 	bl	800224c <HAL_GetTick>
 8003f18:	1b80      	subs	r0, r0, r6
 8003f1a:	2864      	cmp	r0, #100	@ 0x64
 8003f1c:	d9f7      	bls.n	8003f0e <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 8003f1e:	2003      	movs	r0, #3
}
 8003f20:	b005      	add	sp, #20
 8003f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d116      	bne.n	8003f56 <HAL_RCC_OscConfig+0x106>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	4a90      	ldr	r2, [pc, #576]	@ (800416c <HAL_RCC_OscConfig+0x31c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2c:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f2e:	4013      	ands	r3, r2
 8003f30:	602b      	str	r3, [r5, #0]
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	4a8e      	ldr	r2, [pc, #568]	@ (8004170 <HAL_RCC_OscConfig+0x320>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f38:	4013      	ands	r3, r2
 8003f3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003f3c:	f7fe f986 	bl	800224c <HAL_GetTick>
 8003f40:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f42:	682b      	ldr	r3, [r5, #0]
 8003f44:	423b      	tst	r3, r7
 8003f46:	d100      	bne.n	8003f4a <HAL_RCC_OscConfig+0xfa>
 8003f48:	e78a      	b.n	8003e60 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f4a:	f7fe f97f 	bl	800224c <HAL_GetTick>
 8003f4e:	1b80      	subs	r0, r0, r6
 8003f50:	2864      	cmp	r0, #100	@ 0x64
 8003f52:	d9f6      	bls.n	8003f42 <HAL_RCC_OscConfig+0xf2>
 8003f54:	e7e3      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f56:	2b05      	cmp	r3, #5
 8003f58:	d105      	bne.n	8003f66 <HAL_RCC_OscConfig+0x116>
 8003f5a:	2380      	movs	r3, #128	@ 0x80
 8003f5c:	682a      	ldr	r2, [r5, #0]
 8003f5e:	02db      	lsls	r3, r3, #11
 8003f60:	4313      	orrs	r3, r2
 8003f62:	602b      	str	r3, [r5, #0]
 8003f64:	e7c9      	b.n	8003efa <HAL_RCC_OscConfig+0xaa>
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	4a80      	ldr	r2, [pc, #512]	@ (800416c <HAL_RCC_OscConfig+0x31c>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	682b      	ldr	r3, [r5, #0]
 8003f70:	4a7f      	ldr	r2, [pc, #508]	@ (8004170 <HAL_RCC_OscConfig+0x320>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	e7c5      	b.n	8003f02 <HAL_RCC_OscConfig+0xb2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f76:	220c      	movs	r2, #12
 8003f78:	4d7b      	ldr	r5, [pc, #492]	@ (8004168 <HAL_RCC_OscConfig+0x318>)
 8003f7a:	686b      	ldr	r3, [r5, #4]
 8003f7c:	4213      	tst	r3, r2
 8003f7e:	d00b      	beq.n	8003f98 <HAL_RCC_OscConfig+0x148>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f80:	686b      	ldr	r3, [r5, #4]
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d115      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x164>
 8003f88:	22c0      	movs	r2, #192	@ 0xc0
 8003f8a:	686b      	ldr	r3, [r5, #4]
 8003f8c:	0252      	lsls	r2, r2, #9
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2280      	movs	r2, #128	@ 0x80
 8003f92:	0212      	lsls	r2, r2, #8
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d10d      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x164>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f98:	682b      	ldr	r3, [r5, #0]
 8003f9a:	079b      	lsls	r3, r3, #30
 8003f9c:	d502      	bpl.n	8003fa4 <HAL_RCC_OscConfig+0x154>
 8003f9e:	68e3      	ldr	r3, [r4, #12]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d1a5      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xa0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	21f8      	movs	r1, #248	@ 0xf8
 8003fa6:	682a      	ldr	r2, [r5, #0]
 8003fa8:	6923      	ldr	r3, [r4, #16]
 8003faa:	438a      	bics	r2, r1
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	602b      	str	r3, [r5, #0]
 8003fb2:	e759      	b.n	8003e68 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fb4:	68e2      	ldr	r2, [r4, #12]
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	d00f      	beq.n	8003fdc <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_HSI_ENABLE();
 8003fbc:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbe:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003fc4:	f7fe f942 	bl	800224c <HAL_GetTick>
 8003fc8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	682b      	ldr	r3, [r5, #0]
 8003fcc:	423b      	tst	r3, r7
 8003fce:	d1e9      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd0:	f7fe f93c 	bl	800224c <HAL_GetTick>
 8003fd4:	1b80      	subs	r0, r0, r6
 8003fd6:	2802      	cmp	r0, #2
 8003fd8:	d9f7      	bls.n	8003fca <HAL_RCC_OscConfig+0x17a>
 8003fda:	e7a0      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
        __HAL_RCC_HSI_DISABLE();
 8003fdc:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fde:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8003fe0:	439a      	bics	r2, r3
 8003fe2:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8003fe4:	f7fe f932 	bl	800224c <HAL_GetTick>
 8003fe8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	682b      	ldr	r3, [r5, #0]
 8003fec:	423b      	tst	r3, r7
 8003fee:	d100      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x1a2>
 8003ff0:	e73a      	b.n	8003e68 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fe f92b 	bl	800224c <HAL_GetTick>
 8003ff6:	1b80      	subs	r0, r0, r6
 8003ff8:	2802      	cmp	r0, #2
 8003ffa:	d9f6      	bls.n	8003fea <HAL_RCC_OscConfig+0x19a>
 8003ffc:	e78f      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ffe:	69e2      	ldr	r2, [r4, #28]
 8004000:	2301      	movs	r3, #1
 8004002:	4d59      	ldr	r5, [pc, #356]	@ (8004168 <HAL_RCC_OscConfig+0x318>)
 8004004:	2a00      	cmp	r2, #0
 8004006:	d010      	beq.n	800402a <HAL_RCC_OscConfig+0x1da>
      __HAL_RCC_LSI_ENABLE();
 8004008:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400a:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 800400c:	4313      	orrs	r3, r2
 800400e:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8004010:	f7fe f91c 	bl	800224c <HAL_GetTick>
 8004014:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004016:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004018:	423b      	tst	r3, r7
 800401a:	d000      	beq.n	800401e <HAL_RCC_OscConfig+0x1ce>
 800401c:	e728      	b.n	8003e70 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800401e:	f7fe f915 	bl	800224c <HAL_GetTick>
 8004022:	1b80      	subs	r0, r0, r6
 8004024:	2802      	cmp	r0, #2
 8004026:	d9f6      	bls.n	8004016 <HAL_RCC_OscConfig+0x1c6>
 8004028:	e779      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_LSI_DISABLE();
 800402a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800402c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800402e:	439a      	bics	r2, r3
 8004030:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8004032:	f7fe f90b 	bl	800224c <HAL_GetTick>
 8004036:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800403a:	423b      	tst	r3, r7
 800403c:	d100      	bne.n	8004040 <HAL_RCC_OscConfig+0x1f0>
 800403e:	e717      	b.n	8003e70 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004040:	f7fe f904 	bl	800224c <HAL_GetTick>
 8004044:	1b80      	subs	r0, r0, r6
 8004046:	2802      	cmp	r0, #2
 8004048:	d9f6      	bls.n	8004038 <HAL_RCC_OscConfig+0x1e8>
 800404a:	e768      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800404c:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800404e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004050:	4d45      	ldr	r5, [pc, #276]	@ (8004168 <HAL_RCC_OscConfig+0x318>)
 8004052:	0552      	lsls	r2, r2, #21
 8004054:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004056:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004058:	4213      	tst	r3, r2
 800405a:	d108      	bne.n	800406e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800405c:	69eb      	ldr	r3, [r5, #28]
 800405e:	4313      	orrs	r3, r2
 8004060:	61eb      	str	r3, [r5, #28]
 8004062:	69eb      	ldr	r3, [r5, #28]
 8004064:	4013      	ands	r3, r2
 8004066:	9303      	str	r3, [sp, #12]
 8004068:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800406a:	2301      	movs	r3, #1
 800406c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	2780      	movs	r7, #128	@ 0x80
 8004070:	4e40      	ldr	r6, [pc, #256]	@ (8004174 <HAL_RCC_OscConfig+0x324>)
 8004072:	007f      	lsls	r7, r7, #1
 8004074:	6833      	ldr	r3, [r6, #0]
 8004076:	423b      	tst	r3, r7
 8004078:	d015      	beq.n	80040a6 <HAL_RCC_OscConfig+0x256>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800407a:	68a3      	ldr	r3, [r4, #8]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d122      	bne.n	80040c6 <HAL_RCC_OscConfig+0x276>
 8004080:	6a2a      	ldr	r2, [r5, #32]
 8004082:	4313      	orrs	r3, r2
 8004084:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004086:	f7fe f8e1 	bl	800224c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800408c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408e:	6a2b      	ldr	r3, [r5, #32]
 8004090:	423b      	tst	r3, r7
 8004092:	d03f      	beq.n	8004114 <HAL_RCC_OscConfig+0x2c4>
    if(pwrclkchanged == SET)
 8004094:	9b00      	ldr	r3, [sp, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d000      	beq.n	800409c <HAL_RCC_OscConfig+0x24c>
 800409a:	e6ed      	b.n	8003e78 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800409c:	69eb      	ldr	r3, [r5, #28]
 800409e:	4a36      	ldr	r2, [pc, #216]	@ (8004178 <HAL_RCC_OscConfig+0x328>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	61eb      	str	r3, [r5, #28]
 80040a4:	e6e8      	b.n	8003e78 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040a6:	6833      	ldr	r3, [r6, #0]
 80040a8:	433b      	orrs	r3, r7
 80040aa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80040ac:	f7fe f8ce 	bl	800224c <HAL_GetTick>
 80040b0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	6833      	ldr	r3, [r6, #0]
 80040b4:	423b      	tst	r3, r7
 80040b6:	d1e0      	bne.n	800407a <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b8:	f7fe f8c8 	bl	800224c <HAL_GetTick>
 80040bc:	9b01      	ldr	r3, [sp, #4]
 80040be:	1ac0      	subs	r0, r0, r3
 80040c0:	2864      	cmp	r0, #100	@ 0x64
 80040c2:	d9f6      	bls.n	80040b2 <HAL_RCC_OscConfig+0x262>
 80040c4:	e72b      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c6:	2201      	movs	r2, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d114      	bne.n	80040f6 <HAL_RCC_OscConfig+0x2a6>
 80040cc:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ce:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d0:	4393      	bics	r3, r2
 80040d2:	622b      	str	r3, [r5, #32]
 80040d4:	6a2b      	ldr	r3, [r5, #32]
 80040d6:	3203      	adds	r2, #3
 80040d8:	4393      	bics	r3, r2
 80040da:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80040dc:	f7fe f8b6 	bl	800224c <HAL_GetTick>
 80040e0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e2:	6a2b      	ldr	r3, [r5, #32]
 80040e4:	423b      	tst	r3, r7
 80040e6:	d0d5      	beq.n	8004094 <HAL_RCC_OscConfig+0x244>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7fe f8b0 	bl	800224c <HAL_GetTick>
 80040ec:	4b23      	ldr	r3, [pc, #140]	@ (800417c <HAL_RCC_OscConfig+0x32c>)
 80040ee:	1b80      	subs	r0, r0, r6
 80040f0:	4298      	cmp	r0, r3
 80040f2:	d9f6      	bls.n	80040e2 <HAL_RCC_OscConfig+0x292>
 80040f4:	e713      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f6:	2b05      	cmp	r3, #5
 80040f8:	d105      	bne.n	8004106 <HAL_RCC_OscConfig+0x2b6>
 80040fa:	6a29      	ldr	r1, [r5, #32]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	430b      	orrs	r3, r1
 8004100:	622b      	str	r3, [r5, #32]
 8004102:	6a2b      	ldr	r3, [r5, #32]
 8004104:	e7bd      	b.n	8004082 <HAL_RCC_OscConfig+0x232>
 8004106:	6a2b      	ldr	r3, [r5, #32]
 8004108:	4393      	bics	r3, r2
 800410a:	2204      	movs	r2, #4
 800410c:	622b      	str	r3, [r5, #32]
 800410e:	6a2b      	ldr	r3, [r5, #32]
 8004110:	4393      	bics	r3, r2
 8004112:	e7b7      	b.n	8004084 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fe f89a 	bl	800224c <HAL_GetTick>
 8004118:	4b18      	ldr	r3, [pc, #96]	@ (800417c <HAL_RCC_OscConfig+0x32c>)
 800411a:	1b80      	subs	r0, r0, r6
 800411c:	4298      	cmp	r0, r3
 800411e:	d9b6      	bls.n	800408e <HAL_RCC_OscConfig+0x23e>
 8004120:	e6fd      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004122:	f7fe f893 	bl	800224c <HAL_GetTick>
 8004126:	1b80      	subs	r0, r0, r6
 8004128:	2802      	cmp	r0, #2
 800412a:	d800      	bhi.n	800412e <HAL_RCC_OscConfig+0x2de>
 800412c:	e6b7      	b.n	8003e9e <HAL_RCC_OscConfig+0x4e>
 800412e:	e6f6      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004130:	3205      	adds	r2, #5
 8004132:	d103      	bne.n	800413c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSI14ADC_ENABLE();
 8004134:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8004136:	439a      	bics	r2, r3
 8004138:	636a      	str	r2, [r5, #52]	@ 0x34
 800413a:	e6b4      	b.n	8003ea6 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 800413c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800413e:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004140:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8004142:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8004144:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8004146:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004148:	4393      	bics	r3, r2
 800414a:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 800414c:	f7fe f87e 	bl	800224c <HAL_GetTick>
 8004150:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004152:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004154:	423b      	tst	r3, r7
 8004156:	d100      	bne.n	800415a <HAL_RCC_OscConfig+0x30a>
 8004158:	e6ac      	b.n	8003eb4 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800415a:	f7fe f877 	bl	800224c <HAL_GetTick>
 800415e:	1b80      	subs	r0, r0, r6
 8004160:	2802      	cmp	r0, #2
 8004162:	d9f6      	bls.n	8004152 <HAL_RCC_OscConfig+0x302>
 8004164:	e6db      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	40021000 	.word	0x40021000
 800416c:	fffeffff 	.word	0xfffeffff
 8004170:	fffbffff 	.word	0xfffbffff
 8004174:	40007000 	.word	0x40007000
 8004178:	efffffff 	.word	0xefffffff
 800417c:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004180:	210c      	movs	r1, #12
 8004182:	4d34      	ldr	r5, [pc, #208]	@ (8004254 <HAL_RCC_OscConfig+0x404>)
 8004184:	686a      	ldr	r2, [r5, #4]
 8004186:	400a      	ands	r2, r1
 8004188:	2a08      	cmp	r2, #8
 800418a:	d047      	beq.n	800421c <HAL_RCC_OscConfig+0x3cc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800418c:	4a32      	ldr	r2, [pc, #200]	@ (8004258 <HAL_RCC_OscConfig+0x408>)
 800418e:	2b02      	cmp	r3, #2
 8004190:	d132      	bne.n	80041f8 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 8004192:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004194:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8004196:	4013      	ands	r3, r2
 8004198:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800419a:	f7fe f857 	bl	800224c <HAL_GetTick>
 800419e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a0:	04bf      	lsls	r7, r7, #18
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	423b      	tst	r3, r7
 80041a6:	d121      	bne.n	80041ec <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a8:	220f      	movs	r2, #15
 80041aa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ac:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ae:	4393      	bics	r3, r2
 80041b0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b2:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041b4:	4313      	orrs	r3, r2
 80041b6:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80041b8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80041ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80041bc:	686a      	ldr	r2, [r5, #4]
 80041be:	430b      	orrs	r3, r1
 80041c0:	4926      	ldr	r1, [pc, #152]	@ (800425c <HAL_RCC_OscConfig+0x40c>)
 80041c2:	400a      	ands	r2, r1
 80041c4:	4313      	orrs	r3, r2
 80041c6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	682a      	ldr	r2, [r5, #0]
 80041cc:	045b      	lsls	r3, r3, #17
 80041ce:	4313      	orrs	r3, r2
 80041d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80041d2:	f7fe f83b 	bl	800224c <HAL_GetTick>
 80041d6:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	4233      	tst	r3, r6
 80041dc:	d000      	beq.n	80041e0 <HAL_RCC_OscConfig+0x390>
 80041de:	e66d      	b.n	8003ebc <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e0:	f7fe f834 	bl	800224c <HAL_GetTick>
 80041e4:	1b00      	subs	r0, r0, r4
 80041e6:	2802      	cmp	r0, #2
 80041e8:	d9f6      	bls.n	80041d8 <HAL_RCC_OscConfig+0x388>
 80041ea:	e698      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fe f82e 	bl	800224c <HAL_GetTick>
 80041f0:	1b80      	subs	r0, r0, r6
 80041f2:	2802      	cmp	r0, #2
 80041f4:	d9d5      	bls.n	80041a2 <HAL_RCC_OscConfig+0x352>
 80041f6:	e692      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
        __HAL_RCC_PLL_DISABLE();
 80041f8:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fa:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4013      	ands	r3, r2
 80041fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004200:	f7fe f824 	bl	800224c <HAL_GetTick>
 8004204:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004206:	04b6      	lsls	r6, r6, #18
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	4233      	tst	r3, r6
 800420c:	d100      	bne.n	8004210 <HAL_RCC_OscConfig+0x3c0>
 800420e:	e655      	b.n	8003ebc <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004210:	f7fe f81c 	bl	800224c <HAL_GetTick>
 8004214:	1b00      	subs	r0, r0, r4
 8004216:	2802      	cmp	r0, #2
 8004218:	d9f6      	bls.n	8004208 <HAL_RCC_OscConfig+0x3b8>
 800421a:	e680      	b.n	8003f1e <HAL_RCC_OscConfig+0xce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800421c:	2b01      	cmp	r3, #1
 800421e:	d100      	bne.n	8004222 <HAL_RCC_OscConfig+0x3d2>
 8004220:	e666      	b.n	8003ef0 <HAL_RCC_OscConfig+0xa0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 8004224:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004228:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 800422a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800422c:	4002      	ands	r2, r0
 800422e:	428a      	cmp	r2, r1
 8004230:	d000      	beq.n	8004234 <HAL_RCC_OscConfig+0x3e4>
 8004232:	e65d      	b.n	8003ef0 <HAL_RCC_OscConfig+0xa0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004234:	220f      	movs	r2, #15
 8004236:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004238:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800423a:	4293      	cmp	r3, r2
 800423c:	d000      	beq.n	8004240 <HAL_RCC_OscConfig+0x3f0>
 800423e:	e657      	b.n	8003ef0 <HAL_RCC_OscConfig+0xa0>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004240:	23f0      	movs	r3, #240	@ 0xf0
 8004242:	039b      	lsls	r3, r3, #14
 8004244:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004246:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004248:	1ac0      	subs	r0, r0, r3
 800424a:	1e43      	subs	r3, r0, #1
 800424c:	4198      	sbcs	r0, r3
 800424e:	b2c0      	uxtb	r0, r0
 8004250:	e666      	b.n	8003f20 <HAL_RCC_OscConfig+0xd0>
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	40021000 	.word	0x40021000
 8004258:	feffffff 	.word	0xfeffffff
 800425c:	ffc27fff 	.word	0xffc27fff

08004260 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004260:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8004262:	4a0b      	ldr	r2, [pc, #44]	@ (8004290 <HAL_RCC_GetSysClockFreq+0x30>)
{
 8004264:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8004266:	6854      	ldr	r4, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004268:	4023      	ands	r3, r4
 800426a:	2b08      	cmp	r3, #8
 800426c:	d10d      	bne.n	800428a <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800426e:	250f      	movs	r5, #15
 8004270:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8004272:	4a08      	ldr	r2, [pc, #32]	@ (8004294 <HAL_RCC_GetSysClockFreq+0x34>)
 8004274:	402b      	ands	r3, r5
 8004276:	5cd1      	ldrb	r1, [r2, r3]
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004278:	4807      	ldr	r0, [pc, #28]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x38>)
 800427a:	f7fb ff75 	bl	8000168 <__udivsi3>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800427e:	0ca4      	lsrs	r4, r4, #18
 8004280:	4b06      	ldr	r3, [pc, #24]	@ (800429c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004282:	402c      	ands	r4, r5
 8004284:	5d1b      	ldrb	r3, [r3, r4]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004286:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004288:	bd70      	pop	{r4, r5, r6, pc}
      sysclockfreq = HSE_VALUE;
 800428a:	4803      	ldr	r0, [pc, #12]	@ (8004298 <HAL_RCC_GetSysClockFreq+0x38>)
  return sysclockfreq;
 800428c:	e7fc      	b.n	8004288 <HAL_RCC_GetSysClockFreq+0x28>
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	40021000 	.word	0x40021000
 8004294:	08007b8a 	.word	0x08007b8a
 8004298:	007a1200 	.word	0x007a1200
 800429c:	08007b9a 	.word	0x08007b9a

080042a0 <HAL_RCC_ClockConfig>:
{
 80042a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042a2:	0004      	movs	r4, r0
 80042a4:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80042aa:	2001      	movs	r0, #1
}
 80042ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ae:	2201      	movs	r2, #1
 80042b0:	4d37      	ldr	r5, [pc, #220]	@ (8004390 <HAL_RCC_ClockConfig+0xf0>)
 80042b2:	682b      	ldr	r3, [r5, #0]
 80042b4:	4013      	ands	r3, r2
 80042b6:	428b      	cmp	r3, r1
 80042b8:	d31c      	bcc.n	80042f4 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	0793      	lsls	r3, r2, #30
 80042be:	d422      	bmi.n	8004306 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c0:	07d2      	lsls	r2, r2, #31
 80042c2:	d42f      	bmi.n	8004324 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c4:	2301      	movs	r3, #1
 80042c6:	682a      	ldr	r2, [r5, #0]
 80042c8:	401a      	ands	r2, r3
 80042ca:	42b2      	cmp	r2, r6
 80042cc:	d851      	bhi.n	8004372 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	4d30      	ldr	r5, [pc, #192]	@ (8004394 <HAL_RCC_ClockConfig+0xf4>)
 80042d2:	075b      	lsls	r3, r3, #29
 80042d4:	d454      	bmi.n	8004380 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042d6:	f7ff ffc3 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 80042da:	686b      	ldr	r3, [r5, #4]
 80042dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004398 <HAL_RCC_ClockConfig+0xf8>)
 80042de:	061b      	lsls	r3, r3, #24
 80042e0:	0f1b      	lsrs	r3, r3, #28
 80042e2:	5cd3      	ldrb	r3, [r2, r3]
 80042e4:	492d      	ldr	r1, [pc, #180]	@ (800439c <HAL_RCC_ClockConfig+0xfc>)
 80042e6:	40d8      	lsrs	r0, r3
 80042e8:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80042ea:	2003      	movs	r0, #3
 80042ec:	f7fd ff6e 	bl	80021cc <HAL_InitTick>
  return HAL_OK;
 80042f0:	2000      	movs	r0, #0
 80042f2:	e7db      	b.n	80042ac <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	4393      	bics	r3, r2
 80042f8:	430b      	orrs	r3, r1
 80042fa:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	4013      	ands	r3, r2
 8004300:	428b      	cmp	r3, r1
 8004302:	d1d2      	bne.n	80042aa <HAL_RCC_ClockConfig+0xa>
 8004304:	e7d9      	b.n	80042ba <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004306:	4923      	ldr	r1, [pc, #140]	@ (8004394 <HAL_RCC_ClockConfig+0xf4>)
 8004308:	0753      	lsls	r3, r2, #29
 800430a:	d504      	bpl.n	8004316 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800430c:	23e0      	movs	r3, #224	@ 0xe0
 800430e:	6848      	ldr	r0, [r1, #4]
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4303      	orrs	r3, r0
 8004314:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004316:	20f0      	movs	r0, #240	@ 0xf0
 8004318:	684b      	ldr	r3, [r1, #4]
 800431a:	4383      	bics	r3, r0
 800431c:	68a0      	ldr	r0, [r4, #8]
 800431e:	4303      	orrs	r3, r0
 8004320:	604b      	str	r3, [r1, #4]
 8004322:	e7cd      	b.n	80042c0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004324:	4f1b      	ldr	r7, [pc, #108]	@ (8004394 <HAL_RCC_ClockConfig+0xf4>)
 8004326:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004328:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432a:	2a01      	cmp	r2, #1
 800432c:	d119      	bne.n	8004362 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	039b      	lsls	r3, r3, #14
 8004330:	d5bb      	bpl.n	80042aa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004332:	2103      	movs	r1, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	438b      	bics	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 800433c:	f7fd ff86 	bl	800224c <HAL_GetTick>
 8004340:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004342:	230c      	movs	r3, #12
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	401a      	ands	r2, r3
 8004348:	6863      	ldr	r3, [r4, #4]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	429a      	cmp	r2, r3
 800434e:	d0b9      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004350:	f7fd ff7c 	bl	800224c <HAL_GetTick>
 8004354:	9b01      	ldr	r3, [sp, #4]
 8004356:	1ac0      	subs	r0, r0, r3
 8004358:	4b11      	ldr	r3, [pc, #68]	@ (80043a0 <HAL_RCC_ClockConfig+0x100>)
 800435a:	4298      	cmp	r0, r3
 800435c:	d9f1      	bls.n	8004342 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 800435e:	2003      	movs	r0, #3
 8004360:	e7a4      	b.n	80042ac <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004362:	2a02      	cmp	r2, #2
 8004364:	d102      	bne.n	800436c <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004366:	019b      	lsls	r3, r3, #6
 8004368:	d4e3      	bmi.n	8004332 <HAL_RCC_ClockConfig+0x92>
 800436a:	e79e      	b.n	80042aa <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	079b      	lsls	r3, r3, #30
 800436e:	d4e0      	bmi.n	8004332 <HAL_RCC_ClockConfig+0x92>
 8004370:	e79b      	b.n	80042aa <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	682a      	ldr	r2, [r5, #0]
 8004374:	439a      	bics	r2, r3
 8004376:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004378:	682a      	ldr	r2, [r5, #0]
 800437a:	421a      	tst	r2, r3
 800437c:	d0a7      	beq.n	80042ce <HAL_RCC_ClockConfig+0x2e>
 800437e:	e794      	b.n	80042aa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004380:	686b      	ldr	r3, [r5, #4]
 8004382:	4a08      	ldr	r2, [pc, #32]	@ (80043a4 <HAL_RCC_ClockConfig+0x104>)
 8004384:	4013      	ands	r3, r2
 8004386:	68e2      	ldr	r2, [r4, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	606b      	str	r3, [r5, #4]
 800438c:	e7a3      	b.n	80042d6 <HAL_RCC_ClockConfig+0x36>
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	40022000 	.word	0x40022000
 8004394:	40021000 	.word	0x40021000
 8004398:	08007b7a 	.word	0x08007b7a
 800439c:	20000014 	.word	0x20000014
 80043a0:	00001388 	.word	0x00001388
 80043a4:	fffff8ff 	.word	0xfffff8ff

080043a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043a8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043aa:	6803      	ldr	r3, [r0, #0]
{
 80043ac:	0005      	movs	r5, r0
 80043ae:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043b0:	03db      	lsls	r3, r3, #15
 80043b2:	d52b      	bpl.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b4:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80043b6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b8:	4c3d      	ldr	r4, [pc, #244]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80043ba:	0552      	lsls	r2, r2, #21
 80043bc:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80043be:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c0:	4213      	tst	r3, r2
 80043c2:	d108      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043c4:	69e3      	ldr	r3, [r4, #28]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61e3      	str	r3, [r4, #28]
 80043ca:	69e3      	ldr	r3, [r4, #28]
 80043cc:	4013      	ands	r3, r2
 80043ce:	9303      	str	r3, [sp, #12]
 80043d0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80043d2:	2301      	movs	r3, #1
 80043d4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d6:	2780      	movs	r7, #128	@ 0x80
 80043d8:	4e36      	ldr	r6, [pc, #216]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80043da:	007f      	lsls	r7, r7, #1
 80043dc:	6833      	ldr	r3, [r6, #0]
 80043de:	423b      	tst	r3, r7
 80043e0:	d02b      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x92>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043e2:	6a21      	ldr	r1, [r4, #32]
 80043e4:	22c0      	movs	r2, #192	@ 0xc0
 80043e6:	0008      	movs	r0, r1
 80043e8:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ea:	686b      	ldr	r3, [r5, #4]
 80043ec:	4e32      	ldr	r6, [pc, #200]	@ (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ee:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043f0:	4211      	tst	r1, r2
 80043f2:	d134      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043f4:	6a23      	ldr	r3, [r4, #32]
 80043f6:	686a      	ldr	r2, [r5, #4]
 80043f8:	4033      	ands	r3, r6
 80043fa:	4313      	orrs	r3, r2
 80043fc:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043fe:	9b00      	ldr	r3, [sp, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d103      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004404:	69e3      	ldr	r3, [r4, #28]
 8004406:	4a2d      	ldr	r2, [pc, #180]	@ (80044bc <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8004408:	4013      	ands	r3, r2
 800440a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800440c:	682a      	ldr	r2, [r5, #0]
 800440e:	07d3      	lsls	r3, r2, #31
 8004410:	d506      	bpl.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004412:	2003      	movs	r0, #3
 8004414:	4926      	ldr	r1, [pc, #152]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004416:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8004418:	4383      	bics	r3, r0
 800441a:	68a8      	ldr	r0, [r5, #8]
 800441c:	4303      	orrs	r3, r0
 800441e:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004420:	0693      	lsls	r3, r2, #26
 8004422:	d506      	bpl.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004424:	2010      	movs	r0, #16
 8004426:	4922      	ldr	r1, [pc, #136]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004428:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800442a:	4383      	bics	r3, r0
 800442c:	68e8      	ldr	r0, [r5, #12]
 800442e:	4303      	orrs	r3, r0
 8004430:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004432:	0392      	lsls	r2, r2, #14
 8004434:	d433      	bmi.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xf6>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004436:	2000      	movs	r0, #0
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443a:	6833      	ldr	r3, [r6, #0]
 800443c:	433b      	orrs	r3, r7
 800443e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004440:	f7fd ff04 	bl	800224c <HAL_GetTick>
 8004444:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	6833      	ldr	r3, [r6, #0]
 8004448:	423b      	tst	r3, r7
 800444a:	d1ca      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444c:	f7fd fefe 	bl	800224c <HAL_GetTick>
 8004450:	9b01      	ldr	r3, [sp, #4]
 8004452:	1ac0      	subs	r0, r0, r3
 8004454:	2864      	cmp	r0, #100	@ 0x64
 8004456:	d9f6      	bls.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          return HAL_TIMEOUT;
 8004458:	2003      	movs	r0, #3
}
 800445a:	b005      	add	sp, #20
 800445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800445e:	4013      	ands	r3, r2
 8004460:	4283      	cmp	r3, r0
 8004462:	d0c7      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004464:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004466:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004468:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800446a:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800446c:	0252      	lsls	r2, r2, #9
 800446e:	4302      	orrs	r2, r0
 8004470:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004472:	6a22      	ldr	r2, [r4, #32]
 8004474:	4812      	ldr	r0, [pc, #72]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004476:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004478:	4002      	ands	r2, r0
 800447a:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 800447c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800447e:	07db      	lsls	r3, r3, #31
 8004480:	d5b8      	bpl.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8004482:	f7fd fee3 	bl	800224c <HAL_GetTick>
 8004486:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004488:	2202      	movs	r2, #2
 800448a:	6a23      	ldr	r3, [r4, #32]
 800448c:	4213      	tst	r3, r2
 800448e:	d1b1      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004490:	f7fd fedc 	bl	800224c <HAL_GetTick>
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8004496:	1bc0      	subs	r0, r0, r7
 8004498:	4298      	cmp	r0, r3
 800449a:	d9f5      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 800449c:	e7dc      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800449e:	2180      	movs	r1, #128	@ 0x80
 80044a0:	4a03      	ldr	r2, [pc, #12]	@ (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80044a2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80044a4:	438b      	bics	r3, r1
 80044a6:	6929      	ldr	r1, [r5, #16]
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ac:	e7c3      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	40021000 	.word	0x40021000
 80044b4:	40007000 	.word	0x40007000
 80044b8:	fffffcff 	.word	0xfffffcff
 80044bc:	efffffff 	.word	0xefffffff
 80044c0:	fffeffff 	.word	0xfffeffff
 80044c4:	00001388 	.word	0x00001388

080044c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ca:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 80044cc:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ce:	6a02      	ldr	r2, [r0, #32]
 80044d0:	43a2      	bics	r2, r4
 80044d2:	6202      	str	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d4:	2273      	movs	r2, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 80044d6:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80044d8:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044da:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044dc:	680a      	ldr	r2, [r1, #0]
 80044de:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044e0:	2202      	movs	r2, #2
 80044e2:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044e4:	688a      	ldr	r2, [r1, #8]
 80044e6:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044e8:	4a14      	ldr	r2, [pc, #80]	@ (800453c <TIM_OC1_SetConfig+0x74>)
 80044ea:	4290      	cmp	r0, r2
 80044ec:	d008      	beq.n	8004500 <TIM_OC1_SetConfig+0x38>
 80044ee:	4e14      	ldr	r6, [pc, #80]	@ (8004540 <TIM_OC1_SetConfig+0x78>)
 80044f0:	42b0      	cmp	r0, r6
 80044f2:	d005      	beq.n	8004500 <TIM_OC1_SetConfig+0x38>
 80044f4:	4e13      	ldr	r6, [pc, #76]	@ (8004544 <TIM_OC1_SetConfig+0x7c>)
 80044f6:	42b0      	cmp	r0, r6
 80044f8:	d002      	beq.n	8004500 <TIM_OC1_SetConfig+0x38>
 80044fa:	4e13      	ldr	r6, [pc, #76]	@ (8004548 <TIM_OC1_SetConfig+0x80>)
 80044fc:	42b0      	cmp	r0, r6
 80044fe:	d116      	bne.n	800452e <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004500:	2608      	movs	r6, #8
 8004502:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004504:	68ce      	ldr	r6, [r1, #12]
 8004506:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004508:	2604      	movs	r6, #4
 800450a:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450c:	4290      	cmp	r0, r2
 800450e:	d008      	beq.n	8004522 <TIM_OC1_SetConfig+0x5a>
 8004510:	4a0b      	ldr	r2, [pc, #44]	@ (8004540 <TIM_OC1_SetConfig+0x78>)
 8004512:	4290      	cmp	r0, r2
 8004514:	d005      	beq.n	8004522 <TIM_OC1_SetConfig+0x5a>
 8004516:	4a0b      	ldr	r2, [pc, #44]	@ (8004544 <TIM_OC1_SetConfig+0x7c>)
 8004518:	4290      	cmp	r0, r2
 800451a:	d002      	beq.n	8004522 <TIM_OC1_SetConfig+0x5a>
 800451c:	4a0a      	ldr	r2, [pc, #40]	@ (8004548 <TIM_OC1_SetConfig+0x80>)
 800451e:	4290      	cmp	r0, r2
 8004520:	d105      	bne.n	800452e <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004522:	4a0a      	ldr	r2, [pc, #40]	@ (800454c <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004524:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004526:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004528:	694c      	ldr	r4, [r1, #20]
 800452a:	4334      	orrs	r4, r6
 800452c:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800452e:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004530:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004532:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004534:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004536:	6203      	str	r3, [r0, #32]
}
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	46c0      	nop			@ (mov r8, r8)
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800
 800454c:	fffffcff 	.word	0xfffffcff

08004550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004550:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004552:	4a18      	ldr	r2, [pc, #96]	@ (80045b4 <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 8004554:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004556:	6a03      	ldr	r3, [r0, #32]
 8004558:	4013      	ands	r3, r2
 800455a:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800455c:	2373      	movs	r3, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 800455e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004560:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004562:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004564:	680b      	ldr	r3, [r1, #0]
 8004566:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004568:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <TIM_OC3_SetConfig+0x68>)
 800456a:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800456c:	688b      	ldr	r3, [r1, #8]
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004572:	4d12      	ldr	r5, [pc, #72]	@ (80045bc <TIM_OC3_SetConfig+0x6c>)
 8004574:	42a8      	cmp	r0, r5
 8004576:	d10e      	bne.n	8004596 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004578:	4d11      	ldr	r5, [pc, #68]	@ (80045c0 <TIM_OC3_SetConfig+0x70>)
 800457a:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800457c:	68cb      	ldr	r3, [r1, #12]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004582:	4d10      	ldr	r5, [pc, #64]	@ (80045c4 <TIM_OC3_SetConfig+0x74>)
 8004584:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004586:	4d10      	ldr	r5, [pc, #64]	@ (80045c8 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004588:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800458a:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800458c:	698a      	ldr	r2, [r1, #24]
 800458e:	4332      	orrs	r2, r6
 8004590:	0112      	lsls	r2, r2, #4
 8004592:	432a      	orrs	r2, r5
 8004594:	e008      	b.n	80045a8 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004596:	4d0d      	ldr	r5, [pc, #52]	@ (80045cc <TIM_OC3_SetConfig+0x7c>)
 8004598:	42a8      	cmp	r0, r5
 800459a:	d0f4      	beq.n	8004586 <TIM_OC3_SetConfig+0x36>
 800459c:	4d0c      	ldr	r5, [pc, #48]	@ (80045d0 <TIM_OC3_SetConfig+0x80>)
 800459e:	42a8      	cmp	r0, r5
 80045a0:	d0f1      	beq.n	8004586 <TIM_OC3_SetConfig+0x36>
 80045a2:	4d0c      	ldr	r5, [pc, #48]	@ (80045d4 <TIM_OC3_SetConfig+0x84>)
 80045a4:	42a8      	cmp	r0, r5
 80045a6:	d0ee      	beq.n	8004586 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045aa:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80045ac:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80045ae:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b0:	6203      	str	r3, [r0, #32]
}
 80045b2:	bd70      	pop	{r4, r5, r6, pc}
 80045b4:	fffffeff 	.word	0xfffffeff
 80045b8:	fffffdff 	.word	0xfffffdff
 80045bc:	40012c00 	.word	0x40012c00
 80045c0:	fffff7ff 	.word	0xfffff7ff
 80045c4:	fffffbff 	.word	0xfffffbff
 80045c8:	ffffcfff 	.word	0xffffcfff
 80045cc:	40014000 	.word	0x40014000
 80045d0:	40014400 	.word	0x40014400
 80045d4:	40014800 	.word	0x40014800

080045d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045da:	4a14      	ldr	r2, [pc, #80]	@ (800462c <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 80045dc:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045de:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e0:	4d13      	ldr	r5, [pc, #76]	@ (8004630 <TIM_OC4_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045e2:	4013      	ands	r3, r2
 80045e4:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80045e6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80045e8:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045ea:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045ec:	680d      	ldr	r5, [r1, #0]
 80045ee:	022d      	lsls	r5, r5, #8
 80045f0:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f2:	4a10      	ldr	r2, [pc, #64]	@ (8004634 <TIM_OC4_SetConfig+0x5c>)
 80045f4:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045f6:	688a      	ldr	r2, [r1, #8]
 80045f8:	0312      	lsls	r2, r2, #12
 80045fa:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fc:	4c0e      	ldr	r4, [pc, #56]	@ (8004638 <TIM_OC4_SetConfig+0x60>)
 80045fe:	42a0      	cmp	r0, r4
 8004600:	d008      	beq.n	8004614 <TIM_OC4_SetConfig+0x3c>
 8004602:	4c0e      	ldr	r4, [pc, #56]	@ (800463c <TIM_OC4_SetConfig+0x64>)
 8004604:	42a0      	cmp	r0, r4
 8004606:	d005      	beq.n	8004614 <TIM_OC4_SetConfig+0x3c>
 8004608:	4c0d      	ldr	r4, [pc, #52]	@ (8004640 <TIM_OC4_SetConfig+0x68>)
 800460a:	42a0      	cmp	r0, r4
 800460c:	d002      	beq.n	8004614 <TIM_OC4_SetConfig+0x3c>
 800460e:	4c0d      	ldr	r4, [pc, #52]	@ (8004644 <TIM_OC4_SetConfig+0x6c>)
 8004610:	42a0      	cmp	r0, r4
 8004612:	d104      	bne.n	800461e <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004614:	4c0c      	ldr	r4, [pc, #48]	@ (8004648 <TIM_OC4_SetConfig+0x70>)
 8004616:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004618:	694b      	ldr	r3, [r1, #20]
 800461a:	019b      	lsls	r3, r3, #6
 800461c:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800461e:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004620:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004622:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004624:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004626:	6202      	str	r2, [r0, #32]
}
 8004628:	bd30      	pop	{r4, r5, pc}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	ffffefff 	.word	0xffffefff
 8004630:	ffff8cff 	.word	0xffff8cff
 8004634:	ffffdfff 	.word	0xffffdfff
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40014000 	.word	0x40014000
 8004640:	40014400 	.word	0x40014400
 8004644:	40014800 	.word	0x40014800
 8004648:	ffffbfff 	.word	0xffffbfff

0800464c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800464c:	0001      	movs	r1, r0
{
 800464e:	0003      	movs	r3, r0
    return HAL_ERROR;
 8004650:	2001      	movs	r0, #1
{
 8004652:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8004654:	313d      	adds	r1, #61	@ 0x3d
 8004656:	780c      	ldrb	r4, [r1, #0]
 8004658:	b2e2      	uxtb	r2, r4
 800465a:	4284      	cmp	r4, r0
 800465c:	d115      	bne.n	800468a <HAL_TIM_Base_Start+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 800465e:	1800      	adds	r0, r0, r0
 8004660:	7008      	strb	r0, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	490a      	ldr	r1, [pc, #40]	@ (8004690 <HAL_TIM_Base_Start+0x44>)
 8004666:	428b      	cmp	r3, r1
 8004668:	d005      	beq.n	8004676 <HAL_TIM_Base_Start+0x2a>
 800466a:	490a      	ldr	r1, [pc, #40]	@ (8004694 <HAL_TIM_Base_Start+0x48>)
 800466c:	428b      	cmp	r3, r1
 800466e:	d002      	beq.n	8004676 <HAL_TIM_Base_Start+0x2a>
 8004670:	4909      	ldr	r1, [pc, #36]	@ (8004698 <HAL_TIM_Base_Start+0x4c>)
 8004672:	428b      	cmp	r3, r1
 8004674:	d10a      	bne.n	800468c <HAL_TIM_Base_Start+0x40>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004676:	2107      	movs	r1, #7
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800467c:	2a06      	cmp	r2, #6
 800467e:	d003      	beq.n	8004688 <HAL_TIM_Base_Start+0x3c>
      __HAL_TIM_ENABLE(htim);
 8004680:	2201      	movs	r2, #1
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004688:	2000      	movs	r0, #0
}
 800468a:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 800468c:	6819      	ldr	r1, [r3, #0]
 800468e:	e7f9      	b.n	8004684 <HAL_TIM_Base_Start+0x38>
 8004690:	40012c00 	.word	0x40012c00
 8004694:	40000400 	.word	0x40000400
 8004698:	40014000 	.word	0x40014000

0800469c <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 800469c:	4770      	bx	lr
	...

080046a0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004720 <TIM_Base_SetConfig+0x80>)
{
 80046a2:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80046a4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a6:	4290      	cmp	r0, r2
 80046a8:	d002      	beq.n	80046b0 <TIM_Base_SetConfig+0x10>
 80046aa:	4c1e      	ldr	r4, [pc, #120]	@ (8004724 <TIM_Base_SetConfig+0x84>)
 80046ac:	42a0      	cmp	r0, r4
 80046ae:	d108      	bne.n	80046c2 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b0:	2470      	movs	r4, #112	@ 0x70
 80046b2:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80046b4:	684c      	ldr	r4, [r1, #4]
 80046b6:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b8:	4290      	cmp	r0, r2
 80046ba:	d00e      	beq.n	80046da <TIM_Base_SetConfig+0x3a>
 80046bc:	4c19      	ldr	r4, [pc, #100]	@ (8004724 <TIM_Base_SetConfig+0x84>)
 80046be:	42a0      	cmp	r0, r4
 80046c0:	d00b      	beq.n	80046da <TIM_Base_SetConfig+0x3a>
 80046c2:	4c19      	ldr	r4, [pc, #100]	@ (8004728 <TIM_Base_SetConfig+0x88>)
 80046c4:	42a0      	cmp	r0, r4
 80046c6:	d008      	beq.n	80046da <TIM_Base_SetConfig+0x3a>
 80046c8:	4c18      	ldr	r4, [pc, #96]	@ (800472c <TIM_Base_SetConfig+0x8c>)
 80046ca:	42a0      	cmp	r0, r4
 80046cc:	d005      	beq.n	80046da <TIM_Base_SetConfig+0x3a>
 80046ce:	4c18      	ldr	r4, [pc, #96]	@ (8004730 <TIM_Base_SetConfig+0x90>)
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	d002      	beq.n	80046da <TIM_Base_SetConfig+0x3a>
 80046d4:	4c17      	ldr	r4, [pc, #92]	@ (8004734 <TIM_Base_SetConfig+0x94>)
 80046d6:	42a0      	cmp	r0, r4
 80046d8:	d103      	bne.n	80046e2 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 80046da:	4c17      	ldr	r4, [pc, #92]	@ (8004738 <TIM_Base_SetConfig+0x98>)
 80046dc:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046de:	68cb      	ldr	r3, [r1, #12]
 80046e0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e2:	2480      	movs	r4, #128	@ 0x80
 80046e4:	43a3      	bics	r3, r4
 80046e6:	694c      	ldr	r4, [r1, #20]
 80046e8:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 80046ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ec:	688b      	ldr	r3, [r1, #8]
 80046ee:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80046f0:	680b      	ldr	r3, [r1, #0]
 80046f2:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f4:	4290      	cmp	r0, r2
 80046f6:	d008      	beq.n	800470a <TIM_Base_SetConfig+0x6a>
 80046f8:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <TIM_Base_SetConfig+0x8c>)
 80046fa:	4298      	cmp	r0, r3
 80046fc:	d005      	beq.n	800470a <TIM_Base_SetConfig+0x6a>
 80046fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <TIM_Base_SetConfig+0x90>)
 8004700:	4298      	cmp	r0, r3
 8004702:	d002      	beq.n	800470a <TIM_Base_SetConfig+0x6a>
 8004704:	4b0b      	ldr	r3, [pc, #44]	@ (8004734 <TIM_Base_SetConfig+0x94>)
 8004706:	4298      	cmp	r0, r3
 8004708:	d101      	bne.n	800470e <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 800470a:	690b      	ldr	r3, [r1, #16]
 800470c:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800470e:	2201      	movs	r2, #1
 8004710:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004712:	6903      	ldr	r3, [r0, #16]
 8004714:	4213      	tst	r3, r2
 8004716:	d002      	beq.n	800471e <TIM_Base_SetConfig+0x7e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004718:	6903      	ldr	r3, [r0, #16]
 800471a:	4393      	bics	r3, r2
 800471c:	6103      	str	r3, [r0, #16]
}
 800471e:	bd10      	pop	{r4, pc}
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40000400 	.word	0x40000400
 8004728:	40002000 	.word	0x40002000
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800
 8004738:	fffffcff 	.word	0xfffffcff

0800473c <HAL_TIM_Base_Init>:
{
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004740:	2001      	movs	r0, #1
  if (htim == NULL)
 8004742:	2c00      	cmp	r4, #0
 8004744:	d021      	beq.n	800478a <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004746:	0025      	movs	r5, r4
 8004748:	353d      	adds	r5, #61	@ 0x3d
 800474a:	782b      	ldrb	r3, [r5, #0]
 800474c:	b2da      	uxtb	r2, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004752:	0023      	movs	r3, r4
 8004754:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004756:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004758:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 800475a:	f7fd fbb9 	bl	8001ed0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800475e:	2302      	movs	r3, #2
 8004760:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004762:	6820      	ldr	r0, [r4, #0]
 8004764:	1d21      	adds	r1, r4, #4
 8004766:	f7ff ff9b 	bl	80046a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800476a:	0022      	movs	r2, r4
 800476c:	2301      	movs	r3, #1
  return HAL_OK;
 800476e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004770:	3246      	adds	r2, #70	@ 0x46
 8004772:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004774:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004776:	3a08      	subs	r2, #8
 8004778:	7013      	strb	r3, [r2, #0]
 800477a:	7053      	strb	r3, [r2, #1]
 800477c:	7093      	strb	r3, [r2, #2]
 800477e:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004780:	7113      	strb	r3, [r2, #4]
 8004782:	7153      	strb	r3, [r2, #5]
 8004784:	7193      	strb	r3, [r2, #6]
 8004786:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004788:	702b      	strb	r3, [r5, #0]
}
 800478a:	bd70      	pop	{r4, r5, r6, pc}

0800478c <HAL_TIM_PWM_Init>:
{
 800478c:	b570      	push	{r4, r5, r6, lr}
 800478e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004790:	2001      	movs	r0, #1
  if (htim == NULL)
 8004792:	2c00      	cmp	r4, #0
 8004794:	d021      	beq.n	80047da <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004796:	0025      	movs	r5, r4
 8004798:	353d      	adds	r5, #61	@ 0x3d
 800479a:	782b      	ldrb	r3, [r5, #0]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d105      	bne.n	80047ae <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80047a2:	0023      	movs	r3, r4
 80047a4:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80047a6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80047a8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 80047aa:	f7ff ff77 	bl	800469c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80047ae:	2302      	movs	r3, #2
 80047b0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	1d21      	adds	r1, r4, #4
 80047b6:	f7ff ff73 	bl	80046a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ba:	0022      	movs	r2, r4
 80047bc:	2301      	movs	r3, #1
  return HAL_OK;
 80047be:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c0:	3246      	adds	r2, #70	@ 0x46
 80047c2:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c4:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c6:	3a08      	subs	r2, #8
 80047c8:	7013      	strb	r3, [r2, #0]
 80047ca:	7053      	strb	r3, [r2, #1]
 80047cc:	7093      	strb	r3, [r2, #2]
 80047ce:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	7113      	strb	r3, [r2, #4]
 80047d2:	7153      	strb	r3, [r2, #5]
 80047d4:	7193      	strb	r3, [r2, #6]
 80047d6:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	702b      	strb	r3, [r5, #0]
}
 80047da:	bd70      	pop	{r4, r5, r6, pc}

080047dc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047dc:	2210      	movs	r2, #16
{
 80047de:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 80047e0:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e2:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047e4:	4c17      	ldr	r4, [pc, #92]	@ (8004844 <TIM_OC2_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e6:	4393      	bics	r3, r2
 80047e8:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80047ea:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80047ec:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047ee:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f0:	680c      	ldr	r4, [r1, #0]
 80047f2:	0224      	lsls	r4, r4, #8
 80047f4:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 80047f6:	2320      	movs	r3, #32
 80047f8:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047fa:	688b      	ldr	r3, [r1, #8]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004800:	4d11      	ldr	r5, [pc, #68]	@ (8004848 <TIM_OC2_SetConfig+0x6c>)
 8004802:	42a8      	cmp	r0, r5
 8004804:	d10f      	bne.n	8004826 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004806:	2580      	movs	r5, #128	@ 0x80
 8004808:	43ab      	bics	r3, r5
 800480a:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800480c:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 800480e:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004814:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004816:	4d0d      	ldr	r5, [pc, #52]	@ (800484c <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004818:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800481a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800481c:	698a      	ldr	r2, [r1, #24]
 800481e:	4332      	orrs	r2, r6
 8004820:	0092      	lsls	r2, r2, #2
 8004822:	432a      	orrs	r2, r5
 8004824:	e008      	b.n	8004838 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004826:	4d0a      	ldr	r5, [pc, #40]	@ (8004850 <TIM_OC2_SetConfig+0x74>)
 8004828:	42a8      	cmp	r0, r5
 800482a:	d0f4      	beq.n	8004816 <TIM_OC2_SetConfig+0x3a>
 800482c:	4d09      	ldr	r5, [pc, #36]	@ (8004854 <TIM_OC2_SetConfig+0x78>)
 800482e:	42a8      	cmp	r0, r5
 8004830:	d0f1      	beq.n	8004816 <TIM_OC2_SetConfig+0x3a>
 8004832:	4d09      	ldr	r5, [pc, #36]	@ (8004858 <TIM_OC2_SetConfig+0x7c>)
 8004834:	42a8      	cmp	r0, r5
 8004836:	d0ee      	beq.n	8004816 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8004838:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800483a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800483c:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800483e:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004840:	6203      	str	r3, [r0, #32]
}
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	ffff8cff 	.word	0xffff8cff
 8004848:	40012c00 	.word	0x40012c00
 800484c:	fffff3ff 	.word	0xfffff3ff
 8004850:	40014000 	.word	0x40014000
 8004854:	40014400 	.word	0x40014400
 8004858:	40014800 	.word	0x40014800

0800485c <HAL_TIM_PWM_ConfigChannel>:
{
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800485e:	0006      	movs	r6, r0
 8004860:	363c      	adds	r6, #60	@ 0x3c
{
 8004862:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 8004864:	7832      	ldrb	r2, [r6, #0]
{
 8004866:	0003      	movs	r3, r0
 8004868:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 800486a:	2002      	movs	r0, #2
 800486c:	2a01      	cmp	r2, #1
 800486e:	d00a      	beq.n	8004886 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004870:	3801      	subs	r0, #1
 8004872:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 8004874:	2d08      	cmp	r5, #8
 8004876:	d03f      	beq.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0x9c>
 8004878:	d806      	bhi.n	8004888 <HAL_TIM_PWM_ConfigChannel+0x2c>
 800487a:	2d00      	cmp	r5, #0
 800487c:	d019      	beq.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x56>
 800487e:	2d04      	cmp	r5, #4
 8004880:	d029      	beq.n	80048d6 <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 8004882:	2300      	movs	r3, #0
 8004884:	7033      	strb	r3, [r6, #0]
}
 8004886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 8004888:	2d0c      	cmp	r5, #12
 800488a:	d1fa      	bne.n	8004882 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800488c:	681d      	ldr	r5, [r3, #0]
 800488e:	0028      	movs	r0, r5
 8004890:	f7ff fea2 	bl	80045d8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004894:	2380      	movs	r3, #128	@ 0x80
 8004896:	69ea      	ldr	r2, [r5, #28]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	4313      	orrs	r3, r2
 800489c:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800489e:	69eb      	ldr	r3, [r5, #28]
 80048a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004918 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048a6:	6923      	ldr	r3, [r4, #16]
 80048a8:	69ea      	ldr	r2, [r5, #28]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61eb      	str	r3, [r5, #28]
      break;
 80048b0:	e00f      	b.n	80048d2 <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048b2:	681d      	ldr	r5, [r3, #0]
 80048b4:	0028      	movs	r0, r5
 80048b6:	f7ff fe07 	bl	80044c8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048ba:	2308      	movs	r3, #8
 80048bc:	69aa      	ldr	r2, [r5, #24]
 80048be:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048c0:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048c2:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048c4:	69ab      	ldr	r3, [r5, #24]
 80048c6:	4393      	bics	r3, r2
 80048c8:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048ca:	69ab      	ldr	r3, [r5, #24]
 80048cc:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80048d2:	2000      	movs	r0, #0
 80048d4:	e7d5      	b.n	8004882 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048d6:	681d      	ldr	r5, [r3, #0]
 80048d8:	0028      	movs	r0, r5
 80048da:	f7ff ff7f 	bl	80047dc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048de:	2380      	movs	r3, #128	@ 0x80
 80048e0:	69aa      	ldr	r2, [r5, #24]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048e8:	69ab      	ldr	r3, [r5, #24]
 80048ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004918 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048f0:	6923      	ldr	r3, [r4, #16]
 80048f2:	69aa      	ldr	r2, [r5, #24]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	e7ea      	b.n	80048ce <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048f8:	681f      	ldr	r7, [r3, #0]
 80048fa:	0038      	movs	r0, r7
 80048fc:	f7ff fe28 	bl	8004550 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004900:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	431d      	orrs	r5, r3
 8004906:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	4393      	bics	r3, r2
 800490c:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	6922      	ldr	r2, [r4, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61fb      	str	r3, [r7, #28]
      break;
 8004916:	e7dc      	b.n	80048d2 <HAL_TIM_PWM_ConfigChannel+0x76>
 8004918:	fffffbff 	.word	0xfffffbff

0800491c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800491c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800491e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004920:	4d03      	ldr	r5, [pc, #12]	@ (8004930 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004922:	430a      	orrs	r2, r1
 8004924:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004926:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004928:	4313      	orrs	r3, r2
 800492a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492c:	6083      	str	r3, [r0, #8]
}
 800492e:	bd30      	pop	{r4, r5, pc}
 8004930:	ffff00ff 	.word	0xffff00ff

08004934 <HAL_TIM_ConfigClockSource>:
{
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004936:	0005      	movs	r5, r0
 8004938:	2202      	movs	r2, #2
 800493a:	353c      	adds	r5, #60	@ 0x3c
 800493c:	782c      	ldrb	r4, [r5, #0]
{
 800493e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004940:	0010      	movs	r0, r2
 8004942:	2c01      	cmp	r4, #1
 8004944:	d01b      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004946:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8004948:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800494a:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 800494c:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800494e:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004950:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004952:	4a41      	ldr	r2, [pc, #260]	@ (8004a58 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 8004954:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004956:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8004958:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800495a:	680b      	ldr	r3, [r1, #0]
 800495c:	2b60      	cmp	r3, #96	@ 0x60
 800495e:	d04e      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0xca>
 8004960:	d82d      	bhi.n	80049be <HAL_TIM_ConfigClockSource+0x8a>
 8004962:	2b40      	cmp	r3, #64	@ 0x40
 8004964:	d062      	beq.n	8004a2c <HAL_TIM_ConfigClockSource+0xf8>
 8004966:	d813      	bhi.n	8004990 <HAL_TIM_ConfigClockSource+0x5c>
 8004968:	2b20      	cmp	r3, #32
 800496a:	d00b      	beq.n	8004984 <HAL_TIM_ConfigClockSource+0x50>
 800496c:	d808      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x4c>
 800496e:	2210      	movs	r2, #16
 8004970:	0019      	movs	r1, r3
 8004972:	4391      	bics	r1, r2
 8004974:	d006      	beq.n	8004984 <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8004976:	2301      	movs	r3, #1
 8004978:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 800497a:	2300      	movs	r3, #0
 800497c:	702b      	strb	r3, [r5, #0]
}
 800497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 8004980:	2b30      	cmp	r3, #48	@ 0x30
 8004982:	d1f8      	bne.n	8004976 <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 8004984:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8004986:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004988:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800498a:	4313      	orrs	r3, r2
 800498c:	2207      	movs	r2, #7
 800498e:	e028      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8004990:	2b50      	cmp	r3, #80	@ 0x50
 8004992:	d1f0      	bne.n	8004976 <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 8004994:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004996:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004998:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499a:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800499c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499e:	4387      	bics	r7, r0
 80049a0:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a2:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80049a4:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049a6:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049a8:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049aa:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 80049ac:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ae:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049b0:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 80049b2:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 80049b4:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80049b6:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80049b8:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ba:	3b19      	subs	r3, #25
 80049bc:	e011      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80049be:	2280      	movs	r2, #128	@ 0x80
 80049c0:	0152      	lsls	r2, r2, #5
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00f      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0xb2>
 80049c6:	2280      	movs	r2, #128	@ 0x80
 80049c8:	0192      	lsls	r2, r2, #6
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00d      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0xb6>
 80049ce:	2b70      	cmp	r3, #112	@ 0x70
 80049d0:	d1d1      	bne.n	8004976 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 80049d2:	68cb      	ldr	r3, [r1, #12]
 80049d4:	684a      	ldr	r2, [r1, #4]
 80049d6:	0020      	movs	r0, r4
 80049d8:	6889      	ldr	r1, [r1, #8]
 80049da:	f7ff ff9f 	bl	800491c <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049de:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 80049e0:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049e2:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 80049e4:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2000      	movs	r0, #0
 80049e8:	e7c5      	b.n	8004976 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 80049ea:	68cb      	ldr	r3, [r1, #12]
 80049ec:	684a      	ldr	r2, [r1, #4]
 80049ee:	0020      	movs	r0, r4
 80049f0:	6889      	ldr	r1, [r1, #8]
 80049f2:	f7ff ff93 	bl	800491c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	68a2      	ldr	r2, [r4, #8]
 80049fa:	01db      	lsls	r3, r3, #7
 80049fc:	e7f1      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fe:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8004a00:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004a02:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8004a04:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a06:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a08:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a0a:	43b8      	bics	r0, r7
 8004a0c:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a10:	4f12      	ldr	r7, [pc, #72]	@ (8004a5c <HAL_TIM_ConfigClockSource+0x128>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a12:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a14:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a16:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a18:	20a0      	movs	r0, #160	@ 0xa0
 8004a1a:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a1c:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8004a1e:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8004a20:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a22:	2370      	movs	r3, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8004a24:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a26:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a28:	3b09      	subs	r3, #9
 8004a2a:	e7da      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8004a2c:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004a2e:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004a30:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a32:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a34:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a36:	4387      	bics	r7, r0
 8004a38:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a3a:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004a3c:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a3e:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a40:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a42:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8004a44:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a46:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a48:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8004a4a:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8004a4c:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004a4e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a50:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a52:	3b29      	subs	r3, #41	@ 0x29
 8004a54:	e7c5      	b.n	80049e2 <HAL_TIM_ConfigClockSource+0xae>
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	ffff0088 	.word	0xffff0088
 8004a5c:	ffff0fff 	.word	0xffff0fff

08004a60 <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004a60:	230f      	movs	r3, #15
{
 8004a62:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004a64:	2404      	movs	r4, #4
 8004a66:	4019      	ands	r1, r3
 8004a68:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004a6a:	408a      	lsls	r2, r1
  TIMx->CCER &=  ~tmp;
 8004a6c:	6a03      	ldr	r3, [r0, #32]
 8004a6e:	43a3      	bics	r3, r4
 8004a70:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004a72:	6a03      	ldr	r3, [r0, #32]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	6202      	str	r2, [r0, #32]
}
 8004a78:	bd10      	pop	{r4, pc}
	...

08004a7c <HAL_TIMEx_OCN_Start>:
{
 8004a7c:	0003      	movs	r3, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a7e:	0002      	movs	r2, r0
{
 8004a80:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a82:	2900      	cmp	r1, #0
 8004a84:	d105      	bne.n	8004a92 <HAL_TIMEx_OCN_Start+0x16>
 8004a86:	3242      	adds	r2, #66	@ 0x42
    return HAL_ERROR;
 8004a88:	2001      	movs	r0, #1
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a8a:	7814      	ldrb	r4, [r2, #0]
 8004a8c:	4284      	cmp	r4, r0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_TIMEx_OCN_Start+0x2a>
}
 8004a90:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a92:	2904      	cmp	r1, #4
 8004a94:	d101      	bne.n	8004a9a <HAL_TIMEx_OCN_Start+0x1e>
 8004a96:	3243      	adds	r2, #67	@ 0x43
 8004a98:	e7f6      	b.n	8004a88 <HAL_TIMEx_OCN_Start+0xc>
 8004a9a:	2908      	cmp	r1, #8
 8004a9c:	d101      	bne.n	8004aa2 <HAL_TIMEx_OCN_Start+0x26>
 8004a9e:	3244      	adds	r2, #68	@ 0x44
 8004aa0:	e7f2      	b.n	8004a88 <HAL_TIMEx_OCN_Start+0xc>
 8004aa2:	3245      	adds	r2, #69	@ 0x45
 8004aa4:	e7f0      	b.n	8004a88 <HAL_TIMEx_OCN_Start+0xc>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa6:	2002      	movs	r0, #2
 8004aa8:	7010      	strb	r0, [r2, #0]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004aaa:	681c      	ldr	r4, [r3, #0]
 8004aac:	2204      	movs	r2, #4
 8004aae:	0020      	movs	r0, r4
 8004ab0:	f7ff ffd6 	bl	8004a60 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8004ab4:	2380      	movs	r3, #128	@ 0x80
 8004ab6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	4313      	orrs	r3, r2
 8004abc:	6463      	str	r3, [r4, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abe:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <HAL_TIMEx_OCN_Start+0x6c>)
 8004ac0:	429c      	cmp	r4, r3
 8004ac2:	d005      	beq.n	8004ad0 <HAL_TIMEx_OCN_Start+0x54>
 8004ac4:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <HAL_TIMEx_OCN_Start+0x70>)
 8004ac6:	429c      	cmp	r4, r3
 8004ac8:	d002      	beq.n	8004ad0 <HAL_TIMEx_OCN_Start+0x54>
 8004aca:	4b09      	ldr	r3, [pc, #36]	@ (8004af0 <HAL_TIMEx_OCN_Start+0x74>)
 8004acc:	429c      	cmp	r4, r3
 8004ace:	d104      	bne.n	8004ada <HAL_TIMEx_OCN_Start+0x5e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ad0:	2207      	movs	r2, #7
 8004ad2:	68a3      	ldr	r3, [r4, #8]
 8004ad4:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIMEx_OCN_Start+0x66>
      __HAL_TIM_ENABLE(htim);
 8004ada:	2301      	movs	r3, #1
 8004adc:	6822      	ldr	r2, [r4, #0]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e7d4      	b.n	8004a90 <HAL_TIMEx_OCN_Start+0x14>
 8004ae6:	46c0      	nop			@ (mov r8, r8)
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40014000 	.word	0x40014000

08004af4 <HAL_TIMEx_OCN_Stop>:
{
 8004af4:	b570      	push	{r4, r5, r6, lr}
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004af6:	6805      	ldr	r5, [r0, #0]
 8004af8:	2200      	movs	r2, #0
{
 8004afa:	0004      	movs	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004afc:	0028      	movs	r0, r5
{
 8004afe:	000e      	movs	r6, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004b00:	f7ff ffae 	bl	8004a60 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8004b04:	6a2b      	ldr	r3, [r5, #32]
 8004b06:	4a13      	ldr	r2, [pc, #76]	@ (8004b54 <HAL_TIMEx_OCN_Stop+0x60>)
 8004b08:	4213      	tst	r3, r2
 8004b0a:	d107      	bne.n	8004b1c <HAL_TIMEx_OCN_Stop+0x28>
 8004b0c:	6a29      	ldr	r1, [r5, #32]
 8004b0e:	4b12      	ldr	r3, [pc, #72]	@ (8004b58 <HAL_TIMEx_OCN_Stop+0x64>)
 8004b10:	4219      	tst	r1, r3
 8004b12:	d103      	bne.n	8004b1c <HAL_TIMEx_OCN_Stop+0x28>
 8004b14:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004b16:	4911      	ldr	r1, [pc, #68]	@ (8004b5c <HAL_TIMEx_OCN_Stop+0x68>)
 8004b18:	400b      	ands	r3, r1
 8004b1a:	646b      	str	r3, [r5, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 8004b1c:	6a2b      	ldr	r3, [r5, #32]
 8004b1e:	4213      	tst	r3, r2
 8004b20:	d107      	bne.n	8004b32 <HAL_TIMEx_OCN_Stop+0x3e>
 8004b22:	6a2a      	ldr	r2, [r5, #32]
 8004b24:	4b0c      	ldr	r3, [pc, #48]	@ (8004b58 <HAL_TIMEx_OCN_Stop+0x64>)
 8004b26:	421a      	tst	r2, r3
 8004b28:	d103      	bne.n	8004b32 <HAL_TIMEx_OCN_Stop+0x3e>
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	4393      	bics	r3, r2
 8004b30:	602b      	str	r3, [r5, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b32:	2301      	movs	r3, #1
 8004b34:	2e00      	cmp	r6, #0
 8004b36:	d103      	bne.n	8004b40 <HAL_TIMEx_OCN_Stop+0x4c>
 8004b38:	3442      	adds	r4, #66	@ 0x42
}
 8004b3a:	2000      	movs	r0, #0
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b3c:	7023      	strb	r3, [r4, #0]
}
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b40:	2e04      	cmp	r6, #4
 8004b42:	d101      	bne.n	8004b48 <HAL_TIMEx_OCN_Stop+0x54>
 8004b44:	3443      	adds	r4, #67	@ 0x43
 8004b46:	e7f8      	b.n	8004b3a <HAL_TIMEx_OCN_Stop+0x46>
 8004b48:	2e08      	cmp	r6, #8
 8004b4a:	d101      	bne.n	8004b50 <HAL_TIMEx_OCN_Stop+0x5c>
 8004b4c:	3444      	adds	r4, #68	@ 0x44
 8004b4e:	e7f4      	b.n	8004b3a <HAL_TIMEx_OCN_Stop+0x46>
 8004b50:	3445      	adds	r4, #69	@ 0x45
 8004b52:	e7f2      	b.n	8004b3a <HAL_TIMEx_OCN_Stop+0x46>
 8004b54:	00001111 	.word	0x00001111
 8004b58:	00000444 	.word	0x00000444
 8004b5c:	ffff7fff 	.word	0xffff7fff

08004b60 <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004b60:	b510      	push	{r4, lr}
 8004b62:	f7ff ff8b 	bl	8004a7c <HAL_TIMEx_OCN_Start>
 8004b66:	bd10      	pop	{r4, pc}

08004b68 <HAL_TIMEx_PWMN_Stop>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	f7ff ffc3 	bl	8004af4 <HAL_TIMEx_OCN_Stop>
 8004b6e:	bd10      	pop	{r4, pc}

08004b70 <HAL_TIMEx_MasterConfigSynchronization>:
{
 8004b70:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004b72:	0004      	movs	r4, r0
 8004b74:	2202      	movs	r2, #2
 8004b76:	343c      	adds	r4, #60	@ 0x3c
 8004b78:	7825      	ldrb	r5, [r4, #0]
{
 8004b7a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004b7c:	0010      	movs	r0, r2
 8004b7e:	2d01      	cmp	r5, #1
 8004b80:	d01c      	beq.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b82:	001d      	movs	r5, r3
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b84:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8004b86:	353d      	adds	r5, #61	@ 0x3d
 8004b88:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004b8e:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b90:	43b0      	bics	r0, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b92:	680e      	ldr	r6, [r1, #0]
 8004b94:	4330      	orrs	r0, r6
  htim->Instance->CR2 = tmpcr2;
 8004b96:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b98:	4809      	ldr	r0, [pc, #36]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8004b9a:	4283      	cmp	r3, r0
 8004b9c:	d005      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004b9e:	4809      	ldr	r0, [pc, #36]	@ (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8004ba0:	4283      	cmp	r3, r0
 8004ba2:	d002      	beq.n	8004baa <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004ba4:	4808      	ldr	r0, [pc, #32]	@ (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8004ba6:	4283      	cmp	r3, r0
 8004ba8:	d104      	bne.n	8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004baa:	2080      	movs	r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bac:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bae:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bb0:	430a      	orrs	r2, r1
    htim->Instance->SMCR = tmpsmcr;
 8004bb2:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004bb4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004bb6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8004bba:	7020      	strb	r0, [r4, #0]
}
 8004bbc:	bd70      	pop	{r4, r5, r6, pc}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	40012c00 	.word	0x40012c00
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40014000 	.word	0x40014000

08004bcc <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8004bcc:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8004bce:	0004      	movs	r4, r0
 8004bd0:	343c      	adds	r4, #60	@ 0x3c
 8004bd2:	7823      	ldrb	r3, [r4, #0]
{
 8004bd4:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8004bd6:	2002      	movs	r0, #2
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d01c      	beq.n	8004c16 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004bdc:	68cb      	ldr	r3, [r1, #12]
 8004bde:	480e      	ldr	r0, [pc, #56]	@ (8004c18 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  htim->Instance->BDTR = tmpbdtr;
 8004be0:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004be2:	4003      	ands	r3, r0
 8004be4:	6888      	ldr	r0, [r1, #8]
 8004be6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004be8:	480c      	ldr	r0, [pc, #48]	@ (8004c1c <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8004bea:	4003      	ands	r3, r0
 8004bec:	6848      	ldr	r0, [r1, #4]
 8004bee:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bf0:	480b      	ldr	r0, [pc, #44]	@ (8004c20 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8004bf2:	4003      	ands	r3, r0
 8004bf4:	6808      	ldr	r0, [r1, #0]
 8004bf6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bf8:	480a      	ldr	r0, [pc, #40]	@ (8004c24 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8004bfa:	4003      	ands	r3, r0
 8004bfc:	6908      	ldr	r0, [r1, #16]
 8004bfe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c00:	4809      	ldr	r0, [pc, #36]	@ (8004c28 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8004c02:	4003      	ands	r3, r0
 8004c04:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c06:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004c08:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c0a:	4808      	ldr	r0, [pc, #32]	@ (8004c2c <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8004c0c:	4003      	ands	r3, r0
  __HAL_UNLOCK(htim);
 8004c0e:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004c10:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8004c12:	6453      	str	r3, [r2, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8004c14:	7020      	strb	r0, [r4, #0]
}
 8004c16:	bd10      	pop	{r4, pc}
 8004c18:	fffffcff 	.word	0xfffffcff
 8004c1c:	fffffbff 	.word	0xfffffbff
 8004c20:	fffff7ff 	.word	0xfffff7ff
 8004c24:	ffffefff 	.word	0xffffefff
 8004c28:	ffffdfff 	.word	0xffffdfff
 8004c2c:	ffffbfff 	.word	0xffffbfff

08004c30 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c30:	1d82      	adds	r2, r0, #6
{
 8004c32:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 8004c34:	2000      	movs	r0, #0
 8004c36:	87d0      	strh	r0, [r2, #62]	@ 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c38:	4a01      	ldr	r2, [pc, #4]	@ (8004c40 <USB_EnableGlobalInt+0x10>)
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
}
 8004c3e:	4770      	bx	lr
 8004c40:	ffffbf80 	.word	0xffffbf80

08004c44 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c44:	3002      	adds	r0, #2
 8004c46:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8004c48:	4a02      	ldr	r2, [pc, #8]	@ (8004c54 <USB_DisableGlobalInt+0x10>)
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	87c3      	strh	r3, [r0, #62]	@ 0x3e

  return HAL_OK;
}
 8004c4e:	2000      	movs	r0, #0
 8004c50:	4770      	bx	lr
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	0000407f 	.word	0x0000407f

08004c58 <USB_DevInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c58:	1c82      	adds	r2, r0, #2
{
 8004c5a:	0003      	movs	r3, r0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c5c:	2101      	movs	r1, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c5e:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c60:	87d1      	strh	r1, [r2, #62]	@ 0x3e
{
 8004c62:	b082      	sub	sp, #8
  USBx->CNTR = 0U;
 8004c64:	87d0      	strh	r0, [r2, #62]	@ 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c66:	1d9a      	adds	r2, r3, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c68:	3350      	adds	r3, #80	@ 0x50
  USBx->ISTR = 0U;
 8004c6a:	87d0      	strh	r0, [r2, #62]	@ 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c6c:	8018      	strh	r0, [r3, #0]

  return HAL_OK;
}
 8004c6e:	b002      	add	sp, #8
 8004c70:	4770      	bx	lr
	...

08004c74 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c76:	780e      	ldrb	r6, [r1, #0]
 8004c78:	4a7a      	ldr	r2, [pc, #488]	@ (8004e64 <USB_ActivateEndpoint+0x1f0>)
 8004c7a:	00b3      	lsls	r3, r6, #2
 8004c7c:	18c3      	adds	r3, r0, r3
 8004c7e:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004c80:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004c82:	4014      	ands	r4, r2
  switch (ep->type)
 8004c84:	2201      	movs	r2, #1
{
 8004c86:	0005      	movs	r5, r0
  switch (ep->type)
 8004c88:	9200      	str	r2, [sp, #0]
 8004c8a:	2f03      	cmp	r7, #3
 8004c8c:	d808      	bhi.n	8004ca0 <USB_ActivateEndpoint+0x2c>
 8004c8e:	0038      	movs	r0, r7
 8004c90:	f7fb fa4c 	bl	800012c <__gnu_thumb1_case_uqi>
 8004c94:	3c3f4202 	.word	0x3c3f4202
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c98:	2280      	movs	r2, #128	@ 0x80
 8004c9a:	0092      	lsls	r2, r2, #2
 8004c9c:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8004c9e:	9700      	str	r7, [sp, #0]
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ca0:	4a71      	ldr	r2, [pc, #452]	@ (8004e68 <USB_ActivateEndpoint+0x1f4>)
 8004ca2:	4314      	orrs	r4, r2
 8004ca4:	b2a4      	uxth	r4, r4
 8004ca6:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ca8:	8818      	ldrh	r0, [r3, #0]
 8004caa:	4c70      	ldr	r4, [pc, #448]	@ (8004e6c <USB_ActivateEndpoint+0x1f8>)
 8004cac:	4020      	ands	r0, r4
 8004cae:	4330      	orrs	r0, r6
 8004cb0:	4310      	orrs	r0, r2
 8004cb2:	b280      	uxth	r0, r0
 8004cb4:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cb6:	00f0      	lsls	r0, r6, #3
 8004cb8:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 8004cba:	7b08      	ldrb	r0, [r1, #12]
 8004cbc:	44ac      	add	ip, r5
 8004cbe:	3550      	adds	r5, #80	@ 0x50
 8004cc0:	9501      	str	r5, [sp, #4]
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d000      	beq.n	8004cc8 <USB_ActivateEndpoint+0x54>
 8004cc6:	e06b      	b.n	8004da0 <USB_ActivateEndpoint+0x12c>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cc8:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 8004cca:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ccc:	086d      	lsrs	r5, r5, #1
 8004cce:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d023      	beq.n	8004d1c <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cd4:	2080      	movs	r0, #128	@ 0x80
 8004cd6:	9901      	ldr	r1, [sp, #4]
 8004cd8:	00c0      	lsls	r0, r0, #3
 8004cda:	8809      	ldrh	r1, [r1, #0]
 8004cdc:	4461      	add	r1, ip
 8004cde:	1809      	adds	r1, r1, r0
 8004ce0:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ce2:	8819      	ldrh	r1, [r3, #0]
 8004ce4:	0649      	lsls	r1, r1, #25
 8004ce6:	d504      	bpl.n	8004cf2 <USB_ActivateEndpoint+0x7e>
 8004ce8:	8819      	ldrh	r1, [r3, #0]
 8004cea:	4021      	ands	r1, r4
 8004cec:	4c60      	ldr	r4, [pc, #384]	@ (8004e70 <USB_ActivateEndpoint+0x1fc>)
 8004cee:	4321      	orrs	r1, r4
 8004cf0:	8019      	strh	r1, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cf2:	4d60      	ldr	r5, [pc, #384]	@ (8004e74 <USB_ActivateEndpoint+0x200>)
 8004cf4:	2f01      	cmp	r7, #1
 8004cf6:	d100      	bne.n	8004cfa <USB_ActivateEndpoint+0x86>
 8004cf8:	e0ae      	b.n	8004e58 <USB_ActivateEndpoint+0x1e4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cfa:	2120      	movs	r1, #32
 8004cfc:	881c      	ldrh	r4, [r3, #0]
 8004cfe:	402c      	ands	r4, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004d00:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d02:	430a      	orrs	r2, r1
 8004d04:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8004d06:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d08:	801a      	strh	r2, [r3, #0]
}
 8004d0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d0c:	22c0      	movs	r2, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d0e:	00d2      	lsls	r2, r2, #3
 8004d10:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8004d12:	2200      	movs	r2, #0
 8004d14:	9200      	str	r2, [sp, #0]
      break;
 8004d16:	e7c3      	b.n	8004ca0 <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d18:	2280      	movs	r2, #128	@ 0x80
 8004d1a:	e7f8      	b.n	8004d0e <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d1c:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d1e:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d20:	8807      	ldrh	r7, [r0, #0]
 8004d22:	4855      	ldr	r0, [pc, #340]	@ (8004e78 <USB_ActivateEndpoint+0x204>)
 8004d24:	4467      	add	r7, ip
 8004d26:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d28:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d2a:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d2c:	8805      	ldrh	r5, [r0, #0]
 8004d2e:	4853      	ldr	r0, [pc, #332]	@ (8004e7c <USB_ActivateEndpoint+0x208>)
 8004d30:	4465      	add	r5, ip
 8004d32:	182d      	adds	r5, r5, r0
 8004d34:	882f      	ldrh	r7, [r5, #0]
 8004d36:	05bf      	lsls	r7, r7, #22
 8004d38:	0dbf      	lsrs	r7, r7, #22
 8004d3a:	802f      	strh	r7, [r5, #0]
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	d115      	bne.n	8004d6c <USB_ActivateEndpoint+0xf8>
 8004d40:	2780      	movs	r7, #128	@ 0x80
 8004d42:	8829      	ldrh	r1, [r5, #0]
 8004d44:	023f      	lsls	r7, r7, #8
 8004d46:	4339      	orrs	r1, r7
 8004d48:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d4a:	8819      	ldrh	r1, [r3, #0]
 8004d4c:	0449      	lsls	r1, r1, #17
 8004d4e:	d504      	bpl.n	8004d5a <USB_ActivateEndpoint+0xe6>
 8004d50:	8819      	ldrh	r1, [r3, #0]
 8004d52:	4021      	ands	r1, r4
 8004d54:	4c4a      	ldr	r4, [pc, #296]	@ (8004e80 <USB_ActivateEndpoint+0x20c>)
 8004d56:	4321      	orrs	r1, r4
 8004d58:	8019      	strh	r1, [r3, #0]
      if (ep->num == 0U)
 8004d5a:	494a      	ldr	r1, [pc, #296]	@ (8004e84 <USB_ActivateEndpoint+0x210>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d5c:	881c      	ldrh	r4, [r3, #0]
 8004d5e:	400c      	ands	r4, r1
 8004d60:	21c0      	movs	r1, #192	@ 0xc0
      if (ep->num == 0U)
 8004d62:	2e00      	cmp	r6, #0
 8004d64:	d000      	beq.n	8004d68 <USB_ActivateEndpoint+0xf4>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004d66:	2180      	movs	r1, #128	@ 0x80
 8004d68:	0189      	lsls	r1, r1, #6
 8004d6a:	e7c9      	b.n	8004d00 <USB_ActivateEndpoint+0x8c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004d6c:	293e      	cmp	r1, #62	@ 0x3e
 8004d6e:	d808      	bhi.n	8004d82 <USB_ActivateEndpoint+0x10e>
 8004d70:	2001      	movs	r0, #1
 8004d72:	084f      	lsrs	r7, r1, #1
 8004d74:	4001      	ands	r1, r0
 8004d76:	187f      	adds	r7, r7, r1
 8004d78:	8829      	ldrh	r1, [r5, #0]
 8004d7a:	02bf      	lsls	r7, r7, #10
 8004d7c:	4339      	orrs	r1, r7
 8004d7e:	b289      	uxth	r1, r1
 8004d80:	e7e2      	b.n	8004d48 <USB_ActivateEndpoint+0xd4>
 8004d82:	201f      	movs	r0, #31
 8004d84:	094f      	lsrs	r7, r1, #5
 8004d86:	4001      	ands	r1, r0
 8004d88:	0008      	movs	r0, r1
 8004d8a:	4241      	negs	r1, r0
 8004d8c:	4141      	adcs	r1, r0
 8004d8e:	1a7f      	subs	r7, r7, r1
 8004d90:	8829      	ldrh	r1, [r5, #0]
 8004d92:	02bf      	lsls	r7, r7, #10
 8004d94:	4339      	orrs	r1, r7
 8004d96:	4f3c      	ldr	r7, [pc, #240]	@ (8004e88 <USB_ActivateEndpoint+0x214>)
 8004d98:	430f      	orrs	r7, r1
 8004d9a:	b2bf      	uxth	r7, r7
 8004d9c:	802f      	strh	r7, [r5, #0]
 8004d9e:	e7d4      	b.n	8004d4a <USB_ActivateEndpoint+0xd6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004da0:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 8004da2:	2f02      	cmp	r7, #2
 8004da4:	d13a      	bne.n	8004e1c <USB_ActivateEndpoint+0x1a8>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004da6:	4e39      	ldr	r6, [pc, #228]	@ (8004e8c <USB_ActivateEndpoint+0x218>)
 8004da8:	4025      	ands	r5, r4
 8004daa:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004dac:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004dae:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004db0:	8805      	ldrh	r5, [r0, #0]
 8004db2:	2080      	movs	r0, #128	@ 0x80
 8004db4:	890e      	ldrh	r6, [r1, #8]
 8004db6:	4465      	add	r5, ip
 8004db8:	00c0      	lsls	r0, r0, #3
 8004dba:	0876      	lsrs	r6, r6, #1
 8004dbc:	182d      	adds	r5, r5, r0
 8004dbe:	0076      	lsls	r6, r6, #1
 8004dc0:	9801      	ldr	r0, [sp, #4]
 8004dc2:	802e      	strh	r6, [r5, #0]
 8004dc4:	8805      	ldrh	r5, [r0, #0]
 8004dc6:	894e      	ldrh	r6, [r1, #10]
 8004dc8:	482b      	ldr	r0, [pc, #172]	@ (8004e78 <USB_ActivateEndpoint+0x204>)
 8004dca:	4465      	add	r5, ip
 8004dcc:	0876      	lsrs	r6, r6, #1
 8004dce:	182d      	adds	r5, r5, r0
 8004dd0:	0076      	lsls	r6, r6, #1
 8004dd2:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 8004dd4:	7849      	ldrb	r1, [r1, #1]
 8004dd6:	4e27      	ldr	r6, [pc, #156]	@ (8004e74 <USB_ActivateEndpoint+0x200>)
 8004dd8:	468c      	mov	ip, r1
 8004dda:	2180      	movs	r1, #128	@ 0x80
 8004ddc:	4660      	mov	r0, ip
 8004dde:	4d29      	ldr	r5, [pc, #164]	@ (8004e84 <USB_ActivateEndpoint+0x210>)
 8004de0:	01c9      	lsls	r1, r1, #7
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d11f      	bne.n	8004e26 <USB_ActivateEndpoint+0x1b2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de6:	881f      	ldrh	r7, [r3, #0]
 8004de8:	420f      	tst	r7, r1
 8004dea:	d004      	beq.n	8004df6 <USB_ActivateEndpoint+0x182>
 8004dec:	8819      	ldrh	r1, [r3, #0]
 8004dee:	4f24      	ldr	r7, [pc, #144]	@ (8004e80 <USB_ActivateEndpoint+0x20c>)
 8004df0:	4021      	ands	r1, r4
 8004df2:	4339      	orrs	r1, r7
 8004df4:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df6:	8819      	ldrh	r1, [r3, #0]
 8004df8:	0649      	lsls	r1, r1, #25
 8004dfa:	d504      	bpl.n	8004e06 <USB_ActivateEndpoint+0x192>
 8004dfc:	8819      	ldrh	r1, [r3, #0]
 8004dfe:	4021      	ands	r1, r4
 8004e00:	4c1b      	ldr	r4, [pc, #108]	@ (8004e70 <USB_ActivateEndpoint+0x1fc>)
 8004e02:	4321      	orrs	r1, r4
 8004e04:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e06:	21c0      	movs	r1, #192	@ 0xc0
 8004e08:	881c      	ldrh	r4, [r3, #0]
 8004e0a:	0189      	lsls	r1, r1, #6
 8004e0c:	402c      	ands	r4, r5
 8004e0e:	4061      	eors	r1, r4
 8004e10:	4311      	orrs	r1, r2
 8004e12:	b289      	uxth	r1, r1
 8004e14:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e16:	8819      	ldrh	r1, [r3, #0]
 8004e18:	4031      	ands	r1, r6
 8004e1a:	e772      	b.n	8004d02 <USB_ActivateEndpoint+0x8e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004e1c:	4e1c      	ldr	r6, [pc, #112]	@ (8004e90 <USB_ActivateEndpoint+0x21c>)
 8004e1e:	4035      	ands	r5, r6
 8004e20:	4315      	orrs	r5, r2
 8004e22:	b2ad      	uxth	r5, r5
 8004e24:	e7c2      	b.n	8004dac <USB_ActivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e26:	8818      	ldrh	r0, [r3, #0]
 8004e28:	4208      	tst	r0, r1
 8004e2a:	d004      	beq.n	8004e36 <USB_ActivateEndpoint+0x1c2>
 8004e2c:	8819      	ldrh	r1, [r3, #0]
 8004e2e:	4814      	ldr	r0, [pc, #80]	@ (8004e80 <USB_ActivateEndpoint+0x20c>)
 8004e30:	4021      	ands	r1, r4
 8004e32:	4301      	orrs	r1, r0
 8004e34:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e36:	8819      	ldrh	r1, [r3, #0]
 8004e38:	0649      	lsls	r1, r1, #25
 8004e3a:	d504      	bpl.n	8004e46 <USB_ActivateEndpoint+0x1d2>
 8004e3c:	8819      	ldrh	r1, [r3, #0]
 8004e3e:	4021      	ands	r1, r4
 8004e40:	4c0b      	ldr	r4, [pc, #44]	@ (8004e70 <USB_ActivateEndpoint+0x1fc>)
 8004e42:	4321      	orrs	r1, r4
 8004e44:	8019      	strh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8004e46:	2f01      	cmp	r7, #1
 8004e48:	d009      	beq.n	8004e5e <USB_ActivateEndpoint+0x1ea>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e4a:	2120      	movs	r1, #32
 8004e4c:	881c      	ldrh	r4, [r3, #0]
 8004e4e:	4034      	ands	r4, r6
 8004e50:	4061      	eors	r1, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e52:	4311      	orrs	r1, r2
 8004e54:	b289      	uxth	r1, r1
 8004e56:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e58:	8819      	ldrh	r1, [r3, #0]
 8004e5a:	4029      	ands	r1, r5
 8004e5c:	e751      	b.n	8004d02 <USB_ActivateEndpoint+0x8e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e5e:	8819      	ldrh	r1, [r3, #0]
 8004e60:	4031      	ands	r1, r6
 8004e62:	e7f6      	b.n	8004e52 <USB_ActivateEndpoint+0x1de>
 8004e64:	ffff898f 	.word	0xffff898f
 8004e68:	ffff8080 	.word	0xffff8080
 8004e6c:	ffff8f8f 	.word	0xffff8f8f
 8004e70:	000080c0 	.word	0x000080c0
 8004e74:	ffff8fbf 	.word	0xffff8fbf
 8004e78:	00000404 	.word	0x00000404
 8004e7c:	00000406 	.word	0x00000406
 8004e80:	0000c080 	.word	0x0000c080
 8004e84:	ffffbf8f 	.word	0xffffbf8f
 8004e88:	ffff8000 	.word	0xffff8000
 8004e8c:	00008180 	.word	0x00008180
 8004e90:	ffff8e8f 	.word	0xffff8e8f

08004e94 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e94:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e96:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8004e98:	784a      	ldrb	r2, [r1, #1]
  if (ep->doublebuffer == 0U)
 8004e9a:	7b09      	ldrb	r1, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	18c0      	adds	r0, r0, r3
 8004ea0:	4b31      	ldr	r3, [pc, #196]	@ (8004f68 <USB_DeactivateEndpoint+0xd4>)
  if (ep->doublebuffer == 0U)
 8004ea2:	2900      	cmp	r1, #0
 8004ea4:	d11a      	bne.n	8004edc <USB_DeactivateEndpoint+0x48>
    if (ep->is_in != 0U)
 8004ea6:	2a00      	cmp	r2, #0
 8004ea8:	d00c      	beq.n	8004ec4 <USB_DeactivateEndpoint+0x30>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eaa:	8802      	ldrh	r2, [r0, #0]
 8004eac:	0652      	lsls	r2, r2, #25
 8004eae:	d505      	bpl.n	8004ebc <USB_DeactivateEndpoint+0x28>
 8004eb0:	8802      	ldrh	r2, [r0, #0]
 8004eb2:	492e      	ldr	r1, [pc, #184]	@ (8004f6c <USB_DeactivateEndpoint+0xd8>)
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	492e      	ldr	r1, [pc, #184]	@ (8004f70 <USB_DeactivateEndpoint+0xdc>)
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ebc:	8802      	ldrh	r2, [r0, #0]
 8004ebe:	492d      	ldr	r1, [pc, #180]	@ (8004f74 <USB_DeactivateEndpoint+0xe0>)
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ec0:	400a      	ands	r2, r1
 8004ec2:	e02f      	b.n	8004f24 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ec4:	8802      	ldrh	r2, [r0, #0]
 8004ec6:	0452      	lsls	r2, r2, #17
 8004ec8:	d505      	bpl.n	8004ed6 <USB_DeactivateEndpoint+0x42>
 8004eca:	8802      	ldrh	r2, [r0, #0]
 8004ecc:	4927      	ldr	r1, [pc, #156]	@ (8004f6c <USB_DeactivateEndpoint+0xd8>)
 8004ece:	400a      	ands	r2, r1
 8004ed0:	4929      	ldr	r1, [pc, #164]	@ (8004f78 <USB_DeactivateEndpoint+0xe4>)
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ed6:	8802      	ldrh	r2, [r0, #0]
 8004ed8:	4928      	ldr	r1, [pc, #160]	@ (8004f7c <USB_DeactivateEndpoint+0xe8>)
 8004eda:	e7f1      	b.n	8004ec0 <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 8004edc:	2780      	movs	r7, #128	@ 0x80
 8004ede:	4e23      	ldr	r6, [pc, #140]	@ (8004f6c <USB_DeactivateEndpoint+0xd8>)
 8004ee0:	4d24      	ldr	r5, [pc, #144]	@ (8004f74 <USB_DeactivateEndpoint+0xe0>)
 8004ee2:	4926      	ldr	r1, [pc, #152]	@ (8004f7c <USB_DeactivateEndpoint+0xe8>)
 8004ee4:	01ff      	lsls	r7, r7, #7
 8004ee6:	2a00      	cmp	r2, #0
 8004ee8:	d121      	bne.n	8004f2e <USB_DeactivateEndpoint+0x9a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004eea:	8802      	ldrh	r2, [r0, #0]
 8004eec:	423a      	tst	r2, r7
 8004eee:	d004      	beq.n	8004efa <USB_DeactivateEndpoint+0x66>
 8004ef0:	8802      	ldrh	r2, [r0, #0]
 8004ef2:	4c21      	ldr	r4, [pc, #132]	@ (8004f78 <USB_DeactivateEndpoint+0xe4>)
 8004ef4:	4032      	ands	r2, r6
 8004ef6:	4322      	orrs	r2, r4
 8004ef8:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004efa:	8802      	ldrh	r2, [r0, #0]
 8004efc:	4c20      	ldr	r4, [pc, #128]	@ (8004f80 <USB_DeactivateEndpoint+0xec>)
 8004efe:	0652      	lsls	r2, r2, #25
 8004f00:	d504      	bpl.n	8004f0c <USB_DeactivateEndpoint+0x78>
 8004f02:	8802      	ldrh	r2, [r0, #0]
 8004f04:	4032      	ands	r2, r6
 8004f06:	4322      	orrs	r2, r4
 8004f08:	b292      	uxth	r2, r2
 8004f0a:	8002      	strh	r2, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8004f0c:	8802      	ldrh	r2, [r0, #0]
 8004f0e:	4032      	ands	r2, r6
 8004f10:	4314      	orrs	r4, r2
 8004f12:	b2a4      	uxth	r4, r4
 8004f14:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f16:	8802      	ldrh	r2, [r0, #0]
 8004f18:	400a      	ands	r2, r1
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	b292      	uxth	r2, r2
 8004f1e:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f20:	8802      	ldrh	r2, [r0, #0]
 8004f22:	402a      	ands	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f24:	4313      	orrs	r3, r2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f2e:	8802      	ldrh	r2, [r0, #0]
 8004f30:	4c14      	ldr	r4, [pc, #80]	@ (8004f84 <USB_DeactivateEndpoint+0xf0>)
 8004f32:	423a      	tst	r2, r7
 8004f34:	d004      	beq.n	8004f40 <USB_DeactivateEndpoint+0xac>
 8004f36:	8802      	ldrh	r2, [r0, #0]
 8004f38:	4032      	ands	r2, r6
 8004f3a:	4322      	orrs	r2, r4
 8004f3c:	b292      	uxth	r2, r2
 8004f3e:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f40:	8802      	ldrh	r2, [r0, #0]
 8004f42:	0652      	lsls	r2, r2, #25
 8004f44:	d504      	bpl.n	8004f50 <USB_DeactivateEndpoint+0xbc>
 8004f46:	8802      	ldrh	r2, [r0, #0]
 8004f48:	4f09      	ldr	r7, [pc, #36]	@ (8004f70 <USB_DeactivateEndpoint+0xdc>)
 8004f4a:	4032      	ands	r2, r6
 8004f4c:	433a      	orrs	r2, r7
 8004f4e:	8002      	strh	r2, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f50:	8802      	ldrh	r2, [r0, #0]
 8004f52:	4032      	ands	r2, r6
 8004f54:	4314      	orrs	r4, r2
 8004f56:	b2a4      	uxth	r4, r4
 8004f58:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f5a:	8802      	ldrh	r2, [r0, #0]
 8004f5c:	402a      	ands	r2, r5
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	b292      	uxth	r2, r2
 8004f62:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f64:	8802      	ldrh	r2, [r0, #0]
 8004f66:	e7ab      	b.n	8004ec0 <USB_DeactivateEndpoint+0x2c>
 8004f68:	ffff8080 	.word	0xffff8080
 8004f6c:	ffff8f8f 	.word	0xffff8f8f
 8004f70:	000080c0 	.word	0x000080c0
 8004f74:	ffff8fbf 	.word	0xffff8fbf
 8004f78:	0000c080 	.word	0x0000c080
 8004f7c:	ffffbf8f 	.word	0xffffbf8f
 8004f80:	ffff80c0 	.word	0xffff80c0
 8004f84:	ffffc080 	.word	0xffffc080

08004f88 <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f88:	780b      	ldrb	r3, [r1, #0]
 8004f8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004fbc <USB_EPSetStall+0x34>)
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8004f90:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f92:	8801      	ldrh	r1, [r0, #0]
  if (ep->is_in != 0U)
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004f98:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <USB_EPSetStall+0x38>)
 8004f9a:	4019      	ands	r1, r3
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	404b      	eors	r3, r1
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004faa:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <USB_EPSetStall+0x3c>)
 8004fac:	4019      	ands	r1, r3
 8004fae:	2380      	movs	r3, #128	@ 0x80
 8004fb0:	015b      	lsls	r3, r3, #5
 8004fb2:	404b      	eors	r3, r1
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	b292      	uxth	r2, r2
 8004fb8:	8002      	strh	r2, [r0, #0]
 8004fba:	e7f4      	b.n	8004fa6 <USB_EPSetStall+0x1e>
 8004fbc:	ffff8080 	.word	0xffff8080
 8004fc0:	ffff8fbf 	.word	0xffff8fbf
 8004fc4:	ffffbf8f 	.word	0xffffbf8f

08004fc8 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004fc8:	7b0b      	ldrb	r3, [r1, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d119      	bne.n	8005002 <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fce:	780b      	ldrb	r3, [r1, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 8004fd4:	784b      	ldrb	r3, [r1, #1]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d015      	beq.n	8005006 <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fda:	8803      	ldrh	r3, [r0, #0]
 8004fdc:	065b      	lsls	r3, r3, #25
 8004fde:	d505      	bpl.n	8004fec <USB_EPClearStall+0x24>
 8004fe0:	8803      	ldrh	r3, [r0, #0]
 8004fe2:	4a10      	ldr	r2, [pc, #64]	@ (8005024 <USB_EPClearStall+0x5c>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	4a10      	ldr	r2, [pc, #64]	@ (8005028 <USB_EPClearStall+0x60>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fec:	78cb      	ldrb	r3, [r1, #3]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d007      	beq.n	8005002 <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800502c <USB_EPClearStall+0x64>)
 8004ff4:	8802      	ldrh	r2, [r0, #0]
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ffa:	4053      	eors	r3, r2
 8004ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8005030 <USB_EPClearStall+0x68>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8005002:	2000      	movs	r0, #0
 8005004:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005006:	8803      	ldrh	r3, [r0, #0]
 8005008:	045b      	lsls	r3, r3, #17
 800500a:	d505      	bpl.n	8005018 <USB_EPClearStall+0x50>
 800500c:	8803      	ldrh	r3, [r0, #0]
 800500e:	4a05      	ldr	r2, [pc, #20]	@ (8005024 <USB_EPClearStall+0x5c>)
 8005010:	4013      	ands	r3, r2
 8005012:	4a08      	ldr	r2, [pc, #32]	@ (8005034 <USB_EPClearStall+0x6c>)
 8005014:	4313      	orrs	r3, r2
 8005016:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005018:	4b07      	ldr	r3, [pc, #28]	@ (8005038 <USB_EPClearStall+0x70>)
 800501a:	8802      	ldrh	r2, [r0, #0]
 800501c:	401a      	ands	r2, r3
 800501e:	23c0      	movs	r3, #192	@ 0xc0
 8005020:	019b      	lsls	r3, r3, #6
 8005022:	e7ea      	b.n	8004ffa <USB_EPClearStall+0x32>
 8005024:	ffff8f8f 	.word	0xffff8f8f
 8005028:	000080c0 	.word	0x000080c0
 800502c:	ffff8fbf 	.word	0xffff8fbf
 8005030:	00008080 	.word	0x00008080
 8005034:	0000c080 	.word	0x0000c080
 8005038:	ffffbf8f 	.word	0xffffbf8f

0800503c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800503c:	2900      	cmp	r1, #0
 800503e:	d102      	bne.n	8005046 <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005040:	2380      	movs	r3, #128	@ 0x80
 8005042:	304c      	adds	r0, #76	@ 0x4c
 8005044:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8005046:	2000      	movs	r0, #0
 8005048:	4770      	bx	lr

0800504a <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800504a:	2280      	movs	r2, #128	@ 0x80
 800504c:	3058      	adds	r0, #88	@ 0x58
 800504e:	8803      	ldrh	r3, [r0, #0]
 8005050:	0212      	lsls	r2, r2, #8
 8005052:	4313      	orrs	r3, r2
 8005054:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8005056:	2000      	movs	r0, #0
 8005058:	4770      	bx	lr

0800505a <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800505a:	3006      	adds	r0, #6
 800505c:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 800505e:	b280      	uxth	r0, r0
  return tmpreg;
}
 8005060:	4770      	bx	lr

08005062 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005062:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005064:	2480      	movs	r4, #128	@ 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005066:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005068:	00e4      	lsls	r4, r4, #3
 800506a:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800506c:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800506e:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	18cb      	adds	r3, r1, r3
 8005074:	1a40      	subs	r0, r0, r1
 8005076:	180c      	adds	r4, r1, r0
 8005078:	428b      	cmp	r3, r1
 800507a:	d100      	bne.n	800507e <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 800507c:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 800507e:	784a      	ldrb	r2, [r1, #1]
 8005080:	780d      	ldrb	r5, [r1, #0]
 8005082:	0212      	lsls	r2, r2, #8
 8005084:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8005086:	8022      	strh	r2, [r4, #0]
    pBuf++;
 8005088:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 800508a:	e7f4      	b.n	8005076 <USB_WritePMA+0x14>

0800508c <USB_EPStartXfer>:
{
 800508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508e:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8005090:	7849      	ldrb	r1, [r1, #1]
{
 8005092:	0005      	movs	r5, r0
    if (ep->doublebuffer == 0U)
 8005094:	7b22      	ldrb	r2, [r4, #12]
{
 8005096:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 8005098:	2901      	cmp	r1, #1
 800509a:	d000      	beq.n	800509e <USB_EPStartXfer+0x12>
 800509c:	e11b      	b.n	80052d6 <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	69a7      	ldr	r7, [r4, #24]
 80050a2:	9302      	str	r3, [sp, #8]
 80050a4:	429f      	cmp	r7, r3
 80050a6:	d900      	bls.n	80050aa <USB_EPStartXfer+0x1e>
 80050a8:	001f      	movs	r7, r3
    if (ep->doublebuffer == 0U)
 80050aa:	002b      	movs	r3, r5
 80050ac:	3350      	adds	r3, #80	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050ae:	6961      	ldr	r1, [r4, #20]
 80050b0:	9301      	str	r3, [sp, #4]
    if (ep->doublebuffer == 0U)
 80050b2:	2a00      	cmp	r2, #0
 80050b4:	d11d      	bne.n	80050f2 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050b6:	b2bf      	uxth	r7, r7
 80050b8:	003b      	movs	r3, r7
 80050ba:	88e2      	ldrh	r2, [r4, #6]
 80050bc:	0028      	movs	r0, r5
 80050be:	f7ff ffd0 	bl	8005062 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050c2:	9b01      	ldr	r3, [sp, #4]
 80050c4:	4abe      	ldr	r2, [pc, #760]	@ (80053c0 <USB_EPStartXfer+0x334>)
 80050c6:	8819      	ldrh	r1, [r3, #0]
 80050c8:	7823      	ldrb	r3, [r4, #0]
 80050ca:	18aa      	adds	r2, r5, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	1852      	adds	r2, r2, r1
 80050d0:	189b      	adds	r3, r3, r2
 80050d2:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80050d4:	7823      	ldrb	r3, [r4, #0]
 80050d6:	4abb      	ldr	r2, [pc, #748]	@ (80053c4 <USB_EPStartXfer+0x338>)
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	18eb      	adds	r3, r5, r3
 80050dc:	8819      	ldrh	r1, [r3, #0]
 80050de:	4011      	ands	r1, r2
 80050e0:	2230      	movs	r2, #48	@ 0x30
 80050e2:	404a      	eors	r2, r1
 80050e4:	49b8      	ldr	r1, [pc, #736]	@ (80053c8 <USB_EPStartXfer+0x33c>)
 80050e6:	430a      	orrs	r2, r1
 80050e8:	b292      	uxth	r2, r2
 80050ea:	801a      	strh	r2, [r3, #0]
  return HAL_OK;
 80050ec:	2000      	movs	r0, #0
}
 80050ee:	b007      	add	sp, #28
 80050f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050f2:	7822      	ldrb	r2, [r4, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 80050f4:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050f6:	0093      	lsls	r3, r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050f8:	00d2      	lsls	r2, r2, #3
 80050fa:	9203      	str	r2, [sp, #12]
      if (ep->type == EP_TYPE_BULK)
 80050fc:	78e0      	ldrb	r0, [r4, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80050fe:	18eb      	adds	r3, r5, r3
      if (ep->type == EP_TYPE_BULK)
 8005100:	2802      	cmp	r0, #2
 8005102:	d000      	beq.n	8005106 <USB_EPStartXfer+0x7a>
 8005104:	e0d1      	b.n	80052aa <USB_EPStartXfer+0x21e>
        if (ep->xfer_len_db > ep->maxpacket)
 8005106:	9a02      	ldr	r2, [sp, #8]
 8005108:	42b2      	cmp	r2, r6
 800510a:	d300      	bcc.n	800510e <USB_EPStartXfer+0x82>
 800510c:	e0bb      	b.n	8005286 <USB_EPStartXfer+0x1fa>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800510e:	881a      	ldrh	r2, [r3, #0]
 8005110:	48ae      	ldr	r0, [pc, #696]	@ (80053cc <USB_EPStartXfer+0x340>)
          ep->xfer_len_db -= len;
 8005112:	1bf6      	subs	r6, r6, r7
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005114:	4010      	ands	r0, r2
 8005116:	4aae      	ldr	r2, [pc, #696]	@ (80053d0 <USB_EPStartXfer+0x344>)
 8005118:	4310      	orrs	r0, r2
 800511a:	8018      	strh	r0, [r3, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	2040      	movs	r0, #64	@ 0x40
 8005120:	469c      	mov	ip, r3
 8005122:	4662      	mov	r2, ip
 8005124:	4002      	ands	r2, r0
 8005126:	9205      	str	r2, [sp, #20]
 8005128:	4662      	mov	r2, ip
            ep->xfer_buff += len;
 800512a:	19cb      	adds	r3, r1, r7
 800512c:	9304      	str	r3, [sp, #16]
          ep->xfer_len_db -= len;
 800512e:	6226      	str	r6, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005130:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005132:	4202      	tst	r2, r0
 8005134:	d055      	beq.n	80051e2 <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005136:	9a01      	ldr	r2, [sp, #4]
 8005138:	8812      	ldrh	r2, [r2, #0]
 800513a:	4694      	mov	ip, r2
 800513c:	4aa5      	ldr	r2, [pc, #660]	@ (80053d4 <USB_EPStartXfer+0x348>)
 800513e:	18a8      	adds	r0, r5, r2
 8005140:	9a03      	ldr	r2, [sp, #12]
 8005142:	4460      	add	r0, ip
 8005144:	1882      	adds	r2, r0, r2
 8005146:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005148:	8962      	ldrh	r2, [r4, #10]
 800514a:	0028      	movs	r0, r5
 800514c:	f7ff ff89 	bl	8005062 <USB_WritePMA>
            ep->xfer_buff += len;
 8005150:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 8005152:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8005154:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8005156:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8005158:	42b2      	cmp	r2, r6
 800515a:	d201      	bcs.n	8005160 <USB_EPStartXfer+0xd4>
              ep->xfer_len_db -= len;
 800515c:	1bf3      	subs	r3, r6, r7
 800515e:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005160:	7862      	ldrb	r2, [r4, #1]
 8005162:	6223      	str	r3, [r4, #32]
 8005164:	b2b3      	uxth	r3, r6
 8005166:	2a00      	cmp	r2, #0
 8005168:	d12e      	bne.n	80051c8 <USB_EPStartXfer+0x13c>
 800516a:	9a01      	ldr	r2, [sp, #4]
 800516c:	4994      	ldr	r1, [pc, #592]	@ (80053c0 <USB_EPStartXfer+0x334>)
 800516e:	8810      	ldrh	r0, [r2, #0]
 8005170:	7822      	ldrb	r2, [r4, #0]
 8005172:	1869      	adds	r1, r5, r1
 8005174:	1809      	adds	r1, r1, r0
 8005176:	00d2      	lsls	r2, r2, #3
 8005178:	1852      	adds	r2, r2, r1
 800517a:	8811      	ldrh	r1, [r2, #0]
 800517c:	0589      	lsls	r1, r1, #22
 800517e:	0d89      	lsrs	r1, r1, #22
 8005180:	8011      	strh	r1, [r2, #0]
 8005182:	2e00      	cmp	r6, #0
 8005184:	d10a      	bne.n	800519c <USB_EPStartXfer+0x110>
 8005186:	2080      	movs	r0, #128	@ 0x80
 8005188:	8811      	ldrh	r1, [r2, #0]
 800518a:	0200      	lsls	r0, r0, #8
 800518c:	4301      	orrs	r1, r0
 800518e:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005190:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005192:	9904      	ldr	r1, [sp, #16]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005194:	0028      	movs	r0, r5
 8005196:	f7ff ff64 	bl	8005062 <USB_WritePMA>
 800519a:	e79b      	b.n	80050d4 <USB_EPStartXfer+0x48>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800519c:	2e3e      	cmp	r6, #62	@ 0x3e
 800519e:	d808      	bhi.n	80051b2 <USB_EPStartXfer+0x126>
 80051a0:	2101      	movs	r1, #1
 80051a2:	0870      	lsrs	r0, r6, #1
 80051a4:	4031      	ands	r1, r6
 80051a6:	1840      	adds	r0, r0, r1
 80051a8:	8811      	ldrh	r1, [r2, #0]
 80051aa:	0280      	lsls	r0, r0, #10
 80051ac:	4301      	orrs	r1, r0
 80051ae:	b289      	uxth	r1, r1
 80051b0:	e7ed      	b.n	800518e <USB_EPStartXfer+0x102>
 80051b2:	201f      	movs	r0, #31
 80051b4:	4030      	ands	r0, r6
 80051b6:	0971      	lsrs	r1, r6, #5
 80051b8:	4246      	negs	r6, r0
 80051ba:	4170      	adcs	r0, r6
 80051bc:	1a09      	subs	r1, r1, r0
 80051be:	8810      	ldrh	r0, [r2, #0]
 80051c0:	0289      	lsls	r1, r1, #10
 80051c2:	4308      	orrs	r0, r1
 80051c4:	4984      	ldr	r1, [pc, #528]	@ (80053d8 <USB_EPStartXfer+0x34c>)
 80051c6:	e7f1      	b.n	80051ac <USB_EPStartXfer+0x120>
 80051c8:	2a01      	cmp	r2, #1
 80051ca:	d1e1      	bne.n	8005190 <USB_EPStartXfer+0x104>
 80051cc:	002a      	movs	r2, r5
 80051ce:	497c      	ldr	r1, [pc, #496]	@ (80053c0 <USB_EPStartXfer+0x334>)
 80051d0:	3250      	adds	r2, #80	@ 0x50
 80051d2:	8810      	ldrh	r0, [r2, #0]
 80051d4:	7822      	ldrb	r2, [r4, #0]
 80051d6:	1869      	adds	r1, r5, r1
 80051d8:	00d2      	lsls	r2, r2, #3
 80051da:	1809      	adds	r1, r1, r0
 80051dc:	1852      	adds	r2, r2, r1
 80051de:	8013      	strh	r3, [r2, #0]
 80051e0:	e7d6      	b.n	8005190 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051e2:	9a01      	ldr	r2, [sp, #4]
 80051e4:	8812      	ldrh	r2, [r2, #0]
 80051e6:	4694      	mov	ip, r2
 80051e8:	4a75      	ldr	r2, [pc, #468]	@ (80053c0 <USB_EPStartXfer+0x334>)
 80051ea:	18a8      	adds	r0, r5, r2
 80051ec:	9a03      	ldr	r2, [sp, #12]
 80051ee:	4460      	add	r0, ip
 80051f0:	1882      	adds	r2, r0, r2
 80051f2:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051f4:	8922      	ldrh	r2, [r4, #8]
 80051f6:	0028      	movs	r0, r5
 80051f8:	f7ff ff33 	bl	8005062 <USB_WritePMA>
            ep->xfer_buff += len;
 80051fc:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 80051fe:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8005200:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8005202:	9b05      	ldr	r3, [sp, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005204:	42b2      	cmp	r2, r6
 8005206:	d201      	bcs.n	800520c <USB_EPStartXfer+0x180>
              ep->xfer_len_db -= len;
 8005208:	1bf3      	subs	r3, r6, r7
 800520a:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800520c:	7862      	ldrb	r2, [r4, #1]
 800520e:	6223      	str	r3, [r4, #32]
 8005210:	b2b3      	uxth	r3, r6
 8005212:	2a00      	cmp	r2, #0
 8005214:	d12a      	bne.n	800526c <USB_EPStartXfer+0x1e0>
 8005216:	9a01      	ldr	r2, [sp, #4]
 8005218:	496e      	ldr	r1, [pc, #440]	@ (80053d4 <USB_EPStartXfer+0x348>)
 800521a:	8810      	ldrh	r0, [r2, #0]
 800521c:	7822      	ldrb	r2, [r4, #0]
 800521e:	1869      	adds	r1, r5, r1
 8005220:	1809      	adds	r1, r1, r0
 8005222:	00d2      	lsls	r2, r2, #3
 8005224:	1852      	adds	r2, r2, r1
 8005226:	8811      	ldrh	r1, [r2, #0]
 8005228:	0589      	lsls	r1, r1, #22
 800522a:	0d89      	lsrs	r1, r1, #22
 800522c:	8011      	strh	r1, [r2, #0]
 800522e:	2e00      	cmp	r6, #0
 8005230:	d106      	bne.n	8005240 <USB_EPStartXfer+0x1b4>
 8005232:	2080      	movs	r0, #128	@ 0x80
 8005234:	8811      	ldrh	r1, [r2, #0]
 8005236:	0200      	lsls	r0, r0, #8
 8005238:	4301      	orrs	r1, r0
 800523a:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800523c:	8962      	ldrh	r2, [r4, #10]
 800523e:	e7a8      	b.n	8005192 <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005240:	2e3e      	cmp	r6, #62	@ 0x3e
 8005242:	d808      	bhi.n	8005256 <USB_EPStartXfer+0x1ca>
 8005244:	2101      	movs	r1, #1
 8005246:	0870      	lsrs	r0, r6, #1
 8005248:	4031      	ands	r1, r6
 800524a:	1840      	adds	r0, r0, r1
 800524c:	8811      	ldrh	r1, [r2, #0]
 800524e:	0280      	lsls	r0, r0, #10
 8005250:	4301      	orrs	r1, r0
 8005252:	b289      	uxth	r1, r1
 8005254:	e7f1      	b.n	800523a <USB_EPStartXfer+0x1ae>
 8005256:	201f      	movs	r0, #31
 8005258:	0971      	lsrs	r1, r6, #5
 800525a:	4006      	ands	r6, r0
 800525c:	4270      	negs	r0, r6
 800525e:	4146      	adcs	r6, r0
 8005260:	8810      	ldrh	r0, [r2, #0]
 8005262:	1b89      	subs	r1, r1, r6
 8005264:	0289      	lsls	r1, r1, #10
 8005266:	4308      	orrs	r0, r1
 8005268:	495b      	ldr	r1, [pc, #364]	@ (80053d8 <USB_EPStartXfer+0x34c>)
 800526a:	e7f1      	b.n	8005250 <USB_EPStartXfer+0x1c4>
 800526c:	2a01      	cmp	r2, #1
 800526e:	d1e5      	bne.n	800523c <USB_EPStartXfer+0x1b0>
 8005270:	002a      	movs	r2, r5
 8005272:	4958      	ldr	r1, [pc, #352]	@ (80053d4 <USB_EPStartXfer+0x348>)
 8005274:	3250      	adds	r2, #80	@ 0x50
 8005276:	8810      	ldrh	r0, [r2, #0]
 8005278:	7822      	ldrb	r2, [r4, #0]
 800527a:	1869      	adds	r1, r5, r1
 800527c:	00d2      	lsls	r2, r2, #3
 800527e:	1809      	adds	r1, r1, r0
 8005280:	1852      	adds	r2, r2, r1
 8005282:	8013      	strh	r3, [r2, #0]
 8005284:	e7da      	b.n	800523c <USB_EPStartXfer+0x1b0>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005286:	8818      	ldrh	r0, [r3, #0]
 8005288:	4f54      	ldr	r7, [pc, #336]	@ (80053dc <USB_EPStartXfer+0x350>)
 800528a:	4a4f      	ldr	r2, [pc, #316]	@ (80053c8 <USB_EPStartXfer+0x33c>)
 800528c:	4038      	ands	r0, r7
 800528e:	4310      	orrs	r0, r2
 8005290:	b280      	uxth	r0, r0
 8005292:	8018      	strh	r0, [r3, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005294:	9b01      	ldr	r3, [sp, #4]
 8005296:	9a03      	ldr	r2, [sp, #12]
 8005298:	8818      	ldrh	r0, [r3, #0]
 800529a:	4b49      	ldr	r3, [pc, #292]	@ (80053c0 <USB_EPStartXfer+0x334>)
 800529c:	18eb      	adds	r3, r5, r3
 800529e:	181b      	adds	r3, r3, r0
 80052a0:	189a      	adds	r2, r3, r2
 80052a2:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052a4:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052a6:	8922      	ldrh	r2, [r4, #8]
 80052a8:	e774      	b.n	8005194 <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052aa:	8818      	ldrh	r0, [r3, #0]
        ep->xfer_len_db -= len;
 80052ac:	1bf6      	subs	r6, r6, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052ae:	9a01      	ldr	r2, [sp, #4]
        ep->xfer_len_db -= len;
 80052b0:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052b2:	8816      	ldrh	r6, [r2, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80052b4:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052b6:	0640      	lsls	r0, r0, #25
 80052b8:	d507      	bpl.n	80052ca <USB_EPStartXfer+0x23e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052ba:	4a46      	ldr	r2, [pc, #280]	@ (80053d4 <USB_EPStartXfer+0x348>)
 80052bc:	18a8      	adds	r0, r5, r2
 80052be:	9a03      	ldr	r2, [sp, #12]
 80052c0:	1980      	adds	r0, r0, r6
 80052c2:	1882      	adds	r2, r0, r2
 80052c4:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052c6:	8962      	ldrh	r2, [r4, #10]
 80052c8:	e764      	b.n	8005194 <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052ca:	4a3d      	ldr	r2, [pc, #244]	@ (80053c0 <USB_EPStartXfer+0x334>)
 80052cc:	18a8      	adds	r0, r5, r2
 80052ce:	9a03      	ldr	r2, [sp, #12]
 80052d0:	1980      	adds	r0, r0, r6
 80052d2:	1882      	adds	r2, r0, r2
 80052d4:	e7e6      	b.n	80052a4 <USB_EPStartXfer+0x218>
    if (ep->doublebuffer == 0U)
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	d11c      	bne.n	8005314 <USB_EPStartXfer+0x288>
      if (ep->xfer_len > ep->maxpacket)
 80052da:	69a3      	ldr	r3, [r4, #24]
 80052dc:	6921      	ldr	r1, [r4, #16]
 80052de:	428b      	cmp	r3, r1
 80052e0:	d901      	bls.n	80052e6 <USB_EPStartXfer+0x25a>
        ep->xfer_len -= len;
 80052e2:	1a5a      	subs	r2, r3, r1
 80052e4:	000b      	movs	r3, r1
 80052e6:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80052e8:	002a      	movs	r2, r5
 80052ea:	493a      	ldr	r1, [pc, #232]	@ (80053d4 <USB_EPStartXfer+0x348>)
 80052ec:	3250      	adds	r2, #80	@ 0x50
 80052ee:	8810      	ldrh	r0, [r2, #0]
 80052f0:	7822      	ldrb	r2, [r4, #0]
 80052f2:	1869      	adds	r1, r5, r1
 80052f4:	00d2      	lsls	r2, r2, #3
 80052f6:	1809      	adds	r1, r1, r0
 80052f8:	1852      	adds	r2, r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80052fa:	8811      	ldrh	r1, [r2, #0]
 80052fc:	0589      	lsls	r1, r1, #22
 80052fe:	0d89      	lsrs	r1, r1, #22
 8005300:	8011      	strh	r1, [r2, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d000      	beq.n	8005308 <USB_EPStartXfer+0x27c>
 8005306:	e0d6      	b.n	80054b6 <USB_EPStartXfer+0x42a>
 8005308:	2180      	movs	r1, #128	@ 0x80
 800530a:	8813      	ldrh	r3, [r2, #0]
 800530c:	0209      	lsls	r1, r1, #8
 800530e:	430b      	orrs	r3, r1
 8005310:	8013      	strh	r3, [r2, #0]
 8005312:	e03d      	b.n	8005390 <USB_EPStartXfer+0x304>
      if (ep->type == EP_TYPE_BULK)
 8005314:	78e3      	ldrb	r3, [r4, #3]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d000      	beq.n	800531c <USB_EPStartXfer+0x290>
 800531a:	e08c      	b.n	8005436 <USB_EPStartXfer+0x3aa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800531c:	2900      	cmp	r1, #0
 800531e:	d124      	bne.n	800536a <USB_EPStartXfer+0x2de>
 8005320:	0006      	movs	r6, r0
 8005322:	4a27      	ldr	r2, [pc, #156]	@ (80053c0 <USB_EPStartXfer+0x334>)
 8005324:	3650      	adds	r6, #80	@ 0x50
 8005326:	8833      	ldrh	r3, [r6, #0]
 8005328:	7820      	ldrb	r0, [r4, #0]
 800532a:	18aa      	adds	r2, r5, r2
 800532c:	18d2      	adds	r2, r2, r3
 800532e:	00c0      	lsls	r0, r0, #3
 8005330:	1812      	adds	r2, r2, r0
 8005332:	8813      	ldrh	r3, [r2, #0]
 8005334:	059b      	lsls	r3, r3, #22
 8005336:	0d9b      	lsrs	r3, r3, #22
 8005338:	8013      	strh	r3, [r2, #0]
 800533a:	6923      	ldr	r3, [r4, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d134      	bne.n	80053aa <USB_EPStartXfer+0x31e>
 8005340:	2780      	movs	r7, #128	@ 0x80
 8005342:	8811      	ldrh	r1, [r2, #0]
 8005344:	023f      	lsls	r7, r7, #8
 8005346:	4339      	orrs	r1, r7
 8005348:	8011      	strh	r1, [r2, #0]
 800534a:	4a22      	ldr	r2, [pc, #136]	@ (80053d4 <USB_EPStartXfer+0x348>)
 800534c:	8831      	ldrh	r1, [r6, #0]
 800534e:	18aa      	adds	r2, r5, r2
 8005350:	1852      	adds	r2, r2, r1
 8005352:	1812      	adds	r2, r2, r0
 8005354:	8811      	ldrh	r1, [r2, #0]
 8005356:	0589      	lsls	r1, r1, #22
 8005358:	0d89      	lsrs	r1, r1, #22
 800535a:	8011      	strh	r1, [r2, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d154      	bne.n	800540a <USB_EPStartXfer+0x37e>
 8005360:	2180      	movs	r1, #128	@ 0x80
 8005362:	8813      	ldrh	r3, [r2, #0]
 8005364:	0209      	lsls	r1, r1, #8
 8005366:	430b      	orrs	r3, r1
 8005368:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 800536a:	69e3      	ldr	r3, [r4, #28]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00f      	beq.n	8005390 <USB_EPStartXfer+0x304>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005370:	7823      	ldrb	r3, [r4, #0]
 8005372:	491b      	ldr	r1, [pc, #108]	@ (80053e0 <USB_EPStartXfer+0x354>)
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	18eb      	adds	r3, r5, r3
 8005378:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800537a:	400a      	ands	r2, r1
 800537c:	428a      	cmp	r2, r1
 800537e:	d001      	beq.n	8005384 <USB_EPStartXfer+0x2f8>
 8005380:	2a00      	cmp	r2, #0
 8005382:	d105      	bne.n	8005390 <USB_EPStartXfer+0x304>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005384:	881a      	ldrh	r2, [r3, #0]
 8005386:	4911      	ldr	r1, [pc, #68]	@ (80053cc <USB_EPStartXfer+0x340>)
 8005388:	400a      	ands	r2, r1
 800538a:	4916      	ldr	r1, [pc, #88]	@ (80053e4 <USB_EPStartXfer+0x358>)
 800538c:	430a      	orrs	r2, r1
 800538e:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005390:	7823      	ldrb	r3, [r4, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	18ed      	adds	r5, r5, r3
 8005396:	882a      	ldrh	r2, [r5, #0]
 8005398:	4b13      	ldr	r3, [pc, #76]	@ (80053e8 <USB_EPStartXfer+0x35c>)
 800539a:	401a      	ands	r2, r3
 800539c:	23c0      	movs	r3, #192	@ 0xc0
 800539e:	019b      	lsls	r3, r3, #6
 80053a0:	4053      	eors	r3, r2
 80053a2:	4a12      	ldr	r2, [pc, #72]	@ (80053ec <USB_EPStartXfer+0x360>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	802b      	strh	r3, [r5, #0]
 80053a8:	e6a0      	b.n	80050ec <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80053aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80053ac:	d820      	bhi.n	80053f0 <USB_EPStartXfer+0x364>
 80053ae:	2101      	movs	r1, #1
 80053b0:	085f      	lsrs	r7, r3, #1
 80053b2:	4019      	ands	r1, r3
 80053b4:	187f      	adds	r7, r7, r1
 80053b6:	8811      	ldrh	r1, [r2, #0]
 80053b8:	02bf      	lsls	r7, r7, #10
 80053ba:	4339      	orrs	r1, r7
 80053bc:	b289      	uxth	r1, r1
 80053be:	e7c3      	b.n	8005348 <USB_EPStartXfer+0x2bc>
 80053c0:	00000402 	.word	0x00000402
 80053c4:	ffff8fbf 	.word	0xffff8fbf
 80053c8:	ffff8080 	.word	0xffff8080
 80053cc:	ffff8f8f 	.word	0xffff8f8f
 80053d0:	00008180 	.word	0x00008180
 80053d4:	00000406 	.word	0x00000406
 80053d8:	ffff8000 	.word	0xffff8000
 80053dc:	ffff8e8f 	.word	0xffff8e8f
 80053e0:	00004040 	.word	0x00004040
 80053e4:	000080c0 	.word	0x000080c0
 80053e8:	ffffbf8f 	.word	0xffffbf8f
 80053ec:	00008080 	.word	0x00008080
 80053f0:	271f      	movs	r7, #31
 80053f2:	401f      	ands	r7, r3
 80053f4:	0039      	movs	r1, r7
 80053f6:	424f      	negs	r7, r1
 80053f8:	414f      	adcs	r7, r1
 80053fa:	0959      	lsrs	r1, r3, #5
 80053fc:	1bc9      	subs	r1, r1, r7
 80053fe:	8817      	ldrh	r7, [r2, #0]
 8005400:	9101      	str	r1, [sp, #4]
 8005402:	0289      	lsls	r1, r1, #10
 8005404:	430f      	orrs	r7, r1
 8005406:	4937      	ldr	r1, [pc, #220]	@ (80054e4 <USB_EPStartXfer+0x458>)
 8005408:	e7d7      	b.n	80053ba <USB_EPStartXfer+0x32e>
 800540a:	2b3e      	cmp	r3, #62	@ 0x3e
 800540c:	d808      	bhi.n	8005420 <USB_EPStartXfer+0x394>
 800540e:	2001      	movs	r0, #1
 8005410:	0859      	lsrs	r1, r3, #1
 8005412:	4003      	ands	r3, r0
 8005414:	18c9      	adds	r1, r1, r3
 8005416:	8813      	ldrh	r3, [r2, #0]
 8005418:	0289      	lsls	r1, r1, #10
 800541a:	430b      	orrs	r3, r1
 800541c:	b29b      	uxth	r3, r3
 800541e:	e7a3      	b.n	8005368 <USB_EPStartXfer+0x2dc>
 8005420:	201f      	movs	r0, #31
 8005422:	0959      	lsrs	r1, r3, #5
 8005424:	4003      	ands	r3, r0
 8005426:	4258      	negs	r0, r3
 8005428:	4143      	adcs	r3, r0
 800542a:	1ac9      	subs	r1, r1, r3
 800542c:	8813      	ldrh	r3, [r2, #0]
 800542e:	0289      	lsls	r1, r1, #10
 8005430:	4319      	orrs	r1, r3
 8005432:	4b2c      	ldr	r3, [pc, #176]	@ (80054e4 <USB_EPStartXfer+0x458>)
 8005434:	e7f1      	b.n	800541a <USB_EPStartXfer+0x38e>
        return HAL_ERROR;
 8005436:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8005438:	4283      	cmp	r3, r0
 800543a:	d000      	beq.n	800543e <USB_EPStartXfer+0x3b2>
 800543c:	e657      	b.n	80050ee <USB_EPStartXfer+0x62>
        if (ep->xfer_len > ep->maxpacket)
 800543e:	69a3      	ldr	r3, [r4, #24]
 8005440:	6922      	ldr	r2, [r4, #16]
          ep->xfer_len = 0U;
 8005442:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 8005444:	4293      	cmp	r3, r2
 8005446:	d901      	bls.n	800544c <USB_EPStartXfer+0x3c0>
          ep->xfer_len -= len;
 8005448:	1a98      	subs	r0, r3, r2
 800544a:	0013      	movs	r3, r2
 800544c:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800544e:	2900      	cmp	r1, #0
 8005450:	d19e      	bne.n	8005390 <USB_EPStartXfer+0x304>
 8005452:	002e      	movs	r6, r5
 8005454:	4a24      	ldr	r2, [pc, #144]	@ (80054e8 <USB_EPStartXfer+0x45c>)
 8005456:	3650      	adds	r6, #80	@ 0x50
 8005458:	8831      	ldrh	r1, [r6, #0]
 800545a:	7820      	ldrb	r0, [r4, #0]
 800545c:	18aa      	adds	r2, r5, r2
 800545e:	1852      	adds	r2, r2, r1
 8005460:	00c0      	lsls	r0, r0, #3
 8005462:	1812      	adds	r2, r2, r0
 8005464:	8811      	ldrh	r1, [r2, #0]
 8005466:	0589      	lsls	r1, r1, #22
 8005468:	0d89      	lsrs	r1, r1, #22
 800546a:	8011      	strh	r1, [r2, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <USB_EPStartXfer+0x3fa>
 8005470:	2780      	movs	r7, #128	@ 0x80
 8005472:	8811      	ldrh	r1, [r2, #0]
 8005474:	023f      	lsls	r7, r7, #8
 8005476:	4339      	orrs	r1, r7
 8005478:	8011      	strh	r1, [r2, #0]
 800547a:	4a1c      	ldr	r2, [pc, #112]	@ (80054ec <USB_EPStartXfer+0x460>)
 800547c:	8831      	ldrh	r1, [r6, #0]
 800547e:	18aa      	adds	r2, r5, r2
 8005480:	1852      	adds	r2, r2, r1
 8005482:	1812      	adds	r2, r2, r0
 8005484:	e739      	b.n	80052fa <USB_EPStartXfer+0x26e>
 8005486:	2b3e      	cmp	r3, #62	@ 0x3e
 8005488:	d808      	bhi.n	800549c <USB_EPStartXfer+0x410>
 800548a:	2101      	movs	r1, #1
 800548c:	085f      	lsrs	r7, r3, #1
 800548e:	4019      	ands	r1, r3
 8005490:	187f      	adds	r7, r7, r1
 8005492:	8811      	ldrh	r1, [r2, #0]
 8005494:	02bf      	lsls	r7, r7, #10
 8005496:	4339      	orrs	r1, r7
 8005498:	b289      	uxth	r1, r1
 800549a:	e7ed      	b.n	8005478 <USB_EPStartXfer+0x3ec>
 800549c:	271f      	movs	r7, #31
 800549e:	401f      	ands	r7, r3
 80054a0:	0039      	movs	r1, r7
 80054a2:	424f      	negs	r7, r1
 80054a4:	414f      	adcs	r7, r1
 80054a6:	0959      	lsrs	r1, r3, #5
 80054a8:	1bc9      	subs	r1, r1, r7
 80054aa:	8817      	ldrh	r7, [r2, #0]
 80054ac:	9101      	str	r1, [sp, #4]
 80054ae:	0289      	lsls	r1, r1, #10
 80054b0:	430f      	orrs	r7, r1
 80054b2:	490c      	ldr	r1, [pc, #48]	@ (80054e4 <USB_EPStartXfer+0x458>)
 80054b4:	e7ef      	b.n	8005496 <USB_EPStartXfer+0x40a>
 80054b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80054b8:	d808      	bhi.n	80054cc <USB_EPStartXfer+0x440>
 80054ba:	2001      	movs	r0, #1
 80054bc:	0859      	lsrs	r1, r3, #1
 80054be:	4003      	ands	r3, r0
 80054c0:	18c9      	adds	r1, r1, r3
 80054c2:	8813      	ldrh	r3, [r2, #0]
 80054c4:	0289      	lsls	r1, r1, #10
 80054c6:	430b      	orrs	r3, r1
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	e721      	b.n	8005310 <USB_EPStartXfer+0x284>
 80054cc:	201f      	movs	r0, #31
 80054ce:	0959      	lsrs	r1, r3, #5
 80054d0:	4003      	ands	r3, r0
 80054d2:	4258      	negs	r0, r3
 80054d4:	4143      	adcs	r3, r0
 80054d6:	1ac9      	subs	r1, r1, r3
 80054d8:	8813      	ldrh	r3, [r2, #0]
 80054da:	0289      	lsls	r1, r1, #10
 80054dc:	4319      	orrs	r1, r3
 80054de:	4b01      	ldr	r3, [pc, #4]	@ (80054e4 <USB_EPStartXfer+0x458>)
 80054e0:	e7f1      	b.n	80054c6 <USB_EPStartXfer+0x43a>
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	ffff8000 	.word	0xffff8000
 80054e8:	00000402 	.word	0x00000402
 80054ec:	00000406 	.word	0x00000406

080054f0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80054f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054f2:	2580      	movs	r5, #128	@ 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 80054f4:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054f6:	00ed      	lsls	r5, r5, #3
 80054f8:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 80054fa:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 80054fc:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054fe:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 8005500:	1a47      	subs	r7, r0, r1
 8005502:	19ea      	adds	r2, r5, r7
 8005504:	2e00      	cmp	r6, #0
 8005506:	d106      	bne.n	8005516 <USB_ReadPMA+0x26>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005508:	07db      	lsls	r3, r3, #31
 800550a:	d503      	bpl.n	8005514 <USB_ReadPMA+0x24>
 800550c:	0064      	lsls	r4, r4, #1
  {
    RdVal = *pdwVal;
 800550e:	1900      	adds	r0, r0, r4
 8005510:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005512:	550b      	strb	r3, [r1, r4]
  }
}
 8005514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8005516:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 8005518:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 800551a:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800551c:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800551e:	0a12      	lsrs	r2, r2, #8
 8005520:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8005522:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 8005524:	e7ed      	b.n	8005502 <USB_ReadPMA+0x12>
	...

08005528 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005528:	23af      	movs	r3, #175	@ 0xaf
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	58c3      	ldr	r3, [r0, r3]
{
 800552e:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00e      	beq.n	8005552 <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005534:	22ae      	movs	r2, #174	@ 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005536:	2580      	movs	r5, #128	@ 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005538:	0092      	lsls	r2, r2, #2
 800553a:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800553c:	00ad      	lsls	r5, r5, #2
 800553e:	5d60      	ldrb	r0, [r4, r5]
 8005540:	28ff      	cmp	r0, #255	@ 0xff
 8005542:	d006      	beq.n	8005552 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005544:	4a04      	ldr	r2, [pc, #16]	@ (8005558 <USBD_CDC_EP0_RxReady+0x30>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	0021      	movs	r1, r4
 800554a:	5ca2      	ldrb	r2, [r4, r2]
 800554c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800554e:	23ff      	movs	r3, #255	@ 0xff
 8005550:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 8005552:	2000      	movs	r0, #0
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	46c0      	nop			@ (mov r8, r8)
 8005558:	00000201 	.word	0x00000201

0800555c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800555c:	2343      	movs	r3, #67	@ 0x43
 800555e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
 8005560:	4800      	ldr	r0, [pc, #0]	@ (8005564 <USBD_CDC_GetFSCfgDesc+0x8>)
}
 8005562:	4770      	bx	lr
 8005564:	20000064 	.word	0x20000064

08005568 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005568:	2343      	movs	r3, #67	@ 0x43
 800556a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
 800556c:	4800      	ldr	r0, [pc, #0]	@ (8005570 <USBD_CDC_GetHSCfgDesc+0x8>)
}
 800556e:	4770      	bx	lr
 8005570:	200000a8 	.word	0x200000a8

08005574 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005574:	2343      	movs	r3, #67	@ 0x43
 8005576:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005578:	4800      	ldr	r0, [pc, #0]	@ (800557c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
}
 800557a:	4770      	bx	lr
 800557c:	20000020 	.word	0x20000020

08005580 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005580:	230a      	movs	r3, #10
 8005582:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005584:	4800      	ldr	r0, [pc, #0]	@ (8005588 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 8005586:	4770      	bx	lr
 8005588:	20000124 	.word	0x20000124

0800558c <USBD_CDC_DataOut>:
{
 800558c:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800558e:	26ae      	movs	r6, #174	@ 0xae
 8005590:	00b6      	lsls	r6, r6, #2
{
 8005592:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005594:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005596:	f000 ff59 	bl	800644c <USBD_LL_GetRxDataSize>
 800559a:	2383      	movs	r3, #131	@ 0x83
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 80055a0:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 80055a2:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055a8:	2383      	movs	r3, #131	@ 0x83
 80055aa:	2281      	movs	r2, #129	@ 0x81
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	18e9      	adds	r1, r5, r3
 80055b0:	33b0      	adds	r3, #176	@ 0xb0
 80055b2:	58e3      	ldr	r3, [r4, r3]
 80055b4:	0092      	lsls	r2, r2, #2
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	58a8      	ldr	r0, [r5, r2]
 80055ba:	4798      	blx	r3
    return USBD_OK;
 80055bc:	2000      	movs	r0, #0
}
 80055be:	bd70      	pop	{r4, r5, r6, pc}

080055c0 <USBD_CDC_DataIn>:
{
 80055c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055c2:	23ae      	movs	r3, #174	@ 0xae
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	58c7      	ldr	r7, [r0, r3]
{
 80055c8:	0004      	movs	r4, r0
 80055ca:	000e      	movs	r6, r1
    return USBD_FAIL;
 80055cc:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 80055ce:	2f00      	cmp	r7, #0
 80055d0:	d016      	beq.n	8005600 <USBD_CDC_DataIn+0x40>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055d2:	2514      	movs	r5, #20
 80055d4:	434d      	muls	r5, r1
 80055d6:	1965      	adds	r5, r4, r5
 80055d8:	69e8      	ldr	r0, [r5, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80055da:	3308      	adds	r3, #8
 80055dc:	58e3      	ldr	r3, [r4, r3]
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055de:	2800      	cmp	r0, #0
 80055e0:	d00f      	beq.n	8005602 <USBD_CDC_DataIn+0x42>
 80055e2:	2228      	movs	r2, #40	@ 0x28
 80055e4:	434a      	muls	r2, r1
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	6a19      	ldr	r1, [r3, #32]
 80055ea:	f7fa fe43 	bl	8000274 <__aeabi_uidivmod>
 80055ee:	1e0a      	subs	r2, r1, #0
 80055f0:	d107      	bne.n	8005602 <USBD_CDC_DataIn+0x42>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055f2:	000b      	movs	r3, r1
      pdev->ep_in[epnum].total_length = 0U;
 80055f4:	61e9      	str	r1, [r5, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055f6:	0020      	movs	r0, r4
 80055f8:	0031      	movs	r1, r6
 80055fa:	f000 ff15 	bl	8006428 <USBD_LL_Transmit>
    return USBD_OK;
 80055fe:	2000      	movs	r0, #0
}
 8005600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8005602:	2385      	movs	r3, #133	@ 0x85
 8005604:	2200      	movs	r2, #0
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	50fa      	str	r2, [r7, r3]
 800560a:	e7f8      	b.n	80055fe <USBD_CDC_DataIn+0x3e>

0800560c <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800560c:	23ae      	movs	r3, #174	@ 0xae
{
 800560e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	58c6      	ldr	r6, [r0, r3]
  uint8_t ifalt = 0U;
 8005614:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 8005616:	466a      	mov	r2, sp
{
 8005618:	000d      	movs	r5, r1
  uint8_t ifalt = 0U;
 800561a:	1d59      	adds	r1, r3, #5
 800561c:	2300      	movs	r3, #0
{
 800561e:	0004      	movs	r4, r0
  uint8_t ifalt = 0U;
 8005620:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 8005622:	80d3      	strh	r3, [r2, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005624:	782b      	ldrb	r3, [r5, #0]
  uint16_t status_info = 0U;
 8005626:	1d90      	adds	r0, r2, #6
 8005628:	001f      	movs	r7, r3
 800562a:	2260      	movs	r2, #96	@ 0x60
 800562c:	4017      	ands	r7, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800562e:	4213      	tst	r3, r2
 8005630:	d026      	beq.n	8005680 <USBD_CDC_Setup+0x74>
 8005632:	2f20      	cmp	r7, #32
 8005634:	d13f      	bne.n	80056b6 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8005636:	88ea      	ldrh	r2, [r5, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005638:	7868      	ldrb	r0, [r5, #1]
      if (req->wLength)
 800563a:	2a00      	cmp	r2, #0
 800563c:	d019      	beq.n	8005672 <USBD_CDC_Setup+0x66>
        if (req->bmRequest & 0x80U)
 800563e:	b25b      	sxtb	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	da0b      	bge.n	800565c <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005644:	23af      	movs	r3, #175	@ 0xaf
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	58e3      	ldr	r3, [r4, r3]
 800564a:	0031      	movs	r1, r6
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005650:	0031      	movs	r1, r6
 8005652:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005654:	0020      	movs	r0, r4
 8005656:	f000 fc94 	bl	8005f82 <USBD_CtlSendData>
 800565a:	e008      	b.n	800566e <USBD_CDC_Setup+0x62>
          hcdc->CmdOpCode = req->bRequest;
 800565c:	2380      	movs	r3, #128	@ 0x80
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	54f0      	strb	r0, [r6, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005662:	4b18      	ldr	r3, [pc, #96]	@ (80056c4 <USBD_CDC_Setup+0xb8>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005664:	0031      	movs	r1, r6
 8005666:	0020      	movs	r0, r4
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005668:	54f2      	strb	r2, [r6, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800566a:	f000 fca0 	bl	8005fae <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 800566e:	2000      	movs	r0, #0
}
 8005670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005672:	23af      	movs	r3, #175	@ 0xaf
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	58e3      	ldr	r3, [r4, r3]
 8005678:	0029      	movs	r1, r5
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	4798      	blx	r3
 800567e:	e7f6      	b.n	800566e <USBD_CDC_Setup+0x62>
      switch (req->bRequest)
 8005680:	786b      	ldrb	r3, [r5, #1]
 8005682:	2b0a      	cmp	r3, #10
 8005684:	d00b      	beq.n	800569e <USBD_CDC_Setup+0x92>
 8005686:	2b0b      	cmp	r3, #11
 8005688:	d010      	beq.n	80056ac <USBD_CDC_Setup+0xa0>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d113      	bne.n	80056b6 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800568e:	23a7      	movs	r3, #167	@ 0xa7
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	5ce3      	ldrb	r3, [r4, r3]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d10e      	bne.n	80056b6 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005698:	2202      	movs	r2, #2
 800569a:	0001      	movs	r1, r0
 800569c:	e7da      	b.n	8005654 <USBD_CDC_Setup+0x48>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800569e:	23a7      	movs	r3, #167	@ 0xa7
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	5ce3      	ldrb	r3, [r4, r3]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d106      	bne.n	80056b6 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80056a8:	2201      	movs	r2, #1
 80056aa:	e7d3      	b.n	8005654 <USBD_CDC_Setup+0x48>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056ac:	23a7      	movs	r3, #167	@ 0xa7
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	5ce3      	ldrb	r3, [r4, r3]
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d0db      	beq.n	800566e <USBD_CDC_Setup+0x62>
          USBD_CtlError(pdev, req);
 80056b6:	0020      	movs	r0, r4
 80056b8:	0029      	movs	r1, r5
 80056ba:	f000 fc3b 	bl	8005f34 <USBD_CtlError>
            ret = USBD_FAIL;
 80056be:	2002      	movs	r0, #2
 80056c0:	e7d6      	b.n	8005670 <USBD_CDC_Setup+0x64>
 80056c2:	46c0      	nop			@ (mov r8, r8)
 80056c4:	00000201 	.word	0x00000201

080056c8 <USBD_CDC_DeInit>:
{
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80056cc:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80056ce:	2181      	movs	r1, #129	@ 0x81
 80056d0:	f000 fe73 	bl	80063ba <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80056d4:	2101      	movs	r1, #1
 80056d6:	0020      	movs	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80056d8:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80056da:	f000 fe6e 	bl	80063ba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80056de:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 80056e0:	26ae      	movs	r6, #174	@ 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80056e2:	33fc      	adds	r3, #252	@ 0xfc
 80056e4:	671d      	str	r5, [r3, #112]	@ 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80056e6:	2182      	movs	r1, #130	@ 0x82
 80056e8:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 80056ea:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80056ec:	f000 fe65 	bl	80063ba <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80056f0:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80056f2:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	d008      	beq.n	800570a <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80056f8:	23af      	movs	r3, #175	@ 0xaf
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	58e3      	ldr	r3, [r4, r3]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005702:	59a0      	ldr	r0, [r4, r6]
 8005704:	f000 feae 	bl	8006464 <USBD_static_free>
    pdev->pClassData = NULL;
 8005708:	51a5      	str	r5, [r4, r6]
}
 800570a:	2000      	movs	r0, #0
 800570c:	bd70      	pop	{r4, r5, r6, pc}

0800570e <USBD_CDC_Init>:
{
 800570e:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005710:	7c03      	ldrb	r3, [r0, #16]
{
 8005712:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005714:	2b00      	cmp	r3, #0
 8005716:	d13a      	bne.n	800578e <USBD_CDC_Init+0x80>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005718:	2380      	movs	r3, #128	@ 0x80
 800571a:	2181      	movs	r1, #129	@ 0x81
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	2202      	movs	r2, #2
 8005720:	f000 fe3f 	bl	80063a2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005724:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005726:	2380      	movs	r3, #128	@ 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005728:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800572a:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800572c:	2202      	movs	r2, #2
 800572e:	0020      	movs	r0, r4
 8005730:	f000 fe37 	bl	80063a2 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005734:	0023      	movs	r3, r4
 8005736:	2601      	movs	r6, #1
 8005738:	33fc      	adds	r3, #252	@ 0xfc
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800573a:	2203      	movs	r2, #3
 800573c:	2182      	movs	r1, #130	@ 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800573e:	671e      	str	r6, [r3, #112]	@ 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005740:	0020      	movs	r0, r4
 8005742:	2308      	movs	r3, #8
 8005744:	f000 fe2d 	bl	80063a2 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005748:	2087      	movs	r0, #135	@ 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800574a:	6426      	str	r6, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800574c:	0080      	lsls	r0, r0, #2
 800574e:	f000 fe85 	bl	800645c <USBD_static_malloc>
 8005752:	23ae      	movs	r3, #174	@ 0xae
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	0005      	movs	r5, r0
 8005758:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 800575a:	0030      	movs	r0, r6
  if (pdev->pClassData == NULL)
 800575c:	2d00      	cmp	r5, #0
 800575e:	d015      	beq.n	800578c <USBD_CDC_Init+0x7e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005760:	3304      	adds	r3, #4
 8005762:	58e3      	ldr	r3, [r4, r3]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005768:	2285      	movs	r2, #133	@ 0x85
 800576a:	2300      	movs	r3, #0
 800576c:	0092      	lsls	r2, r2, #2
 800576e:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 8005770:	3204      	adds	r2, #4
 8005772:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005774:	7c23      	ldrb	r3, [r4, #16]
 8005776:	3a14      	subs	r2, #20
 8005778:	2b00      	cmp	r3, #0
 800577a:	d111      	bne.n	80057a0 <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800577c:	2380      	movs	r3, #128	@ 0x80
 800577e:	009b      	lsls	r3, r3, #2
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005780:	0031      	movs	r1, r6
 8005782:	0020      	movs	r0, r4
 8005784:	58aa      	ldr	r2, [r5, r2]
 8005786:	f000 fe58 	bl	800643a <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800578a:	2000      	movs	r0, #0
}
 800578c:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800578e:	2340      	movs	r3, #64	@ 0x40
 8005790:	2181      	movs	r1, #129	@ 0x81
 8005792:	2202      	movs	r2, #2
 8005794:	f000 fe05 	bl	80063a2 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005798:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800579a:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800579c:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800579e:	e7c5      	b.n	800572c <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057a0:	2340      	movs	r3, #64	@ 0x40
 80057a2:	e7ed      	b.n	8005780 <USBD_CDC_Init+0x72>

080057a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80057a4:	0003      	movs	r3, r0
  uint8_t  ret = USBD_FAIL;
 80057a6:	2002      	movs	r0, #2

  if (fops != NULL)
 80057a8:	2900      	cmp	r1, #0
 80057aa:	d003      	beq.n	80057b4 <USBD_CDC_RegisterInterface+0x10>
  {
    pdev->pUserData = fops;
 80057ac:	22af      	movs	r2, #175	@ 0xaf
    ret = USBD_OK;
 80057ae:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 80057b0:	0092      	lsls	r2, r2, #2
 80057b2:	5099      	str	r1, [r3, r2]
  }

  return ret;
}
 80057b4:	4770      	bx	lr

080057b6 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057b6:	23ae      	movs	r3, #174	@ 0xae
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 80057bc:	2082      	movs	r0, #130	@ 0x82
 80057be:	0080      	lsls	r0, r0, #2
 80057c0:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 80057c2:	2184      	movs	r1, #132	@ 0x84
 80057c4:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 80057c6:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 80057c8:	505a      	str	r2, [r3, r1]
}
 80057ca:	4770      	bx	lr

080057cc <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80057cc:	23ae      	movs	r3, #174	@ 0xae
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	58c2      	ldr	r2, [r0, r3]
 80057d2:	3bb4      	subs	r3, #180	@ 0xb4

  return USBD_OK;
}
 80057d4:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80057d6:	50d1      	str	r1, [r2, r3]
}
 80057d8:	4770      	bx	lr

080057da <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057da:	23ae      	movs	r3, #174	@ 0xae
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	58c2      	ldr	r2, [r0, r3]
{
 80057e0:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80057e2:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 80057e4:	2a00      	cmp	r2, #0
 80057e6:	d012      	beq.n	800580e <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 80057e8:	2185      	movs	r1, #133	@ 0x85
 80057ea:	0089      	lsls	r1, r1, #2
 80057ec:	5854      	ldr	r4, [r2, r1]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	2c00      	cmp	r4, #0
 80057f2:	d10c      	bne.n	800580e <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 80057f4:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80057f6:	2384      	movs	r3, #132	@ 0x84
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057fc:	390c      	subs	r1, #12
 80057fe:	5852      	ldr	r2, [r2, r1]
 8005800:	3988      	subs	r1, #136	@ 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005802:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005804:	39ff      	subs	r1, #255	@ 0xff
 8005806:	b29b      	uxth	r3, r3
 8005808:	f000 fe0e 	bl	8006428 <USBD_LL_Transmit>
      return USBD_OK;
 800580c:	0023      	movs	r3, r4
  }
}
 800580e:	0018      	movs	r0, r3
 8005810:	bd10      	pop	{r4, pc}

08005812 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005812:	23ae      	movs	r3, #174	@ 0xae
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	58c2      	ldr	r2, [r0, r3]
{
 8005818:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 800581a:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 800581c:	2a00      	cmp	r2, #0
 800581e:	d00b      	beq.n	8005838 <USBD_CDC_ReceivePacket+0x26>
      USBD_LL_PrepareReceive(pdev,
 8005820:	2381      	movs	r3, #129	@ 0x81
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	58d2      	ldr	r2, [r2, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005826:	7c03      	ldrb	r3, [r0, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <USBD_CDC_ReceivePacket+0x2a>
      USBD_LL_PrepareReceive(pdev,
 800582c:	2380      	movs	r3, #128	@ 0x80
 800582e:	009b      	lsls	r3, r3, #2
      USBD_LL_PrepareReceive(pdev,
 8005830:	2101      	movs	r1, #1
 8005832:	f000 fe02 	bl	800643a <USBD_LL_PrepareReceive>
    return USBD_OK;
 8005836:	2300      	movs	r3, #0
  }
}
 8005838:	0018      	movs	r0, r3
 800583a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800583c:	2340      	movs	r3, #64	@ 0x40
 800583e:	e7f7      	b.n	8005830 <USBD_CDC_ReceivePacket+0x1e>

08005840 <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005840:	2302      	movs	r3, #2
{
 8005842:	b510      	push	{r4, lr}
  if (pdev == NULL)
 8005844:	2800      	cmp	r0, #0
 8005846:	d013      	beq.n	8005870 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005848:	23ad      	movs	r3, #173	@ 0xad
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	58c4      	ldr	r4, [r0, r3]
 800584e:	2c00      	cmp	r4, #0
 8005850:	d001      	beq.n	8005856 <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 8005852:	2400      	movs	r4, #0
 8005854:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005856:	2900      	cmp	r1, #0
 8005858:	d002      	beq.n	8005860 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 800585a:	23ac      	movs	r3, #172	@ 0xac
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005860:	23a7      	movs	r3, #167	@ 0xa7
 8005862:	2101      	movs	r1, #1
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8005868:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800586a:	f000 fd51 	bl	8006310 <USBD_LL_Init>

  return USBD_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	0018      	movs	r0, r3
 8005872:	bd10      	pop	{r4, pc}

08005874 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005874:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005876:	2002      	movs	r0, #2
  if (pclass != NULL)
 8005878:	2900      	cmp	r1, #0
 800587a:	d003      	beq.n	8005884 <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 800587c:	22ad      	movs	r2, #173	@ 0xad
    status = USBD_OK;
 800587e:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8005880:	0092      	lsls	r2, r2, #2
 8005882:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 8005884:	4770      	bx	lr

08005886 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005886:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005888:	f000 fd82 	bl	8006390 <USBD_LL_Start>

  return USBD_OK;
}
 800588c:	2000      	movs	r0, #0
 800588e:	bd10      	pop	{r4, pc}

08005890 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005890:	23ad      	movs	r3, #173	@ 0xad
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	58c2      	ldr	r2, [r0, r3]
{
 8005896:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005898:	2302      	movs	r3, #2
  if (pdev->pClass != NULL)
 800589a:	2a00      	cmp	r2, #0
 800589c:	d004      	beq.n	80058a8 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800589e:	6813      	ldr	r3, [r2, #0]
 80058a0:	4798      	blx	r3
 80058a2:	1e43      	subs	r3, r0, #1
 80058a4:	4198      	sbcs	r0, r3
 80058a6:	0043      	lsls	r3, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	bd10      	pop	{r4, pc}

080058ac <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80058ac:	23ad      	movs	r3, #173	@ 0xad
{
 80058ae:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	58c3      	ldr	r3, [r0, r3]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	4798      	blx	r3

  return USBD_OK;
}
 80058b8:	2000      	movs	r0, #0
 80058ba:	bd10      	pop	{r4, pc}

080058bc <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058bc:	23aa      	movs	r3, #170	@ 0xaa
 80058be:	009b      	lsls	r3, r3, #2
{
 80058c0:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058c2:	18c5      	adds	r5, r0, r3
{
 80058c4:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058c6:	0028      	movs	r0, r5
 80058c8:	f000 fb20 	bl	8005f0c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058cc:	23a5      	movs	r3, #165	@ 0xa5
 80058ce:	2201      	movs	r2, #1
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80058d4:	4b11      	ldr	r3, [pc, #68]	@ (800591c <USBD_LL_SetupStage+0x60>)
 80058d6:	5ae2      	ldrh	r2, [r4, r3]
 80058d8:	3b16      	subs	r3, #22
 80058da:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80058dc:	3310      	adds	r3, #16
 80058de:	5ce1      	ldrb	r1, [r4, r3]
 80058e0:	231f      	movs	r3, #31
 80058e2:	400b      	ands	r3, r1
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d009      	beq.n	80058fc <USBD_LL_SetupStage+0x40>
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d00c      	beq.n	8005906 <USBD_LL_SetupStage+0x4a>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10f      	bne.n	8005910 <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80058f0:	0029      	movs	r1, r5
 80058f2:	0020      	movs	r0, r4
 80058f4:	f000 f91a 	bl	8005b2c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80058f8:	2000      	movs	r0, #0
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80058fc:	0029      	movs	r1, r5
 80058fe:	0020      	movs	r0, r4
 8005900:	f000 fa4a 	bl	8005d98 <USBD_StdItfReq>
      break;
 8005904:	e7f8      	b.n	80058f8 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 8005906:	0029      	movs	r1, r5
 8005908:	0020      	movs	r0, r4
 800590a:	f000 fa6d 	bl	8005de8 <USBD_StdEPReq>
      break;
 800590e:	e7f3      	b.n	80058f8 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005910:	237f      	movs	r3, #127	@ 0x7f
 8005912:	0020      	movs	r0, r4
 8005914:	4399      	bics	r1, r3
 8005916:	f000 fd59 	bl	80063cc <USBD_LL_StallEP>
      break;
 800591a:	e7ed      	b.n	80058f8 <USBD_LL_SetupStage+0x3c>
 800591c:	000002ae 	.word	0x000002ae

08005920 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	0004      	movs	r4, r0
 8005924:	0015      	movs	r5, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005926:	2900      	cmp	r1, #0
 8005928:	d12e      	bne.n	8005988 <USBD_LL_DataOutStage+0x68>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800592a:	23a5      	movs	r3, #165	@ 0xa5
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	58c2      	ldr	r2, [r0, r3]
 8005930:	2a03      	cmp	r2, #3
 8005932:	d123      	bne.n	800597c <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005934:	0002      	movs	r2, r0
 8005936:	3255      	adds	r2, #85	@ 0x55
 8005938:	32ff      	adds	r2, #255	@ 0xff
 800593a:	68d3      	ldr	r3, [r2, #12]
 800593c:	6910      	ldr	r0, [r2, #16]
 800593e:	4283      	cmp	r3, r0
 8005940:	d90b      	bls.n	800595a <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 8005942:	1a1b      	subs	r3, r3, r0
 8005944:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 8005946:	b282      	uxth	r2, r0
 8005948:	4298      	cmp	r0, r3
 800594a:	d900      	bls.n	800594e <USBD_LL_DataOutStage+0x2e>
 800594c:	b29a      	uxth	r2, r3
 800594e:	0029      	movs	r1, r5
 8005950:	0020      	movs	r0, r4
 8005952:	f000 fb3c 	bl	8005fce <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8005956:	2000      	movs	r0, #0
}
 8005958:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800595a:	23ad      	movs	r3, #173	@ 0xad
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	58e3      	ldr	r3, [r4, r3]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005966:	22a7      	movs	r2, #167	@ 0xa7
 8005968:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800596a:	5ca2      	ldrb	r2, [r4, r2]
 800596c:	2a03      	cmp	r2, #3
 800596e:	d101      	bne.n	8005974 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8005970:	0020      	movs	r0, r4
 8005972:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005974:	0020      	movs	r0, r4
 8005976:	f000 fb32 	bl	8005fde <USBD_CtlSendStatus>
 800597a:	e7ec      	b.n	8005956 <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800597c:	2a05      	cmp	r2, #5
 800597e:	d1ea      	bne.n	8005956 <USBD_LL_DataOutStage+0x36>
        pdev->ep0_state = USBD_EP0_IDLE;
 8005980:	50c1      	str	r1, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005982:	f000 fd23 	bl	80063cc <USBD_LL_StallEP>
 8005986:	e7e6      	b.n	8005956 <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 8005988:	23ad      	movs	r3, #173	@ 0xad
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 800598e:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0e0      	beq.n	8005958 <USBD_LL_DataOutStage+0x38>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005996:	22a7      	movs	r2, #167	@ 0xa7
 8005998:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 800599a:	5ca2      	ldrb	r2, [r4, r2]
 800599c:	2a03      	cmp	r2, #3
 800599e:	d1db      	bne.n	8005958 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 80059a0:	0020      	movs	r0, r4
 80059a2:	4798      	blx	r3
 80059a4:	e7d7      	b.n	8005956 <USBD_LL_DataOutStage+0x36>

080059a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80059a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a8:	000d      	movs	r5, r1
 80059aa:	0004      	movs	r4, r0
 80059ac:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80059ae:	2d00      	cmp	r5, #0
 80059b0:	d14d      	bne.n	8005a4e <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059b2:	23a5      	movs	r3, #165	@ 0xa5
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	58c3      	ldr	r3, [r0, r3]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d13e      	bne.n	8005a3a <USBD_LL_DataInStage+0x94>
    {
      if (pep->rem_length > pep->maxpacket)
 80059bc:	6a03      	ldr	r3, [r0, #32]
 80059be:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 80059c0:	42b3      	cmp	r3, r6
 80059c2:	d911      	bls.n	80059e8 <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 80059c4:	1b9b      	subs	r3, r3, r6
 80059c6:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	f000 fae8 	bl	8005f9e <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059ce:	002b      	movs	r3, r5
 80059d0:	002a      	movs	r2, r5
 80059d2:	0029      	movs	r1, r5
 80059d4:	0020      	movs	r0, r4
 80059d6:	f000 fd30 	bl	800643a <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80059da:	23a8      	movs	r3, #168	@ 0xa8
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	5ce2      	ldrb	r2, [r4, r3]
 80059e0:	2a01      	cmp	r2, #1
 80059e2:	d031      	beq.n	8005a48 <USBD_LL_DataInStage+0xa2>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80059e4:	2000      	movs	r0, #0
}
 80059e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80059e8:	69c7      	ldr	r7, [r0, #28]
 80059ea:	0031      	movs	r1, r6
 80059ec:	0038      	movs	r0, r7
 80059ee:	f7fa fc41 	bl	8000274 <__aeabi_uidivmod>
 80059f2:	1e0d      	subs	r5, r1, #0
 80059f4:	d10c      	bne.n	8005a10 <USBD_LL_DataInStage+0x6a>
 80059f6:	42be      	cmp	r6, r7
 80059f8:	d80a      	bhi.n	8005a10 <USBD_LL_DataInStage+0x6a>
            (pep->total_length < pdev->ep0_data_len))
 80059fa:	26a6      	movs	r6, #166	@ 0xa6
 80059fc:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 80059fe:	59a3      	ldr	r3, [r4, r6]
 8005a00:	429f      	cmp	r7, r3
 8005a02:	d205      	bcs.n	8005a10 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a04:	000a      	movs	r2, r1
 8005a06:	0020      	movs	r0, r4
 8005a08:	f000 fac9 	bl	8005f9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a0c:	51a5      	str	r5, [r4, r6]
 8005a0e:	e7de      	b.n	80059ce <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a10:	23ad      	movs	r3, #173	@ 0xad
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	58e3      	ldr	r3, [r4, r3]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d006      	beq.n	8005a2a <USBD_LL_DataInStage+0x84>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a1c:	22a7      	movs	r2, #167	@ 0xa7
 8005a1e:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a20:	5ca2      	ldrb	r2, [r4, r2]
 8005a22:	2a03      	cmp	r2, #3
 8005a24:	d101      	bne.n	8005a2a <USBD_LL_DataInStage+0x84>
            pdev->pClass->EP0_TxSent(pdev);
 8005a26:	0020      	movs	r0, r4
 8005a28:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8005a2a:	2180      	movs	r1, #128	@ 0x80
 8005a2c:	0020      	movs	r0, r4
 8005a2e:	f000 fccd 	bl	80063cc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005a32:	0020      	movs	r0, r4
 8005a34:	f000 fadf 	bl	8005ff6 <USBD_CtlReceiveStatus>
 8005a38:	e7cf      	b.n	80059da <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005a3a:	2204      	movs	r2, #4
 8005a3c:	4393      	bics	r3, r2
 8005a3e:	d1cc      	bne.n	80059da <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8005a40:	2180      	movs	r1, #128	@ 0x80
 8005a42:	f000 fcc3 	bl	80063cc <USBD_LL_StallEP>
 8005a46:	e7c8      	b.n	80059da <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8005a48:	2200      	movs	r2, #0
 8005a4a:	54e2      	strb	r2, [r4, r3]
 8005a4c:	e7ca      	b.n	80059e4 <USBD_LL_DataInStage+0x3e>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a4e:	23ad      	movs	r3, #173	@ 0xad
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 8005a54:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d0c4      	beq.n	80059e6 <USBD_LL_DataInStage+0x40>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a5c:	22a7      	movs	r2, #167	@ 0xa7
 8005a5e:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a60:	5ca2      	ldrb	r2, [r4, r2]
 8005a62:	2a03      	cmp	r2, #3
 8005a64:	d1bf      	bne.n	80059e6 <USBD_LL_DataInStage+0x40>
    pdev->pClass->DataIn(pdev, epnum);
 8005a66:	0029      	movs	r1, r5
 8005a68:	0020      	movs	r0, r4
 8005a6a:	4798      	blx	r3
 8005a6c:	e7ba      	b.n	80059e4 <USBD_LL_DataInStage+0x3e>

08005a6e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a6e:	2200      	movs	r2, #0
{
 8005a70:	b570      	push	{r4, r5, r6, lr}
 8005a72:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a74:	0011      	movs	r1, r2
 8005a76:	2340      	movs	r3, #64	@ 0x40
 8005a78:	f000 fc93 	bl	80063a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a7c:	0023      	movs	r3, r4
 8005a7e:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a80:	2640      	movs	r6, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a82:	33fc      	adds	r3, #252	@ 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a84:	2180      	movs	r1, #128	@ 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a86:	65dd      	str	r5, [r3, #92]	@ 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a88:	669e      	str	r6, [r3, #104]	@ 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	0033      	movs	r3, r6
 8005a8e:	0020      	movs	r0, r4
 8005a90:	f000 fc87 	bl	80063a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a94:	23a7      	movs	r3, #167	@ 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a96:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a98:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a9a:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a9c:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a9e:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005aa0:	3b08      	subs	r3, #8
 8005aa2:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 8005aa4:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 8005aa6:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005aa8:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8005aaa:	3314      	adds	r3, #20
 8005aac:	58e3      	ldr	r3, [r4, r3]
 8005aae:	428b      	cmp	r3, r1
 8005ab0:	d005      	beq.n	8005abe <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ab2:	23ad      	movs	r3, #173	@ 0xad
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	58e3      	ldr	r3, [r4, r3]
 8005ab8:	0020      	movs	r0, r4
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005abe:	2000      	movs	r0, #0
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}

08005ac2 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005ac2:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	4770      	bx	lr

08005ac8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005ac8:	23a7      	movs	r3, #167	@ 0xa7
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	5cc1      	ldrb	r1, [r0, r3]
 8005ace:	4a03      	ldr	r2, [pc, #12]	@ (8005adc <USBD_LL_Suspend+0x14>)
 8005ad0:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	4770      	bx	lr
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	0000029d 	.word	0x0000029d

08005ae0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ae0:	23a7      	movs	r3, #167	@ 0xa7
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	5cc2      	ldrb	r2, [r0, r3]
 8005ae6:	2a04      	cmp	r2, #4
 8005ae8:	d102      	bne.n	8005af0 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005aea:	4a02      	ldr	r2, [pc, #8]	@ (8005af4 <USBD_LL_Resume+0x14>)
 8005aec:	5c82      	ldrb	r2, [r0, r2]
 8005aee:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8005af0:	2000      	movs	r0, #0
 8005af2:	4770      	bx	lr
 8005af4:	0000029d 	.word	0x0000029d

08005af8 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af8:	23a7      	movs	r3, #167	@ 0xa7
{
 8005afa:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	5cc3      	ldrb	r3, [r0, r3]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d106      	bne.n	8005b12 <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8005b04:	23ad      	movs	r3, #173	@ 0xad
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	58c3      	ldr	r3, [r0, r3]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d000      	beq.n	8005b12 <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8005b10:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005b12:	2000      	movs	r0, #0
 8005b14:	bd10      	pop	{r4, pc}

08005b16 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8005b16:	b510      	push	{r4, lr}
 8005b18:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005b1a:	2180      	movs	r1, #128	@ 0x80
 8005b1c:	f000 fc56 	bl	80063cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005b20:	2100      	movs	r1, #0
 8005b22:	0020      	movs	r0, r4
 8005b24:	f000 fc52 	bl	80063cc <USBD_LL_StallEP>
}
 8005b28:	bd10      	pop	{r4, pc}
	...

08005b2c <USBD_StdDevReq>:
{
 8005b2c:	2260      	movs	r2, #96	@ 0x60
 8005b2e:	780b      	ldrb	r3, [r1, #0]
 8005b30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b32:	4013      	ands	r3, r2
 8005b34:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b36:	0019      	movs	r1, r3
 8005b38:	1892      	adds	r2, r2, r2
 8005b3a:	3920      	subs	r1, #32
{
 8005b3c:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b3e:	4211      	tst	r1, r2
 8005b40:	d012      	beq.n	8005b68 <USBD_StdDevReq+0x3c>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d000      	beq.n	8005b48 <USBD_StdDevReq+0x1c>
 8005b46:	e096      	b.n	8005c76 <USBD_StdDevReq+0x14a>
      switch (req->bRequest)
 8005b48:	7868      	ldrb	r0, [r5, #1]
 8005b4a:	2809      	cmp	r0, #9
 8005b4c:	d900      	bls.n	8005b50 <USBD_StdDevReq+0x24>
 8005b4e:	e092      	b.n	8005c76 <USBD_StdDevReq+0x14a>
 8005b50:	f7fa fb00 	bl	8000154 <__gnu_thumb1_case_uhi>
 8005b54:	010d00f0 	.word	0x010d00f0
 8005b58:	01050091 	.word	0x01050091
 8005b5c:	00830091 	.word	0x00830091
 8005b60:	00910012 	.word	0x00910012
 8005b64:	00a400da 	.word	0x00a400da
      pdev->pClass->Setup(pdev, req);
 8005b68:	23ad      	movs	r3, #173	@ 0xad
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	58c3      	ldr	r3, [r0, r3]
 8005b6e:	0029      	movs	r1, r5
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	4798      	blx	r3
}
 8005b74:	2000      	movs	r0, #0
 8005b76:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	466a      	mov	r2, sp
 8005b7c:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 8005b7e:	886b      	ldrh	r3, [r5, #2]
 8005b80:	0a18      	lsrs	r0, r3, #8
 8005b82:	3801      	subs	r0, #1
 8005b84:	2806      	cmp	r0, #6
 8005b86:	d876      	bhi.n	8005c76 <USBD_StdDevReq+0x14a>
 8005b88:	f7fa fad0 	bl	800012c <__gnu_thumb1_case_uqi>
 8005b8c:	75261704 	.word	0x75261704
 8005b90:	4075      	.short	0x4075
 8005b92:	4b          	.byte	0x4b
 8005b93:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b94:	23ac      	movs	r3, #172	@ 0xac
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	58e3      	ldr	r3, [r4, r3]
 8005b9a:	7c20      	ldrb	r0, [r4, #16]
 8005b9c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b9e:	466a      	mov	r2, sp
 8005ba0:	1d91      	adds	r1, r2, #6
 8005ba2:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005ba4:	466b      	mov	r3, sp
 8005ba6:	88d9      	ldrh	r1, [r3, #6]
 8005ba8:	88ea      	ldrh	r2, [r5, #6]
 8005baa:	2900      	cmp	r1, #0
 8005bac:	d050      	beq.n	8005c50 <USBD_StdDevReq+0x124>
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	d143      	bne.n	8005c3a <USBD_StdDevReq+0x10e>
        USBD_CtlSendStatus(pdev);
 8005bb2:	0020      	movs	r0, r4
 8005bb4:	f000 fa13 	bl	8005fde <USBD_CtlSendStatus>
 8005bb8:	e7dc      	b.n	8005b74 <USBD_StdDevReq+0x48>
      pdev->pClass->Setup(pdev, req);
 8005bba:	23ad      	movs	r3, #173	@ 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bbc:	7c22      	ldrb	r2, [r4, #16]
      pdev->pClass->Setup(pdev, req);
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bc2:	2a00      	cmp	r2, #0
 8005bc4:	d106      	bne.n	8005bd4 <USBD_StdDevReq+0xa8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bc8:	466a      	mov	r2, sp
 8005bca:	1d90      	adds	r0, r2, #6
 8005bcc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bce:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bd0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005bd2:	e7e7      	b.n	8005ba4 <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd6:	e7f7      	b.n	8005bc8 <USBD_StdDevReq+0x9c>
      switch ((uint8_t)(req->wValue))
 8005bd8:	b2d8      	uxtb	r0, r3
 8005bda:	2805      	cmp	r0, #5
 8005bdc:	d84b      	bhi.n	8005c76 <USBD_StdDevReq+0x14a>
 8005bde:	23ac      	movs	r3, #172	@ 0xac
 8005be0:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005be2:	58e3      	ldr	r3, [r4, r3]
 8005be4:	f7fa faa2 	bl	800012c <__gnu_thumb1_case_uqi>
 8005be8:	0c0a0803 	.word	0x0c0a0803
 8005bec:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d040      	beq.n	8005c76 <USBD_StdDevReq+0x14a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005bf4:	7c20      	ldrb	r0, [r4, #16]
 8005bf6:	e7d2      	b.n	8005b9e <USBD_StdDevReq+0x72>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	e7f9      	b.n	8005bf0 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	e7f7      	b.n	8005bf0 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	e7f5      	b.n	8005bf0 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	e7f3      	b.n	8005bf0 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	e7f1      	b.n	8005bf0 <USBD_StdDevReq+0xc4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c0c:	7c23      	ldrb	r3, [r4, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d131      	bne.n	8005c76 <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c12:	23ad      	movs	r3, #173	@ 0xad
 8005c14:	466a      	mov	r2, sp
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	58e3      	ldr	r3, [r4, r3]
 8005c1a:	1d90      	adds	r0, r2, #6
 8005c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c1e:	4798      	blx	r3
  if (err != 0U)
 8005c20:	e7c0      	b.n	8005ba4 <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c22:	7c23      	ldrb	r3, [r4, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d126      	bne.n	8005c76 <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c28:	23ad      	movs	r3, #173	@ 0xad
 8005c2a:	466a      	mov	r2, sp
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	58e3      	ldr	r3, [r4, r3]
 8005c30:	1d90      	adds	r0, r2, #6
 8005c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c34:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c36:	2307      	movs	r3, #7
 8005c38:	e7ca      	b.n	8005bd0 <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 8005c3a:	1c0b      	adds	r3, r1, #0
 8005c3c:	4291      	cmp	r1, r2
 8005c3e:	d900      	bls.n	8005c42 <USBD_StdDevReq+0x116>
 8005c40:	1c13      	adds	r3, r2, #0
 8005c42:	4669      	mov	r1, sp
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c48:	0001      	movs	r1, r0
 8005c4a:	0020      	movs	r0, r4
 8005c4c:	f000 f999 	bl	8005f82 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005c50:	88eb      	ldrh	r3, [r5, #6]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d000      	beq.n	8005c58 <USBD_StdDevReq+0x12c>
 8005c56:	e78d      	b.n	8005b74 <USBD_StdDevReq+0x48>
 8005c58:	e7ab      	b.n	8005bb2 <USBD_StdDevReq+0x86>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c5a:	88ab      	ldrh	r3, [r5, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <USBD_StdDevReq+0x14a>
 8005c60:	88eb      	ldrh	r3, [r5, #6]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d107      	bne.n	8005c76 <USBD_StdDevReq+0x14a>
 8005c66:	886e      	ldrh	r6, [r5, #2]
 8005c68:	2e7f      	cmp	r6, #127	@ 0x7f
 8005c6a:	d804      	bhi.n	8005c76 <USBD_StdDevReq+0x14a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6c:	25a7      	movs	r5, #167	@ 0xa7
 8005c6e:	00ad      	lsls	r5, r5, #2
 8005c70:	5d63      	ldrb	r3, [r4, r5]
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d103      	bne.n	8005c7e <USBD_StdDevReq+0x152>
        USBD_CtlError(pdev, req);
 8005c76:	0020      	movs	r0, r4
 8005c78:	f7ff ff4d 	bl	8005b16 <USBD_CtlError.constprop.0>
        break;
 8005c7c:	e77a      	b.n	8005b74 <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 8005c7e:	4b44      	ldr	r3, [pc, #272]	@ (8005d90 <USBD_StdDevReq+0x264>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c80:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8005c82:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c84:	0020      	movs	r0, r4
 8005c86:	f000 fbc6 	bl	8006416 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005c8a:	0020      	movs	r0, r4
 8005c8c:	f000 f9a7 	bl	8005fde <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c90:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8005c92:	2e00      	cmp	r6, #0
 8005c94:	d100      	bne.n	8005c98 <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c96:	2301      	movs	r3, #1
 8005c98:	5563      	strb	r3, [r4, r5]
 8005c9a:	e76b      	b.n	8005b74 <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 8005c9c:	78a9      	ldrb	r1, [r5, #2]
 8005c9e:	4d3d      	ldr	r5, [pc, #244]	@ (8005d94 <USBD_StdDevReq+0x268>)
 8005ca0:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ca2:	2901      	cmp	r1, #1
 8005ca4:	d8e7      	bhi.n	8005c76 <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 8005ca6:	23a7      	movs	r3, #167	@ 0xa7
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	5ce2      	ldrb	r2, [r4, r3]
 8005cac:	2a02      	cmp	r2, #2
 8005cae:	d009      	beq.n	8005cc4 <USBD_StdDevReq+0x198>
 8005cb0:	2a03      	cmp	r2, #3
 8005cb2:	d015      	beq.n	8005ce0 <USBD_StdDevReq+0x1b4>
        USBD_CtlError(pdev, req);
 8005cb4:	0020      	movs	r0, r4
 8005cb6:	f7ff ff2e 	bl	8005b16 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005cba:	0020      	movs	r0, r4
 8005cbc:	7829      	ldrb	r1, [r5, #0]
 8005cbe:	f7ff fdf5 	bl	80058ac <USBD_ClrClassConfig>
        break;
 8005cc2:	e757      	b.n	8005b74 <USBD_StdDevReq+0x48>
        if (cfgidx)
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	d100      	bne.n	8005cca <USBD_StdDevReq+0x19e>
 8005cc8:	e773      	b.n	8005bb2 <USBD_StdDevReq+0x86>
          pdev->dev_config = cfgidx;
 8005cca:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ccc:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 8005cce:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005cd0:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005cd2:	0020      	movs	r0, r4
 8005cd4:	f7ff fddc 	bl	8005890 <USBD_SetClassConfig>
 8005cd8:	2802      	cmp	r0, #2
 8005cda:	d000      	beq.n	8005cde <USBD_StdDevReq+0x1b2>
 8005cdc:	e769      	b.n	8005bb2 <USBD_StdDevReq+0x86>
 8005cde:	e7ca      	b.n	8005c76 <USBD_StdDevReq+0x14a>
        if (cfgidx == 0U)
 8005ce0:	2900      	cmp	r1, #0
 8005ce2:	d106      	bne.n	8005cf2 <USBD_StdDevReq+0x1c6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ce4:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8005ce6:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ce8:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8005cea:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005cec:	f7ff fdde 	bl	80058ac <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005cf0:	e75f      	b.n	8005bb2 <USBD_StdDevReq+0x86>
        else if (cfgidx != pdev->dev_config)
 8005cf2:	6861      	ldr	r1, [r4, #4]
 8005cf4:	2901      	cmp	r1, #1
 8005cf6:	d100      	bne.n	8005cfa <USBD_StdDevReq+0x1ce>
 8005cf8:	e75b      	b.n	8005bb2 <USBD_StdDevReq+0x86>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cfa:	b2c9      	uxtb	r1, r1
 8005cfc:	0020      	movs	r0, r4
 8005cfe:	f7ff fdd5 	bl	80058ac <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005d02:	7829      	ldrb	r1, [r5, #0]
 8005d04:	6061      	str	r1, [r4, #4]
 8005d06:	e7e4      	b.n	8005cd2 <USBD_StdDevReq+0x1a6>
  if (req->wLength != 1U)
 8005d08:	88ea      	ldrh	r2, [r5, #6]
 8005d0a:	2a01      	cmp	r2, #1
 8005d0c:	d1b3      	bne.n	8005c76 <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 8005d0e:	23a7      	movs	r3, #167	@ 0xa7
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	5ce3      	ldrb	r3, [r4, r3]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d806      	bhi.n	8005d26 <USBD_StdDevReq+0x1fa>
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0ac      	beq.n	8005c76 <USBD_StdDevReq+0x14a>
        pdev->dev_default_config = 0U;
 8005d1c:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005d1e:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8005d20:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005d22:	3108      	adds	r1, #8
 8005d24:	e002      	b.n	8005d2c <USBD_StdDevReq+0x200>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005d26:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d1a4      	bne.n	8005c76 <USBD_StdDevReq+0x14a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005d2c:	0020      	movs	r0, r4
 8005d2e:	f000 f928 	bl	8005f82 <USBD_CtlSendData>
      break;
 8005d32:	e71f      	b.n	8005b74 <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8005d34:	23a7      	movs	r3, #167	@ 0xa7
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	5ce3      	ldrb	r3, [r4, r3]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d89a      	bhi.n	8005c76 <USBD_StdDevReq+0x14a>
      if (req->wLength != 0x2U)
 8005d40:	88eb      	ldrh	r3, [r5, #6]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d197      	bne.n	8005c76 <USBD_StdDevReq+0x14a>
      if (pdev->dev_remote_wakeup)
 8005d46:	23a9      	movs	r3, #169	@ 0xa9
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	58e2      	ldr	r2, [r4, r3]
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d4c:	2301      	movs	r3, #1
      if (pdev->dev_remote_wakeup)
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	d000      	beq.n	8005d54 <USBD_StdDevReq+0x228>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d52:	3302      	adds	r3, #2
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005d54:	0021      	movs	r1, r4
 8005d56:	2202      	movs	r2, #2
 8005d58:	60e3      	str	r3, [r4, #12]
 8005d5a:	310c      	adds	r1, #12
 8005d5c:	e7e6      	b.n	8005d2c <USBD_StdDevReq+0x200>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d5e:	886b      	ldrh	r3, [r5, #2]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d000      	beq.n	8005d66 <USBD_StdDevReq+0x23a>
 8005d64:	e706      	b.n	8005b74 <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 8005d66:	22a9      	movs	r2, #169	@ 0xa9
 8005d68:	0092      	lsls	r2, r2, #2
 8005d6a:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 8005d6c:	e721      	b.n	8005bb2 <USBD_StdDevReq+0x86>
  switch (pdev->dev_state)
 8005d6e:	23a7      	movs	r3, #167	@ 0xa7
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	5ce3      	ldrb	r3, [r4, r3]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d900      	bls.n	8005d7c <USBD_StdDevReq+0x250>
 8005d7a:	e77c      	b.n	8005c76 <USBD_StdDevReq+0x14a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d7c:	886b      	ldrh	r3, [r5, #2]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d000      	beq.n	8005d84 <USBD_StdDevReq+0x258>
 8005d82:	e6f7      	b.n	8005b74 <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8005d84:	23a9      	movs	r3, #169	@ 0xa9
 8005d86:	2200      	movs	r2, #0
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	50e2      	str	r2, [r4, r3]
 8005d8c:	e711      	b.n	8005bb2 <USBD_StdDevReq+0x86>
 8005d8e:	46c0      	nop			@ (mov r8, r8)
 8005d90:	0000029e 	.word	0x0000029e
 8005d94:	20000838 	.word	0x20000838

08005d98 <USBD_StdItfReq>:
{
 8005d98:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d9a:	780a      	ldrb	r2, [r1, #0]
{
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4013      	ands	r3, r2
 8005da0:	0004      	movs	r4, r0
 8005da2:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005da4:	0652      	lsls	r2, r2, #25
 8005da6:	d501      	bpl.n	8005dac <USBD_StdItfReq+0x14>
 8005da8:	2b40      	cmp	r3, #64	@ 0x40
 8005daa:	d119      	bne.n	8005de0 <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 8005dac:	23a7      	movs	r3, #167	@ 0xa7
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	5ce3      	ldrb	r3, [r4, r3]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d813      	bhi.n	8005de0 <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005db8:	792b      	ldrb	r3, [r5, #4]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d810      	bhi.n	8005de0 <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dbe:	23ad      	movs	r3, #173	@ 0xad
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	58e3      	ldr	r3, [r4, r3]
 8005dc4:	0029      	movs	r1, r5
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	0020      	movs	r0, r4
 8005dca:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dcc:	88eb      	ldrh	r3, [r5, #6]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <USBD_StdItfReq+0x44>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d102      	bne.n	8005ddc <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 8005dd6:	0020      	movs	r0, r4
 8005dd8:	f000 f901 	bl	8005fde <USBD_CtlSendStatus>
}
 8005ddc:	2000      	movs	r0, #0
 8005dde:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8005de0:	0020      	movs	r0, r4
 8005de2:	f7ff fe98 	bl	8005b16 <USBD_CtlError.constprop.0>
          break;
 8005de6:	e7f9      	b.n	8005ddc <USBD_StdItfReq+0x44>

08005de8 <USBD_StdEPReq>:
{
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	780a      	ldrb	r2, [r1, #0]
 8005dec:	0004      	movs	r4, r0
 8005dee:	000b      	movs	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8005df0:	8888      	ldrh	r0, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005df2:	2160      	movs	r1, #96	@ 0x60
 8005df4:	400a      	ands	r2, r1
 8005df6:	0015      	movs	r5, r2
 8005df8:	1849      	adds	r1, r1, r1
 8005dfa:	3d20      	subs	r5, #32
 8005dfc:	420d      	tst	r5, r1
 8005dfe:	d026      	beq.n	8005e4e <USBD_StdEPReq+0x66>
 8005e00:	2a00      	cmp	r2, #0
 8005e02:	d134      	bne.n	8005e6e <USBD_StdEPReq+0x86>
      switch (req->bRequest)
 8005e04:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005e06:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 8005e08:	2a01      	cmp	r2, #1
 8005e0a:	d043      	beq.n	8005e94 <USBD_StdEPReq+0xac>
 8005e0c:	2a03      	cmp	r2, #3
 8005e0e:	d027      	beq.n	8005e60 <USBD_StdEPReq+0x78>
 8005e10:	2a00      	cmp	r2, #0
 8005e12:	d12c      	bne.n	8005e6e <USBD_StdEPReq+0x86>
          switch (pdev->dev_state)
 8005e14:	23a7      	movs	r3, #167	@ 0xa7
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	5ce3      	ldrb	r3, [r4, r3]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d054      	beq.n	8005ec8 <USBD_StdEPReq+0xe0>
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d125      	bne.n	8005e6e <USBD_StdEPReq+0x86>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e22:	230f      	movs	r3, #15
 8005e24:	2214      	movs	r2, #20
 8005e26:	400b      	ands	r3, r1
 8005e28:	4353      	muls	r3, r2
 8005e2a:	18e3      	adds	r3, r4, r3
              if ((ep_addr & 0x80U) == 0x80U)
 8005e2c:	0600      	lsls	r0, r0, #24
 8005e2e:	d55b      	bpl.n	8005ee8 <USBD_StdEPReq+0x100>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01b      	beq.n	8005e6e <USBD_StdEPReq+0x86>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e36:	237f      	movs	r3, #127	@ 0x7f
 8005e38:	400b      	ands	r3, r1
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	4353      	muls	r3, r2
 8005e3e:	18e5      	adds	r5, r4, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e40:	064b      	lsls	r3, r1, #25
 8005e42:	d15c      	bne.n	8005efe <USBD_StdEPReq+0x116>
{
 8005e44:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e46:	2202      	movs	r2, #2
 8005e48:	0029      	movs	r1, r5
                pep->status = 0x0000U;
 8005e4a:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e4c:	e048      	b.n	8005ee0 <USBD_StdEPReq+0xf8>
      pdev->pClass->Setup(pdev, req);
 8005e4e:	22ad      	movs	r2, #173	@ 0xad
 8005e50:	0092      	lsls	r2, r2, #2
 8005e52:	58a2      	ldr	r2, [r4, r2]
 8005e54:	0019      	movs	r1, r3
 8005e56:	0020      	movs	r0, r4
 8005e58:	6892      	ldr	r2, [r2, #8]
 8005e5a:	4790      	blx	r2
}
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8005e60:	22a7      	movs	r2, #167	@ 0xa7
 8005e62:	0092      	lsls	r2, r2, #2
 8005e64:	5ca2      	ldrb	r2, [r4, r2]
 8005e66:	2a02      	cmp	r2, #2
 8005e68:	d024      	beq.n	8005eb4 <USBD_StdEPReq+0xcc>
 8005e6a:	2a03      	cmp	r2, #3
 8005e6c:	d003      	beq.n	8005e76 <USBD_StdEPReq+0x8e>
              USBD_CtlError(pdev, req);
 8005e6e:	0020      	movs	r0, r4
 8005e70:	f7ff fe51 	bl	8005b16 <USBD_CtlError.constprop.0>
              break;
 8005e74:	e7f2      	b.n	8005e5c <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e76:	885a      	ldrh	r2, [r3, #2]
 8005e78:	2a00      	cmp	r2, #0
 8005e7a:	d107      	bne.n	8005e8c <USBD_StdEPReq+0xa4>
                if ((ep_addr != 0x00U) &&
 8005e7c:	064a      	lsls	r2, r1, #25
 8005e7e:	d005      	beq.n	8005e8c <USBD_StdEPReq+0xa4>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e80:	88db      	ldrh	r3, [r3, #6]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d102      	bne.n	8005e8c <USBD_StdEPReq+0xa4>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005e86:	0020      	movs	r0, r4
 8005e88:	f000 faa0 	bl	80063cc <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005e8c:	0020      	movs	r0, r4
 8005e8e:	f000 f8a6 	bl	8005fde <USBD_CtlSendStatus>
              break;
 8005e92:	e7e3      	b.n	8005e5c <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 8005e94:	22a7      	movs	r2, #167	@ 0xa7
 8005e96:	0092      	lsls	r2, r2, #2
 8005e98:	5ca2      	ldrb	r2, [r4, r2]
 8005e9a:	2a02      	cmp	r2, #2
 8005e9c:	d00a      	beq.n	8005eb4 <USBD_StdEPReq+0xcc>
 8005e9e:	2a03      	cmp	r2, #3
 8005ea0:	d1e5      	bne.n	8005e6e <USBD_StdEPReq+0x86>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ea2:	885b      	ldrh	r3, [r3, #2]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1d9      	bne.n	8005e5c <USBD_StdEPReq+0x74>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ea8:	064b      	lsls	r3, r1, #25
 8005eaa:	d0ef      	beq.n	8005e8c <USBD_StdEPReq+0xa4>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005eac:	0020      	movs	r0, r4
 8005eae:	f000 fa96 	bl	80063de <USBD_LL_ClearStallEP>
 8005eb2:	e7eb      	b.n	8005e8c <USBD_StdEPReq+0xa4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005eb4:	064b      	lsls	r3, r1, #25
 8005eb6:	d0da      	beq.n	8005e6e <USBD_StdEPReq+0x86>
                USBD_LL_StallEP(pdev, ep_addr);
 8005eb8:	0020      	movs	r0, r4
 8005eba:	f000 fa87 	bl	80063cc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005ebe:	2180      	movs	r1, #128	@ 0x80
 8005ec0:	0020      	movs	r0, r4
 8005ec2:	f000 fa83 	bl	80063cc <USBD_LL_StallEP>
 8005ec6:	e7c9      	b.n	8005e5c <USBD_StdEPReq+0x74>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ec8:	0649      	lsls	r1, r1, #25
 8005eca:	d1d0      	bne.n	8005e6e <USBD_StdEPReq+0x86>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ecc:	0021      	movs	r1, r4
 8005ece:	3155      	adds	r1, #85	@ 0x55
 8005ed0:	31ff      	adds	r1, #255	@ 0xff
 8005ed2:	0600      	lsls	r0, r0, #24
 8005ed4:	d501      	bpl.n	8005eda <USBD_StdEPReq+0xf2>
 8005ed6:	3941      	subs	r1, #65	@ 0x41
 8005ed8:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 8005eda:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005edc:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8005ede:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ee0:	0020      	movs	r0, r4
 8005ee2:	f000 f84e 	bl	8005f82 <USBD_CtlSendData>
              break;
 8005ee6:	e7b9      	b.n	8005e5c <USBD_StdEPReq+0x74>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ee8:	33fc      	adds	r3, #252	@ 0xfc
 8005eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0be      	beq.n	8005e6e <USBD_StdEPReq+0x86>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ef0:	237f      	movs	r3, #127	@ 0x7f
 8005ef2:	400b      	ands	r3, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ef4:	435a      	muls	r2, r3
 8005ef6:	3255      	adds	r2, #85	@ 0x55
 8005ef8:	32ff      	adds	r2, #255	@ 0xff
 8005efa:	18a5      	adds	r5, r4, r2
 8005efc:	e7a0      	b.n	8005e40 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005efe:	0020      	movs	r0, r4
 8005f00:	f000 fa76 	bl	80063f0 <USBD_LL_IsStallEP>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d09d      	beq.n	8005e44 <USBD_StdEPReq+0x5c>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e79c      	b.n	8005e46 <USBD_StdEPReq+0x5e>

08005f0c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005f0c:	780b      	ldrb	r3, [r1, #0]
 8005f0e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005f10:	784b      	ldrb	r3, [r1, #1]
 8005f12:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005f14:	78cb      	ldrb	r3, [r1, #3]
 8005f16:	788a      	ldrb	r2, [r1, #2]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005f1e:	794b      	ldrb	r3, [r1, #5]
 8005f20:	790a      	ldrb	r2, [r1, #4]
 8005f22:	021b      	lsls	r3, r3, #8
 8005f24:	4313      	orrs	r3, r2
 8005f26:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005f28:	79cb      	ldrb	r3, [r1, #7]
 8005f2a:	798a      	ldrb	r2, [r1, #6]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	80c3      	strh	r3, [r0, #6]
}
 8005f32:	4770      	bx	lr

08005f34 <USBD_CtlError>:
{
 8005f34:	b510      	push	{r4, lr}
 8005f36:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005f38:	2180      	movs	r1, #128	@ 0x80
 8005f3a:	f000 fa47 	bl	80063cc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	0020      	movs	r0, r4
 8005f42:	f000 fa43 	bl	80063cc <USBD_LL_StallEP>
}
 8005f46:	bd10      	pop	{r4, pc}

08005f48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	0004      	movs	r4, r0
 8005f4c:	000d      	movs	r5, r1
 8005f4e:	0016      	movs	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d00d      	beq.n	8005f70 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005f54:	f7fa f8e2 	bl	800011c <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005f58:	b2c3      	uxtb	r3, r0
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005f60:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005f62:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8005f64:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005f66:	706b      	strb	r3, [r5, #1]
 8005f68:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8005f6a:	7821      	ldrb	r1, [r4, #0]
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	d100      	bne.n	8005f72 <USBD_GetString+0x2a>
}
 8005f70:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	54e9      	strb	r1, [r5, r3]
 8005f76:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005f78:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8005f7a:	3401      	adds	r4, #1
      unicode[idx++] =  0U;
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	54a8      	strb	r0, [r5, r2]
 8005f80:	e7f3      	b.n	8005f6a <USBD_GetString+0x22>

08005f82 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005f82:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f84:	22a5      	movs	r2, #165	@ 0xa5
{
 8005f86:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f88:	2402      	movs	r4, #2
 8005f8a:	0092      	lsls	r2, r2, #2
 8005f8c:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f8e:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8005f90:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f92:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8005f94:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f96:	f000 fa47 	bl	8006428 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	bd10      	pop	{r4, pc}

08005f9e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005f9e:	b510      	push	{r4, lr}
 8005fa0:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fa2:	000a      	movs	r2, r1
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	f000 fa3f 	bl	8006428 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005faa:	2000      	movs	r0, #0
 8005fac:	bd10      	pop	{r4, pc}

08005fae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005fae:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005fb0:	22a5      	movs	r2, #165	@ 0xa5
{
 8005fb2:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005fb4:	2403      	movs	r4, #3
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8005fba:	0002      	movs	r2, r0
 8005fbc:	32fc      	adds	r2, #252	@ 0xfc
 8005fbe:	6613      	str	r3, [r2, #96]	@ 0x60
  pdev->ep_out[0].rem_length   = len;
 8005fc0:	6653      	str	r3, [r2, #100]	@ 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fc2:	000a      	movs	r2, r1
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	f000 fa38 	bl	800643a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005fca:	2000      	movs	r0, #0
 8005fcc:	bd10      	pop	{r4, pc}

08005fce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005fce:	b510      	push	{r4, lr}
 8005fd0:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fd2:	000a      	movs	r2, r1
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	f000 fa30 	bl	800643a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005fda:	2000      	movs	r0, #0
 8005fdc:	bd10      	pop	{r4, pc}

08005fde <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005fde:	23a5      	movs	r3, #165	@ 0xa5
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	009b      	lsls	r3, r3, #2
{
 8005fe4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005fe6:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	001a      	movs	r2, r3
 8005fec:	0019      	movs	r1, r3
 8005fee:	f000 fa1b 	bl	8006428 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	bd10      	pop	{r4, pc}

08005ff6 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ff6:	23a5      	movs	r3, #165	@ 0xa5
 8005ff8:	2205      	movs	r2, #5
 8005ffa:	009b      	lsls	r3, r3, #2
{
 8005ffc:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ffe:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006000:	2300      	movs	r3, #0
 8006002:	001a      	movs	r2, r3
 8006004:	0019      	movs	r1, r3
 8006006:	f000 fa18 	bl	800643a <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800600a:	2000      	movs	r0, #0
 800600c:	bd10      	pop	{r4, pc}
	...

08006010 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006010:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006012:	4c11      	ldr	r4, [pc, #68]	@ (8006058 <MX_USB_DEVICE_Init+0x48>)
 8006014:	2200      	movs	r2, #0
 8006016:	0020      	movs	r0, r4
 8006018:	4910      	ldr	r1, [pc, #64]	@ (800605c <MX_USB_DEVICE_Init+0x4c>)
 800601a:	f7ff fc11 	bl	8005840 <USBD_Init>
 800601e:	2800      	cmp	r0, #0
 8006020:	d001      	beq.n	8006026 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8006022:	f7fa ff15 	bl	8000e50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006026:	0020      	movs	r0, r4
 8006028:	490d      	ldr	r1, [pc, #52]	@ (8006060 <MX_USB_DEVICE_Init+0x50>)
 800602a:	f7ff fc23 	bl	8005874 <USBD_RegisterClass>
 800602e:	2800      	cmp	r0, #0
 8006030:	d001      	beq.n	8006036 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8006032:	f7fa ff0d 	bl	8000e50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006036:	0020      	movs	r0, r4
 8006038:	490a      	ldr	r1, [pc, #40]	@ (8006064 <MX_USB_DEVICE_Init+0x54>)
 800603a:	f7ff fbb3 	bl	80057a4 <USBD_CDC_RegisterInterface>
 800603e:	2800      	cmp	r0, #0
 8006040:	d001      	beq.n	8006046 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8006042:	f7fa ff05 	bl	8000e50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006046:	0020      	movs	r0, r4
 8006048:	f7ff fc1d 	bl	8005886 <USBD_Start>
 800604c:	2800      	cmp	r0, #0
 800604e:	d001      	beq.n	8006054 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8006050:	f7fa fefe 	bl	8000e50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006054:	bd10      	pop	{r4, pc}
 8006056:	46c0      	nop			@ (mov r8, r8)
 8006058:	2000083c 	.word	0x2000083c
 800605c:	20000174 	.word	0x20000174
 8006060:	200000ec 	.word	0x200000ec
 8006064:	20000130 	.word	0x20000130

08006068 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
  /* USER CODE END 4 */
}
 8006068:	2000      	movs	r0, #0
 800606a:	4770      	bx	lr

0800606c <CDC_Control_FS>:
			break;
	}

	return (USBD_OK);
  /* USER CODE END 5 */
}
 800606c:	2000      	movs	r0, #0
 800606e:	4770      	bx	lr

08006070 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006072:	000f      	movs	r7, r1
 8006074:	0004      	movs	r4, r0
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006076:	4d0f      	ldr	r5, [pc, #60]	@ (80060b4 <CDC_Receive_FS+0x44>)
 8006078:	0001      	movs	r1, r0
 800607a:	0028      	movs	r0, r5
 800607c:	f7ff fba6 	bl	80057cc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006080:	0028      	movs	r0, r5
 8006082:	f7ff fbc6 	bl	8005812 <USBD_CDC_ReceivePacket>

	memset(buffer, '\0', 64);  // clear the buffer
 8006086:	4e0c      	ldr	r6, [pc, #48]	@ (80060b8 <CDC_Receive_FS+0x48>)
 8006088:	2240      	movs	r2, #64	@ 0x40
 800608a:	0030      	movs	r0, r6
 800608c:	2100      	movs	r1, #0
 800608e:	f000 fbb7 	bl	8006800 <memset>
	uint8_t len = (uint8_t) *Len;
	memcpy(buffer, Buf, len);  // copy the data to the buffer
 8006092:	683d      	ldr	r5, [r7, #0]
 8006094:	0021      	movs	r1, r4
 8006096:	b2ed      	uxtb	r5, r5
 8006098:	002a      	movs	r2, r5
 800609a:	0030      	movs	r0, r6
 800609c:	f000 fc9b 	bl	80069d6 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 80060a0:	002a      	movs	r2, r5
 80060a2:	2100      	movs	r1, #0
 80060a4:	0020      	movs	r0, r4
 80060a6:	f000 fbab 	bl	8006800 <memset>
	commandRecieved = TRUE;
 80060aa:	2201      	movs	r2, #1
 80060ac:	4b03      	ldr	r3, [pc, #12]	@ (80060bc <CDC_Receive_FS+0x4c>)

	return (USBD_OK);
  /* USER CODE END 6 */
}
 80060ae:	2000      	movs	r0, #0
	commandRecieved = TRUE;
 80060b0:	701a      	strb	r2, [r3, #0]
}
 80060b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b4:	2000083c 	.word	0x2000083c
 80060b8:	200007ee 	.word	0x200007ee
 80060bc:	2000054e 	.word	0x2000054e

080060c0 <CDC_Init_FS>:
{
 80060c0:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80060c2:	4c06      	ldr	r4, [pc, #24]	@ (80060dc <CDC_Init_FS+0x1c>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	0020      	movs	r0, r4
 80060c8:	4905      	ldr	r1, [pc, #20]	@ (80060e0 <CDC_Init_FS+0x20>)
 80060ca:	f7ff fb74 	bl	80057b6 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80060ce:	0020      	movs	r0, r4
 80060d0:	4904      	ldr	r1, [pc, #16]	@ (80060e4 <CDC_Init_FS+0x24>)
 80060d2:	f7ff fb7b 	bl	80057cc <USBD_CDC_SetRxBuffer>
}
 80060d6:	2000      	movs	r0, #0
 80060d8:	bd10      	pop	{r4, pc}
 80060da:	46c0      	nop			@ (mov r8, r8)
 80060dc:	2000083c 	.word	0x2000083c
 80060e0:	20000b00 	.word	0x20000b00
 80060e4:	20000f00 	.word	0x20000f00

080060e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80060e8:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 80060ea:	21ae      	movs	r1, #174	@ 0xae
{
 80060ec:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 80060ee:	4c08      	ldr	r4, [pc, #32]	@ (8006110 <CDC_Transmit_FS+0x28>)
 80060f0:	0089      	lsls	r1, r1, #2
{
 80060f2:	0003      	movs	r3, r0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 80060f4:	5860      	ldr	r0, [r4, r1]
	if (hcdc->TxState != 0) {
 80060f6:	39a4      	subs	r1, #164	@ 0xa4
 80060f8:	5841      	ldr	r1, [r0, r1]
		return USBD_BUSY;
 80060fa:	2001      	movs	r0, #1
	if (hcdc->TxState != 0) {
 80060fc:	2900      	cmp	r1, #0
 80060fe:	d106      	bne.n	800610e <CDC_Transmit_FS+0x26>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006100:	0019      	movs	r1, r3
 8006102:	0020      	movs	r0, r4
 8006104:	f7ff fb57 	bl	80057b6 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006108:	0020      	movs	r0, r4
 800610a:	f7ff fb66 	bl	80057da <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 800610e:	bd10      	pop	{r4, pc}
 8006110:	2000083c 	.word	0x2000083c

08006114 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006114:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
 8006116:	4801      	ldr	r0, [pc, #4]	@ (800611c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006118:	800b      	strh	r3, [r1, #0]
}
 800611a:	4770      	bx	lr
 800611c:	20000160 	.word	0x20000160

08006120 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006120:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 8006122:	4801      	ldr	r0, [pc, #4]	@ (8006128 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006124:	800b      	strh	r3, [r1, #0]
}
 8006126:	4770      	bx	lr
 8006128:	2000015c 	.word	0x2000015c

0800612c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800612c:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800612e:	2600      	movs	r6, #0
 8006130:	0052      	lsls	r2, r2, #1
 8006132:	188a      	adds	r2, r1, r2
  for (idx = 0; idx < len; idx++)
 8006134:	428a      	cmp	r2, r1
 8006136:	d100      	bne.n	800613a <IntToUnicode+0xe>
  }
}
 8006138:	bd70      	pop	{r4, r5, r6, pc}
    if (((value >> 28)) < 0xA)
 800613a:	0f05      	lsrs	r5, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800613c:	b2ec      	uxtb	r4, r5
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800613e:	0023      	movs	r3, r4
 8006140:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 8006142:	2d09      	cmp	r5, #9
 8006144:	d800      	bhi.n	8006148 <IntToUnicode+0x1c>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006146:	3b07      	subs	r3, #7
 8006148:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 800614a:	704e      	strb	r6, [r1, #1]
    value = value << 4;
 800614c:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 800614e:	3102      	adds	r1, #2
 8006150:	e7f0      	b.n	8006134 <IntToUnicode+0x8>
	...

08006154 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006154:	231a      	movs	r3, #26
{
 8006156:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006158:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800615a:	4b0a      	ldr	r3, [pc, #40]	@ (8006184 <USBD_FS_SerialStrDescriptor+0x30>)
 800615c:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800615e:	4b0a      	ldr	r3, [pc, #40]	@ (8006188 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 += deviceserial2;
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8006164:	2800      	cmp	r0, #0
 8006166:	d00a      	beq.n	800617e <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006168:	4b08      	ldr	r3, [pc, #32]	@ (800618c <USBD_FS_SerialStrDescriptor+0x38>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800616a:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800616c:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800616e:	4908      	ldr	r1, [pc, #32]	@ (8006190 <USBD_FS_SerialStrDescriptor+0x3c>)
 8006170:	f7ff ffdc 	bl	800612c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006174:	2204      	movs	r2, #4
 8006176:	0020      	movs	r0, r4
 8006178:	4906      	ldr	r1, [pc, #24]	@ (8006194 <USBD_FS_SerialStrDescriptor+0x40>)
 800617a:	f7ff ffd7 	bl	800612c <IntToUnicode>
  return (uint8_t *) USBD_StringSerial;
 800617e:	4806      	ldr	r0, [pc, #24]	@ (8006198 <USBD_FS_SerialStrDescriptor+0x44>)
}
 8006180:	bd10      	pop	{r4, pc}
 8006182:	46c0      	nop			@ (mov r8, r8)
 8006184:	1ffff7ac 	.word	0x1ffff7ac
 8006188:	1ffff7b4 	.word	0x1ffff7b4
 800618c:	1ffff7b0 	.word	0x1ffff7b0
 8006190:	20000142 	.word	0x20000142
 8006194:	20000152 	.word	0x20000152
 8006198:	20000140 	.word	0x20000140

0800619c <USBD_FS_ManufacturerStrDescriptor>:
{
 800619c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800619e:	4c04      	ldr	r4, [pc, #16]	@ (80061b0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80061a0:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061a2:	0021      	movs	r1, r4
 80061a4:	4803      	ldr	r0, [pc, #12]	@ (80061b4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80061a6:	f7ff fecf 	bl	8005f48 <USBD_GetString>
}
 80061aa:	0020      	movs	r0, r4
 80061ac:	bd10      	pop	{r4, pc}
 80061ae:	46c0      	nop			@ (mov r8, r8)
 80061b0:	20001300 	.word	0x20001300
 80061b4:	08007baa 	.word	0x08007baa

080061b8 <USBD_FS_ProductStrDescriptor>:
{
 80061b8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061ba:	4c04      	ldr	r4, [pc, #16]	@ (80061cc <USBD_FS_ProductStrDescriptor+0x14>)
{
 80061bc:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061be:	0021      	movs	r1, r4
 80061c0:	4803      	ldr	r0, [pc, #12]	@ (80061d0 <USBD_FS_ProductStrDescriptor+0x18>)
 80061c2:	f7ff fec1 	bl	8005f48 <USBD_GetString>
}
 80061c6:	0020      	movs	r0, r4
 80061c8:	bd10      	pop	{r4, pc}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	20001300 	.word	0x20001300
 80061d0:	08007bbd 	.word	0x08007bbd

080061d4 <USBD_FS_ConfigStrDescriptor>:
{
 80061d4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061d6:	4c04      	ldr	r4, [pc, #16]	@ (80061e8 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80061d8:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061da:	0021      	movs	r1, r4
 80061dc:	4803      	ldr	r0, [pc, #12]	@ (80061ec <USBD_FS_ConfigStrDescriptor+0x18>)
 80061de:	f7ff feb3 	bl	8005f48 <USBD_GetString>
}
 80061e2:	0020      	movs	r0, r4
 80061e4:	bd10      	pop	{r4, pc}
 80061e6:	46c0      	nop			@ (mov r8, r8)
 80061e8:	20001300 	.word	0x20001300
 80061ec:	08007bd3 	.word	0x08007bd3

080061f0 <USBD_FS_InterfaceStrDescriptor>:
{
 80061f0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061f2:	4c04      	ldr	r4, [pc, #16]	@ (8006204 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80061f4:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061f6:	0021      	movs	r1, r4
 80061f8:	4803      	ldr	r0, [pc, #12]	@ (8006208 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80061fa:	f7ff fea5 	bl	8005f48 <USBD_GetString>
}
 80061fe:	0020      	movs	r0, r4
 8006200:	bd10      	pop	{r4, pc}
 8006202:	46c0      	nop			@ (mov r8, r8)
 8006204:	20001300 	.word	0x20001300
 8006208:	08007bde 	.word	0x08007bde

0800620c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800620c:	2800      	cmp	r0, #0
 800620e:	d003      	beq.n	8006218 <USBD_Get_USB_Status+0xc>
 8006210:	3802      	subs	r0, #2
 8006212:	1e43      	subs	r3, r0, #1
 8006214:	4198      	sbcs	r0, r3
 8006216:	3001      	adds	r0, #1
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8006218:	4770      	bx	lr
	...

0800621c <HAL_PCD_MspInit>:
{
 800621c:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800621e:	4b0b      	ldr	r3, [pc, #44]	@ (800624c <HAL_PCD_MspInit+0x30>)
 8006220:	6802      	ldr	r2, [r0, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d111      	bne.n	800624a <HAL_PCD_MspInit+0x2e>
    __HAL_RCC_USB_CLK_ENABLE();
 8006226:	2180      	movs	r1, #128	@ 0x80
 8006228:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <HAL_PCD_MspInit+0x34>)
 800622a:	0409      	lsls	r1, r1, #16
 800622c:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800622e:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 8006230:	430a      	orrs	r2, r1
 8006232:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006234:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	400b      	ands	r3, r1
 800623a:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800623c:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800623e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006240:	f7fc fa36 	bl	80026b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006244:	201f      	movs	r0, #31
 8006246:	f7fc fa5d 	bl	8002704 <HAL_NVIC_EnableIRQ>
}
 800624a:	bd07      	pop	{r0, r1, r2, pc}
 800624c:	40005c00 	.word	0x40005c00
 8006250:	40021000 	.word	0x40021000

08006254 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006254:	23a6      	movs	r3, #166	@ 0xa6
{
 8006256:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	18c1      	adds	r1, r0, r3
 800625c:	3340      	adds	r3, #64	@ 0x40
 800625e:	58c0      	ldr	r0, [r0, r3]
 8006260:	f7ff fb2c 	bl	80058bc <USBD_LL_SetupStage>
}
 8006264:	bd10      	pop	{r4, pc}

08006266 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006266:	2328      	movs	r3, #40	@ 0x28
 8006268:	434b      	muls	r3, r1
 800626a:	18c3      	adds	r3, r0, r3
 800626c:	33fc      	adds	r3, #252	@ 0xfc
 800626e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006270:	23b6      	movs	r3, #182	@ 0xb6
{
 8006272:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	58c0      	ldr	r0, [r0, r3]
 8006278:	f7ff fb52 	bl	8005920 <USBD_LL_DataOutStage>
}
 800627c:	bd10      	pop	{r4, pc}

0800627e <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800627e:	2328      	movs	r3, #40	@ 0x28
 8006280:	434b      	muls	r3, r1
 8006282:	18c3      	adds	r3, r0, r3
 8006284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006286:	23b6      	movs	r3, #182	@ 0xb6
{
 8006288:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	58c0      	ldr	r0, [r0, r3]
 800628e:	f7ff fb8a 	bl	80059a6 <USBD_LL_DataInStage>
}
 8006292:	bd10      	pop	{r4, pc}

08006294 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006294:	23b6      	movs	r3, #182	@ 0xb6
{
 8006296:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	58c0      	ldr	r0, [r0, r3]
 800629c:	f7ff fc2c 	bl	8005af8 <USBD_LL_SOF>
}
 80062a0:	bd10      	pop	{r4, pc}

080062a2 <HAL_PCD_ResetCallback>:
{
 80062a2:	b570      	push	{r4, r5, r6, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80062a4:	7943      	ldrb	r3, [r0, #5]
{
 80062a6:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d001      	beq.n	80062b0 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 80062ac:	f7fa fdd0 	bl	8000e50 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80062b0:	25b6      	movs	r5, #182	@ 0xb6
 80062b2:	00ad      	lsls	r5, r5, #2
 80062b4:	2101      	movs	r1, #1
 80062b6:	5960      	ldr	r0, [r4, r5]
 80062b8:	f7ff fc03 	bl	8005ac2 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80062bc:	5960      	ldr	r0, [r4, r5]
 80062be:	f7ff fbd6 	bl	8005a6e <USBD_LL_Reset>
}
 80062c2:	bd70      	pop	{r4, r5, r6, pc}

080062c4 <HAL_PCD_SuspendCallback>:
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80062c4:	23b6      	movs	r3, #182	@ 0xb6
{
 80062c6:	b510      	push	{r4, lr}
 80062c8:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	58c0      	ldr	r0, [r0, r3]
 80062ce:	f7ff fbfb 	bl	8005ac8 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80062d2:	7a63      	ldrb	r3, [r4, #9]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d004      	beq.n	80062e2 <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80062d8:	2306      	movs	r3, #6
 80062da:	4a02      	ldr	r2, [pc, #8]	@ (80062e4 <HAL_PCD_SuspendCallback+0x20>)
 80062dc:	6911      	ldr	r1, [r2, #16]
 80062de:	430b      	orrs	r3, r1
 80062e0:	6113      	str	r3, [r2, #16]
}
 80062e2:	bd10      	pop	{r4, pc}
 80062e4:	e000ed00 	.word	0xe000ed00

080062e8 <HAL_PCD_ResumeCallback>:
{
 80062e8:	b510      	push	{r4, lr}
  if (hpcd->Init.low_power_enable)
 80062ea:	7a43      	ldrb	r3, [r0, #9]
{
 80062ec:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d006      	beq.n	8006300 <HAL_PCD_ResumeCallback+0x18>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80062f2:	2106      	movs	r1, #6
 80062f4:	4a05      	ldr	r2, [pc, #20]	@ (800630c <HAL_PCD_ResumeCallback+0x24>)
 80062f6:	6913      	ldr	r3, [r2, #16]
 80062f8:	438b      	bics	r3, r1
 80062fa:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 80062fc:	f7fa f966 	bl	80005cc <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006300:	23b6      	movs	r3, #182	@ 0xb6
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	58e0      	ldr	r0, [r4, r3]
 8006306:	f7ff fbeb 	bl	8005ae0 <USBD_LL_Resume>
}
 800630a:	bd10      	pop	{r4, pc}
 800630c:	e000ed00 	.word	0xe000ed00

08006310 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8006310:	23b6      	movs	r3, #182	@ 0xb6
{
 8006312:	b570      	push	{r4, r5, r6, lr}
 8006314:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006316:	481c      	ldr	r0, [pc, #112]	@ (8006388 <USBD_LL_Init+0x78>)
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 800631c:	4b1b      	ldr	r3, [pc, #108]	@ (800638c <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 800631e:	25b0      	movs	r5, #176	@ 0xb0
  hpcd_USB_FS.Instance = USB;
 8006320:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006322:	2382      	movs	r3, #130	@ 0x82
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006328:	2302      	movs	r3, #2
 800632a:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800632c:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 800632e:	00ad      	lsls	r5, r5, #2
 8006330:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006332:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006334:	8143      	strh	r3, [r0, #10]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006336:	f7fc ff1f 	bl	8003178 <HAL_PCD_Init>
 800633a:	2800      	cmp	r0, #0
 800633c:	d001      	beq.n	8006342 <USBD_LL_Init+0x32>
    Error_Handler( );
 800633e:	f7fa fd87 	bl	8000e50 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006342:	2200      	movs	r2, #0
 8006344:	5960      	ldr	r0, [r4, r5]
 8006346:	0011      	movs	r1, r2
 8006348:	2318      	movs	r3, #24
 800634a:	f7fd fd54 	bl	8003df6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800634e:	5960      	ldr	r0, [r4, r5]
 8006350:	2358      	movs	r3, #88	@ 0x58
 8006352:	2200      	movs	r2, #0
 8006354:	2180      	movs	r1, #128	@ 0x80
 8006356:	f7fd fd4e 	bl	8003df6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800635a:	5960      	ldr	r0, [r4, r5]
 800635c:	23c0      	movs	r3, #192	@ 0xc0
 800635e:	2200      	movs	r2, #0
 8006360:	2181      	movs	r1, #129	@ 0x81
 8006362:	f7fd fd48 	bl	8003df6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006366:	2388      	movs	r3, #136	@ 0x88
 8006368:	5960      	ldr	r0, [r4, r5]
 800636a:	2200      	movs	r2, #0
 800636c:	2101      	movs	r1, #1
 800636e:	005b      	lsls	r3, r3, #1
 8006370:	f7fd fd41 	bl	8003df6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006374:	2380      	movs	r3, #128	@ 0x80
 8006376:	5960      	ldr	r0, [r4, r5]
 8006378:	2200      	movs	r2, #0
 800637a:	2182      	movs	r1, #130	@ 0x82
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	f7fd fd3a 	bl	8003df6 <HAL_PCDEx_PMAConfig>
}
 8006382:	2000      	movs	r0, #0
 8006384:	bd70      	pop	{r4, r5, r6, pc}
 8006386:	46c0      	nop			@ (mov r8, r8)
 8006388:	20001720 	.word	0x20001720
 800638c:	40005c00 	.word	0x40005c00

08006390 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8006390:	23b0      	movs	r3, #176	@ 0xb0
{
 8006392:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	58c0      	ldr	r0, [r0, r3]
 8006398:	f7fc ff3a 	bl	8003210 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800639c:	f7ff ff36 	bl	800620c <USBD_Get_USB_Status>
}
 80063a0:	bd10      	pop	{r4, pc}

080063a2 <USBD_LL_OpenEP>:
{
 80063a2:	b510      	push	{r4, lr}
 80063a4:	0014      	movs	r4, r2
 80063a6:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80063a8:	0023      	movs	r3, r4
 80063aa:	24b0      	movs	r4, #176	@ 0xb0
 80063ac:	00a4      	lsls	r4, r4, #2
 80063ae:	5900      	ldr	r0, [r0, r4]
 80063b0:	f7fd fc38 	bl	8003c24 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80063b4:	f7ff ff2a 	bl	800620c <USBD_Get_USB_Status>
}
 80063b8:	bd10      	pop	{r4, pc}

080063ba <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80063ba:	23b0      	movs	r3, #176	@ 0xb0
{
 80063bc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	58c0      	ldr	r0, [r0, r3]
 80063c2:	f7fd fc5b 	bl	8003c7c <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80063c6:	f7ff ff21 	bl	800620c <USBD_Get_USB_Status>
}
 80063ca:	bd10      	pop	{r4, pc}

080063cc <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063cc:	23b0      	movs	r3, #176	@ 0xb0
{
 80063ce:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	58c0      	ldr	r0, [r0, r3]
 80063d4:	f7fd fcb3 	bl	8003d3e <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80063d8:	f7ff ff18 	bl	800620c <USBD_Get_USB_Status>
}
 80063dc:	bd10      	pop	{r4, pc}

080063de <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80063de:	23b0      	movs	r3, #176	@ 0xb0
{
 80063e0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	58c0      	ldr	r0, [r0, r3]
 80063e6:	f7fd fcd8 	bl	8003d9a <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80063ea:	f7ff ff0f 	bl	800620c <USBD_Get_USB_Status>
}
 80063ee:	bd10      	pop	{r4, pc}

080063f0 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80063f0:	23b0      	movs	r3, #176	@ 0xb0
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 80063f6:	b248      	sxtb	r0, r1
 80063f8:	2228      	movs	r2, #40	@ 0x28
 80063fa:	2800      	cmp	r0, #0
 80063fc:	da05      	bge.n	800640a <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80063fe:	207f      	movs	r0, #127	@ 0x7f
 8006400:	4001      	ands	r1, r0
 8006402:	434a      	muls	r2, r1
 8006404:	189b      	adds	r3, r3, r2
 8006406:	7c98      	ldrb	r0, [r3, #18]
}
 8006408:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800640a:	434a      	muls	r2, r1
 800640c:	189b      	adds	r3, r3, r2
 800640e:	3353      	adds	r3, #83	@ 0x53
 8006410:	33ff      	adds	r3, #255	@ 0xff
 8006412:	7818      	ldrb	r0, [r3, #0]
 8006414:	e7f8      	b.n	8006408 <USBD_LL_IsStallEP+0x18>

08006416 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006416:	23b0      	movs	r3, #176	@ 0xb0
{
 8006418:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	58c0      	ldr	r0, [r0, r3]
 800641e:	f7fc ff0a 	bl	8003236 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006422:	f7ff fef3 	bl	800620c <USBD_Get_USB_Status>
}
 8006426:	bd10      	pop	{r4, pc}

08006428 <USBD_LL_Transmit>:
{
 8006428:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800642a:	24b0      	movs	r4, #176	@ 0xb0
 800642c:	00a4      	lsls	r4, r4, #2
 800642e:	5900      	ldr	r0, [r0, r4]
 8006430:	f7fd fc6d 	bl	8003d0e <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006434:	f7ff feea 	bl	800620c <USBD_Get_USB_Status>
}
 8006438:	bd10      	pop	{r4, pc}

0800643a <USBD_LL_PrepareReceive>:
{
 800643a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800643c:	24b0      	movs	r4, #176	@ 0xb0
 800643e:	00a4      	lsls	r4, r4, #2
 8006440:	5900      	ldr	r0, [r0, r4]
 8006442:	f7fd fc41 	bl	8003cc8 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006446:	f7ff fee1 	bl	800620c <USBD_Get_USB_Status>
}
 800644a:	bd10      	pop	{r4, pc}

0800644c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800644c:	23b0      	movs	r3, #176	@ 0xb0
{
 800644e:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	58c0      	ldr	r0, [r0, r3]
 8006454:	f7fd fc53 	bl	8003cfe <HAL_PCD_EP_GetRxCount>
}
 8006458:	bd10      	pop	{r4, pc}
	...

0800645c <USBD_static_malloc>:
  return mem;
 800645c:	4800      	ldr	r0, [pc, #0]	@ (8006460 <USBD_static_malloc+0x4>)
}
 800645e:	4770      	bx	lr
 8006460:	20001500 	.word	0x20001500

08006464 <USBD_static_free>:
}
 8006464:	4770      	bx	lr

08006466 <atoi>:
 8006466:	b510      	push	{r4, lr}
 8006468:	220a      	movs	r2, #10
 800646a:	2100      	movs	r1, #0
 800646c:	f000 f88c 	bl	8006588 <strtol>
 8006470:	bd10      	pop	{r4, pc}
	...

08006474 <_strtol_l.constprop.0>:
 8006474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006476:	b085      	sub	sp, #20
 8006478:	0017      	movs	r7, r2
 800647a:	001e      	movs	r6, r3
 800647c:	9003      	str	r0, [sp, #12]
 800647e:	9101      	str	r1, [sp, #4]
 8006480:	2b24      	cmp	r3, #36	@ 0x24
 8006482:	d844      	bhi.n	800650e <_strtol_l.constprop.0+0x9a>
 8006484:	000c      	movs	r4, r1
 8006486:	2b01      	cmp	r3, #1
 8006488:	d041      	beq.n	800650e <_strtol_l.constprop.0+0x9a>
 800648a:	4b3d      	ldr	r3, [pc, #244]	@ (8006580 <_strtol_l.constprop.0+0x10c>)
 800648c:	2208      	movs	r2, #8
 800648e:	469c      	mov	ip, r3
 8006490:	0023      	movs	r3, r4
 8006492:	4661      	mov	r1, ip
 8006494:	781d      	ldrb	r5, [r3, #0]
 8006496:	3401      	adds	r4, #1
 8006498:	5d48      	ldrb	r0, [r1, r5]
 800649a:	0001      	movs	r1, r0
 800649c:	4011      	ands	r1, r2
 800649e:	4210      	tst	r0, r2
 80064a0:	d1f6      	bne.n	8006490 <_strtol_l.constprop.0+0x1c>
 80064a2:	2d2d      	cmp	r5, #45	@ 0x2d
 80064a4:	d13a      	bne.n	800651c <_strtol_l.constprop.0+0xa8>
 80064a6:	7825      	ldrb	r5, [r4, #0]
 80064a8:	1c9c      	adds	r4, r3, #2
 80064aa:	2301      	movs	r3, #1
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	2210      	movs	r2, #16
 80064b0:	0033      	movs	r3, r6
 80064b2:	4393      	bics	r3, r2
 80064b4:	d109      	bne.n	80064ca <_strtol_l.constprop.0+0x56>
 80064b6:	2d30      	cmp	r5, #48	@ 0x30
 80064b8:	d136      	bne.n	8006528 <_strtol_l.constprop.0+0xb4>
 80064ba:	2120      	movs	r1, #32
 80064bc:	7823      	ldrb	r3, [r4, #0]
 80064be:	438b      	bics	r3, r1
 80064c0:	2b58      	cmp	r3, #88	@ 0x58
 80064c2:	d131      	bne.n	8006528 <_strtol_l.constprop.0+0xb4>
 80064c4:	0016      	movs	r6, r2
 80064c6:	7865      	ldrb	r5, [r4, #1]
 80064c8:	3402      	adds	r4, #2
 80064ca:	4a2e      	ldr	r2, [pc, #184]	@ (8006584 <_strtol_l.constprop.0+0x110>)
 80064cc:	9b00      	ldr	r3, [sp, #0]
 80064ce:	4694      	mov	ip, r2
 80064d0:	4463      	add	r3, ip
 80064d2:	0031      	movs	r1, r6
 80064d4:	0018      	movs	r0, r3
 80064d6:	9302      	str	r3, [sp, #8]
 80064d8:	f7f9 fecc 	bl	8000274 <__aeabi_uidivmod>
 80064dc:	2200      	movs	r2, #0
 80064de:	4684      	mov	ip, r0
 80064e0:	0010      	movs	r0, r2
 80064e2:	002b      	movs	r3, r5
 80064e4:	3b30      	subs	r3, #48	@ 0x30
 80064e6:	2b09      	cmp	r3, #9
 80064e8:	d825      	bhi.n	8006536 <_strtol_l.constprop.0+0xc2>
 80064ea:	001d      	movs	r5, r3
 80064ec:	42ae      	cmp	r6, r5
 80064ee:	dd31      	ble.n	8006554 <_strtol_l.constprop.0+0xe0>
 80064f0:	1c53      	adds	r3, r2, #1
 80064f2:	d009      	beq.n	8006508 <_strtol_l.constprop.0+0x94>
 80064f4:	2201      	movs	r2, #1
 80064f6:	4252      	negs	r2, r2
 80064f8:	4584      	cmp	ip, r0
 80064fa:	d305      	bcc.n	8006508 <_strtol_l.constprop.0+0x94>
 80064fc:	d101      	bne.n	8006502 <_strtol_l.constprop.0+0x8e>
 80064fe:	42a9      	cmp	r1, r5
 8006500:	db25      	blt.n	800654e <_strtol_l.constprop.0+0xda>
 8006502:	2201      	movs	r2, #1
 8006504:	4370      	muls	r0, r6
 8006506:	1828      	adds	r0, r5, r0
 8006508:	7825      	ldrb	r5, [r4, #0]
 800650a:	3401      	adds	r4, #1
 800650c:	e7e9      	b.n	80064e2 <_strtol_l.constprop.0+0x6e>
 800650e:	f000 fa2d 	bl	800696c <__errno>
 8006512:	2316      	movs	r3, #22
 8006514:	6003      	str	r3, [r0, #0]
 8006516:	2000      	movs	r0, #0
 8006518:	b005      	add	sp, #20
 800651a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800651c:	9100      	str	r1, [sp, #0]
 800651e:	2d2b      	cmp	r5, #43	@ 0x2b
 8006520:	d1c5      	bne.n	80064ae <_strtol_l.constprop.0+0x3a>
 8006522:	7825      	ldrb	r5, [r4, #0]
 8006524:	1c9c      	adds	r4, r3, #2
 8006526:	e7c2      	b.n	80064ae <_strtol_l.constprop.0+0x3a>
 8006528:	2e00      	cmp	r6, #0
 800652a:	d1ce      	bne.n	80064ca <_strtol_l.constprop.0+0x56>
 800652c:	3608      	adds	r6, #8
 800652e:	2d30      	cmp	r5, #48	@ 0x30
 8006530:	d0cb      	beq.n	80064ca <_strtol_l.constprop.0+0x56>
 8006532:	3602      	adds	r6, #2
 8006534:	e7c9      	b.n	80064ca <_strtol_l.constprop.0+0x56>
 8006536:	002b      	movs	r3, r5
 8006538:	3b41      	subs	r3, #65	@ 0x41
 800653a:	2b19      	cmp	r3, #25
 800653c:	d801      	bhi.n	8006542 <_strtol_l.constprop.0+0xce>
 800653e:	3d37      	subs	r5, #55	@ 0x37
 8006540:	e7d4      	b.n	80064ec <_strtol_l.constprop.0+0x78>
 8006542:	002b      	movs	r3, r5
 8006544:	3b61      	subs	r3, #97	@ 0x61
 8006546:	2b19      	cmp	r3, #25
 8006548:	d804      	bhi.n	8006554 <_strtol_l.constprop.0+0xe0>
 800654a:	3d57      	subs	r5, #87	@ 0x57
 800654c:	e7ce      	b.n	80064ec <_strtol_l.constprop.0+0x78>
 800654e:	2201      	movs	r2, #1
 8006550:	4252      	negs	r2, r2
 8006552:	e7d9      	b.n	8006508 <_strtol_l.constprop.0+0x94>
 8006554:	1c53      	adds	r3, r2, #1
 8006556:	d108      	bne.n	800656a <_strtol_l.constprop.0+0xf6>
 8006558:	2322      	movs	r3, #34	@ 0x22
 800655a:	9a03      	ldr	r2, [sp, #12]
 800655c:	9802      	ldr	r0, [sp, #8]
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	2f00      	cmp	r7, #0
 8006562:	d0d9      	beq.n	8006518 <_strtol_l.constprop.0+0xa4>
 8006564:	1e63      	subs	r3, r4, #1
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	e007      	b.n	800657a <_strtol_l.constprop.0+0x106>
 800656a:	9b00      	ldr	r3, [sp, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d000      	beq.n	8006572 <_strtol_l.constprop.0+0xfe>
 8006570:	4240      	negs	r0, r0
 8006572:	2f00      	cmp	r7, #0
 8006574:	d0d0      	beq.n	8006518 <_strtol_l.constprop.0+0xa4>
 8006576:	2a00      	cmp	r2, #0
 8006578:	d1f4      	bne.n	8006564 <_strtol_l.constprop.0+0xf0>
 800657a:	9b01      	ldr	r3, [sp, #4]
 800657c:	603b      	str	r3, [r7, #0]
 800657e:	e7cb      	b.n	8006518 <_strtol_l.constprop.0+0xa4>
 8006580:	08007bed 	.word	0x08007bed
 8006584:	7fffffff 	.word	0x7fffffff

08006588 <strtol>:
 8006588:	b510      	push	{r4, lr}
 800658a:	4c04      	ldr	r4, [pc, #16]	@ (800659c <strtol+0x14>)
 800658c:	0013      	movs	r3, r2
 800658e:	000a      	movs	r2, r1
 8006590:	0001      	movs	r1, r0
 8006592:	6820      	ldr	r0, [r4, #0]
 8006594:	f7ff ff6e 	bl	8006474 <_strtol_l.constprop.0>
 8006598:	bd10      	pop	{r4, pc}
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	2000019c 	.word	0x2000019c

080065a0 <std>:
 80065a0:	2300      	movs	r3, #0
 80065a2:	b510      	push	{r4, lr}
 80065a4:	0004      	movs	r4, r0
 80065a6:	6003      	str	r3, [r0, #0]
 80065a8:	6043      	str	r3, [r0, #4]
 80065aa:	6083      	str	r3, [r0, #8]
 80065ac:	8181      	strh	r1, [r0, #12]
 80065ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80065b0:	81c2      	strh	r2, [r0, #14]
 80065b2:	6103      	str	r3, [r0, #16]
 80065b4:	6143      	str	r3, [r0, #20]
 80065b6:	6183      	str	r3, [r0, #24]
 80065b8:	0019      	movs	r1, r3
 80065ba:	2208      	movs	r2, #8
 80065bc:	305c      	adds	r0, #92	@ 0x5c
 80065be:	f000 f91f 	bl	8006800 <memset>
 80065c2:	4b0b      	ldr	r3, [pc, #44]	@ (80065f0 <std+0x50>)
 80065c4:	6224      	str	r4, [r4, #32]
 80065c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80065c8:	4b0a      	ldr	r3, [pc, #40]	@ (80065f4 <std+0x54>)
 80065ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065cc:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <std+0x58>)
 80065ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065d0:	4b0a      	ldr	r3, [pc, #40]	@ (80065fc <std+0x5c>)
 80065d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80065d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <std+0x60>)
 80065d6:	429c      	cmp	r4, r3
 80065d8:	d005      	beq.n	80065e6 <std+0x46>
 80065da:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <std+0x64>)
 80065dc:	429c      	cmp	r4, r3
 80065de:	d002      	beq.n	80065e6 <std+0x46>
 80065e0:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <std+0x68>)
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d103      	bne.n	80065ee <std+0x4e>
 80065e6:	0020      	movs	r0, r4
 80065e8:	3058      	adds	r0, #88	@ 0x58
 80065ea:	f000 f9e9 	bl	80069c0 <__retarget_lock_init_recursive>
 80065ee:	bd10      	pop	{r4, pc}
 80065f0:	08006769 	.word	0x08006769
 80065f4:	08006791 	.word	0x08006791
 80065f8:	080067c9 	.word	0x080067c9
 80065fc:	080067f5 	.word	0x080067f5
 8006600:	200019fc 	.word	0x200019fc
 8006604:	20001a64 	.word	0x20001a64
 8006608:	20001acc 	.word	0x20001acc

0800660c <stdio_exit_handler>:
 800660c:	b510      	push	{r4, lr}
 800660e:	4a03      	ldr	r2, [pc, #12]	@ (800661c <stdio_exit_handler+0x10>)
 8006610:	4903      	ldr	r1, [pc, #12]	@ (8006620 <stdio_exit_handler+0x14>)
 8006612:	4804      	ldr	r0, [pc, #16]	@ (8006624 <stdio_exit_handler+0x18>)
 8006614:	f000 f86c 	bl	80066f0 <_fwalk_sglue>
 8006618:	bd10      	pop	{r4, pc}
 800661a:	46c0      	nop			@ (mov r8, r8)
 800661c:	20000190 	.word	0x20000190
 8006620:	080072f5 	.word	0x080072f5
 8006624:	200001a0 	.word	0x200001a0

08006628 <cleanup_stdio>:
 8006628:	6841      	ldr	r1, [r0, #4]
 800662a:	4b0b      	ldr	r3, [pc, #44]	@ (8006658 <cleanup_stdio+0x30>)
 800662c:	b510      	push	{r4, lr}
 800662e:	0004      	movs	r4, r0
 8006630:	4299      	cmp	r1, r3
 8006632:	d001      	beq.n	8006638 <cleanup_stdio+0x10>
 8006634:	f000 fe5e 	bl	80072f4 <_fflush_r>
 8006638:	68a1      	ldr	r1, [r4, #8]
 800663a:	4b08      	ldr	r3, [pc, #32]	@ (800665c <cleanup_stdio+0x34>)
 800663c:	4299      	cmp	r1, r3
 800663e:	d002      	beq.n	8006646 <cleanup_stdio+0x1e>
 8006640:	0020      	movs	r0, r4
 8006642:	f000 fe57 	bl	80072f4 <_fflush_r>
 8006646:	68e1      	ldr	r1, [r4, #12]
 8006648:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <cleanup_stdio+0x38>)
 800664a:	4299      	cmp	r1, r3
 800664c:	d002      	beq.n	8006654 <cleanup_stdio+0x2c>
 800664e:	0020      	movs	r0, r4
 8006650:	f000 fe50 	bl	80072f4 <_fflush_r>
 8006654:	bd10      	pop	{r4, pc}
 8006656:	46c0      	nop			@ (mov r8, r8)
 8006658:	200019fc 	.word	0x200019fc
 800665c:	20001a64 	.word	0x20001a64
 8006660:	20001acc 	.word	0x20001acc

08006664 <global_stdio_init.part.0>:
 8006664:	b510      	push	{r4, lr}
 8006666:	4b09      	ldr	r3, [pc, #36]	@ (800668c <global_stdio_init.part.0+0x28>)
 8006668:	4a09      	ldr	r2, [pc, #36]	@ (8006690 <global_stdio_init.part.0+0x2c>)
 800666a:	2104      	movs	r1, #4
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	4809      	ldr	r0, [pc, #36]	@ (8006694 <global_stdio_init.part.0+0x30>)
 8006670:	2200      	movs	r2, #0
 8006672:	f7ff ff95 	bl	80065a0 <std>
 8006676:	2201      	movs	r2, #1
 8006678:	2109      	movs	r1, #9
 800667a:	4807      	ldr	r0, [pc, #28]	@ (8006698 <global_stdio_init.part.0+0x34>)
 800667c:	f7ff ff90 	bl	80065a0 <std>
 8006680:	2202      	movs	r2, #2
 8006682:	2112      	movs	r1, #18
 8006684:	4805      	ldr	r0, [pc, #20]	@ (800669c <global_stdio_init.part.0+0x38>)
 8006686:	f7ff ff8b 	bl	80065a0 <std>
 800668a:	bd10      	pop	{r4, pc}
 800668c:	20001b34 	.word	0x20001b34
 8006690:	0800660d 	.word	0x0800660d
 8006694:	200019fc 	.word	0x200019fc
 8006698:	20001a64 	.word	0x20001a64
 800669c:	20001acc 	.word	0x20001acc

080066a0 <__sfp_lock_acquire>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	4802      	ldr	r0, [pc, #8]	@ (80066ac <__sfp_lock_acquire+0xc>)
 80066a4:	f000 f98d 	bl	80069c2 <__retarget_lock_acquire_recursive>
 80066a8:	bd10      	pop	{r4, pc}
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	20001b3d 	.word	0x20001b3d

080066b0 <__sfp_lock_release>:
 80066b0:	b510      	push	{r4, lr}
 80066b2:	4802      	ldr	r0, [pc, #8]	@ (80066bc <__sfp_lock_release+0xc>)
 80066b4:	f000 f986 	bl	80069c4 <__retarget_lock_release_recursive>
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	46c0      	nop			@ (mov r8, r8)
 80066bc:	20001b3d 	.word	0x20001b3d

080066c0 <__sinit>:
 80066c0:	b510      	push	{r4, lr}
 80066c2:	0004      	movs	r4, r0
 80066c4:	f7ff ffec 	bl	80066a0 <__sfp_lock_acquire>
 80066c8:	6a23      	ldr	r3, [r4, #32]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <__sinit+0x14>
 80066ce:	f7ff ffef 	bl	80066b0 <__sfp_lock_release>
 80066d2:	bd10      	pop	{r4, pc}
 80066d4:	4b04      	ldr	r3, [pc, #16]	@ (80066e8 <__sinit+0x28>)
 80066d6:	6223      	str	r3, [r4, #32]
 80066d8:	4b04      	ldr	r3, [pc, #16]	@ (80066ec <__sinit+0x2c>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f6      	bne.n	80066ce <__sinit+0xe>
 80066e0:	f7ff ffc0 	bl	8006664 <global_stdio_init.part.0>
 80066e4:	e7f3      	b.n	80066ce <__sinit+0xe>
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	08006629 	.word	0x08006629
 80066ec:	20001b34 	.word	0x20001b34

080066f0 <_fwalk_sglue>:
 80066f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066f2:	0014      	movs	r4, r2
 80066f4:	2600      	movs	r6, #0
 80066f6:	9000      	str	r0, [sp, #0]
 80066f8:	9101      	str	r1, [sp, #4]
 80066fa:	68a5      	ldr	r5, [r4, #8]
 80066fc:	6867      	ldr	r7, [r4, #4]
 80066fe:	3f01      	subs	r7, #1
 8006700:	d504      	bpl.n	800670c <_fwalk_sglue+0x1c>
 8006702:	6824      	ldr	r4, [r4, #0]
 8006704:	2c00      	cmp	r4, #0
 8006706:	d1f8      	bne.n	80066fa <_fwalk_sglue+0xa>
 8006708:	0030      	movs	r0, r6
 800670a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800670c:	89ab      	ldrh	r3, [r5, #12]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d908      	bls.n	8006724 <_fwalk_sglue+0x34>
 8006712:	220e      	movs	r2, #14
 8006714:	5eab      	ldrsh	r3, [r5, r2]
 8006716:	3301      	adds	r3, #1
 8006718:	d004      	beq.n	8006724 <_fwalk_sglue+0x34>
 800671a:	0029      	movs	r1, r5
 800671c:	9800      	ldr	r0, [sp, #0]
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	4798      	blx	r3
 8006722:	4306      	orrs	r6, r0
 8006724:	3568      	adds	r5, #104	@ 0x68
 8006726:	e7ea      	b.n	80066fe <_fwalk_sglue+0xe>

08006728 <siprintf>:
 8006728:	b40e      	push	{r1, r2, r3}
 800672a:	b500      	push	{lr}
 800672c:	490b      	ldr	r1, [pc, #44]	@ (800675c <siprintf+0x34>)
 800672e:	b09c      	sub	sp, #112	@ 0x70
 8006730:	ab1d      	add	r3, sp, #116	@ 0x74
 8006732:	9002      	str	r0, [sp, #8]
 8006734:	9006      	str	r0, [sp, #24]
 8006736:	9107      	str	r1, [sp, #28]
 8006738:	9104      	str	r1, [sp, #16]
 800673a:	4809      	ldr	r0, [pc, #36]	@ (8006760 <siprintf+0x38>)
 800673c:	4909      	ldr	r1, [pc, #36]	@ (8006764 <siprintf+0x3c>)
 800673e:	cb04      	ldmia	r3!, {r2}
 8006740:	9105      	str	r1, [sp, #20]
 8006742:	6800      	ldr	r0, [r0, #0]
 8006744:	a902      	add	r1, sp, #8
 8006746:	9301      	str	r3, [sp, #4]
 8006748:	f000 fad2 	bl	8006cf0 <_svfiprintf_r>
 800674c:	2200      	movs	r2, #0
 800674e:	9b02      	ldr	r3, [sp, #8]
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	b01c      	add	sp, #112	@ 0x70
 8006754:	bc08      	pop	{r3}
 8006756:	b003      	add	sp, #12
 8006758:	4718      	bx	r3
 800675a:	46c0      	nop			@ (mov r8, r8)
 800675c:	7fffffff 	.word	0x7fffffff
 8006760:	2000019c 	.word	0x2000019c
 8006764:	ffff0208 	.word	0xffff0208

08006768 <__sread>:
 8006768:	b570      	push	{r4, r5, r6, lr}
 800676a:	000c      	movs	r4, r1
 800676c:	250e      	movs	r5, #14
 800676e:	5f49      	ldrsh	r1, [r1, r5]
 8006770:	f000 f8d4 	bl	800691c <_read_r>
 8006774:	2800      	cmp	r0, #0
 8006776:	db03      	blt.n	8006780 <__sread+0x18>
 8006778:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800677a:	181b      	adds	r3, r3, r0
 800677c:	6563      	str	r3, [r4, #84]	@ 0x54
 800677e:	bd70      	pop	{r4, r5, r6, pc}
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	4a02      	ldr	r2, [pc, #8]	@ (800678c <__sread+0x24>)
 8006784:	4013      	ands	r3, r2
 8006786:	81a3      	strh	r3, [r4, #12]
 8006788:	e7f9      	b.n	800677e <__sread+0x16>
 800678a:	46c0      	nop			@ (mov r8, r8)
 800678c:	ffffefff 	.word	0xffffefff

08006790 <__swrite>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	001f      	movs	r7, r3
 8006794:	898b      	ldrh	r3, [r1, #12]
 8006796:	0005      	movs	r5, r0
 8006798:	000c      	movs	r4, r1
 800679a:	0016      	movs	r6, r2
 800679c:	05db      	lsls	r3, r3, #23
 800679e:	d505      	bpl.n	80067ac <__swrite+0x1c>
 80067a0:	230e      	movs	r3, #14
 80067a2:	5ec9      	ldrsh	r1, [r1, r3]
 80067a4:	2200      	movs	r2, #0
 80067a6:	2302      	movs	r3, #2
 80067a8:	f000 f8a4 	bl	80068f4 <_lseek_r>
 80067ac:	89a3      	ldrh	r3, [r4, #12]
 80067ae:	4a05      	ldr	r2, [pc, #20]	@ (80067c4 <__swrite+0x34>)
 80067b0:	0028      	movs	r0, r5
 80067b2:	4013      	ands	r3, r2
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	0032      	movs	r2, r6
 80067b8:	230e      	movs	r3, #14
 80067ba:	5ee1      	ldrsh	r1, [r4, r3]
 80067bc:	003b      	movs	r3, r7
 80067be:	f000 f8c1 	bl	8006944 <_write_r>
 80067c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067c4:	ffffefff 	.word	0xffffefff

080067c8 <__sseek>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	000c      	movs	r4, r1
 80067cc:	250e      	movs	r5, #14
 80067ce:	5f49      	ldrsh	r1, [r1, r5]
 80067d0:	f000 f890 	bl	80068f4 <_lseek_r>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	1c42      	adds	r2, r0, #1
 80067d8:	d103      	bne.n	80067e2 <__sseek+0x1a>
 80067da:	4a05      	ldr	r2, [pc, #20]	@ (80067f0 <__sseek+0x28>)
 80067dc:	4013      	ands	r3, r2
 80067de:	81a3      	strh	r3, [r4, #12]
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	2280      	movs	r2, #128	@ 0x80
 80067e4:	0152      	lsls	r2, r2, #5
 80067e6:	4313      	orrs	r3, r2
 80067e8:	81a3      	strh	r3, [r4, #12]
 80067ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80067ec:	e7f8      	b.n	80067e0 <__sseek+0x18>
 80067ee:	46c0      	nop			@ (mov r8, r8)
 80067f0:	ffffefff 	.word	0xffffefff

080067f4 <__sclose>:
 80067f4:	b510      	push	{r4, lr}
 80067f6:	230e      	movs	r3, #14
 80067f8:	5ec9      	ldrsh	r1, [r1, r3]
 80067fa:	f000 f869 	bl	80068d0 <_close_r>
 80067fe:	bd10      	pop	{r4, pc}

08006800 <memset>:
 8006800:	0003      	movs	r3, r0
 8006802:	1882      	adds	r2, r0, r2
 8006804:	4293      	cmp	r3, r2
 8006806:	d100      	bne.n	800680a <memset+0xa>
 8006808:	4770      	bx	lr
 800680a:	7019      	strb	r1, [r3, #0]
 800680c:	3301      	adds	r3, #1
 800680e:	e7f9      	b.n	8006804 <memset+0x4>

08006810 <strtok>:
 8006810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006812:	4b16      	ldr	r3, [pc, #88]	@ (800686c <strtok+0x5c>)
 8006814:	0005      	movs	r5, r0
 8006816:	681f      	ldr	r7, [r3, #0]
 8006818:	000e      	movs	r6, r1
 800681a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800681c:	2c00      	cmp	r4, #0
 800681e:	d11d      	bne.n	800685c <strtok+0x4c>
 8006820:	2050      	movs	r0, #80	@ 0x50
 8006822:	f000 f949 	bl	8006ab8 <malloc>
 8006826:	1e02      	subs	r2, r0, #0
 8006828:	6478      	str	r0, [r7, #68]	@ 0x44
 800682a:	d104      	bne.n	8006836 <strtok+0x26>
 800682c:	215b      	movs	r1, #91	@ 0x5b
 800682e:	4b10      	ldr	r3, [pc, #64]	@ (8006870 <strtok+0x60>)
 8006830:	4810      	ldr	r0, [pc, #64]	@ (8006874 <strtok+0x64>)
 8006832:	f000 f8d9 	bl	80069e8 <__assert_func>
 8006836:	6004      	str	r4, [r0, #0]
 8006838:	6044      	str	r4, [r0, #4]
 800683a:	6084      	str	r4, [r0, #8]
 800683c:	60c4      	str	r4, [r0, #12]
 800683e:	6104      	str	r4, [r0, #16]
 8006840:	6144      	str	r4, [r0, #20]
 8006842:	6184      	str	r4, [r0, #24]
 8006844:	6284      	str	r4, [r0, #40]	@ 0x28
 8006846:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8006848:	6304      	str	r4, [r0, #48]	@ 0x30
 800684a:	6344      	str	r4, [r0, #52]	@ 0x34
 800684c:	6384      	str	r4, [r0, #56]	@ 0x38
 800684e:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8006850:	6404      	str	r4, [r0, #64]	@ 0x40
 8006852:	6444      	str	r4, [r0, #68]	@ 0x44
 8006854:	6484      	str	r4, [r0, #72]	@ 0x48
 8006856:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8006858:	7704      	strb	r4, [r0, #28]
 800685a:	6244      	str	r4, [r0, #36]	@ 0x24
 800685c:	0031      	movs	r1, r6
 800685e:	0028      	movs	r0, r5
 8006860:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006862:	2301      	movs	r3, #1
 8006864:	f000 f808 	bl	8006878 <__strtok_r>
 8006868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800686a:	46c0      	nop			@ (mov r8, r8)
 800686c:	2000019c 	.word	0x2000019c
 8006870:	08007ced 	.word	0x08007ced
 8006874:	08007d04 	.word	0x08007d04

08006878 <__strtok_r>:
 8006878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800687a:	1e04      	subs	r4, r0, #0
 800687c:	d102      	bne.n	8006884 <__strtok_r+0xc>
 800687e:	6814      	ldr	r4, [r2, #0]
 8006880:	2c00      	cmp	r4, #0
 8006882:	d009      	beq.n	8006898 <__strtok_r+0x20>
 8006884:	0020      	movs	r0, r4
 8006886:	000e      	movs	r6, r1
 8006888:	7805      	ldrb	r5, [r0, #0]
 800688a:	3401      	adds	r4, #1
 800688c:	7837      	ldrb	r7, [r6, #0]
 800688e:	2f00      	cmp	r7, #0
 8006890:	d104      	bne.n	800689c <__strtok_r+0x24>
 8006892:	2d00      	cmp	r5, #0
 8006894:	d10d      	bne.n	80068b2 <__strtok_r+0x3a>
 8006896:	6015      	str	r5, [r2, #0]
 8006898:	2000      	movs	r0, #0
 800689a:	e006      	b.n	80068aa <__strtok_r+0x32>
 800689c:	3601      	adds	r6, #1
 800689e:	42bd      	cmp	r5, r7
 80068a0:	d1f4      	bne.n	800688c <__strtok_r+0x14>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1ee      	bne.n	8006884 <__strtok_r+0xc>
 80068a6:	6014      	str	r4, [r2, #0]
 80068a8:	7003      	strb	r3, [r0, #0]
 80068aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ac:	3301      	adds	r3, #1
 80068ae:	2d00      	cmp	r5, #0
 80068b0:	d102      	bne.n	80068b8 <__strtok_r+0x40>
 80068b2:	000b      	movs	r3, r1
 80068b4:	7826      	ldrb	r6, [r4, #0]
 80068b6:	3401      	adds	r4, #1
 80068b8:	781d      	ldrb	r5, [r3, #0]
 80068ba:	42ae      	cmp	r6, r5
 80068bc:	d1f6      	bne.n	80068ac <__strtok_r+0x34>
 80068be:	2300      	movs	r3, #0
 80068c0:	001d      	movs	r5, r3
 80068c2:	429e      	cmp	r6, r3
 80068c4:	d002      	beq.n	80068cc <__strtok_r+0x54>
 80068c6:	0023      	movs	r3, r4
 80068c8:	1e61      	subs	r1, r4, #1
 80068ca:	700d      	strb	r5, [r1, #0]
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	e7ec      	b.n	80068aa <__strtok_r+0x32>

080068d0 <_close_r>:
 80068d0:	2300      	movs	r3, #0
 80068d2:	b570      	push	{r4, r5, r6, lr}
 80068d4:	4d06      	ldr	r5, [pc, #24]	@ (80068f0 <_close_r+0x20>)
 80068d6:	0004      	movs	r4, r0
 80068d8:	0008      	movs	r0, r1
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	f7fb fc1e 	bl	800211c <_close>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d103      	bne.n	80068ec <_close_r+0x1c>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d000      	beq.n	80068ec <_close_r+0x1c>
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	bd70      	pop	{r4, r5, r6, pc}
 80068ee:	46c0      	nop			@ (mov r8, r8)
 80068f0:	20001b38 	.word	0x20001b38

080068f4 <_lseek_r>:
 80068f4:	b570      	push	{r4, r5, r6, lr}
 80068f6:	0004      	movs	r4, r0
 80068f8:	0008      	movs	r0, r1
 80068fa:	0011      	movs	r1, r2
 80068fc:	001a      	movs	r2, r3
 80068fe:	2300      	movs	r3, #0
 8006900:	4d05      	ldr	r5, [pc, #20]	@ (8006918 <_lseek_r+0x24>)
 8006902:	602b      	str	r3, [r5, #0]
 8006904:	f7fb fc14 	bl	8002130 <_lseek>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d103      	bne.n	8006914 <_lseek_r+0x20>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d000      	beq.n	8006914 <_lseek_r+0x20>
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	46c0      	nop			@ (mov r8, r8)
 8006918:	20001b38 	.word	0x20001b38

0800691c <_read_r>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	0004      	movs	r4, r0
 8006920:	0008      	movs	r0, r1
 8006922:	0011      	movs	r1, r2
 8006924:	001a      	movs	r2, r3
 8006926:	2300      	movs	r3, #0
 8006928:	4d05      	ldr	r5, [pc, #20]	@ (8006940 <_read_r+0x24>)
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	f7fb fbdc 	bl	80020e8 <_read>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d103      	bne.n	800693c <_read_r+0x20>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d000      	beq.n	800693c <_read_r+0x20>
 800693a:	6023      	str	r3, [r4, #0]
 800693c:	bd70      	pop	{r4, r5, r6, pc}
 800693e:	46c0      	nop			@ (mov r8, r8)
 8006940:	20001b38 	.word	0x20001b38

08006944 <_write_r>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	0004      	movs	r4, r0
 8006948:	0008      	movs	r0, r1
 800694a:	0011      	movs	r1, r2
 800694c:	001a      	movs	r2, r3
 800694e:	2300      	movs	r3, #0
 8006950:	4d05      	ldr	r5, [pc, #20]	@ (8006968 <_write_r+0x24>)
 8006952:	602b      	str	r3, [r5, #0]
 8006954:	f7fb fbd5 	bl	8002102 <_write>
 8006958:	1c43      	adds	r3, r0, #1
 800695a:	d103      	bne.n	8006964 <_write_r+0x20>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d000      	beq.n	8006964 <_write_r+0x20>
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	bd70      	pop	{r4, r5, r6, pc}
 8006966:	46c0      	nop			@ (mov r8, r8)
 8006968:	20001b38 	.word	0x20001b38

0800696c <__errno>:
 800696c:	4b01      	ldr	r3, [pc, #4]	@ (8006974 <__errno+0x8>)
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	4770      	bx	lr
 8006972:	46c0      	nop			@ (mov r8, r8)
 8006974:	2000019c 	.word	0x2000019c

08006978 <__libc_init_array>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	2600      	movs	r6, #0
 800697c:	4c0c      	ldr	r4, [pc, #48]	@ (80069b0 <__libc_init_array+0x38>)
 800697e:	4d0d      	ldr	r5, [pc, #52]	@ (80069b4 <__libc_init_array+0x3c>)
 8006980:	1b64      	subs	r4, r4, r5
 8006982:	10a4      	asrs	r4, r4, #2
 8006984:	42a6      	cmp	r6, r4
 8006986:	d109      	bne.n	800699c <__libc_init_array+0x24>
 8006988:	2600      	movs	r6, #0
 800698a:	f001 f81b 	bl	80079c4 <_init>
 800698e:	4c0a      	ldr	r4, [pc, #40]	@ (80069b8 <__libc_init_array+0x40>)
 8006990:	4d0a      	ldr	r5, [pc, #40]	@ (80069bc <__libc_init_array+0x44>)
 8006992:	1b64      	subs	r4, r4, r5
 8006994:	10a4      	asrs	r4, r4, #2
 8006996:	42a6      	cmp	r6, r4
 8006998:	d105      	bne.n	80069a6 <__libc_init_array+0x2e>
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	00b3      	lsls	r3, r6, #2
 800699e:	58eb      	ldr	r3, [r5, r3]
 80069a0:	4798      	blx	r3
 80069a2:	3601      	adds	r6, #1
 80069a4:	e7ee      	b.n	8006984 <__libc_init_array+0xc>
 80069a6:	00b3      	lsls	r3, r6, #2
 80069a8:	58eb      	ldr	r3, [r5, r3]
 80069aa:	4798      	blx	r3
 80069ac:	3601      	adds	r6, #1
 80069ae:	e7f2      	b.n	8006996 <__libc_init_array+0x1e>
 80069b0:	08007dd0 	.word	0x08007dd0
 80069b4:	08007dd0 	.word	0x08007dd0
 80069b8:	08007dd4 	.word	0x08007dd4
 80069bc:	08007dd0 	.word	0x08007dd0

080069c0 <__retarget_lock_init_recursive>:
 80069c0:	4770      	bx	lr

080069c2 <__retarget_lock_acquire_recursive>:
 80069c2:	4770      	bx	lr

080069c4 <__retarget_lock_release_recursive>:
 80069c4:	4770      	bx	lr

080069c6 <strcpy>:
 80069c6:	0003      	movs	r3, r0
 80069c8:	780a      	ldrb	r2, [r1, #0]
 80069ca:	3101      	adds	r1, #1
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	3301      	adds	r3, #1
 80069d0:	2a00      	cmp	r2, #0
 80069d2:	d1f9      	bne.n	80069c8 <strcpy+0x2>
 80069d4:	4770      	bx	lr

080069d6 <memcpy>:
 80069d6:	2300      	movs	r3, #0
 80069d8:	b510      	push	{r4, lr}
 80069da:	429a      	cmp	r2, r3
 80069dc:	d100      	bne.n	80069e0 <memcpy+0xa>
 80069de:	bd10      	pop	{r4, pc}
 80069e0:	5ccc      	ldrb	r4, [r1, r3]
 80069e2:	54c4      	strb	r4, [r0, r3]
 80069e4:	3301      	adds	r3, #1
 80069e6:	e7f8      	b.n	80069da <memcpy+0x4>

080069e8 <__assert_func>:
 80069e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80069ea:	0014      	movs	r4, r2
 80069ec:	001a      	movs	r2, r3
 80069ee:	4b09      	ldr	r3, [pc, #36]	@ (8006a14 <__assert_func+0x2c>)
 80069f0:	0005      	movs	r5, r0
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	000e      	movs	r6, r1
 80069f6:	68d8      	ldr	r0, [r3, #12]
 80069f8:	4b07      	ldr	r3, [pc, #28]	@ (8006a18 <__assert_func+0x30>)
 80069fa:	2c00      	cmp	r4, #0
 80069fc:	d101      	bne.n	8006a02 <__assert_func+0x1a>
 80069fe:	4b07      	ldr	r3, [pc, #28]	@ (8006a1c <__assert_func+0x34>)
 8006a00:	001c      	movs	r4, r3
 8006a02:	4907      	ldr	r1, [pc, #28]	@ (8006a20 <__assert_func+0x38>)
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	9402      	str	r4, [sp, #8]
 8006a08:	002b      	movs	r3, r5
 8006a0a:	9600      	str	r6, [sp, #0]
 8006a0c:	f000 fc9e 	bl	800734c <fiprintf>
 8006a10:	f000 fcdd 	bl	80073ce <abort>
 8006a14:	2000019c 	.word	0x2000019c
 8006a18:	08007d5e 	.word	0x08007d5e
 8006a1c:	08007ad8 	.word	0x08007ad8
 8006a20:	08007d6b 	.word	0x08007d6b

08006a24 <_free_r>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	0005      	movs	r5, r0
 8006a28:	1e0c      	subs	r4, r1, #0
 8006a2a:	d010      	beq.n	8006a4e <_free_r+0x2a>
 8006a2c:	3c04      	subs	r4, #4
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	da00      	bge.n	8006a36 <_free_r+0x12>
 8006a34:	18e4      	adds	r4, r4, r3
 8006a36:	0028      	movs	r0, r5
 8006a38:	f000 f8ea 	bl	8006c10 <__malloc_lock>
 8006a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ab4 <_free_r+0x90>)
 8006a3e:	6813      	ldr	r3, [r2, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d105      	bne.n	8006a50 <_free_r+0x2c>
 8006a44:	6063      	str	r3, [r4, #4]
 8006a46:	6014      	str	r4, [r2, #0]
 8006a48:	0028      	movs	r0, r5
 8006a4a:	f000 f8e9 	bl	8006c20 <__malloc_unlock>
 8006a4e:	bd70      	pop	{r4, r5, r6, pc}
 8006a50:	42a3      	cmp	r3, r4
 8006a52:	d908      	bls.n	8006a66 <_free_r+0x42>
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	1821      	adds	r1, r4, r0
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	d1f3      	bne.n	8006a44 <_free_r+0x20>
 8006a5c:	6819      	ldr	r1, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	1809      	adds	r1, r1, r0
 8006a62:	6021      	str	r1, [r4, #0]
 8006a64:	e7ee      	b.n	8006a44 <_free_r+0x20>
 8006a66:	001a      	movs	r2, r3
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <_free_r+0x4e>
 8006a6e:	42a3      	cmp	r3, r4
 8006a70:	d9f9      	bls.n	8006a66 <_free_r+0x42>
 8006a72:	6811      	ldr	r1, [r2, #0]
 8006a74:	1850      	adds	r0, r2, r1
 8006a76:	42a0      	cmp	r0, r4
 8006a78:	d10b      	bne.n	8006a92 <_free_r+0x6e>
 8006a7a:	6820      	ldr	r0, [r4, #0]
 8006a7c:	1809      	adds	r1, r1, r0
 8006a7e:	1850      	adds	r0, r2, r1
 8006a80:	6011      	str	r1, [r2, #0]
 8006a82:	4283      	cmp	r3, r0
 8006a84:	d1e0      	bne.n	8006a48 <_free_r+0x24>
 8006a86:	6818      	ldr	r0, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	1841      	adds	r1, r0, r1
 8006a8c:	6011      	str	r1, [r2, #0]
 8006a8e:	6053      	str	r3, [r2, #4]
 8006a90:	e7da      	b.n	8006a48 <_free_r+0x24>
 8006a92:	42a0      	cmp	r0, r4
 8006a94:	d902      	bls.n	8006a9c <_free_r+0x78>
 8006a96:	230c      	movs	r3, #12
 8006a98:	602b      	str	r3, [r5, #0]
 8006a9a:	e7d5      	b.n	8006a48 <_free_r+0x24>
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	1821      	adds	r1, r4, r0
 8006aa0:	428b      	cmp	r3, r1
 8006aa2:	d103      	bne.n	8006aac <_free_r+0x88>
 8006aa4:	6819      	ldr	r1, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	1809      	adds	r1, r1, r0
 8006aaa:	6021      	str	r1, [r4, #0]
 8006aac:	6063      	str	r3, [r4, #4]
 8006aae:	6054      	str	r4, [r2, #4]
 8006ab0:	e7ca      	b.n	8006a48 <_free_r+0x24>
 8006ab2:	46c0      	nop			@ (mov r8, r8)
 8006ab4:	20001b44 	.word	0x20001b44

08006ab8 <malloc>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	4b03      	ldr	r3, [pc, #12]	@ (8006ac8 <malloc+0x10>)
 8006abc:	0001      	movs	r1, r0
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	f000 f826 	bl	8006b10 <_malloc_r>
 8006ac4:	bd10      	pop	{r4, pc}
 8006ac6:	46c0      	nop			@ (mov r8, r8)
 8006ac8:	2000019c 	.word	0x2000019c

08006acc <sbrk_aligned>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4e0f      	ldr	r6, [pc, #60]	@ (8006b0c <sbrk_aligned+0x40>)
 8006ad0:	000d      	movs	r5, r1
 8006ad2:	6831      	ldr	r1, [r6, #0]
 8006ad4:	0004      	movs	r4, r0
 8006ad6:	2900      	cmp	r1, #0
 8006ad8:	d102      	bne.n	8006ae0 <sbrk_aligned+0x14>
 8006ada:	f000 fc5b 	bl	8007394 <_sbrk_r>
 8006ade:	6030      	str	r0, [r6, #0]
 8006ae0:	0029      	movs	r1, r5
 8006ae2:	0020      	movs	r0, r4
 8006ae4:	f000 fc56 	bl	8007394 <_sbrk_r>
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d103      	bne.n	8006af4 <sbrk_aligned+0x28>
 8006aec:	2501      	movs	r5, #1
 8006aee:	426d      	negs	r5, r5
 8006af0:	0028      	movs	r0, r5
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	2303      	movs	r3, #3
 8006af6:	1cc5      	adds	r5, r0, #3
 8006af8:	439d      	bics	r5, r3
 8006afa:	42a8      	cmp	r0, r5
 8006afc:	d0f8      	beq.n	8006af0 <sbrk_aligned+0x24>
 8006afe:	1a29      	subs	r1, r5, r0
 8006b00:	0020      	movs	r0, r4
 8006b02:	f000 fc47 	bl	8007394 <_sbrk_r>
 8006b06:	3001      	adds	r0, #1
 8006b08:	d1f2      	bne.n	8006af0 <sbrk_aligned+0x24>
 8006b0a:	e7ef      	b.n	8006aec <sbrk_aligned+0x20>
 8006b0c:	20001b40 	.word	0x20001b40

08006b10 <_malloc_r>:
 8006b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b12:	2203      	movs	r2, #3
 8006b14:	1ccb      	adds	r3, r1, #3
 8006b16:	4393      	bics	r3, r2
 8006b18:	3308      	adds	r3, #8
 8006b1a:	0005      	movs	r5, r0
 8006b1c:	001f      	movs	r7, r3
 8006b1e:	2b0c      	cmp	r3, #12
 8006b20:	d234      	bcs.n	8006b8c <_malloc_r+0x7c>
 8006b22:	270c      	movs	r7, #12
 8006b24:	42b9      	cmp	r1, r7
 8006b26:	d833      	bhi.n	8006b90 <_malloc_r+0x80>
 8006b28:	0028      	movs	r0, r5
 8006b2a:	f000 f871 	bl	8006c10 <__malloc_lock>
 8006b2e:	4e37      	ldr	r6, [pc, #220]	@ (8006c0c <_malloc_r+0xfc>)
 8006b30:	6833      	ldr	r3, [r6, #0]
 8006b32:	001c      	movs	r4, r3
 8006b34:	2c00      	cmp	r4, #0
 8006b36:	d12f      	bne.n	8006b98 <_malloc_r+0x88>
 8006b38:	0039      	movs	r1, r7
 8006b3a:	0028      	movs	r0, r5
 8006b3c:	f7ff ffc6 	bl	8006acc <sbrk_aligned>
 8006b40:	0004      	movs	r4, r0
 8006b42:	1c43      	adds	r3, r0, #1
 8006b44:	d15f      	bne.n	8006c06 <_malloc_r+0xf6>
 8006b46:	6834      	ldr	r4, [r6, #0]
 8006b48:	9400      	str	r4, [sp, #0]
 8006b4a:	9b00      	ldr	r3, [sp, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d14a      	bne.n	8006be6 <_malloc_r+0xd6>
 8006b50:	2c00      	cmp	r4, #0
 8006b52:	d052      	beq.n	8006bfa <_malloc_r+0xea>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	0028      	movs	r0, r5
 8006b58:	18e3      	adds	r3, r4, r3
 8006b5a:	9900      	ldr	r1, [sp, #0]
 8006b5c:	9301      	str	r3, [sp, #4]
 8006b5e:	f000 fc19 	bl	8007394 <_sbrk_r>
 8006b62:	9b01      	ldr	r3, [sp, #4]
 8006b64:	4283      	cmp	r3, r0
 8006b66:	d148      	bne.n	8006bfa <_malloc_r+0xea>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	0028      	movs	r0, r5
 8006b6c:	1aff      	subs	r7, r7, r3
 8006b6e:	0039      	movs	r1, r7
 8006b70:	f7ff ffac 	bl	8006acc <sbrk_aligned>
 8006b74:	3001      	adds	r0, #1
 8006b76:	d040      	beq.n	8006bfa <_malloc_r+0xea>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	19db      	adds	r3, r3, r7
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	6833      	ldr	r3, [r6, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	d133      	bne.n	8006bee <_malloc_r+0xde>
 8006b86:	9b00      	ldr	r3, [sp, #0]
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	e019      	b.n	8006bc0 <_malloc_r+0xb0>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dac9      	bge.n	8006b24 <_malloc_r+0x14>
 8006b90:	230c      	movs	r3, #12
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	2000      	movs	r0, #0
 8006b96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b98:	6821      	ldr	r1, [r4, #0]
 8006b9a:	1bc9      	subs	r1, r1, r7
 8006b9c:	d420      	bmi.n	8006be0 <_malloc_r+0xd0>
 8006b9e:	290b      	cmp	r1, #11
 8006ba0:	d90a      	bls.n	8006bb8 <_malloc_r+0xa8>
 8006ba2:	19e2      	adds	r2, r4, r7
 8006ba4:	6027      	str	r7, [r4, #0]
 8006ba6:	42a3      	cmp	r3, r4
 8006ba8:	d104      	bne.n	8006bb4 <_malloc_r+0xa4>
 8006baa:	6032      	str	r2, [r6, #0]
 8006bac:	6863      	ldr	r3, [r4, #4]
 8006bae:	6011      	str	r1, [r2, #0]
 8006bb0:	6053      	str	r3, [r2, #4]
 8006bb2:	e005      	b.n	8006bc0 <_malloc_r+0xb0>
 8006bb4:	605a      	str	r2, [r3, #4]
 8006bb6:	e7f9      	b.n	8006bac <_malloc_r+0x9c>
 8006bb8:	6862      	ldr	r2, [r4, #4]
 8006bba:	42a3      	cmp	r3, r4
 8006bbc:	d10e      	bne.n	8006bdc <_malloc_r+0xcc>
 8006bbe:	6032      	str	r2, [r6, #0]
 8006bc0:	0028      	movs	r0, r5
 8006bc2:	f000 f82d 	bl	8006c20 <__malloc_unlock>
 8006bc6:	0020      	movs	r0, r4
 8006bc8:	2207      	movs	r2, #7
 8006bca:	300b      	adds	r0, #11
 8006bcc:	1d23      	adds	r3, r4, #4
 8006bce:	4390      	bics	r0, r2
 8006bd0:	1ac2      	subs	r2, r0, r3
 8006bd2:	4298      	cmp	r0, r3
 8006bd4:	d0df      	beq.n	8006b96 <_malloc_r+0x86>
 8006bd6:	1a1b      	subs	r3, r3, r0
 8006bd8:	50a3      	str	r3, [r4, r2]
 8006bda:	e7dc      	b.n	8006b96 <_malloc_r+0x86>
 8006bdc:	605a      	str	r2, [r3, #4]
 8006bde:	e7ef      	b.n	8006bc0 <_malloc_r+0xb0>
 8006be0:	0023      	movs	r3, r4
 8006be2:	6864      	ldr	r4, [r4, #4]
 8006be4:	e7a6      	b.n	8006b34 <_malloc_r+0x24>
 8006be6:	9c00      	ldr	r4, [sp, #0]
 8006be8:	6863      	ldr	r3, [r4, #4]
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	e7ad      	b.n	8006b4a <_malloc_r+0x3a>
 8006bee:	001a      	movs	r2, r3
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	42a3      	cmp	r3, r4
 8006bf4:	d1fb      	bne.n	8006bee <_malloc_r+0xde>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e7da      	b.n	8006bb0 <_malloc_r+0xa0>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	0028      	movs	r0, r5
 8006bfe:	602b      	str	r3, [r5, #0]
 8006c00:	f000 f80e 	bl	8006c20 <__malloc_unlock>
 8006c04:	e7c6      	b.n	8006b94 <_malloc_r+0x84>
 8006c06:	6007      	str	r7, [r0, #0]
 8006c08:	e7da      	b.n	8006bc0 <_malloc_r+0xb0>
 8006c0a:	46c0      	nop			@ (mov r8, r8)
 8006c0c:	20001b44 	.word	0x20001b44

08006c10 <__malloc_lock>:
 8006c10:	b510      	push	{r4, lr}
 8006c12:	4802      	ldr	r0, [pc, #8]	@ (8006c1c <__malloc_lock+0xc>)
 8006c14:	f7ff fed5 	bl	80069c2 <__retarget_lock_acquire_recursive>
 8006c18:	bd10      	pop	{r4, pc}
 8006c1a:	46c0      	nop			@ (mov r8, r8)
 8006c1c:	20001b3c 	.word	0x20001b3c

08006c20 <__malloc_unlock>:
 8006c20:	b510      	push	{r4, lr}
 8006c22:	4802      	ldr	r0, [pc, #8]	@ (8006c2c <__malloc_unlock+0xc>)
 8006c24:	f7ff fece 	bl	80069c4 <__retarget_lock_release_recursive>
 8006c28:	bd10      	pop	{r4, pc}
 8006c2a:	46c0      	nop			@ (mov r8, r8)
 8006c2c:	20001b3c 	.word	0x20001b3c

08006c30 <__ssputs_r>:
 8006c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c32:	688e      	ldr	r6, [r1, #8]
 8006c34:	b085      	sub	sp, #20
 8006c36:	001f      	movs	r7, r3
 8006c38:	000c      	movs	r4, r1
 8006c3a:	680b      	ldr	r3, [r1, #0]
 8006c3c:	9002      	str	r0, [sp, #8]
 8006c3e:	9203      	str	r2, [sp, #12]
 8006c40:	42be      	cmp	r6, r7
 8006c42:	d830      	bhi.n	8006ca6 <__ssputs_r+0x76>
 8006c44:	210c      	movs	r1, #12
 8006c46:	5e62      	ldrsh	r2, [r4, r1]
 8006c48:	2190      	movs	r1, #144	@ 0x90
 8006c4a:	00c9      	lsls	r1, r1, #3
 8006c4c:	420a      	tst	r2, r1
 8006c4e:	d028      	beq.n	8006ca2 <__ssputs_r+0x72>
 8006c50:	2003      	movs	r0, #3
 8006c52:	6921      	ldr	r1, [r4, #16]
 8006c54:	1a5b      	subs	r3, r3, r1
 8006c56:	9301      	str	r3, [sp, #4]
 8006c58:	6963      	ldr	r3, [r4, #20]
 8006c5a:	4343      	muls	r3, r0
 8006c5c:	9801      	ldr	r0, [sp, #4]
 8006c5e:	0fdd      	lsrs	r5, r3, #31
 8006c60:	18ed      	adds	r5, r5, r3
 8006c62:	1c7b      	adds	r3, r7, #1
 8006c64:	181b      	adds	r3, r3, r0
 8006c66:	106d      	asrs	r5, r5, #1
 8006c68:	42ab      	cmp	r3, r5
 8006c6a:	d900      	bls.n	8006c6e <__ssputs_r+0x3e>
 8006c6c:	001d      	movs	r5, r3
 8006c6e:	0552      	lsls	r2, r2, #21
 8006c70:	d528      	bpl.n	8006cc4 <__ssputs_r+0x94>
 8006c72:	0029      	movs	r1, r5
 8006c74:	9802      	ldr	r0, [sp, #8]
 8006c76:	f7ff ff4b 	bl	8006b10 <_malloc_r>
 8006c7a:	1e06      	subs	r6, r0, #0
 8006c7c:	d02c      	beq.n	8006cd8 <__ssputs_r+0xa8>
 8006c7e:	9a01      	ldr	r2, [sp, #4]
 8006c80:	6921      	ldr	r1, [r4, #16]
 8006c82:	f7ff fea8 	bl	80069d6 <memcpy>
 8006c86:	89a2      	ldrh	r2, [r4, #12]
 8006c88:	4b18      	ldr	r3, [pc, #96]	@ (8006cec <__ssputs_r+0xbc>)
 8006c8a:	401a      	ands	r2, r3
 8006c8c:	2380      	movs	r3, #128	@ 0x80
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	81a3      	strh	r3, [r4, #12]
 8006c92:	9b01      	ldr	r3, [sp, #4]
 8006c94:	6126      	str	r6, [r4, #16]
 8006c96:	18f6      	adds	r6, r6, r3
 8006c98:	6026      	str	r6, [r4, #0]
 8006c9a:	003e      	movs	r6, r7
 8006c9c:	6165      	str	r5, [r4, #20]
 8006c9e:	1aed      	subs	r5, r5, r3
 8006ca0:	60a5      	str	r5, [r4, #8]
 8006ca2:	42be      	cmp	r6, r7
 8006ca4:	d900      	bls.n	8006ca8 <__ssputs_r+0x78>
 8006ca6:	003e      	movs	r6, r7
 8006ca8:	0032      	movs	r2, r6
 8006caa:	9903      	ldr	r1, [sp, #12]
 8006cac:	6820      	ldr	r0, [r4, #0]
 8006cae:	f000 fb5d 	bl	800736c <memmove>
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	68a3      	ldr	r3, [r4, #8]
 8006cb6:	1b9b      	subs	r3, r3, r6
 8006cb8:	60a3      	str	r3, [r4, #8]
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	199b      	adds	r3, r3, r6
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	b005      	add	sp, #20
 8006cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc4:	002a      	movs	r2, r5
 8006cc6:	9802      	ldr	r0, [sp, #8]
 8006cc8:	f000 fb88 	bl	80073dc <_realloc_r>
 8006ccc:	1e06      	subs	r6, r0, #0
 8006cce:	d1e0      	bne.n	8006c92 <__ssputs_r+0x62>
 8006cd0:	6921      	ldr	r1, [r4, #16]
 8006cd2:	9802      	ldr	r0, [sp, #8]
 8006cd4:	f7ff fea6 	bl	8006a24 <_free_r>
 8006cd8:	230c      	movs	r3, #12
 8006cda:	2001      	movs	r0, #1
 8006cdc:	9a02      	ldr	r2, [sp, #8]
 8006cde:	4240      	negs	r0, r0
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	89a2      	ldrh	r2, [r4, #12]
 8006ce4:	3334      	adds	r3, #52	@ 0x34
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	81a3      	strh	r3, [r4, #12]
 8006cea:	e7e9      	b.n	8006cc0 <__ssputs_r+0x90>
 8006cec:	fffffb7f 	.word	0xfffffb7f

08006cf0 <_svfiprintf_r>:
 8006cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cf2:	b0a1      	sub	sp, #132	@ 0x84
 8006cf4:	9003      	str	r0, [sp, #12]
 8006cf6:	001d      	movs	r5, r3
 8006cf8:	898b      	ldrh	r3, [r1, #12]
 8006cfa:	000f      	movs	r7, r1
 8006cfc:	0016      	movs	r6, r2
 8006cfe:	061b      	lsls	r3, r3, #24
 8006d00:	d511      	bpl.n	8006d26 <_svfiprintf_r+0x36>
 8006d02:	690b      	ldr	r3, [r1, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10e      	bne.n	8006d26 <_svfiprintf_r+0x36>
 8006d08:	2140      	movs	r1, #64	@ 0x40
 8006d0a:	f7ff ff01 	bl	8006b10 <_malloc_r>
 8006d0e:	6038      	str	r0, [r7, #0]
 8006d10:	6138      	str	r0, [r7, #16]
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d105      	bne.n	8006d22 <_svfiprintf_r+0x32>
 8006d16:	230c      	movs	r3, #12
 8006d18:	9a03      	ldr	r2, [sp, #12]
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	4240      	negs	r0, r0
 8006d20:	e0cf      	b.n	8006ec2 <_svfiprintf_r+0x1d2>
 8006d22:	2340      	movs	r3, #64	@ 0x40
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	2300      	movs	r3, #0
 8006d28:	ac08      	add	r4, sp, #32
 8006d2a:	6163      	str	r3, [r4, #20]
 8006d2c:	3320      	adds	r3, #32
 8006d2e:	7663      	strb	r3, [r4, #25]
 8006d30:	3310      	adds	r3, #16
 8006d32:	76a3      	strb	r3, [r4, #26]
 8006d34:	9507      	str	r5, [sp, #28]
 8006d36:	0035      	movs	r5, r6
 8006d38:	782b      	ldrb	r3, [r5, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <_svfiprintf_r+0x52>
 8006d3e:	2b25      	cmp	r3, #37	@ 0x25
 8006d40:	d148      	bne.n	8006dd4 <_svfiprintf_r+0xe4>
 8006d42:	1bab      	subs	r3, r5, r6
 8006d44:	9305      	str	r3, [sp, #20]
 8006d46:	42b5      	cmp	r5, r6
 8006d48:	d00b      	beq.n	8006d62 <_svfiprintf_r+0x72>
 8006d4a:	0032      	movs	r2, r6
 8006d4c:	0039      	movs	r1, r7
 8006d4e:	9803      	ldr	r0, [sp, #12]
 8006d50:	f7ff ff6e 	bl	8006c30 <__ssputs_r>
 8006d54:	3001      	adds	r0, #1
 8006d56:	d100      	bne.n	8006d5a <_svfiprintf_r+0x6a>
 8006d58:	e0ae      	b.n	8006eb8 <_svfiprintf_r+0x1c8>
 8006d5a:	6963      	ldr	r3, [r4, #20]
 8006d5c:	9a05      	ldr	r2, [sp, #20]
 8006d5e:	189b      	adds	r3, r3, r2
 8006d60:	6163      	str	r3, [r4, #20]
 8006d62:	782b      	ldrb	r3, [r5, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d100      	bne.n	8006d6a <_svfiprintf_r+0x7a>
 8006d68:	e0a6      	b.n	8006eb8 <_svfiprintf_r+0x1c8>
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4252      	negs	r2, r2
 8006d70:	6062      	str	r2, [r4, #4]
 8006d72:	a904      	add	r1, sp, #16
 8006d74:	3254      	adds	r2, #84	@ 0x54
 8006d76:	1852      	adds	r2, r2, r1
 8006d78:	1c6e      	adds	r6, r5, #1
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	60e3      	str	r3, [r4, #12]
 8006d7e:	60a3      	str	r3, [r4, #8]
 8006d80:	7013      	strb	r3, [r2, #0]
 8006d82:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006d84:	4b54      	ldr	r3, [pc, #336]	@ (8006ed8 <_svfiprintf_r+0x1e8>)
 8006d86:	2205      	movs	r2, #5
 8006d88:	0018      	movs	r0, r3
 8006d8a:	7831      	ldrb	r1, [r6, #0]
 8006d8c:	9305      	str	r3, [sp, #20]
 8006d8e:	f000 fb13 	bl	80073b8 <memchr>
 8006d92:	1c75      	adds	r5, r6, #1
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d11f      	bne.n	8006dd8 <_svfiprintf_r+0xe8>
 8006d98:	6822      	ldr	r2, [r4, #0]
 8006d9a:	06d3      	lsls	r3, r2, #27
 8006d9c:	d504      	bpl.n	8006da8 <_svfiprintf_r+0xb8>
 8006d9e:	2353      	movs	r3, #83	@ 0x53
 8006da0:	a904      	add	r1, sp, #16
 8006da2:	185b      	adds	r3, r3, r1
 8006da4:	2120      	movs	r1, #32
 8006da6:	7019      	strb	r1, [r3, #0]
 8006da8:	0713      	lsls	r3, r2, #28
 8006daa:	d504      	bpl.n	8006db6 <_svfiprintf_r+0xc6>
 8006dac:	2353      	movs	r3, #83	@ 0x53
 8006dae:	a904      	add	r1, sp, #16
 8006db0:	185b      	adds	r3, r3, r1
 8006db2:	212b      	movs	r1, #43	@ 0x2b
 8006db4:	7019      	strb	r1, [r3, #0]
 8006db6:	7833      	ldrb	r3, [r6, #0]
 8006db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dba:	d016      	beq.n	8006dea <_svfiprintf_r+0xfa>
 8006dbc:	0035      	movs	r5, r6
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	200a      	movs	r0, #10
 8006dc2:	68e3      	ldr	r3, [r4, #12]
 8006dc4:	782a      	ldrb	r2, [r5, #0]
 8006dc6:	1c6e      	adds	r6, r5, #1
 8006dc8:	3a30      	subs	r2, #48	@ 0x30
 8006dca:	2a09      	cmp	r2, #9
 8006dcc:	d950      	bls.n	8006e70 <_svfiprintf_r+0x180>
 8006dce:	2900      	cmp	r1, #0
 8006dd0:	d111      	bne.n	8006df6 <_svfiprintf_r+0x106>
 8006dd2:	e017      	b.n	8006e04 <_svfiprintf_r+0x114>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	e7af      	b.n	8006d38 <_svfiprintf_r+0x48>
 8006dd8:	9b05      	ldr	r3, [sp, #20]
 8006dda:	6822      	ldr	r2, [r4, #0]
 8006ddc:	1ac0      	subs	r0, r0, r3
 8006dde:	2301      	movs	r3, #1
 8006de0:	4083      	lsls	r3, r0
 8006de2:	4313      	orrs	r3, r2
 8006de4:	002e      	movs	r6, r5
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	e7cc      	b.n	8006d84 <_svfiprintf_r+0x94>
 8006dea:	9b07      	ldr	r3, [sp, #28]
 8006dec:	1d19      	adds	r1, r3, #4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	9107      	str	r1, [sp, #28]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	db01      	blt.n	8006dfa <_svfiprintf_r+0x10a>
 8006df6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006df8:	e004      	b.n	8006e04 <_svfiprintf_r+0x114>
 8006dfa:	425b      	negs	r3, r3
 8006dfc:	60e3      	str	r3, [r4, #12]
 8006dfe:	2302      	movs	r3, #2
 8006e00:	4313      	orrs	r3, r2
 8006e02:	6023      	str	r3, [r4, #0]
 8006e04:	782b      	ldrb	r3, [r5, #0]
 8006e06:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e08:	d10c      	bne.n	8006e24 <_svfiprintf_r+0x134>
 8006e0a:	786b      	ldrb	r3, [r5, #1]
 8006e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e0e:	d134      	bne.n	8006e7a <_svfiprintf_r+0x18a>
 8006e10:	9b07      	ldr	r3, [sp, #28]
 8006e12:	3502      	adds	r5, #2
 8006e14:	1d1a      	adds	r2, r3, #4
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	9207      	str	r2, [sp, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	da01      	bge.n	8006e22 <_svfiprintf_r+0x132>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	425b      	negs	r3, r3
 8006e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e24:	4e2d      	ldr	r6, [pc, #180]	@ (8006edc <_svfiprintf_r+0x1ec>)
 8006e26:	2203      	movs	r2, #3
 8006e28:	0030      	movs	r0, r6
 8006e2a:	7829      	ldrb	r1, [r5, #0]
 8006e2c:	f000 fac4 	bl	80073b8 <memchr>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	d006      	beq.n	8006e42 <_svfiprintf_r+0x152>
 8006e34:	2340      	movs	r3, #64	@ 0x40
 8006e36:	1b80      	subs	r0, r0, r6
 8006e38:	4083      	lsls	r3, r0
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	3501      	adds	r5, #1
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	7829      	ldrb	r1, [r5, #0]
 8006e44:	2206      	movs	r2, #6
 8006e46:	4826      	ldr	r0, [pc, #152]	@ (8006ee0 <_svfiprintf_r+0x1f0>)
 8006e48:	1c6e      	adds	r6, r5, #1
 8006e4a:	7621      	strb	r1, [r4, #24]
 8006e4c:	f000 fab4 	bl	80073b8 <memchr>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d038      	beq.n	8006ec6 <_svfiprintf_r+0x1d6>
 8006e54:	4b23      	ldr	r3, [pc, #140]	@ (8006ee4 <_svfiprintf_r+0x1f4>)
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d122      	bne.n	8006ea0 <_svfiprintf_r+0x1b0>
 8006e5a:	2207      	movs	r2, #7
 8006e5c:	9b07      	ldr	r3, [sp, #28]
 8006e5e:	3307      	adds	r3, #7
 8006e60:	4393      	bics	r3, r2
 8006e62:	3308      	adds	r3, #8
 8006e64:	9307      	str	r3, [sp, #28]
 8006e66:	6963      	ldr	r3, [r4, #20]
 8006e68:	9a04      	ldr	r2, [sp, #16]
 8006e6a:	189b      	adds	r3, r3, r2
 8006e6c:	6163      	str	r3, [r4, #20]
 8006e6e:	e762      	b.n	8006d36 <_svfiprintf_r+0x46>
 8006e70:	4343      	muls	r3, r0
 8006e72:	0035      	movs	r5, r6
 8006e74:	2101      	movs	r1, #1
 8006e76:	189b      	adds	r3, r3, r2
 8006e78:	e7a4      	b.n	8006dc4 <_svfiprintf_r+0xd4>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	200a      	movs	r0, #10
 8006e7e:	0019      	movs	r1, r3
 8006e80:	3501      	adds	r5, #1
 8006e82:	6063      	str	r3, [r4, #4]
 8006e84:	782a      	ldrb	r2, [r5, #0]
 8006e86:	1c6e      	adds	r6, r5, #1
 8006e88:	3a30      	subs	r2, #48	@ 0x30
 8006e8a:	2a09      	cmp	r2, #9
 8006e8c:	d903      	bls.n	8006e96 <_svfiprintf_r+0x1a6>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0c8      	beq.n	8006e24 <_svfiprintf_r+0x134>
 8006e92:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e94:	e7c6      	b.n	8006e24 <_svfiprintf_r+0x134>
 8006e96:	4341      	muls	r1, r0
 8006e98:	0035      	movs	r5, r6
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	1889      	adds	r1, r1, r2
 8006e9e:	e7f1      	b.n	8006e84 <_svfiprintf_r+0x194>
 8006ea0:	aa07      	add	r2, sp, #28
 8006ea2:	9200      	str	r2, [sp, #0]
 8006ea4:	0021      	movs	r1, r4
 8006ea6:	003a      	movs	r2, r7
 8006ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee8 <_svfiprintf_r+0x1f8>)
 8006eaa:	9803      	ldr	r0, [sp, #12]
 8006eac:	e000      	b.n	8006eb0 <_svfiprintf_r+0x1c0>
 8006eae:	bf00      	nop
 8006eb0:	9004      	str	r0, [sp, #16]
 8006eb2:	9b04      	ldr	r3, [sp, #16]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	d1d6      	bne.n	8006e66 <_svfiprintf_r+0x176>
 8006eb8:	89bb      	ldrh	r3, [r7, #12]
 8006eba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006ebc:	065b      	lsls	r3, r3, #25
 8006ebe:	d500      	bpl.n	8006ec2 <_svfiprintf_r+0x1d2>
 8006ec0:	e72c      	b.n	8006d1c <_svfiprintf_r+0x2c>
 8006ec2:	b021      	add	sp, #132	@ 0x84
 8006ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec6:	aa07      	add	r2, sp, #28
 8006ec8:	9200      	str	r2, [sp, #0]
 8006eca:	0021      	movs	r1, r4
 8006ecc:	003a      	movs	r2, r7
 8006ece:	4b06      	ldr	r3, [pc, #24]	@ (8006ee8 <_svfiprintf_r+0x1f8>)
 8006ed0:	9803      	ldr	r0, [sp, #12]
 8006ed2:	f000 f87b 	bl	8006fcc <_printf_i>
 8006ed6:	e7eb      	b.n	8006eb0 <_svfiprintf_r+0x1c0>
 8006ed8:	08007d9a 	.word	0x08007d9a
 8006edc:	08007da0 	.word	0x08007da0
 8006ee0:	08007da4 	.word	0x08007da4
 8006ee4:	00000000 	.word	0x00000000
 8006ee8:	08006c31 	.word	0x08006c31

08006eec <_printf_common>:
 8006eec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eee:	0016      	movs	r6, r2
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	688a      	ldr	r2, [r1, #8]
 8006ef4:	690b      	ldr	r3, [r1, #16]
 8006ef6:	000c      	movs	r4, r1
 8006ef8:	9000      	str	r0, [sp, #0]
 8006efa:	4293      	cmp	r3, r2
 8006efc:	da00      	bge.n	8006f00 <_printf_common+0x14>
 8006efe:	0013      	movs	r3, r2
 8006f00:	0022      	movs	r2, r4
 8006f02:	6033      	str	r3, [r6, #0]
 8006f04:	3243      	adds	r2, #67	@ 0x43
 8006f06:	7812      	ldrb	r2, [r2, #0]
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	d001      	beq.n	8006f10 <_printf_common+0x24>
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	6033      	str	r3, [r6, #0]
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	069b      	lsls	r3, r3, #26
 8006f14:	d502      	bpl.n	8006f1c <_printf_common+0x30>
 8006f16:	6833      	ldr	r3, [r6, #0]
 8006f18:	3302      	adds	r3, #2
 8006f1a:	6033      	str	r3, [r6, #0]
 8006f1c:	6822      	ldr	r2, [r4, #0]
 8006f1e:	2306      	movs	r3, #6
 8006f20:	0015      	movs	r5, r2
 8006f22:	401d      	ands	r5, r3
 8006f24:	421a      	tst	r2, r3
 8006f26:	d027      	beq.n	8006f78 <_printf_common+0x8c>
 8006f28:	0023      	movs	r3, r4
 8006f2a:	3343      	adds	r3, #67	@ 0x43
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	1e5a      	subs	r2, r3, #1
 8006f30:	4193      	sbcs	r3, r2
 8006f32:	6822      	ldr	r2, [r4, #0]
 8006f34:	0692      	lsls	r2, r2, #26
 8006f36:	d430      	bmi.n	8006f9a <_printf_common+0xae>
 8006f38:	0022      	movs	r2, r4
 8006f3a:	9901      	ldr	r1, [sp, #4]
 8006f3c:	9800      	ldr	r0, [sp, #0]
 8006f3e:	9d08      	ldr	r5, [sp, #32]
 8006f40:	3243      	adds	r2, #67	@ 0x43
 8006f42:	47a8      	blx	r5
 8006f44:	3001      	adds	r0, #1
 8006f46:	d025      	beq.n	8006f94 <_printf_common+0xa8>
 8006f48:	2206      	movs	r2, #6
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	2500      	movs	r5, #0
 8006f4e:	4013      	ands	r3, r2
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	d105      	bne.n	8006f60 <_printf_common+0x74>
 8006f54:	6833      	ldr	r3, [r6, #0]
 8006f56:	68e5      	ldr	r5, [r4, #12]
 8006f58:	1aed      	subs	r5, r5, r3
 8006f5a:	43eb      	mvns	r3, r5
 8006f5c:	17db      	asrs	r3, r3, #31
 8006f5e:	401d      	ands	r5, r3
 8006f60:	68a3      	ldr	r3, [r4, #8]
 8006f62:	6922      	ldr	r2, [r4, #16]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	dd01      	ble.n	8006f6c <_printf_common+0x80>
 8006f68:	1a9b      	subs	r3, r3, r2
 8006f6a:	18ed      	adds	r5, r5, r3
 8006f6c:	2600      	movs	r6, #0
 8006f6e:	42b5      	cmp	r5, r6
 8006f70:	d120      	bne.n	8006fb4 <_printf_common+0xc8>
 8006f72:	2000      	movs	r0, #0
 8006f74:	e010      	b.n	8006f98 <_printf_common+0xac>
 8006f76:	3501      	adds	r5, #1
 8006f78:	68e3      	ldr	r3, [r4, #12]
 8006f7a:	6832      	ldr	r2, [r6, #0]
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	42ab      	cmp	r3, r5
 8006f80:	ddd2      	ble.n	8006f28 <_printf_common+0x3c>
 8006f82:	0022      	movs	r2, r4
 8006f84:	2301      	movs	r3, #1
 8006f86:	9901      	ldr	r1, [sp, #4]
 8006f88:	9800      	ldr	r0, [sp, #0]
 8006f8a:	9f08      	ldr	r7, [sp, #32]
 8006f8c:	3219      	adds	r2, #25
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	d1f0      	bne.n	8006f76 <_printf_common+0x8a>
 8006f94:	2001      	movs	r0, #1
 8006f96:	4240      	negs	r0, r0
 8006f98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f9a:	2030      	movs	r0, #48	@ 0x30
 8006f9c:	18e1      	adds	r1, r4, r3
 8006f9e:	3143      	adds	r1, #67	@ 0x43
 8006fa0:	7008      	strb	r0, [r1, #0]
 8006fa2:	0021      	movs	r1, r4
 8006fa4:	1c5a      	adds	r2, r3, #1
 8006fa6:	3145      	adds	r1, #69	@ 0x45
 8006fa8:	7809      	ldrb	r1, [r1, #0]
 8006faa:	18a2      	adds	r2, r4, r2
 8006fac:	3243      	adds	r2, #67	@ 0x43
 8006fae:	3302      	adds	r3, #2
 8006fb0:	7011      	strb	r1, [r2, #0]
 8006fb2:	e7c1      	b.n	8006f38 <_printf_common+0x4c>
 8006fb4:	0022      	movs	r2, r4
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	9901      	ldr	r1, [sp, #4]
 8006fba:	9800      	ldr	r0, [sp, #0]
 8006fbc:	9f08      	ldr	r7, [sp, #32]
 8006fbe:	321a      	adds	r2, #26
 8006fc0:	47b8      	blx	r7
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d0e6      	beq.n	8006f94 <_printf_common+0xa8>
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	e7d1      	b.n	8006f6e <_printf_common+0x82>
	...

08006fcc <_printf_i>:
 8006fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fce:	b08b      	sub	sp, #44	@ 0x2c
 8006fd0:	9206      	str	r2, [sp, #24]
 8006fd2:	000a      	movs	r2, r1
 8006fd4:	3243      	adds	r2, #67	@ 0x43
 8006fd6:	9307      	str	r3, [sp, #28]
 8006fd8:	9005      	str	r0, [sp, #20]
 8006fda:	9203      	str	r2, [sp, #12]
 8006fdc:	7e0a      	ldrb	r2, [r1, #24]
 8006fde:	000c      	movs	r4, r1
 8006fe0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fe2:	2a78      	cmp	r2, #120	@ 0x78
 8006fe4:	d809      	bhi.n	8006ffa <_printf_i+0x2e>
 8006fe6:	2a62      	cmp	r2, #98	@ 0x62
 8006fe8:	d80b      	bhi.n	8007002 <_printf_i+0x36>
 8006fea:	2a00      	cmp	r2, #0
 8006fec:	d100      	bne.n	8006ff0 <_printf_i+0x24>
 8006fee:	e0bc      	b.n	800716a <_printf_i+0x19e>
 8006ff0:	497b      	ldr	r1, [pc, #492]	@ (80071e0 <_printf_i+0x214>)
 8006ff2:	9104      	str	r1, [sp, #16]
 8006ff4:	2a58      	cmp	r2, #88	@ 0x58
 8006ff6:	d100      	bne.n	8006ffa <_printf_i+0x2e>
 8006ff8:	e090      	b.n	800711c <_printf_i+0x150>
 8006ffa:	0025      	movs	r5, r4
 8006ffc:	3542      	adds	r5, #66	@ 0x42
 8006ffe:	702a      	strb	r2, [r5, #0]
 8007000:	e022      	b.n	8007048 <_printf_i+0x7c>
 8007002:	0010      	movs	r0, r2
 8007004:	3863      	subs	r0, #99	@ 0x63
 8007006:	2815      	cmp	r0, #21
 8007008:	d8f7      	bhi.n	8006ffa <_printf_i+0x2e>
 800700a:	f7f9 f899 	bl	8000140 <__gnu_thumb1_case_shi>
 800700e:	0016      	.short	0x0016
 8007010:	fff6001f 	.word	0xfff6001f
 8007014:	fff6fff6 	.word	0xfff6fff6
 8007018:	001ffff6 	.word	0x001ffff6
 800701c:	fff6fff6 	.word	0xfff6fff6
 8007020:	fff6fff6 	.word	0xfff6fff6
 8007024:	003600a1 	.word	0x003600a1
 8007028:	fff60080 	.word	0xfff60080
 800702c:	00b2fff6 	.word	0x00b2fff6
 8007030:	0036fff6 	.word	0x0036fff6
 8007034:	fff6fff6 	.word	0xfff6fff6
 8007038:	0084      	.short	0x0084
 800703a:	0025      	movs	r5, r4
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	3542      	adds	r5, #66	@ 0x42
 8007040:	1d11      	adds	r1, r2, #4
 8007042:	6019      	str	r1, [r3, #0]
 8007044:	6813      	ldr	r3, [r2, #0]
 8007046:	702b      	strb	r3, [r5, #0]
 8007048:	2301      	movs	r3, #1
 800704a:	e0a0      	b.n	800718e <_printf_i+0x1c2>
 800704c:	6818      	ldr	r0, [r3, #0]
 800704e:	6809      	ldr	r1, [r1, #0]
 8007050:	1d02      	adds	r2, r0, #4
 8007052:	060d      	lsls	r5, r1, #24
 8007054:	d50b      	bpl.n	800706e <_printf_i+0xa2>
 8007056:	6806      	ldr	r6, [r0, #0]
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	2e00      	cmp	r6, #0
 800705c:	da03      	bge.n	8007066 <_printf_i+0x9a>
 800705e:	232d      	movs	r3, #45	@ 0x2d
 8007060:	9a03      	ldr	r2, [sp, #12]
 8007062:	4276      	negs	r6, r6
 8007064:	7013      	strb	r3, [r2, #0]
 8007066:	4b5e      	ldr	r3, [pc, #376]	@ (80071e0 <_printf_i+0x214>)
 8007068:	270a      	movs	r7, #10
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	e018      	b.n	80070a0 <_printf_i+0xd4>
 800706e:	6806      	ldr	r6, [r0, #0]
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	0649      	lsls	r1, r1, #25
 8007074:	d5f1      	bpl.n	800705a <_printf_i+0x8e>
 8007076:	b236      	sxth	r6, r6
 8007078:	e7ef      	b.n	800705a <_printf_i+0x8e>
 800707a:	6808      	ldr	r0, [r1, #0]
 800707c:	6819      	ldr	r1, [r3, #0]
 800707e:	c940      	ldmia	r1!, {r6}
 8007080:	0605      	lsls	r5, r0, #24
 8007082:	d402      	bmi.n	800708a <_printf_i+0xbe>
 8007084:	0640      	lsls	r0, r0, #25
 8007086:	d500      	bpl.n	800708a <_printf_i+0xbe>
 8007088:	b2b6      	uxth	r6, r6
 800708a:	6019      	str	r1, [r3, #0]
 800708c:	4b54      	ldr	r3, [pc, #336]	@ (80071e0 <_printf_i+0x214>)
 800708e:	270a      	movs	r7, #10
 8007090:	9304      	str	r3, [sp, #16]
 8007092:	2a6f      	cmp	r2, #111	@ 0x6f
 8007094:	d100      	bne.n	8007098 <_printf_i+0xcc>
 8007096:	3f02      	subs	r7, #2
 8007098:	0023      	movs	r3, r4
 800709a:	2200      	movs	r2, #0
 800709c:	3343      	adds	r3, #67	@ 0x43
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	6863      	ldr	r3, [r4, #4]
 80070a2:	60a3      	str	r3, [r4, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	db03      	blt.n	80070b0 <_printf_i+0xe4>
 80070a8:	2104      	movs	r1, #4
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	438a      	bics	r2, r1
 80070ae:	6022      	str	r2, [r4, #0]
 80070b0:	2e00      	cmp	r6, #0
 80070b2:	d102      	bne.n	80070ba <_printf_i+0xee>
 80070b4:	9d03      	ldr	r5, [sp, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00c      	beq.n	80070d4 <_printf_i+0x108>
 80070ba:	9d03      	ldr	r5, [sp, #12]
 80070bc:	0030      	movs	r0, r6
 80070be:	0039      	movs	r1, r7
 80070c0:	f7f9 f8d8 	bl	8000274 <__aeabi_uidivmod>
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	3d01      	subs	r5, #1
 80070c8:	5c5b      	ldrb	r3, [r3, r1]
 80070ca:	702b      	strb	r3, [r5, #0]
 80070cc:	0033      	movs	r3, r6
 80070ce:	0006      	movs	r6, r0
 80070d0:	429f      	cmp	r7, r3
 80070d2:	d9f3      	bls.n	80070bc <_printf_i+0xf0>
 80070d4:	2f08      	cmp	r7, #8
 80070d6:	d109      	bne.n	80070ec <_printf_i+0x120>
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	07db      	lsls	r3, r3, #31
 80070dc:	d506      	bpl.n	80070ec <_printf_i+0x120>
 80070de:	6862      	ldr	r2, [r4, #4]
 80070e0:	6923      	ldr	r3, [r4, #16]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	dc02      	bgt.n	80070ec <_printf_i+0x120>
 80070e6:	2330      	movs	r3, #48	@ 0x30
 80070e8:	3d01      	subs	r5, #1
 80070ea:	702b      	strb	r3, [r5, #0]
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	1b5b      	subs	r3, r3, r5
 80070f0:	6123      	str	r3, [r4, #16]
 80070f2:	9b07      	ldr	r3, [sp, #28]
 80070f4:	0021      	movs	r1, r4
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	9805      	ldr	r0, [sp, #20]
 80070fa:	9b06      	ldr	r3, [sp, #24]
 80070fc:	aa09      	add	r2, sp, #36	@ 0x24
 80070fe:	f7ff fef5 	bl	8006eec <_printf_common>
 8007102:	3001      	adds	r0, #1
 8007104:	d148      	bne.n	8007198 <_printf_i+0x1cc>
 8007106:	2001      	movs	r0, #1
 8007108:	4240      	negs	r0, r0
 800710a:	b00b      	add	sp, #44	@ 0x2c
 800710c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800710e:	2220      	movs	r2, #32
 8007110:	6809      	ldr	r1, [r1, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	6022      	str	r2, [r4, #0]
 8007116:	2278      	movs	r2, #120	@ 0x78
 8007118:	4932      	ldr	r1, [pc, #200]	@ (80071e4 <_printf_i+0x218>)
 800711a:	9104      	str	r1, [sp, #16]
 800711c:	0021      	movs	r1, r4
 800711e:	3145      	adds	r1, #69	@ 0x45
 8007120:	700a      	strb	r2, [r1, #0]
 8007122:	6819      	ldr	r1, [r3, #0]
 8007124:	6822      	ldr	r2, [r4, #0]
 8007126:	c940      	ldmia	r1!, {r6}
 8007128:	0610      	lsls	r0, r2, #24
 800712a:	d402      	bmi.n	8007132 <_printf_i+0x166>
 800712c:	0650      	lsls	r0, r2, #25
 800712e:	d500      	bpl.n	8007132 <_printf_i+0x166>
 8007130:	b2b6      	uxth	r6, r6
 8007132:	6019      	str	r1, [r3, #0]
 8007134:	07d3      	lsls	r3, r2, #31
 8007136:	d502      	bpl.n	800713e <_printf_i+0x172>
 8007138:	2320      	movs	r3, #32
 800713a:	4313      	orrs	r3, r2
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	2e00      	cmp	r6, #0
 8007140:	d001      	beq.n	8007146 <_printf_i+0x17a>
 8007142:	2710      	movs	r7, #16
 8007144:	e7a8      	b.n	8007098 <_printf_i+0xcc>
 8007146:	2220      	movs	r2, #32
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	4393      	bics	r3, r2
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	e7f8      	b.n	8007142 <_printf_i+0x176>
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	680d      	ldr	r5, [r1, #0]
 8007154:	1d10      	adds	r0, r2, #4
 8007156:	6949      	ldr	r1, [r1, #20]
 8007158:	6018      	str	r0, [r3, #0]
 800715a:	6813      	ldr	r3, [r2, #0]
 800715c:	062e      	lsls	r6, r5, #24
 800715e:	d501      	bpl.n	8007164 <_printf_i+0x198>
 8007160:	6019      	str	r1, [r3, #0]
 8007162:	e002      	b.n	800716a <_printf_i+0x19e>
 8007164:	066d      	lsls	r5, r5, #25
 8007166:	d5fb      	bpl.n	8007160 <_printf_i+0x194>
 8007168:	8019      	strh	r1, [r3, #0]
 800716a:	2300      	movs	r3, #0
 800716c:	9d03      	ldr	r5, [sp, #12]
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	e7bf      	b.n	80070f2 <_printf_i+0x126>
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	1d11      	adds	r1, r2, #4
 8007176:	6019      	str	r1, [r3, #0]
 8007178:	6815      	ldr	r5, [r2, #0]
 800717a:	2100      	movs	r1, #0
 800717c:	0028      	movs	r0, r5
 800717e:	6862      	ldr	r2, [r4, #4]
 8007180:	f000 f91a 	bl	80073b8 <memchr>
 8007184:	2800      	cmp	r0, #0
 8007186:	d001      	beq.n	800718c <_printf_i+0x1c0>
 8007188:	1b40      	subs	r0, r0, r5
 800718a:	6060      	str	r0, [r4, #4]
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	6123      	str	r3, [r4, #16]
 8007190:	2300      	movs	r3, #0
 8007192:	9a03      	ldr	r2, [sp, #12]
 8007194:	7013      	strb	r3, [r2, #0]
 8007196:	e7ac      	b.n	80070f2 <_printf_i+0x126>
 8007198:	002a      	movs	r2, r5
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	9906      	ldr	r1, [sp, #24]
 800719e:	9805      	ldr	r0, [sp, #20]
 80071a0:	9d07      	ldr	r5, [sp, #28]
 80071a2:	47a8      	blx	r5
 80071a4:	3001      	adds	r0, #1
 80071a6:	d0ae      	beq.n	8007106 <_printf_i+0x13a>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	079b      	lsls	r3, r3, #30
 80071ac:	d415      	bmi.n	80071da <_printf_i+0x20e>
 80071ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071b0:	68e0      	ldr	r0, [r4, #12]
 80071b2:	4298      	cmp	r0, r3
 80071b4:	daa9      	bge.n	800710a <_printf_i+0x13e>
 80071b6:	0018      	movs	r0, r3
 80071b8:	e7a7      	b.n	800710a <_printf_i+0x13e>
 80071ba:	0022      	movs	r2, r4
 80071bc:	2301      	movs	r3, #1
 80071be:	9906      	ldr	r1, [sp, #24]
 80071c0:	9805      	ldr	r0, [sp, #20]
 80071c2:	9e07      	ldr	r6, [sp, #28]
 80071c4:	3219      	adds	r2, #25
 80071c6:	47b0      	blx	r6
 80071c8:	3001      	adds	r0, #1
 80071ca:	d09c      	beq.n	8007106 <_printf_i+0x13a>
 80071cc:	3501      	adds	r5, #1
 80071ce:	68e3      	ldr	r3, [r4, #12]
 80071d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	42ab      	cmp	r3, r5
 80071d6:	dcf0      	bgt.n	80071ba <_printf_i+0x1ee>
 80071d8:	e7e9      	b.n	80071ae <_printf_i+0x1e2>
 80071da:	2500      	movs	r5, #0
 80071dc:	e7f7      	b.n	80071ce <_printf_i+0x202>
 80071de:	46c0      	nop			@ (mov r8, r8)
 80071e0:	08007dab 	.word	0x08007dab
 80071e4:	08007dbc 	.word	0x08007dbc

080071e8 <__sflush_r>:
 80071e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071ea:	220c      	movs	r2, #12
 80071ec:	5e8b      	ldrsh	r3, [r1, r2]
 80071ee:	0005      	movs	r5, r0
 80071f0:	000c      	movs	r4, r1
 80071f2:	071a      	lsls	r2, r3, #28
 80071f4:	d456      	bmi.n	80072a4 <__sflush_r+0xbc>
 80071f6:	684a      	ldr	r2, [r1, #4]
 80071f8:	2a00      	cmp	r2, #0
 80071fa:	dc02      	bgt.n	8007202 <__sflush_r+0x1a>
 80071fc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80071fe:	2a00      	cmp	r2, #0
 8007200:	dd4e      	ble.n	80072a0 <__sflush_r+0xb8>
 8007202:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007204:	2f00      	cmp	r7, #0
 8007206:	d04b      	beq.n	80072a0 <__sflush_r+0xb8>
 8007208:	2200      	movs	r2, #0
 800720a:	2080      	movs	r0, #128	@ 0x80
 800720c:	682e      	ldr	r6, [r5, #0]
 800720e:	602a      	str	r2, [r5, #0]
 8007210:	001a      	movs	r2, r3
 8007212:	0140      	lsls	r0, r0, #5
 8007214:	6a21      	ldr	r1, [r4, #32]
 8007216:	4002      	ands	r2, r0
 8007218:	4203      	tst	r3, r0
 800721a:	d033      	beq.n	8007284 <__sflush_r+0x9c>
 800721c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800721e:	89a3      	ldrh	r3, [r4, #12]
 8007220:	075b      	lsls	r3, r3, #29
 8007222:	d506      	bpl.n	8007232 <__sflush_r+0x4a>
 8007224:	6863      	ldr	r3, [r4, #4]
 8007226:	1ad2      	subs	r2, r2, r3
 8007228:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <__sflush_r+0x4a>
 800722e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007230:	1ad2      	subs	r2, r2, r3
 8007232:	2300      	movs	r3, #0
 8007234:	0028      	movs	r0, r5
 8007236:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007238:	6a21      	ldr	r1, [r4, #32]
 800723a:	47b8      	blx	r7
 800723c:	89a2      	ldrh	r2, [r4, #12]
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	d106      	bne.n	8007250 <__sflush_r+0x68>
 8007242:	6829      	ldr	r1, [r5, #0]
 8007244:	291d      	cmp	r1, #29
 8007246:	d846      	bhi.n	80072d6 <__sflush_r+0xee>
 8007248:	4b29      	ldr	r3, [pc, #164]	@ (80072f0 <__sflush_r+0x108>)
 800724a:	410b      	asrs	r3, r1
 800724c:	07db      	lsls	r3, r3, #31
 800724e:	d442      	bmi.n	80072d6 <__sflush_r+0xee>
 8007250:	2300      	movs	r3, #0
 8007252:	6063      	str	r3, [r4, #4]
 8007254:	6923      	ldr	r3, [r4, #16]
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	04d2      	lsls	r2, r2, #19
 800725a:	d505      	bpl.n	8007268 <__sflush_r+0x80>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <__sflush_r+0x7e>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d100      	bne.n	8007268 <__sflush_r+0x80>
 8007266:	6560      	str	r0, [r4, #84]	@ 0x54
 8007268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800726a:	602e      	str	r6, [r5, #0]
 800726c:	2900      	cmp	r1, #0
 800726e:	d017      	beq.n	80072a0 <__sflush_r+0xb8>
 8007270:	0023      	movs	r3, r4
 8007272:	3344      	adds	r3, #68	@ 0x44
 8007274:	4299      	cmp	r1, r3
 8007276:	d002      	beq.n	800727e <__sflush_r+0x96>
 8007278:	0028      	movs	r0, r5
 800727a:	f7ff fbd3 	bl	8006a24 <_free_r>
 800727e:	2300      	movs	r3, #0
 8007280:	6363      	str	r3, [r4, #52]	@ 0x34
 8007282:	e00d      	b.n	80072a0 <__sflush_r+0xb8>
 8007284:	2301      	movs	r3, #1
 8007286:	0028      	movs	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	0002      	movs	r2, r0
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	d1c6      	bne.n	800721e <__sflush_r+0x36>
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0c3      	beq.n	800721e <__sflush_r+0x36>
 8007296:	2b1d      	cmp	r3, #29
 8007298:	d001      	beq.n	800729e <__sflush_r+0xb6>
 800729a:	2b16      	cmp	r3, #22
 800729c:	d11a      	bne.n	80072d4 <__sflush_r+0xec>
 800729e:	602e      	str	r6, [r5, #0]
 80072a0:	2000      	movs	r0, #0
 80072a2:	e01e      	b.n	80072e2 <__sflush_r+0xfa>
 80072a4:	690e      	ldr	r6, [r1, #16]
 80072a6:	2e00      	cmp	r6, #0
 80072a8:	d0fa      	beq.n	80072a0 <__sflush_r+0xb8>
 80072aa:	680f      	ldr	r7, [r1, #0]
 80072ac:	600e      	str	r6, [r1, #0]
 80072ae:	1bba      	subs	r2, r7, r6
 80072b0:	9201      	str	r2, [sp, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	079b      	lsls	r3, r3, #30
 80072b6:	d100      	bne.n	80072ba <__sflush_r+0xd2>
 80072b8:	694a      	ldr	r2, [r1, #20]
 80072ba:	60a2      	str	r2, [r4, #8]
 80072bc:	9b01      	ldr	r3, [sp, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	ddee      	ble.n	80072a0 <__sflush_r+0xb8>
 80072c2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80072c4:	0032      	movs	r2, r6
 80072c6:	001f      	movs	r7, r3
 80072c8:	0028      	movs	r0, r5
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	6a21      	ldr	r1, [r4, #32]
 80072ce:	47b8      	blx	r7
 80072d0:	2800      	cmp	r0, #0
 80072d2:	dc07      	bgt.n	80072e4 <__sflush_r+0xfc>
 80072d4:	89a2      	ldrh	r2, [r4, #12]
 80072d6:	2340      	movs	r3, #64	@ 0x40
 80072d8:	2001      	movs	r0, #1
 80072da:	4313      	orrs	r3, r2
 80072dc:	b21b      	sxth	r3, r3
 80072de:	81a3      	strh	r3, [r4, #12]
 80072e0:	4240      	negs	r0, r0
 80072e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072e4:	9b01      	ldr	r3, [sp, #4]
 80072e6:	1836      	adds	r6, r6, r0
 80072e8:	1a1b      	subs	r3, r3, r0
 80072ea:	9301      	str	r3, [sp, #4]
 80072ec:	e7e6      	b.n	80072bc <__sflush_r+0xd4>
 80072ee:	46c0      	nop			@ (mov r8, r8)
 80072f0:	dfbffffe 	.word	0xdfbffffe

080072f4 <_fflush_r>:
 80072f4:	690b      	ldr	r3, [r1, #16]
 80072f6:	b570      	push	{r4, r5, r6, lr}
 80072f8:	0005      	movs	r5, r0
 80072fa:	000c      	movs	r4, r1
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <_fflush_r+0x12>
 8007300:	2500      	movs	r5, #0
 8007302:	0028      	movs	r0, r5
 8007304:	bd70      	pop	{r4, r5, r6, pc}
 8007306:	2800      	cmp	r0, #0
 8007308:	d004      	beq.n	8007314 <_fflush_r+0x20>
 800730a:	6a03      	ldr	r3, [r0, #32]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <_fflush_r+0x20>
 8007310:	f7ff f9d6 	bl	80066c0 <__sinit>
 8007314:	220c      	movs	r2, #12
 8007316:	5ea3      	ldrsh	r3, [r4, r2]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0f1      	beq.n	8007300 <_fflush_r+0xc>
 800731c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800731e:	07d2      	lsls	r2, r2, #31
 8007320:	d404      	bmi.n	800732c <_fflush_r+0x38>
 8007322:	059b      	lsls	r3, r3, #22
 8007324:	d402      	bmi.n	800732c <_fflush_r+0x38>
 8007326:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007328:	f7ff fb4b 	bl	80069c2 <__retarget_lock_acquire_recursive>
 800732c:	0028      	movs	r0, r5
 800732e:	0021      	movs	r1, r4
 8007330:	f7ff ff5a 	bl	80071e8 <__sflush_r>
 8007334:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007336:	0005      	movs	r5, r0
 8007338:	07db      	lsls	r3, r3, #31
 800733a:	d4e2      	bmi.n	8007302 <_fflush_r+0xe>
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	059b      	lsls	r3, r3, #22
 8007340:	d4df      	bmi.n	8007302 <_fflush_r+0xe>
 8007342:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007344:	f7ff fb3e 	bl	80069c4 <__retarget_lock_release_recursive>
 8007348:	e7db      	b.n	8007302 <_fflush_r+0xe>
	...

0800734c <fiprintf>:
 800734c:	b40e      	push	{r1, r2, r3}
 800734e:	b517      	push	{r0, r1, r2, r4, lr}
 8007350:	4c05      	ldr	r4, [pc, #20]	@ (8007368 <fiprintf+0x1c>)
 8007352:	ab05      	add	r3, sp, #20
 8007354:	cb04      	ldmia	r3!, {r2}
 8007356:	0001      	movs	r1, r0
 8007358:	6820      	ldr	r0, [r4, #0]
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	f000 f894 	bl	8007488 <_vfiprintf_r>
 8007360:	bc1e      	pop	{r1, r2, r3, r4}
 8007362:	bc08      	pop	{r3}
 8007364:	b003      	add	sp, #12
 8007366:	4718      	bx	r3
 8007368:	2000019c 	.word	0x2000019c

0800736c <memmove>:
 800736c:	b510      	push	{r4, lr}
 800736e:	4288      	cmp	r0, r1
 8007370:	d806      	bhi.n	8007380 <memmove+0x14>
 8007372:	2300      	movs	r3, #0
 8007374:	429a      	cmp	r2, r3
 8007376:	d008      	beq.n	800738a <memmove+0x1e>
 8007378:	5ccc      	ldrb	r4, [r1, r3]
 800737a:	54c4      	strb	r4, [r0, r3]
 800737c:	3301      	adds	r3, #1
 800737e:	e7f9      	b.n	8007374 <memmove+0x8>
 8007380:	188b      	adds	r3, r1, r2
 8007382:	4298      	cmp	r0, r3
 8007384:	d2f5      	bcs.n	8007372 <memmove+0x6>
 8007386:	3a01      	subs	r2, #1
 8007388:	d200      	bcs.n	800738c <memmove+0x20>
 800738a:	bd10      	pop	{r4, pc}
 800738c:	5c8b      	ldrb	r3, [r1, r2]
 800738e:	5483      	strb	r3, [r0, r2]
 8007390:	e7f9      	b.n	8007386 <memmove+0x1a>
	...

08007394 <_sbrk_r>:
 8007394:	2300      	movs	r3, #0
 8007396:	b570      	push	{r4, r5, r6, lr}
 8007398:	4d06      	ldr	r5, [pc, #24]	@ (80073b4 <_sbrk_r+0x20>)
 800739a:	0004      	movs	r4, r0
 800739c:	0008      	movs	r0, r1
 800739e:	602b      	str	r3, [r5, #0]
 80073a0:	f7fa fec8 	bl	8002134 <_sbrk>
 80073a4:	1c43      	adds	r3, r0, #1
 80073a6:	d103      	bne.n	80073b0 <_sbrk_r+0x1c>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d000      	beq.n	80073b0 <_sbrk_r+0x1c>
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	bd70      	pop	{r4, r5, r6, pc}
 80073b2:	46c0      	nop			@ (mov r8, r8)
 80073b4:	20001b38 	.word	0x20001b38

080073b8 <memchr>:
 80073b8:	b2c9      	uxtb	r1, r1
 80073ba:	1882      	adds	r2, r0, r2
 80073bc:	4290      	cmp	r0, r2
 80073be:	d101      	bne.n	80073c4 <memchr+0xc>
 80073c0:	2000      	movs	r0, #0
 80073c2:	4770      	bx	lr
 80073c4:	7803      	ldrb	r3, [r0, #0]
 80073c6:	428b      	cmp	r3, r1
 80073c8:	d0fb      	beq.n	80073c2 <memchr+0xa>
 80073ca:	3001      	adds	r0, #1
 80073cc:	e7f6      	b.n	80073bc <memchr+0x4>

080073ce <abort>:
 80073ce:	2006      	movs	r0, #6
 80073d0:	b510      	push	{r4, lr}
 80073d2:	f000 fa3f 	bl	8007854 <raise>
 80073d6:	2001      	movs	r0, #1
 80073d8:	f7fa fe80 	bl	80020dc <_exit>

080073dc <_realloc_r>:
 80073dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073de:	0006      	movs	r6, r0
 80073e0:	000c      	movs	r4, r1
 80073e2:	0015      	movs	r5, r2
 80073e4:	2900      	cmp	r1, #0
 80073e6:	d105      	bne.n	80073f4 <_realloc_r+0x18>
 80073e8:	0011      	movs	r1, r2
 80073ea:	f7ff fb91 	bl	8006b10 <_malloc_r>
 80073ee:	0004      	movs	r4, r0
 80073f0:	0020      	movs	r0, r4
 80073f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073f4:	2a00      	cmp	r2, #0
 80073f6:	d103      	bne.n	8007400 <_realloc_r+0x24>
 80073f8:	f7ff fb14 	bl	8006a24 <_free_r>
 80073fc:	2400      	movs	r4, #0
 80073fe:	e7f7      	b.n	80073f0 <_realloc_r+0x14>
 8007400:	f000 fa48 	bl	8007894 <_malloc_usable_size_r>
 8007404:	0007      	movs	r7, r0
 8007406:	4285      	cmp	r5, r0
 8007408:	d802      	bhi.n	8007410 <_realloc_r+0x34>
 800740a:	0843      	lsrs	r3, r0, #1
 800740c:	42ab      	cmp	r3, r5
 800740e:	d3ef      	bcc.n	80073f0 <_realloc_r+0x14>
 8007410:	0029      	movs	r1, r5
 8007412:	0030      	movs	r0, r6
 8007414:	f7ff fb7c 	bl	8006b10 <_malloc_r>
 8007418:	9001      	str	r0, [sp, #4]
 800741a:	2800      	cmp	r0, #0
 800741c:	d0ee      	beq.n	80073fc <_realloc_r+0x20>
 800741e:	002a      	movs	r2, r5
 8007420:	42bd      	cmp	r5, r7
 8007422:	d900      	bls.n	8007426 <_realloc_r+0x4a>
 8007424:	003a      	movs	r2, r7
 8007426:	0021      	movs	r1, r4
 8007428:	9801      	ldr	r0, [sp, #4]
 800742a:	f7ff fad4 	bl	80069d6 <memcpy>
 800742e:	0021      	movs	r1, r4
 8007430:	0030      	movs	r0, r6
 8007432:	f7ff faf7 	bl	8006a24 <_free_r>
 8007436:	9c01      	ldr	r4, [sp, #4]
 8007438:	e7da      	b.n	80073f0 <_realloc_r+0x14>

0800743a <__sfputc_r>:
 800743a:	6893      	ldr	r3, [r2, #8]
 800743c:	b510      	push	{r4, lr}
 800743e:	3b01      	subs	r3, #1
 8007440:	6093      	str	r3, [r2, #8]
 8007442:	2b00      	cmp	r3, #0
 8007444:	da04      	bge.n	8007450 <__sfputc_r+0x16>
 8007446:	6994      	ldr	r4, [r2, #24]
 8007448:	42a3      	cmp	r3, r4
 800744a:	db07      	blt.n	800745c <__sfputc_r+0x22>
 800744c:	290a      	cmp	r1, #10
 800744e:	d005      	beq.n	800745c <__sfputc_r+0x22>
 8007450:	6813      	ldr	r3, [r2, #0]
 8007452:	1c58      	adds	r0, r3, #1
 8007454:	6010      	str	r0, [r2, #0]
 8007456:	7019      	strb	r1, [r3, #0]
 8007458:	0008      	movs	r0, r1
 800745a:	bd10      	pop	{r4, pc}
 800745c:	f000 f930 	bl	80076c0 <__swbuf_r>
 8007460:	0001      	movs	r1, r0
 8007462:	e7f9      	b.n	8007458 <__sfputc_r+0x1e>

08007464 <__sfputs_r>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	0006      	movs	r6, r0
 8007468:	000f      	movs	r7, r1
 800746a:	0014      	movs	r4, r2
 800746c:	18d5      	adds	r5, r2, r3
 800746e:	42ac      	cmp	r4, r5
 8007470:	d101      	bne.n	8007476 <__sfputs_r+0x12>
 8007472:	2000      	movs	r0, #0
 8007474:	e007      	b.n	8007486 <__sfputs_r+0x22>
 8007476:	7821      	ldrb	r1, [r4, #0]
 8007478:	003a      	movs	r2, r7
 800747a:	0030      	movs	r0, r6
 800747c:	f7ff ffdd 	bl	800743a <__sfputc_r>
 8007480:	3401      	adds	r4, #1
 8007482:	1c43      	adds	r3, r0, #1
 8007484:	d1f3      	bne.n	800746e <__sfputs_r+0xa>
 8007486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007488 <_vfiprintf_r>:
 8007488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800748a:	b0a1      	sub	sp, #132	@ 0x84
 800748c:	000f      	movs	r7, r1
 800748e:	0015      	movs	r5, r2
 8007490:	001e      	movs	r6, r3
 8007492:	9003      	str	r0, [sp, #12]
 8007494:	2800      	cmp	r0, #0
 8007496:	d004      	beq.n	80074a2 <_vfiprintf_r+0x1a>
 8007498:	6a03      	ldr	r3, [r0, #32]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <_vfiprintf_r+0x1a>
 800749e:	f7ff f90f 	bl	80066c0 <__sinit>
 80074a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074a4:	07db      	lsls	r3, r3, #31
 80074a6:	d405      	bmi.n	80074b4 <_vfiprintf_r+0x2c>
 80074a8:	89bb      	ldrh	r3, [r7, #12]
 80074aa:	059b      	lsls	r3, r3, #22
 80074ac:	d402      	bmi.n	80074b4 <_vfiprintf_r+0x2c>
 80074ae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80074b0:	f7ff fa87 	bl	80069c2 <__retarget_lock_acquire_recursive>
 80074b4:	89bb      	ldrh	r3, [r7, #12]
 80074b6:	071b      	lsls	r3, r3, #28
 80074b8:	d502      	bpl.n	80074c0 <_vfiprintf_r+0x38>
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d113      	bne.n	80074e8 <_vfiprintf_r+0x60>
 80074c0:	0039      	movs	r1, r7
 80074c2:	9803      	ldr	r0, [sp, #12]
 80074c4:	f000 f93e 	bl	8007744 <__swsetup_r>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d00d      	beq.n	80074e8 <_vfiprintf_r+0x60>
 80074cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074ce:	07db      	lsls	r3, r3, #31
 80074d0:	d503      	bpl.n	80074da <_vfiprintf_r+0x52>
 80074d2:	2001      	movs	r0, #1
 80074d4:	4240      	negs	r0, r0
 80074d6:	b021      	add	sp, #132	@ 0x84
 80074d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074da:	89bb      	ldrh	r3, [r7, #12]
 80074dc:	059b      	lsls	r3, r3, #22
 80074de:	d4f8      	bmi.n	80074d2 <_vfiprintf_r+0x4a>
 80074e0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80074e2:	f7ff fa6f 	bl	80069c4 <__retarget_lock_release_recursive>
 80074e6:	e7f4      	b.n	80074d2 <_vfiprintf_r+0x4a>
 80074e8:	2300      	movs	r3, #0
 80074ea:	ac08      	add	r4, sp, #32
 80074ec:	6163      	str	r3, [r4, #20]
 80074ee:	3320      	adds	r3, #32
 80074f0:	7663      	strb	r3, [r4, #25]
 80074f2:	3310      	adds	r3, #16
 80074f4:	76a3      	strb	r3, [r4, #26]
 80074f6:	9607      	str	r6, [sp, #28]
 80074f8:	002e      	movs	r6, r5
 80074fa:	7833      	ldrb	r3, [r6, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d001      	beq.n	8007504 <_vfiprintf_r+0x7c>
 8007500:	2b25      	cmp	r3, #37	@ 0x25
 8007502:	d148      	bne.n	8007596 <_vfiprintf_r+0x10e>
 8007504:	1b73      	subs	r3, r6, r5
 8007506:	9305      	str	r3, [sp, #20]
 8007508:	42ae      	cmp	r6, r5
 800750a:	d00b      	beq.n	8007524 <_vfiprintf_r+0x9c>
 800750c:	002a      	movs	r2, r5
 800750e:	0039      	movs	r1, r7
 8007510:	9803      	ldr	r0, [sp, #12]
 8007512:	f7ff ffa7 	bl	8007464 <__sfputs_r>
 8007516:	3001      	adds	r0, #1
 8007518:	d100      	bne.n	800751c <_vfiprintf_r+0x94>
 800751a:	e0ae      	b.n	800767a <_vfiprintf_r+0x1f2>
 800751c:	6963      	ldr	r3, [r4, #20]
 800751e:	9a05      	ldr	r2, [sp, #20]
 8007520:	189b      	adds	r3, r3, r2
 8007522:	6163      	str	r3, [r4, #20]
 8007524:	7833      	ldrb	r3, [r6, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d100      	bne.n	800752c <_vfiprintf_r+0xa4>
 800752a:	e0a6      	b.n	800767a <_vfiprintf_r+0x1f2>
 800752c:	2201      	movs	r2, #1
 800752e:	2300      	movs	r3, #0
 8007530:	4252      	negs	r2, r2
 8007532:	6062      	str	r2, [r4, #4]
 8007534:	a904      	add	r1, sp, #16
 8007536:	3254      	adds	r2, #84	@ 0x54
 8007538:	1852      	adds	r2, r2, r1
 800753a:	1c75      	adds	r5, r6, #1
 800753c:	6023      	str	r3, [r4, #0]
 800753e:	60e3      	str	r3, [r4, #12]
 8007540:	60a3      	str	r3, [r4, #8]
 8007542:	7013      	strb	r3, [r2, #0]
 8007544:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007546:	4b59      	ldr	r3, [pc, #356]	@ (80076ac <_vfiprintf_r+0x224>)
 8007548:	2205      	movs	r2, #5
 800754a:	0018      	movs	r0, r3
 800754c:	7829      	ldrb	r1, [r5, #0]
 800754e:	9305      	str	r3, [sp, #20]
 8007550:	f7ff ff32 	bl	80073b8 <memchr>
 8007554:	1c6e      	adds	r6, r5, #1
 8007556:	2800      	cmp	r0, #0
 8007558:	d11f      	bne.n	800759a <_vfiprintf_r+0x112>
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	06d3      	lsls	r3, r2, #27
 800755e:	d504      	bpl.n	800756a <_vfiprintf_r+0xe2>
 8007560:	2353      	movs	r3, #83	@ 0x53
 8007562:	a904      	add	r1, sp, #16
 8007564:	185b      	adds	r3, r3, r1
 8007566:	2120      	movs	r1, #32
 8007568:	7019      	strb	r1, [r3, #0]
 800756a:	0713      	lsls	r3, r2, #28
 800756c:	d504      	bpl.n	8007578 <_vfiprintf_r+0xf0>
 800756e:	2353      	movs	r3, #83	@ 0x53
 8007570:	a904      	add	r1, sp, #16
 8007572:	185b      	adds	r3, r3, r1
 8007574:	212b      	movs	r1, #43	@ 0x2b
 8007576:	7019      	strb	r1, [r3, #0]
 8007578:	782b      	ldrb	r3, [r5, #0]
 800757a:	2b2a      	cmp	r3, #42	@ 0x2a
 800757c:	d016      	beq.n	80075ac <_vfiprintf_r+0x124>
 800757e:	002e      	movs	r6, r5
 8007580:	2100      	movs	r1, #0
 8007582:	200a      	movs	r0, #10
 8007584:	68e3      	ldr	r3, [r4, #12]
 8007586:	7832      	ldrb	r2, [r6, #0]
 8007588:	1c75      	adds	r5, r6, #1
 800758a:	3a30      	subs	r2, #48	@ 0x30
 800758c:	2a09      	cmp	r2, #9
 800758e:	d950      	bls.n	8007632 <_vfiprintf_r+0x1aa>
 8007590:	2900      	cmp	r1, #0
 8007592:	d111      	bne.n	80075b8 <_vfiprintf_r+0x130>
 8007594:	e017      	b.n	80075c6 <_vfiprintf_r+0x13e>
 8007596:	3601      	adds	r6, #1
 8007598:	e7af      	b.n	80074fa <_vfiprintf_r+0x72>
 800759a:	9b05      	ldr	r3, [sp, #20]
 800759c:	6822      	ldr	r2, [r4, #0]
 800759e:	1ac0      	subs	r0, r0, r3
 80075a0:	2301      	movs	r3, #1
 80075a2:	4083      	lsls	r3, r0
 80075a4:	4313      	orrs	r3, r2
 80075a6:	0035      	movs	r5, r6
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	e7cc      	b.n	8007546 <_vfiprintf_r+0xbe>
 80075ac:	9b07      	ldr	r3, [sp, #28]
 80075ae:	1d19      	adds	r1, r3, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	9107      	str	r1, [sp, #28]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	db01      	blt.n	80075bc <_vfiprintf_r+0x134>
 80075b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075ba:	e004      	b.n	80075c6 <_vfiprintf_r+0x13e>
 80075bc:	425b      	negs	r3, r3
 80075be:	60e3      	str	r3, [r4, #12]
 80075c0:	2302      	movs	r3, #2
 80075c2:	4313      	orrs	r3, r2
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	7833      	ldrb	r3, [r6, #0]
 80075c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80075ca:	d10c      	bne.n	80075e6 <_vfiprintf_r+0x15e>
 80075cc:	7873      	ldrb	r3, [r6, #1]
 80075ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80075d0:	d134      	bne.n	800763c <_vfiprintf_r+0x1b4>
 80075d2:	9b07      	ldr	r3, [sp, #28]
 80075d4:	3602      	adds	r6, #2
 80075d6:	1d1a      	adds	r2, r3, #4
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	9207      	str	r2, [sp, #28]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da01      	bge.n	80075e4 <_vfiprintf_r+0x15c>
 80075e0:	2301      	movs	r3, #1
 80075e2:	425b      	negs	r3, r3
 80075e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075e6:	4d32      	ldr	r5, [pc, #200]	@ (80076b0 <_vfiprintf_r+0x228>)
 80075e8:	2203      	movs	r2, #3
 80075ea:	0028      	movs	r0, r5
 80075ec:	7831      	ldrb	r1, [r6, #0]
 80075ee:	f7ff fee3 	bl	80073b8 <memchr>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d006      	beq.n	8007604 <_vfiprintf_r+0x17c>
 80075f6:	2340      	movs	r3, #64	@ 0x40
 80075f8:	1b40      	subs	r0, r0, r5
 80075fa:	4083      	lsls	r3, r0
 80075fc:	6822      	ldr	r2, [r4, #0]
 80075fe:	3601      	adds	r6, #1
 8007600:	4313      	orrs	r3, r2
 8007602:	6023      	str	r3, [r4, #0]
 8007604:	7831      	ldrb	r1, [r6, #0]
 8007606:	2206      	movs	r2, #6
 8007608:	482a      	ldr	r0, [pc, #168]	@ (80076b4 <_vfiprintf_r+0x22c>)
 800760a:	1c75      	adds	r5, r6, #1
 800760c:	7621      	strb	r1, [r4, #24]
 800760e:	f7ff fed3 	bl	80073b8 <memchr>
 8007612:	2800      	cmp	r0, #0
 8007614:	d040      	beq.n	8007698 <_vfiprintf_r+0x210>
 8007616:	4b28      	ldr	r3, [pc, #160]	@ (80076b8 <_vfiprintf_r+0x230>)
 8007618:	2b00      	cmp	r3, #0
 800761a:	d122      	bne.n	8007662 <_vfiprintf_r+0x1da>
 800761c:	2207      	movs	r2, #7
 800761e:	9b07      	ldr	r3, [sp, #28]
 8007620:	3307      	adds	r3, #7
 8007622:	4393      	bics	r3, r2
 8007624:	3308      	adds	r3, #8
 8007626:	9307      	str	r3, [sp, #28]
 8007628:	6963      	ldr	r3, [r4, #20]
 800762a:	9a04      	ldr	r2, [sp, #16]
 800762c:	189b      	adds	r3, r3, r2
 800762e:	6163      	str	r3, [r4, #20]
 8007630:	e762      	b.n	80074f8 <_vfiprintf_r+0x70>
 8007632:	4343      	muls	r3, r0
 8007634:	002e      	movs	r6, r5
 8007636:	2101      	movs	r1, #1
 8007638:	189b      	adds	r3, r3, r2
 800763a:	e7a4      	b.n	8007586 <_vfiprintf_r+0xfe>
 800763c:	2300      	movs	r3, #0
 800763e:	200a      	movs	r0, #10
 8007640:	0019      	movs	r1, r3
 8007642:	3601      	adds	r6, #1
 8007644:	6063      	str	r3, [r4, #4]
 8007646:	7832      	ldrb	r2, [r6, #0]
 8007648:	1c75      	adds	r5, r6, #1
 800764a:	3a30      	subs	r2, #48	@ 0x30
 800764c:	2a09      	cmp	r2, #9
 800764e:	d903      	bls.n	8007658 <_vfiprintf_r+0x1d0>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0c8      	beq.n	80075e6 <_vfiprintf_r+0x15e>
 8007654:	9109      	str	r1, [sp, #36]	@ 0x24
 8007656:	e7c6      	b.n	80075e6 <_vfiprintf_r+0x15e>
 8007658:	4341      	muls	r1, r0
 800765a:	002e      	movs	r6, r5
 800765c:	2301      	movs	r3, #1
 800765e:	1889      	adds	r1, r1, r2
 8007660:	e7f1      	b.n	8007646 <_vfiprintf_r+0x1be>
 8007662:	aa07      	add	r2, sp, #28
 8007664:	9200      	str	r2, [sp, #0]
 8007666:	0021      	movs	r1, r4
 8007668:	003a      	movs	r2, r7
 800766a:	4b14      	ldr	r3, [pc, #80]	@ (80076bc <_vfiprintf_r+0x234>)
 800766c:	9803      	ldr	r0, [sp, #12]
 800766e:	e000      	b.n	8007672 <_vfiprintf_r+0x1ea>
 8007670:	bf00      	nop
 8007672:	9004      	str	r0, [sp, #16]
 8007674:	9b04      	ldr	r3, [sp, #16]
 8007676:	3301      	adds	r3, #1
 8007678:	d1d6      	bne.n	8007628 <_vfiprintf_r+0x1a0>
 800767a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800767c:	07db      	lsls	r3, r3, #31
 800767e:	d405      	bmi.n	800768c <_vfiprintf_r+0x204>
 8007680:	89bb      	ldrh	r3, [r7, #12]
 8007682:	059b      	lsls	r3, r3, #22
 8007684:	d402      	bmi.n	800768c <_vfiprintf_r+0x204>
 8007686:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007688:	f7ff f99c 	bl	80069c4 <__retarget_lock_release_recursive>
 800768c:	89bb      	ldrh	r3, [r7, #12]
 800768e:	065b      	lsls	r3, r3, #25
 8007690:	d500      	bpl.n	8007694 <_vfiprintf_r+0x20c>
 8007692:	e71e      	b.n	80074d2 <_vfiprintf_r+0x4a>
 8007694:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007696:	e71e      	b.n	80074d6 <_vfiprintf_r+0x4e>
 8007698:	aa07      	add	r2, sp, #28
 800769a:	9200      	str	r2, [sp, #0]
 800769c:	0021      	movs	r1, r4
 800769e:	003a      	movs	r2, r7
 80076a0:	4b06      	ldr	r3, [pc, #24]	@ (80076bc <_vfiprintf_r+0x234>)
 80076a2:	9803      	ldr	r0, [sp, #12]
 80076a4:	f7ff fc92 	bl	8006fcc <_printf_i>
 80076a8:	e7e3      	b.n	8007672 <_vfiprintf_r+0x1ea>
 80076aa:	46c0      	nop			@ (mov r8, r8)
 80076ac:	08007d9a 	.word	0x08007d9a
 80076b0:	08007da0 	.word	0x08007da0
 80076b4:	08007da4 	.word	0x08007da4
 80076b8:	00000000 	.word	0x00000000
 80076bc:	08007465 	.word	0x08007465

080076c0 <__swbuf_r>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	0006      	movs	r6, r0
 80076c4:	000d      	movs	r5, r1
 80076c6:	0014      	movs	r4, r2
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d004      	beq.n	80076d6 <__swbuf_r+0x16>
 80076cc:	6a03      	ldr	r3, [r0, #32]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <__swbuf_r+0x16>
 80076d2:	f7fe fff5 	bl	80066c0 <__sinit>
 80076d6:	69a3      	ldr	r3, [r4, #24]
 80076d8:	60a3      	str	r3, [r4, #8]
 80076da:	89a3      	ldrh	r3, [r4, #12]
 80076dc:	071b      	lsls	r3, r3, #28
 80076de:	d502      	bpl.n	80076e6 <__swbuf_r+0x26>
 80076e0:	6923      	ldr	r3, [r4, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <__swbuf_r+0x3a>
 80076e6:	0021      	movs	r1, r4
 80076e8:	0030      	movs	r0, r6
 80076ea:	f000 f82b 	bl	8007744 <__swsetup_r>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d003      	beq.n	80076fa <__swbuf_r+0x3a>
 80076f2:	2501      	movs	r5, #1
 80076f4:	426d      	negs	r5, r5
 80076f6:	0028      	movs	r0, r5
 80076f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076fa:	6923      	ldr	r3, [r4, #16]
 80076fc:	6820      	ldr	r0, [r4, #0]
 80076fe:	b2ef      	uxtb	r7, r5
 8007700:	1ac0      	subs	r0, r0, r3
 8007702:	6963      	ldr	r3, [r4, #20]
 8007704:	b2ed      	uxtb	r5, r5
 8007706:	4283      	cmp	r3, r0
 8007708:	dc05      	bgt.n	8007716 <__swbuf_r+0x56>
 800770a:	0021      	movs	r1, r4
 800770c:	0030      	movs	r0, r6
 800770e:	f7ff fdf1 	bl	80072f4 <_fflush_r>
 8007712:	2800      	cmp	r0, #0
 8007714:	d1ed      	bne.n	80076f2 <__swbuf_r+0x32>
 8007716:	68a3      	ldr	r3, [r4, #8]
 8007718:	3001      	adds	r0, #1
 800771a:	3b01      	subs	r3, #1
 800771c:	60a3      	str	r3, [r4, #8]
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	6022      	str	r2, [r4, #0]
 8007724:	701f      	strb	r7, [r3, #0]
 8007726:	6963      	ldr	r3, [r4, #20]
 8007728:	4283      	cmp	r3, r0
 800772a:	d004      	beq.n	8007736 <__swbuf_r+0x76>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	07db      	lsls	r3, r3, #31
 8007730:	d5e1      	bpl.n	80076f6 <__swbuf_r+0x36>
 8007732:	2d0a      	cmp	r5, #10
 8007734:	d1df      	bne.n	80076f6 <__swbuf_r+0x36>
 8007736:	0021      	movs	r1, r4
 8007738:	0030      	movs	r0, r6
 800773a:	f7ff fddb 	bl	80072f4 <_fflush_r>
 800773e:	2800      	cmp	r0, #0
 8007740:	d0d9      	beq.n	80076f6 <__swbuf_r+0x36>
 8007742:	e7d6      	b.n	80076f2 <__swbuf_r+0x32>

08007744 <__swsetup_r>:
 8007744:	4b2d      	ldr	r3, [pc, #180]	@ (80077fc <__swsetup_r+0xb8>)
 8007746:	b570      	push	{r4, r5, r6, lr}
 8007748:	0005      	movs	r5, r0
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	000c      	movs	r4, r1
 800774e:	2800      	cmp	r0, #0
 8007750:	d004      	beq.n	800775c <__swsetup_r+0x18>
 8007752:	6a03      	ldr	r3, [r0, #32]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <__swsetup_r+0x18>
 8007758:	f7fe ffb2 	bl	80066c0 <__sinit>
 800775c:	230c      	movs	r3, #12
 800775e:	5ee2      	ldrsh	r2, [r4, r3]
 8007760:	0713      	lsls	r3, r2, #28
 8007762:	d423      	bmi.n	80077ac <__swsetup_r+0x68>
 8007764:	06d3      	lsls	r3, r2, #27
 8007766:	d407      	bmi.n	8007778 <__swsetup_r+0x34>
 8007768:	2309      	movs	r3, #9
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	2340      	movs	r3, #64	@ 0x40
 800776e:	2001      	movs	r0, #1
 8007770:	4313      	orrs	r3, r2
 8007772:	81a3      	strh	r3, [r4, #12]
 8007774:	4240      	negs	r0, r0
 8007776:	e03a      	b.n	80077ee <__swsetup_r+0xaa>
 8007778:	0752      	lsls	r2, r2, #29
 800777a:	d513      	bpl.n	80077a4 <__swsetup_r+0x60>
 800777c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800777e:	2900      	cmp	r1, #0
 8007780:	d008      	beq.n	8007794 <__swsetup_r+0x50>
 8007782:	0023      	movs	r3, r4
 8007784:	3344      	adds	r3, #68	@ 0x44
 8007786:	4299      	cmp	r1, r3
 8007788:	d002      	beq.n	8007790 <__swsetup_r+0x4c>
 800778a:	0028      	movs	r0, r5
 800778c:	f7ff f94a 	bl	8006a24 <_free_r>
 8007790:	2300      	movs	r3, #0
 8007792:	6363      	str	r3, [r4, #52]	@ 0x34
 8007794:	2224      	movs	r2, #36	@ 0x24
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	4393      	bics	r3, r2
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	2300      	movs	r3, #0
 800779e:	6063      	str	r3, [r4, #4]
 80077a0:	6923      	ldr	r3, [r4, #16]
 80077a2:	6023      	str	r3, [r4, #0]
 80077a4:	2308      	movs	r3, #8
 80077a6:	89a2      	ldrh	r2, [r4, #12]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	81a3      	strh	r3, [r4, #12]
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10b      	bne.n	80077ca <__swsetup_r+0x86>
 80077b2:	21a0      	movs	r1, #160	@ 0xa0
 80077b4:	2280      	movs	r2, #128	@ 0x80
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	0089      	lsls	r1, r1, #2
 80077ba:	0092      	lsls	r2, r2, #2
 80077bc:	400b      	ands	r3, r1
 80077be:	4293      	cmp	r3, r2
 80077c0:	d003      	beq.n	80077ca <__swsetup_r+0x86>
 80077c2:	0021      	movs	r1, r4
 80077c4:	0028      	movs	r0, r5
 80077c6:	f000 f897 	bl	80078f8 <__smakebuf_r>
 80077ca:	230c      	movs	r3, #12
 80077cc:	5ee2      	ldrsh	r2, [r4, r3]
 80077ce:	2101      	movs	r1, #1
 80077d0:	0013      	movs	r3, r2
 80077d2:	400b      	ands	r3, r1
 80077d4:	420a      	tst	r2, r1
 80077d6:	d00b      	beq.n	80077f0 <__swsetup_r+0xac>
 80077d8:	2300      	movs	r3, #0
 80077da:	60a3      	str	r3, [r4, #8]
 80077dc:	6963      	ldr	r3, [r4, #20]
 80077de:	425b      	negs	r3, r3
 80077e0:	61a3      	str	r3, [r4, #24]
 80077e2:	2000      	movs	r0, #0
 80077e4:	6923      	ldr	r3, [r4, #16]
 80077e6:	4283      	cmp	r3, r0
 80077e8:	d101      	bne.n	80077ee <__swsetup_r+0xaa>
 80077ea:	0613      	lsls	r3, r2, #24
 80077ec:	d4be      	bmi.n	800776c <__swsetup_r+0x28>
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
 80077f0:	0791      	lsls	r1, r2, #30
 80077f2:	d400      	bmi.n	80077f6 <__swsetup_r+0xb2>
 80077f4:	6963      	ldr	r3, [r4, #20]
 80077f6:	60a3      	str	r3, [r4, #8]
 80077f8:	e7f3      	b.n	80077e2 <__swsetup_r+0x9e>
 80077fa:	46c0      	nop			@ (mov r8, r8)
 80077fc:	2000019c 	.word	0x2000019c

08007800 <_raise_r>:
 8007800:	b570      	push	{r4, r5, r6, lr}
 8007802:	0004      	movs	r4, r0
 8007804:	000d      	movs	r5, r1
 8007806:	291f      	cmp	r1, #31
 8007808:	d904      	bls.n	8007814 <_raise_r+0x14>
 800780a:	2316      	movs	r3, #22
 800780c:	6003      	str	r3, [r0, #0]
 800780e:	2001      	movs	r0, #1
 8007810:	4240      	negs	r0, r0
 8007812:	bd70      	pop	{r4, r5, r6, pc}
 8007814:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007816:	2b00      	cmp	r3, #0
 8007818:	d004      	beq.n	8007824 <_raise_r+0x24>
 800781a:	008a      	lsls	r2, r1, #2
 800781c:	189b      	adds	r3, r3, r2
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	2a00      	cmp	r2, #0
 8007822:	d108      	bne.n	8007836 <_raise_r+0x36>
 8007824:	0020      	movs	r0, r4
 8007826:	f000 f831 	bl	800788c <_getpid_r>
 800782a:	002a      	movs	r2, r5
 800782c:	0001      	movs	r1, r0
 800782e:	0020      	movs	r0, r4
 8007830:	f000 f81a 	bl	8007868 <_kill_r>
 8007834:	e7ed      	b.n	8007812 <_raise_r+0x12>
 8007836:	2a01      	cmp	r2, #1
 8007838:	d009      	beq.n	800784e <_raise_r+0x4e>
 800783a:	1c51      	adds	r1, r2, #1
 800783c:	d103      	bne.n	8007846 <_raise_r+0x46>
 800783e:	2316      	movs	r3, #22
 8007840:	6003      	str	r3, [r0, #0]
 8007842:	2001      	movs	r0, #1
 8007844:	e7e5      	b.n	8007812 <_raise_r+0x12>
 8007846:	2100      	movs	r1, #0
 8007848:	0028      	movs	r0, r5
 800784a:	6019      	str	r1, [r3, #0]
 800784c:	4790      	blx	r2
 800784e:	2000      	movs	r0, #0
 8007850:	e7df      	b.n	8007812 <_raise_r+0x12>
	...

08007854 <raise>:
 8007854:	b510      	push	{r4, lr}
 8007856:	4b03      	ldr	r3, [pc, #12]	@ (8007864 <raise+0x10>)
 8007858:	0001      	movs	r1, r0
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	f7ff ffd0 	bl	8007800 <_raise_r>
 8007860:	bd10      	pop	{r4, pc}
 8007862:	46c0      	nop			@ (mov r8, r8)
 8007864:	2000019c 	.word	0x2000019c

08007868 <_kill_r>:
 8007868:	2300      	movs	r3, #0
 800786a:	b570      	push	{r4, r5, r6, lr}
 800786c:	4d06      	ldr	r5, [pc, #24]	@ (8007888 <_kill_r+0x20>)
 800786e:	0004      	movs	r4, r0
 8007870:	0008      	movs	r0, r1
 8007872:	0011      	movs	r1, r2
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	f7fa fc29 	bl	80020cc <_kill>
 800787a:	1c43      	adds	r3, r0, #1
 800787c:	d103      	bne.n	8007886 <_kill_r+0x1e>
 800787e:	682b      	ldr	r3, [r5, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d000      	beq.n	8007886 <_kill_r+0x1e>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd70      	pop	{r4, r5, r6, pc}
 8007888:	20001b38 	.word	0x20001b38

0800788c <_getpid_r>:
 800788c:	b510      	push	{r4, lr}
 800788e:	f7fa fc1b 	bl	80020c8 <_getpid>
 8007892:	bd10      	pop	{r4, pc}

08007894 <_malloc_usable_size_r>:
 8007894:	1f0b      	subs	r3, r1, #4
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	1f18      	subs	r0, r3, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	da01      	bge.n	80078a2 <_malloc_usable_size_r+0xe>
 800789e:	580b      	ldr	r3, [r1, r0]
 80078a0:	18c0      	adds	r0, r0, r3
 80078a2:	4770      	bx	lr

080078a4 <__swhatbuf_r>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	000e      	movs	r6, r1
 80078a8:	001d      	movs	r5, r3
 80078aa:	230e      	movs	r3, #14
 80078ac:	5ec9      	ldrsh	r1, [r1, r3]
 80078ae:	0014      	movs	r4, r2
 80078b0:	b096      	sub	sp, #88	@ 0x58
 80078b2:	2900      	cmp	r1, #0
 80078b4:	da0c      	bge.n	80078d0 <__swhatbuf_r+0x2c>
 80078b6:	89b2      	ldrh	r2, [r6, #12]
 80078b8:	2380      	movs	r3, #128	@ 0x80
 80078ba:	0011      	movs	r1, r2
 80078bc:	4019      	ands	r1, r3
 80078be:	421a      	tst	r2, r3
 80078c0:	d114      	bne.n	80078ec <__swhatbuf_r+0x48>
 80078c2:	2380      	movs	r3, #128	@ 0x80
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	2000      	movs	r0, #0
 80078c8:	6029      	str	r1, [r5, #0]
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	b016      	add	sp, #88	@ 0x58
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	466a      	mov	r2, sp
 80078d2:	f000 f853 	bl	800797c <_fstat_r>
 80078d6:	2800      	cmp	r0, #0
 80078d8:	dbed      	blt.n	80078b6 <__swhatbuf_r+0x12>
 80078da:	23f0      	movs	r3, #240	@ 0xf0
 80078dc:	9901      	ldr	r1, [sp, #4]
 80078de:	021b      	lsls	r3, r3, #8
 80078e0:	4019      	ands	r1, r3
 80078e2:	4b04      	ldr	r3, [pc, #16]	@ (80078f4 <__swhatbuf_r+0x50>)
 80078e4:	18c9      	adds	r1, r1, r3
 80078e6:	424b      	negs	r3, r1
 80078e8:	4159      	adcs	r1, r3
 80078ea:	e7ea      	b.n	80078c2 <__swhatbuf_r+0x1e>
 80078ec:	2100      	movs	r1, #0
 80078ee:	2340      	movs	r3, #64	@ 0x40
 80078f0:	e7e9      	b.n	80078c6 <__swhatbuf_r+0x22>
 80078f2:	46c0      	nop			@ (mov r8, r8)
 80078f4:	ffffe000 	.word	0xffffe000

080078f8 <__smakebuf_r>:
 80078f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fa:	2602      	movs	r6, #2
 80078fc:	898b      	ldrh	r3, [r1, #12]
 80078fe:	0005      	movs	r5, r0
 8007900:	000c      	movs	r4, r1
 8007902:	b085      	sub	sp, #20
 8007904:	4233      	tst	r3, r6
 8007906:	d007      	beq.n	8007918 <__smakebuf_r+0x20>
 8007908:	0023      	movs	r3, r4
 800790a:	3347      	adds	r3, #71	@ 0x47
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	6123      	str	r3, [r4, #16]
 8007910:	2301      	movs	r3, #1
 8007912:	6163      	str	r3, [r4, #20]
 8007914:	b005      	add	sp, #20
 8007916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007918:	ab03      	add	r3, sp, #12
 800791a:	aa02      	add	r2, sp, #8
 800791c:	f7ff ffc2 	bl	80078a4 <__swhatbuf_r>
 8007920:	9f02      	ldr	r7, [sp, #8]
 8007922:	9001      	str	r0, [sp, #4]
 8007924:	0039      	movs	r1, r7
 8007926:	0028      	movs	r0, r5
 8007928:	f7ff f8f2 	bl	8006b10 <_malloc_r>
 800792c:	2800      	cmp	r0, #0
 800792e:	d108      	bne.n	8007942 <__smakebuf_r+0x4a>
 8007930:	220c      	movs	r2, #12
 8007932:	5ea3      	ldrsh	r3, [r4, r2]
 8007934:	059a      	lsls	r2, r3, #22
 8007936:	d4ed      	bmi.n	8007914 <__smakebuf_r+0x1c>
 8007938:	2203      	movs	r2, #3
 800793a:	4393      	bics	r3, r2
 800793c:	431e      	orrs	r6, r3
 800793e:	81a6      	strh	r6, [r4, #12]
 8007940:	e7e2      	b.n	8007908 <__smakebuf_r+0x10>
 8007942:	2380      	movs	r3, #128	@ 0x80
 8007944:	89a2      	ldrh	r2, [r4, #12]
 8007946:	6020      	str	r0, [r4, #0]
 8007948:	4313      	orrs	r3, r2
 800794a:	81a3      	strh	r3, [r4, #12]
 800794c:	9b03      	ldr	r3, [sp, #12]
 800794e:	6120      	str	r0, [r4, #16]
 8007950:	6167      	str	r7, [r4, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00c      	beq.n	8007970 <__smakebuf_r+0x78>
 8007956:	0028      	movs	r0, r5
 8007958:	230e      	movs	r3, #14
 800795a:	5ee1      	ldrsh	r1, [r4, r3]
 800795c:	f000 f820 	bl	80079a0 <_isatty_r>
 8007960:	2800      	cmp	r0, #0
 8007962:	d005      	beq.n	8007970 <__smakebuf_r+0x78>
 8007964:	2303      	movs	r3, #3
 8007966:	89a2      	ldrh	r2, [r4, #12]
 8007968:	439a      	bics	r2, r3
 800796a:	3b02      	subs	r3, #2
 800796c:	4313      	orrs	r3, r2
 800796e:	81a3      	strh	r3, [r4, #12]
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	9a01      	ldr	r2, [sp, #4]
 8007974:	4313      	orrs	r3, r2
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	e7cc      	b.n	8007914 <__smakebuf_r+0x1c>
	...

0800797c <_fstat_r>:
 800797c:	2300      	movs	r3, #0
 800797e:	b570      	push	{r4, r5, r6, lr}
 8007980:	4d06      	ldr	r5, [pc, #24]	@ (800799c <_fstat_r+0x20>)
 8007982:	0004      	movs	r4, r0
 8007984:	0008      	movs	r0, r1
 8007986:	0011      	movs	r1, r2
 8007988:	602b      	str	r3, [r5, #0]
 800798a:	f7fa fbca 	bl	8002122 <_fstat>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	d103      	bne.n	800799a <_fstat_r+0x1e>
 8007992:	682b      	ldr	r3, [r5, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d000      	beq.n	800799a <_fstat_r+0x1e>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd70      	pop	{r4, r5, r6, pc}
 800799c:	20001b38 	.word	0x20001b38

080079a0 <_isatty_r>:
 80079a0:	2300      	movs	r3, #0
 80079a2:	b570      	push	{r4, r5, r6, lr}
 80079a4:	4d06      	ldr	r5, [pc, #24]	@ (80079c0 <_isatty_r+0x20>)
 80079a6:	0004      	movs	r4, r0
 80079a8:	0008      	movs	r0, r1
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	f7fa fbbe 	bl	800212c <_isatty>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d103      	bne.n	80079bc <_isatty_r+0x1c>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d000      	beq.n	80079bc <_isatty_r+0x1c>
 80079ba:	6023      	str	r3, [r4, #0]
 80079bc:	bd70      	pop	{r4, r5, r6, pc}
 80079be:	46c0      	nop			@ (mov r8, r8)
 80079c0:	20001b38 	.word	0x20001b38

080079c4 <_init>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	46c0      	nop			@ (mov r8, r8)
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr

080079d0 <_fini>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	46c0      	nop			@ (mov r8, r8)
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr
