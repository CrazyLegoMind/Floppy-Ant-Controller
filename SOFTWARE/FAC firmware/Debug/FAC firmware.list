
FAC firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008750  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08008810  08008810  00009810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c68  08008c68  0000a1ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008c68  08008c68  0000a1ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008c68  08008c68  0000a1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c68  08008c68  00009c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c6c  08008c6c  00009c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08008c70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001564  200001ec  08008e5c  0000a1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001750  08008e5c  0000a750  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024395  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005821  00000000  00000000  0002e5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001370e  00000000  00000000  00033dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  000474d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000214e  00000000  00000000  000488d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206f8  00000000  00000000  0004aa26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005b8c  00000000  00000000  0006b11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00070caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004170  00000000  00000000  00070cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00074e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080087f8 	.word	0x080087f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	080087f8 	.word	0x080087f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <initBattery>:

#include "battery.h"

extern ADC_HandleTypeDef hadc;

void initBattery() {
 8000418:	b510      	push	{r4, lr}
	HAL_ADC_Init(&hadc);
 800041a:	4c07      	ldr	r4, [pc, #28]	@ (8000438 <initBattery+0x20>)
 800041c:	0020      	movs	r0, r4
 800041e:	f001 ffaf 	bl	8002380 <HAL_ADC_Init>
	return 0;
}

uint16_t getADCValue(uint8_t channel) {
	uint16_t adc;
	HAL_ADC_Start(&hadc);
 8000422:	0020      	movs	r0, r4
 8000424:	f002 f850 	bl	80024c8 <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc);
 8000428:	0020      	movs	r0, r4
 800042a:	f002 f899 	bl	8002560 <HAL_ADC_GetValue>
	HAL_ADC_Stop(&hadc);
 800042e:	0020      	movs	r0, r4
 8000430:	f002 f876 	bl	8002520 <HAL_ADC_Stop>
}
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	200003a4 	.word	0x200003a4

0800043c <getBatteryConfiguration>:
uint8_t getBatteryConfiguration() {
 800043c:	b570      	push	{r4, r5, r6, lr}
	HAL_ADC_Start(&hadc);
 800043e:	4d16      	ldr	r5, [pc, #88]	@ (8000498 <getBatteryConfiguration+0x5c>)
 8000440:	0028      	movs	r0, r5
 8000442:	f002 f841 	bl	80024c8 <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc);
 8000446:	0028      	movs	r0, r5
 8000448:	f002 f88a 	bl	8002560 <HAL_ADC_GetValue>
 800044c:	0004      	movs	r4, r0
	HAL_ADC_Stop(&hadc);
 800044e:	0028      	movs	r0, r5
 8000450:	f002 f866 	bl	8002520 <HAL_ADC_Stop>
uint16_t getBattVoltage() {
	const uint32_t vref = 3300000;		// 3.3V in uV to make the result an integer
	const uint32_t adcRes = 4096;		// 12 bit resolution
	const uint32_t dividerRatio = 3;	// voltage divider in the circuit is 1/3
	uint32_t adc = getADCValue(BATTERY_CHANNEL);
	uint32_t vbat = ((vref / adcRes) * adc * dividerRatio) / 1000;	// /1000 to have the value in mV
 8000454:	21fa      	movs	r1, #250	@ 0xfa
 8000456:	0423      	lsls	r3, r4, #16
 8000458:	0c1a      	lsrs	r2, r3, #16
 800045a:	0b9b      	lsrs	r3, r3, #14
 800045c:	189b      	adds	r3, r3, r2
 800045e:	015b      	lsls	r3, r3, #5
 8000460:	189b      	adds	r3, r3, r2
 8000462:	0118      	lsls	r0, r3, #4
 8000464:	1ac0      	subs	r0, r0, r3
 8000466:	0089      	lsls	r1, r1, #2
 8000468:	f7ff fe60 	bl	800012c <__udivsi3>
	if (vbat >= MIN_1S_VOLTAGE - 200 && vbat <= MAX_1S_VOLTAGE + 200) return 1;	// 200 added (or subtracted) to have some margin
 800046c:	22e1      	movs	r2, #225	@ 0xe1
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <getBatteryConfiguration+0x60>)
	return vbat + COMPENSATION_VALUE;
 8000470:	b280      	uxth	r0, r0
	if (vbat >= MIN_1S_VOLTAGE - 200 && vbat <= MAX_1S_VOLTAGE + 200) return 1;	// 200 added (or subtracted) to have some margin
 8000472:	18c3      	adds	r3, r0, r3
 8000474:	b29b      	uxth	r3, r3
 8000476:	00d2      	lsls	r2, r2, #3
 8000478:	4293      	cmp	r3, r2
 800047a:	d90a      	bls.n	8000492 <getBatteryConfiguration+0x56>
	if (vbat >= MIN_2S_VOLTAGE - 200 && vbat <= MAX_2S_VOLTAGE + 200) return 2;	// 200 added (or subtracted) to have some margin
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <getBatteryConfiguration+0x64>)
 800047e:	22c8      	movs	r2, #200	@ 0xc8
 8000480:	469c      	mov	ip, r3
 8000482:	4460      	add	r0, ip
 8000484:	b283      	uxth	r3, r0
 8000486:	2000      	movs	r0, #0
 8000488:	0112      	lsls	r2, r2, #4
 800048a:	429a      	cmp	r2, r3
 800048c:	4140      	adcs	r0, r0
 800048e:	0040      	lsls	r0, r0, #1
}
 8000490:	bd70      	pop	{r4, r5, r6, pc}
	if (vbat >= MIN_1S_VOLTAGE - 200 && vbat <= MAX_1S_VOLTAGE + 200) return 1;	// 200 added (or subtracted) to have some margin
 8000492:	2001      	movs	r0, #1
 8000494:	e7fc      	b.n	8000490 <getBatteryConfiguration+0x54>
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	200003a4 	.word	0x200003a4
 800049c:	fffff63c 	.word	0xfffff63c
 80004a0:	ffffeb4c 	.word	0xffffeb4c

080004a4 <getBattVoltage>:
uint16_t getBattVoltage() {
 80004a4:	b570      	push	{r4, r5, r6, lr}
	HAL_ADC_Start(&hadc);
 80004a6:	4d0d      	ldr	r5, [pc, #52]	@ (80004dc <getBattVoltage+0x38>)
 80004a8:	0028      	movs	r0, r5
 80004aa:	f002 f80d 	bl	80024c8 <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc);
 80004ae:	0028      	movs	r0, r5
 80004b0:	f002 f856 	bl	8002560 <HAL_ADC_GetValue>
 80004b4:	0004      	movs	r4, r0
	HAL_ADC_Stop(&hadc);
 80004b6:	0028      	movs	r0, r5
 80004b8:	f002 f832 	bl	8002520 <HAL_ADC_Stop>
	uint32_t vbat = ((vref / adcRes) * adc * dividerRatio) / 1000;	// /1000 to have the value in mV
 80004bc:	21fa      	movs	r1, #250	@ 0xfa
 80004be:	0423      	lsls	r3, r4, #16
 80004c0:	0c1a      	lsrs	r2, r3, #16
 80004c2:	0b9b      	lsrs	r3, r3, #14
 80004c4:	189b      	adds	r3, r3, r2
 80004c6:	015b      	lsls	r3, r3, #5
 80004c8:	189b      	adds	r3, r3, r2
 80004ca:	0118      	lsls	r0, r3, #4
 80004cc:	1ac0      	subs	r0, r0, r3
 80004ce:	0089      	lsls	r1, r1, #2
 80004d0:	f7ff fe2c 	bl	800012c <__udivsi3>
	return vbat + COMPENSATION_VALUE;
 80004d4:	3064      	adds	r0, #100	@ 0x64
 80004d6:	b280      	uxth	r0, r0
}
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	200003a4 	.word	0x200003a4

080004e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004e0:	b510      	push	{r4, lr}
 80004e2:	b096      	sub	sp, #88	@ 0x58
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004e4:	2228      	movs	r2, #40	@ 0x28
 80004e6:	2100      	movs	r1, #0
 80004e8:	a80c      	add	r0, sp, #48	@ 0x30
 80004ea:	f007 f8a3 	bl	8007634 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004ee:	2210      	movs	r2, #16
 80004f0:	2100      	movs	r1, #0
 80004f2:	a801      	add	r0, sp, #4
 80004f4:	f007 f89e 	bl	8007634 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80004f8:	2214      	movs	r2, #20
 80004fa:	2100      	movs	r1, #0
 80004fc:	a805      	add	r0, sp, #20
 80004fe:	f007 f899 	bl	8007634 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14 | RCC_OSCILLATORTYPE_HSE;
 8000502:	2213      	movs	r2, #19
 8000504:	2301      	movs	r3, #1
 8000506:	920a      	str	r2, [sp, #40]	@ 0x28
 8000508:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050a:	2301      	movs	r3, #1
 800050c:	930d      	str	r3, [sp, #52]	@ 0x34
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800050e:	930f      	str	r3, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	2202      	movs	r2, #2
 8000514:	025b      	lsls	r3, r3, #9
 8000516:	9212      	str	r2, [sp, #72]	@ 0x48
 8000518:	9313      	str	r3, [sp, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800051a:	2380      	movs	r3, #128	@ 0x80
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800051c:	2410      	movs	r4, #16
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800051e:	035b      	lsls	r3, r3, #13
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000520:	a80a      	add	r0, sp, #40	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	940e      	str	r4, [sp, #56]	@ 0x38
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000524:	9410      	str	r4, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000526:	9314      	str	r3, [sp, #80]	@ 0x50
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000528:	f004 f84e 	bl	80045c8 <HAL_RCC_OscConfig>
 800052c:	2800      	cmp	r0, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000532:	e7fe      	b.n	8000532 <SystemClock_Config+0x52>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000534:	2307      	movs	r3, #7
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000538:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053a:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053c:	3b05      	subs	r3, #5
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800053e:	2101      	movs	r1, #1
 8000540:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000542:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000544:	f004 faa4 	bl	8004a90 <HAL_RCC_ClockConfig>
 8000548:	2800      	cmp	r0, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x70>
 800054c:	b672      	cpsid	i
	while (1) {
 800054e:	e7fe      	b.n	800054e <SystemClock_Config+0x6e>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_I2C1;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <SystemClock_Config+0x8c>)
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000552:	9008      	str	r0, [sp, #32]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_I2C1;
 8000554:	9305      	str	r3, [sp, #20]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000556:	2380      	movs	r3, #128	@ 0x80
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000558:	a805      	add	r0, sp, #20
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800055a:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800055c:	f004 fb3e 	bl	8004bdc <HAL_RCCEx_PeriphCLKConfig>
 8000560:	2800      	cmp	r0, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x88>
 8000564:	b672      	cpsid	i
	while (1) {
 8000566:	e7fe      	b.n	8000566 <SystemClock_Config+0x86>
}
 8000568:	b016      	add	sp, #88	@ 0x58
 800056a:	bd10      	pop	{r4, pc}
 800056c:	00020020 	.word	0x00020020

08000570 <main>:
int main(void) {
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	46de      	mov	lr, fp
 8000574:	4645      	mov	r5, r8
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	b5e0      	push	{r5, r6, r7, lr}
 800057c:	b0af      	sub	sp, #188	@ 0xbc
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800057e:	ac26      	add	r4, sp, #152	@ 0x98
	HAL_Init();
 8000580:	f001 fdfa 	bl	8002178 <HAL_Init>
	SystemClock_Config();
 8000584:	f7ff ffac 	bl	80004e0 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000588:	2214      	movs	r2, #20
 800058a:	2100      	movs	r1, #0
 800058c:	0020      	movs	r0, r4
 800058e:	f007 f851 	bl	8007634 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2180      	movs	r1, #128	@ 0x80
 8000594:	4bcc      	ldr	r3, [pc, #816]	@ (80008c8 <main+0x358>)
 8000596:	0309      	lsls	r1, r1, #12
 8000598:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 800059a:	2580      	movs	r5, #128	@ 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800059c:	430a      	orrs	r2, r1
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin,
 80005a2:	27fc      	movs	r7, #252	@ 0xfc
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005a4:	400a      	ands	r2, r1
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	2180      	movs	r1, #128	@ 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005a8:	9215      	str	r2, [sp, #84]	@ 0x54
 80005aa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	03c9      	lsls	r1, r1, #15
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005b6:	022d      	lsls	r5, r5, #8
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005b8:	400a      	ands	r2, r1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2180      	movs	r1, #128	@ 0x80
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005bc:	9216      	str	r2, [sp, #88]	@ 0x58
 80005be:	9a16      	ldr	r2, [sp, #88]	@ 0x58
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	0289      	lsls	r1, r1, #10
 80005c4:	430a      	orrs	r2, r1
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin,
 80005ca:	023f      	lsls	r7, r7, #8
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	400a      	ands	r2, r1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2180      	movs	r1, #128	@ 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80005d2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	695a      	ldr	r2, [r3, #20]
 80005d6:	02c9      	lsls	r1, r1, #11
 80005d8:	430a      	orrs	r2, r1
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005e0:	400b      	ands	r3, r1
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005e2:	48ba      	ldr	r0, [pc, #744]	@ (80008cc <main+0x35c>)
 80005e4:	0029      	movs	r1, r5
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	9318      	str	r3, [sp, #96]	@ 0x60
 80005e8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005ea:	f002 f995 	bl	8002918 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin,
 80005ee:	2200      	movs	r2, #0
 80005f0:	0039      	movs	r1, r7
 80005f2:	48b7      	ldr	r0, [pc, #732]	@ (80008d0 <main+0x360>)
 80005f4:	f002 f990 	bl	8002918 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2600      	movs	r6, #0
	GPIO_InitStruct.Pin = U_LED_Pin;
 80005fa:	9526      	str	r5, [sp, #152]	@ 0x98
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2501      	movs	r5, #1
	HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 80005fe:	0021      	movs	r1, r4
 8000600:	48b2      	ldr	r0, [pc, #712]	@ (80008cc <main+0x35c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	6065      	str	r5, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	60a6      	str	r6, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	60e6      	str	r6, [r4, #12]
	HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 8000608:	f002 f87e 	bl	8002708 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800060c:	23c4      	movs	r3, #196	@ 0xc4
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 800060e:	0021      	movs	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000610:	039b      	lsls	r3, r3, #14
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000612:	48af      	ldr	r0, [pc, #700]	@ (80008d0 <main+0x360>)
	GPIO_InitStruct.Pin = CH1_Pin;
 8000614:	9526      	str	r5, [sp, #152]	@ 0x98
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000616:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000618:	60a5      	str	r5, [r4, #8]
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 800061a:	f002 f875 	bl	8002708 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CH2_Pin | CH3_Pin | CH4_Pin;
 800061e:	230e      	movs	r3, #14
 8000620:	9326      	str	r3, [sp, #152]	@ 0x98
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000622:	2384      	movs	r3, #132	@ 0x84
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	0021      	movs	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000626:	039b      	lsls	r3, r3, #14
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	48a9      	ldr	r0, [pc, #676]	@ (80008d0 <main+0x360>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062a:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	60a5      	str	r5, [r4, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f002 f86b 	bl	8002708 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	0021      	movs	r1, r4
 8000634:	48a6      	ldr	r0, [pc, #664]	@ (80008d0 <main+0x360>)
	GPIO_InitStruct.Pin = SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin;
 8000636:	9726      	str	r7, [sp, #152]	@ 0x98
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	6065      	str	r5, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	60a6      	str	r6, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	60e6      	str	r6, [r4, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063e:	f002 f863 	bl	8002708 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2005      	movs	r0, #5
 8000648:	f002 f80e 	bl	8002668 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800064c:	2005      	movs	r0, #5
 800064e:	f002 f835 	bl	80026bc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2006      	movs	r0, #6
 8000658:	f002 f806 	bl	8002668 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800065c:	2006      	movs	r0, #6
 800065e:	f002 f82d 	bl	80026bc <HAL_NVIC_EnableIRQ>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000662:	221c      	movs	r2, #28
 8000664:	2100      	movs	r1, #0
 8000666:	a81f      	add	r0, sp, #124	@ 0x7c
 8000668:	f006 ffe4 	bl	8007634 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800066c:	2220      	movs	r2, #32
 800066e:	2100      	movs	r1, #0
 8000670:	0020      	movs	r0, r4
 8000672:	f006 ffdf 	bl	8007634 <memset>
	htim16.Instance = TIM16;
 8000676:	4d97      	ldr	r5, [pc, #604]	@ (80008d4 <main+0x364>)
 8000678:	4b97      	ldr	r3, [pc, #604]	@ (80008d8 <main+0x368>)
	htim16.Init.Period = 10000 - 1;
 800067a:	4f98      	ldr	r7, [pc, #608]	@ (80008dc <main+0x36c>)
	htim16.Instance = TIM16;
 800067c:	602b      	str	r3, [r5, #0]
	htim16.Init.Prescaler = 24 - 1;
 800067e:	2317      	movs	r3, #23
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000680:	0028      	movs	r0, r5
	htim16.Init.Prescaler = 24 - 1;
 8000682:	4698      	mov	r8, r3
 8000684:	606b      	str	r3, [r5, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	60ae      	str	r6, [r5, #8]
	htim16.Init.Period = 10000 - 1;
 8000688:	60ef      	str	r7, [r5, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068a:	612e      	str	r6, [r5, #16]
	htim16.Init.RepetitionCounter = 0;
 800068c:	616e      	str	r6, [r5, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	61ae      	str	r6, [r5, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000690:	f004 fb7c 	bl	8004d8c <HAL_TIM_Base_Init>
 8000694:	2800      	cmp	r0, #0
 8000696:	d001      	beq.n	800069c <main+0x12c>
 8000698:	b672      	cpsid	i
	while (1) {
 800069a:	e7fe      	b.n	800069a <main+0x12a>
	if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 800069c:	0028      	movs	r0, r5
 800069e:	f004 fc23 	bl	8004ee8 <HAL_TIM_PWM_Init>
 80006a2:	1e02      	subs	r2, r0, #0
 80006a4:	d001      	beq.n	80006aa <main+0x13a>
 80006a6:	b672      	cpsid	i
	while (1) {
 80006a8:	e7fe      	b.n	80006a8 <main+0x138>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006aa:	2360      	movs	r3, #96	@ 0x60
	sConfigOC.Pulse = 0;
 80006ac:	9020      	str	r0, [sp, #128]	@ 0x80
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ae:	9021      	str	r0, [sp, #132]	@ 0x84
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b0:	9022      	str	r0, [sp, #136]	@ 0x88
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b2:	9023      	str	r0, [sp, #140]	@ 0x8c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b4:	9024      	str	r0, [sp, #144]	@ 0x90
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006b6:	9025      	str	r0, [sp, #148]	@ 0x94
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80006b8:	a91f      	add	r1, sp, #124	@ 0x7c
 80006ba:	0028      	movs	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	469a      	mov	sl, r3
 80006be:	931f      	str	r3, [sp, #124]	@ 0x7c
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80006c0:	f004 fcec 	bl	800509c <HAL_TIM_PWM_ConfigChannel>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d001      	beq.n	80006cc <main+0x15c>
 80006c8:	b672      	cpsid	i
	while (1) {
 80006ca:	e7fe      	b.n	80006ca <main+0x15a>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006cc:	2380      	movs	r3, #128	@ 0x80
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ce:	9026      	str	r0, [sp, #152]	@ 0x98
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006d0:	019b      	lsls	r3, r3, #6
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d2:	6060      	str	r0, [r4, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d4:	60a0      	str	r0, [r4, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80006d6:	60e0      	str	r0, [r4, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006d8:	6120      	str	r0, [r4, #16]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006da:	61e0      	str	r0, [r4, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK) {
 80006dc:	0021      	movs	r1, r4
 80006de:	0028      	movs	r0, r5
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e0:	469b      	mov	fp, r3
 80006e2:	6163      	str	r3, [r4, #20]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK) {
 80006e4:	f004 ff0c 	bl	8005500 <HAL_TIMEx_ConfigBreakDeadTime>
 80006e8:	1e06      	subs	r6, r0, #0
 80006ea:	d001      	beq.n	80006f0 <main+0x180>
 80006ec:	b672      	cpsid	i
	while (1) {
 80006ee:	e7fe      	b.n	80006ee <main+0x17e>
	HAL_TIM_MspPostInit(&htim16);
 80006f0:	0028      	movs	r0, r5
 80006f2:	f001 fc19 	bl	8001f28 <HAL_TIM_MspPostInit>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80006f6:	221c      	movs	r2, #28
 80006f8:	0031      	movs	r1, r6
 80006fa:	a81f      	add	r0, sp, #124	@ 0x7c
 80006fc:	f006 ff9a 	bl	8007634 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000700:	2220      	movs	r2, #32
 8000702:	0031      	movs	r1, r6
 8000704:	0020      	movs	r0, r4
 8000706:	f006 ff95 	bl	8007634 <memset>
	htim17.Instance = TIM17;
 800070a:	4b75      	ldr	r3, [pc, #468]	@ (80008e0 <main+0x370>)
 800070c:	4699      	mov	r9, r3
 800070e:	464a      	mov	r2, r9
 8000710:	4b74      	ldr	r3, [pc, #464]	@ (80008e4 <main+0x374>)
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000712:	4648      	mov	r0, r9
	htim17.Instance = TIM17;
 8000714:	6013      	str	r3, [r2, #0]
	htim17.Init.Prescaler = 24 - 1;
 8000716:	464b      	mov	r3, r9
 8000718:	4642      	mov	r2, r8
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	609e      	str	r6, [r3, #8]
	htim17.Init.Prescaler = 24 - 1;
 800071c:	605a      	str	r2, [r3, #4]
	htim17.Init.Period = 10000 - 1;
 800071e:	60df      	str	r7, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	611e      	str	r6, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8000722:	615e      	str	r6, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	619e      	str	r6, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000726:	f004 fb31 	bl	8004d8c <HAL_TIM_Base_Init>
 800072a:	2800      	cmp	r0, #0
 800072c:	d001      	beq.n	8000732 <main+0x1c2>
 800072e:	b672      	cpsid	i
	while (1) {
 8000730:	e7fe      	b.n	8000730 <main+0x1c0>
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 8000732:	4648      	mov	r0, r9
 8000734:	f004 fbd8 	bl	8004ee8 <HAL_TIM_PWM_Init>
 8000738:	1e02      	subs	r2, r0, #0
 800073a:	d001      	beq.n	8000740 <main+0x1d0>
 800073c:	b672      	cpsid	i
	while (1) {
 800073e:	e7fe      	b.n	800073e <main+0x1ce>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000740:	4653      	mov	r3, sl
	sConfigOC.Pulse = 0;
 8000742:	9020      	str	r0, [sp, #128]	@ 0x80
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000744:	9021      	str	r0, [sp, #132]	@ 0x84
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000746:	9022      	str	r0, [sp, #136]	@ 0x88
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000748:	9023      	str	r0, [sp, #140]	@ 0x8c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800074a:	9024      	str	r0, [sp, #144]	@ 0x90
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800074c:	9025      	str	r0, [sp, #148]	@ 0x94
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800074e:	a91f      	add	r1, sp, #124	@ 0x7c
 8000750:	4648      	mov	r0, r9
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	931f      	str	r3, [sp, #124]	@ 0x7c
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000754:	f004 fca2 	bl	800509c <HAL_TIM_PWM_ConfigChannel>
 8000758:	2800      	cmp	r0, #0
 800075a:	d001      	beq.n	8000760 <main+0x1f0>
 800075c:	b672      	cpsid	i
	while (1) {
 800075e:	e7fe      	b.n	800075e <main+0x1ee>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000760:	465b      	mov	r3, fp
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000762:	9026      	str	r0, [sp, #152]	@ 0x98
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
 8000764:	0021      	movs	r1, r4
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000766:	6060      	str	r0, [r4, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000768:	60a0      	str	r0, [r4, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800076a:	60e0      	str	r0, [r4, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800076c:	6120      	str	r0, [r4, #16]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800076e:	61e0      	str	r0, [r4, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
 8000770:	4648      	mov	r0, r9
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000772:	6163      	str	r3, [r4, #20]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
 8000774:	f004 fec4 	bl	8005500 <HAL_TIMEx_ConfigBreakDeadTime>
 8000778:	1e07      	subs	r7, r0, #0
 800077a:	d001      	beq.n	8000780 <main+0x210>
 800077c:	b672      	cpsid	i
	while (1) {
 800077e:	e7fe      	b.n	800077e <main+0x20e>
	HAL_TIM_MspPostInit(&htim17);
 8000780:	4648      	mov	r0, r9
 8000782:	f001 fbd1 	bl	8001f28 <HAL_TIM_MspPostInit>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000786:	2210      	movs	r2, #16
 8000788:	0039      	movs	r1, r7
 800078a:	a81b      	add	r0, sp, #108	@ 0x6c
 800078c:	f006 ff52 	bl	8007634 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000790:	2208      	movs	r2, #8
 8000792:	0039      	movs	r1, r7
 8000794:	a819      	add	r0, sp, #100	@ 0x64
 8000796:	f006 ff4d 	bl	8007634 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800079a:	221c      	movs	r2, #28
 800079c:	0039      	movs	r1, r7
 800079e:	a81f      	add	r0, sp, #124	@ 0x7c
 80007a0:	f006 ff48 	bl	8007634 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80007a4:	2220      	movs	r2, #32
 80007a6:	0039      	movs	r1, r7
 80007a8:	0020      	movs	r0, r4
 80007aa:	f006 ff43 	bl	8007634 <memset>
	htim1.Instance = TIM1;
 80007ae:	4e4e      	ldr	r6, [pc, #312]	@ (80008e8 <main+0x378>)
 80007b0:	4b4e      	ldr	r3, [pc, #312]	@ (80008ec <main+0x37c>)
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80007b2:	0030      	movs	r0, r6
	htim1.Instance = TIM1;
 80007b4:	6033      	str	r3, [r6, #0]
	htim1.Init.Prescaler = 480 - 1;
 80007b6:	23e0      	movs	r3, #224	@ 0xe0
 80007b8:	33ff      	adds	r3, #255	@ 0xff
 80007ba:	6073      	str	r3, [r6, #4]
	htim1.Init.Period = 100 - 1;
 80007bc:	3b7d      	subs	r3, #125	@ 0x7d
 80007be:	3bff      	subs	r3, #255	@ 0xff
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	60b7      	str	r7, [r6, #8]
	htim1.Init.Period = 100 - 1;
 80007c2:	60f3      	str	r3, [r6, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	6137      	str	r7, [r6, #16]
	htim1.Init.RepetitionCounter = 0;
 80007c6:	6177      	str	r7, [r6, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	61b7      	str	r7, [r6, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80007ca:	f004 fadf 	bl	8004d8c <HAL_TIM_Base_Init>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d001      	beq.n	80007d6 <main+0x266>
 80007d2:	b672      	cpsid	i
	while (1) {
 80007d4:	e7fe      	b.n	80007d4 <main+0x264>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d6:	2380      	movs	r3, #128	@ 0x80
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007d8:	0030      	movs	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007da:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007dc:	a91b      	add	r1, sp, #108	@ 0x6c
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	931b      	str	r3, [sp, #108]	@ 0x6c
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007e0:	f004 fd62 	bl	80052a8 <HAL_TIM_ConfigClockSource>
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d001      	beq.n	80007ec <main+0x27c>
 80007e8:	b672      	cpsid	i
	while (1) {
 80007ea:	e7fe      	b.n	80007ea <main+0x27a>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80007ec:	0030      	movs	r0, r6
 80007ee:	f004 fb7b 	bl	8004ee8 <HAL_TIM_PWM_Init>
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d001      	beq.n	80007fa <main+0x28a>
 80007f6:	b672      	cpsid	i
	while (1) {
 80007f8:	e7fe      	b.n	80007f8 <main+0x288>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	9019      	str	r0, [sp, #100]	@ 0x64
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	901a      	str	r0, [sp, #104]	@ 0x68
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80007fe:	a919      	add	r1, sp, #100	@ 0x64
 8000800:	0030      	movs	r0, r6
 8000802:	f004 fe4f 	bl	80054a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000806:	1e02      	subs	r2, r0, #0
 8000808:	d001      	beq.n	800080e <main+0x29e>
 800080a:	b672      	cpsid	i
	while (1) {
 800080c:	e7fe      	b.n	800080c <main+0x29c>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080e:	2360      	movs	r3, #96	@ 0x60
	sConfigOC.Pulse = 0;
 8000810:	9020      	str	r0, [sp, #128]	@ 0x80
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000812:	9021      	str	r0, [sp, #132]	@ 0x84
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000814:	9022      	str	r0, [sp, #136]	@ 0x88
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000816:	9023      	str	r0, [sp, #140]	@ 0x8c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000818:	9024      	str	r0, [sp, #144]	@ 0x90
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800081a:	9025      	str	r0, [sp, #148]	@ 0x94
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800081c:	a91f      	add	r1, sp, #124	@ 0x7c
 800081e:	0030      	movs	r0, r6
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000820:	931f      	str	r3, [sp, #124]	@ 0x7c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000822:	f004 fc3b 	bl	800509c <HAL_TIM_PWM_ConfigChannel>
 8000826:	2800      	cmp	r0, #0
 8000828:	d001      	beq.n	800082e <main+0x2be>
 800082a:	b672      	cpsid	i
	while (1) {
 800082c:	e7fe      	b.n	800082c <main+0x2bc>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800082e:	2204      	movs	r2, #4
 8000830:	0030      	movs	r0, r6
 8000832:	a91f      	add	r1, sp, #124	@ 0x7c
 8000834:	f004 fc32 	bl	800509c <HAL_TIM_PWM_ConfigChannel>
 8000838:	2800      	cmp	r0, #0
 800083a:	d001      	beq.n	8000840 <main+0x2d0>
 800083c:	b672      	cpsid	i
	while (1) {
 800083e:	e7fe      	b.n	800083e <main+0x2ce>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000840:	2208      	movs	r2, #8
 8000842:	0030      	movs	r0, r6
 8000844:	a91f      	add	r1, sp, #124	@ 0x7c
 8000846:	f004 fc29 	bl	800509c <HAL_TIM_PWM_ConfigChannel>
 800084a:	2800      	cmp	r0, #0
 800084c:	d001      	beq.n	8000852 <main+0x2e2>
 800084e:	b672      	cpsid	i
	while (1) {
 8000850:	e7fe      	b.n	8000850 <main+0x2e0>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000852:	2380      	movs	r3, #128	@ 0x80
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000854:	9026      	str	r0, [sp, #152]	@ 0x98
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000856:	019b      	lsls	r3, r3, #6
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000858:	6060      	str	r0, [r4, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085a:	60a0      	str	r0, [r4, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800085c:	60e0      	str	r0, [r4, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800085e:	6120      	str	r0, [r4, #16]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000860:	61e0      	str	r0, [r4, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000862:	0021      	movs	r1, r4
 8000864:	0030      	movs	r0, r6
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000866:	6163      	str	r3, [r4, #20]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000868:	f004 fe4a 	bl	8005500 <HAL_TIMEx_ConfigBreakDeadTime>
 800086c:	4680      	mov	r8, r0
 800086e:	2800      	cmp	r0, #0
 8000870:	d001      	beq.n	8000876 <main+0x306>
 8000872:	b672      	cpsid	i
	while (1) {
 8000874:	e7fe      	b.n	8000874 <main+0x304>
	HAL_TIM_MspPostInit(&htim1);
 8000876:	0030      	movs	r0, r6
 8000878:	f001 fb56 	bl	8001f28 <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 800087c:	4f1c      	ldr	r7, [pc, #112]	@ (80008f0 <main+0x380>)
 800087e:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <main+0x384>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000880:	0038      	movs	r0, r7
	hi2c1.Instance = I2C1;
 8000882:	603b      	str	r3, [r7, #0]
	hi2c1.Init.Timing = 0x00201D2B;
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <main+0x388>)
 8000886:	607b      	str	r3, [r7, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000888:	4643      	mov	r3, r8
 800088a:	60bb      	str	r3, [r7, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	2301      	movs	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	469a      	mov	sl, r3
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000892:	4643      	mov	r3, r8
 8000894:	613b      	str	r3, [r7, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000896:	617b      	str	r3, [r7, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	61bb      	str	r3, [r7, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	61fb      	str	r3, [r7, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	623b      	str	r3, [r7, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800089e:	f002 fbc5 	bl	800302c <HAL_I2C_Init>
 80008a2:	1e01      	subs	r1, r0, #0
 80008a4:	d001      	beq.n	80008aa <main+0x33a>
 80008a6:	b672      	cpsid	i
	while (1) {
 80008a8:	e7fe      	b.n	80008a8 <main+0x338>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80008aa:	0038      	movs	r0, r7
 80008ac:	f002 fe14 	bl	80034d8 <HAL_I2CEx_ConfigAnalogFilter>
 80008b0:	1e01      	subs	r1, r0, #0
 80008b2:	d001      	beq.n	80008b8 <main+0x348>
 80008b4:	b672      	cpsid	i
	while (1) {
 80008b6:	e7fe      	b.n	80008b6 <main+0x346>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80008b8:	0038      	movs	r0, r7
 80008ba:	f002 fe33 	bl	8003524 <HAL_I2CEx_ConfigDigitalFilter>
 80008be:	4680      	mov	r8, r0
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d01b      	beq.n	80008fc <main+0x38c>
 80008c4:	b672      	cpsid	i
	while (1) {
 80008c6:	e7fe      	b.n	80008c6 <main+0x356>
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800
 80008d0:	48000400 	.word	0x48000400
 80008d4:	20000278 	.word	0x20000278
 80008d8:	40014400 	.word	0x40014400
 80008dc:	0000270f 	.word	0x0000270f
 80008e0:	20000230 	.word	0x20000230
 80008e4:	40014800 	.word	0x40014800
 80008e8:	20000308 	.word	0x20000308
 80008ec:	40012c00 	.word	0x40012c00
 80008f0:	20000350 	.word	0x20000350
 80008f4:	40005400 	.word	0x40005400
 80008f8:	00201d2b 	.word	0x00201d2b
	MX_USB_DEVICE_Init();
 80008fc:	f006 f9e8 	bl	8006cd0 <MX_USB_DEVICE_Init>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000900:	220c      	movs	r2, #12
 8000902:	4641      	mov	r1, r8
 8000904:	0020      	movs	r0, r4
 8000906:	f006 fe95 	bl	8007634 <memset>
	hadc.Instance = ADC1;
 800090a:	4fdb      	ldr	r7, [pc, #876]	@ (8000c78 <main+0x708>)
 800090c:	4bdb      	ldr	r3, [pc, #876]	@ (8000c7c <main+0x70c>)
	hadc.Init.DMAContinuousRequests = DISABLE;
 800090e:	4642      	mov	r2, r8
	hadc.Instance = ADC1;
 8000910:	603b      	str	r3, [r7, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000912:	4643      	mov	r3, r8
 8000914:	607b      	str	r3, [r7, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000916:	60bb      	str	r3, [r7, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000918:	60fb      	str	r3, [r7, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800091a:	4653      	mov	r3, sl
 800091c:	613b      	str	r3, [r7, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091e:	2304      	movs	r3, #4
 8000920:	617b      	str	r3, [r7, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000922:	2380      	movs	r3, #128	@ 0x80
 8000924:	045b      	lsls	r3, r3, #17
 8000926:	61bb      	str	r3, [r7, #24]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000928:	23c2      	movs	r3, #194	@ 0xc2
 800092a:	33ff      	adds	r3, #255	@ 0xff
 800092c:	61fb      	str	r3, [r7, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092e:	4643      	mov	r3, r8
 8000930:	623b      	str	r3, [r7, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000932:	2324      	movs	r3, #36	@ 0x24
 8000934:	54fa      	strb	r2, [r7, r3]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000936:	4653      	mov	r3, sl
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000938:	0038      	movs	r0, r7
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800093c:	f001 fd20 	bl	8002380 <HAL_ADC_Init>
 8000940:	2800      	cmp	r0, #0
 8000942:	d001      	beq.n	8000948 <main+0x3d8>
 8000944:	b672      	cpsid	i
	while (1) {
 8000946:	e7fe      	b.n	8000946 <main+0x3d6>
	sConfig.Channel = ADC_CHANNEL_0;
 8000948:	2300      	movs	r3, #0
 800094a:	9326      	str	r3, [sp, #152]	@ 0x98
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	015b      	lsls	r3, r3, #5
 8000950:	6063      	str	r3, [r4, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000952:	2380      	movs	r3, #128	@ 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000954:	0021      	movs	r1, r4
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000956:	055b      	lsls	r3, r3, #21
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000958:	0038      	movs	r0, r7
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800095a:	60a3      	str	r3, [r4, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800095c:	f001 fe04 	bl	8002568 <HAL_ADC_ConfigChannel>
 8000960:	2800      	cmp	r0, #0
 8000962:	d001      	beq.n	8000968 <main+0x3f8>
 8000964:	b672      	cpsid	i
	while (1) {
 8000966:	e7fe      	b.n	8000966 <main+0x3f6>
	htim6.Instance = TIM6;
 8000968:	4bc5      	ldr	r3, [pc, #788]	@ (8000c80 <main+0x710>)
 800096a:	4698      	mov	r8, r3
 800096c:	4642      	mov	r2, r8
 800096e:	4bc5      	ldr	r3, [pc, #788]	@ (8000c84 <main+0x714>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	6090      	str	r0, [r2, #8]
	htim6.Instance = TIM6;
 8000972:	6013      	str	r3, [r2, #0]
	htim6.Init.Prescaler = 48 - 1;
 8000974:	232f      	movs	r3, #47	@ 0x2f
 8000976:	6053      	str	r3, [r2, #4]
	htim6.Init.Period = 65535;
 8000978:	4bc3      	ldr	r3, [pc, #780]	@ (8000c88 <main+0x718>)
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	6190      	str	r0, [r2, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800097c:	4640      	mov	r0, r8
	htim6.Init.Period = 65535;
 800097e:	60d3      	str	r3, [r2, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000980:	f004 fa04 	bl	8004d8c <HAL_TIM_Base_Init>
 8000984:	2800      	cmp	r0, #0
 8000986:	d001      	beq.n	800098c <main+0x41c>
 8000988:	b672      	cpsid	i
	while (1) {
 800098a:	e7fe      	b.n	800098a <main+0x41a>
	initReciever(&htim6);
 800098c:	4640      	mov	r0, r8
 800098e:	f000 fbc7 	bl	8001120 <initReciever>
	initServos(&htim16);	// init servo 1 hv
 8000992:	0028      	movs	r0, r5
 8000994:	f000 fc62 	bl	800125c <initServos>
	initServos(&htim17);	// init servo 2
 8000998:	4648      	mov	r0, r9
 800099a:	f000 fc5f 	bl	800125c <initServos>
	initMotors(&htim1);
 800099e:	0030      	movs	r0, r6
 80009a0:	f000 f9ec 	bl	8000d7c <initMotors>
	initBattery(&hadc);
 80009a4:	0038      	movs	r0, r7
 80009a6:	f7ff fd37 	bl	8000418 <initBattery>
	batteryConfiguration = getBatteryConfiguration();
 80009aa:	f7ff fd47 	bl	800043c <getBatteryConfiguration>
 80009ae:	4bb7      	ldr	r3, [pc, #732]	@ (8000c8c <main+0x71c>)
 80009b0:	7018      	strb	r0, [r3, #0]
	uint8_t isFirstWrite = read_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS);
 80009b2:	2064      	movs	r0, #100	@ 0x64
	batteryConfiguration = getBatteryConfiguration();
 80009b4:	9308      	str	r3, [sp, #32]
	uint8_t isFirstWrite = read_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS);
 80009b6:	f000 fe83 	bl	80016c0 <read_byte_eeprom>
	if (isFirstWrite) {	// if is the first time the value is 255 (value of the memory empty)
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d100      	bne.n	80009c0 <main+0x450>
 80009be:	e1a9      	b.n	8000d14 <main+0x7a4>
			HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 80009c0:	2780      	movs	r7, #128	@ 0x80
 80009c2:	250a      	movs	r5, #10
			HAL_Delay(100);
 80009c4:	2664      	movs	r6, #100	@ 0x64
			HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 80009c6:	023f      	lsls	r7, r7, #8
 80009c8:	0039      	movs	r1, r7
 80009ca:	48b1      	ldr	r0, [pc, #708]	@ (8000c90 <main+0x720>)
 80009cc:	f001 ffaa 	bl	8002924 <HAL_GPIO_TogglePin>
		for (int i = 0; i < 10; i++) {
 80009d0:	3d01      	subs	r5, #1
			HAL_Delay(100);
 80009d2:	0030      	movs	r0, r6
 80009d4:	f001 fbf2 	bl	80021bc <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d1f5      	bne.n	80009c8 <main+0x458>
		storeSettingsToEeprom();	// write the default settings
 80009dc:	f000 fcec 	bl	80013b8 <storeSettingsToEeprom>
		write_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS, isFirstWrite);
 80009e0:	0029      	movs	r1, r5
 80009e2:	2064      	movs	r0, #100	@ 0x64
 80009e4:	f000 fe82 	bl	80016ec <write_byte_eeprom>
	disableMotor(M1);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 fb3d 	bl	8001068 <disableMotor>
	disableMotor(M2);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 fb3a 	bl	8001068 <disableMotor>
	disableMotor(M3);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f000 fb37 	bl	8001068 <disableMotor>
	uint32_t timeLowBattery = 0;
 80009fa:	2300      	movs	r3, #0
	uint32_t timeLimitBattery = 0;
 80009fc:	9305      	str	r3, [sp, #20]
	uint32_t time2 = 0;
 80009fe:	9304      	str	r3, [sp, #16]
	uint32_t timeLowBattery = 0;
 8000a00:	4698      	mov	r8, r3
	uint32_t time1 = 0;
 8000a02:	001d      	movs	r5, r3
 8000a04:	4ba3      	ldr	r3, [pc, #652]	@ (8000c94 <main+0x724>)
 8000a06:	4ea4      	ldr	r6, [pc, #656]	@ (8000c98 <main+0x728>)
 8000a08:	9303      	str	r3, [sp, #12]
 8000a0a:	4ba4      	ldr	r3, [pc, #656]	@ (8000c9c <main+0x72c>)
 8000a0c:	4fa4      	ldr	r7, [pc, #656]	@ (8000ca0 <main+0x730>)
 8000a0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a10:	4ba4      	ldr	r3, [pc, #656]	@ (8000ca4 <main+0x734>)
 8000a12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a14:	4ba4      	ldr	r3, [pc, #656]	@ (8000ca8 <main+0x738>)
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	4ba4      	ldr	r3, [pc, #656]	@ (8000cac <main+0x73c>)
 8000a1a:	9301      	str	r3, [sp, #4]
 8000a1c:	4ba4      	ldr	r3, [pc, #656]	@ (8000cb0 <main+0x740>)
 8000a1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8000a20:	4ba4      	ldr	r3, [pc, #656]	@ (8000cb4 <main+0x744>)
 8000a22:	469a      	mov	sl, r3
 8000a24:	4ba4      	ldr	r3, [pc, #656]	@ (8000cb8 <main+0x748>)
 8000a26:	930d      	str	r3, [sp, #52]	@ 0x34
 8000a28:	4ba4      	ldr	r3, [pc, #656]	@ (8000cbc <main+0x74c>)
 8000a2a:	9306      	str	r3, [sp, #24]
 8000a2c:	4ba4      	ldr	r3, [pc, #656]	@ (8000cc0 <main+0x750>)
 8000a2e:	469b      	mov	fp, r3
 8000a30:	4ba4      	ldr	r3, [pc, #656]	@ (8000cc4 <main+0x754>)
 8000a32:	930e      	str	r3, [sp, #56]	@ 0x38
 8000a34:	4ba4      	ldr	r3, [pc, #656]	@ (8000cc8 <main+0x758>)
 8000a36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a38:	4ba4      	ldr	r3, [pc, #656]	@ (8000ccc <main+0x75c>)
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	4ba4      	ldr	r3, [pc, #656]	@ (8000cd0 <main+0x760>)
 8000a3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8000a40:	4ba4      	ldr	r3, [pc, #656]	@ (8000cd4 <main+0x764>)
 8000a42:	9311      	str	r3, [sp, #68]	@ 0x44
 8000a44:	4ba4      	ldr	r3, [pc, #656]	@ (8000cd8 <main+0x768>)
 8000a46:	9307      	str	r3, [sp, #28]
 8000a48:	4ba4      	ldr	r3, [pc, #656]	@ (8000cdc <main+0x76c>)
 8000a4a:	4699      	mov	r9, r3
 8000a4c:	4ba4      	ldr	r3, [pc, #656]	@ (8000ce0 <main+0x770>)
 8000a4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8000a50:	4ba4      	ldr	r3, [pc, #656]	@ (8000ce4 <main+0x774>)
 8000a52:	9313      	str	r3, [sp, #76]	@ 0x4c
			if (HAL_GetTick() - time1 >= 1000) {
 8000a54:	464b      	mov	r3, r9
 8000a56:	46d9      	mov	r9, fp
 8000a58:	469b      	mov	fp, r3
		if (!cutoff) {	// if the robot is not in cutoff
 8000a5a:	9b03      	ldr	r3, [sp, #12]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d000      	beq.n	8000a64 <main+0x4f4>
 8000a62:	e143      	b.n	8000cec <main+0x77c>
			if (!armed) {	// if the robot is not already armed
 8000a64:	7833      	ldrb	r3, [r6, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d100      	bne.n	8000a6c <main+0x4fc>
 8000a6a:	e0dd      	b.n	8000c28 <main+0x6b8>
				enableMotor(M1);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 fb1b 	bl	80010a8 <enableMotor>
				enableMotor(M2);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f000 fb18 	bl	80010a8 <enableMotor>
				enableMotor(M3);
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f000 fb15 	bl	80010a8 <enableMotor>
				if (tankMixIsON) {	// calculate and use the tank mix only if it's enabled
 8000a7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d100      	bne.n	8000a88 <main+0x518>
 8000a86:	e0b7      	b.n	8000bf8 <main+0x688>
					tank = tankMix(getChannelValuePercentage(stChannel), getChannelValuePercentage(thChannel));
 8000a88:	7838      	ldrb	r0, [r7, #0]
 8000a8a:	f000 fb2d 	bl	80010e8 <getChannelValuePercentage>
 8000a8e:	9b00      	ldr	r3, [sp, #0]
 8000a90:	900a      	str	r0, [sp, #40]	@ 0x28
 8000a92:	7818      	ldrb	r0, [r3, #0]
 8000a94:	f000 fb28 	bl	80010e8 <getChannelValuePercentage>
 8000a98:	0001      	movs	r1, r0
 8000a9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000a9c:	f000 fbb4 	bl	8001208 <tankMix>
 8000aa0:	4653      	mov	r3, sl
 8000aa2:	8018      	strh	r0, [r3, #0]
					setTankMotor(tank);
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	f000 f97b 	bl	8000da0 <setTankMotor>
					setMotorSpeedBidirectional(mWeapon, getChannelValuePercentage(wpChannel));
 8000aaa:	9b01      	ldr	r3, [sp, #4]
 8000aac:	7818      	ldrb	r0, [r3, #0]
				if (weaponDoubleDirection) {
 8000aae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d05e      	beq.n	8000b74 <main+0x604>
					setMotorSpeedBidirectional(mWeapon, getChannelValuePercentage(wpChannel));
 8000ab6:	9b06      	ldr	r3, [sp, #24]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	930a      	str	r3, [sp, #40]	@ 0x28
 8000abc:	f000 fb14 	bl	80010e8 <getChannelValuePercentage>
 8000ac0:	b241      	sxtb	r1, r0
 8000ac2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000ac4:	f000 f9f4 	bl	8000eb0 <setMotorSpeedBidirectional>
				setServoAngle(S1, getChannelValuePercentage(s1Channel));	// servo 1 attached to channel s1Channel
 8000ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000aca:	7818      	ldrb	r0, [r3, #0]
 8000acc:	f000 fb0c 	bl	80010e8 <getChannelValuePercentage>
 8000ad0:	0001      	movs	r1, r0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f000 fbd4 	bl	8001280 <setServoAngle>
				setServoAngle(S2, getChannelValuePercentage(s2Channel));
 8000ad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8000ada:	7818      	ldrb	r0, [r3, #0]
 8000adc:	f000 fb04 	bl	80010e8 <getChannelValuePercentage>
 8000ae0:	0001      	movs	r1, r0
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f000 fbcc 	bl	8001280 <setServoAngle>
			if (HAL_GetTick() - time2 >= 200) {
 8000ae8:	f001 fb62 	bl	80021b0 <HAL_GetTick>
 8000aec:	9b04      	ldr	r3, [sp, #16]
 8000aee:	1ac0      	subs	r0, r0, r3
 8000af0:	28c7      	cmp	r0, #199	@ 0xc7
 8000af2:	d823      	bhi.n	8000b3c <main+0x5cc>
			if (HAL_GetTick() - time1 >= 1000) {
 8000af4:	f001 fb5c 	bl	80021b0 <HAL_GetTick>
 8000af8:	23fa      	movs	r3, #250	@ 0xfa
 8000afa:	1b40      	subs	r0, r0, r5
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4298      	cmp	r0, r3
 8000b00:	d307      	bcc.n	8000b12 <main+0x5a2>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000b02:	2180      	movs	r1, #128	@ 0x80
 8000b04:	4862      	ldr	r0, [pc, #392]	@ (8000c90 <main+0x720>)
 8000b06:	0209      	lsls	r1, r1, #8
 8000b08:	f001 ff0c 	bl	8002924 <HAL_GPIO_TogglePin>
				time1 = HAL_GetTick();
 8000b0c:	f001 fb50 	bl	80021b0 <HAL_GetTick>
 8000b10:	0005      	movs	r5, r0
		if (commandRecieved) {	// recieved a command from the USB
 8000b12:	9b07      	ldr	r3, [sp, #28]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d09f      	beq.n	8000a5a <main+0x4ea>
			if (modifySettingsWithCommand()) {
 8000b1a:	f000 fecf 	bl	80018bc <modifySettingsWithCommand>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	d037      	beq.n	8000b92 <main+0x622>
				uint8_t s[] = "\nOK\n";
 8000b22:	465b      	mov	r3, fp
 8000b24:	681b      	ldr	r3, [r3, #0]
				serialPrintString(s);
 8000b26:	0020      	movs	r0, r4
				uint8_t s[] = "\nOK\n";
 8000b28:	6023      	str	r3, [r4, #0]
 8000b2a:	465b      	mov	r3, fp
 8000b2c:	791b      	ldrb	r3, [r3, #4]
 8000b2e:	7123      	strb	r3, [r4, #4]
				serialPrintString(s);
 8000b30:	f000 fc38 	bl	80013a4 <serialPrintString>
			commandRecieved = FALSE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	9a07      	ldr	r2, [sp, #28]
 8000b38:	7013      	strb	r3, [r2, #0]
 8000b3a:	e78e      	b.n	8000a5a <main+0x4ea>
				batteryVoltage = getBattVoltage();
 8000b3c:	f7ff fcb2 	bl	80004a4 <getBattVoltage>
 8000b40:	9b02      	ldr	r3, [sp, #8]
 8000b42:	8018      	strh	r0, [r3, #0]
				if (HAL_GetTick() - timeLimitBattery >= CUTOFF_BATTERY_TIMEOUT * 1000) {
 8000b44:	f001 fb34 	bl	80021b0 <HAL_GetTick>
 8000b48:	9b05      	ldr	r3, [sp, #20]
 8000b4a:	1ac0      	subs	r0, r0, r3
 8000b4c:	4b66      	ldr	r3, [pc, #408]	@ (8000ce8 <main+0x778>)
 8000b4e:	4298      	cmp	r0, r3
 8000b50:	d93e      	bls.n	8000bd0 <main+0x660>
					limit = TRUE;	// activate limit state (weapon speed limited)
 8000b52:	2301      	movs	r3, #1
 8000b54:	464a      	mov	r2, r9
 8000b56:	7013      	strb	r3, [r2, #0]
				if (HAL_GetTick() - timeLowBattery >= CUTOFF_BATTERY_TIMEOUT * 1000) {
 8000b58:	f001 fb2a 	bl	80021b0 <HAL_GetTick>
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	1ac0      	subs	r0, r0, r3
 8000b60:	4b61      	ldr	r3, [pc, #388]	@ (8000ce8 <main+0x778>)
 8000b62:	4298      	cmp	r0, r3
 8000b64:	d91f      	bls.n	8000ba6 <main+0x636>
					cutoff = TRUE;	// activate cutoff state (robot disarmed)
 8000b66:	2301      	movs	r3, #1
 8000b68:	9a03      	ldr	r2, [sp, #12]
 8000b6a:	7013      	strb	r3, [r2, #0]
				time2 = HAL_GetTick();
 8000b6c:	f001 fb20 	bl	80021b0 <HAL_GetTick>
 8000b70:	9004      	str	r0, [sp, #16]
 8000b72:	e7bf      	b.n	8000af4 <main+0x584>
					uint8_t wp = getChannelValuePercentage(wpChannel);
 8000b74:	f000 fab8 	bl	80010e8 <getChannelValuePercentage>
					if (limit) wp = wp / 2;	// valid only in the unidirectional mode
 8000b78:	464b      	mov	r3, r9
 8000b7a:	781b      	ldrb	r3, [r3, #0]
					uint8_t wp = getChannelValuePercentage(wpChannel);
 8000b7c:	0001      	movs	r1, r0
					if (limit) wp = wp / 2;	// valid only in the unidirectional mode
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <main+0x616>
 8000b82:	0841      	lsrs	r1, r0, #1
 8000b84:	b2c9      	uxtb	r1, r1
					setMotorSpeedUnidirectional(mWeapon, wp);
 8000b86:	9b06      	ldr	r3, [sp, #24]
 8000b88:	b249      	sxtb	r1, r1
 8000b8a:	7818      	ldrb	r0, [r3, #0]
 8000b8c:	f000 f9d2 	bl	8000f34 <setMotorSpeedUnidirectional>
 8000b90:	e79a      	b.n	8000ac8 <main+0x558>
				uint8_t s[] = "\nWHAT??\n";
 8000b92:	0023      	movs	r3, r4
 8000b94:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8000b96:	ca03      	ldmia	r2!, {r0, r1}
 8000b98:	c303      	stmia	r3!, {r0, r1}
 8000b9a:	7812      	ldrb	r2, [r2, #0]
				serialPrintString(s);
 8000b9c:	0020      	movs	r0, r4
				uint8_t s[] = "\nWHAT??\n";
 8000b9e:	701a      	strb	r2, [r3, #0]
				serialPrintString(s);
 8000ba0:	f000 fc00 	bl	80013a4 <serialPrintString>
 8000ba4:	e7c6      	b.n	8000b34 <main+0x5c4>
				if (batteryVoltage >= cutOffVoltage * 100 * batteryConfiguration && !cutoff)
 8000ba6:	9b02      	ldr	r3, [sp, #8]
 8000ba8:	9a08      	ldr	r2, [sp, #32]
 8000baa:	8819      	ldrh	r1, [r3, #0]
 8000bac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	435a      	muls	r2, r3
 8000bb4:	2364      	movs	r3, #100	@ 0x64
 8000bb6:	4353      	muls	r3, r2
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	dbd7      	blt.n	8000b6c <main+0x5fc>
 8000bbc:	9b03      	ldr	r3, [sp, #12]
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1d3      	bne.n	8000b6c <main+0x5fc>
					timeLowBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8000bc4:	f001 faf4 	bl	80021b0 <HAL_GetTick>
 8000bc8:	230a      	movs	r3, #10
 8000bca:	4698      	mov	r8, r3
 8000bcc:	4480      	add	r8, r0
 8000bce:	e7cd      	b.n	8000b6c <main+0x5fc>
				if (batteryVoltage >= limitVoltage * 100 * batteryConfiguration && !limit)
 8000bd0:	9b02      	ldr	r3, [sp, #8]
 8000bd2:	9a08      	ldr	r2, [sp, #32]
 8000bd4:	8819      	ldrh	r1, [r3, #0]
 8000bd6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8000bd8:	7812      	ldrb	r2, [r2, #0]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	435a      	muls	r2, r3
 8000bde:	2364      	movs	r3, #100	@ 0x64
 8000be0:	4353      	muls	r3, r2
 8000be2:	4299      	cmp	r1, r3
 8000be4:	dbb8      	blt.n	8000b58 <main+0x5e8>
 8000be6:	464b      	mov	r3, r9
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d1b4      	bne.n	8000b58 <main+0x5e8>
					timeLimitBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8000bee:	f001 fadf 	bl	80021b0 <HAL_GetTick>
 8000bf2:	300a      	adds	r0, #10
 8000bf4:	9005      	str	r0, [sp, #20]
 8000bf6:	e7af      	b.n	8000b58 <main+0x5e8>
					setMotorSpeedBidirectional(1, getChannelValuePercentage(thChannel));
 8000bf8:	9b00      	ldr	r3, [sp, #0]
 8000bfa:	7818      	ldrb	r0, [r3, #0]
 8000bfc:	f000 fa74 	bl	80010e8 <getChannelValuePercentage>
 8000c00:	b241      	sxtb	r1, r0
 8000c02:	2001      	movs	r0, #1
 8000c04:	f000 f954 	bl	8000eb0 <setMotorSpeedBidirectional>
					setMotorSpeedBidirectional(2, getChannelValuePercentage(stChannel));
 8000c08:	7838      	ldrb	r0, [r7, #0]
 8000c0a:	f000 fa6d 	bl	80010e8 <getChannelValuePercentage>
 8000c0e:	b241      	sxtb	r1, r0
 8000c10:	2002      	movs	r0, #2
 8000c12:	f000 f94d 	bl	8000eb0 <setMotorSpeedBidirectional>
					setMotorSpeedBidirectional(3, getChannelValuePercentage(wpChannel));
 8000c16:	9b01      	ldr	r3, [sp, #4]
 8000c18:	7818      	ldrb	r0, [r3, #0]
 8000c1a:	f000 fa65 	bl	80010e8 <getChannelValuePercentage>
 8000c1e:	b241      	sxtb	r1, r0
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f945 	bl	8000eb0 <setMotorSpeedBidirectional>
 8000c26:	e740      	b.n	8000aaa <main+0x53a>
				makeSound(mLeft, 50);
 8000c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c2a:	2132      	movs	r1, #50	@ 0x32
 8000c2c:	7818      	ldrb	r0, [r3, #0]
 8000c2e:	f000 f9bd 	bl	8000fac <makeSound>
				HAL_Delay(50);
 8000c32:	2032      	movs	r0, #50	@ 0x32
 8000c34:	f001 fac2 	bl	80021bc <HAL_Delay>
				if (noDisarm) {	// if the throttle steering and weapon channels are at zero/center arm the robot
 8000c38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d100      	bne.n	8000c44 <main+0x6d4>
 8000c42:	e080      	b.n	8000d46 <main+0x7d6>
	uint8_t position = getChannelValuePercentage(channel);
 8000c44:	9b00      	ldr	r3, [sp, #0]
 8000c46:	7818      	ldrb	r0, [r3, #0]
 8000c48:	f000 fa4e 	bl	80010e8 <getChannelValuePercentage>
	if (position >= 50 - 1 && position <= 50 + 1) {	// 50+1 and 50-1 to give some dead-zone
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	3b31      	subs	r3, #49	@ 0x31
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d861      	bhi.n	8000d1a <main+0x7aa>
	uint8_t position = getChannelValuePercentage(channel);
 8000c56:	7838      	ldrb	r0, [r7, #0]
 8000c58:	f000 fa46 	bl	80010e8 <getChannelValuePercentage>
	if (position >= 50 - 1 && position <= 50 + 1) {	// 50+1 and 50-1 to give some dead-zone
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	3b31      	subs	r3, #49	@ 0x31
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d859      	bhi.n	8000d1a <main+0x7aa>
	uint8_t position = getChannelValuePercentage(channel);
 8000c66:	9b01      	ldr	r3, [sp, #4]
 8000c68:	7818      	ldrb	r0, [r3, #0]
 8000c6a:	f000 fa3d 	bl	80010e8 <getChannelValuePercentage>
	if (position <= 0 + 2) {	// 0+2 to give some dead-zone
 8000c6e:	2802      	cmp	r0, #2
 8000c70:	d853      	bhi.n	8000d1a <main+0x7aa>
							&& checkChannelAtZero(wpChannel)) armed = TRUE;
 8000c72:	2301      	movs	r3, #1
 8000c74:	7033      	strb	r3, [r6, #0]
 8000c76:	e6f9      	b.n	8000a6c <main+0x4fc>
 8000c78:	200003a4 	.word	0x200003a4
 8000c7c:	40012400 	.word	0x40012400
 8000c80:	200002c0 	.word	0x200002c0
 8000c84:	40001000 	.word	0x40001000
 8000c88:	0000ffff 	.word	0x0000ffff
 8000c8c:	20000222 	.word	0x20000222
 8000c90:	48000800 	.word	0x48000800
 8000c94:	20000224 	.word	0x20000224
 8000c98:	20000221 	.word	0x20000221
 8000c9c:	2000021d 	.word	0x2000021d
 8000ca0:	20000010 	.word	0x20000010
 8000ca4:	20000006 	.word	0x20000006
 8000ca8:	20000011 	.word	0x20000011
 8000cac:	2000000f 	.word	0x2000000f
 8000cb0:	2000000c 	.word	0x2000000c
 8000cb4:	2000022c 	.word	0x2000022c
 8000cb8:	2000021c 	.word	0x2000021c
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000223 	.word	0x20000223
 8000cc4:	2000000e 	.word	0x2000000e
 8000cc8:	2000000d 	.word	0x2000000d
 8000ccc:	20000226 	.word	0x20000226
 8000cd0:	20000005 	.word	0x20000005
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	20000228 	.word	0x20000228
 8000cdc:	08008860 	.word	0x08008860
 8000ce0:	08008868 	.word	0x08008868
 8000ce4:	20000007 	.word	0x20000007
 8000ce8:	0000270f 	.word	0x0000270f
			if (HAL_GetTick() - time1 >= 100) {
 8000cec:	f001 fa60 	bl	80021b0 <HAL_GetTick>
 8000cf0:	1b40      	subs	r0, r0, r5
 8000cf2:	2863      	cmp	r0, #99	@ 0x63
 8000cf4:	d800      	bhi.n	8000cf8 <main+0x788>
 8000cf6:	e70c      	b.n	8000b12 <main+0x5a2>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000cf8:	2180      	movs	r1, #128	@ 0x80
 8000cfa:	4817      	ldr	r0, [pc, #92]	@ (8000d58 <main+0x7e8>)
 8000cfc:	0209      	lsls	r1, r1, #8
 8000cfe:	f001 fe11 	bl	8002924 <HAL_GPIO_TogglePin>
				makeSound(mLeft, 100);	// beep while in cutoff mode
 8000d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d04:	2164      	movs	r1, #100	@ 0x64
 8000d06:	7818      	ldrb	r0, [r3, #0]
 8000d08:	f000 f950 	bl	8000fac <makeSound>
				time1 = HAL_GetTick();
 8000d0c:	f001 fa50 	bl	80021b0 <HAL_GetTick>
 8000d10:	0005      	movs	r5, r0
 8000d12:	e6fe      	b.n	8000b12 <main+0x5a2>
		loadSettingsFromEeprom();	// load the settings from the eeprom memory
 8000d14:	f000 fcd0 	bl	80016b8 <loadSettingsFromEeprom>
 8000d18:	e666      	b.n	80009e8 <main+0x478>
			if (armed) {	// if armed do...
 8000d1a:	7833      	ldrb	r3, [r6, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d000      	beq.n	8000d22 <main+0x7b2>
 8000d20:	e6a4      	b.n	8000a6c <main+0x4fc>
				disableMotor(M1);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f9a0 	bl	8001068 <disableMotor>
				disableMotor(M2);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f000 f99d 	bl	8001068 <disableMotor>
				disableMotor(M3);
 8000d2e:	2002      	movs	r0, #2
 8000d30:	f000 f99a 	bl	8001068 <disableMotor>
				setServoAngle(S1, 0);	// servo 1 attached to channel s1Channel
 8000d34:	2100      	movs	r1, #0
 8000d36:	0008      	movs	r0, r1
 8000d38:	f000 faa2 	bl	8001280 <setServoAngle>
				setServoAngle(S2, 0);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f000 fa9e 	bl	8001280 <setServoAngle>
 8000d44:	e6d0      	b.n	8000ae8 <main+0x578>
					if (getChannelValuePercentage(armChannel) > 75)
 8000d46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000d48:	7818      	ldrb	r0, [r3, #0]
 8000d4a:	f000 f9cd 	bl	80010e8 <getChannelValuePercentage>
 8000d4e:	284b      	cmp	r0, #75	@ 0x4b
 8000d50:	d88f      	bhi.n	8000c72 <main+0x702>
						armed = FALSE;
 8000d52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000d54:	7033      	strb	r3, [r6, #0]
			if (armed) {	// if armed do...
 8000d56:	e7e4      	b.n	8000d22 <main+0x7b2>
 8000d58:	48000800 	.word	0x48000800

08000d5c <map>:
int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {
 8000d5c:	b570      	push	{r4, r5, r6, lr}
 8000d5e:	001d      	movs	r5, r3
 8000d60:	ab04      	add	r3, sp, #16
 8000d62:	2400      	movs	r4, #0
 8000d64:	5f1c      	ldrsh	r4, [r3, r4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000d66:	1a43      	subs	r3, r0, r1
 8000d68:	1b60      	subs	r0, r4, r5
 8000d6a:	4358      	muls	r0, r3
 8000d6c:	1a51      	subs	r1, r2, r1
 8000d6e:	f7ff fa67 	bl	8000240 <__divsi3>
 8000d72:	1940      	adds	r0, r0, r5
 8000d74:	b200      	sxth	r0, r0
}
 8000d76:	bd70      	pop	{r4, r5, r6, pc}

08000d78 <Error_Handler>:
 8000d78:	b672      	cpsid	i
	while (1) {
 8000d7a:	e7fe      	b.n	8000d7a <Error_Handler+0x2>

08000d7c <initMotors>:

extern uint8_t m1Rev;
extern uint8_t m2Rev;
extern uint8_t m3Rev;

void initMotors(TIM_HandleTypeDef *htim) {
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	0004      	movs	r4, r0
	HAL_TIM_PWM_Init(htim);
 8000d80:	f004 f8b2 	bl	8004ee8 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000d84:	2100      	movs	r1, #0
 8000d86:	0020      	movs	r0, r4
 8000d88:	f004 f930 	bl	8004fec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	0020      	movs	r0, r4
 8000d90:	f004 f92c 	bl	8004fec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8000d94:	2108      	movs	r1, #8
 8000d96:	0020      	movs	r0, r4
 8000d98:	f004 f928 	bl	8004fec <HAL_TIM_PWM_Start>
}
 8000d9c:	bd10      	pop	{r4, pc}
 8000d9e:	46c0      	nop			@ (mov r8, r8)

08000da0 <setTankMotor>:

void setTankMotor(TankMotors t) {
 8000da0:	b530      	push	{r4, r5, lr}
	// set the speed of the motors
	setMotorSpeedBidirectional(mLeft, t.speedL);
 8000da2:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <setTankMotor+0xf4>)
void setTankMotor(TankMotors t) {
 8000da4:	b083      	sub	sp, #12
	setMotorSpeedBidirectional(mLeft, t.speedL);
 8000da6:	7819      	ldrb	r1, [r3, #0]
	}
	return isRev;
}

void setMotorSpeedBidirectional(uint8_t motorN, int8_t speed) {
	speed = (speed - 50) * 2;
 8000da8:	b243      	sxtb	r3, r0
 8000daa:	3b32      	subs	r3, #50	@ 0x32
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	b25b      	sxtb	r3, r3
	uint8_t sp = abs(speed);
	uint8_t dir;
	if (speed >= 0)
 8000db0:	43da      	mvns	r2, r3
void setTankMotor(TankMotors t) {
 8000db2:	ac01      	add	r4, sp, #4
 8000db4:	8020      	strh	r0, [r4, #0]
	uint8_t sp = abs(speed);
 8000db6:	17d8      	asrs	r0, r3, #31
 8000db8:	181d      	adds	r5, r3, r0
 8000dba:	4045      	eors	r5, r0
 8000dbc:	b2ed      	uxtb	r5, r5
	if (speed >= 0)
 8000dbe:	0fd2      	lsrs	r2, r2, #31
	switch (motorN) {
 8000dc0:	2901      	cmp	r1, #1
 8000dc2:	d018      	beq.n	8000df6 <setTankMotor+0x56>
 8000dc4:	2902      	cmp	r1, #2
 8000dc6:	d057      	beq.n	8000e78 <setTankMotor+0xd8>
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d048      	beq.n	8000e5e <setTankMotor+0xbe>
	setMotorSpeedBidirectional(mRight, t.speedR);
 8000dcc:	4b32      	ldr	r3, [pc, #200]	@ (8000e98 <setTankMotor+0xf8>)
 8000dce:	7819      	ldrb	r1, [r3, #0]
	speed = (speed - 50) * 2;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	56e3      	ldrsb	r3, [r4, r3]
 8000dd4:	3b32      	subs	r3, #50	@ 0x32
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	b25b      	sxtb	r3, r3
	if (speed >= 0)
 8000dda:	43da      	mvns	r2, r3
	uint8_t sp = abs(speed);
 8000ddc:	17d8      	asrs	r0, r3, #31
 8000dde:	181c      	adds	r4, r3, r0
 8000de0:	4044      	eors	r4, r0
 8000de2:	b2e4      	uxtb	r4, r4
	if (speed >= 0)
 8000de4:	0fd2      	lsrs	r2, r2, #31
	switch (motorN) {
 8000de6:	2901      	cmp	r1, #1
 8000de8:	d02c      	beq.n	8000e44 <setTankMotor+0xa4>
 8000dea:	2902      	cmp	r1, #2
 8000dec:	d01d      	beq.n	8000e2a <setTankMotor+0x8a>
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d00e      	beq.n	8000e10 <setTankMotor+0x70>
}
 8000df2:	b003      	add	sp, #12
 8000df4:	bd30      	pop	{r4, r5, pc}
			isRev = m2Rev;
 8000df6:	4929      	ldr	r1, [pc, #164]	@ (8000e9c <setTankMotor+0xfc>)
		dir = TRUE;
	else
		dir = FALSE;

	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000df8:	7809      	ldrb	r1, [r1, #0]
 8000dfa:	2900      	cmp	r1, #0
 8000dfc:	d000      	beq.n	8000e00 <setTankMotor+0x60>
 8000dfe:	0fda      	lsrs	r2, r3, #31
		case M1:
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
			TIM1->CCR1 = sp;
			break;
		case M2:
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	4827      	ldr	r0, [pc, #156]	@ (8000ea0 <setTankMotor+0x100>)
 8000e04:	0189      	lsls	r1, r1, #6
 8000e06:	f001 fd87 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <setTankMotor+0x104>)
 8000e0c:	639d      	str	r5, [r3, #56]	@ 0x38
			break;
 8000e0e:	e7dd      	b.n	8000dcc <setTankMotor+0x2c>
			isRev = m1Rev;
 8000e10:	4925      	ldr	r1, [pc, #148]	@ (8000ea8 <setTankMotor+0x108>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000e12:	7809      	ldrb	r1, [r1, #0]
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d000      	beq.n	8000e1a <setTankMotor+0x7a>
 8000e18:	0fda      	lsrs	r2, r3, #31
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000e1a:	2180      	movs	r1, #128	@ 0x80
 8000e1c:	4820      	ldr	r0, [pc, #128]	@ (8000ea0 <setTankMotor+0x100>)
 8000e1e:	0209      	lsls	r1, r1, #8
 8000e20:	f001 fd7a 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <setTankMotor+0x104>)
 8000e26:	635c      	str	r4, [r3, #52]	@ 0x34
			break;
 8000e28:	e7e3      	b.n	8000df2 <setTankMotor+0x52>
			isRev = m3Rev;
 8000e2a:	4920      	ldr	r1, [pc, #128]	@ (8000eac <setTankMotor+0x10c>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000e2c:	7809      	ldrb	r1, [r1, #0]
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d000      	beq.n	8000e34 <setTankMotor+0x94>
 8000e32:	0fda      	lsrs	r2, r3, #31
		case M3:
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8000e34:	2180      	movs	r1, #128	@ 0x80
 8000e36:	481a      	ldr	r0, [pc, #104]	@ (8000ea0 <setTankMotor+0x100>)
 8000e38:	0109      	lsls	r1, r1, #4
 8000e3a:	f001 fd6d 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <setTankMotor+0x104>)
 8000e40:	63dc      	str	r4, [r3, #60]	@ 0x3c
}
 8000e42:	e7d6      	b.n	8000df2 <setTankMotor+0x52>
			isRev = m2Rev;
 8000e44:	4915      	ldr	r1, [pc, #84]	@ (8000e9c <setTankMotor+0xfc>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000e46:	7809      	ldrb	r1, [r1, #0]
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d000      	beq.n	8000e4e <setTankMotor+0xae>
 8000e4c:	0fda      	lsrs	r2, r3, #31
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000e4e:	2180      	movs	r1, #128	@ 0x80
 8000e50:	4813      	ldr	r0, [pc, #76]	@ (8000ea0 <setTankMotor+0x100>)
 8000e52:	0189      	lsls	r1, r1, #6
 8000e54:	f001 fd60 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000e58:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <setTankMotor+0x104>)
 8000e5a:	639c      	str	r4, [r3, #56]	@ 0x38
			break;
 8000e5c:	e7c9      	b.n	8000df2 <setTankMotor+0x52>
			isRev = m1Rev;
 8000e5e:	4912      	ldr	r1, [pc, #72]	@ (8000ea8 <setTankMotor+0x108>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000e60:	7809      	ldrb	r1, [r1, #0]
 8000e62:	2900      	cmp	r1, #0
 8000e64:	d000      	beq.n	8000e68 <setTankMotor+0xc8>
 8000e66:	0fda      	lsrs	r2, r3, #31
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000e68:	2180      	movs	r1, #128	@ 0x80
 8000e6a:	480d      	ldr	r0, [pc, #52]	@ (8000ea0 <setTankMotor+0x100>)
 8000e6c:	0209      	lsls	r1, r1, #8
 8000e6e:	f001 fd53 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <setTankMotor+0x104>)
 8000e74:	635d      	str	r5, [r3, #52]	@ 0x34
			break;
 8000e76:	e7a9      	b.n	8000dcc <setTankMotor+0x2c>
			isRev = m3Rev;
 8000e78:	490c      	ldr	r1, [pc, #48]	@ (8000eac <setTankMotor+0x10c>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000e7a:	7809      	ldrb	r1, [r1, #0]
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	d000      	beq.n	8000e82 <setTankMotor+0xe2>
 8000e80:	0fda      	lsrs	r2, r3, #31
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8000e82:	2180      	movs	r1, #128	@ 0x80
 8000e84:	4806      	ldr	r0, [pc, #24]	@ (8000ea0 <setTankMotor+0x100>)
 8000e86:	0109      	lsls	r1, r1, #4
 8000e88:	f001 fd46 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <setTankMotor+0x104>)
 8000e8e:	63dd      	str	r5, [r3, #60]	@ 0x3c
			break;
 8000e90:	e79c      	b.n	8000dcc <setTankMotor+0x2c>
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	2000021d 	.word	0x2000021d
 8000e98:	20000009 	.word	0x20000009
 8000e9c:	2000000a 	.word	0x2000000a
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	40012c00 	.word	0x40012c00
 8000ea8:	2000000b 	.word	0x2000000b
 8000eac:	20000220 	.word	0x20000220

08000eb0 <setMotorSpeedBidirectional>:
	speed = (speed - 50) * 2;
 8000eb0:	3932      	subs	r1, #50	@ 0x32
 8000eb2:	0049      	lsls	r1, r1, #1
 8000eb4:	b249      	sxtb	r1, r1
	uint8_t sp = abs(speed);
 8000eb6:	17ca      	asrs	r2, r1, #31
void setMotorSpeedBidirectional(uint8_t motorN, int8_t speed) {
 8000eb8:	b510      	push	{r4, lr}
	uint8_t sp = abs(speed);
 8000eba:	188c      	adds	r4, r1, r2
 8000ebc:	4054      	eors	r4, r2
	if (speed >= 0)
 8000ebe:	43ca      	mvns	r2, r1
	uint8_t sp = abs(speed);
 8000ec0:	b2e4      	uxtb	r4, r4
	if (speed >= 0)
 8000ec2:	0fd2      	lsrs	r2, r2, #31
	switch (motorN) {
 8000ec4:	2801      	cmp	r0, #1
 8000ec6:	d004      	beq.n	8000ed2 <setMotorSpeedBidirectional+0x22>
 8000ec8:	2802      	cmp	r0, #2
 8000eca:	d01c      	beq.n	8000f06 <setMotorSpeedBidirectional+0x56>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d00d      	beq.n	8000eec <setMotorSpeedBidirectional+0x3c>
	}
}
 8000ed0:	bd10      	pop	{r4, pc}
			isRev = m2Rev;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <setMotorSpeedBidirectional+0x70>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d000      	beq.n	8000edc <setMotorSpeedBidirectional+0x2c>
 8000eda:	0fca      	lsrs	r2, r1, #31
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	4811      	ldr	r0, [pc, #68]	@ (8000f24 <setMotorSpeedBidirectional+0x74>)
 8000ee0:	0189      	lsls	r1, r1, #6
 8000ee2:	f001 fd19 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	@ (8000f28 <setMotorSpeedBidirectional+0x78>)
 8000ee8:	639c      	str	r4, [r3, #56]	@ 0x38
			break;
 8000eea:	e7f1      	b.n	8000ed0 <setMotorSpeedBidirectional+0x20>
			isRev = m1Rev;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <setMotorSpeedBidirectional+0x7c>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d000      	beq.n	8000ef6 <setMotorSpeedBidirectional+0x46>
 8000ef4:	0fca      	lsrs	r2, r1, #31
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000ef6:	2180      	movs	r1, #128	@ 0x80
 8000ef8:	480a      	ldr	r0, [pc, #40]	@ (8000f24 <setMotorSpeedBidirectional+0x74>)
 8000efa:	0209      	lsls	r1, r1, #8
 8000efc:	f001 fd0c 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8000f00:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <setMotorSpeedBidirectional+0x78>)
 8000f02:	635c      	str	r4, [r3, #52]	@ 0x34
			break;
 8000f04:	e7e4      	b.n	8000ed0 <setMotorSpeedBidirectional+0x20>
			isRev = m3Rev;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <setMotorSpeedBidirectional+0x80>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d000      	beq.n	8000f10 <setMotorSpeedBidirectional+0x60>
 8000f0e:	0fca      	lsrs	r2, r1, #31
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8000f10:	2180      	movs	r1, #128	@ 0x80
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <setMotorSpeedBidirectional+0x74>)
 8000f14:	0109      	lsls	r1, r1, #4
 8000f16:	f001 fcff 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8000f1a:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <setMotorSpeedBidirectional+0x78>)
 8000f1c:	63dc      	str	r4, [r3, #60]	@ 0x3c
}
 8000f1e:	e7d7      	b.n	8000ed0 <setMotorSpeedBidirectional+0x20>
 8000f20:	2000000a 	.word	0x2000000a
 8000f24:	48000400 	.word	0x48000400
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	2000000b 	.word	0x2000000b
 8000f30:	20000220 	.word	0x20000220

08000f34 <setMotorSpeedUnidirectional>:

void setMotorSpeedUnidirectional(uint8_t motorN, int8_t speed) {
 8000f34:	b510      	push	{r4, lr}
	uint8_t sp = speed;
	uint8_t dir = m1Rev;
 8000f36:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <setMotorSpeedUnidirectional+0x64>)
	uint8_t sp = speed;
 8000f38:	b2cc      	uxtb	r4, r1
	uint8_t dir = m1Rev;
 8000f3a:	781a      	ldrb	r2, [r3, #0]
	switch (motorN) {
 8000f3c:	2801      	cmp	r0, #1
 8000f3e:	d004      	beq.n	8000f4a <setMotorSpeedUnidirectional+0x16>
 8000f40:	2802      	cmp	r0, #2
 8000f42:	d01a      	beq.n	8000f7a <setMotorSpeedUnidirectional+0x46>
 8000f44:	2800      	cmp	r0, #0
 8000f46:	d00f      	beq.n	8000f68 <setMotorSpeedUnidirectional+0x34>
		case M3:
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
			TIM1->CCR3 = sp;
			break;
	}
}
 8000f48:	bd10      	pop	{r4, pc}
			isRev = m2Rev;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <setMotorSpeedUnidirectional+0x68>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <setMotorSpeedUnidirectional+0x24>
 8000f52:	4253      	negs	r3, r2
 8000f54:	415a      	adcs	r2, r3
 8000f56:	b2d2      	uxtb	r2, r2
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000f58:	2180      	movs	r1, #128	@ 0x80
 8000f5a:	4811      	ldr	r0, [pc, #68]	@ (8000fa0 <setMotorSpeedUnidirectional+0x6c>)
 8000f5c:	0189      	lsls	r1, r1, #6
 8000f5e:	f001 fcdb 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <setMotorSpeedUnidirectional+0x70>)
 8000f64:	639c      	str	r4, [r3, #56]	@ 0x38
			break;
 8000f66:	e7ef      	b.n	8000f48 <setMotorSpeedUnidirectional+0x14>
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000f68:	2180      	movs	r1, #128	@ 0x80
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <setMotorSpeedUnidirectional+0x6c>)
 8000f6e:	0209      	lsls	r1, r1, #8
 8000f70:	f001 fcd2 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <setMotorSpeedUnidirectional+0x70>)
 8000f76:	635c      	str	r4, [r3, #52]	@ 0x34
			break;
 8000f78:	e7e6      	b.n	8000f48 <setMotorSpeedUnidirectional+0x14>
			isRev = m3Rev;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <setMotorSpeedUnidirectional+0x74>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <setMotorSpeedUnidirectional+0x54>
 8000f82:	4253      	negs	r3, r2
 8000f84:	415a      	adcs	r2, r3
 8000f86:	b2d2      	uxtb	r2, r2
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8000f88:	2180      	movs	r1, #128	@ 0x80
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <setMotorSpeedUnidirectional+0x6c>)
 8000f8c:	0109      	lsls	r1, r1, #4
 8000f8e:	f001 fcc3 	bl	8002918 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8000f92:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <setMotorSpeedUnidirectional+0x70>)
 8000f94:	63dc      	str	r4, [r3, #60]	@ 0x3c
}
 8000f96:	e7d7      	b.n	8000f48 <setMotorSpeedUnidirectional+0x14>
 8000f98:	2000000b 	.word	0x2000000b
 8000f9c:	2000000a 	.word	0x2000000a
 8000fa0:	48000400 	.word	0x48000400
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	20000220 	.word	0x20000220

08000fac <makeSound>:
/*	This is a blocking function that causes the motors to beep,
 *  keeping the duration as short as possible.
 * @duration:
 *
 */
void makeSound(uint8_t motorN, uint8_t duration) {
 8000fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fae:	0004      	movs	r4, r0
 8000fb0:	000d      	movs	r5, r1
	uint32_t time = HAL_GetTick();
 8000fb2:	f001 f8fd 	bl	80021b0 <HAL_GetTick>
 8000fb6:	0006      	movs	r6, r0
			break;
	}
}

void enableMotor(uint8_t motorN) {
	switch (motorN) {
 8000fb8:	2c01      	cmp	r4, #1
 8000fba:	d026      	beq.n	800100a <makeSound+0x5e>
 8000fbc:	2c02      	cmp	r4, #2
 8000fbe:	d047      	beq.n	8001050 <makeSound+0xa4>
 8000fc0:	2c00      	cmp	r4, #0
 8000fc2:	d03e      	beq.n	8001042 <makeSound+0x96>
				TIM1->CCR2 = 2;
 8000fc4:	2702      	movs	r7, #2
	while (HAL_GetTick() <= time + duration) {
 8000fc6:	19ad      	adds	r5, r5, r6
				TIM1->CCR2 = 2;
 8000fc8:	4e25      	ldr	r6, [pc, #148]	@ (8001060 <makeSound+0xb4>)
	while (HAL_GetTick() <= time + duration) {
 8000fca:	f001 f8f1 	bl	80021b0 <HAL_GetTick>
 8000fce:	42a8      	cmp	r0, r5
 8000fd0:	d808      	bhi.n	8000fe4 <makeSound+0x38>
		switch (motorN) {
 8000fd2:	2c01      	cmp	r4, #1
 8000fd4:	d017      	beq.n	8001006 <makeSound+0x5a>
 8000fd6:	2c02      	cmp	r4, #2
 8000fd8:	d10b      	bne.n	8000ff2 <makeSound+0x46>
				TIM1->CCR3 = 2;
 8000fda:	63f4      	str	r4, [r6, #60]	@ 0x3c
	while (HAL_GetTick() <= time + duration) {
 8000fdc:	f001 f8e8 	bl	80021b0 <HAL_GetTick>
 8000fe0:	42a8      	cmp	r0, r5
 8000fe2:	d9f6      	bls.n	8000fd2 <makeSound+0x26>
	switch (motorN) {
 8000fe4:	2c01      	cmp	r4, #1
 8000fe6:	d025      	beq.n	8001034 <makeSound+0x88>
 8000fe8:	2c02      	cmp	r4, #2
 8000fea:	d01c      	beq.n	8001026 <makeSound+0x7a>
 8000fec:	2c00      	cmp	r4, #0
 8000fee:	d013      	beq.n	8001018 <makeSound+0x6c>
}
 8000ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (motorN) {
 8000ff2:	2c00      	cmp	r4, #0
 8000ff4:	d005      	beq.n	8001002 <makeSound+0x56>
	while (HAL_GetTick() <= time + duration) {
 8000ff6:	f001 f8db 	bl	80021b0 <HAL_GetTick>
 8000ffa:	42a8      	cmp	r0, r5
 8000ffc:	d8f2      	bhi.n	8000fe4 <makeSound+0x38>
		switch (motorN) {
 8000ffe:	2c00      	cmp	r4, #0
 8001000:	d1f9      	bne.n	8000ff6 <makeSound+0x4a>
				TIM1->CCR1 = 2;
 8001002:	6377      	str	r7, [r6, #52]	@ 0x34
				break;
 8001004:	e7e1      	b.n	8000fca <makeSound+0x1e>
				TIM1->CCR2 = 2;
 8001006:	63b7      	str	r7, [r6, #56]	@ 0x38
				break;
 8001008:	e7df      	b.n	8000fca <makeSound+0x1e>
		case M1:
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
			break;
		case M2:
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
 800100a:	2180      	movs	r1, #128	@ 0x80
 800100c:	2201      	movs	r2, #1
 800100e:	4815      	ldr	r0, [pc, #84]	@ (8001064 <makeSound+0xb8>)
 8001010:	0149      	lsls	r1, r1, #5
 8001012:	f001 fc81 	bl	8002918 <HAL_GPIO_WritePin>
			break;
 8001016:	e7d5      	b.n	8000fc4 <makeSound+0x18>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, FALSE);
 8001018:	2180      	movs	r1, #128	@ 0x80
 800101a:	2200      	movs	r2, #0
 800101c:	4811      	ldr	r0, [pc, #68]	@ (8001064 <makeSound+0xb8>)
 800101e:	01c9      	lsls	r1, r1, #7
 8001020:	f001 fc7a 	bl	8002918 <HAL_GPIO_WritePin>
}
 8001024:	e7e4      	b.n	8000ff0 <makeSound+0x44>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	2200      	movs	r2, #0
 800102a:	480e      	ldr	r0, [pc, #56]	@ (8001064 <makeSound+0xb8>)
 800102c:	00c9      	lsls	r1, r1, #3
 800102e:	f001 fc73 	bl	8002918 <HAL_GPIO_WritePin>
}
 8001032:	e7dd      	b.n	8000ff0 <makeSound+0x44>
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	2200      	movs	r2, #0
 8001038:	480a      	ldr	r0, [pc, #40]	@ (8001064 <makeSound+0xb8>)
 800103a:	0149      	lsls	r1, r1, #5
 800103c:	f001 fc6c 	bl	8002918 <HAL_GPIO_WritePin>
			break;
 8001040:	e7d6      	b.n	8000ff0 <makeSound+0x44>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
 8001042:	2180      	movs	r1, #128	@ 0x80
 8001044:	2201      	movs	r2, #1
 8001046:	4807      	ldr	r0, [pc, #28]	@ (8001064 <makeSound+0xb8>)
 8001048:	01c9      	lsls	r1, r1, #7
 800104a:	f001 fc65 	bl	8002918 <HAL_GPIO_WritePin>
		case M3:
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
			break;
	}
}
 800104e:	e7b9      	b.n	8000fc4 <makeSound+0x18>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	2201      	movs	r2, #1
 8001054:	4803      	ldr	r0, [pc, #12]	@ (8001064 <makeSound+0xb8>)
 8001056:	00c9      	lsls	r1, r1, #3
 8001058:	f001 fc5e 	bl	8002918 <HAL_GPIO_WritePin>
			break;
 800105c:	e7b2      	b.n	8000fc4 <makeSound+0x18>
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	40012c00 	.word	0x40012c00
 8001064:	48000400 	.word	0x48000400

08001068 <disableMotor>:
void disableMotor(uint8_t motorN) {
 8001068:	b510      	push	{r4, lr}
	switch (motorN) {
 800106a:	2801      	cmp	r0, #1
 800106c:	d004      	beq.n	8001078 <disableMotor+0x10>
 800106e:	2802      	cmp	r0, #2
 8001070:	d010      	beq.n	8001094 <disableMotor+0x2c>
 8001072:	2800      	cmp	r0, #0
 8001074:	d007      	beq.n	8001086 <disableMotor+0x1e>
}
 8001076:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
 8001078:	2180      	movs	r1, #128	@ 0x80
 800107a:	2200      	movs	r2, #0
 800107c:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <disableMotor+0x3c>)
 800107e:	0149      	lsls	r1, r1, #5
 8001080:	f001 fc4a 	bl	8002918 <HAL_GPIO_WritePin>
			break;
 8001084:	e7f7      	b.n	8001076 <disableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, FALSE);
 8001086:	2180      	movs	r1, #128	@ 0x80
 8001088:	2200      	movs	r2, #0
 800108a:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <disableMotor+0x3c>)
 800108c:	01c9      	lsls	r1, r1, #7
 800108e:	f001 fc43 	bl	8002918 <HAL_GPIO_WritePin>
}
 8001092:	e7f0      	b.n	8001076 <disableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 8001094:	2180      	movs	r1, #128	@ 0x80
 8001096:	2200      	movs	r2, #0
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <disableMotor+0x3c>)
 800109a:	00c9      	lsls	r1, r1, #3
 800109c:	f001 fc3c 	bl	8002918 <HAL_GPIO_WritePin>
}
 80010a0:	e7e9      	b.n	8001076 <disableMotor+0xe>
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	48000400 	.word	0x48000400

080010a8 <enableMotor>:
void enableMotor(uint8_t motorN) {
 80010a8:	b510      	push	{r4, lr}
	switch (motorN) {
 80010aa:	2801      	cmp	r0, #1
 80010ac:	d004      	beq.n	80010b8 <enableMotor+0x10>
 80010ae:	2802      	cmp	r0, #2
 80010b0:	d010      	beq.n	80010d4 <enableMotor+0x2c>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	d007      	beq.n	80010c6 <enableMotor+0x1e>
}
 80010b6:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	2201      	movs	r2, #1
 80010bc:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <enableMotor+0x3c>)
 80010be:	0149      	lsls	r1, r1, #5
 80010c0:	f001 fc2a 	bl	8002918 <HAL_GPIO_WritePin>
			break;
 80010c4:	e7f7      	b.n	80010b6 <enableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
 80010c6:	2180      	movs	r1, #128	@ 0x80
 80010c8:	2201      	movs	r2, #1
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <enableMotor+0x3c>)
 80010cc:	01c9      	lsls	r1, r1, #7
 80010ce:	f001 fc23 	bl	8002918 <HAL_GPIO_WritePin>
}
 80010d2:	e7f0      	b.n	80010b6 <enableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 80010d4:	2180      	movs	r1, #128	@ 0x80
 80010d6:	2201      	movs	r2, #1
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <enableMotor+0x3c>)
 80010da:	00c9      	lsls	r1, r1, #3
 80010dc:	f001 fc1c 	bl	8002918 <HAL_GPIO_WritePin>
}
 80010e0:	e7e9      	b.n	80010b6 <enableMotor+0xe>
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	48000400 	.word	0x48000400

080010e8 <getChannelValuePercentage>:
//		}
//	}
//}

uint8_t getChannelValuePercentage(uint8_t channelNumber) {
	int temp = (reciever_channels[channelNumber] - 1000) / 10;
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <getChannelValuePercentage+0x28>)
 80010ea:	0040      	lsls	r0, r0, #1
 80010ec:	5ac3      	ldrh	r3, [r0, r3]
	if (temp > 100) temp = 100;
 80010ee:	4a09      	ldr	r2, [pc, #36]	@ (8001114 <getChannelValuePercentage+0x2c>)
 80010f0:	2064      	movs	r0, #100	@ 0x64
uint8_t getChannelValuePercentage(uint8_t channelNumber) {
 80010f2:	b510      	push	{r4, lr}
	if (temp > 100) temp = 100;
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d803      	bhi.n	8001100 <getChannelValuePercentage+0x18>
	if (temp < 0) temp = 0;
 80010f8:	4a07      	ldr	r2, [pc, #28]	@ (8001118 <getChannelValuePercentage+0x30>)
 80010fa:	2000      	movs	r0, #0
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d800      	bhi.n	8001102 <getChannelValuePercentage+0x1a>
	return temp;
}
 8001100:	bd10      	pop	{r4, pc}
	int temp = (reciever_channels[channelNumber] - 1000) / 10;
 8001102:	4a06      	ldr	r2, [pc, #24]	@ (800111c <getChannelValuePercentage+0x34>)
 8001104:	210a      	movs	r1, #10
 8001106:	1898      	adds	r0, r3, r2
 8001108:	f7ff f89a 	bl	8000240 <__divsi3>
	return temp;
 800110c:	b2c0      	uxtb	r0, r0
 800110e:	e7f7      	b.n	8001100 <getChannelValuePercentage+0x18>
 8001110:	200003e4 	.word	0x200003e4
 8001114:	000007d9 	.word	0x000007d9
 8001118:	000003de 	.word	0x000003de
 800111c:	fffffc18 	.word	0xfffffc18

08001120 <initReciever>:

//void initRecieverPPM(TIM_HandleTypeDef *htim) {
//	HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_3);
//}

void initReciever(TIM_HandleTypeDef *htim) {
 8001120:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(htim);
 8001122:	f003 feb5 	bl	8004e90 <HAL_TIM_Base_Start>
}
 8001126:	bd10      	pop	{r4, pc}

08001128 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (recieverIsPWM) {
 8001128:	4b30      	ldr	r3, [pc, #192]	@ (80011ec <HAL_GPIO_EXTI_Callback+0xc4>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800112a:	b570      	push	{r4, r5, r6, lr}
	if (recieverIsPWM) {
 800112c:	681b      	ldr	r3, [r3, #0]
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800112e:	0004      	movs	r4, r0
	if (recieverIsPWM) {
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00e      	beq.n	8001152 <HAL_GPIO_EXTI_Callback+0x2a>
		// channel 1
		if (GPIO_Pin == CH1_Pin) {
 8001134:	2801      	cmp	r0, #1
 8001136:	d02b      	beq.n	8001190 <HAL_GPIO_EXTI_Callback+0x68>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[1] = usWidth;
			}
		}
		// channel 2 (only falling, because it starts with ch1)
		if (GPIO_Pin == CH2_Pin) {
 8001138:	2802      	cmp	r0, #2
 800113a:	d043      	beq.n	80011c4 <HAL_GPIO_EXTI_Callback+0x9c>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
			reciever_channels[2] = usWidth;
		}
		// channel 3 (only falling, because it starts with ch1)
		if (GPIO_Pin == CH3_Pin) {
 800113c:	2804      	cmp	r0, #4
 800113e:	d136      	bne.n	80011ae <HAL_GPIO_EXTI_Callback+0x86>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001140:	4b2b      	ldr	r3, [pc, #172]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001142:	4a2c      	ldr	r2, [pc, #176]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001148:	b29b      	uxth	r3, r3
 800114a:	8013      	strh	r3, [r2, #0]
			reciever_channels[3] = usWidth;
 800114c:	4a2a      	ldr	r2, [pc, #168]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0xd0>)
 800114e:	80d3      	strh	r3, [r2, #6]
					}
				}
			}
		}
	}
}
 8001150:	bd70      	pop	{r4, r5, r6, pc}
		if (GPIO_Pin == CH1_Pin) {
 8001152:	2801      	cmp	r0, #1
 8001154:	d1fc      	bne.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 0) {
 8001156:	2101      	movs	r1, #1
 8001158:	4828      	ldr	r0, [pc, #160]	@ (80011fc <HAL_GPIO_EXTI_Callback+0xd4>)
 800115a:	f001 fbd7 	bl	800290c <HAL_GPIO_ReadPin>
 800115e:	2800      	cmp	r0, #0
 8001160:	d1f6      	bne.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001164:	4923      	ldr	r1, [pc, #140]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	6a53      	ldr	r3, [r2, #36]	@ 0x24
				__HAL_TIM_SET_COUNTER(&htim6, 0);  // reset the counter
 800116a:	6250      	str	r0, [r2, #36]	@ 0x24
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 800116c:	4a24      	ldr	r2, [pc, #144]	@ (8001200 <HAL_GPIO_EXTI_Callback+0xd8>)
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 800116e:	b29b      	uxth	r3, r3
 8001170:	800b      	strh	r3, [r1, #0]
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 8001172:	4293      	cmp	r3, r2
 8001174:	d82f      	bhi.n	80011d6 <HAL_GPIO_EXTI_Callback+0xae>
					if (channelToRead != 0) {
 8001176:	4923      	ldr	r1, [pc, #140]	@ (8001204 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001178:	780a      	ldrb	r2, [r1, #0]
 800117a:	2a00      	cmp	r2, #0
 800117c:	d0e8      	beq.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 800117e:	0055      	lsls	r5, r2, #1
 8001180:	4c1d      	ldr	r4, [pc, #116]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0xd0>)
						channelToRead++;
 8001182:	3201      	adds	r2, #1
 8001184:	b2d2      	uxtb	r2, r2
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 8001186:	532b      	strh	r3, [r5, r4]
						if (channelToRead > NUMBER_OF_PPM_CHANNEL) {
 8001188:	2a08      	cmp	r2, #8
 800118a:	d82c      	bhi.n	80011e6 <HAL_GPIO_EXTI_Callback+0xbe>
						channelToRead++;
 800118c:	700a      	strb	r2, [r1, #0]
 800118e:	e7df      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 1) {
 8001190:	2101      	movs	r1, #1
 8001192:	481a      	ldr	r0, [pc, #104]	@ (80011fc <HAL_GPIO_EXTI_Callback+0xd4>)
 8001194:	f001 fbba 	bl	800290c <HAL_GPIO_ReadPin>
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0xc8>)
 800119a:	681b      	ldr	r3, [r3, #0]
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 1) {
 800119c:	2801      	cmp	r0, #1
 800119e:	d01f      	beq.n	80011e0 <HAL_GPIO_EXTI_Callback+0xb8>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80011a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a2:	4a14      	ldr	r2, [pc, #80]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0xcc>)
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	8013      	strh	r3, [r2, #0]
				reciever_channels[1] = usWidth;
 80011a8:	4a13      	ldr	r2, [pc, #76]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0xd0>)
 80011aa:	8053      	strh	r3, [r2, #2]
		if (GPIO_Pin == CH4_Pin) {
 80011ac:	e7d0      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
 80011ae:	2808      	cmp	r0, #8
 80011b0:	d1ce      	bne.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80011b2:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0xc8>)
 80011b4:	4a0f      	ldr	r2, [pc, #60]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0xcc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	8013      	strh	r3, [r2, #0]
			reciever_channels[4] = usWidth;
 80011be:	4a0e      	ldr	r2, [pc, #56]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0xd0>)
 80011c0:	8113      	strh	r3, [r2, #8]
 80011c2:	e7c5      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <HAL_GPIO_EXTI_Callback+0xc8>)
 80011c6:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <HAL_GPIO_EXTI_Callback+0xcc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	8013      	strh	r3, [r2, #0]
			reciever_channels[2] = usWidth;
 80011d0:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0xd0>)
 80011d2:	8093      	strh	r3, [r2, #4]
		if (GPIO_Pin == CH4_Pin) {
 80011d4:	e7bc      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
					reciever_channels[0] = usWidth;	// store the separation pulse width
 80011d6:	4a08      	ldr	r2, [pc, #32]	@ (80011f8 <HAL_GPIO_EXTI_Callback+0xd0>)
 80011d8:	8013      	strh	r3, [r2, #0]
					channelToRead = 1;	// next channel is ch1
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_GPIO_EXTI_Callback+0xdc>)
 80011dc:	701c      	strb	r4, [r3, #0]
 80011de:	e7b7      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	@ 0x24
		if (GPIO_Pin == CH4_Pin) {
 80011e4:	e7b4      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
							channelToRead = 0;
 80011e6:	7008      	strb	r0, [r1, #0]
}
 80011e8:	e7b2      	b.n	8001150 <HAL_GPIO_EXTI_Callback+0x28>
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	20000000 	.word	0x20000000
 80011f0:	200002c0 	.word	0x200002c0
 80011f4:	200003f6 	.word	0x200003f6
 80011f8:	200003e4 	.word	0x200003e4
 80011fc:	48000400 	.word	0x48000400
 8001200:	00001194 	.word	0x00001194
 8001204:	20000012 	.word	0x20000012

08001208 <tankMix>:

TankMotors tankMix(uint8_t STchannel, uint8_t THchannel) {
 8001208:	b510      	push	{r4, lr}
	TankMotors t;
	int8_t st = (STchannel - 50) * 2;
	int8_t th = (THchannel - 50) * 2;
 800120a:	3932      	subs	r1, #50	@ 0x32
	int8_t st = (STchannel - 50) * 2;
 800120c:	3832      	subs	r0, #50	@ 0x32
	int8_t th = (THchannel - 50) * 2;
 800120e:	0049      	lsls	r1, r1, #1
	int8_t st = (STchannel - 50) * 2;
 8001210:	0040      	lsls	r0, r0, #1
	int16_t ml = th + st;	// mixing
 8001212:	b249      	sxtb	r1, r1
 8001214:	b240      	sxtb	r0, r0
TankMotors tankMix(uint8_t STchannel, uint8_t THchannel) {
 8001216:	b082      	sub	sp, #8
	int16_t ml = th + st;	// mixing
 8001218:	180c      	adds	r4, r1, r0
	if (ml < -100) ml = -100;
	if (mr > 100) mr = 100;
	if (mr < -100) mr = -100;
	t.speedL = (ml + 100) / 2;	// keep value inside 0 and 100
	t.speedR = (mr + 100) / 2;
	return t;
 800121a:	aa01      	add	r2, sp, #4
	if (ml < -100) ml = -100;
 800121c:	1c23      	adds	r3, r4, #0
 800121e:	3464      	adds	r4, #100	@ 0x64
 8001220:	da01      	bge.n	8001226 <tankMix+0x1e>
 8001222:	2364      	movs	r3, #100	@ 0x64
 8001224:	425b      	negs	r3, r3
	t.speedL = (ml + 100) / 2;	// keep value inside 0 and 100
 8001226:	b21c      	sxth	r4, r3
 8001228:	2c64      	cmp	r4, #100	@ 0x64
 800122a:	dd00      	ble.n	800122e <tankMix+0x26>
 800122c:	2364      	movs	r3, #100	@ 0x64
 800122e:	3364      	adds	r3, #100	@ 0x64
 8001230:	b21b      	sxth	r3, r3
 8001232:	105b      	asrs	r3, r3, #1
	int16_t mr = th - st;	// mixing
 8001234:	1a09      	subs	r1, r1, r0
	return t;
 8001236:	7013      	strb	r3, [r2, #0]
	if (mr < -100) mr = -100;
 8001238:	1c08      	adds	r0, r1, #0
 800123a:	3164      	adds	r1, #100	@ 0x64
 800123c:	da02      	bge.n	8001244 <tankMix+0x3c>
 800123e:	2364      	movs	r3, #100	@ 0x64
 8001240:	425b      	negs	r3, r3
 8001242:	1c18      	adds	r0, r3, #0
	t.speedR = (mr + 100) / 2;
 8001244:	b203      	sxth	r3, r0
 8001246:	2b64      	cmp	r3, #100	@ 0x64
 8001248:	dd00      	ble.n	800124c <tankMix+0x44>
 800124a:	2064      	movs	r0, #100	@ 0x64
 800124c:	3064      	adds	r0, #100	@ 0x64
 800124e:	05c3      	lsls	r3, r0, #23
	return t;
 8001250:	0e1b      	lsrs	r3, r3, #24
 8001252:	7810      	ldrb	r0, [r2, #0]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	4318      	orrs	r0, r3
}
 8001258:	b002      	add	sp, #8
 800125a:	bd10      	pop	{r4, pc}

0800125c <initServos>:

extern uint8_t s1Rev;
extern uint8_t s2Rev;

void initServos(TIM_HandleTypeDef *htim) {
	TIM16->CCR1 = S1_MIN_TIME_PWM;
 800125c:	22fa      	movs	r2, #250	@ 0xfa
void initServos(TIM_HandleTypeDef *htim) {
 800125e:	b510      	push	{r4, lr}
	TIM16->CCR1 = S1_MIN_TIME_PWM;
 8001260:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <initServos+0x1c>)
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM17->CCR1 = S2_MIN_TIME_PWM;
 8001266:	4b05      	ldr	r3, [pc, #20]	@ (800127c <initServos+0x20>)
 8001268:	3ac9      	subs	r2, #201	@ 0xc9
 800126a:	3aff      	subs	r2, #255	@ 0xff
	HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1);
 800126c:	2100      	movs	r1, #0
	TIM17->CCR1 = S2_MIN_TIME_PWM;
 800126e:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1);
 8001270:	f004 f8d0 	bl	8005414 <HAL_TIMEx_PWMN_Start>
}
 8001274:	bd10      	pop	{r4, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	40014400 	.word	0x40014400
 800127c:	40014800 	.word	0x40014800

08001280 <setServoAngle>:
 * P(us) = P * 1'000'000
 * factor = 10000/P(us)
 * if factor < 1 divide by the new factor
 * new factor = 1/factor
 */
void setServoAngle(uint8_t servoN, uint8_t percentage) {
 8001280:	b500      	push	{lr}
	const uint8_t factor = 2;
	uint16_t temp = percentage;
 8001282:	1c0b      	adds	r3, r1, #0
void setServoAngle(uint8_t servoN, uint8_t percentage) {
 8001284:	b083      	sub	sp, #12
 8001286:	2964      	cmp	r1, #100	@ 0x64
 8001288:	d900      	bls.n	800128c <setServoAngle+0xc>
 800128a:	2364      	movs	r3, #100	@ 0x64
 800128c:	b29b      	uxth	r3, r3
	switch (servoN) {
 800128e:	2800      	cmp	r0, #0
 8001290:	d018      	beq.n	80012c4 <setServoAngle+0x44>
 8001292:	2801      	cmp	r0, #1
 8001294:	d114      	bne.n	80012c0 <setServoAngle+0x40>
			isRev = s2Rev;
 8001296:	4a16      	ldr	r2, [pc, #88]	@ (80012f0 <setServoAngle+0x70>)
	if (temp > 100) temp = 100;
	if (temp < 0) temp = 0;

	if (getServoRev(servoN)) temp = 100 - temp;	// take in count if the servo must be reversed or not
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	2a00      	cmp	r2, #0
 800129c:	d002      	beq.n	80012a4 <setServoAngle+0x24>
 800129e:	2264      	movs	r2, #100	@ 0x64
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	b29b      	uxth	r3, r3
		case S1:
			temp = map(temp, 0, 100, S1_MIN_TIME_PWM, S1_MAX_TIME_PWM);
			TIM16->CCR1 = temp * factor;
			break;
		case S2:
			temp = map(temp, 0, 100, S2_MIN_TIME_PWM, S2_MAX_TIME_PWM);
 80012a4:	b218      	sxth	r0, r3
 80012a6:	2396      	movs	r3, #150	@ 0x96
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2388      	movs	r3, #136	@ 0x88
 80012ae:	2264      	movs	r2, #100	@ 0x64
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	2100      	movs	r1, #0
 80012b4:	f7ff fd52 	bl	8000d5c <map>
			TIM17->CCR1 = temp * factor;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <setServoAngle+0x74>)
 80012ba:	b280      	uxth	r0, r0
 80012bc:	0040      	lsls	r0, r0, #1
 80012be:	6358      	str	r0, [r3, #52]	@ 0x34
			break;
	}
}
 80012c0:	b003      	add	sp, #12
 80012c2:	bd00      	pop	{pc}
			isRev = s1Rev;
 80012c4:	4a0c      	ldr	r2, [pc, #48]	@ (80012f8 <setServoAngle+0x78>)
	if (getServoRev(servoN)) temp = 100 - temp;	// take in count if the servo must be reversed or not
 80012c6:	7812      	ldrb	r2, [r2, #0]
 80012c8:	2a00      	cmp	r2, #0
 80012ca:	d002      	beq.n	80012d2 <setServoAngle+0x52>
 80012cc:	2264      	movs	r2, #100	@ 0x64
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	b29b      	uxth	r3, r3
			temp = map(temp, 0, 100, S1_MIN_TIME_PWM, S1_MAX_TIME_PWM);
 80012d2:	b218      	sxth	r0, r3
 80012d4:	23fa      	movs	r3, #250	@ 0xfa
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	23fa      	movs	r3, #250	@ 0xfa
 80012dc:	2264      	movs	r2, #100	@ 0x64
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	2100      	movs	r1, #0
 80012e2:	f7ff fd3b 	bl	8000d5c <map>
			TIM16->CCR1 = temp * factor;
 80012e6:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <setServoAngle+0x7c>)
 80012e8:	b280      	uxth	r0, r0
 80012ea:	0040      	lsls	r0, r0, #1
 80012ec:	6358      	str	r0, [r3, #52]	@ 0x34
			break;
 80012ee:	e7e7      	b.n	80012c0 <setServoAngle+0x40>
 80012f0:	2000021e 	.word	0x2000021e
 80012f4:	40014800 	.word	0x40014800
 80012f8:	2000021f 	.word	0x2000021f
 80012fc:	40014400 	.word	0x40014400

08001300 <decodeCommand>:

	sprintf(recievedString, "%s, %s", c.type, c.value);
	return isOK;
}

Command decodeCommand(char *buffer) {
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	0005      	movs	r5, r0
	Command c;
	// make a copy of the buffer and use it because strtok is destructive
	char temp[strlen(buffer)];
 8001308:	0008      	movs	r0, r1
Command decodeCommand(char *buffer) {
 800130a:	000e      	movs	r6, r1
	char temp[strlen(buffer)];
 800130c:	f7fe fefc 	bl	8000108 <strlen>
 8001310:	4669      	mov	r1, sp
 8001312:	1dc3      	adds	r3, r0, #7
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	1acb      	subs	r3, r1, r3
 800131a:	469d      	mov	sp, r3
 800131c:	0002      	movs	r2, r0
 800131e:	466c      	mov	r4, sp
	strcpy(temp, buffer);
 8001320:	3201      	adds	r2, #1
 8001322:	0031      	movs	r1, r6
 8001324:	4668      	mov	r0, sp
 8001326:	f006 fa70 	bl	800780a <memcpy>
	return c;
}

void remove_all_chars(char *str, char c) {
	char *pr = str, *pw = str;
	while (*pr) {
 800132a:	7823      	ldrb	r3, [r4, #0]
 800132c:	466a      	mov	r2, sp
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <decodeCommand+0x46>
 8001332:	4669      	mov	r1, sp
		*pw = *pr++;
 8001334:	7013      	strb	r3, [r2, #0]
		pw += (*pw != c);
 8001336:	3b20      	subs	r3, #32
 8001338:	1e58      	subs	r0, r3, #1
 800133a:	4183      	sbcs	r3, r0
		*pw = *pr++;
 800133c:	3101      	adds	r1, #1
		pw += (*pw != c);
 800133e:	18d2      	adds	r2, r2, r3
	while (*pr) {
 8001340:	780b      	ldrb	r3, [r1, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f6      	bne.n	8001334 <decodeCommand+0x34>
	}
	*pw = '\0';
 8001346:	2300      	movs	r3, #0
 8001348:	7013      	strb	r3, [r2, #0]
	while (*pr) {
 800134a:	7823      	ldrb	r3, [r4, #0]
 800134c:	0022      	movs	r2, r4
 800134e:	2b00      	cmp	r3, #0
 8001350:	d009      	beq.n	8001366 <decodeCommand+0x66>
 8001352:	0021      	movs	r1, r4
		*pw = *pr++;
 8001354:	7013      	strb	r3, [r2, #0]
		pw += (*pw != c);
 8001356:	3b0a      	subs	r3, #10
 8001358:	1e58      	subs	r0, r3, #1
 800135a:	4183      	sbcs	r3, r0
		*pw = *pr++;
 800135c:	3101      	adds	r1, #1
		pw += (*pw != c);
 800135e:	18d2      	adds	r2, r2, r3
	while (*pr) {
 8001360:	780b      	ldrb	r3, [r1, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f6      	bne.n	8001354 <decodeCommand+0x54>
	*pw = '\0';
 8001366:	2300      	movs	r3, #0
	char *token = strtok(temp, COMMAND_TYPE_SEPARATOR);
 8001368:	4e0d      	ldr	r6, [pc, #52]	@ (80013a0 <decodeCommand+0xa0>)
	*pw = '\0';
 800136a:	7013      	strb	r3, [r2, #0]
	char *token = strtok(temp, COMMAND_TYPE_SEPARATOR);
 800136c:	0031      	movs	r1, r6
 800136e:	0020      	movs	r0, r4
 8001370:	f006 f968 	bl	8007644 <strtok>
 8001374:	0001      	movs	r1, r0
	strcpy(c.type, token);
 8001376:	1d38      	adds	r0, r7, #4
 8001378:	f006 fa3f 	bl	80077fa <strcpy>
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 800137c:	0031      	movs	r1, r6
 800137e:	2000      	movs	r0, #0
 8001380:	f006 f960 	bl	8007644 <strtok>
	strcpy(c.value, token);
 8001384:	230e      	movs	r3, #14
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 8001386:	0001      	movs	r1, r0
	strcpy(c.value, token);
 8001388:	18f8      	adds	r0, r7, r3
 800138a:	f006 fa36 	bl	80077fa <strcpy>
	return c;
 800138e:	2214      	movs	r2, #20
 8001390:	0028      	movs	r0, r5
 8001392:	1d39      	adds	r1, r7, #4
 8001394:	f006 fa39 	bl	800780a <memcpy>
}
 8001398:	0028      	movs	r0, r5
 800139a:	46bd      	mov	sp, r7
 800139c:	b007      	add	sp, #28
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a0:	08008874 	.word	0x08008874

080013a4 <serialPrintString>:
}

void serialPrintString(uint8_t *s) {
 80013a4:	b510      	push	{r4, lr}
 80013a6:	0004      	movs	r4, r0
	CDC_Transmit_FS(s, strlen(s));
 80013a8:	f7fe feae 	bl	8000108 <strlen>
 80013ac:	b281      	uxth	r1, r0
 80013ae:	0020      	movs	r0, r4
 80013b0:	f005 fd0c 	bl	8006dcc <CDC_Transmit_FS>
}
 80013b4:	bd10      	pop	{r4, pc}
 80013b6:	46c0      	nop			@ (mov r8, r8)

080013b8 <storeSettingsToEeprom>:

void storeSettingsToEeprom() {
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	46ce      	mov	lr, r9
 80013bc:	4647      	mov	r7, r8
 80013be:	b580      	push	{r7, lr}
	dataToStore[0] = thChannel;
	dataToStore[1] = stChannel;
	dataToStore[2] = wpChannel;
	dataToStore[3] = s1Channel;
	dataToStore[4] = s2Channel;
	dataToStore[5] = armChannel;
 80013c0:	4a48      	ldr	r2, [pc, #288]	@ (80014e4 <storeSettingsToEeprom+0x12c>)
	dataToStore[4] = s2Channel;
 80013c2:	4b49      	ldr	r3, [pc, #292]	@ (80014e8 <storeSettingsToEeprom+0x130>)
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	0212      	lsls	r2, r2, #8

	dataToStore[6] = m1Rev;
 80013ca:	4948      	ldr	r1, [pc, #288]	@ (80014ec <storeSettingsToEeprom+0x134>)
 80013cc:	4313      	orrs	r3, r2
	dataToStore[7] = m2Rev;
 80013ce:	4a48      	ldr	r2, [pc, #288]	@ (80014f0 <storeSettingsToEeprom+0x138>)
 80013d0:	7809      	ldrb	r1, [r1, #0]
 80013d2:	7812      	ldrb	r2, [r2, #0]
 80013d4:	0409      	lsls	r1, r1, #16
 80013d6:	0612      	lsls	r2, r2, #24
 80013d8:	430b      	orrs	r3, r1
void storeSettingsToEeprom() {
 80013da:	b08b      	sub	sp, #44	@ 0x2c
 80013dc:	4313      	orrs	r3, r2
	dataToStore[0] = thChannel;
 80013de:	9306      	str	r3, [sp, #24]
	dataToStore[8] = m3Rev;
 80013e0:	4b44      	ldr	r3, [pc, #272]	@ (80014f4 <storeSettingsToEeprom+0x13c>)
 80013e2:	ad05      	add	r5, sp, #20
 80013e4:	781b      	ldrb	r3, [r3, #0]
	dataToStore[1] = stChannel;
 80013e6:	4944      	ldr	r1, [pc, #272]	@ (80014f8 <storeSettingsToEeprom+0x140>)
	dataToStore[8] = m3Rev;
 80013e8:	722b      	strb	r3, [r5, #8]
	dataToStore[9] = s1Rev;
 80013ea:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <storeSettingsToEeprom+0x144>)
	dataToStore[0] = thChannel;
 80013ec:	4a44      	ldr	r2, [pc, #272]	@ (8001500 <storeSettingsToEeprom+0x148>)
	dataToStore[9] = s1Rev;
 80013ee:	781b      	ldrb	r3, [r3, #0]
	dataToStore[0] = thChannel;
 80013f0:	7809      	ldrb	r1, [r1, #0]
 80013f2:	7812      	ldrb	r2, [r2, #0]
	dataToStore[9] = s1Rev;
 80013f4:	726b      	strb	r3, [r5, #9]
	dataToStore[10] = s2Rev;
 80013f6:	4b43      	ldr	r3, [pc, #268]	@ (8001504 <storeSettingsToEeprom+0x14c>)
	dataToStore[0] = thChannel;
 80013f8:	0209      	lsls	r1, r1, #8
	dataToStore[2] = wpChannel;
 80013fa:	4c43      	ldr	r4, [pc, #268]	@ (8001508 <storeSettingsToEeprom+0x150>)
	dataToStore[10] = s2Rev;
 80013fc:	781b      	ldrb	r3, [r3, #0]
	dataToStore[0] = thChannel;
 80013fe:	430a      	orrs	r2, r1
	dataToStore[3] = s1Channel;
 8001400:	4942      	ldr	r1, [pc, #264]	@ (800150c <storeSettingsToEeprom+0x154>)
	dataToStore[0] = thChannel;
 8001402:	7824      	ldrb	r4, [r4, #0]
 8001404:	7809      	ldrb	r1, [r1, #0]
	dataToStore[10] = s2Rev;
 8001406:	72ab      	strb	r3, [r5, #10]

	switch (mLeft) {	// mLeft is code 0
 8001408:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <storeSettingsToEeprom+0x158>)
	dataToStore[0] = thChannel;
 800140a:	0424      	lsls	r4, r4, #16
 800140c:	0609      	lsls	r1, r1, #24
 800140e:	4322      	orrs	r2, r4
	switch (mLeft) {	// mLeft is code 0
 8001410:	781b      	ldrb	r3, [r3, #0]
	dataToStore[0] = thChannel;
 8001412:	430a      	orrs	r2, r1
 8001414:	2000      	movs	r0, #0
 8001416:	9205      	str	r2, [sp, #20]
	switch (mLeft) {	// mLeft is code 0
 8001418:	2b01      	cmp	r3, #1
 800141a:	d046      	beq.n	80014aa <storeSettingsToEeprom+0xf2>
 800141c:	2b02      	cmp	r3, #2
 800141e:	d05e      	beq.n	80014de <storeSettingsToEeprom+0x126>
 8001420:	2b00      	cmp	r3, #0
 8001422:	d05a      	beq.n	80014da <storeSettingsToEeprom+0x122>
		case M3:
			dataToStore[13] = 0;
			break;
	}

	switch (mRight) {	// mRight is code 1
 8001424:	4b3b      	ldr	r3, [pc, #236]	@ (8001514 <storeSettingsToEeprom+0x15c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d043      	beq.n	80014b4 <storeSettingsToEeprom+0xfc>
 800142c:	2b02      	cmp	r3, #2
 800142e:	d051      	beq.n	80014d4 <storeSettingsToEeprom+0x11c>
 8001430:	2b00      	cmp	r3, #0
 8001432:	d04c      	beq.n	80014ce <storeSettingsToEeprom+0x116>
		case M3:
			dataToStore[13] = 1;
			break;
	}

	switch (mWeapon) {	// mWeapon is code 2
 8001434:	4b38      	ldr	r3, [pc, #224]	@ (8001518 <storeSettingsToEeprom+0x160>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d040      	beq.n	80014be <storeSettingsToEeprom+0x106>
 800143c:	2b02      	cmp	r3, #2
 800143e:	d044      	beq.n	80014ca <storeSettingsToEeprom+0x112>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d03f      	beq.n	80014c4 <storeSettingsToEeprom+0x10c>
			break;
		case M3:
			dataToStore[13] = 2;
			break;
	}
	dataToStore[14] = weaponDoubleDirection;
 8001444:	4b35      	ldr	r3, [pc, #212]	@ (800151c <storeSettingsToEeprom+0x164>)
 8001446:	2613      	movs	r6, #19
 8001448:	781b      	ldrb	r3, [r3, #0]
	dataToStore[16] = noDisarm;
	dataToStore[17] = limitVoltage;
	dataToStore[18] = cutOffVoltage;
	dataToStore[19] = recieverIsPWM;
	// write to memory
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800144a:	2400      	movs	r4, #0
	dataToStore[14] = weaponDoubleDirection;
 800144c:	73ab      	strb	r3, [r5, #14]
	dataToStore[15] = tankMixIsON;
 800144e:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <storeSettingsToEeprom+0x168>)
	return data;
}

void write_byte_eeprom(uint8_t address, uint8_t value) {
	uint8_t data = value;
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001450:	2701      	movs	r7, #1
	dataToStore[15] = tankMixIsON;
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	446e      	add	r6, sp
 8001456:	73eb      	strb	r3, [r5, #15]
	dataToStore[16] = noDisarm;
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <storeSettingsToEeprom+0x16c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	742b      	strb	r3, [r5, #16]
	dataToStore[17] = limitVoltage;
 800145e:	4b32      	ldr	r3, [pc, #200]	@ (8001528 <storeSettingsToEeprom+0x170>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	746b      	strb	r3, [r5, #17]
	dataToStore[18] = cutOffVoltage;
 8001464:	4b31      	ldr	r3, [pc, #196]	@ (800152c <storeSettingsToEeprom+0x174>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	74ab      	strb	r3, [r5, #18]
	dataToStore[19] = recieverIsPWM;
 800146a:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <storeSettingsToEeprom+0x178>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	74eb      	strb	r3, [r5, #19]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001470:	4b30      	ldr	r3, [pc, #192]	@ (8001534 <storeSettingsToEeprom+0x17c>)
 8001472:	4699      	mov	r9, r3
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001474:	23fa      	movs	r3, #250	@ 0xfa
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4698      	mov	r8, r3
	uint8_t data = value;
 800147a:	782b      	ldrb	r3, [r5, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800147c:	b2a2      	uxth	r2, r4
	uint8_t data = value;
 800147e:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001480:	4643      	mov	r3, r8
 8001482:	21a0      	movs	r1, #160	@ 0xa0
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	4648      	mov	r0, r9
 8001488:	2301      	movs	r3, #1
 800148a:	9701      	str	r7, [sp, #4]
 800148c:	9600      	str	r6, [sp, #0]
 800148e:	f001 fe2d 	bl	80030ec <HAL_I2C_Mem_Write>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001492:	3401      	adds	r4, #1
	HAL_Delay(10);
 8001494:	200a      	movs	r0, #10
 8001496:	f000 fe91 	bl	80021bc <HAL_Delay>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800149a:	3501      	adds	r5, #1
 800149c:	2c14      	cmp	r4, #20
 800149e:	d1ec      	bne.n	800147a <storeSettingsToEeprom+0xc2>
}
 80014a0:	b00b      	add	sp, #44	@ 0x2c
 80014a2:	bcc0      	pop	{r6, r7}
 80014a4:	46b9      	mov	r9, r7
 80014a6:	46b0      	mov	r8, r6
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (mRight) {	// mRight is code 1
 80014aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <storeSettingsToEeprom+0x15c>)
			dataToStore[12] = 0;
 80014ac:	7328      	strb	r0, [r5, #12]
	switch (mRight) {	// mRight is code 1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d1bb      	bne.n	800142c <storeSettingsToEeprom+0x74>
			dataToStore[12] = 1;
 80014b4:	732b      	strb	r3, [r5, #12]
	switch (mWeapon) {	// mWeapon is code 2
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <storeSettingsToEeprom+0x160>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d1be      	bne.n	800143c <storeSettingsToEeprom+0x84>
			dataToStore[12] = 2;
 80014be:	2302      	movs	r3, #2
 80014c0:	732b      	strb	r3, [r5, #12]
			break;
 80014c2:	e7bf      	b.n	8001444 <storeSettingsToEeprom+0x8c>
			dataToStore[11] = 2;
 80014c4:	3302      	adds	r3, #2
 80014c6:	72eb      	strb	r3, [r5, #11]
			break;
 80014c8:	e7bc      	b.n	8001444 <storeSettingsToEeprom+0x8c>
			dataToStore[13] = 2;
 80014ca:	736b      	strb	r3, [r5, #13]
			break;
 80014cc:	e7ba      	b.n	8001444 <storeSettingsToEeprom+0x8c>
			dataToStore[11] = 1;
 80014ce:	3301      	adds	r3, #1
 80014d0:	72eb      	strb	r3, [r5, #11]
			break;
 80014d2:	e7af      	b.n	8001434 <storeSettingsToEeprom+0x7c>
			dataToStore[13] = 1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	736b      	strb	r3, [r5, #13]
			break;
 80014d8:	e7ac      	b.n	8001434 <storeSettingsToEeprom+0x7c>
			dataToStore[11] = 0;
 80014da:	72eb      	strb	r3, [r5, #11]
			break;
 80014dc:	e7a2      	b.n	8001424 <storeSettingsToEeprom+0x6c>
			dataToStore[13] = 0;
 80014de:	7368      	strb	r0, [r5, #13]
			break;
 80014e0:	e7a0      	b.n	8001424 <storeSettingsToEeprom+0x6c>
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	2000000c 	.word	0x2000000c
 80014e8:	2000000d 	.word	0x2000000d
 80014ec:	2000000b 	.word	0x2000000b
 80014f0:	2000000a 	.word	0x2000000a
 80014f4:	20000220 	.word	0x20000220
 80014f8:	20000010 	.word	0x20000010
 80014fc:	2000021f 	.word	0x2000021f
 8001500:	20000011 	.word	0x20000011
 8001504:	2000021e 	.word	0x2000021e
 8001508:	2000000f 	.word	0x2000000f
 800150c:	2000000e 	.word	0x2000000e
 8001510:	2000021d 	.word	0x2000021d
 8001514:	20000009 	.word	0x20000009
 8001518:	20000008 	.word	0x20000008
 800151c:	2000021c 	.word	0x2000021c
 8001520:	20000007 	.word	0x20000007
 8001524:	20000006 	.word	0x20000006
 8001528:	20000005 	.word	0x20000005
 800152c:	20000004 	.word	0x20000004
 8001530:	20000000 	.word	0x20000000
 8001534:	20000350 	.word	0x20000350

08001538 <readSettingsFromEeprom>:
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001538:	4b4a      	ldr	r3, [pc, #296]	@ (8001664 <readSettingsFromEeprom+0x12c>)
void readSettingsFromEeprom() {
 800153a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153c:	46d6      	mov	lr, sl
 800153e:	469a      	mov	sl, r3
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001540:	23fa      	movs	r3, #250	@ 0xfa
void readSettingsFromEeprom() {
 8001542:	464f      	mov	r7, r9
 8001544:	4646      	mov	r6, r8
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4699      	mov	r9, r3
 800154a:	2301      	movs	r3, #1
void readSettingsFromEeprom() {
 800154c:	b5c0      	push	{r6, r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	2613      	movs	r6, #19
 8001552:	af05      	add	r7, sp, #20
 8001554:	003d      	movs	r5, r7
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001556:	2400      	movs	r4, #0
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001558:	4698      	mov	r8, r3
 800155a:	446e      	add	r6, sp
 800155c:	464b      	mov	r3, r9
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	4643      	mov	r3, r8
 8001562:	b2a2      	uxth	r2, r4
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	21a0      	movs	r1, #160	@ 0xa0
 8001568:	2301      	movs	r3, #1
 800156a:	4650      	mov	r0, sl
 800156c:	9600      	str	r6, [sp, #0]
 800156e:	f001 feb5 	bl	80032dc <HAL_I2C_Mem_Read>
	return data;
 8001572:	7833      	ldrb	r3, [r6, #0]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001574:	3401      	adds	r4, #1
		dataRead[i] = read_byte_eeprom(i);
 8001576:	702b      	strb	r3, [r5, #0]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001578:	3501      	adds	r5, #1
 800157a:	2c14      	cmp	r4, #20
 800157c:	d1ee      	bne.n	800155c <readSettingsFromEeprom+0x24>
	thChannel = dataRead[0];
 800157e:	4b3a      	ldr	r3, [pc, #232]	@ (8001668 <readSettingsFromEeprom+0x130>)
 8001580:	783a      	ldrb	r2, [r7, #0]
 8001582:	701a      	strb	r2, [r3, #0]
	stChannel = dataRead[1];
 8001584:	787a      	ldrb	r2, [r7, #1]
 8001586:	4b39      	ldr	r3, [pc, #228]	@ (800166c <readSettingsFromEeprom+0x134>)
 8001588:	701a      	strb	r2, [r3, #0]
	wpChannel = dataRead[2];
 800158a:	78ba      	ldrb	r2, [r7, #2]
 800158c:	4b38      	ldr	r3, [pc, #224]	@ (8001670 <readSettingsFromEeprom+0x138>)
 800158e:	701a      	strb	r2, [r3, #0]
	s1Channel = dataRead[3];
 8001590:	78fa      	ldrb	r2, [r7, #3]
 8001592:	4b38      	ldr	r3, [pc, #224]	@ (8001674 <readSettingsFromEeprom+0x13c>)
 8001594:	701a      	strb	r2, [r3, #0]
	s2Channel = dataRead[4];
 8001596:	793a      	ldrb	r2, [r7, #4]
 8001598:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <readSettingsFromEeprom+0x140>)
 800159a:	701a      	strb	r2, [r3, #0]
	armChannel = dataRead[5];
 800159c:	797a      	ldrb	r2, [r7, #5]
 800159e:	4b37      	ldr	r3, [pc, #220]	@ (800167c <readSettingsFromEeprom+0x144>)
 80015a0:	701a      	strb	r2, [r3, #0]
	m1Rev = dataRead[6];
 80015a2:	79ba      	ldrb	r2, [r7, #6]
 80015a4:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <readSettingsFromEeprom+0x148>)
 80015a6:	701a      	strb	r2, [r3, #0]
	m2Rev = dataRead[7];
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	4b36      	ldr	r3, [pc, #216]	@ (8001684 <readSettingsFromEeprom+0x14c>)
 80015ac:	701a      	strb	r2, [r3, #0]
	m3Rev = dataRead[8];
 80015ae:	7a3a      	ldrb	r2, [r7, #8]
 80015b0:	4b35      	ldr	r3, [pc, #212]	@ (8001688 <readSettingsFromEeprom+0x150>)
 80015b2:	701a      	strb	r2, [r3, #0]
	s1Rev = dataRead[9];
 80015b4:	7a7a      	ldrb	r2, [r7, #9]
 80015b6:	4b35      	ldr	r3, [pc, #212]	@ (800168c <readSettingsFromEeprom+0x154>)
 80015b8:	701a      	strb	r2, [r3, #0]
	s2Rev = dataRead[10];
 80015ba:	7aba      	ldrb	r2, [r7, #10]
 80015bc:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <readSettingsFromEeprom+0x158>)
 80015be:	701a      	strb	r2, [r3, #0]
	switch (dataRead[11]) {	// control M1 at which motor is assigned
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d029      	beq.n	800161a <readSettingsFromEeprom+0xe2>
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d048      	beq.n	800165c <readSettingsFromEeprom+0x124>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d043      	beq.n	8001656 <readSettingsFromEeprom+0x11e>
	switch (dataRead[12]) {	// control M2 at which motor is assigned
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d028      	beq.n	8001626 <readSettingsFromEeprom+0xee>
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d03a      	beq.n	800164e <readSettingsFromEeprom+0x116>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d034      	beq.n	8001646 <readSettingsFromEeprom+0x10e>
	switch (dataRead[13]) {	// control M3 at which motor is assigned
 80015dc:	7b7b      	ldrb	r3, [r7, #13]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d026      	beq.n	8001630 <readSettingsFromEeprom+0xf8>
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d02c      	beq.n	8001640 <readSettingsFromEeprom+0x108>
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d026      	beq.n	8001638 <readSettingsFromEeprom+0x100>
	weaponDoubleDirection = dataRead[14];
 80015ea:	7bba      	ldrb	r2, [r7, #14]
 80015ec:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <readSettingsFromEeprom+0x15c>)
 80015ee:	701a      	strb	r2, [r3, #0]
	tankMixIsON = dataRead[15];
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <readSettingsFromEeprom+0x160>)
 80015f4:	701a      	strb	r2, [r3, #0]
	noDisarm = dataRead[16];
 80015f6:	7c3a      	ldrb	r2, [r7, #16]
 80015f8:	4b28      	ldr	r3, [pc, #160]	@ (800169c <readSettingsFromEeprom+0x164>)
 80015fa:	701a      	strb	r2, [r3, #0]
	limitVoltage = dataRead[17];
 80015fc:	7c7a      	ldrb	r2, [r7, #17]
 80015fe:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <readSettingsFromEeprom+0x168>)
 8001600:	701a      	strb	r2, [r3, #0]
	cutOffVoltage = dataRead[18];
 8001602:	7cba      	ldrb	r2, [r7, #18]
 8001604:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <readSettingsFromEeprom+0x16c>)
 8001606:	701a      	strb	r2, [r3, #0]
	recieverIsPWM = dataRead[19];
 8001608:	7cfa      	ldrb	r2, [r7, #19]
 800160a:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <readSettingsFromEeprom+0x170>)
 800160c:	701a      	strb	r2, [r3, #0]
}
 800160e:	b00a      	add	sp, #40	@ 0x28
 8001610:	bce0      	pop	{r5, r6, r7}
 8001612:	46ba      	mov	sl, r7
 8001614:	46b1      	mov	r9, r6
 8001616:	46a8      	mov	r8, r5
 8001618:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mRight = M1;
 800161a:	2200      	movs	r2, #0
 800161c:	4b23      	ldr	r3, [pc, #140]	@ (80016ac <readSettingsFromEeprom+0x174>)
 800161e:	701a      	strb	r2, [r3, #0]
	switch (dataRead[12]) {	// control M2 at which motor is assigned
 8001620:	7b3b      	ldrb	r3, [r7, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d1d6      	bne.n	80015d4 <readSettingsFromEeprom+0x9c>
			mRight = M2;
 8001626:	4a21      	ldr	r2, [pc, #132]	@ (80016ac <readSettingsFromEeprom+0x174>)
 8001628:	7013      	strb	r3, [r2, #0]
	switch (dataRead[13]) {	// control M3 at which motor is assigned
 800162a:	7b7b      	ldrb	r3, [r7, #13]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d1d8      	bne.n	80015e2 <readSettingsFromEeprom+0xaa>
			mRight = M3;
 8001630:	2202      	movs	r2, #2
 8001632:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <readSettingsFromEeprom+0x174>)
 8001634:	701a      	strb	r2, [r3, #0]
			break;
 8001636:	e7d8      	b.n	80015ea <readSettingsFromEeprom+0xb2>
			mLeft = M3;
 8001638:	2202      	movs	r2, #2
 800163a:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <readSettingsFromEeprom+0x178>)
 800163c:	701a      	strb	r2, [r3, #0]
			break;
 800163e:	e7d4      	b.n	80015ea <readSettingsFromEeprom+0xb2>
			mWeapon = M3;
 8001640:	4a1c      	ldr	r2, [pc, #112]	@ (80016b4 <readSettingsFromEeprom+0x17c>)
 8001642:	7013      	strb	r3, [r2, #0]
			break;
 8001644:	e7d1      	b.n	80015ea <readSettingsFromEeprom+0xb2>
			mLeft = M2;
 8001646:	2201      	movs	r2, #1
 8001648:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <readSettingsFromEeprom+0x178>)
 800164a:	701a      	strb	r2, [r3, #0]
			break;
 800164c:	e7c6      	b.n	80015dc <readSettingsFromEeprom+0xa4>
			mWeapon = M2;
 800164e:	2201      	movs	r2, #1
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <readSettingsFromEeprom+0x17c>)
 8001652:	701a      	strb	r2, [r3, #0]
			break;
 8001654:	e7c2      	b.n	80015dc <readSettingsFromEeprom+0xa4>
			mLeft = M1;
 8001656:	4a16      	ldr	r2, [pc, #88]	@ (80016b0 <readSettingsFromEeprom+0x178>)
 8001658:	7013      	strb	r3, [r2, #0]
			break;
 800165a:	e7b8      	b.n	80015ce <readSettingsFromEeprom+0x96>
			mWeapon = M1;
 800165c:	2200      	movs	r2, #0
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <readSettingsFromEeprom+0x17c>)
 8001660:	701a      	strb	r2, [r3, #0]
			break;
 8001662:	e7b4      	b.n	80015ce <readSettingsFromEeprom+0x96>
 8001664:	20000350 	.word	0x20000350
 8001668:	20000011 	.word	0x20000011
 800166c:	20000010 	.word	0x20000010
 8001670:	2000000f 	.word	0x2000000f
 8001674:	2000000e 	.word	0x2000000e
 8001678:	2000000d 	.word	0x2000000d
 800167c:	2000000c 	.word	0x2000000c
 8001680:	2000000b 	.word	0x2000000b
 8001684:	2000000a 	.word	0x2000000a
 8001688:	20000220 	.word	0x20000220
 800168c:	2000021f 	.word	0x2000021f
 8001690:	2000021e 	.word	0x2000021e
 8001694:	2000021c 	.word	0x2000021c
 8001698:	20000007 	.word	0x20000007
 800169c:	20000006 	.word	0x20000006
 80016a0:	20000005 	.word	0x20000005
 80016a4:	20000004 	.word	0x20000004
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000009 	.word	0x20000009
 80016b0:	2000021d 	.word	0x2000021d
 80016b4:	20000008 	.word	0x20000008

080016b8 <loadSettingsFromEeprom>:
void loadSettingsFromEeprom() {
 80016b8:	b510      	push	{r4, lr}
	readSettingsFromEeprom();
 80016ba:	f7ff ff3d 	bl	8001538 <readSettingsFromEeprom>
}
 80016be:	bd10      	pop	{r4, pc}

080016c0 <read_byte_eeprom>:
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80016c0:	23fa      	movs	r3, #250	@ 0xfa
uint8_t read_byte_eeprom(uint8_t address) {
 80016c2:	b530      	push	{r4, r5, lr}
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80016c4:	009b      	lsls	r3, r3, #2
uint8_t read_byte_eeprom(uint8_t address) {
 80016c6:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80016c8:	2517      	movs	r5, #23
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	2301      	movs	r3, #1
 80016ce:	4c06      	ldr	r4, [pc, #24]	@ (80016e8 <read_byte_eeprom+0x28>)
 80016d0:	446d      	add	r5, sp
uint8_t read_byte_eeprom(uint8_t address) {
 80016d2:	0002      	movs	r2, r0
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80016d4:	21a0      	movs	r1, #160	@ 0xa0
 80016d6:	0020      	movs	r0, r4
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	9500      	str	r5, [sp, #0]
 80016dc:	f001 fdfe 	bl	80032dc <HAL_I2C_Mem_Read>
	return data;
 80016e0:	7828      	ldrb	r0, [r5, #0]
}
 80016e2:	b007      	add	sp, #28
 80016e4:	bd30      	pop	{r4, r5, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	20000350 	.word	0x20000350

080016ec <write_byte_eeprom>:
	uint8_t data = value;
 80016ec:	2317      	movs	r3, #23
void write_byte_eeprom(uint8_t address, uint8_t value) {
 80016ee:	b510      	push	{r4, lr}
 80016f0:	b086      	sub	sp, #24
	uint8_t data = value;
 80016f2:	446b      	add	r3, sp
 80016f4:	7019      	strb	r1, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80016f6:	21fa      	movs	r1, #250	@ 0xfa
 80016f8:	0089      	lsls	r1, r1, #2
 80016fa:	9102      	str	r1, [sp, #8]
 80016fc:	2101      	movs	r1, #1
 80016fe:	4c07      	ldr	r4, [pc, #28]	@ (800171c <write_byte_eeprom+0x30>)
void write_byte_eeprom(uint8_t address, uint8_t value) {
 8001700:	0002      	movs	r2, r0
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001702:	9101      	str	r1, [sp, #4]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	319f      	adds	r1, #159	@ 0x9f
 8001708:	2301      	movs	r3, #1
 800170a:	0020      	movs	r0, r4
 800170c:	f001 fcee 	bl	80030ec <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8001710:	200a      	movs	r0, #10
 8001712:	f000 fd53 	bl	80021bc <HAL_Delay>
}
 8001716:	b006      	add	sp, #24
 8001718:	bd10      	pop	{r4, pc}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	20000350 	.word	0x20000350

08001720 <serialPrintSettings>:

void serialPrintSettings() {
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
	dataRead[0] = thChannel;
	dataRead[1] = stChannel;
	dataRead[2] = wpChannel;
	dataRead[3] = s1Channel;
	dataRead[4] = s2Channel;
	dataRead[5] = armChannel;
 8001722:	4a4e      	ldr	r2, [pc, #312]	@ (800185c <serialPrintSettings+0x13c>)
	dataRead[4] = s2Channel;
 8001724:	4b4e      	ldr	r3, [pc, #312]	@ (8001860 <serialPrintSettings+0x140>)
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	0212      	lsls	r2, r2, #8

	dataRead[6] = m1Rev;
 800172c:	494d      	ldr	r1, [pc, #308]	@ (8001864 <serialPrintSettings+0x144>)
 800172e:	4313      	orrs	r3, r2
	dataRead[7] = m2Rev;
 8001730:	4a4d      	ldr	r2, [pc, #308]	@ (8001868 <serialPrintSettings+0x148>)
 8001732:	7809      	ldrb	r1, [r1, #0]
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	0409      	lsls	r1, r1, #16
 8001738:	0612      	lsls	r2, r2, #24
 800173a:	430b      	orrs	r3, r1
	dataRead[1] = stChannel;
 800173c:	494b      	ldr	r1, [pc, #300]	@ (800186c <serialPrintSettings+0x14c>)
 800173e:	4313      	orrs	r3, r2
	dataRead[2] = wpChannel;
 8001740:	4c4b      	ldr	r4, [pc, #300]	@ (8001870 <serialPrintSettings+0x150>)
	dataRead[0] = thChannel;
 8001742:	4a4c      	ldr	r2, [pc, #304]	@ (8001874 <serialPrintSettings+0x154>)
void serialPrintSettings() {
 8001744:	b0a5      	sub	sp, #148	@ 0x94
	dataRead[0] = thChannel;
 8001746:	7809      	ldrb	r1, [r1, #0]
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	7824      	ldrb	r4, [r4, #0]
 800174c:	9304      	str	r3, [sp, #16]
	dataRead[8] = m3Rev;
 800174e:	4b4a      	ldr	r3, [pc, #296]	@ (8001878 <serialPrintSettings+0x158>)
	dataRead[0] = thChannel;
 8001750:	0209      	lsls	r1, r1, #8
	dataRead[8] = m3Rev;
 8001752:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 8001754:	0424      	lsls	r4, r4, #16
 8001756:	430a      	orrs	r2, r1
 8001758:	4322      	orrs	r2, r4
	dataRead[8] = m3Rev;
 800175a:	ac03      	add	r4, sp, #12
 800175c:	7223      	strb	r3, [r4, #8]
	dataRead[9] = s1Rev;
 800175e:	4b47      	ldr	r3, [pc, #284]	@ (800187c <serialPrintSettings+0x15c>)
	dataRead[3] = s1Channel;
 8001760:	4947      	ldr	r1, [pc, #284]	@ (8001880 <serialPrintSettings+0x160>)
	dataRead[9] = s1Rev;
 8001762:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 8001764:	7809      	ldrb	r1, [r1, #0]
	dataRead[9] = s1Rev;
 8001766:	7263      	strb	r3, [r4, #9]
	dataRead[10] = s2Rev;
 8001768:	4b46      	ldr	r3, [pc, #280]	@ (8001884 <serialPrintSettings+0x164>)
	dataRead[0] = thChannel;
 800176a:	0609      	lsls	r1, r1, #24
	dataRead[10] = s2Rev;
 800176c:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 800176e:	430a      	orrs	r2, r1
	dataRead[10] = s2Rev;
 8001770:	72a3      	strb	r3, [r4, #10]

	switch (mLeft) {	// mleft is code 0
 8001772:	4b45      	ldr	r3, [pc, #276]	@ (8001888 <serialPrintSettings+0x168>)
 8001774:	2000      	movs	r0, #0
 8001776:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 8001778:	9203      	str	r2, [sp, #12]
	switch (mLeft) {	// mleft is code 0
 800177a:	2b01      	cmp	r3, #1
 800177c:	d051      	beq.n	8001822 <serialPrintSettings+0x102>
 800177e:	2b02      	cmp	r3, #2
 8001780:	d069      	beq.n	8001856 <serialPrintSettings+0x136>
 8001782:	2b00      	cmp	r3, #0
 8001784:	d065      	beq.n	8001852 <serialPrintSettings+0x132>
		case M3:
			dataRead[13] = 0;
			break;
	}

	switch (mRight) {	// mright is code 1
 8001786:	4b41      	ldr	r3, [pc, #260]	@ (800188c <serialPrintSettings+0x16c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d04e      	beq.n	800182c <serialPrintSettings+0x10c>
 800178e:	2b02      	cmp	r3, #2
 8001790:	d05c      	beq.n	800184c <serialPrintSettings+0x12c>
 8001792:	2b00      	cmp	r3, #0
 8001794:	d057      	beq.n	8001846 <serialPrintSettings+0x126>
		case M3:
			dataRead[13] = 1;
			break;
	}

	switch (mWeapon) {	// mweapon is code 2
 8001796:	4b3e      	ldr	r3, [pc, #248]	@ (8001890 <serialPrintSettings+0x170>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d04b      	beq.n	8001836 <serialPrintSettings+0x116>
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d04f      	beq.n	8001842 <serialPrintSettings+0x122>
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d04a      	beq.n	800183c <serialPrintSettings+0x11c>
		case M3:
			dataRead[13] = 2;
			break;
	}

	dataRead[14] = weaponDoubleDirection;
 80017a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001894 <serialPrintSettings+0x174>)
	dataRead[16] = noDisarm;
	dataRead[17] = limitVoltage;
	dataRead[18] = cutOffVoltage;
	dataRead[19] = recieverIsPWM;

	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80017a8:	493b      	ldr	r1, [pc, #236]	@ (8001898 <serialPrintSettings+0x178>)
	dataRead[14] = weaponDoubleDirection;
 80017aa:	781b      	ldrb	r3, [r3, #0]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80017ac:	2250      	movs	r2, #80	@ 0x50
	dataRead[14] = weaponDoubleDirection;
 80017ae:	73a3      	strb	r3, [r4, #14]
	dataRead[15] = tankMixIsON;
 80017b0:	4b3a      	ldr	r3, [pc, #232]	@ (800189c <serialPrintSettings+0x17c>)
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80017b2:	a810      	add	r0, sp, #64	@ 0x40
	dataRead[15] = tankMixIsON;
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	af24      	add	r7, sp, #144	@ 0x90
 80017b8:	73e3      	strb	r3, [r4, #15]
	dataRead[16] = noDisarm;
 80017ba:	4b39      	ldr	r3, [pc, #228]	@ (80018a0 <serialPrintSettings+0x180>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	7423      	strb	r3, [r4, #16]
	dataRead[17] = limitVoltage;
 80017c0:	4b38      	ldr	r3, [pc, #224]	@ (80018a4 <serialPrintSettings+0x184>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	7463      	strb	r3, [r4, #17]
	dataRead[18] = cutOffVoltage;
 80017c6:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <serialPrintSettings+0x188>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	74a3      	strb	r3, [r4, #18]
	dataRead[19] = recieverIsPWM;
 80017cc:	4b37      	ldr	r3, [pc, #220]	@ (80018ac <serialPrintSettings+0x18c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	74e3      	strb	r3, [r4, #19]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80017d2:	f006 f81a 	bl	800780a <memcpy>
			(const uint8_t*) COMMAND_M1ASS, (const uint8_t*) COMMAND_M2ASS, (const uint8_t*) COMMAND_M3ASS,
			(const uint8_t*) COMMAND_WPDD, (const uint8_t*) COMMAND_TANKON, (const uint8_t*) COMMAND_NODISARM,
			(const uint8_t*) COMMAND_LIMITVOLTAGE, (const uint8_t*) COMMAND_CUTOFFVOLTAGE,
			(const uint8_t*) COMMAND_RXPWMMODE };

	uint8_t c[] = "\nSETTINGS:\n";
 80017d6:	4668      	mov	r0, sp
 80017d8:	0002      	movs	r2, r0
 80017da:	4b35      	ldr	r3, [pc, #212]	@ (80018b0 <serialPrintSettings+0x190>)
 80017dc:	cb62      	ldmia	r3!, {r1, r5, r6}
 80017de:	c262      	stmia	r2!, {r1, r5, r6}
	CDC_Transmit_FS(s, strlen(s));
 80017e0:	210b      	movs	r1, #11
 80017e2:	f005 faf3 	bl	8006dcc <CDC_Transmit_FS>
	serialPrintString(c);
	HAL_Delay(0);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 fce8 	bl	80021bc <HAL_Delay>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 80017ec:	4e31      	ldr	r6, [pc, #196]	@ (80018b4 <serialPrintSettings+0x194>)
 80017ee:	ad10      	add	r5, sp, #64	@ 0x40
		uint8_t string[30];
		sprintf(string, "%s > %d\n", commands[i], dataRead[i]);
 80017f0:	7823      	ldrb	r3, [r4, #0]
 80017f2:	cd04      	ldmia	r5!, {r2}
 80017f4:	0031      	movs	r1, r6
 80017f6:	a808      	add	r0, sp, #32
 80017f8:	f005 feb0 	bl	800755c <siprintf>
	CDC_Transmit_FS(s, strlen(s));
 80017fc:	a808      	add	r0, sp, #32
 80017fe:	f7fe fc83 	bl	8000108 <strlen>
 8001802:	b281      	uxth	r1, r0
 8001804:	a808      	add	r0, sp, #32
 8001806:	f005 fae1 	bl	8006dcc <CDC_Transmit_FS>
		serialPrintString(string);
		HAL_Delay(10);
 800180a:	200a      	movs	r0, #10
 800180c:	f000 fcd6 	bl	80021bc <HAL_Delay>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 8001810:	3401      	adds	r4, #1
 8001812:	42bd      	cmp	r5, r7
 8001814:	d1ec      	bne.n	80017f0 <serialPrintSettings+0xd0>
	CDC_Transmit_FS(s, strlen(s));
 8001816:	2151      	movs	r1, #81	@ 0x51
 8001818:	4827      	ldr	r0, [pc, #156]	@ (80018b8 <serialPrintSettings+0x198>)
 800181a:	f005 fad7 	bl	8006dcc <CDC_Transmit_FS>
	}
	serialPrintString("\nwrite COMAND > VALUE (e.g. TH2CH>3)\nthan SAVE>1 to store all settings on EEPROM\n");
}
 800181e:	b025      	add	sp, #148	@ 0x94
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (mRight) {	// mright is code 1
 8001822:	4b1a      	ldr	r3, [pc, #104]	@ (800188c <serialPrintSettings+0x16c>)
			dataRead[12] = 0;
 8001824:	7320      	strb	r0, [r4, #12]
	switch (mRight) {	// mright is code 1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d1b0      	bne.n	800178e <serialPrintSettings+0x6e>
			dataRead[12] = 1;
 800182c:	7323      	strb	r3, [r4, #12]
	switch (mWeapon) {	// mweapon is code 2
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <serialPrintSettings+0x170>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d1b3      	bne.n	800179e <serialPrintSettings+0x7e>
			dataRead[12] = 2;
 8001836:	2302      	movs	r3, #2
 8001838:	7323      	strb	r3, [r4, #12]
			break;
 800183a:	e7b4      	b.n	80017a6 <serialPrintSettings+0x86>
			dataRead[11] = 2;
 800183c:	3302      	adds	r3, #2
 800183e:	72e3      	strb	r3, [r4, #11]
			break;
 8001840:	e7b1      	b.n	80017a6 <serialPrintSettings+0x86>
			dataRead[13] = 2;
 8001842:	7363      	strb	r3, [r4, #13]
			break;
 8001844:	e7af      	b.n	80017a6 <serialPrintSettings+0x86>
			dataRead[11] = 1;
 8001846:	3301      	adds	r3, #1
 8001848:	72e3      	strb	r3, [r4, #11]
			break;
 800184a:	e7a4      	b.n	8001796 <serialPrintSettings+0x76>
			dataRead[13] = 1;
 800184c:	2301      	movs	r3, #1
 800184e:	7363      	strb	r3, [r4, #13]
			break;
 8001850:	e7a1      	b.n	8001796 <serialPrintSettings+0x76>
			dataRead[11] = 0;
 8001852:	72e3      	strb	r3, [r4, #11]
			break;
 8001854:	e797      	b.n	8001786 <serialPrintSettings+0x66>
			dataRead[13] = 0;
 8001856:	7360      	strb	r0, [r4, #13]
			break;
 8001858:	e795      	b.n	8001786 <serialPrintSettings+0x66>
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	2000000c 	.word	0x2000000c
 8001860:	2000000d 	.word	0x2000000d
 8001864:	2000000b 	.word	0x2000000b
 8001868:	2000000a 	.word	0x2000000a
 800186c:	20000010 	.word	0x20000010
 8001870:	2000000f 	.word	0x2000000f
 8001874:	20000011 	.word	0x20000011
 8001878:	20000220 	.word	0x20000220
 800187c:	2000021f 	.word	0x2000021f
 8001880:	2000000e 	.word	0x2000000e
 8001884:	2000021e 	.word	0x2000021e
 8001888:	2000021d 	.word	0x2000021d
 800188c:	20000009 	.word	0x20000009
 8001890:	20000008 	.word	0x20000008
 8001894:	2000021c 	.word	0x2000021c
 8001898:	08008810 	.word	0x08008810
 800189c:	20000007 	.word	0x20000007
 80018a0:	20000006 	.word	0x20000006
 80018a4:	20000005 	.word	0x20000005
 80018a8:	20000004 	.word	0x20000004
 80018ac:	20000000 	.word	0x20000000
 80018b0:	080088d8 	.word	0x080088d8
 80018b4:	08008878 	.word	0x08008878
 80018b8:	08008884 	.word	0x08008884

080018bc <modifySettingsWithCommand>:
int modifySettingsWithCommand() {
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	b086      	sub	sp, #24
	Command c = decodeCommand(buffer);
 80018c0:	ad01      	add	r5, sp, #4
 80018c2:	0028      	movs	r0, r5
 80018c4:	49c5      	ldr	r1, [pc, #788]	@ (8001bdc <modifySettingsWithCommand+0x320>)
 80018c6:	f7ff fd1b 	bl	8001300 <decodeCommand>
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 80018ca:	4ac5      	ldr	r2, [pc, #788]	@ (8001be0 <modifySettingsWithCommand+0x324>)
 80018cc:	9b01      	ldr	r3, [sp, #4]
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d100      	bne.n	80018d4 <modifySettingsWithCommand+0x18>
 80018d2:	e06c      	b.n	80019ae <modifySettingsWithCommand+0xf2>
 80018d4:	240e      	movs	r4, #14
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 80018d6:	4ac3      	ldr	r2, [pc, #780]	@ (8001be4 <modifySettingsWithCommand+0x328>)
 80018d8:	2600      	movs	r6, #0
 80018da:	446c      	add	r4, sp
 80018dc:	4293      	cmp	r3, r2
 80018de:	d100      	bne.n	80018e2 <modifySettingsWithCommand+0x26>
 80018e0:	e076      	b.n	80019d0 <modifySettingsWithCommand+0x114>
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 80018e2:	4ac1      	ldr	r2, [pc, #772]	@ (8001be8 <modifySettingsWithCommand+0x32c>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d100      	bne.n	80018ea <modifySettingsWithCommand+0x2e>
 80018e8:	e081      	b.n	80019ee <modifySettingsWithCommand+0x132>
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 80018ea:	4ac0      	ldr	r2, [pc, #768]	@ (8001bec <modifySettingsWithCommand+0x330>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d100      	bne.n	80018f2 <modifySettingsWithCommand+0x36>
 80018f0:	e08c      	b.n	8001a0c <modifySettingsWithCommand+0x150>
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 80018f2:	4abf      	ldr	r2, [pc, #764]	@ (8001bf0 <modifySettingsWithCommand+0x334>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d100      	bne.n	80018fa <modifySettingsWithCommand+0x3e>
 80018f8:	e097      	b.n	8001a2a <modifySettingsWithCommand+0x16e>
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 80018fa:	4bbe      	ldr	r3, [pc, #760]	@ (8001bf4 <modifySettingsWithCommand+0x338>)
 80018fc:	9a01      	ldr	r2, [sp, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d100      	bne.n	8001904 <modifySettingsWithCommand+0x48>
 8001902:	e0a1      	b.n	8001a48 <modifySettingsWithCommand+0x18c>
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001904:	4abc      	ldr	r2, [pc, #752]	@ (8001bf8 <modifySettingsWithCommand+0x33c>)
 8001906:	9b01      	ldr	r3, [sp, #4]
 8001908:	4293      	cmp	r3, r2
 800190a:	d100      	bne.n	800190e <modifySettingsWithCommand+0x52>
 800190c:	e0b0      	b.n	8001a70 <modifySettingsWithCommand+0x1b4>
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 800190e:	4abb      	ldr	r2, [pc, #748]	@ (8001bfc <modifySettingsWithCommand+0x340>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d100      	bne.n	8001916 <modifySettingsWithCommand+0x5a>
 8001914:	e0bb      	b.n	8001a8e <modifySettingsWithCommand+0x1d2>
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 8001916:	4aba      	ldr	r2, [pc, #744]	@ (8001c00 <modifySettingsWithCommand+0x344>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d100      	bne.n	800191e <modifySettingsWithCommand+0x62>
 800191c:	e0c6      	b.n	8001aac <modifySettingsWithCommand+0x1f0>
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 800191e:	4ab9      	ldr	r2, [pc, #740]	@ (8001c04 <modifySettingsWithCommand+0x348>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d100      	bne.n	8001926 <modifySettingsWithCommand+0x6a>
 8001924:	e0d1      	b.n	8001aca <modifySettingsWithCommand+0x20e>
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 8001926:	4ab8      	ldr	r2, [pc, #736]	@ (8001c08 <modifySettingsWithCommand+0x34c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d100      	bne.n	800192e <modifySettingsWithCommand+0x72>
 800192c:	e0dc      	b.n	8001ae8 <modifySettingsWithCommand+0x22c>
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 800192e:	4ab7      	ldr	r2, [pc, #732]	@ (8001c0c <modifySettingsWithCommand+0x350>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d100      	bne.n	8001936 <modifySettingsWithCommand+0x7a>
 8001934:	e0e7      	b.n	8001b06 <modifySettingsWithCommand+0x24a>
	if (strcmp(c.type, COMMAND_M2ASS) == 0) {
 8001936:	4ab6      	ldr	r2, [pc, #728]	@ (8001c10 <modifySettingsWithCommand+0x354>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d100      	bne.n	800193e <modifySettingsWithCommand+0x82>
 800193c:	e1d6      	b.n	8001cec <modifySettingsWithCommand+0x430>
	if (strcmp(c.type, COMMAND_M3ASS) == 0) {
 800193e:	4ab5      	ldr	r2, [pc, #724]	@ (8001c14 <modifySettingsWithCommand+0x358>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d100      	bne.n	8001946 <modifySettingsWithCommand+0x8a>
 8001944:	e1b8      	b.n	8001cb8 <modifySettingsWithCommand+0x3fc>
	if (strcmp(c.type, COMMAND_WPDD) == 0) {
 8001946:	4ab4      	ldr	r2, [pc, #720]	@ (8001c18 <modifySettingsWithCommand+0x35c>)
 8001948:	9901      	ldr	r1, [sp, #4]
 800194a:	4291      	cmp	r1, r2
 800194c:	d100      	bne.n	8001950 <modifySettingsWithCommand+0x94>
 800194e:	e1a7      	b.n	8001ca0 <modifySettingsWithCommand+0x3e4>
	if (strcmp(c.type, COMMAND_TANKON) == 0) {
 8001950:	4ab2      	ldr	r2, [pc, #712]	@ (8001c1c <modifySettingsWithCommand+0x360>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d100      	bne.n	8001958 <modifySettingsWithCommand+0x9c>
 8001956:	e136      	b.n	8001bc6 <modifySettingsWithCommand+0x30a>
	if (strcmp(c.type, COMMAND_NODISARM) == 0) {
 8001958:	4bb1      	ldr	r3, [pc, #708]	@ (8001c20 <modifySettingsWithCommand+0x364>)
 800195a:	9a01      	ldr	r2, [sp, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d100      	bne.n	8001962 <modifySettingsWithCommand+0xa6>
 8001960:	e121      	b.n	8001ba6 <modifySettingsWithCommand+0x2ea>
	if (strcmp(c.type, COMMAND_LIMITVOLTAGE) == 0) {
 8001962:	4bb0      	ldr	r3, [pc, #704]	@ (8001c24 <modifySettingsWithCommand+0x368>)
 8001964:	9a01      	ldr	r2, [sp, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	d100      	bne.n	800196c <modifySettingsWithCommand+0xb0>
 800196a:	e111      	b.n	8001b90 <modifySettingsWithCommand+0x2d4>
	if (strcmp(c.type, COMMAND_CUTOFFVOLTAGE) == 0) {
 800196c:	4bae      	ldr	r3, [pc, #696]	@ (8001c28 <modifySettingsWithCommand+0x36c>)
 800196e:	9a01      	ldr	r2, [sp, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	d100      	bne.n	8001976 <modifySettingsWithCommand+0xba>
 8001974:	e100      	b.n	8001b78 <modifySettingsWithCommand+0x2bc>
	if (strcmp(c.type, COMMAND_RXPWMMODE) == 0) {
 8001976:	4bad      	ldr	r3, [pc, #692]	@ (8001c2c <modifySettingsWithCommand+0x370>)
 8001978:	9a01      	ldr	r2, [sp, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d100      	bne.n	8001980 <modifySettingsWithCommand+0xc4>
 800197e:	e0f0      	b.n	8001b62 <modifySettingsWithCommand+0x2a6>
	if (strcmp(c.type, COMMAND_SAVE) == 0) {
 8001980:	4aab      	ldr	r2, [pc, #684]	@ (8001c30 <modifySettingsWithCommand+0x374>)
 8001982:	9b01      	ldr	r3, [sp, #4]
 8001984:	4293      	cmp	r3, r2
 8001986:	d100      	bne.n	800198a <modifySettingsWithCommand+0xce>
 8001988:	e0e2      	b.n	8001b50 <modifySettingsWithCommand+0x294>
	if (strcmp(c.type, COMMAND_READ) == 0) {
 800198a:	4aaa      	ldr	r2, [pc, #680]	@ (8001c34 <modifySettingsWithCommand+0x378>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d100      	bne.n	8001992 <modifySettingsWithCommand+0xd6>
 8001990:	e0d4      	b.n	8001b3c <modifySettingsWithCommand+0x280>
	if (strcmp(c.type, COMMAND_CONNECTED) == 0) {
 8001992:	4ba9      	ldr	r3, [pc, #676]	@ (8001c38 <modifySettingsWithCommand+0x37c>)
 8001994:	9a01      	ldr	r2, [sp, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	d100      	bne.n	800199c <modifySettingsWithCommand+0xe0>
 800199a:	2601      	movs	r6, #1
	sprintf(recievedString, "%s, %s", c.type, c.value);
 800199c:	0023      	movs	r3, r4
 800199e:	002a      	movs	r2, r5
 80019a0:	49a6      	ldr	r1, [pc, #664]	@ (8001c3c <modifySettingsWithCommand+0x380>)
 80019a2:	48a7      	ldr	r0, [pc, #668]	@ (8001c40 <modifySettingsWithCommand+0x384>)
 80019a4:	f005 fdda 	bl	800755c <siprintf>
}
 80019a8:	0030      	movs	r0, r6
 80019aa:	b006      	add	sp, #24
 80019ac:	bd70      	pop	{r4, r5, r6, pc}
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 80019ae:	88aa      	ldrh	r2, [r5, #4]
 80019b0:	2a48      	cmp	r2, #72	@ 0x48
 80019b2:	d000      	beq.n	80019b6 <modifySettingsWithCommand+0xfa>
 80019b4:	e78e      	b.n	80018d4 <modifySettingsWithCommand+0x18>
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 80019b6:	240e      	movs	r4, #14
 80019b8:	446c      	add	r4, sp
 80019ba:	0020      	movs	r0, r4
 80019bc:	f005 fc6e 	bl	800729c <atoi>
 80019c0:	4ba0      	ldr	r3, [pc, #640]	@ (8001c44 <modifySettingsWithCommand+0x388>)
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 80019c2:	4a88      	ldr	r2, [pc, #544]	@ (8001be4 <modifySettingsWithCommand+0x328>)
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 80019c4:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 80019c6:	9b01      	ldr	r3, [sp, #4]
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 80019c8:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d000      	beq.n	80019d0 <modifySettingsWithCommand+0x114>
 80019ce:	e788      	b.n	80018e2 <modifySettingsWithCommand+0x26>
 80019d0:	88aa      	ldrh	r2, [r5, #4]
 80019d2:	2a48      	cmp	r2, #72	@ 0x48
 80019d4:	d000      	beq.n	80019d8 <modifySettingsWithCommand+0x11c>
 80019d6:	e784      	b.n	80018e2 <modifySettingsWithCommand+0x26>
		stChannel = atoi(c.value);
 80019d8:	0020      	movs	r0, r4
 80019da:	f005 fc5f 	bl	800729c <atoi>
 80019de:	4b9a      	ldr	r3, [pc, #616]	@ (8001c48 <modifySettingsWithCommand+0x38c>)
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 80019e0:	4a81      	ldr	r2, [pc, #516]	@ (8001be8 <modifySettingsWithCommand+0x32c>)
		stChannel = atoi(c.value);
 80019e2:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 80019e4:	9b01      	ldr	r3, [sp, #4]
		stChannel = atoi(c.value);
 80019e6:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d000      	beq.n	80019ee <modifySettingsWithCommand+0x132>
 80019ec:	e77d      	b.n	80018ea <modifySettingsWithCommand+0x2e>
 80019ee:	88aa      	ldrh	r2, [r5, #4]
 80019f0:	2a48      	cmp	r2, #72	@ 0x48
 80019f2:	d000      	beq.n	80019f6 <modifySettingsWithCommand+0x13a>
 80019f4:	e779      	b.n	80018ea <modifySettingsWithCommand+0x2e>
		wpChannel = atoi(c.value);
 80019f6:	0020      	movs	r0, r4
 80019f8:	f005 fc50 	bl	800729c <atoi>
 80019fc:	4b93      	ldr	r3, [pc, #588]	@ (8001c4c <modifySettingsWithCommand+0x390>)
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 80019fe:	4a7b      	ldr	r2, [pc, #492]	@ (8001bec <modifySettingsWithCommand+0x330>)
		wpChannel = atoi(c.value);
 8001a00:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001a02:	9b01      	ldr	r3, [sp, #4]
		wpChannel = atoi(c.value);
 8001a04:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d000      	beq.n	8001a0c <modifySettingsWithCommand+0x150>
 8001a0a:	e772      	b.n	80018f2 <modifySettingsWithCommand+0x36>
 8001a0c:	88aa      	ldrh	r2, [r5, #4]
 8001a0e:	2a48      	cmp	r2, #72	@ 0x48
 8001a10:	d000      	beq.n	8001a14 <modifySettingsWithCommand+0x158>
 8001a12:	e76e      	b.n	80018f2 <modifySettingsWithCommand+0x36>
		s1Channel = atoi(c.value);
 8001a14:	0020      	movs	r0, r4
 8001a16:	f005 fc41 	bl	800729c <atoi>
 8001a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8001c50 <modifySettingsWithCommand+0x394>)
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 8001a1c:	4a74      	ldr	r2, [pc, #464]	@ (8001bf0 <modifySettingsWithCommand+0x334>)
		s1Channel = atoi(c.value);
 8001a1e:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001a20:	9b01      	ldr	r3, [sp, #4]
		s1Channel = atoi(c.value);
 8001a22:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d000      	beq.n	8001a2a <modifySettingsWithCommand+0x16e>
 8001a28:	e767      	b.n	80018fa <modifySettingsWithCommand+0x3e>
 8001a2a:	88ab      	ldrh	r3, [r5, #4]
 8001a2c:	2b48      	cmp	r3, #72	@ 0x48
 8001a2e:	d000      	beq.n	8001a32 <modifySettingsWithCommand+0x176>
 8001a30:	e763      	b.n	80018fa <modifySettingsWithCommand+0x3e>
		s2Channel = atoi(c.value);
 8001a32:	0020      	movs	r0, r4
 8001a34:	f005 fc32 	bl	800729c <atoi>
 8001a38:	4b86      	ldr	r3, [pc, #536]	@ (8001c54 <modifySettingsWithCommand+0x398>)
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001a3a:	9a01      	ldr	r2, [sp, #4]
		s2Channel = atoi(c.value);
 8001a3c:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	@ (8001bf4 <modifySettingsWithCommand+0x338>)
		s2Channel = atoi(c.value);
 8001a40:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d000      	beq.n	8001a48 <modifySettingsWithCommand+0x18c>
 8001a46:	e75d      	b.n	8001904 <modifySettingsWithCommand+0x48>
 8001a48:	4b83      	ldr	r3, [pc, #524]	@ (8001c58 <modifySettingsWithCommand+0x39c>)
 8001a4a:	88aa      	ldrh	r2, [r5, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d000      	beq.n	8001a52 <modifySettingsWithCommand+0x196>
 8001a50:	e758      	b.n	8001904 <modifySettingsWithCommand+0x48>
 8001a52:	79ab      	ldrb	r3, [r5, #6]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d000      	beq.n	8001a5a <modifySettingsWithCommand+0x19e>
 8001a58:	e754      	b.n	8001904 <modifySettingsWithCommand+0x48>
		armChannel = atoi(c.value);
 8001a5a:	0020      	movs	r0, r4
 8001a5c:	f005 fc1e 	bl	800729c <atoi>
 8001a60:	4b7e      	ldr	r3, [pc, #504]	@ (8001c5c <modifySettingsWithCommand+0x3a0>)
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001a62:	4a65      	ldr	r2, [pc, #404]	@ (8001bf8 <modifySettingsWithCommand+0x33c>)
		armChannel = atoi(c.value);
 8001a64:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001a66:	9b01      	ldr	r3, [sp, #4]
		armChannel = atoi(c.value);
 8001a68:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d000      	beq.n	8001a70 <modifySettingsWithCommand+0x1b4>
 8001a6e:	e74e      	b.n	800190e <modifySettingsWithCommand+0x52>
 8001a70:	88aa      	ldrh	r2, [r5, #4]
 8001a72:	2a56      	cmp	r2, #86	@ 0x56
 8001a74:	d000      	beq.n	8001a78 <modifySettingsWithCommand+0x1bc>
 8001a76:	e74a      	b.n	800190e <modifySettingsWithCommand+0x52>
		m1Rev = atoi(c.value);
 8001a78:	0020      	movs	r0, r4
 8001a7a:	f005 fc0f 	bl	800729c <atoi>
 8001a7e:	4b78      	ldr	r3, [pc, #480]	@ (8001c60 <modifySettingsWithCommand+0x3a4>)
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 8001a80:	4a5e      	ldr	r2, [pc, #376]	@ (8001bfc <modifySettingsWithCommand+0x340>)
		m1Rev = atoi(c.value);
 8001a82:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001a84:	9b01      	ldr	r3, [sp, #4]
		m1Rev = atoi(c.value);
 8001a86:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d000      	beq.n	8001a8e <modifySettingsWithCommand+0x1d2>
 8001a8c:	e743      	b.n	8001916 <modifySettingsWithCommand+0x5a>
 8001a8e:	88aa      	ldrh	r2, [r5, #4]
 8001a90:	2a56      	cmp	r2, #86	@ 0x56
 8001a92:	d000      	beq.n	8001a96 <modifySettingsWithCommand+0x1da>
 8001a94:	e73f      	b.n	8001916 <modifySettingsWithCommand+0x5a>
		m2Rev = atoi(c.value);
 8001a96:	0020      	movs	r0, r4
 8001a98:	f005 fc00 	bl	800729c <atoi>
 8001a9c:	4b71      	ldr	r3, [pc, #452]	@ (8001c64 <modifySettingsWithCommand+0x3a8>)
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 8001a9e:	4a58      	ldr	r2, [pc, #352]	@ (8001c00 <modifySettingsWithCommand+0x344>)
		m2Rev = atoi(c.value);
 8001aa0:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001aa2:	9b01      	ldr	r3, [sp, #4]
		m2Rev = atoi(c.value);
 8001aa4:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d000      	beq.n	8001aac <modifySettingsWithCommand+0x1f0>
 8001aaa:	e738      	b.n	800191e <modifySettingsWithCommand+0x62>
 8001aac:	88aa      	ldrh	r2, [r5, #4]
 8001aae:	2a56      	cmp	r2, #86	@ 0x56
 8001ab0:	d000      	beq.n	8001ab4 <modifySettingsWithCommand+0x1f8>
 8001ab2:	e734      	b.n	800191e <modifySettingsWithCommand+0x62>
		m3Rev = atoi(c.value);
 8001ab4:	0020      	movs	r0, r4
 8001ab6:	f005 fbf1 	bl	800729c <atoi>
 8001aba:	4b6b      	ldr	r3, [pc, #428]	@ (8001c68 <modifySettingsWithCommand+0x3ac>)
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 8001abc:	4a51      	ldr	r2, [pc, #324]	@ (8001c04 <modifySettingsWithCommand+0x348>)
		m3Rev = atoi(c.value);
 8001abe:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001ac0:	9b01      	ldr	r3, [sp, #4]
		m3Rev = atoi(c.value);
 8001ac2:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d000      	beq.n	8001aca <modifySettingsWithCommand+0x20e>
 8001ac8:	e72d      	b.n	8001926 <modifySettingsWithCommand+0x6a>
 8001aca:	88aa      	ldrh	r2, [r5, #4]
 8001acc:	2a56      	cmp	r2, #86	@ 0x56
 8001ace:	d000      	beq.n	8001ad2 <modifySettingsWithCommand+0x216>
 8001ad0:	e729      	b.n	8001926 <modifySettingsWithCommand+0x6a>
		s1Rev = atoi(c.value);
 8001ad2:	0020      	movs	r0, r4
 8001ad4:	f005 fbe2 	bl	800729c <atoi>
 8001ad8:	4b64      	ldr	r3, [pc, #400]	@ (8001c6c <modifySettingsWithCommand+0x3b0>)
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 8001ada:	4a4b      	ldr	r2, [pc, #300]	@ (8001c08 <modifySettingsWithCommand+0x34c>)
		s1Rev = atoi(c.value);
 8001adc:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001ade:	9b01      	ldr	r3, [sp, #4]
		s1Rev = atoi(c.value);
 8001ae0:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d000      	beq.n	8001ae8 <modifySettingsWithCommand+0x22c>
 8001ae6:	e722      	b.n	800192e <modifySettingsWithCommand+0x72>
 8001ae8:	88aa      	ldrh	r2, [r5, #4]
 8001aea:	2a56      	cmp	r2, #86	@ 0x56
 8001aec:	d000      	beq.n	8001af0 <modifySettingsWithCommand+0x234>
 8001aee:	e71e      	b.n	800192e <modifySettingsWithCommand+0x72>
		s2Rev = atoi(c.value);
 8001af0:	0020      	movs	r0, r4
 8001af2:	f005 fbd3 	bl	800729c <atoi>
 8001af6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c70 <modifySettingsWithCommand+0x3b4>)
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 8001af8:	4a44      	ldr	r2, [pc, #272]	@ (8001c0c <modifySettingsWithCommand+0x350>)
		s2Rev = atoi(c.value);
 8001afa:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001afc:	9b01      	ldr	r3, [sp, #4]
		s2Rev = atoi(c.value);
 8001afe:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d000      	beq.n	8001b06 <modifySettingsWithCommand+0x24a>
 8001b04:	e717      	b.n	8001936 <modifySettingsWithCommand+0x7a>
 8001b06:	88aa      	ldrh	r2, [r5, #4]
 8001b08:	2a53      	cmp	r2, #83	@ 0x53
 8001b0a:	d000      	beq.n	8001b0e <modifySettingsWithCommand+0x252>
 8001b0c:	e713      	b.n	8001936 <modifySettingsWithCommand+0x7a>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001b0e:	4a59      	ldr	r2, [pc, #356]	@ (8001c74 <modifySettingsWithCommand+0x3b8>)
 8001b10:	8821      	ldrh	r1, [r4, #0]
 8001b12:	4291      	cmp	r1, r2
 8001b14:	d100      	bne.n	8001b18 <modifySettingsWithCommand+0x25c>
 8001b16:	e12b      	b.n	8001d70 <modifySettingsWithCommand+0x4b4>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001b18:	4a57      	ldr	r2, [pc, #348]	@ (8001c78 <modifySettingsWithCommand+0x3bc>)
 8001b1a:	8821      	ldrh	r1, [r4, #0]
 8001b1c:	4291      	cmp	r1, r2
 8001b1e:	d100      	bne.n	8001b22 <modifySettingsWithCommand+0x266>
 8001b20:	e11e      	b.n	8001d60 <modifySettingsWithCommand+0x4a4>
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001b22:	4a56      	ldr	r2, [pc, #344]	@ (8001c7c <modifySettingsWithCommand+0x3c0>)
 8001b24:	8821      	ldrh	r1, [r4, #0]
 8001b26:	4291      	cmp	r1, r2
 8001b28:	d000      	beq.n	8001b2c <modifySettingsWithCommand+0x270>
 8001b2a:	e704      	b.n	8001936 <modifySettingsWithCommand+0x7a>
 8001b2c:	78a2      	ldrb	r2, [r4, #2]
 8001b2e:	2a00      	cmp	r2, #0
 8001b30:	d000      	beq.n	8001b34 <modifySettingsWithCommand+0x278>
 8001b32:	e700      	b.n	8001936 <modifySettingsWithCommand+0x7a>
			mWeapon = M1;
 8001b34:	4952      	ldr	r1, [pc, #328]	@ (8001c80 <modifySettingsWithCommand+0x3c4>)
 8001b36:	2601      	movs	r6, #1
 8001b38:	700a      	strb	r2, [r1, #0]
			isOK = TRUE;
 8001b3a:	e6fc      	b.n	8001936 <modifySettingsWithCommand+0x7a>
	if (strcmp(c.type, COMMAND_READ) == 0) {
 8001b3c:	792b      	ldrb	r3, [r5, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d000      	beq.n	8001b44 <modifySettingsWithCommand+0x288>
 8001b42:	e726      	b.n	8001992 <modifySettingsWithCommand+0xd6>
		readSettingsFromEeprom();
 8001b44:	f7ff fcf8 	bl	8001538 <readSettingsFromEeprom>
		serialPrintSettings();
 8001b48:	2601      	movs	r6, #1
 8001b4a:	f7ff fde9 	bl	8001720 <serialPrintSettings>
		isOK = TRUE;
 8001b4e:	e720      	b.n	8001992 <modifySettingsWithCommand+0xd6>
	if (strcmp(c.type, COMMAND_SAVE) == 0) {
 8001b50:	792a      	ldrb	r2, [r5, #4]
 8001b52:	2a00      	cmp	r2, #0
 8001b54:	d000      	beq.n	8001b58 <modifySettingsWithCommand+0x29c>
 8001b56:	e718      	b.n	800198a <modifySettingsWithCommand+0xce>
		storeSettingsToEeprom();
 8001b58:	f7ff fc2e 	bl	80013b8 <storeSettingsToEeprom>
 8001b5c:	2601      	movs	r6, #1
 8001b5e:	9b01      	ldr	r3, [sp, #4]
 8001b60:	e713      	b.n	800198a <modifySettingsWithCommand+0xce>
	if (strcmp(c.type, COMMAND_RXPWMMODE) == 0) {
 8001b62:	88ab      	ldrh	r3, [r5, #4]
 8001b64:	2b4d      	cmp	r3, #77	@ 0x4d
 8001b66:	d000      	beq.n	8001b6a <modifySettingsWithCommand+0x2ae>
 8001b68:	e70a      	b.n	8001980 <modifySettingsWithCommand+0xc4>
		recieverIsPWM = atoi(c.value);
 8001b6a:	0020      	movs	r0, r4
 8001b6c:	f005 fb96 	bl	800729c <atoi>
 8001b70:	4b44      	ldr	r3, [pc, #272]	@ (8001c84 <modifySettingsWithCommand+0x3c8>)
 8001b72:	2601      	movs	r6, #1
 8001b74:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001b76:	e703      	b.n	8001980 <modifySettingsWithCommand+0xc4>
	if (strcmp(c.type, COMMAND_CUTOFFVOLTAGE) == 0) {
 8001b78:	4b43      	ldr	r3, [pc, #268]	@ (8001c88 <modifySettingsWithCommand+0x3cc>)
 8001b7a:	686a      	ldr	r2, [r5, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d000      	beq.n	8001b82 <modifySettingsWithCommand+0x2c6>
 8001b80:	e6f9      	b.n	8001976 <modifySettingsWithCommand+0xba>
		cutOffVoltage = atoi(c.value);
 8001b82:	0020      	movs	r0, r4
 8001b84:	f005 fb8a 	bl	800729c <atoi>
 8001b88:	4b40      	ldr	r3, [pc, #256]	@ (8001c8c <modifySettingsWithCommand+0x3d0>)
 8001b8a:	2601      	movs	r6, #1
 8001b8c:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001b8e:	e6f2      	b.n	8001976 <modifySettingsWithCommand+0xba>
	if (strcmp(c.type, COMMAND_LIMITVOLTAGE) == 0) {
 8001b90:	792b      	ldrb	r3, [r5, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d000      	beq.n	8001b98 <modifySettingsWithCommand+0x2dc>
 8001b96:	e6e9      	b.n	800196c <modifySettingsWithCommand+0xb0>
		limitVoltage = atoi(c.value);
 8001b98:	0020      	movs	r0, r4
 8001b9a:	f005 fb7f 	bl	800729c <atoi>
 8001b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c90 <modifySettingsWithCommand+0x3d4>)
 8001ba0:	2601      	movs	r6, #1
 8001ba2:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001ba4:	e6e2      	b.n	800196c <modifySettingsWithCommand+0xb0>
	if (strcmp(c.type, COMMAND_NODISARM) == 0) {
 8001ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8001c94 <modifySettingsWithCommand+0x3d8>)
 8001ba8:	686a      	ldr	r2, [r5, #4]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d000      	beq.n	8001bb0 <modifySettingsWithCommand+0x2f4>
 8001bae:	e6d8      	b.n	8001962 <modifySettingsWithCommand+0xa6>
 8001bb0:	7a2b      	ldrb	r3, [r5, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d000      	beq.n	8001bb8 <modifySettingsWithCommand+0x2fc>
 8001bb6:	e6d4      	b.n	8001962 <modifySettingsWithCommand+0xa6>
		noDisarm = atoi(c.value);
 8001bb8:	0020      	movs	r0, r4
 8001bba:	f005 fb6f 	bl	800729c <atoi>
 8001bbe:	4b36      	ldr	r3, [pc, #216]	@ (8001c98 <modifySettingsWithCommand+0x3dc>)
 8001bc0:	2601      	movs	r6, #1
 8001bc2:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001bc4:	e6cd      	b.n	8001962 <modifySettingsWithCommand+0xa6>
	if (strcmp(c.type, COMMAND_TANKON) == 0) {
 8001bc6:	88ab      	ldrh	r3, [r5, #4]
 8001bc8:	2b4e      	cmp	r3, #78	@ 0x4e
 8001bca:	d000      	beq.n	8001bce <modifySettingsWithCommand+0x312>
 8001bcc:	e6c4      	b.n	8001958 <modifySettingsWithCommand+0x9c>
		tankMixIsON = atoi(c.value);
 8001bce:	0020      	movs	r0, r4
 8001bd0:	f005 fb64 	bl	800729c <atoi>
 8001bd4:	4b31      	ldr	r3, [pc, #196]	@ (8001c9c <modifySettingsWithCommand+0x3e0>)
 8001bd6:	2601      	movs	r6, #1
 8001bd8:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001bda:	e6bd      	b.n	8001958 <modifySettingsWithCommand+0x9c>
 8001bdc:	200003f8 	.word	0x200003f8
 8001be0:	43324854 	.word	0x43324854
 8001be4:	43325453 	.word	0x43325453
 8001be8:	43325057 	.word	0x43325057
 8001bec:	43323153 	.word	0x43323153
 8001bf0:	43323253 	.word	0x43323253
 8001bf4:	324d5241 	.word	0x324d5241
 8001bf8:	4552314d 	.word	0x4552314d
 8001bfc:	4552324d 	.word	0x4552324d
 8001c00:	4552334d 	.word	0x4552334d
 8001c04:	45523153 	.word	0x45523153
 8001c08:	45523253 	.word	0x45523253
 8001c0c:	5341314d 	.word	0x5341314d
 8001c10:	5341324d 	.word	0x5341324d
 8001c14:	5341334d 	.word	0x5341334d
 8001c18:	44445057 	.word	0x44445057
 8001c1c:	4f4b4e54 	.word	0x4f4b4e54
 8001c20:	49444f4e 	.word	0x49444f4e
 8001c24:	4d494c56 	.word	0x4d494c56
 8001c28:	54554356 	.word	0x54554356
 8001c2c:	57505852 	.word	0x57505852
 8001c30:	45564153 	.word	0x45564153
 8001c34:	44414552 	.word	0x44414552
 8001c38:	004e4f43 	.word	0x004e4f43
 8001c3c:	080089a8 	.word	0x080089a8
 8001c40:	20000208 	.word	0x20000208
 8001c44:	20000011 	.word	0x20000011
 8001c48:	20000010 	.word	0x20000010
 8001c4c:	2000000f 	.word	0x2000000f
 8001c50:	2000000e 	.word	0x2000000e
 8001c54:	2000000d 	.word	0x2000000d
 8001c58:	00004843 	.word	0x00004843
 8001c5c:	2000000c 	.word	0x2000000c
 8001c60:	2000000b 	.word	0x2000000b
 8001c64:	2000000a 	.word	0x2000000a
 8001c68:	20000220 	.word	0x20000220
 8001c6c:	2000021f 	.word	0x2000021f
 8001c70:	2000021e 	.word	0x2000021e
 8001c74:	00004c4d 	.word	0x00004c4d
 8001c78:	0000524d 	.word	0x0000524d
 8001c7c:	00005057 	.word	0x00005057
 8001c80:	20000008 	.word	0x20000008
 8001c84:	20000000 	.word	0x20000000
 8001c88:	0046464f 	.word	0x0046464f
 8001c8c:	20000004 	.word	0x20000004
 8001c90:	20000005 	.word	0x20000005
 8001c94:	4d524153 	.word	0x4d524153
 8001c98:	20000006 	.word	0x20000006
 8001c9c:	20000007 	.word	0x20000007
	if (strcmp(c.type, COMMAND_WPDD) == 0) {
 8001ca0:	792a      	ldrb	r2, [r5, #4]
 8001ca2:	2a00      	cmp	r2, #0
 8001ca4:	d000      	beq.n	8001ca8 <modifySettingsWithCommand+0x3ec>
 8001ca6:	e653      	b.n	8001950 <modifySettingsWithCommand+0x94>
		weaponDoubleDirection = atoi(c.value);
 8001ca8:	0020      	movs	r0, r4
 8001caa:	f005 faf7 	bl	800729c <atoi>
 8001cae:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <modifySettingsWithCommand+0x4c4>)
 8001cb0:	2601      	movs	r6, #1
 8001cb2:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001cb4:	9b01      	ldr	r3, [sp, #4]
 8001cb6:	e64b      	b.n	8001950 <modifySettingsWithCommand+0x94>
	if (strcmp(c.type, COMMAND_M3ASS) == 0) {
 8001cb8:	88aa      	ldrh	r2, [r5, #4]
 8001cba:	2a53      	cmp	r2, #83	@ 0x53
 8001cbc:	d000      	beq.n	8001cc0 <modifySettingsWithCommand+0x404>
 8001cbe:	e642      	b.n	8001946 <modifySettingsWithCommand+0x8a>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001cc0:	4a30      	ldr	r2, [pc, #192]	@ (8001d84 <modifySettingsWithCommand+0x4c8>)
 8001cc2:	8821      	ldrh	r1, [r4, #0]
 8001cc4:	4291      	cmp	r1, r2
 8001cc6:	d033      	beq.n	8001d30 <modifySettingsWithCommand+0x474>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8001d88 <modifySettingsWithCommand+0x4cc>)
 8001cca:	8821      	ldrh	r1, [r4, #0]
 8001ccc:	4291      	cmp	r1, r2
 8001cce:	d027      	beq.n	8001d20 <modifySettingsWithCommand+0x464>
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001cd0:	4a2e      	ldr	r2, [pc, #184]	@ (8001d8c <modifySettingsWithCommand+0x4d0>)
 8001cd2:	8821      	ldrh	r1, [r4, #0]
 8001cd4:	4291      	cmp	r1, r2
 8001cd6:	d000      	beq.n	8001cda <modifySettingsWithCommand+0x41e>
 8001cd8:	e635      	b.n	8001946 <modifySettingsWithCommand+0x8a>
 8001cda:	78a2      	ldrb	r2, [r4, #2]
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d000      	beq.n	8001ce2 <modifySettingsWithCommand+0x426>
 8001ce0:	e631      	b.n	8001946 <modifySettingsWithCommand+0x8a>
			mWeapon = M3;
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d90 <modifySettingsWithCommand+0x4d4>)
 8001ce6:	2601      	movs	r6, #1
 8001ce8:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001cea:	e62c      	b.n	8001946 <modifySettingsWithCommand+0x8a>
	if (strcmp(c.type, COMMAND_M2ASS) == 0) {
 8001cec:	88aa      	ldrh	r2, [r5, #4]
 8001cee:	2a53      	cmp	r2, #83	@ 0x53
 8001cf0:	d000      	beq.n	8001cf4 <modifySettingsWithCommand+0x438>
 8001cf2:	e624      	b.n	800193e <modifySettingsWithCommand+0x82>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001cf4:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <modifySettingsWithCommand+0x4c8>)
 8001cf6:	8821      	ldrh	r1, [r4, #0]
 8001cf8:	4291      	cmp	r1, r2
 8001cfa:	d029      	beq.n	8001d50 <modifySettingsWithCommand+0x494>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001cfc:	4a22      	ldr	r2, [pc, #136]	@ (8001d88 <modifySettingsWithCommand+0x4cc>)
 8001cfe:	8821      	ldrh	r1, [r4, #0]
 8001d00:	4291      	cmp	r1, r2
 8001d02:	d01d      	beq.n	8001d40 <modifySettingsWithCommand+0x484>
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001d04:	4a21      	ldr	r2, [pc, #132]	@ (8001d8c <modifySettingsWithCommand+0x4d0>)
 8001d06:	8821      	ldrh	r1, [r4, #0]
 8001d08:	4291      	cmp	r1, r2
 8001d0a:	d000      	beq.n	8001d0e <modifySettingsWithCommand+0x452>
 8001d0c:	e617      	b.n	800193e <modifySettingsWithCommand+0x82>
 8001d0e:	78a2      	ldrb	r2, [r4, #2]
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	d000      	beq.n	8001d16 <modifySettingsWithCommand+0x45a>
 8001d14:	e613      	b.n	800193e <modifySettingsWithCommand+0x82>
			mWeapon = M2;
 8001d16:	2101      	movs	r1, #1
 8001d18:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <modifySettingsWithCommand+0x4d4>)
 8001d1a:	2601      	movs	r6, #1
 8001d1c:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001d1e:	e60e      	b.n	800193e <modifySettingsWithCommand+0x82>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001d20:	78a2      	ldrb	r2, [r4, #2]
 8001d22:	2a00      	cmp	r2, #0
 8001d24:	d1d4      	bne.n	8001cd0 <modifySettingsWithCommand+0x414>
			mRight = M3;
 8001d26:	2102      	movs	r1, #2
 8001d28:	4a1a      	ldr	r2, [pc, #104]	@ (8001d94 <modifySettingsWithCommand+0x4d8>)
 8001d2a:	2601      	movs	r6, #1
 8001d2c:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001d2e:	e7cf      	b.n	8001cd0 <modifySettingsWithCommand+0x414>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001d30:	78a2      	ldrb	r2, [r4, #2]
 8001d32:	2a00      	cmp	r2, #0
 8001d34:	d1c8      	bne.n	8001cc8 <modifySettingsWithCommand+0x40c>
			mLeft = M3;
 8001d36:	2102      	movs	r1, #2
 8001d38:	4a17      	ldr	r2, [pc, #92]	@ (8001d98 <modifySettingsWithCommand+0x4dc>)
 8001d3a:	2601      	movs	r6, #1
 8001d3c:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001d3e:	e7c3      	b.n	8001cc8 <modifySettingsWithCommand+0x40c>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001d40:	78a2      	ldrb	r2, [r4, #2]
 8001d42:	2a00      	cmp	r2, #0
 8001d44:	d1de      	bne.n	8001d04 <modifySettingsWithCommand+0x448>
			mRight = M2;
 8001d46:	2101      	movs	r1, #1
 8001d48:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <modifySettingsWithCommand+0x4d8>)
 8001d4a:	2601      	movs	r6, #1
 8001d4c:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001d4e:	e7d9      	b.n	8001d04 <modifySettingsWithCommand+0x448>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001d50:	78a2      	ldrb	r2, [r4, #2]
 8001d52:	2a00      	cmp	r2, #0
 8001d54:	d1d2      	bne.n	8001cfc <modifySettingsWithCommand+0x440>
			mLeft = M2;
 8001d56:	2101      	movs	r1, #1
 8001d58:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <modifySettingsWithCommand+0x4dc>)
 8001d5a:	2601      	movs	r6, #1
 8001d5c:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001d5e:	e7cd      	b.n	8001cfc <modifySettingsWithCommand+0x440>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001d60:	78a2      	ldrb	r2, [r4, #2]
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	d000      	beq.n	8001d68 <modifySettingsWithCommand+0x4ac>
 8001d66:	e6dc      	b.n	8001b22 <modifySettingsWithCommand+0x266>
			mRight = M1;
 8001d68:	490a      	ldr	r1, [pc, #40]	@ (8001d94 <modifySettingsWithCommand+0x4d8>)
 8001d6a:	2601      	movs	r6, #1
 8001d6c:	700a      	strb	r2, [r1, #0]
			isOK = TRUE;
 8001d6e:	e6d8      	b.n	8001b22 <modifySettingsWithCommand+0x266>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001d70:	78a2      	ldrb	r2, [r4, #2]
 8001d72:	2a00      	cmp	r2, #0
 8001d74:	d000      	beq.n	8001d78 <modifySettingsWithCommand+0x4bc>
 8001d76:	e6cf      	b.n	8001b18 <modifySettingsWithCommand+0x25c>
			mLeft = M1;
 8001d78:	4907      	ldr	r1, [pc, #28]	@ (8001d98 <modifySettingsWithCommand+0x4dc>)
 8001d7a:	2601      	movs	r6, #1
 8001d7c:	700a      	strb	r2, [r1, #0]
			isOK = TRUE;
 8001d7e:	e6cb      	b.n	8001b18 <modifySettingsWithCommand+0x25c>
 8001d80:	2000021c 	.word	0x2000021c
 8001d84:	00004c4d 	.word	0x00004c4d
 8001d88:	0000524d 	.word	0x0000524d
 8001d8c:	00005057 	.word	0x00005057
 8001d90:	20000008 	.word	0x20000008
 8001d94:	20000009 	.word	0x20000009
 8001d98:	2000021d 	.word	0x2000021d

08001d9c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <HAL_MspInit+0x2c>)
{
 8001da0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	6999      	ldr	r1, [r3, #24]
 8001da4:	4311      	orrs	r1, r2
 8001da6:	6199      	str	r1, [r3, #24]
 8001da8:	6999      	ldr	r1, [r3, #24]
 8001daa:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	9200      	str	r2, [sp, #0]
 8001db0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	69da      	ldr	r2, [r3, #28]
 8001db4:	0549      	lsls	r1, r1, #21
 8001db6:	430a      	orrs	r2, r1
 8001db8:	61da      	str	r2, [r3, #28]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	400b      	ands	r3, r1
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc2:	b002      	add	sp, #8
 8001dc4:	4770      	bx	lr
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	40021000 	.word	0x40021000

08001dcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b510      	push	{r4, lr}
 8001dce:	0004      	movs	r4, r0
 8001dd0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	2214      	movs	r2, #20
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	a802      	add	r0, sp, #8
 8001dd8:	f005 fc2c 	bl	8007634 <memset>
  if(hadc->Instance==ADC1)
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_ADC_MspInit+0x58>)
 8001dde:	6822      	ldr	r2, [r4, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d001      	beq.n	8001de8 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001de4:	b008      	add	sp, #32
 8001de6:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001de8:	2180      	movs	r1, #128	@ 0x80
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <HAL_ADC_MspInit+0x5c>)
 8001dec:	0089      	lsls	r1, r1, #2
 8001dee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df2:	430a      	orrs	r2, r1
 8001df4:	619a      	str	r2, [r3, #24]
 8001df6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dfa:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dfe:	9200      	str	r2, [sp, #0]
 8001e00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	0289      	lsls	r1, r1, #10
 8001e06:	430a      	orrs	r2, r1
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8001e0c:	2207      	movs	r2, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	400b      	ands	r3, r1
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8001e14:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8001e18:	9202      	str	r2, [sp, #8]
 8001e1a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f000 fc74 	bl	8002708 <HAL_GPIO_Init>
}
 8001e20:	e7e0      	b.n	8001de4 <HAL_ADC_MspInit+0x18>
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	40012400 	.word	0x40012400
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	0004      	movs	r4, r0
 8001e30:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e32:	2214      	movs	r2, #20
 8001e34:	2100      	movs	r1, #0
 8001e36:	a802      	add	r0, sp, #8
 8001e38:	f005 fbfc 	bl	8007634 <memset>
  if(hi2c->Instance==I2C1)
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <HAL_I2C_MspInit+0x64>)
 8001e3e:	6822      	ldr	r2, [r4, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e44:	b008      	add	sp, #32
 8001e46:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	2280      	movs	r2, #128	@ 0x80
 8001e4a:	4c12      	ldr	r4, [pc, #72]	@ (8001e94 <HAL_I2C_MspInit+0x68>)
 8001e4c:	02d2      	lsls	r2, r2, #11
 8001e4e:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e50:	4811      	ldr	r0, [pc, #68]	@ (8001e98 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4313      	orrs	r3, r2
 8001e54:	6163      	str	r3, [r4, #20]
 8001e56:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e5e:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e60:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e62:	2312      	movs	r3, #18
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	9202      	str	r2, [sp, #8]
 8001e68:	9303      	str	r3, [sp, #12]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	9204      	str	r2, [sp, #16]
 8001e70:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	f000 fc47 	bl	8002708 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e7a:	2280      	movs	r2, #128	@ 0x80
 8001e7c:	69e3      	ldr	r3, [r4, #28]
 8001e7e:	0392      	lsls	r2, r2, #14
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61e3      	str	r3, [r4, #28]
 8001e84:	69e3      	ldr	r3, [r4, #28]
 8001e86:	4013      	ands	r3, r2
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	9b01      	ldr	r3, [sp, #4]
}
 8001e8c:	e7da      	b.n	8001e44 <HAL_I2C_MspInit+0x18>
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	40005400 	.word	0x40005400
 8001e94:	40021000 	.word	0x40021000
 8001e98:	48000400 	.word	0x48000400

08001e9c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001e9c:	6803      	ldr	r3, [r0, #0]
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <HAL_TIM_Base_MspInit+0x78>)
{
 8001ea0:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d014      	beq.n	8001ed0 <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8001ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f18 <HAL_TIM_Base_MspInit+0x7c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d007      	beq.n	8001ebc <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8001eac:	4a1b      	ldr	r2, [pc, #108]	@ (8001f1c <HAL_TIM_Base_MspInit+0x80>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d019      	beq.n	8001ee6 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 8001eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f20 <HAL_TIM_Base_MspInit+0x84>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d021      	beq.n	8001efc <HAL_TIM_Base_MspInit+0x60>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001eb8:	b004      	add	sp, #16
 8001eba:	4770      	bx	lr
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ebc:	2310      	movs	r3, #16
 8001ebe:	4a19      	ldr	r2, [pc, #100]	@ (8001f24 <HAL_TIM_Base_MspInit+0x88>)
 8001ec0:	69d1      	ldr	r1, [r2, #28]
 8001ec2:	4319      	orrs	r1, r3
 8001ec4:	61d1      	str	r1, [r2, #28]
 8001ec6:	69d2      	ldr	r2, [r2, #28]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	9b01      	ldr	r3, [sp, #4]
 8001ece:	e7f3      	b.n	8001eb8 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ed0:	2180      	movs	r1, #128	@ 0x80
 8001ed2:	4b14      	ldr	r3, [pc, #80]	@ (8001f24 <HAL_TIM_Base_MspInit+0x88>)
 8001ed4:	0109      	lsls	r1, r1, #4
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	619a      	str	r2, [r3, #24]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	400b      	ands	r3, r1
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	9b00      	ldr	r3, [sp, #0]
 8001ee4:	e7e8      	b.n	8001eb8 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ee6:	2180      	movs	r1, #128	@ 0x80
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <HAL_TIM_Base_MspInit+0x88>)
 8001eea:	0289      	lsls	r1, r1, #10
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	619a      	str	r2, [r3, #24]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	400b      	ands	r3, r1
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	9b02      	ldr	r3, [sp, #8]
 8001efa:	e7dd      	b.n	8001eb8 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001efc:	2180      	movs	r1, #128	@ 0x80
 8001efe:	4b09      	ldr	r3, [pc, #36]	@ (8001f24 <HAL_TIM_Base_MspInit+0x88>)
 8001f00:	02c9      	lsls	r1, r1, #11
 8001f02:	699a      	ldr	r2, [r3, #24]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	619a      	str	r2, [r3, #24]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	400b      	ands	r3, r1
 8001f0c:	9303      	str	r3, [sp, #12]
 8001f0e:	9b03      	ldr	r3, [sp, #12]
}
 8001f10:	e7d2      	b.n	8001eb8 <HAL_TIM_Base_MspInit+0x1c>
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	40012c00 	.word	0x40012c00
 8001f18:	40001000 	.word	0x40001000
 8001f1c:	40014400 	.word	0x40014400
 8001f20:	40014800 	.word	0x40014800
 8001f24:	40021000 	.word	0x40021000

08001f28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f28:	b510      	push	{r4, lr}
 8001f2a:	0004      	movs	r4, r0
 8001f2c:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	2214      	movs	r2, #20
 8001f30:	2100      	movs	r1, #0
 8001f32:	a804      	add	r0, sp, #16
 8001f34:	f005 fb7e 	bl	8007634 <memset>
  if(htim->Instance==TIM1)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	4a21      	ldr	r2, [pc, #132]	@ (8001fc0 <HAL_TIM_MspPostInit+0x98>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d007      	beq.n	8001f50 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM16)
 8001f40:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <HAL_TIM_MspPostInit+0x9c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01b      	beq.n	8001f7e <HAL_TIM_MspPostInit+0x56>

  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }
  else if(htim->Instance==TIM17)
 8001f46:	4a20      	ldr	r2, [pc, #128]	@ (8001fc8 <HAL_TIM_MspPostInit+0xa0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d02d      	beq.n	8001fa8 <HAL_TIM_MspPostInit+0x80>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001f4c:	b00a      	add	sp, #40	@ 0x28
 8001f4e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	2180      	movs	r1, #128	@ 0x80
 8001f52:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <HAL_TIM_MspPostInit+0xa4>)
 8001f54:	0289      	lsls	r1, r1, #10
 8001f56:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin|PWM_M3_Pin;
 8001f60:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	400b      	ands	r3, r1
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin|PWM_M3_Pin;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	00d2      	lsls	r2, r2, #3
 8001f6c:	9204      	str	r2, [sp, #16]
 8001f6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001f70:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	a904      	add	r1, sp, #16
 8001f74:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001f76:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f000 fbc6 	bl	8002708 <HAL_GPIO_Init>
 8001f7c:	e7e6      	b.n	8001f4c <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	2180      	movs	r1, #128	@ 0x80
 8001f80:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_TIM_MspPostInit+0xa4>)
 8001f82:	02c9      	lsls	r1, r1, #11
 8001f84:	695a      	ldr	r2, [r3, #20]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Pin = SERVO1_HV_Pin;
 8001f8a:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	400b      	ands	r3, r1
 8001f90:	9302      	str	r3, [sp, #8]
 8001f92:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 8001f94:	2302      	movs	r3, #2
 8001f96:	9204      	str	r2, [sp, #16]
 8001f98:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8001f9a:	2302      	movs	r3, #2
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <HAL_TIM_MspPostInit+0xa8>)
 8001f9e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8001fa0:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	f000 fbb1 	bl	8002708 <HAL_GPIO_Init>
}
 8001fa6:	e7d1      	b.n	8001f4c <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <HAL_TIM_MspPostInit+0xa4>)
 8001fac:	02c9      	lsls	r1, r1, #11
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 8001fb6:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	400b      	ands	r3, r1
 8001fba:	9303      	str	r3, [sp, #12]
 8001fbc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	e7e9      	b.n	8001f94 <HAL_TIM_MspPostInit+0x6c>
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40014800 	.word	0x40014800
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	48000400 	.word	0x48000400

08001fd4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <NMI_Handler>
 8001fd6:	46c0      	nop			@ (mov r8, r8)

08001fd8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <HardFault_Handler>
 8001fda:	46c0      	nop			@ (mov r8, r8)

08001fdc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fdc:	4770      	bx	lr
 8001fde:	46c0      	nop			@ (mov r8, r8)

08001fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001fe0:	4770      	bx	lr
 8001fe2:	46c0      	nop			@ (mov r8, r8)

08001fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe6:	f000 f8d7 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fea:	bd10      	pop	{r4, pc}

08001fec <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001fec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH1_Pin);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f000 fca0 	bl	8002934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH2_Pin);
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	f000 fc9d 	bl	8002934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001ffa:	bd10      	pop	{r4, pc}

08001ffc <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001ffc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH3_Pin);
 8001ffe:	2004      	movs	r0, #4
 8002000:	f000 fc98 	bl	8002934 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH4_Pin);
 8002004:	2008      	movs	r0, #8
 8002006:	f000 fc95 	bl	8002934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800200a:	bd10      	pop	{r4, pc}

0800200c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800200c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800200e:	4802      	ldr	r0, [pc, #8]	@ (8002018 <USB_IRQHandler+0xc>)
 8002010:	f001 fbd8 	bl	80037c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002014:	bd10      	pop	{r4, pc}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	20001328 	.word	0x20001328

0800201c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800201c:	2001      	movs	r0, #1
 800201e:	4770      	bx	lr

08002020 <_kill>:

int _kill(int pid, int sig)
{
 8002020:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002022:	f005 fbbd 	bl	80077a0 <__errno>
 8002026:	2316      	movs	r3, #22
 8002028:	6003      	str	r3, [r0, #0]
  return -1;
 800202a:	2001      	movs	r0, #1
}
 800202c:	4240      	negs	r0, r0
 800202e:	bd10      	pop	{r4, pc}

08002030 <_exit>:

void _exit (int status)
{
 8002030:	b510      	push	{r4, lr}
  errno = EINVAL;
 8002032:	f005 fbb5 	bl	80077a0 <__errno>
 8002036:	2316      	movs	r3, #22
 8002038:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800203a:	e7fe      	b.n	800203a <_exit+0xa>

0800203c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002040:	dd07      	ble.n	8002052 <_read+0x16>
 8002042:	000c      	movs	r4, r1
 8002044:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 8002046:	e000      	b.n	800204a <_read+0xe>
 8002048:	bf00      	nop
 800204a:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	3401      	adds	r4, #1
 800204e:	42ac      	cmp	r4, r5
 8002050:	d1f9      	bne.n	8002046 <_read+0xa>
  }

  return len;
}
 8002052:	0030      	movs	r0, r6
 8002054:	bd70      	pop	{r4, r5, r6, pc}
 8002056:	46c0      	nop			@ (mov r8, r8)

08002058 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	dd07      	ble.n	800206e <_write+0x16>
 800205e:	000c      	movs	r4, r1
 8002060:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 8002062:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002064:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 8002066:	e000      	b.n	800206a <_write+0x12>
 8002068:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	42ac      	cmp	r4, r5
 800206c:	d1f9      	bne.n	8002062 <_write+0xa>
  }
  return len;
}
 800206e:	0030      	movs	r0, r6
 8002070:	bd70      	pop	{r4, r5, r6, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)

08002074 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8002074:	2001      	movs	r0, #1
}
 8002076:	4240      	negs	r0, r0
 8002078:	4770      	bx	lr
 800207a:	46c0      	nop			@ (mov r8, r8)

0800207c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	019b      	lsls	r3, r3, #6
  return 0;
}
 8002080:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002082:	604b      	str	r3, [r1, #4]
}
 8002084:	4770      	bx	lr
 8002086:	46c0      	nop			@ (mov r8, r8)

08002088 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002088:	2001      	movs	r0, #1
 800208a:	4770      	bx	lr

0800208c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800208c:	2000      	movs	r0, #0
 800208e:	4770      	bx	lr

08002090 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002090:	490c      	ldr	r1, [pc, #48]	@ (80020c4 <_sbrk+0x34>)
 8002092:	4a0d      	ldr	r2, [pc, #52]	@ (80020c8 <_sbrk+0x38>)
{
 8002094:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002096:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002098:	490c      	ldr	r1, [pc, #48]	@ (80020cc <_sbrk+0x3c>)
{
 800209a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800209c:	6808      	ldr	r0, [r1, #0]
 800209e:	2800      	cmp	r0, #0
 80020a0:	d004      	beq.n	80020ac <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a2:	18c3      	adds	r3, r0, r3
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d806      	bhi.n	80020b6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80020a8:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80020aa:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80020ac:	4808      	ldr	r0, [pc, #32]	@ (80020d0 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80020ae:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80020b0:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d9f8      	bls.n	80020a8 <_sbrk+0x18>
    errno = ENOMEM;
 80020b6:	f005 fb73 	bl	80077a0 <__errno>
 80020ba:	230c      	movs	r3, #12
 80020bc:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80020be:	2001      	movs	r0, #1
 80020c0:	4240      	negs	r0, r0
 80020c2:	e7f2      	b.n	80020aa <_sbrk+0x1a>
 80020c4:	00000400 	.word	0x00000400
 80020c8:	20004000 	.word	0x20004000
 80020cc:	20000438 	.word	0x20000438
 80020d0:	20001750 	.word	0x20001750

080020d4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020d4:	4770      	bx	lr
 80020d6:	46c0      	nop			@ (mov r8, r8)

080020d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020d8:	480d      	ldr	r0, [pc, #52]	@ (8002110 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/

  bl  SystemInit
 80020dc:	f7ff fffa 	bl	80020d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e0:	480c      	ldr	r0, [pc, #48]	@ (8002114 <LoopForever+0x6>)
  ldr r1, =_edata
 80020e2:	490d      	ldr	r1, [pc, #52]	@ (8002118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020e4:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <LoopForever+0xe>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e8:	e002      	b.n	80020f0 <LoopCopyDataInit>

080020ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ee:	3304      	adds	r3, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f4:	d3f9      	bcc.n	80020ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002124 <LoopForever+0x16>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020fc:	e001      	b.n	8002102 <LoopFillZerobss>

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002100:	3204      	adds	r2, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002106:	f005 fb51 	bl	80077ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800210a:	f7fe fa31 	bl	8000570 <main>

0800210e <LoopForever>:

LoopForever:
    b LoopForever
 800210e:	e7fe      	b.n	800210e <LoopForever>
  ldr   r0, =_estack
 8002110:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002118:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800211c:	08008c70 	.word	0x08008c70
  ldr r2, =_sbss
 8002120:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002124:	20001750 	.word	0x20001750

08002128 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC1_IRQHandler>
	...

0800212c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800212c:	b570      	push	{r4, r5, r6, lr}
 800212e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002130:	20fa      	movs	r0, #250	@ 0xfa
 8002132:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <HAL_InitTick+0x40>)
 8002134:	0080      	lsls	r0, r0, #2
 8002136:	7819      	ldrb	r1, [r3, #0]
 8002138:	f7fd fff8 	bl	800012c <__udivsi3>
 800213c:	4d0c      	ldr	r5, [pc, #48]	@ (8002170 <HAL_InitTick+0x44>)
 800213e:	0001      	movs	r1, r0
 8002140:	6828      	ldr	r0, [r5, #0]
 8002142:	f7fd fff3 	bl	800012c <__udivsi3>
 8002146:	f000 fac5 	bl	80026d4 <HAL_SYSTICK_Config>
 800214a:	2800      	cmp	r0, #0
 800214c:	d10c      	bne.n	8002168 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 800214e:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002150:	2c03      	cmp	r4, #3
 8002152:	d900      	bls.n	8002156 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002154:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002156:	3802      	subs	r0, #2
 8002158:	2200      	movs	r2, #0
 800215a:	0021      	movs	r1, r4
 800215c:	f000 fa84 	bl	8002668 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <HAL_InitTick+0x48>)
 8002162:	2000      	movs	r0, #0
 8002164:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8002166:	e7f5      	b.n	8002154 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8002168:	2001      	movs	r0, #1
 800216a:	e7f3      	b.n	8002154 <HAL_InitTick+0x28>
 800216c:	20000018 	.word	0x20000018
 8002170:	20000014 	.word	0x20000014
 8002174:	2000001c 	.word	0x2000001c

08002178 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002178:	2110      	movs	r1, #16
 800217a:	4a06      	ldr	r2, [pc, #24]	@ (8002194 <HAL_Init+0x1c>)
{
 800217c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800217e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002180:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002182:	430b      	orrs	r3, r1
 8002184:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002186:	f7ff ffd1 	bl	800212c <HAL_InitTick>
  HAL_MspInit();
 800218a:	f7ff fe07 	bl	8001d9c <HAL_MspInit>
}
 800218e:	2000      	movs	r0, #0
 8002190:	bd10      	pop	{r4, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002198:	4a03      	ldr	r2, [pc, #12]	@ (80021a8 <HAL_IncTick+0x10>)
 800219a:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <HAL_IncTick+0x14>)
 800219c:	6811      	ldr	r1, [r2, #0]
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	185b      	adds	r3, r3, r1
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	4770      	bx	lr
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	2000043c 	.word	0x2000043c
 80021ac:	20000018 	.word	0x20000018

080021b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021b0:	4b01      	ldr	r3, [pc, #4]	@ (80021b8 <HAL_GetTick+0x8>)
 80021b2:	6818      	ldr	r0, [r3, #0]
}
 80021b4:	4770      	bx	lr
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	2000043c 	.word	0x2000043c

080021bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021bc:	b570      	push	{r4, r5, r6, lr}
 80021be:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff fff6 	bl	80021b0 <HAL_GetTick>
 80021c4:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	1c63      	adds	r3, r4, #1
 80021c8:	d002      	beq.n	80021d0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ca:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <HAL_Delay+0x20>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021d0:	f7ff ffee 	bl	80021b0 <HAL_GetTick>
 80021d4:	1b40      	subs	r0, r0, r5
 80021d6:	42a0      	cmp	r0, r4
 80021d8:	d3fa      	bcc.n	80021d0 <HAL_Delay+0x14>
  {
  }
}
 80021da:	bd70      	pop	{r4, r5, r6, pc}
 80021dc:	20000018 	.word	0x20000018

080021e0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80021e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021e2:	2303      	movs	r3, #3
 80021e4:	6802      	ldr	r2, [r0, #0]
{
 80021e6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021e8:	6891      	ldr	r1, [r2, #8]
 80021ea:	400b      	ands	r3, r1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d001      	beq.n	80021f4 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021f0:	2000      	movs	r0, #0
}
 80021f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021f4:	6811      	ldr	r1, [r2, #0]
 80021f6:	420b      	tst	r3, r1
 80021f8:	d00e      	beq.n	8002218 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021fa:	2705      	movs	r7, #5
 80021fc:	6893      	ldr	r3, [r2, #8]
 80021fe:	401f      	ands	r7, r3
 8002200:	2f01      	cmp	r7, #1
 8002202:	d00d      	beq.n	8002220 <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002204:	2210      	movs	r2, #16
 8002206:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 8002208:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800220a:	4313      	orrs	r3, r2
 800220c:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002210:	3a0f      	subs	r2, #15
 8002212:	4313      	orrs	r3, r2
 8002214:	63e3      	str	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002216:	e7ec      	b.n	80021f2 <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002218:	68d3      	ldr	r3, [r2, #12]
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	d5e8      	bpl.n	80021f0 <ADC_Disable+0x10>
 800221e:	e7ec      	b.n	80021fa <ADC_Disable+0x1a>
      __HAL_ADC_DISABLE(hadc);
 8002220:	2102      	movs	r1, #2
 8002222:	6893      	ldr	r3, [r2, #8]
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002224:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 8002226:	430b      	orrs	r3, r1
 8002228:	6093      	str	r3, [r2, #8]
 800222a:	2303      	movs	r3, #3
 800222c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800222e:	f7ff ffbf 	bl	80021b0 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002232:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002234:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	421f      	tst	r7, r3
 800223a:	d0d9      	beq.n	80021f0 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800223c:	f7ff ffb8 	bl	80021b0 <HAL_GetTick>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002240:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002242:	1b80      	subs	r0, r0, r6
 8002244:	2802      	cmp	r0, #2
 8002246:	d902      	bls.n	800224e <ADC_Disable+0x6e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	4215      	tst	r5, r2
 800224c:	d103      	bne.n	8002256 <ADC_Disable+0x76>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	421d      	tst	r5, r3
 8002252:	d1f3      	bne.n	800223c <ADC_Disable+0x5c>
 8002254:	e7cc      	b.n	80021f0 <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002256:	2210      	movs	r2, #16
 8002258:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 800225a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225c:	4313      	orrs	r3, r2
 800225e:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002260:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002262:	432b      	orrs	r3, r5
 8002264:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002266:	e7c4      	b.n	80021f2 <ADC_Disable+0x12>

08002268 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002268:	2204      	movs	r2, #4
 800226a:	6803      	ldr	r3, [r0, #0]
{
 800226c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800226e:	6899      	ldr	r1, [r3, #8]
{
 8002270:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002272:	420a      	tst	r2, r1
 8002274:	d01d      	beq.n	80022b2 <ADC_ConversionStop+0x4a>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002276:	6899      	ldr	r1, [r3, #8]
 8002278:	420a      	tst	r2, r1
 800227a:	d006      	beq.n	800228a <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800227c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800227e:	0792      	lsls	r2, r2, #30
 8002280:	d403      	bmi.n	800228a <ADC_ConversionStop+0x22>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002282:	2110      	movs	r1, #16
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	430a      	orrs	r2, r1
 8002288:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800228a:	f7ff ff91 	bl	80021b0 <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800228e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002290:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	075b      	lsls	r3, r3, #29
 8002296:	d50c      	bpl.n	80022b2 <ADC_ConversionStop+0x4a>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002298:	2504      	movs	r5, #4
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800229a:	f7ff ff89 	bl	80021b0 <HAL_GetTick>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800229e:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022a0:	1b80      	subs	r0, r0, r6
 80022a2:	2802      	cmp	r0, #2
 80022a4:	d902      	bls.n	80022ac <ADC_ConversionStop+0x44>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4215      	tst	r5, r2
 80022aa:	d104      	bne.n	80022b6 <ADC_ConversionStop+0x4e>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	421d      	tst	r5, r3
 80022b0:	d1f3      	bne.n	800229a <ADC_ConversionStop+0x32>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022b2:	2000      	movs	r0, #0
}
 80022b4:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b6:	2210      	movs	r2, #16
 80022b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022bc:	4313      	orrs	r3, r2
 80022be:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80022c2:	3a0f      	subs	r2, #15
 80022c4:	4313      	orrs	r3, r2
 80022c6:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80022c8:	e7f4      	b.n	80022b4 <ADC_ConversionStop+0x4c>
 80022ca:	46c0      	nop			@ (mov r8, r8)

080022cc <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 80022cc:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 80022ce:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022d0:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 80022d2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80022d4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022d6:	6891      	ldr	r1, [r2, #8]
 80022d8:	3303      	adds	r3, #3
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 80022da:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022dc:	400b      	ands	r3, r1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d037      	beq.n	8002352 <ADC_Enable.constprop.0+0x86>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022e2:	6891      	ldr	r1, [r2, #8]
 80022e4:	4b23      	ldr	r3, [pc, #140]	@ (8002374 <ADC_Enable.constprop.0+0xa8>)
 80022e6:	4219      	tst	r1, r3
 80022e8:	d129      	bne.n	800233e <ADC_Enable.constprop.0+0x72>
    __HAL_ADC_ENABLE(hadc);
 80022ea:	2101      	movs	r1, #1
 80022ec:	6893      	ldr	r3, [r2, #8]
 80022ee:	430b      	orrs	r3, r1
 80022f0:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022f2:	4b21      	ldr	r3, [pc, #132]	@ (8002378 <ADC_Enable.constprop.0+0xac>)
 80022f4:	4921      	ldr	r1, [pc, #132]	@ (800237c <ADC_Enable.constprop.0+0xb0>)
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	f7fd ff18 	bl	800012c <__udivsi3>
 80022fc:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80022fe:	9b01      	ldr	r3, [sp, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <ADC_Enable.constprop.0+0x44>
      wait_loop_index--;
 8002304:	9b01      	ldr	r3, [sp, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800230a:	9b01      	ldr	r3, [sp, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f9      	bne.n	8002304 <ADC_Enable.constprop.0+0x38>
    tickstart = HAL_GetTick();
 8002310:	f7ff ff4e 	bl	80021b0 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002314:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002316:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002318:	681b      	ldr	r3, [r3, #0]
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800231a:	2501      	movs	r5, #1
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800231c:	07db      	lsls	r3, r3, #31
 800231e:	d40b      	bmi.n	8002338 <ADC_Enable.constprop.0+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002320:	f7ff ff46 	bl	80021b0 <HAL_GetTick>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002324:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002326:	1b80      	subs	r0, r0, r6
 8002328:	2802      	cmp	r0, #2
 800232a:	d902      	bls.n	8002332 <ADC_Enable.constprop.0+0x66>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4215      	tst	r5, r2
 8002330:	d016      	beq.n	8002360 <ADC_Enable.constprop.0+0x94>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	421d      	tst	r5, r3
 8002336:	d0f3      	beq.n	8002320 <ADC_Enable.constprop.0+0x54>
  return HAL_OK;
 8002338:	2000      	movs	r0, #0
}
 800233a:	b002      	add	sp, #8
 800233c:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233e:	2210      	movs	r2, #16
 8002340:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 8002342:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002344:	4313      	orrs	r3, r2
 8002346:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002348:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800234a:	3a0f      	subs	r2, #15
 800234c:	4313      	orrs	r3, r2
 800234e:	63e3      	str	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002350:	e7f3      	b.n	800233a <ADC_Enable.constprop.0+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002352:	6811      	ldr	r1, [r2, #0]
 8002354:	420b      	tst	r3, r1
 8002356:	d1ef      	bne.n	8002338 <ADC_Enable.constprop.0+0x6c>
 8002358:	68d3      	ldr	r3, [r2, #12]
 800235a:	041b      	lsls	r3, r3, #16
 800235c:	d4ec      	bmi.n	8002338 <ADC_Enable.constprop.0+0x6c>
 800235e:	e7c0      	b.n	80022e2 <ADC_Enable.constprop.0+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002360:	2210      	movs	r2, #16
 8002362:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 8002364:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002366:	4313      	orrs	r3, r2
 8002368:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800236c:	432b      	orrs	r3, r5
 800236e:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002370:	e7e3      	b.n	800233a <ADC_Enable.constprop.0+0x6e>
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	80000017 	.word	0x80000017
 8002378:	20000014 	.word	0x20000014
 800237c:	000f4240 	.word	0x000f4240

08002380 <HAL_ADC_Init>:
{
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8002384:	d064      	beq.n	8002450 <HAL_ADC_Init+0xd0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002386:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002388:	2b00      	cmp	r3, #0
 800238a:	d068      	beq.n	800245e <HAL_ADC_Init+0xde>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800238c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800238e:	06db      	lsls	r3, r3, #27
 8002390:	d460      	bmi.n	8002454 <HAL_ADC_Init+0xd4>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002392:	6822      	ldr	r2, [r4, #0]
 8002394:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002396:	075b      	lsls	r3, r3, #29
 8002398:	d45c      	bmi.n	8002454 <HAL_ADC_Init+0xd4>
    ADC_STATE_CLR_SET(hadc->State,
 800239a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800239c:	4947      	ldr	r1, [pc, #284]	@ (80024bc <HAL_ADC_Init+0x13c>)
 800239e:	400b      	ands	r3, r1
 80023a0:	3106      	adds	r1, #6
 80023a2:	31ff      	adds	r1, #255	@ 0xff
 80023a4:	430b      	orrs	r3, r1
 80023a6:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80023a8:	2303      	movs	r3, #3
 80023aa:	6891      	ldr	r1, [r2, #8]
 80023ac:	400b      	ands	r3, r1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d05b      	beq.n	800246a <HAL_ADC_Init+0xea>
      MODIFY_REG(hadc->Instance->CFGR1,
 80023b2:	2118      	movs	r1, #24
 80023b4:	68d3      	ldr	r3, [r2, #12]
 80023b6:	438b      	bics	r3, r1
 80023b8:	68a1      	ldr	r1, [r4, #8]
 80023ba:	430b      	orrs	r3, r1
 80023bc:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80023be:	6913      	ldr	r3, [r2, #16]
 80023c0:	6861      	ldr	r1, [r4, #4]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	430b      	orrs	r3, r1
 80023c8:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80023ca:	68d3      	ldr	r3, [r2, #12]
 80023cc:	493c      	ldr	r1, [pc, #240]	@ (80024c0 <HAL_ADC_Init+0x140>)
 80023ce:	400b      	ands	r3, r1
 80023d0:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023d2:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80023d4:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023d6:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80023d8:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023da:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023dc:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80023de:	68e1      	ldr	r1, [r4, #12]
 80023e0:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023e2:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80023e4:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80023e6:	2124      	movs	r1, #36	@ 0x24
 80023e8:	5c61      	ldrb	r1, [r4, r1]
 80023ea:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80023ec:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80023ee:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80023f0:	3901      	subs	r1, #1
 80023f2:	1e4d      	subs	r5, r1, #1
 80023f4:	41a9      	sbcs	r1, r5
 80023f6:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6921      	ldr	r1, [r4, #16]
 80023fc:	3902      	subs	r1, #2
 80023fe:	424d      	negs	r5, r1
 8002400:	4169      	adcs	r1, r5
 8002402:	0089      	lsls	r1, r1, #2
 8002404:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002406:	7ee1      	ldrb	r1, [r4, #27]
 8002408:	2901      	cmp	r1, #1
 800240a:	d03e      	beq.n	800248a <HAL_ADC_Init+0x10a>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800240c:	20c2      	movs	r0, #194	@ 0xc2
 800240e:	69e1      	ldr	r1, [r4, #28]
 8002410:	30ff      	adds	r0, #255	@ 0xff
 8002412:	4281      	cmp	r1, r0
 8002414:	d002      	beq.n	800241c <HAL_ADC_Init+0x9c>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002416:	6a20      	ldr	r0, [r4, #32]
 8002418:	4301      	orrs	r1, r0
 800241a:	430b      	orrs	r3, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800241c:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800241e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002420:	4319      	orrs	r1, r3
 8002422:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002424:	2180      	movs	r1, #128	@ 0x80
 8002426:	0549      	lsls	r1, r1, #21
 8002428:	428d      	cmp	r5, r1
 800242a:	d025      	beq.n	8002478 <HAL_ADC_Init+0xf8>
 800242c:	1e69      	subs	r1, r5, #1
 800242e:	2906      	cmp	r1, #6
 8002430:	d922      	bls.n	8002478 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002432:	68d2      	ldr	r2, [r2, #12]
 8002434:	4923      	ldr	r1, [pc, #140]	@ (80024c4 <HAL_ADC_Init+0x144>)
 8002436:	400a      	ands	r2, r1
 8002438:	429a      	cmp	r2, r3
 800243a:	d02c      	beq.n	8002496 <HAL_ADC_Init+0x116>
      ADC_STATE_CLR_SET(hadc->State,
 800243c:	2212      	movs	r2, #18
 800243e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002440:	4393      	bics	r3, r2
 8002442:	3a02      	subs	r2, #2
 8002444:	4313      	orrs	r3, r2
 8002446:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002448:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800244a:	3a0f      	subs	r2, #15
 800244c:	4313      	orrs	r3, r2
 800244e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 8002450:	2001      	movs	r0, #1
}
 8002452:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002454:	2210      	movs	r2, #16
 8002456:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002458:	4313      	orrs	r3, r2
 800245a:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 800245c:	e7f8      	b.n	8002450 <HAL_ADC_Init+0xd0>
    hadc->Lock = HAL_UNLOCKED;
 800245e:	2234      	movs	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8002460:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8002462:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002464:	f7ff fcb2 	bl	8001dcc <HAL_ADC_MspInit>
 8002468:	e790      	b.n	800238c <HAL_ADC_Init+0xc>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800246a:	6811      	ldr	r1, [r2, #0]
 800246c:	420b      	tst	r3, r1
 800246e:	d1ac      	bne.n	80023ca <HAL_ADC_Init+0x4a>
 8002470:	68d3      	ldr	r3, [r2, #12]
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	d4a9      	bmi.n	80023ca <HAL_ADC_Init+0x4a>
 8002476:	e79c      	b.n	80023b2 <HAL_ADC_Init+0x32>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002478:	2107      	movs	r1, #7
 800247a:	6950      	ldr	r0, [r2, #20]
 800247c:	4388      	bics	r0, r1
 800247e:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002480:	6950      	ldr	r0, [r2, #20]
 8002482:	4029      	ands	r1, r5
 8002484:	4301      	orrs	r1, r0
 8002486:	6151      	str	r1, [r2, #20]
 8002488:	e7d3      	b.n	8002432 <HAL_ADC_Init+0xb2>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800248a:	2800      	cmp	r0, #0
 800248c:	d10d      	bne.n	80024aa <HAL_ADC_Init+0x12a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800248e:	2180      	movs	r1, #128	@ 0x80
 8002490:	0249      	lsls	r1, r1, #9
 8002492:	430b      	orrs	r3, r1
 8002494:	e7ba      	b.n	800240c <HAL_ADC_Init+0x8c>
      ADC_CLEAR_ERRORCODE(hadc);
 8002496:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002498:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800249a:	63e3      	str	r3, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800249c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80024a0:	4393      	bics	r3, r2
 80024a2:	3a02      	subs	r2, #2
 80024a4:	4313      	orrs	r3, r2
 80024a6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80024a8:	e7d3      	b.n	8002452 <HAL_ADC_Init+0xd2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024aa:	2520      	movs	r5, #32
 80024ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80024ae:	4328      	orrs	r0, r5
 80024b0:	63a0      	str	r0, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80024b4:	4301      	orrs	r1, r0
 80024b6:	63e1      	str	r1, [r4, #60]	@ 0x3c
 80024b8:	e7a8      	b.n	800240c <HAL_ADC_Init+0x8c>
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	fffffefd 	.word	0xfffffefd
 80024c0:	fffe0219 	.word	0xfffe0219
 80024c4:	833fffe7 	.word	0x833fffe7

080024c8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024c8:	6803      	ldr	r3, [r0, #0]
{
 80024ca:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024cc:	689a      	ldr	r2, [r3, #8]
{
 80024ce:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024d0:	0752      	lsls	r2, r2, #29
 80024d2:	d421      	bmi.n	8002518 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 80024d4:	2234      	movs	r2, #52	@ 0x34
 80024d6:	5c81      	ldrb	r1, [r0, r2]
 80024d8:	2901      	cmp	r1, #1
 80024da:	d01d      	beq.n	8002518 <HAL_ADC_Start+0x50>
 80024dc:	2101      	movs	r1, #1
 80024de:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80024e0:	7e42      	ldrb	r2, [r0, #25]
 80024e2:	2a01      	cmp	r2, #1
 80024e4:	d112      	bne.n	800250c <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 80024e6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80024e8:	4a0c      	ldr	r2, [pc, #48]	@ (800251c <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80024ea:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80024ec:	4011      	ands	r1, r2
 80024ee:	2280      	movs	r2, #128	@ 0x80
 80024f0:	0052      	lsls	r2, r2, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	63a2      	str	r2, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hadc);
 80024f6:	2134      	movs	r1, #52	@ 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 80024f8:	2200      	movs	r2, #0
 80024fa:	63e2      	str	r2, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hadc);
 80024fc:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024fe:	321c      	adds	r2, #28
 8002500:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	3930      	subs	r1, #48	@ 0x30
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
}
 800250a:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800250c:	f7ff fede 	bl	80022cc <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8002510:	2800      	cmp	r0, #0
 8002512:	d1fa      	bne.n	800250a <HAL_ADC_Start+0x42>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	e7e6      	b.n	80024e6 <HAL_ADC_Start+0x1e>
    __HAL_LOCK(hadc);
 8002518:	2002      	movs	r0, #2
 800251a:	e7f6      	b.n	800250a <HAL_ADC_Start+0x42>
 800251c:	fffff0fe 	.word	0xfffff0fe

08002520 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8002520:	2334      	movs	r3, #52	@ 0x34
{ 
 8002522:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8002524:	5cc2      	ldrb	r2, [r0, r3]
{ 
 8002526:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002528:	2a01      	cmp	r2, #1
 800252a:	d014      	beq.n	8002556 <HAL_ADC_Stop+0x36>
 800252c:	2501      	movs	r5, #1
 800252e:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002530:	f7ff fe9a 	bl	8002268 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8002534:	2800      	cmp	r0, #0
 8002536:	d003      	beq.n	8002540 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8002538:	2334      	movs	r3, #52	@ 0x34
 800253a:	2200      	movs	r2, #0
 800253c:	54e2      	strb	r2, [r4, r3]
}
 800253e:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8002540:	0020      	movs	r0, r4
 8002542:	f7ff fe4d 	bl	80021e0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8002546:	2800      	cmp	r0, #0
 8002548:	d1f6      	bne.n	8002538 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800254a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800254c:	4a03      	ldr	r2, [pc, #12]	@ (800255c <HAL_ADC_Stop+0x3c>)
 800254e:	4013      	ands	r3, r2
 8002550:	432b      	orrs	r3, r5
 8002552:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002554:	e7f0      	b.n	8002538 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8002556:	2002      	movs	r0, #2
 8002558:	e7f1      	b.n	800253e <HAL_ADC_Stop+0x1e>
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	fffffefe 	.word	0xfffffefe

08002560 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002560:	6803      	ldr	r3, [r0, #0]
 8002562:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 8002564:	4770      	bx	lr
 8002566:	46c0      	nop			@ (mov r8, r8)

08002568 <HAL_ADC_ConfigChannel>:
{
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256a:	46c6      	mov	lr, r8
  __IO uint32_t wait_loop_index = 0U;
 800256c:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 800256e:	2234      	movs	r2, #52	@ 0x34
{
 8002570:	b500      	push	{lr}
 8002572:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002574:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002576:	5c83      	ldrb	r3, [r0, r2]
{
 8002578:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800257a:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 800257c:	2b01      	cmp	r3, #1
 800257e:	d050      	beq.n	8002622 <HAL_ADC_ConfigChannel+0xba>
 8002580:	2301      	movs	r3, #1
 8002582:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002584:	6802      	ldr	r2, [r0, #0]
 8002586:	6890      	ldr	r0, [r2, #8]
 8002588:	0740      	lsls	r0, r0, #29
 800258a:	d50b      	bpl.n	80025a4 <HAL_ADC_ConfigChannel+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800258e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002590:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002592:	4313      	orrs	r3, r2
 8002594:	63a3      	str	r3, [r4, #56]	@ 0x38
  __HAL_UNLOCK(hadc);
 8002596:	2334      	movs	r3, #52	@ 0x34
 8002598:	2200      	movs	r2, #0
 800259a:	54e2      	strb	r2, [r4, r3]
}
 800259c:	b002      	add	sp, #8
 800259e:	bc80      	pop	{r7}
 80025a0:	46b8      	mov	r8, r7
 80025a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025a4:	6808      	ldr	r0, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 80025a6:	4f2b      	ldr	r7, [pc, #172]	@ (8002654 <HAL_ADC_ConfigChannel+0xec>)
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025a8:	0006      	movs	r6, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 80025aa:	46b8      	mov	r8, r7
 80025ac:	684f      	ldr	r7, [r1, #4]
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025ae:	4083      	lsls	r3, r0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025b0:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 80025b2:	4547      	cmp	r7, r8
 80025b4:	d024      	beq.n	8002600 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025b6:	6a97      	ldr	r7, [r2, #40]	@ 0x28
 80025b8:	433b      	orrs	r3, r7
 80025ba:	6293      	str	r3, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025bc:	2380      	movs	r3, #128	@ 0x80
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	429d      	cmp	r5, r3
 80025c2:	d00f      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x7c>
 80025c4:	3d01      	subs	r5, #1
 80025c6:	2d06      	cmp	r5, #6
 80025c8:	d90c      	bls.n	80025e4 <HAL_ADC_ConfigChannel+0x7c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80025ca:	2307      	movs	r3, #7
 80025cc:	688d      	ldr	r5, [r1, #8]
 80025ce:	6951      	ldr	r1, [r2, #20]
 80025d0:	4019      	ands	r1, r3
 80025d2:	428d      	cmp	r5, r1
 80025d4:	d006      	beq.n	80025e4 <HAL_ADC_ConfigChannel+0x7c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80025d6:	6951      	ldr	r1, [r2, #20]
 80025d8:	4399      	bics	r1, r3
 80025da:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80025dc:	6951      	ldr	r1, [r2, #20]
 80025de:	402b      	ands	r3, r5
 80025e0:	430b      	orrs	r3, r1
 80025e2:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025e4:	2e01      	cmp	r6, #1
 80025e6:	d901      	bls.n	80025ec <HAL_ADC_ConfigChannel+0x84>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e8:	2000      	movs	r0, #0
 80025ea:	e7d4      	b.n	8002596 <HAL_ADC_ConfigChannel+0x2e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80025ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <HAL_ADC_ConfigChannel+0xf0>)
 80025ee:	2280      	movs	r2, #128	@ 0x80
 80025f0:	6819      	ldr	r1, [r3, #0]
 80025f2:	2810      	cmp	r0, #16
 80025f4:	d017      	beq.n	8002626 <HAL_ADC_ConfigChannel+0xbe>
 80025f6:	03d2      	lsls	r2, r2, #15
 80025f8:	430a      	orrs	r2, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fa:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80025fc:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025fe:	e7ca      	b.n	8002596 <HAL_ADC_ConfigChannel+0x2e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002600:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002602:	4399      	bics	r1, r3
 8002604:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002606:	2e01      	cmp	r6, #1
 8002608:	d8ee      	bhi.n	80025e8 <HAL_ADC_ConfigChannel+0x80>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800260a:	1e71      	subs	r1, r6, #1
 800260c:	418e      	sbcs	r6, r1
 800260e:	4913      	ldr	r1, [pc, #76]	@ (800265c <HAL_ADC_ConfigChannel+0xf4>)
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_ADC_ConfigChannel+0xf0>)
 8002612:	468c      	mov	ip, r1
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	05b6      	lsls	r6, r6, #22
 8002618:	4466      	add	r6, ip
 800261a:	4016      	ands	r6, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261c:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800261e:	601e      	str	r6, [r3, #0]
 8002620:	e7b9      	b.n	8002596 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8002622:	2002      	movs	r0, #2
 8002624:	e7ba      	b.n	800259c <HAL_ADC_ConfigChannel+0x34>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002626:	0412      	lsls	r2, r2, #16
 8002628:	430a      	orrs	r2, r1
 800262a:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800262c:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <HAL_ADC_ConfigChannel+0xf8>)
 800262e:	490d      	ldr	r1, [pc, #52]	@ (8002664 <HAL_ADC_ConfigChannel+0xfc>)
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	f7fd fd7b 	bl	800012c <__udivsi3>
 8002636:	0083      	lsls	r3, r0, #2
 8002638:	181b      	adds	r3, r3, r0
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800263e:	9b01      	ldr	r3, [sp, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0d1      	beq.n	80025e8 <HAL_ADC_ConfigChannel+0x80>
            wait_loop_index--;
 8002644:	9b01      	ldr	r3, [sp, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800264a:	9b01      	ldr	r3, [sp, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f9      	bne.n	8002644 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002650:	2000      	movs	r0, #0
 8002652:	e7a0      	b.n	8002596 <HAL_ADC_ConfigChannel+0x2e>
 8002654:	00001001 	.word	0x00001001
 8002658:	40012708 	.word	0x40012708
 800265c:	ff7fffff 	.word	0xff7fffff
 8002660:	20000014 	.word	0x20000014
 8002664:	000f4240 	.word	0x000f4240

08002668 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002668:	22ff      	movs	r2, #255	@ 0xff
 800266a:	2303      	movs	r3, #3
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800266c:	b510      	push	{r4, lr}
 800266e:	0014      	movs	r4, r2
 8002670:	4003      	ands	r3, r0
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002676:	0189      	lsls	r1, r1, #6
 8002678:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800267a:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800267c:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 800267e:	2800      	cmp	r0, #0
 8002680:	db0b      	blt.n	800269a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002682:	4b0c      	ldr	r3, [pc, #48]	@ (80026b4 <HAL_NVIC_SetPriority+0x4c>)
 8002684:	21c0      	movs	r1, #192	@ 0xc0
 8002686:	469c      	mov	ip, r3
 8002688:	0880      	lsrs	r0, r0, #2
 800268a:	0080      	lsls	r0, r0, #2
 800268c:	4460      	add	r0, ip
 800268e:	0089      	lsls	r1, r1, #2
 8002690:	5843      	ldr	r3, [r0, r1]
 8002692:	4023      	ands	r3, r4
 8002694:	4313      	orrs	r3, r2
 8002696:	5043      	str	r3, [r0, r1]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002698:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800269a:	230f      	movs	r3, #15
 800269c:	4906      	ldr	r1, [pc, #24]	@ (80026b8 <HAL_NVIC_SetPriority+0x50>)
 800269e:	4003      	ands	r3, r0
 80026a0:	468c      	mov	ip, r1
 80026a2:	3b08      	subs	r3, #8
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4463      	add	r3, ip
 80026aa:	69d9      	ldr	r1, [r3, #28]
 80026ac:	400c      	ands	r4, r1
 80026ae:	4314      	orrs	r4, r2
 80026b0:	61dc      	str	r4, [r3, #28]
 80026b2:	e7f1      	b.n	8002698 <HAL_NVIC_SetPriority+0x30>
 80026b4:	e000e100 	.word	0xe000e100
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026bc:	2800      	cmp	r0, #0
 80026be:	db05      	blt.n	80026cc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c0:	221f      	movs	r2, #31
 80026c2:	2301      	movs	r3, #1
 80026c4:	4002      	ands	r2, r0
 80026c6:	4093      	lsls	r3, r2
 80026c8:	4a01      	ldr	r2, [pc, #4]	@ (80026d0 <HAL_NVIC_EnableIRQ+0x14>)
 80026ca:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026cc:	4770      	bx	lr
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	e000e100 	.word	0xe000e100

080026d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	1e43      	subs	r3, r0, #1
 80026d8:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d20e      	bcs.n	80026fe <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026e0:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e2:	4a07      	ldr	r2, [pc, #28]	@ (8002700 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026e4:	4807      	ldr	r0, [pc, #28]	@ (8002704 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026e8:	6a03      	ldr	r3, [r0, #32]
 80026ea:	0609      	lsls	r1, r1, #24
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	0a1b      	lsrs	r3, r3, #8
 80026f0:	430b      	orrs	r3, r1
 80026f2:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f6:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fa:	3307      	adds	r3, #7
 80026fc:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80026fe:	4770      	bx	lr
 8002700:	e000e010 	.word	0xe000e010
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800270a:	46de      	mov	lr, fp
 800270c:	4657      	mov	r7, sl
 800270e:	464e      	mov	r6, r9
 8002710:	4645      	mov	r5, r8
 8002712:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002714:	680c      	ldr	r4, [r1, #0]
  uint32_t position = 0x00u;
 8002716:	2300      	movs	r3, #0
{
 8002718:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271a:	2c00      	cmp	r4, #0
 800271c:	d072      	beq.n	8002804 <HAL_GPIO_Init+0xfc>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271e:	4a75      	ldr	r2, [pc, #468]	@ (80028f4 <HAL_GPIO_Init+0x1ec>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002720:	4e75      	ldr	r6, [pc, #468]	@ (80028f8 <HAL_GPIO_Init+0x1f0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	4693      	mov	fp, r2
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002724:	9102      	str	r1, [sp, #8]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002726:	2201      	movs	r2, #1
 8002728:	409a      	lsls	r2, r3
 800272a:	4694      	mov	ip, r2
 800272c:	4022      	ands	r2, r4
 800272e:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8002730:	4662      	mov	r2, ip
 8002732:	4214      	tst	r4, r2
 8002734:	d062      	beq.n	80027fc <HAL_GPIO_Init+0xf4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002736:	9902      	ldr	r1, [sp, #8]
 8002738:	005d      	lsls	r5, r3, #1
 800273a:	684a      	ldr	r2, [r1, #4]
 800273c:	4692      	mov	sl, r2
 800273e:	2203      	movs	r2, #3
 8002740:	4651      	mov	r1, sl
 8002742:	400a      	ands	r2, r1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002744:	2103      	movs	r1, #3
 8002746:	40a9      	lsls	r1, r5
 8002748:	43c9      	mvns	r1, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800274a:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800274c:	9101      	str	r1, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800274e:	2f01      	cmp	r7, #1
 8002750:	d95f      	bls.n	8002812 <HAL_GPIO_Init+0x10a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002752:	2a03      	cmp	r2, #3
 8002754:	d000      	beq.n	8002758 <HAL_GPIO_Init+0x50>
 8002756:	e0b3      	b.n	80028c0 <HAL_GPIO_Init+0x1b8>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002758:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 800275a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800275c:	9901      	ldr	r1, [sp, #4]
 800275e:	4039      	ands	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002760:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002762:	21c0      	movs	r1, #192	@ 0xc0
      GPIOx->MODER = temp;
 8002764:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002766:	4652      	mov	r2, sl
 8002768:	0289      	lsls	r1, r1, #10
 800276a:	420a      	tst	r2, r1
 800276c:	d046      	beq.n	80027fc <HAL_GPIO_Init+0xf4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	465a      	mov	r2, fp
 8002770:	2101      	movs	r1, #1
 8002772:	465d      	mov	r5, fp
 8002774:	6992      	ldr	r2, [r2, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002776:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002778:	430a      	orrs	r2, r1
 800277a:	61aa      	str	r2, [r5, #24]
 800277c:	69aa      	ldr	r2, [r5, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800277e:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002780:	400a      	ands	r2, r1
 8002782:	495e      	ldr	r1, [pc, #376]	@ (80028fc <HAL_GPIO_Init+0x1f4>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002784:	401d      	ands	r5, r3
 8002786:	468c      	mov	ip, r1
 8002788:	00ad      	lsls	r5, r5, #2
 800278a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278c:	9205      	str	r2, [sp, #20]
 800278e:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002790:	089a      	lsrs	r2, r3, #2
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	4462      	add	r2, ip
 8002796:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002798:	43b9      	bics	r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800279a:	2790      	movs	r7, #144	@ 0x90
 800279c:	05ff      	lsls	r7, r7, #23
 800279e:	42b8      	cmp	r0, r7
 80027a0:	d00e      	beq.n	80027c0 <HAL_GPIO_Init+0xb8>
 80027a2:	4f57      	ldr	r7, [pc, #348]	@ (8002900 <HAL_GPIO_Init+0x1f8>)
 80027a4:	42b8      	cmp	r0, r7
 80027a6:	d100      	bne.n	80027aa <HAL_GPIO_Init+0xa2>
 80027a8:	e09b      	b.n	80028e2 <HAL_GPIO_Init+0x1da>
 80027aa:	4f56      	ldr	r7, [pc, #344]	@ (8002904 <HAL_GPIO_Init+0x1fc>)
 80027ac:	42b8      	cmp	r0, r7
 80027ae:	d100      	bne.n	80027b2 <HAL_GPIO_Init+0xaa>
 80027b0:	e09b      	b.n	80028ea <HAL_GPIO_Init+0x1e2>
 80027b2:	4f55      	ldr	r7, [pc, #340]	@ (8002908 <HAL_GPIO_Init+0x200>)
 80027b4:	42b8      	cmp	r0, r7
 80027b6:	d100      	bne.n	80027ba <HAL_GPIO_Init+0xb2>
 80027b8:	e08f      	b.n	80028da <HAL_GPIO_Init+0x1d2>
 80027ba:	2705      	movs	r7, #5
 80027bc:	40af      	lsls	r7, r5
 80027be:	4339      	orrs	r1, r7
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027c0:	2780      	movs	r7, #128	@ 0x80
 80027c2:	4655      	mov	r5, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027c4:	6091      	str	r1, [r2, #8]
        temp &= ~(iocurrent);
 80027c6:	9900      	ldr	r1, [sp, #0]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027c8:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 80027ca:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR;
 80027cc:	68b2      	ldr	r2, [r6, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ce:	423d      	tst	r5, r7
 80027d0:	d000      	beq.n	80027d4 <HAL_GPIO_Init+0xcc>
 80027d2:	e072      	b.n	80028ba <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 80027d4:	400a      	ands	r2, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027d6:	4655      	mov	r5, sl
        EXTI->RTSR = temp;
 80027d8:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 80027da:	68f2      	ldr	r2, [r6, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027dc:	02ad      	lsls	r5, r5, #10
 80027de:	d469      	bmi.n	80028b4 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 80027e0:	400a      	ands	r2, r1
        EXTI->FTSR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027e2:	4655      	mov	r5, sl
        EXTI->FTSR = temp;
 80027e4:	60f2      	str	r2, [r6, #12]
        temp = EXTI->EMR;
 80027e6:	6872      	ldr	r2, [r6, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027e8:	03ad      	lsls	r5, r5, #14
 80027ea:	d460      	bmi.n	80028ae <HAL_GPIO_Init+0x1a6>
        temp &= ~(iocurrent);
 80027ec:	400a      	ands	r2, r1
        }
        EXTI->EMR = temp;

        temp = EXTI->IMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027ee:	4655      	mov	r5, sl
        EXTI->EMR = temp;
 80027f0:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 80027f2:	6832      	ldr	r2, [r6, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027f4:	03ed      	lsls	r5, r5, #15
 80027f6:	d455      	bmi.n	80028a4 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 80027f8:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80027fa:	6032      	str	r2, [r6, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fc:	0022      	movs	r2, r4
      }
    }

    position++;
 80027fe:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002800:	40da      	lsrs	r2, r3
 8002802:	d190      	bne.n	8002726 <HAL_GPIO_Init+0x1e>
  } 
}
 8002804:	b007      	add	sp, #28
 8002806:	bcf0      	pop	{r4, r5, r6, r7}
 8002808:	46bb      	mov	fp, r7
 800280a:	46b2      	mov	sl, r6
 800280c:	46a9      	mov	r9, r5
 800280e:	46a0      	mov	r8, r4
 8002810:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8002812:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002814:	000f      	movs	r7, r1
 8002816:	9901      	ldr	r1, [sp, #4]
 8002818:	400f      	ands	r7, r1
 800281a:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800281c:	9f02      	ldr	r7, [sp, #8]
 800281e:	68f9      	ldr	r1, [r7, #12]
 8002820:	000f      	movs	r7, r1
 8002822:	40af      	lsls	r7, r5
 8002824:	46b8      	mov	r8, r7
 8002826:	464f      	mov	r7, r9
 8002828:	4641      	mov	r1, r8
 800282a:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = temp;
 800282c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800282e:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002830:	000f      	movs	r7, r1
 8002832:	4661      	mov	r1, ip
 8002834:	438f      	bics	r7, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002836:	4651      	mov	r1, sl
 8002838:	0909      	lsrs	r1, r1, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800283a:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800283c:	000f      	movs	r7, r1
 800283e:	2101      	movs	r1, #1
 8002840:	400f      	ands	r7, r1
 8002842:	409f      	lsls	r7, r3
 8002844:	46bc      	mov	ip, r7
 8002846:	4647      	mov	r7, r8
 8002848:	4661      	mov	r1, ip
 800284a:	430f      	orrs	r7, r1
        GPIOx->OTYPER = temp;
 800284c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800284e:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002850:	000f      	movs	r7, r1
 8002852:	9901      	ldr	r1, [sp, #4]
 8002854:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002856:	9902      	ldr	r1, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002858:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800285a:	6889      	ldr	r1, [r1, #8]
 800285c:	000f      	movs	r7, r1
 800285e:	40af      	lsls	r7, r5
 8002860:	46bc      	mov	ip, r7
 8002862:	4647      	mov	r7, r8
 8002864:	4661      	mov	r1, ip
 8002866:	430f      	orrs	r7, r1
        GPIOx->PUPDR = temp;
 8002868:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800286a:	2a02      	cmp	r2, #2
 800286c:	d000      	beq.n	8002870 <HAL_GPIO_Init+0x168>
 800286e:	e773      	b.n	8002758 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 8002870:	08d9      	lsrs	r1, r3, #3
 8002872:	0089      	lsls	r1, r1, #2
 8002874:	468c      	mov	ip, r1
 8002876:	4484      	add	ip, r0
 8002878:	4661      	mov	r1, ip
 800287a:	6a0f      	ldr	r7, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800287c:	2107      	movs	r1, #7
 800287e:	4019      	ands	r1, r3
 8002880:	0089      	lsls	r1, r1, #2
 8002882:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8002884:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002886:	210f      	movs	r1, #15
 8002888:	4647      	mov	r7, r8
 800288a:	40b9      	lsls	r1, r7
 800288c:	9f03      	ldr	r7, [sp, #12]
 800288e:	438f      	bics	r7, r1
 8002890:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002892:	4647      	mov	r7, r8
 8002894:	9902      	ldr	r1, [sp, #8]
 8002896:	6909      	ldr	r1, [r1, #16]
 8002898:	40b9      	lsls	r1, r7
 800289a:	9f03      	ldr	r7, [sp, #12]
 800289c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 800289e:	4661      	mov	r1, ip
 80028a0:	620f      	str	r7, [r1, #32]
 80028a2:	e759      	b.n	8002758 <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 80028a4:	9900      	ldr	r1, [sp, #0]
 80028a6:	4311      	orrs	r1, r2
 80028a8:	000a      	movs	r2, r1
        EXTI->IMR = temp;
 80028aa:	6032      	str	r2, [r6, #0]
 80028ac:	e7a6      	b.n	80027fc <HAL_GPIO_Init+0xf4>
          temp |= iocurrent;
 80028ae:	9d00      	ldr	r5, [sp, #0]
 80028b0:	432a      	orrs	r2, r5
 80028b2:	e79c      	b.n	80027ee <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 80028b4:	9d00      	ldr	r5, [sp, #0]
 80028b6:	432a      	orrs	r2, r5
 80028b8:	e793      	b.n	80027e2 <HAL_GPIO_Init+0xda>
          temp |= iocurrent;
 80028ba:	9d00      	ldr	r5, [sp, #0]
 80028bc:	432a      	orrs	r2, r5
 80028be:	e78a      	b.n	80027d6 <HAL_GPIO_Init+0xce>
 80028c0:	000f      	movs	r7, r1
        temp = GPIOx->PUPDR;
 80028c2:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028c4:	4039      	ands	r1, r7
 80028c6:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028c8:	9902      	ldr	r1, [sp, #8]
 80028ca:	6889      	ldr	r1, [r1, #8]
 80028cc:	40a9      	lsls	r1, r5
 80028ce:	468c      	mov	ip, r1
 80028d0:	4641      	mov	r1, r8
 80028d2:	4667      	mov	r7, ip
 80028d4:	4339      	orrs	r1, r7
        GPIOx->PUPDR = temp;
 80028d6:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d8:	e73e      	b.n	8002758 <HAL_GPIO_Init+0x50>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028da:	2703      	movs	r7, #3
 80028dc:	40af      	lsls	r7, r5
 80028de:	4339      	orrs	r1, r7
 80028e0:	e76e      	b.n	80027c0 <HAL_GPIO_Init+0xb8>
 80028e2:	2701      	movs	r7, #1
 80028e4:	40af      	lsls	r7, r5
 80028e6:	4339      	orrs	r1, r7
 80028e8:	e76a      	b.n	80027c0 <HAL_GPIO_Init+0xb8>
 80028ea:	2702      	movs	r7, #2
 80028ec:	40af      	lsls	r7, r5
 80028ee:	4339      	orrs	r1, r7
 80028f0:	e766      	b.n	80027c0 <HAL_GPIO_Init+0xb8>
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40010400 	.word	0x40010400
 80028fc:	40010000 	.word	0x40010000
 8002900:	48000400 	.word	0x48000400
 8002904:	48000800 	.word	0x48000800
 8002908:	48000c00 	.word	0x48000c00

0800290c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800290c:	6900      	ldr	r0, [r0, #16]
 800290e:	4008      	ands	r0, r1
 8002910:	1e43      	subs	r3, r0, #1
 8002912:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002914:	b2c0      	uxtb	r0, r0
  }
 8002916:	4770      	bx	lr

08002918 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002918:	2a00      	cmp	r2, #0
 800291a:	d001      	beq.n	8002920 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800291c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800291e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002920:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002922:	e7fc      	b.n	800291e <HAL_GPIO_WritePin+0x6>

08002924 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002924:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002926:	0013      	movs	r3, r2
 8002928:	400b      	ands	r3, r1
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	4391      	bics	r1, r2
 800292e:	430b      	orrs	r3, r1
 8002930:	6183      	str	r3, [r0, #24]
}
 8002932:	4770      	bx	lr

08002934 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8002936:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002938:	695a      	ldr	r2, [r3, #20]
 800293a:	4210      	tst	r0, r2
 800293c:	d100      	bne.n	8002940 <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800293e:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002940:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002942:	f7fe fbf1 	bl	8001128 <HAL_GPIO_EXTI_Callback>
}
 8002946:	e7fa      	b.n	800293e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002948:	40010400 	.word	0x40010400

0800294c <I2C_WaitOnFlagUntilTimeout.constprop.0>:
  * @param  Status The actual Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 800294c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294e:	4657      	mov	r7, sl
 8002950:	4645      	mov	r5, r8
 8002952:	46de      	mov	lr, fp
 8002954:	464e      	mov	r6, r9
 8002956:	b5e0      	push	{r5, r6, r7, lr}
 8002958:	b083      	sub	sp, #12
 800295a:	9101      	str	r1, [sp, #4]
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800295c:	2110      	movs	r1, #16
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800295e:	6803      	ldr	r3, [r0, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002960:	4688      	mov	r8, r1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002962:	699a      	ldr	r2, [r3, #24]
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
          tmp2 = hi2c->Mode;
 8002964:	3132      	adds	r1, #50	@ 0x32
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 8002966:	0004      	movs	r4, r0
          tmp2 = hi2c->Mode;
 8002968:	468a      	mov	sl, r1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800296a:	0412      	lsls	r2, r2, #16
 800296c:	d400      	bmi.n	8002970 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x24>
 800296e:	e096      	b.n	8002a9e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x152>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002970:	4642      	mov	r2, r8
 8002972:	4640      	mov	r0, r8
  uint32_t itflag   = hi2c->Instance->ISR;
 8002974:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2500      	movs	r5, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002978:	400a      	ands	r2, r1
 800297a:	4208      	tst	r0, r1
 800297c:	d041      	beq.n	8002a02 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xb6>
  uint32_t error_code = 0;
 800297e:	2200      	movs	r2, #0
 8002980:	4693      	mov	fp, r2

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002982:	2280      	movs	r2, #128	@ 0x80
 8002984:	0212      	lsls	r2, r2, #8
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2700      	movs	r7, #0
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002988:	4691      	mov	r9, r2
  uint32_t tickstart = Tickstart;
 800298a:	9e01      	ldr	r6, [sp, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298c:	61d8      	str	r0, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800298e:	3520      	adds	r5, #32
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	4215      	tst	r5, r2
 8002994:	d12d      	bne.n	80029f2 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xa6>
 8002996:	2f00      	cmp	r7, #0
 8002998:	d12e      	bne.n	80029f8 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xac>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7ff fc09 	bl	80021b0 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800299e:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029a0:	1b80      	subs	r0, r0, r6
 80029a2:	2819      	cmp	r0, #25
 80029a4:	d9f4      	bls.n	8002990 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x44>
          tmp2 = hi2c->Mode;
 80029a6:	4652      	mov	r2, sl
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029a8:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80029aa:	5ca2      	ldrb	r2, [r4, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029ac:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029b2:	464a      	mov	r2, r9
 80029b4:	4211      	tst	r1, r2
 80029b6:	d00d      	beq.n	80029d4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029b8:	2180      	movs	r1, #128	@ 0x80
 80029ba:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029bc:	4208      	tst	r0, r1
 80029be:	d109      	bne.n	80029d4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
              (tmp1 != I2C_CR2_STOP) && \
 80029c0:	4662      	mov	r2, ip
 80029c2:	2a20      	cmp	r2, #32
 80029c4:	d006      	beq.n	80029d4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4311      	orrs	r1, r2
 80029ca:	6059      	str	r1, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029cc:	f7ff fbf0 	bl	80021b0 <HAL_GetTick>
 80029d0:	0006      	movs	r6, r0
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	4215      	tst	r5, r2
 80029d8:	d1da      	bne.n	8002990 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x44>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029da:	f7ff fbe9 	bl	80021b0 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029de:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029e0:	1b80      	subs	r0, r0, r6
 80029e2:	2819      	cmp	r0, #25
 80029e4:	d9f6      	bls.n	80029d4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	2220      	movs	r2, #32
 80029e8:	4693      	mov	fp, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ea:	699a      	ldr	r2, [r3, #24]

              status = HAL_ERROR;
 80029ec:	2701      	movs	r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029ee:	4215      	tst	r5, r2
 80029f0:	d0d1      	beq.n	8002996 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x4a>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029f2:	2f00      	cmp	r7, #0
 80029f4:	d100      	bne.n	80029f8 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xac>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f6:	61dd      	str	r5, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029f8:	2204      	movs	r2, #4
 80029fa:	4659      	mov	r1, fp
 80029fc:	4311      	orrs	r1, r2
 80029fe:	000a      	movs	r2, r1

    status = HAL_ERROR;
 8002a00:	2501      	movs	r5, #1
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a02:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002a04:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a06:	0040      	lsls	r0, r0, #1
 8002a08:	4201      	tst	r1, r0
 8002a0a:	d034      	beq.n	8002a76 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x12a>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a0c:	2501      	movs	r5, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a0e:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002a10:	432a      	orrs	r2, r5

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a12:	0548      	lsls	r0, r1, #21
 8002a14:	d504      	bpl.n	8002a20 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd4>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a16:	2008      	movs	r0, #8
 8002a18:	4302      	orrs	r2, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a1a:	2080      	movs	r0, #128	@ 0x80
 8002a1c:	00c0      	lsls	r0, r0, #3
 8002a1e:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a20:	0589      	lsls	r1, r1, #22
 8002a22:	d504      	bpl.n	8002a2e <I2C_WaitOnFlagUntilTimeout.constprop.0+0xe2>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a24:	2102      	movs	r1, #2
 8002a26:	430a      	orrs	r2, r1

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a28:	31ff      	adds	r1, #255	@ 0xff
 8002a2a:	31ff      	adds	r1, #255	@ 0xff
 8002a2c:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002a2e:	6999      	ldr	r1, [r3, #24]
 8002a30:	0789      	lsls	r1, r1, #30
 8002a32:	d501      	bpl.n	8002a38 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xec>
    hi2c->Instance->TXDR = 0x00U;
 8002a34:	2100      	movs	r1, #0
 8002a36:	6299      	str	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	6998      	ldr	r0, [r3, #24]
 8002a3c:	4201      	tst	r1, r0
 8002a3e:	d102      	bne.n	8002a46 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a40:	6998      	ldr	r0, [r3, #24]
 8002a42:	4301      	orrs	r1, r0
 8002a44:	6199      	str	r1, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	481a      	ldr	r0, [pc, #104]	@ (8002ab4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x168>)
 8002a4a:	4001      	ands	r1, r0
 8002a4c:	6059      	str	r1, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002a4e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002a50:	4313      	orrs	r3, r2
 8002a52:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	2220      	movs	r2, #32
 8002a56:	2341      	movs	r3, #65	@ 0x41
 8002a58:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	54e2      	strb	r2, [r4, r3]
          __HAL_UNLOCK(hi2c);
 8002a60:	2340      	movs	r3, #64	@ 0x40
 8002a62:	2200      	movs	r2, #0
      return HAL_ERROR;
 8002a64:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8002a66:	54e2      	strb	r2, [r4, r3]
}
 8002a68:	b003      	add	sp, #12
 8002a6a:	bcf0      	pop	{r4, r5, r6, r7}
 8002a6c:	46bb      	mov	fp, r7
 8002a6e:	46b2      	mov	sl, r6
 8002a70:	46a9      	mov	r9, r5
 8002a72:	46a0      	mov	r8, r4
 8002a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a76:	0548      	lsls	r0, r1, #21
 8002a78:	d4cd      	bmi.n	8002a16 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xca>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a7a:	0589      	lsls	r1, r1, #22
 8002a7c:	d4d2      	bmi.n	8002a24 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd8>
  if (status != HAL_OK)
 8002a7e:	2d00      	cmp	r5, #0
 8002a80:	d1d5      	bne.n	8002a2e <I2C_WaitOnFlagUntilTimeout.constprop.0+0xe2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7ff fb95 	bl	80021b0 <HAL_GetTick>
 8002a86:	9b01      	ldr	r3, [sp, #4]
 8002a88:	1ac0      	subs	r0, r0, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a8a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8c:	2819      	cmp	r0, #25
 8002a8e:	d902      	bls.n	8002a96 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x14a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	0412      	lsls	r2, r2, #16
 8002a94:	d405      	bmi.n	8002aa2 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x156>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a96:	699a      	ldr	r2, [r3, #24]
 8002a98:	0412      	lsls	r2, r2, #16
 8002a9a:	d500      	bpl.n	8002a9e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x152>
 8002a9c:	e768      	b.n	8002970 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x24>
  return HAL_OK;
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e7e2      	b.n	8002a68 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x11c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	2341      	movs	r3, #65	@ 0x41
 8002aac:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aae:	3301      	adds	r3, #1
 8002ab0:	54e5      	strb	r5, [r4, r3]
          return HAL_ERROR;
 8002ab2:	e7d5      	b.n	8002a60 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x114>
 8002ab4:	fe00e800 	.word	0xfe00e800

08002ab8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aba:	4657      	mov	r7, sl
 8002abc:	464e      	mov	r6, r9
 8002abe:	46de      	mov	lr, fp
 8002ac0:	4645      	mov	r5, r8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ac2:	2410      	movs	r4, #16
{
 8002ac4:	b5e0      	push	{r5, r6, r7, lr}
 8002ac6:	0006      	movs	r6, r0
 8002ac8:	000f      	movs	r7, r1
 8002aca:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002acc:	6803      	ldr	r3, [r0, #0]
 8002ace:	9201      	str	r2, [sp, #4]
 8002ad0:	2502      	movs	r5, #2
 8002ad2:	46b3      	mov	fp, r6
 8002ad4:	002a      	movs	r2, r5
 8002ad6:	6999      	ldr	r1, [r3, #24]
 8002ad8:	400a      	ands	r2, r1
 8002ada:	420d      	tst	r5, r1
 8002adc:	d000      	beq.n	8002ae0 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 8002ade:	e072      	b.n	8002bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x10e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ae0:	0021      	movs	r1, r4
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ae2:	6998      	ldr	r0, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae4:	2600      	movs	r6, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ae6:	4001      	ands	r1, r0
 8002ae8:	4204      	tst	r4, r0
 8002aea:	d00b      	beq.n	8002b04 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aec:	61dc      	str	r4, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002aee:	1c79      	adds	r1, r7, #1
 8002af0:	d16d      	bne.n	8002bce <I2C_WaitOnTXISFlagUntilTimeout+0x116>
 8002af2:	2020      	movs	r0, #32
 8002af4:	6999      	ldr	r1, [r3, #24]
 8002af6:	4208      	tst	r0, r1
 8002af8:	d0fc      	beq.n	8002af4 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002afa:	2120      	movs	r1, #32
 8002afc:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002afe:	2104      	movs	r1, #4
    status = HAL_ERROR;
 8002b00:	2601      	movs	r6, #1
    error_code |= HAL_I2C_ERROR_AF;
 8002b02:	4311      	orrs	r1, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b04:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002b06:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b08:	0040      	lsls	r0, r0, #1
 8002b0a:	4202      	tst	r2, r0
 8002b0c:	d035      	beq.n	8002b7a <I2C_WaitOnTXISFlagUntilTimeout+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 8002b0e:	2401      	movs	r4, #1
 8002b10:	465e      	mov	r6, fp
 8002b12:	4321      	orrs	r1, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b14:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b16:	0550      	lsls	r0, r2, #21
 8002b18:	d504      	bpl.n	8002b24 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
    error_code |= HAL_I2C_ERROR_OVR;
 8002b1a:	2008      	movs	r0, #8
 8002b1c:	4301      	orrs	r1, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b1e:	2080      	movs	r0, #128	@ 0x80
 8002b20:	00c0      	lsls	r0, r0, #3
 8002b22:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b24:	0592      	lsls	r2, r2, #22
 8002b26:	d504      	bpl.n	8002b32 <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b28:	2202      	movs	r2, #2
 8002b2a:	4311      	orrs	r1, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b2c:	32ff      	adds	r2, #255	@ 0xff
 8002b2e:	32ff      	adds	r2, #255	@ 0xff
 8002b30:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	0792      	lsls	r2, r2, #30
 8002b36:	d501      	bpl.n	8002b3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
 8002b38:	2200      	movs	r2, #0
 8002b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	6998      	ldr	r0, [r3, #24]
 8002b40:	4202      	tst	r2, r0
 8002b42:	d102      	bne.n	8002b4a <I2C_WaitOnTXISFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b44:	6998      	ldr	r0, [r3, #24]
 8002b46:	4302      	orrs	r2, r0
 8002b48:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	4851      	ldr	r0, [pc, #324]	@ (8002c94 <I2C_WaitOnTXISFlagUntilTimeout+0x1dc>)
 8002b4e:	4002      	ands	r2, r0
 8002b50:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002b52:	6c73      	ldr	r3, [r6, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b54:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002b56:	430b      	orrs	r3, r1
 8002b58:	6473      	str	r3, [r6, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	2341      	movs	r3, #65	@ 0x41
 8002b5c:	54f2      	strb	r2, [r6, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5e:	2200      	movs	r2, #0
 8002b60:	3301      	adds	r3, #1
 8002b62:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8002b64:	2340      	movs	r3, #64	@ 0x40
 8002b66:	2200      	movs	r2, #0
      return HAL_ERROR;
 8002b68:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8002b6a:	54f2      	strb	r2, [r6, r3]
}
 8002b6c:	b003      	add	sp, #12
 8002b6e:	bcf0      	pop	{r4, r5, r6, r7}
 8002b70:	46bb      	mov	fp, r7
 8002b72:	46b2      	mov	sl, r6
 8002b74:	46a9      	mov	r9, r5
 8002b76:	46a0      	mov	r8, r4
 8002b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b7a:	0550      	lsls	r0, r2, #21
 8002b7c:	d501      	bpl.n	8002b82 <I2C_WaitOnTXISFlagUntilTimeout+0xca>
 8002b7e:	465e      	mov	r6, fp
 8002b80:	e7cb      	b.n	8002b1a <I2C_WaitOnTXISFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b82:	0592      	lsls	r2, r2, #22
 8002b84:	d501      	bpl.n	8002b8a <I2C_WaitOnTXISFlagUntilTimeout+0xd2>
 8002b86:	465e      	mov	r6, fp
 8002b88:	e7ce      	b.n	8002b28 <I2C_WaitOnTXISFlagUntilTimeout+0x70>
  if (status != HAL_OK)
 8002b8a:	2e00      	cmp	r6, #0
 8002b8c:	d11d      	bne.n	8002bca <I2C_WaitOnTXISFlagUntilTimeout+0x112>
    if (Timeout != HAL_MAX_DELAY)
 8002b8e:	1c7a      	adds	r2, r7, #1
 8002b90:	d0a0      	beq.n	8002ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b92:	f7ff fb0d 	bl	80021b0 <HAL_GetTick>
 8002b96:	465e      	mov	r6, fp
 8002b98:	9b01      	ldr	r3, [sp, #4]
 8002b9a:	1ac0      	subs	r0, r0, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b9c:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	42b8      	cmp	r0, r7
 8002ba0:	d801      	bhi.n	8002ba6 <I2C_WaitOnTXISFlagUntilTimeout+0xee>
 8002ba2:	2f00      	cmp	r7, #0
 8002ba4:	d194      	bne.n	8002ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	0008      	movs	r0, r1
 8002baa:	699a      	ldr	r2, [r3, #24]
 8002bac:	4010      	ands	r0, r2
 8002bae:	4211      	tst	r1, r2
 8002bb0:	d000      	beq.n	8002bb4 <I2C_WaitOnTXISFlagUntilTimeout+0xfc>
 8002bb2:	e78d      	b.n	8002ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	6473      	str	r3, [r6, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	2341      	movs	r3, #65	@ 0x41
 8002bbe:	54f2      	strb	r2, [r6, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	54f0      	strb	r0, [r6, r3]
          return HAL_ERROR;
 8002bc4:	e7ce      	b.n	8002b64 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
  return HAL_OK;
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	e7d0      	b.n	8002b6c <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
 8002bca:	465e      	mov	r6, fp
 8002bcc:	e7b1      	b.n	8002b32 <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
  uint32_t tickstart = Tickstart;
 8002bce:	9901      	ldr	r1, [sp, #4]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bd0:	9200      	str	r2, [sp, #0]
  uint32_t tickstart = Tickstart;
 8002bd2:	4688      	mov	r8, r1
  HAL_StatusTypeDef status = HAL_OK;
 8002bd4:	2100      	movs	r1, #0
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bd6:	003a      	movs	r2, r7
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	4689      	mov	r9, r1
          tmp2 = hi2c->Mode;
 8002bda:	3142      	adds	r1, #66	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bdc:	465f      	mov	r7, fp
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bde:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 8002be0:	468a      	mov	sl, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002be2:	4693      	mov	fp, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002be4:	699a      	ldr	r2, [r3, #24]
 8002be6:	4216      	tst	r6, r2
 8002be8:	d10f      	bne.n	8002c0a <I2C_WaitOnTXISFlagUntilTimeout+0x152>
 8002bea:	464a      	mov	r2, r9
 8002bec:	2a00      	cmp	r2, #0
 8002bee:	d14b      	bne.n	8002c88 <I2C_WaitOnTXISFlagUntilTimeout+0x1d0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bf0:	f7ff fade 	bl	80021b0 <HAL_GetTick>
 8002bf4:	4643      	mov	r3, r8
 8002bf6:	1ac0      	subs	r0, r0, r3
 8002bf8:	4583      	cmp	fp, r0
 8002bfa:	d30f      	bcc.n	8002c1c <I2C_WaitOnTXISFlagUntilTimeout+0x164>
 8002bfc:	465b      	mov	r3, fp
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <I2C_WaitOnTXISFlagUntilTimeout+0x164>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c02:	683b      	ldr	r3, [r7, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	4216      	tst	r6, r2
 8002c08:	d0ef      	beq.n	8002bea <I2C_WaitOnTXISFlagUntilTimeout+0x132>
    if (status == HAL_OK)
 8002c0a:	4659      	mov	r1, fp
 8002c0c:	46bb      	mov	fp, r7
 8002c0e:	000f      	movs	r7, r1
 8002c10:	4649      	mov	r1, r9
 8002c12:	9a00      	ldr	r2, [sp, #0]
 8002c14:	2900      	cmp	r1, #0
 8002c16:	d100      	bne.n	8002c1a <I2C_WaitOnTXISFlagUntilTimeout+0x162>
 8002c18:	e76f      	b.n	8002afa <I2C_WaitOnTXISFlagUntilTimeout+0x42>
 8002c1a:	e770      	b.n	8002afe <I2C_WaitOnTXISFlagUntilTimeout+0x46>
          tmp2 = hi2c->Mode;
 8002c1c:	4652      	mov	r2, sl
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002c22:	5cba      	ldrb	r2, [r7, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c24:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c2a:	2280      	movs	r2, #128	@ 0x80
 8002c2c:	0212      	lsls	r2, r2, #8
 8002c2e:	4211      	tst	r1, r2
 8002c30:	d01e      	beq.n	8002c70 <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c32:	2180      	movs	r1, #128	@ 0x80
 8002c34:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c36:	4208      	tst	r0, r1
 8002c38:	d11a      	bne.n	8002c70 <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
              (tmp1 != I2C_CR2_STOP) && \
 8002c3a:	4662      	mov	r2, ip
 8002c3c:	2a20      	cmp	r2, #32
 8002c3e:	d017      	beq.n	8002c70 <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	4311      	orrs	r1, r2
 8002c44:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8002c46:	f7ff fab3 	bl	80021b0 <HAL_GetTick>
 8002c4a:	003a      	movs	r2, r7
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4690      	mov	r8, r2
 8002c50:	0007      	movs	r7, r0
 8002c52:	e006      	b.n	8002c62 <I2C_WaitOnTXISFlagUntilTimeout+0x1aa>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c54:	f7ff faac 	bl	80021b0 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c58:	4643      	mov	r3, r8
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c5a:	1bc0      	subs	r0, r0, r7
 8002c5c:	2819      	cmp	r0, #25
 8002c5e:	d80b      	bhi.n	8002c78 <I2C_WaitOnTXISFlagUntilTimeout+0x1c0>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c60:	681b      	ldr	r3, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	4216      	tst	r6, r2
 8002c66:	d0f5      	beq.n	8002c54 <I2C_WaitOnTXISFlagUntilTimeout+0x19c>
 8002c68:	4642      	mov	r2, r8
 8002c6a:	46b8      	mov	r8, r7
 8002c6c:	0017      	movs	r7, r2
 8002c6e:	e7b9      	b.n	8002be4 <I2C_WaitOnTXISFlagUntilTimeout+0x12c>
 8002c70:	003a      	movs	r2, r7
 8002c72:	4647      	mov	r7, r8
 8002c74:	4690      	mov	r8, r2
 8002c76:	e7f4      	b.n	8002c62 <I2C_WaitOnTXISFlagUntilTimeout+0x1aa>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c78:	2220      	movs	r2, #32
 8002c7a:	9200      	str	r2, [sp, #0]
              status = HAL_ERROR;
 8002c7c:	3a1f      	subs	r2, #31
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c7e:	46b8      	mov	r8, r7
              status = HAL_ERROR;
 8002c80:	4691      	mov	r9, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c82:	001f      	movs	r7, r3
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	e7ad      	b.n	8002be4 <I2C_WaitOnTXISFlagUntilTimeout+0x12c>
 8002c88:	4659      	mov	r1, fp
 8002c8a:	9a00      	ldr	r2, [sp, #0]
 8002c8c:	46bb      	mov	fp, r7
 8002c8e:	000f      	movs	r7, r1
 8002c90:	e735      	b.n	8002afe <I2C_WaitOnTXISFlagUntilTimeout+0x46>
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	fe00e800 	.word	0xfe00e800

08002c98 <I2C_WaitOnFlagUntilTimeout>:
{
 8002c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c9a:	4657      	mov	r7, sl
 8002c9c:	46de      	mov	lr, fp
 8002c9e:	4645      	mov	r5, r8
 8002ca0:	464e      	mov	r6, r9
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ca2:	2410      	movs	r4, #16
{
 8002ca4:	b5e0      	push	{r5, r6, r7, lr}
 8002ca6:	4692      	mov	sl, r2
 8002ca8:	0007      	movs	r7, r0
 8002caa:	000d      	movs	r5, r1
 8002cac:	469b      	mov	fp, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cae:	6803      	ldr	r3, [r0, #0]
{
 8002cb0:	b083      	sub	sp, #12
    error_code |= HAL_I2C_ERROR_AF;
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	4651      	mov	r1, sl
 8002cb6:	4691      	mov	r9, r2
 8002cb8:	46ba      	mov	sl, r7
 8002cba:	465f      	mov	r7, fp
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	402a      	ands	r2, r5
 8002cc0:	1b52      	subs	r2, r2, r5
 8002cc2:	4250      	negs	r0, r2
 8002cc4:	4142      	adcs	r2, r0
 8002cc6:	428a      	cmp	r2, r1
 8002cc8:	d000      	beq.n	8002ccc <I2C_WaitOnFlagUntilTimeout+0x34>
 8002cca:	e080      	b.n	8002dce <I2C_WaitOnFlagUntilTimeout+0x136>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ccc:	0022      	movs	r2, r4
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cce:	6998      	ldr	r0, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cd0:	4002      	ands	r2, r0
 8002cd2:	4694      	mov	ip, r2
  HAL_StatusTypeDef status = HAL_OK;
 8002cd4:	2200      	movs	r2, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002cd6:	4204      	tst	r4, r0
 8002cd8:	d00e      	beq.n	8002cf8 <I2C_WaitOnFlagUntilTimeout+0x60>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cda:	61dc      	str	r4, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cdc:	1c7a      	adds	r2, r7, #1
 8002cde:	d000      	beq.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x4a>
 8002ce0:	e07c      	b.n	8002ddc <I2C_WaitOnFlagUntilTimeout+0x144>
 8002ce2:	2020      	movs	r0, #32
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	4210      	tst	r0, r2
 8002ce8:	d0fc      	beq.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x4c>
  uint32_t error_code = 0;
 8002cea:	2600      	movs	r6, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cec:	2220      	movs	r2, #32
 8002cee:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002cf0:	464a      	mov	r2, r9
 8002cf2:	4332      	orrs	r2, r6
 8002cf4:	4694      	mov	ip, r2
    status = HAL_ERROR;
 8002cf6:	2201      	movs	r2, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cf8:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002cfa:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cfc:	0040      	lsls	r0, r0, #1
 8002cfe:	4206      	tst	r6, r0
 8002d00:	d037      	beq.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0xda>
    error_code |= HAL_I2C_ERROR_BERR;
 8002d02:	4662      	mov	r2, ip
 8002d04:	2401      	movs	r4, #1
 8002d06:	0031      	movs	r1, r6
 8002d08:	4657      	mov	r7, sl
 8002d0a:	4322      	orrs	r2, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d0c:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d0e:	0570      	lsls	r0, r6, #21
 8002d10:	d504      	bpl.n	8002d1c <I2C_WaitOnFlagUntilTimeout+0x84>
    error_code |= HAL_I2C_ERROR_OVR;
 8002d12:	2008      	movs	r0, #8
 8002d14:	4302      	orrs	r2, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d16:	2080      	movs	r0, #128	@ 0x80
 8002d18:	00c0      	lsls	r0, r0, #3
 8002d1a:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d1c:	0589      	lsls	r1, r1, #22
 8002d1e:	d504      	bpl.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x92>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d20:	2102      	movs	r1, #2
 8002d22:	430a      	orrs	r2, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d24:	31ff      	adds	r1, #255	@ 0xff
 8002d26:	31ff      	adds	r1, #255	@ 0xff
 8002d28:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d2a:	6999      	ldr	r1, [r3, #24]
 8002d2c:	0789      	lsls	r1, r1, #30
 8002d2e:	d501      	bpl.n	8002d34 <I2C_WaitOnFlagUntilTimeout+0x9c>
    hi2c->Instance->TXDR = 0x00U;
 8002d30:	2100      	movs	r1, #0
 8002d32:	6299      	str	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d34:	2101      	movs	r1, #1
 8002d36:	6998      	ldr	r0, [r3, #24]
 8002d38:	4201      	tst	r1, r0
 8002d3a:	d102      	bne.n	8002d42 <I2C_WaitOnFlagUntilTimeout+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d3c:	6998      	ldr	r0, [r3, #24]
 8002d3e:	4301      	orrs	r1, r0
 8002d40:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	484f      	ldr	r0, [pc, #316]	@ (8002e84 <I2C_WaitOnFlagUntilTimeout+0x1ec>)
 8002d46:	4001      	ands	r1, r0
 8002d48:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	647b      	str	r3, [r7, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d50:	2220      	movs	r2, #32
 8002d52:	2341      	movs	r3, #65	@ 0x41
 8002d54:	54fa      	strb	r2, [r7, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d56:	2200      	movs	r2, #0
 8002d58:	3301      	adds	r3, #1
 8002d5a:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 8002d5c:	2340      	movs	r3, #64	@ 0x40
 8002d5e:	2200      	movs	r2, #0
      return HAL_ERROR;
 8002d60:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8002d62:	54fa      	strb	r2, [r7, r3]
}
 8002d64:	b003      	add	sp, #12
 8002d66:	bcf0      	pop	{r4, r5, r6, r7}
 8002d68:	46bb      	mov	fp, r7
 8002d6a:	46b2      	mov	sl, r6
 8002d6c:	46a9      	mov	r9, r5
 8002d6e:	46a0      	mov	r8, r4
 8002d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d72:	0570      	lsls	r0, r6, #21
 8002d74:	d503      	bpl.n	8002d7e <I2C_WaitOnFlagUntilTimeout+0xe6>
 8002d76:	4662      	mov	r2, ip
 8002d78:	0031      	movs	r1, r6
 8002d7a:	4657      	mov	r7, sl
 8002d7c:	e7c9      	b.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x7a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d7e:	05b6      	lsls	r6, r6, #22
 8002d80:	d502      	bpl.n	8002d88 <I2C_WaitOnFlagUntilTimeout+0xf0>
 8002d82:	4662      	mov	r2, ip
 8002d84:	4657      	mov	r7, sl
 8002d86:	e7cb      	b.n	8002d20 <I2C_WaitOnFlagUntilTimeout+0x88>
  if (status != HAL_OK)
 8002d88:	2a00      	cmp	r2, #0
 8002d8a:	d124      	bne.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x13e>
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	1c7a      	adds	r2, r7, #1
 8002d8e:	d095      	beq.n	8002cbc <I2C_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d90:	46bb      	mov	fp, r7
 8002d92:	4657      	mov	r7, sl
 8002d94:	468a      	mov	sl, r1
 8002d96:	f7ff fa0b 	bl	80021b0 <HAL_GetTick>
 8002d9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002d9c:	1ac0      	subs	r0, r0, r3
 8002d9e:	4558      	cmp	r0, fp
 8002da0:	d802      	bhi.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x110>
 8002da2:	465b      	mov	r3, fp
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d114      	bne.n	8002dd2 <I2C_WaitOnFlagUntilTimeout+0x13a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	402a      	ands	r2, r5
 8002dae:	1b52      	subs	r2, r2, r5
 8002db0:	4251      	negs	r1, r2
 8002db2:	414a      	adcs	r2, r1
 8002db4:	4552      	cmp	r2, sl
 8002db6:	d000      	beq.n	8002dba <I2C_WaitOnFlagUntilTimeout+0x122>
 8002db8:	e77b      	b.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0x1a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dba:	2220      	movs	r2, #32
 8002dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dc2:	2341      	movs	r3, #65	@ 0x41
 8002dc4:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	3301      	adds	r3, #1
 8002dca:	54fa      	strb	r2, [r7, r3]
          return HAL_ERROR;
 8002dcc:	e7c6      	b.n	8002d5c <I2C_WaitOnFlagUntilTimeout+0xc4>
  return HAL_OK;
 8002dce:	2000      	movs	r0, #0
 8002dd0:	e7c8      	b.n	8002d64 <I2C_WaitOnFlagUntilTimeout+0xcc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	e76d      	b.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8002dd6:	4662      	mov	r2, ip
 8002dd8:	4657      	mov	r7, sl
 8002dda:	e7a6      	b.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x92>
  uint32_t tickstart = Tickstart;
 8002ddc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  uint32_t error_code = 0;
 8002dde:	2600      	movs	r6, #0
  uint32_t tickstart = Tickstart;
 8002de0:	4693      	mov	fp, r2
  HAL_StatusTypeDef status = HAL_OK;
 8002de2:	2200      	movs	r2, #0
 8002de4:	9200      	str	r2, [sp, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002de6:	3220      	adds	r2, #32
 8002de8:	4690      	mov	r8, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dea:	002a      	movs	r2, r5
 8002dec:	4655      	mov	r5, sl
 8002dee:	46b2      	mov	sl, r6
 8002df0:	465e      	mov	r6, fp
 8002df2:	4693      	mov	fp, r2
 8002df4:	9101      	str	r1, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002df6:	4641      	mov	r1, r8
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	4211      	tst	r1, r2
 8002dfc:	d134      	bne.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0x1d0>
 8002dfe:	9a00      	ldr	r2, [sp, #0]
 8002e00:	2a00      	cmp	r2, #0
 8002e02:	d13a      	bne.n	8002e7a <I2C_WaitOnFlagUntilTimeout+0x1e2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e04:	f7ff f9d4 	bl	80021b0 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e08:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e0a:	1b80      	subs	r0, r0, r6
 8002e0c:	4287      	cmp	r7, r0
 8002e0e:	d301      	bcc.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0x17c>
 8002e10:	2f00      	cmp	r7, #0
 8002e12:	d1f0      	bne.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0x15e>
          tmp2 = hi2c->Mode;
 8002e14:	2242      	movs	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e16:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002e18:	5caa      	ldrb	r2, [r5, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e1a:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e20:	2280      	movs	r2, #128	@ 0x80
 8002e22:	0212      	lsls	r2, r2, #8
 8002e24:	4211      	tst	r1, r2
 8002e26:	d00d      	beq.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0x1ac>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e28:	2180      	movs	r1, #128	@ 0x80
 8002e2a:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e2c:	4208      	tst	r0, r1
 8002e2e:	d109      	bne.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0x1ac>
              (tmp1 != I2C_CR2_STOP) && \
 8002e30:	4662      	mov	r2, ip
 8002e32:	2a20      	cmp	r2, #32
 8002e34:	d006      	beq.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0x1ac>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8002e3c:	f7ff f9b8 	bl	80021b0 <HAL_GetTick>
 8002e40:	0006      	movs	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e42:	682b      	ldr	r3, [r5, #0]
 8002e44:	4641      	mov	r1, r8
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	4211      	tst	r1, r2
 8002e4a:	d1d4      	bne.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0x15e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e4c:	f7ff f9b0 	bl	80021b0 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e50:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e52:	1b80      	subs	r0, r0, r6
 8002e54:	2819      	cmp	r0, #25
 8002e56:	d9f5      	bls.n	8002e44 <I2C_WaitOnFlagUntilTimeout+0x1ac>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e58:	2220      	movs	r2, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e5a:	4641      	mov	r1, r8
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	4692      	mov	sl, r2
              status = HAL_ERROR;
 8002e5e:	3a1f      	subs	r2, #31
 8002e60:	9200      	str	r2, [sp, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e62:	699a      	ldr	r2, [r3, #24]
 8002e64:	4211      	tst	r1, r2
 8002e66:	d0ca      	beq.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x166>
    if (status == HAL_OK)
 8002e68:	9a00      	ldr	r2, [sp, #0]
 8002e6a:	4656      	mov	r6, sl
 8002e6c:	9901      	ldr	r1, [sp, #4]
 8002e6e:	46aa      	mov	sl, r5
 8002e70:	465d      	mov	r5, fp
 8002e72:	2a00      	cmp	r2, #0
 8002e74:	d100      	bne.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x1e0>
 8002e76:	e739      	b.n	8002cec <I2C_WaitOnFlagUntilTimeout+0x54>
 8002e78:	e73a      	b.n	8002cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
 8002e7a:	4656      	mov	r6, sl
 8002e7c:	9901      	ldr	r1, [sp, #4]
 8002e7e:	46aa      	mov	sl, r5
 8002e80:	465d      	mov	r5, fp
 8002e82:	e735      	b.n	8002cf0 <I2C_WaitOnFlagUntilTimeout+0x58>
 8002e84:	fe00e800 	.word	0xfe00e800

08002e88 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e8a:	46de      	mov	lr, fp
 8002e8c:	4657      	mov	r7, sl
 8002e8e:	464e      	mov	r6, r9
 8002e90:	4645      	mov	r5, r8
 8002e92:	b5e0      	push	{r5, r6, r7, lr}
 8002e94:	000d      	movs	r5, r1
    error_code |= HAL_I2C_ERROR_AF;
 8002e96:	2104      	movs	r1, #4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e98:	6803      	ldr	r3, [r0, #0]
{
 8002e9a:	4692      	mov	sl, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e9c:	699a      	ldr	r2, [r3, #24]
{
 8002e9e:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ea0:	2610      	movs	r6, #16
    error_code |= HAL_I2C_ERROR_AF;
 8002ea2:	468b      	mov	fp, r1
{
 8002ea4:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea6:	0692      	lsls	r2, r2, #26
 8002ea8:	d464      	bmi.n	8002f74 <I2C_WaitOnSTOPFlagUntilTimeout+0xec>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eaa:	0032      	movs	r2, r6
  uint32_t itflag   = hi2c->Instance->ISR;
 8002eac:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2700      	movs	r7, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	420e      	tst	r6, r1
 8002eb4:	d00c      	beq.n	8002ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb6:	61de      	str	r6, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002eb8:	1c6a      	adds	r2, r5, #1
 8002eba:	d165      	bne.n	8002f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x100>
 8002ebc:	2120      	movs	r1, #32
 8002ebe:	699a      	ldr	r2, [r3, #24]
 8002ec0:	4211      	tst	r1, r2
 8002ec2:	d0fc      	beq.n	8002ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
  uint32_t error_code = 0;
 8002ec4:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec6:	2120      	movs	r1, #32
 8002ec8:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002eca:	4659      	mov	r1, fp
    status = HAL_ERROR;
 8002ecc:	2701      	movs	r7, #1
    error_code |= HAL_I2C_ERROR_AF;
 8002ece:	430a      	orrs	r2, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ed0:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002ed2:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ed4:	0040      	lsls	r0, r0, #1
 8002ed6:	4201      	tst	r1, r0
 8002ed8:	d034      	beq.n	8002f44 <I2C_WaitOnSTOPFlagUntilTimeout+0xbc>
    error_code |= HAL_I2C_ERROR_BERR;
 8002eda:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002edc:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002ede:	432a      	orrs	r2, r5
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ee0:	0548      	lsls	r0, r1, #21
 8002ee2:	d504      	bpl.n	8002eee <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
    error_code |= HAL_I2C_ERROR_OVR;
 8002ee4:	2008      	movs	r0, #8
 8002ee6:	4302      	orrs	r2, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ee8:	2080      	movs	r0, #128	@ 0x80
 8002eea:	00c0      	lsls	r0, r0, #3
 8002eec:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002eee:	0589      	lsls	r1, r1, #22
 8002ef0:	d504      	bpl.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	430a      	orrs	r2, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ef6:	31ff      	adds	r1, #255	@ 0xff
 8002ef8:	31ff      	adds	r1, #255	@ 0xff
 8002efa:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002efc:	6999      	ldr	r1, [r3, #24]
 8002efe:	0789      	lsls	r1, r1, #30
 8002f00:	d501      	bpl.n	8002f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    hi2c->Instance->TXDR = 0x00U;
 8002f02:	2100      	movs	r1, #0
 8002f04:	6299      	str	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f06:	2101      	movs	r1, #1
 8002f08:	6998      	ldr	r0, [r3, #24]
 8002f0a:	4201      	tst	r1, r0
 8002f0c:	d102      	bne.n	8002f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f0e:	6998      	ldr	r0, [r3, #24]
 8002f10:	4301      	orrs	r1, r0
 8002f12:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	4844      	ldr	r0, [pc, #272]	@ (8003028 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a0>)
 8002f18:	4001      	ands	r1, r0
 8002f1a:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002f1c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f22:	2220      	movs	r2, #32
 8002f24:	2341      	movs	r3, #65	@ 0x41
 8002f26:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	2200      	movs	r2, #0
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8002f2e:	2340      	movs	r3, #64	@ 0x40
 8002f30:	2200      	movs	r2, #0
      return HAL_ERROR;
 8002f32:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8002f34:	54e2      	strb	r2, [r4, r3]
}
 8002f36:	b003      	add	sp, #12
 8002f38:	bcf0      	pop	{r4, r5, r6, r7}
 8002f3a:	46bb      	mov	fp, r7
 8002f3c:	46b2      	mov	sl, r6
 8002f3e:	46a9      	mov	r9, r5
 8002f40:	46a0      	mov	r8, r4
 8002f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f44:	0548      	lsls	r0, r1, #21
 8002f46:	d4cd      	bmi.n	8002ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f48:	0589      	lsls	r1, r1, #22
 8002f4a:	d4d2      	bmi.n	8002ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  if (status != HAL_OK)
 8002f4c:	2f00      	cmp	r7, #0
 8002f4e:	d1d5      	bne.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f50:	f7ff f92e 	bl	80021b0 <HAL_GetTick>
 8002f54:	4653      	mov	r3, sl
 8002f56:	1ac0      	subs	r0, r0, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f58:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	42a8      	cmp	r0, r5
 8002f5c:	d801      	bhi.n	8002f62 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
 8002f5e:	2d00      	cmp	r5, #0
 8002f60:	d105      	bne.n	8002f6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe6>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f62:	2220      	movs	r2, #32
 8002f64:	0010      	movs	r0, r2
 8002f66:	6999      	ldr	r1, [r3, #24]
 8002f68:	4008      	ands	r0, r1
 8002f6a:	420a      	tst	r2, r1
 8002f6c:	d004      	beq.n	8002f78 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f6e:	699a      	ldr	r2, [r3, #24]
 8002f70:	0692      	lsls	r2, r2, #26
 8002f72:	d59a      	bpl.n	8002eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  return HAL_OK;
 8002f74:	2000      	movs	r0, #0
 8002f76:	e7de      	b.n	8002f36 <I2C_WaitOnSTOPFlagUntilTimeout+0xae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f78:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	2341      	movs	r3, #65	@ 0x41
 8002f80:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	3301      	adds	r3, #1
 8002f84:	54e0      	strb	r0, [r4, r3]
        return HAL_ERROR;
 8002f86:	e7d2      	b.n	8002f2e <I2C_WaitOnSTOPFlagUntilTimeout+0xa6>
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f88:	0028      	movs	r0, r5
  uint32_t error_code = 0;
 8002f8a:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2100      	movs	r1, #0
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f8e:	4655      	mov	r5, sl
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	4689      	mov	r9, r1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f92:	2720      	movs	r7, #32
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f94:	4692      	mov	sl, r2
 8002f96:	4680      	mov	r8, r0
 8002f98:	9501      	str	r5, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f9a:	699a      	ldr	r2, [r3, #24]
 8002f9c:	4217      	tst	r7, r2
 8002f9e:	d10e      	bne.n	8002fbe <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
 8002fa0:	464a      	mov	r2, r9
 8002fa2:	2a00      	cmp	r2, #0
 8002fa4:	d13b      	bne.n	800301e <I2C_WaitOnSTOPFlagUntilTimeout+0x196>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7ff f903 	bl	80021b0 <HAL_GetTick>
 8002faa:	1b40      	subs	r0, r0, r5
 8002fac:	4580      	cmp	r8, r0
 8002fae:	d30f      	bcc.n	8002fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
 8002fb0:	4643      	mov	r3, r8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fb6:	6823      	ldr	r3, [r4, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	4217      	tst	r7, r2
 8002fbc:	d0f0      	beq.n	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x118>
    if (status == HAL_OK)
 8002fbe:	9901      	ldr	r1, [sp, #4]
 8002fc0:	4652      	mov	r2, sl
 8002fc2:	468a      	mov	sl, r1
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	4645      	mov	r5, r8
 8002fc8:	2900      	cmp	r1, #0
 8002fca:	d100      	bne.n	8002fce <I2C_WaitOnSTOPFlagUntilTimeout+0x146>
 8002fcc:	e77b      	b.n	8002ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
 8002fce:	e77c      	b.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
          tmp2 = hi2c->Mode;
 8002fd0:	2242      	movs	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002fd6:	5ca2      	ldrb	r2, [r4, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fd8:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fde:	2280      	movs	r2, #128	@ 0x80
 8002fe0:	0212      	lsls	r2, r2, #8
 8002fe2:	4211      	tst	r1, r2
 8002fe4:	d00d      	beq.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fe6:	2180      	movs	r1, #128	@ 0x80
 8002fe8:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fea:	4208      	tst	r0, r1
 8002fec:	d109      	bne.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
              (tmp1 != I2C_CR2_STOP) && \
 8002fee:	4662      	mov	r2, ip
 8002ff0:	2a20      	cmp	r2, #32
 8002ff2:	d006      	beq.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	4311      	orrs	r1, r2
 8002ff8:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8002ffa:	f7ff f8d9 	bl	80021b0 <HAL_GetTick>
 8002ffe:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	4217      	tst	r7, r2
 8003006:	d1c8      	bne.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x112>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003008:	f7ff f8d2 	bl	80021b0 <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800300c:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800300e:	1b40      	subs	r0, r0, r5
 8003010:	2819      	cmp	r0, #25
 8003012:	d9f6      	bls.n	8003002 <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	2220      	movs	r2, #32
 8003016:	4692      	mov	sl, r2
              status = HAL_ERROR;
 8003018:	3a1f      	subs	r2, #31
 800301a:	4691      	mov	r9, r2
 800301c:	e7bd      	b.n	8002f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x112>
 800301e:	9901      	ldr	r1, [sp, #4]
 8003020:	4652      	mov	r2, sl
 8003022:	4645      	mov	r5, r8
 8003024:	468a      	mov	sl, r1
 8003026:	e750      	b.n	8002eca <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8003028:	fe00e800 	.word	0xfe00e800

0800302c <HAL_I2C_Init>:
{
 800302c:	b510      	push	{r4, lr}
 800302e:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8003030:	d052      	beq.n	80030d8 <HAL_I2C_Init+0xac>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003032:	2341      	movs	r3, #65	@ 0x41
 8003034:	5cc3      	ldrb	r3, [r0, r3]
 8003036:	b2da      	uxtb	r2, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d048      	beq.n	80030ce <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800303c:	2341      	movs	r3, #65	@ 0x41
 800303e:	2224      	movs	r2, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003040:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003042:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8003044:	6823      	ldr	r3, [r4, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003046:	68a0      	ldr	r0, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	438a      	bics	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800304e:	4923      	ldr	r1, [pc, #140]	@ (80030dc <HAL_I2C_Init+0xb0>)
 8003050:	6862      	ldr	r2, [r4, #4]
 8003052:	400a      	ands	r2, r1
 8003054:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	4921      	ldr	r1, [pc, #132]	@ (80030e0 <HAL_I2C_Init+0xb4>)
 800305a:	400a      	ands	r2, r1
 800305c:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800305e:	68e2      	ldr	r2, [r4, #12]
 8003060:	2a01      	cmp	r2, #1
 8003062:	d00b      	beq.n	800307c <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003064:	2184      	movs	r1, #132	@ 0x84
 8003066:	0209      	lsls	r1, r1, #8
 8003068:	4301      	orrs	r1, r0
 800306a:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800306c:	2a02      	cmp	r2, #2
 800306e:	d109      	bne.n	8003084 <HAL_I2C_Init+0x58>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003070:	2280      	movs	r2, #128	@ 0x80
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	e007      	b.n	800308c <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800307c:	2280      	movs	r2, #128	@ 0x80
 800307e:	0212      	lsls	r2, r2, #8
 8003080:	4302      	orrs	r2, r0
 8003082:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	4917      	ldr	r1, [pc, #92]	@ (80030e4 <HAL_I2C_Init+0xb8>)
 8003088:	400a      	ands	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800308c:	6859      	ldr	r1, [r3, #4]
 800308e:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <HAL_I2C_Init+0xbc>)
  return HAL_OK;
 8003090:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	4911      	ldr	r1, [pc, #68]	@ (80030e0 <HAL_I2C_Init+0xb4>)
 800309a:	400a      	ands	r2, r1
 800309c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800309e:	6961      	ldr	r1, [r4, #20]
 80030a0:	6922      	ldr	r2, [r4, #16]
 80030a2:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030a4:	69a1      	ldr	r1, [r4, #24]
 80030a6:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030a8:	430a      	orrs	r2, r1
 80030aa:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030ac:	6a21      	ldr	r1, [r4, #32]
 80030ae:	69e2      	ldr	r2, [r4, #28]
 80030b0:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 80030b2:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030b4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80030be:	2241      	movs	r2, #65	@ 0x41
 80030c0:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c2:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030c4:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c6:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 80030c8:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ca:	54a3      	strb	r3, [r4, r2]
}
 80030cc:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80030ce:	3340      	adds	r3, #64	@ 0x40
 80030d0:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80030d2:	f7fe feab 	bl	8001e2c <HAL_I2C_MspInit>
 80030d6:	e7b1      	b.n	800303c <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 80030d8:	2001      	movs	r0, #1
 80030da:	e7f7      	b.n	80030cc <HAL_I2C_Init+0xa0>
 80030dc:	f0ffffff 	.word	0xf0ffffff
 80030e0:	ffff7fff 	.word	0xffff7fff
 80030e4:	fffff7ff 	.word	0xfffff7ff
 80030e8:	02008000 	.word	0x02008000

080030ec <HAL_I2C_Mem_Write>:
{
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ee:	4657      	mov	r7, sl
 80030f0:	464e      	mov	r6, r9
 80030f2:	46de      	mov	lr, fp
 80030f4:	4645      	mov	r5, r8
 80030f6:	b5e0      	push	{r5, r6, r7, lr}
 80030f8:	b083      	sub	sp, #12
 80030fa:	001f      	movs	r7, r3
 80030fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80030fe:	0016      	movs	r6, r2
 8003100:	cb04      	ldmia	r3!, {r2}
 8003102:	0004      	movs	r4, r0
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	000d      	movs	r5, r1
 8003108:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800310a:	2341      	movs	r3, #65	@ 0x41
 800310c:	4699      	mov	r9, r3
 800310e:	5cc3      	ldrb	r3, [r0, r3]
{
 8003110:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003112:	2b20      	cmp	r3, #32
 8003114:	d11f      	bne.n	8003156 <HAL_I2C_Mem_Write+0x6a>
    if ((pData == NULL) || (Size == 0U))
 8003116:	2a00      	cmp	r2, #0
 8003118:	d019      	beq.n	800314e <HAL_I2C_Mem_Write+0x62>
 800311a:	465b      	mov	r3, fp
 800311c:	2b00      	cmp	r3, #0
 800311e:	d016      	beq.n	800314e <HAL_I2C_Mem_Write+0x62>
    __HAL_LOCK(hi2c);
 8003120:	2240      	movs	r2, #64	@ 0x40
 8003122:	5c83      	ldrb	r3, [r0, r2]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d016      	beq.n	8003156 <HAL_I2C_Mem_Write+0x6a>
 8003128:	2301      	movs	r3, #1
 800312a:	5483      	strb	r3, [r0, r2]
    tickstart = HAL_GetTick();
 800312c:	f7ff f840 	bl	80021b0 <HAL_GetTick>
 8003130:	4680      	mov	r8, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003132:	0001      	movs	r1, r0
 8003134:	0020      	movs	r0, r4
 8003136:	f7ff fc09 	bl	800294c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 800313a:	2800      	cmp	r0, #0
 800313c:	d00d      	beq.n	800315a <HAL_I2C_Mem_Write+0x6e>
      return  HAL_ERROR;
 800313e:	2001      	movs	r0, #1
}
 8003140:	b003      	add	sp, #12
 8003142:	bcf0      	pop	{r4, r5, r6, r7}
 8003144:	46bb      	mov	fp, r7
 8003146:	46b2      	mov	sl, r6
 8003148:	46a9      	mov	r9, r5
 800314a:	46a0      	mov	r8, r4
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003154:	e7f3      	b.n	800313e <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 8003156:	2002      	movs	r0, #2
 8003158:	e7f2      	b.n	8003140 <HAL_I2C_Mem_Write+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800315a:	2321      	movs	r3, #33	@ 0x21
 800315c:	464a      	mov	r2, r9
 800315e:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003160:	2240      	movs	r2, #64	@ 0x40
 8003162:	3321      	adds	r3, #33	@ 0x21
 8003164:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8003166:	4653      	mov	r3, sl
 8003168:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800316a:	465b      	mov	r3, fp
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800316c:	6821      	ldr	r1, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800316e:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8003170:	8563      	strh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003172:	684a      	ldr	r2, [r1, #4]
    hi2c->XferISR   = NULL;
 8003174:	6360      	str	r0, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8003176:	4854      	ldr	r0, [pc, #336]	@ (80032c8 <HAL_I2C_Mem_Write+0x1dc>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003178:	b2fb      	uxtb	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800317a:	4002      	ands	r2, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800317c:	05ad      	lsls	r5, r5, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800317e:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003180:	4313      	orrs	r3, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003182:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003184:	4a51      	ldr	r2, [pc, #324]	@ (80032cc <HAL_I2C_Mem_Write+0x1e0>)
 8003186:	432b      	orrs	r3, r5
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318c:	4642      	mov	r2, r8
 800318e:	0020      	movs	r0, r4
 8003190:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003192:	f7ff fc91 	bl	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003196:	2800      	cmp	r0, #0
 8003198:	d157      	bne.n	800324a <HAL_I2C_Mem_Write+0x15e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800319a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800319c:	2f01      	cmp	r7, #1
 800319e:	d162      	bne.n	8003266 <HAL_I2C_Mem_Write+0x17a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031a0:	b2f6      	uxtb	r6, r6
 80031a2:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031a4:	4643      	mov	r3, r8
 80031a6:	2200      	movs	r2, #0
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	2180      	movs	r1, #128	@ 0x80
 80031ac:	0020      	movs	r0, r4
 80031ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80031b0:	f7ff fd72 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d148      	bne.n	800324a <HAL_I2C_Mem_Write+0x15e>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80031ba:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031bc:	2bff      	cmp	r3, #255	@ 0xff
 80031be:	d848      	bhi.n	8003252 <HAL_I2C_Mem_Write+0x166>
      hi2c->XferSize = hi2c->XferCount;
 80031c0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80031c2:	4843      	ldr	r0, [pc, #268]	@ (80032d0 <HAL_I2C_Mem_Write+0x1e4>)
      hi2c->XferSize = hi2c->XferCount;
 80031c4:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80031c6:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80031c8:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80031ce:	4001      	ands	r1, r0
 80031d0:	432b      	orrs	r3, r5
 80031d2:	430b      	orrs	r3, r1
 80031d4:	2180      	movs	r1, #128	@ 0x80
 80031d6:	0489      	lsls	r1, r1, #18
 80031d8:	430b      	orrs	r3, r1
 80031da:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031dc:	e002      	b.n	80031e4 <HAL_I2C_Mem_Write+0xf8>
    } while (hi2c->XferCount > 0U);
 80031de:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d05a      	beq.n	800329a <HAL_I2C_Mem_Write+0x1ae>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e4:	4642      	mov	r2, r8
 80031e6:	0020      	movs	r0, r4
 80031e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80031ea:	f7ff fc65 	bl	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d1a5      	bne.n	800313e <HAL_I2C_Mem_Write+0x52>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80031f4:	6822      	ldr	r2, [r4, #0]
 80031f6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80031f8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031fa:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80031fc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80031fe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003200:	3b01      	subs	r3, #1
 8003202:	b29b      	uxth	r3, r3
 8003204:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003206:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003208:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800320a:	3b01      	subs	r3, #1
 800320c:	b29b      	uxth	r3, r3
 800320e:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003210:	2a00      	cmp	r2, #0
 8003212:	d0e4      	beq.n	80031de <HAL_I2C_Mem_Write+0xf2>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e2      	bne.n	80031de <HAL_I2C_Mem_Write+0xf2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003218:	4643      	mov	r3, r8
 800321a:	2200      	movs	r2, #0
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2180      	movs	r1, #128	@ 0x80
 8003220:	0020      	movs	r0, r4
 8003222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003224:	f7ff fd38 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8003228:	2800      	cmp	r0, #0
 800322a:	d000      	beq.n	800322e <HAL_I2C_Mem_Write+0x142>
 800322c:	e787      	b.n	800313e <HAL_I2C_Mem_Write+0x52>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800322e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003230:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003232:	2bff      	cmp	r3, #255	@ 0xff
 8003234:	d922      	bls.n	800327c <HAL_I2C_Mem_Write+0x190>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003236:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8003238:	4925      	ldr	r1, [pc, #148]	@ (80032d0 <HAL_I2C_Mem_Write+0x1e4>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800323a:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800323c:	6853      	ldr	r3, [r2, #4]
 800323e:	400b      	ands	r3, r1
 8003240:	4924      	ldr	r1, [pc, #144]	@ (80032d4 <HAL_I2C_Mem_Write+0x1e8>)
 8003242:	432b      	orrs	r3, r5
 8003244:	430b      	orrs	r3, r1
 8003246:	6053      	str	r3, [r2, #4]
}
 8003248:	e7c9      	b.n	80031de <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 800324a:	2340      	movs	r3, #64	@ 0x40
 800324c:	2200      	movs	r2, #0
 800324e:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8003250:	e775      	b.n	800313e <HAL_I2C_Mem_Write+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003252:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8003254:	491e      	ldr	r1, [pc, #120]	@ (80032d0 <HAL_I2C_Mem_Write+0x1e4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003256:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003258:	6853      	ldr	r3, [r2, #4]
 800325a:	400b      	ands	r3, r1
 800325c:	491d      	ldr	r1, [pc, #116]	@ (80032d4 <HAL_I2C_Mem_Write+0x1e8>)
 800325e:	432b      	orrs	r3, r5
 8003260:	430b      	orrs	r3, r1
 8003262:	6053      	str	r3, [r2, #4]
}
 8003264:	e7be      	b.n	80031e4 <HAL_I2C_Mem_Write+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003266:	0a32      	lsrs	r2, r6, #8
 8003268:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326a:	0020      	movs	r0, r4
 800326c:	4642      	mov	r2, r8
 800326e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003270:	f7ff fc22 	bl	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003274:	2800      	cmp	r0, #0
 8003276:	d1e8      	bne.n	800324a <HAL_I2C_Mem_Write+0x15e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	e791      	b.n	80031a0 <HAL_I2C_Mem_Write+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800327c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800327e:	4814      	ldr	r0, [pc, #80]	@ (80032d0 <HAL_I2C_Mem_Write+0x1e4>)
          hi2c->XferSize = hi2c->XferCount;
 8003280:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003282:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8003284:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003286:	b2db      	uxtb	r3, r3
 8003288:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800328a:	4001      	ands	r1, r0
 800328c:	432b      	orrs	r3, r5
 800328e:	430b      	orrs	r3, r1
 8003290:	2180      	movs	r1, #128	@ 0x80
 8003292:	0489      	lsls	r1, r1, #18
 8003294:	430b      	orrs	r3, r1
 8003296:	6053      	str	r3, [r2, #4]
}
 8003298:	e7a1      	b.n	80031de <HAL_I2C_Mem_Write+0xf2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329a:	4642      	mov	r2, r8
 800329c:	0020      	movs	r0, r4
 800329e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80032a0:	f7ff fdf2 	bl	8002e88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a4:	2800      	cmp	r0, #0
 80032a6:	d000      	beq.n	80032aa <HAL_I2C_Mem_Write+0x1be>
 80032a8:	e749      	b.n	800313e <HAL_I2C_Mem_Write+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032aa:	2120      	movs	r1, #32
 80032ac:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80032ae:	4d0a      	ldr	r5, [pc, #40]	@ (80032d8 <HAL_I2C_Mem_Write+0x1ec>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	402a      	ands	r2, r5
 80032b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032b8:	2341      	movs	r3, #65	@ 0x41
 80032ba:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032bc:	3301      	adds	r3, #1
 80032be:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80032c0:	3b02      	subs	r3, #2
 80032c2:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 80032c4:	e73c      	b.n	8003140 <HAL_I2C_Mem_Write+0x54>
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	fc009800 	.word	0xfc009800
 80032cc:	01002000 	.word	0x01002000
 80032d0:	fc009c00 	.word	0xfc009c00
 80032d4:	01ff0000 	.word	0x01ff0000
 80032d8:	fe00e800 	.word	0xfe00e800

080032dc <HAL_I2C_Mem_Read>:
{
 80032dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032de:	4657      	mov	r7, sl
 80032e0:	464e      	mov	r6, r9
 80032e2:	46de      	mov	lr, fp
 80032e4:	4645      	mov	r5, r8
 80032e6:	b5e0      	push	{r5, r6, r7, lr}
 80032e8:	b083      	sub	sp, #12
 80032ea:	001f      	movs	r7, r3
 80032ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80032ee:	0016      	movs	r6, r2
 80032f0:	cb04      	ldmia	r3!, {r2}
 80032f2:	0004      	movs	r4, r0
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	000d      	movs	r5, r1
 80032f8:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80032fa:	2341      	movs	r3, #65	@ 0x41
 80032fc:	4699      	mov	r9, r3
 80032fe:	5cc3      	ldrb	r3, [r0, r3]
{
 8003300:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003302:	2b20      	cmp	r3, #32
 8003304:	d11f      	bne.n	8003346 <HAL_I2C_Mem_Read+0x6a>
    if ((pData == NULL) || (Size == 0U))
 8003306:	2a00      	cmp	r2, #0
 8003308:	d019      	beq.n	800333e <HAL_I2C_Mem_Read+0x62>
 800330a:	465b      	mov	r3, fp
 800330c:	2b00      	cmp	r3, #0
 800330e:	d016      	beq.n	800333e <HAL_I2C_Mem_Read+0x62>
    __HAL_LOCK(hi2c);
 8003310:	2240      	movs	r2, #64	@ 0x40
 8003312:	5c83      	ldrb	r3, [r0, r2]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d016      	beq.n	8003346 <HAL_I2C_Mem_Read+0x6a>
 8003318:	2301      	movs	r3, #1
 800331a:	5483      	strb	r3, [r0, r2]
    tickstart = HAL_GetTick();
 800331c:	f7fe ff48 	bl	80021b0 <HAL_GetTick>
 8003320:	4680      	mov	r8, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003322:	0001      	movs	r1, r0
 8003324:	0020      	movs	r0, r4
 8003326:	f7ff fb11 	bl	800294c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 800332a:	2800      	cmp	r0, #0
 800332c:	d00d      	beq.n	800334a <HAL_I2C_Mem_Read+0x6e>
      return  HAL_ERROR;
 800332e:	2001      	movs	r0, #1
}
 8003330:	b003      	add	sp, #12
 8003332:	bcf0      	pop	{r4, r5, r6, r7}
 8003334:	46bb      	mov	fp, r7
 8003336:	46b2      	mov	sl, r6
 8003338:	46a9      	mov	r9, r5
 800333a:	46a0      	mov	r8, r4
 800333c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003344:	e7f3      	b.n	800332e <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 8003346:	2002      	movs	r0, #2
 8003348:	e7f2      	b.n	8003330 <HAL_I2C_Mem_Read+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800334a:	2322      	movs	r3, #34	@ 0x22
 800334c:	464a      	mov	r2, r9
 800334e:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003350:	2240      	movs	r2, #64	@ 0x40
 8003352:	3320      	adds	r3, #32
 8003354:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8003356:	4653      	mov	r3, sl
 8003358:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800335a:	465b      	mov	r3, fp
  MODIFY_REG(hi2c->Instance->CR2, \
 800335c:	6821      	ldr	r1, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335e:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 8003360:	8563      	strh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003362:	684a      	ldr	r2, [r1, #4]
    hi2c->XferISR   = NULL;
 8003364:	6360      	str	r0, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8003366:	4856      	ldr	r0, [pc, #344]	@ (80034c0 <HAL_I2C_Mem_Read+0x1e4>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003368:	b2fb      	uxtb	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800336a:	4002      	ands	r2, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800336c:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800336e:	4313      	orrs	r3, r2
 8003370:	2280      	movs	r2, #128	@ 0x80
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003372:	05ad      	lsls	r5, r5, #22
 8003374:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003376:	0192      	lsls	r2, r2, #6
 8003378:	432b      	orrs	r3, r5
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337e:	4642      	mov	r2, r8
 8003380:	0020      	movs	r0, r4
 8003382:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003384:	f7ff fb98 	bl	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003388:	2800      	cmp	r0, #0
 800338a:	d15a      	bne.n	8003442 <HAL_I2C_Mem_Read+0x166>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800338c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800338e:	2f01      	cmp	r7, #1
 8003390:	d165      	bne.n	800345e <HAL_I2C_Mem_Read+0x182>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003392:	b2f6      	uxtb	r6, r6
 8003394:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003396:	4643      	mov	r3, r8
 8003398:	2200      	movs	r2, #0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2140      	movs	r1, #64	@ 0x40
 800339e:	0020      	movs	r0, r4
 80033a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80033a2:	f7ff fc79 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d14b      	bne.n	8003442 <HAL_I2C_Mem_Read+0x166>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80033ac:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ae:	2bff      	cmp	r3, #255	@ 0xff
 80033b0:	d84b      	bhi.n	800344a <HAL_I2C_Mem_Read+0x16e>
      hi2c->XferSize = hi2c->XferCount;
 80033b2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80033b4:	4842      	ldr	r0, [pc, #264]	@ (80034c0 <HAL_I2C_Mem_Read+0x1e4>)
      hi2c->XferSize = hi2c->XferCount;
 80033b6:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 80033b8:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 80033ba:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80033c0:	4001      	ands	r1, r0
 80033c2:	432b      	orrs	r3, r5
 80033c4:	430b      	orrs	r3, r1
 80033c6:	493f      	ldr	r1, [pc, #252]	@ (80034c4 <HAL_I2C_Mem_Read+0x1e8>)
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6053      	str	r3, [r2, #4]
}
 80033cc:	e002      	b.n	80033d4 <HAL_I2C_Mem_Read+0xf8>
    } while (hi2c->XferCount > 0U);
 80033ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d05e      	beq.n	8003492 <HAL_I2C_Mem_Read+0x1b6>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033d4:	4643      	mov	r3, r8
 80033d6:	2200      	movs	r2, #0
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2104      	movs	r1, #4
 80033dc:	0020      	movs	r0, r4
 80033de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80033e0:	f7ff fc5a 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d1a2      	bne.n	800332e <HAL_I2C_Mem_Read+0x52>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80033ee:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 80033f0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 80033f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80033f4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80033f6:	3301      	adds	r3, #1
      hi2c->XferCount--;
 80033f8:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80033fa:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80033fc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80033fe:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003400:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003402:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003404:	b29b      	uxth	r3, r3
 8003406:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003408:	2a00      	cmp	r2, #0
 800340a:	d0e0      	beq.n	80033ce <HAL_I2C_Mem_Read+0xf2>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1de      	bne.n	80033ce <HAL_I2C_Mem_Read+0xf2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003410:	4643      	mov	r3, r8
 8003412:	2200      	movs	r2, #0
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	2180      	movs	r1, #128	@ 0x80
 8003418:	0020      	movs	r0, r4
 800341a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800341c:	f7ff fc3c 	bl	8002c98 <I2C_WaitOnFlagUntilTimeout>
 8003420:	2800      	cmp	r0, #0
 8003422:	d000      	beq.n	8003426 <HAL_I2C_Mem_Read+0x14a>
 8003424:	e783      	b.n	800332e <HAL_I2C_Mem_Read+0x52>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003426:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003428:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800342a:	2bff      	cmp	r3, #255	@ 0xff
 800342c:	d922      	bls.n	8003474 <HAL_I2C_Mem_Read+0x198>
          hi2c->XferSize = 1U;
 800342e:	2301      	movs	r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003430:	4925      	ldr	r1, [pc, #148]	@ (80034c8 <HAL_I2C_Mem_Read+0x1ec>)
          hi2c->XferSize = 1U;
 8003432:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003434:	6853      	ldr	r3, [r2, #4]
 8003436:	400b      	ands	r3, r1
 8003438:	4924      	ldr	r1, [pc, #144]	@ (80034cc <HAL_I2C_Mem_Read+0x1f0>)
 800343a:	432b      	orrs	r3, r5
 800343c:	430b      	orrs	r3, r1
 800343e:	6053      	str	r3, [r2, #4]
}
 8003440:	e7c5      	b.n	80033ce <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 8003442:	2340      	movs	r3, #64	@ 0x40
 8003444:	2200      	movs	r2, #0
 8003446:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8003448:	e771      	b.n	800332e <HAL_I2C_Mem_Read+0x52>
      hi2c->XferSize = 1U;
 800344a:	2301      	movs	r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 800344c:	491c      	ldr	r1, [pc, #112]	@ (80034c0 <HAL_I2C_Mem_Read+0x1e4>)
      hi2c->XferSize = 1U;
 800344e:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003450:	6853      	ldr	r3, [r2, #4]
 8003452:	400b      	ands	r3, r1
 8003454:	491e      	ldr	r1, [pc, #120]	@ (80034d0 <HAL_I2C_Mem_Read+0x1f4>)
 8003456:	432b      	orrs	r3, r5
 8003458:	430b      	orrs	r3, r1
 800345a:	6053      	str	r3, [r2, #4]
}
 800345c:	e7ba      	b.n	80033d4 <HAL_I2C_Mem_Read+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800345e:	0a32      	lsrs	r2, r6, #8
 8003460:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	0020      	movs	r0, r4
 8003464:	4642      	mov	r2, r8
 8003466:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003468:	f7ff fb26 	bl	8002ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 800346c:	2800      	cmp	r0, #0
 800346e:	d1e8      	bne.n	8003442 <HAL_I2C_Mem_Read+0x166>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	e78e      	b.n	8003392 <HAL_I2C_Mem_Read+0xb6>
          hi2c->XferSize = hi2c->XferCount;
 8003474:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003476:	4814      	ldr	r0, [pc, #80]	@ (80034c8 <HAL_I2C_Mem_Read+0x1ec>)
          hi2c->XferSize = hi2c->XferCount;
 8003478:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800347a:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800347c:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800347e:	b2db      	uxtb	r3, r3
 8003480:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003482:	4001      	ands	r1, r0
 8003484:	432b      	orrs	r3, r5
 8003486:	430b      	orrs	r3, r1
 8003488:	2180      	movs	r1, #128	@ 0x80
 800348a:	0489      	lsls	r1, r1, #18
 800348c:	430b      	orrs	r3, r1
 800348e:	6053      	str	r3, [r2, #4]
}
 8003490:	e79d      	b.n	80033ce <HAL_I2C_Mem_Read+0xf2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003492:	4642      	mov	r2, r8
 8003494:	0020      	movs	r0, r4
 8003496:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003498:	f7ff fcf6 	bl	8002e88 <I2C_WaitOnSTOPFlagUntilTimeout>
 800349c:	2800      	cmp	r0, #0
 800349e:	d000      	beq.n	80034a2 <HAL_I2C_Mem_Read+0x1c6>
 80034a0:	e745      	b.n	800332e <HAL_I2C_Mem_Read+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a2:	2120      	movs	r1, #32
 80034a4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80034a6:	4d0b      	ldr	r5, [pc, #44]	@ (80034d4 <HAL_I2C_Mem_Read+0x1f8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	402a      	ands	r2, r5
 80034ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80034b0:	2341      	movs	r3, #65	@ 0x41
 80034b2:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034b4:	3301      	adds	r3, #1
 80034b6:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80034b8:	3b02      	subs	r3, #2
 80034ba:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 80034bc:	e738      	b.n	8003330 <HAL_I2C_Mem_Read+0x54>
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	fc009800 	.word	0xfc009800
 80034c4:	02002400 	.word	0x02002400
 80034c8:	fc009c00 	.word	0xfc009c00
 80034cc:	01010000 	.word	0x01010000
 80034d0:	01012400 	.word	0x01012400
 80034d4:	fe00e800 	.word	0xfe00e800

080034d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034da:	2441      	movs	r4, #65	@ 0x41
 80034dc:	5d03      	ldrb	r3, [r0, r4]
{
 80034de:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e0:	b2dd      	uxtb	r5, r3
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d11a      	bne.n	800351c <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e6:	2640      	movs	r6, #64	@ 0x40
 80034e8:	5d83      	ldrb	r3, [r0, r6]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d016      	beq.n	800351c <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034ee:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034f0:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034f2:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 80034f4:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034f6:	490a      	ldr	r1, [pc, #40]	@ (8003520 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	43ba      	bics	r2, r7
 80034fc:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	400a      	ands	r2, r1
 8003502:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003504:	4662      	mov	r2, ip
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	4311      	orrs	r1, r2
 800350a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	433a      	orrs	r2, r7
 8003510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003512:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003514:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 8003516:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 8003518:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800351a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800351c:	2002      	movs	r0, #2
 800351e:	e7fc      	b.n	800351a <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8003520:	ffffefff 	.word	0xffffefff

08003524 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003526:	46ce      	mov	lr, r9
 8003528:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352a:	2441      	movs	r4, #65	@ 0x41
{
 800352c:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800352e:	5d03      	ldrb	r3, [r0, r4]
 8003530:	b2dd      	uxtb	r5, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	d11f      	bne.n	8003576 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003536:	2640      	movs	r6, #64	@ 0x40
 8003538:	5d83      	ldrb	r3, [r0, r6]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d01b      	beq.n	8003576 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800353e:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003540:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003542:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8003544:	6802      	ldr	r2, [r0, #0]
 8003546:	46b9      	mov	r9, r7
 8003548:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800354a:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 800354c:	43bb      	bics	r3, r7
 800354e:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8003550:	6813      	ldr	r3, [r2, #0]
 8003552:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 8003554:	4647      	mov	r7, r8
 8003556:	4b09      	ldr	r3, [pc, #36]	@ (800357c <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 8003558:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 800355a:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800355c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 800355e:	4649      	mov	r1, r9
 8003560:	6813      	ldr	r3, [r2, #0]
 8003562:	430b      	orrs	r3, r1
 8003564:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003566:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003568:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 800356a:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 800356c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800356e:	bcc0      	pop	{r6, r7}
 8003570:	46b9      	mov	r9, r7
 8003572:	46b0      	mov	r8, r6
 8003574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003576:	2002      	movs	r0, #2
 8003578:	e7f9      	b.n	800356e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	fffff0ff 	.word	0xfffff0ff

08003580 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	1e04      	subs	r4, r0, #0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003584:	d100      	bne.n	8003588 <HAL_PCD_Init+0x8>
 8003586:	e0f6      	b.n	8003776 <HAL_PCD_Init+0x1f6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003588:	4b7f      	ldr	r3, [pc, #508]	@ (8003788 <HAL_PCD_Init+0x208>)
 800358a:	5cc3      	ldrb	r3, [r0, r3]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d100      	bne.n	8003594 <HAL_PCD_Init+0x14>
 8003592:	e0e6      	b.n	8003762 <HAL_PCD_Init+0x1e2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003594:	2203      	movs	r2, #3
 8003596:	4b7c      	ldr	r3, [pc, #496]	@ (8003788 <HAL_PCD_Init+0x208>)
 8003598:	54e2      	strb	r2, [r4, r3]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800359a:	6820      	ldr	r0, [r4, #0]
 800359c:	f001 ffec 	bl	8005578 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a0:	7922      	ldrb	r2, [r4, #4]
 80035a2:	2a00      	cmp	r2, #0
 80035a4:	d100      	bne.n	80035a8 <HAL_PCD_Init+0x28>
 80035a6:	e0cd      	b.n	8003744 <HAL_PCD_Init+0x1c4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
    hpcd->IN_ep[i].num = i;
 80035a8:	2180      	movs	r1, #128	@ 0x80
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035aa:	2300      	movs	r3, #0
    hpcd->IN_ep[i].num = i;
 80035ac:	0049      	lsls	r1, r1, #1
 80035ae:	8221      	strh	r1, [r4, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035b0:	74e3      	strb	r3, [r4, #19]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035b2:	6223      	str	r3, [r4, #32]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035b4:	6263      	str	r3, [r4, #36]	@ 0x24
    hpcd->IN_ep[i].xfer_len = 0U;
 80035b6:	62a3      	str	r3, [r4, #40]	@ 0x28
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b8:	2a01      	cmp	r2, #1
 80035ba:	d100      	bne.n	80035be <HAL_PCD_Init+0x3e>
 80035bc:	e0dd      	b.n	800377a <HAL_PCD_Init+0x1fa>
    hpcd->IN_ep[i].num = i;
 80035be:	2002      	movs	r0, #2
 80035c0:	30ff      	adds	r0, #255	@ 0xff
 80035c2:	8720      	strh	r0, [r4, #56]	@ 0x38
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035c4:	38c6      	subs	r0, #198	@ 0xc6
 80035c6:	5423      	strb	r3, [r4, r0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035c8:	64a3      	str	r3, [r4, #72]	@ 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035ca:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 80035cc:	6523      	str	r3, [r4, #80]	@ 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ce:	2a02      	cmp	r2, #2
 80035d0:	d04c      	beq.n	800366c <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 80035d2:	2581      	movs	r5, #129	@ 0x81
 80035d4:	3025      	adds	r0, #37	@ 0x25
 80035d6:	006d      	lsls	r5, r5, #1
 80035d8:	5225      	strh	r5, [r4, r0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035da:	3003      	adds	r0, #3
 80035dc:	5423      	strb	r3, [r4, r0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035de:	6723      	str	r3, [r4, #112]	@ 0x70
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035e0:	6763      	str	r3, [r4, #116]	@ 0x74
    hpcd->IN_ep[i].xfer_len = 0U;
 80035e2:	67a3      	str	r3, [r4, #120]	@ 0x78
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e4:	2a03      	cmp	r2, #3
 80035e6:	d041      	beq.n	800366c <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 80035e8:	2004      	movs	r0, #4
 80035ea:	3d7a      	subs	r5, #122	@ 0x7a
 80035ec:	30ff      	adds	r0, #255	@ 0xff
 80035ee:	5360      	strh	r0, [r4, r5]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035f0:	3503      	adds	r5, #3
 80035f2:	5563      	strb	r3, [r4, r5]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035f4:	350d      	adds	r5, #13
 80035f6:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035f8:	3504      	adds	r5, #4
 80035fa:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035fc:	3504      	adds	r5, #4
 80035fe:	5163      	str	r3, [r4, r5]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003600:	2a04      	cmp	r2, #4
 8003602:	d033      	beq.n	800366c <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 8003604:	2682      	movs	r6, #130	@ 0x82
 8003606:	3510      	adds	r5, #16
 8003608:	0076      	lsls	r6, r6, #1
 800360a:	5366      	strh	r6, [r4, r5]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800360c:	3503      	adds	r5, #3
 800360e:	5563      	strb	r3, [r4, r5]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003610:	350d      	adds	r5, #13
 8003612:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003614:	3504      	adds	r5, #4
 8003616:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003618:	3504      	adds	r5, #4
 800361a:	5163      	str	r3, [r4, r5]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	2a05      	cmp	r2, #5
 800361e:	d025      	beq.n	800366c <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 8003620:	2606      	movs	r6, #6
 8003622:	3510      	adds	r5, #16
 8003624:	36ff      	adds	r6, #255	@ 0xff
 8003626:	5366      	strh	r6, [r4, r5]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003628:	3503      	adds	r5, #3
 800362a:	5563      	strb	r3, [r4, r5]
    hpcd->IN_ep[i].maxpacket = 0U;
 800362c:	350d      	adds	r5, #13
 800362e:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003630:	3504      	adds	r5, #4
 8003632:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003634:	3504      	adds	r5, #4
 8003636:	5163      	str	r3, [r4, r5]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003638:	2a06      	cmp	r2, #6
 800363a:	d017      	beq.n	800366c <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 800363c:	3516      	adds	r5, #22
 800363e:	5265      	strh	r5, [r4, r1]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003640:	3110      	adds	r1, #16
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003642:	5423      	strb	r3, [r4, r0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003644:	5063      	str	r3, [r4, r1]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003646:	3104      	adds	r1, #4
 8003648:	5063      	str	r3, [r4, r1]
    hpcd->IN_ep[i].xfer_len = 0U;
 800364a:	3104      	adds	r1, #4
 800364c:	5063      	str	r3, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800364e:	2a07      	cmp	r2, #7
 8003650:	d00c      	beq.n	800366c <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 8003652:	2008      	movs	r0, #8
 8003654:	3110      	adds	r1, #16
 8003656:	30ff      	adds	r0, #255	@ 0xff
 8003658:	5260      	strh	r0, [r4, r1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800365a:	212c      	movs	r1, #44	@ 0x2c
 800365c:	31ff      	adds	r1, #255	@ 0xff
 800365e:	5463      	strb	r3, [r4, r1]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003660:	310d      	adds	r1, #13
 8003662:	5063      	str	r3, [r4, r1]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003664:	3104      	adds	r1, #4
 8003666:	5063      	str	r3, [r4, r1]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003668:	3104      	adds	r1, #4
 800366a:	5063      	str	r3, [r4, r1]
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
    hpcd->OUT_ep[i].num = i;
 800366c:	20a8      	movs	r0, #168	@ 0xa8
 800366e:	2300      	movs	r3, #0
 8003670:	0040      	lsls	r0, r0, #1
 8003672:	5223      	strh	r3, [r4, r0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003674:	2054      	movs	r0, #84	@ 0x54
    hpcd->OUT_ep[i].num = i;
 8003676:	2100      	movs	r1, #0
 8003678:	2501      	movs	r5, #1
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800367a:	30ff      	adds	r0, #255	@ 0xff
 800367c:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800367e:	300d      	adds	r0, #13
 8003680:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003682:	3004      	adds	r0, #4
 8003684:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003686:	3004      	adds	r0, #4
 8003688:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].num = i;
 800368a:	3010      	adds	r0, #16
 800368c:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800368e:	207c      	movs	r0, #124	@ 0x7c
 8003690:	30ff      	adds	r0, #255	@ 0xff
 8003692:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003694:	300d      	adds	r0, #13
 8003696:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003698:	3004      	adds	r0, #4
 800369a:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800369c:	3004      	adds	r0, #4
 800369e:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a0:	2a02      	cmp	r2, #2
 80036a2:	d04f      	beq.n	8003744 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 80036a4:	3010      	adds	r0, #16
 80036a6:	3501      	adds	r5, #1
 80036a8:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036aa:	20a4      	movs	r0, #164	@ 0xa4
 80036ac:	30ff      	adds	r0, #255	@ 0xff
 80036ae:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036b0:	300d      	adds	r0, #13
 80036b2:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036b4:	3004      	adds	r0, #4
 80036b6:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036b8:	3004      	adds	r0, #4
 80036ba:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036bc:	2a03      	cmp	r2, #3
 80036be:	d041      	beq.n	8003744 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 80036c0:	3010      	adds	r0, #16
 80036c2:	3501      	adds	r5, #1
 80036c4:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036c6:	20cc      	movs	r0, #204	@ 0xcc
 80036c8:	30ff      	adds	r0, #255	@ 0xff
 80036ca:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036cc:	300d      	adds	r0, #13
 80036ce:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036d0:	3004      	adds	r0, #4
 80036d2:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036d4:	3004      	adds	r0, #4
 80036d6:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d8:	2a04      	cmp	r2, #4
 80036da:	d033      	beq.n	8003744 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 80036dc:	3010      	adds	r0, #16
 80036de:	3501      	adds	r5, #1
 80036e0:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036e2:	20f4      	movs	r0, #244	@ 0xf4
 80036e4:	30ff      	adds	r0, #255	@ 0xff
 80036e6:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036e8:	300d      	adds	r0, #13
 80036ea:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ec:	3004      	adds	r0, #4
 80036ee:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036f0:	3004      	adds	r0, #4
 80036f2:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f4:	2a05      	cmp	r2, #5
 80036f6:	d025      	beq.n	8003744 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 80036f8:	3010      	adds	r0, #16
 80036fa:	3501      	adds	r5, #1
 80036fc:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036fe:	4823      	ldr	r0, [pc, #140]	@ (800378c <HAL_PCD_Init+0x20c>)
 8003700:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003702:	300d      	adds	r0, #13
 8003704:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003706:	3004      	adds	r0, #4
 8003708:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800370a:	3004      	adds	r0, #4
 800370c:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370e:	2a06      	cmp	r2, #6
 8003710:	d018      	beq.n	8003744 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 8003712:	3010      	adds	r0, #16
 8003714:	3501      	adds	r5, #1
 8003716:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003718:	481d      	ldr	r0, [pc, #116]	@ (8003790 <HAL_PCD_Init+0x210>)
 800371a:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800371c:	300d      	adds	r0, #13
 800371e:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003720:	3004      	adds	r0, #4
 8003722:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003724:	3004      	adds	r0, #4
 8003726:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003728:	2a07      	cmp	r2, #7
 800372a:	d00b      	beq.n	8003744 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 800372c:	229a      	movs	r2, #154	@ 0x9a
 800372e:	2007      	movs	r0, #7
 8003730:	0092      	lsls	r2, r2, #2
 8003732:	52a0      	strh	r0, [r4, r2]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003734:	4a17      	ldr	r2, [pc, #92]	@ (8003794 <HAL_PCD_Init+0x214>)
 8003736:	54a1      	strb	r1, [r4, r2]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003738:	320d      	adds	r2, #13
 800373a:	50a3      	str	r3, [r4, r2]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800373c:	3204      	adds	r2, #4
 800373e:	50a3      	str	r3, [r4, r2]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003740:	3204      	adds	r2, #4
 8003742:	50a3      	str	r3, [r4, r2]
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003744:	68a2      	ldr	r2, [r4, #8]
 8003746:	6820      	ldr	r0, [r4, #0]
 8003748:	6861      	ldr	r1, [r4, #4]
 800374a:	f001 ff1f 	bl	800558c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800374e:	2300      	movs	r3, #0
  hpcd->State = HAL_PCD_STATE_READY;
 8003750:	2201      	movs	r2, #1
  hpcd->USB_Address = 0U;
 8003752:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003754:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <HAL_PCD_Init+0x208>)
 8003756:	54e2      	strb	r2, [r4, r3]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003758:	7aa3      	ldrb	r3, [r4, #10]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d007      	beq.n	800376e <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 800375e:	2000      	movs	r0, #0
}
 8003760:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8003762:	23a4      	movs	r3, #164	@ 0xa4
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 8003768:	f003 fc3a 	bl	8006fe0 <HAL_PCD_MspInit>
 800376c:	e712      	b.n	8003594 <HAL_PCD_Init+0x14>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800376e:	0020      	movs	r0, r4
 8003770:	f000 ff14 	bl	800459c <HAL_PCDEx_ActivateLPM>
 8003774:	e7f3      	b.n	800375e <HAL_PCD_Init+0x1de>
    return HAL_ERROR;
 8003776:	2001      	movs	r0, #1
 8003778:	e7f2      	b.n	8003760 <HAL_PCD_Init+0x1e0>
    hpcd->OUT_ep[i].num = i;
 800377a:	22a8      	movs	r2, #168	@ 0xa8
 800377c:	0052      	lsls	r2, r2, #1
 800377e:	52a3      	strh	r3, [r4, r2]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003780:	2254      	movs	r2, #84	@ 0x54
 8003782:	2100      	movs	r1, #0
 8003784:	32ff      	adds	r2, #255	@ 0xff
 8003786:	e7d6      	b.n	8003736 <HAL_PCD_Init+0x1b6>
 8003788:	00000291 	.word	0x00000291
 800378c:	0000021b 	.word	0x0000021b
 8003790:	00000243 	.word	0x00000243
 8003794:	0000026b 	.word	0x0000026b

08003798 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003798:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800379a:	25a4      	movs	r5, #164	@ 0xa4
 800379c:	00ad      	lsls	r5, r5, #2
 800379e:	5d43      	ldrb	r3, [r0, r5]
{
 80037a0:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d00b      	beq.n	80037be <HAL_PCD_Start+0x26>
 80037a6:	2301      	movs	r3, #1
 80037a8:	5543      	strb	r3, [r0, r5]
  __HAL_PCD_ENABLE(hpcd);
 80037aa:	6800      	ldr	r0, [r0, #0]
 80037ac:	f001 feda 	bl	8005564 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80037b0:	6820      	ldr	r0, [r4, #0]
 80037b2:	f002 fc41 	bl	8006038 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037b6:	2300      	movs	r3, #0

  return HAL_OK;
 80037b8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 80037ba:	5563      	strb	r3, [r4, r5]
}
 80037bc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80037be:	2002      	movs	r0, #2
 80037c0:	e7fc      	b.n	80037bc <HAL_PCD_Start+0x24>
 80037c2:	46c0      	nop			@ (mov r8, r8)

080037c4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c6:	46de      	mov	lr, fp
 80037c8:	464e      	mov	r6, r9
 80037ca:	4657      	mov	r7, sl
 80037cc:	4645      	mov	r5, r8
 80037ce:	b5e0      	push	{r5, r6, r7, lr}
 80037d0:	0004      	movs	r4, r0
 80037d2:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80037d4:	6800      	ldr	r0, [r0, #0]
 80037d6:	f002 fc37 	bl	8006048 <USB_ReadInterrupts>

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80037da:	2380      	movs	r3, #128	@ 0x80
 80037dc:	0006      	movs	r6, r0
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	401e      	ands	r6, r3
 80037e2:	4218      	tst	r0, r3
 80037e4:	d12f      	bne.n	8003846 <HAL_PCD_IRQHandler+0x82>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80037e6:	0543      	lsls	r3, r0, #21
 80037e8:	d500      	bpl.n	80037ec <HAL_PCD_IRQHandler+0x28>
 80037ea:	e17c      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x322>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80037ec:	0443      	lsls	r3, r0, #17
 80037ee:	d41d      	bmi.n	800382c <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80037f0:	2380      	movs	r3, #128	@ 0x80
 80037f2:	0005      	movs	r5, r0
 80037f4:	019b      	lsls	r3, r3, #6
 80037f6:	401d      	ands	r5, r3
 80037f8:	4218      	tst	r0, r3
 80037fa:	d000      	beq.n	80037fe <HAL_PCD_IRQHandler+0x3a>
 80037fc:	e1f1      	b.n	8003be2 <HAL_PCD_IRQHandler+0x41e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80037fe:	04c3      	lsls	r3, r0, #19
 8003800:	d500      	bpl.n	8003804 <HAL_PCD_IRQHandler+0x40>
 8003802:	e08c      	b.n	800391e <HAL_PCD_IRQHandler+0x15a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003804:	0503      	lsls	r3, r0, #20
 8003806:	d500      	bpl.n	800380a <HAL_PCD_IRQHandler+0x46>
 8003808:	e31e      	b.n	8003e48 <HAL_PCD_IRQHandler+0x684>

    return;
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800380a:	2380      	movs	r3, #128	@ 0x80
 800380c:	4203      	tst	r3, r0
 800380e:	d000      	beq.n	8003812 <HAL_PCD_IRQHandler+0x4e>
 8003810:	e2f8      	b.n	8003e04 <HAL_PCD_IRQHandler+0x640>
    }

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003812:	0583      	lsls	r3, r0, #22
 8003814:	d501      	bpl.n	800381a <HAL_PCD_IRQHandler+0x56>
 8003816:	f000 fc0c 	bl	8004032 <HAL_PCD_IRQHandler+0x86e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800381a:	05c0      	lsls	r0, r0, #23
 800381c:	d50c      	bpl.n	8003838 <HAL_PCD_IRQHandler+0x74>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800381e:	2244      	movs	r2, #68	@ 0x44
 8003820:	6821      	ldr	r1, [r4, #0]
 8003822:	48bd      	ldr	r0, [pc, #756]	@ (8003b18 <HAL_PCD_IRQHandler+0x354>)
 8003824:	5a8b      	ldrh	r3, [r1, r2]
 8003826:	4003      	ands	r3, r0
 8003828:	528b      	strh	r3, [r1, r2]

    return;
 800382a:	e005      	b.n	8003838 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800382c:	2244      	movs	r2, #68	@ 0x44
 800382e:	6821      	ldr	r1, [r4, #0]
 8003830:	48ba      	ldr	r0, [pc, #744]	@ (8003b1c <HAL_PCD_IRQHandler+0x358>)
 8003832:	5a8b      	ldrh	r3, [r1, r2]
 8003834:	4003      	ands	r3, r0
 8003836:	528b      	strh	r3, [r1, r2]
  }
}
 8003838:	b005      	add	sp, #20
 800383a:	bcf0      	pop	{r4, r5, r6, r7}
 800383c:	46bb      	mov	fp, r7
 800383e:	46b2      	mov	sl, r6
 8003840:	46a9      	mov	r9, r5
 8003842:	46a0      	mov	r8, r4
 8003844:	bdf0      	pop	{r4, r5, r6, r7, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003846:	2344      	movs	r3, #68	@ 0x44
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	5ac3      	ldrh	r3, [r0, r3]
 800384c:	b21b      	sxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	daf2      	bge.n	8003838 <HAL_PCD_IRQHandler+0x74>
  {
    wIstr = hpcd->Instance->ISTR;
 8003852:	2344      	movs	r3, #68	@ 0x44
 8003854:	469b      	mov	fp, r3

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003856:	3b35      	subs	r3, #53	@ 0x35
 8003858:	469a      	mov	sl, r3
 800385a:	e010      	b.n	800387e <HAL_PCD_IRQHandler+0xba>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800385c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800385e:	06d2      	lsls	r2, r2, #27
 8003860:	d400      	bmi.n	8003864 <HAL_PCD_IRQHandler+0xa0>
 8003862:	e0c1      	b.n	80039e8 <HAL_PCD_IRQHandler+0x224>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003864:	b29a      	uxth	r2, r3

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003866:	051b      	lsls	r3, r3, #20
 8003868:	d500      	bpl.n	800386c <HAL_PCD_IRQHandler+0xa8>
 800386a:	e0e7      	b.n	8003a3c <HAL_PCD_IRQHandler+0x278>
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800386c:	b212      	sxth	r2, r2
 800386e:	2a00      	cmp	r2, #0
 8003870:	da00      	bge.n	8003874 <HAL_PCD_IRQHandler+0xb0>
 8003872:	e167      	b.n	8003b44 <HAL_PCD_IRQHandler+0x380>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003874:	465b      	mov	r3, fp
 8003876:	5ac3      	ldrh	r3, [r0, r3]
 8003878:	b21b      	sxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	dadc      	bge.n	8003838 <HAL_PCD_IRQHandler+0x74>
    wIstr = hpcd->Instance->ISTR;
 800387e:	465b      	mov	r3, fp
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003880:	4655      	mov	r5, sl
    if (epindex == 0U)
 8003882:	4651      	mov	r1, sl
    wIstr = hpcd->Instance->ISTR;
 8003884:	5ac3      	ldrh	r3, [r0, r3]
 8003886:	b29a      	uxth	r2, r3
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003888:	401d      	ands	r5, r3
    if (epindex == 0U)
 800388a:	4219      	tst	r1, r3
 800388c:	d0e6      	beq.n	800385c <HAL_PCD_IRQHandler+0x98>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800388e:	00ae      	lsls	r6, r5, #2
 8003890:	1982      	adds	r2, r0, r6
 8003892:	8813      	ldrh	r3, [r2, #0]
 8003894:	9600      	str	r6, [sp, #0]
 8003896:	b29f      	uxth	r7, r3

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003898:	b21b      	sxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	db59      	blt.n	8003952 <HAL_PCD_IRQHandler+0x18e>
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800389e:	2380      	movs	r3, #128	@ 0x80
 80038a0:	423b      	tst	r3, r7
 80038a2:	d0e7      	beq.n	8003874 <HAL_PCD_IRQHandler+0xb0>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038a4:	9e00      	ldr	r6, [sp, #0]
 80038a6:	499e      	ldr	r1, [pc, #632]	@ (8003b20 <HAL_PCD_IRQHandler+0x35c>)
 80038a8:	1982      	adds	r2, r0, r6
 80038aa:	8813      	ldrh	r3, [r2, #0]
 80038ac:	400b      	ands	r3, r1
 80038ae:	499d      	ldr	r1, [pc, #628]	@ (8003b24 <HAL_PCD_IRQHandler+0x360>)
 80038b0:	430b      	orrs	r3, r1
 80038b2:	468c      	mov	ip, r1

        if (ep->type == EP_TYPE_ISOC)
 80038b4:	1971      	adds	r1, r6, r5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038b6:	b29b      	uxth	r3, r3
        if (ep->type == EP_TYPE_ISOC)
 80038b8:	00c9      	lsls	r1, r1, #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038ba:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 80038bc:	1862      	adds	r2, r4, r1
 80038be:	7cd3      	ldrb	r3, [r2, #19]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d100      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x102>
 80038c4:	e194      	b.n	8003bf0 <HAL_PCD_IRQHandler+0x42c>
          if ((wEPVal & USB_EP_KIND) == 0U)
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);

            if (ep->xfer_len > TxPctSize)
 80038c6:	6a96      	ldr	r6, [r2, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038c8:	7c13      	ldrb	r3, [r2, #16]
            if (ep->xfer_len > TxPctSize)
 80038ca:	9601      	str	r6, [sp, #4]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80038cc:	2680      	movs	r6, #128	@ 0x80
 80038ce:	0076      	lsls	r6, r6, #1
 80038d0:	46b0      	mov	r8, r6
 80038d2:	403e      	ands	r6, r7
 80038d4:	9603      	str	r6, [sp, #12]
 80038d6:	4646      	mov	r6, r8
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038d8:	4699      	mov	r9, r3
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	9302      	str	r3, [sp, #8]
          if ((wEPVal & USB_EP_KIND) == 0U)
 80038de:	4237      	tst	r7, r6
 80038e0:	d000      	beq.n	80038e4 <HAL_PCD_IRQHandler+0x120>
 80038e2:	e1bd      	b.n	8003c60 <HAL_PCD_IRQHandler+0x49c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038e4:	2550      	movs	r5, #80	@ 0x50
 80038e6:	469c      	mov	ip, r3
 80038e8:	5b45      	ldrh	r5, [r0, r5]
 80038ea:	4e8f      	ldr	r6, [pc, #572]	@ (8003b28 <HAL_PCD_IRQHandler+0x364>)
 80038ec:	4465      	add	r5, ip
 80038ee:	46b4      	mov	ip, r6
 80038f0:	182d      	adds	r5, r5, r0
 80038f2:	4465      	add	r5, ip
 80038f4:	882d      	ldrh	r5, [r5, #0]
            if (ep->xfer_len > TxPctSize)
 80038f6:	9b01      	ldr	r3, [sp, #4]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038f8:	05ad      	lsls	r5, r5, #22
            if (ep->xfer_len > TxPctSize)
 80038fa:	0dad      	lsrs	r5, r5, #22
 80038fc:	429d      	cmp	r5, r3
 80038fe:	d300      	bcc.n	8003902 <HAL_PCD_IRQHandler+0x13e>
 8003900:	e1a6      	b.n	8003c50 <HAL_PCD_IRQHandler+0x48c>
            {
              ep->xfer_len -= TxPctSize;
 8003902:	1b5b      	subs	r3, r3, r5
 8003904:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003906:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8003908:	3110      	adds	r1, #16
              ep->xfer_buff += TxPctSize;
 800390a:	195b      	adds	r3, r3, r5
 800390c:	6253      	str	r3, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 800390e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 8003910:	1861      	adds	r1, r4, r1
              ep->xfer_count += TxPctSize;
 8003912:	195b      	adds	r3, r3, r5
 8003914:	62d3      	str	r3, [r2, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003916:	f002 f82b 	bl	8005970 <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800391a:	6820      	ldr	r0, [r4, #0]
 800391c:	e7aa      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800391e:	2340      	movs	r3, #64	@ 0x40
 8003920:	2004      	movs	r0, #4
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	5ad1      	ldrh	r1, [r2, r3]
 8003926:	4381      	bics	r1, r0
 8003928:	52d1      	strh	r1, [r2, r3]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800392a:	5ad1      	ldrh	r1, [r2, r3]
 800392c:	3004      	adds	r0, #4
 800392e:	4381      	bics	r1, r0
 8003930:	52d1      	strh	r1, [r2, r3]
    if (hpcd->LPM_State == LPM_L1)
 8003932:	23b2      	movs	r3, #178	@ 0xb2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	5ce2      	ldrb	r2, [r4, r3]
 8003938:	2a01      	cmp	r2, #1
 800393a:	d100      	bne.n	800393e <HAL_PCD_IRQHandler+0x17a>
 800393c:	e384      	b.n	8004048 <HAL_PCD_IRQHandler+0x884>
    HAL_PCD_ResumeCallback(hpcd);
 800393e:	0020      	movs	r0, r4
 8003940:	f003 fbbe 	bl	80070c0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003944:	2244      	movs	r2, #68	@ 0x44
 8003946:	6821      	ldr	r1, [r4, #0]
 8003948:	4878      	ldr	r0, [pc, #480]	@ (8003b2c <HAL_PCD_IRQHandler+0x368>)
 800394a:	5a8b      	ldrh	r3, [r1, r2]
 800394c:	4003      	ands	r3, r0
 800394e:	528b      	strh	r3, [r1, r2]
    return;
 8003950:	e772      	b.n	8003838 <HAL_PCD_IRQHandler+0x74>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003952:	8813      	ldrh	r3, [r2, #0]
 8003954:	4976      	ldr	r1, [pc, #472]	@ (8003b30 <HAL_PCD_IRQHandler+0x36c>)
 8003956:	400b      	ands	r3, r1
 8003958:	2180      	movs	r1, #128	@ 0x80
 800395a:	430b      	orrs	r3, r1
 800395c:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 800395e:	1973      	adds	r3, r6, r5
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	18e3      	adds	r3, r4, r3
 8003964:	001a      	movs	r2, r3
 8003966:	325d      	adds	r2, #93	@ 0x5d
 8003968:	32ff      	adds	r2, #255	@ 0xff
 800396a:	7812      	ldrb	r2, [r2, #0]
 800396c:	2a00      	cmp	r2, #0
 800396e:	d000      	beq.n	8003972 <HAL_PCD_IRQHandler+0x1ae>
 8003970:	e088      	b.n	8003a84 <HAL_PCD_IRQHandler+0x2c0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003972:	3250      	adds	r2, #80	@ 0x50
 8003974:	5a81      	ldrh	r1, [r0, r2]
 8003976:	001a      	movs	r2, r3
 8003978:	3251      	adds	r2, #81	@ 0x51
 800397a:	32ff      	adds	r2, #255	@ 0xff
 800397c:	7812      	ldrb	r2, [r2, #0]
 800397e:	00d2      	lsls	r2, r2, #3
 8003980:	1852      	adds	r2, r2, r1
 8003982:	496c      	ldr	r1, [pc, #432]	@ (8003b34 <HAL_PCD_IRQHandler+0x370>)
 8003984:	1812      	adds	r2, r2, r0
 8003986:	468c      	mov	ip, r1
 8003988:	4462      	add	r2, ip
 800398a:	8812      	ldrh	r2, [r2, #0]
 800398c:	0592      	lsls	r2, r2, #22
 800398e:	0d91      	lsrs	r1, r2, #22
 8003990:	4688      	mov	r8, r1
          if (count != 0U)
 8003992:	2a00      	cmp	r2, #0
 8003994:	d000      	beq.n	8003998 <HAL_PCD_IRQHandler+0x1d4>
 8003996:	e1e7      	b.n	8003d68 <HAL_PCD_IRQHandler+0x5a4>
{
 8003998:	2300      	movs	r3, #0
 800399a:	4698      	mov	r8, r3
        ep->xfer_count += count;
 800399c:	9b00      	ldr	r3, [sp, #0]
 800399e:	1959      	adds	r1, r3, r5
 80039a0:	00c9      	lsls	r1, r1, #3
 80039a2:	1863      	adds	r3, r4, r1
 80039a4:	0018      	movs	r0, r3
 80039a6:	306d      	adds	r0, #109	@ 0x6d
 80039a8:	30ff      	adds	r0, #255	@ 0xff
 80039aa:	6802      	ldr	r2, [r0, #0]
        ep->xfer_buff += count;
 80039ac:	3808      	subs	r0, #8
        ep->xfer_count += count;
 80039ae:	4442      	add	r2, r8
 80039b0:	6082      	str	r2, [r0, #8]
        ep->xfer_buff += count;
 80039b2:	6802      	ldr	r2, [r0, #0]
 80039b4:	4442      	add	r2, r8
 80039b6:	6002      	str	r2, [r0, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80039b8:	001a      	movs	r2, r3
 80039ba:	3269      	adds	r2, #105	@ 0x69
 80039bc:	32ff      	adds	r2, #255	@ 0xff
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_PCD_IRQHandler+0x20c>
 80039c4:	3361      	adds	r3, #97	@ 0x61
 80039c6:	33ff      	adds	r3, #255	@ 0xff
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4543      	cmp	r3, r8
 80039cc:	d800      	bhi.n	80039d0 <HAL_PCD_IRQHandler+0x20c>
 80039ce:	e1b1      	b.n	8003d34 <HAL_PCD_IRQHandler+0x570>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80039d0:	9b00      	ldr	r3, [sp, #0]
 80039d2:	0020      	movs	r0, r4
 80039d4:	195b      	adds	r3, r3, r5
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	18e3      	adds	r3, r4, r3
 80039da:	3351      	adds	r3, #81	@ 0x51
 80039dc:	33ff      	adds	r3, #255	@ 0xff
 80039de:	7819      	ldrb	r1, [r3, #0]
 80039e0:	f003 fb28 	bl	8007034 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039e4:	6820      	ldr	r0, [r4, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80039e6:	e75a      	b.n	800389e <HAL_PCD_IRQHandler+0xda>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039e8:	4a4d      	ldr	r2, [pc, #308]	@ (8003b20 <HAL_PCD_IRQHandler+0x35c>)
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80039ea:	2100      	movs	r1, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039ec:	4013      	ands	r3, r2
 80039ee:	2280      	movs	r2, #128	@ 0x80
 80039f0:	0212      	lsls	r2, r2, #8
 80039f2:	4313      	orrs	r3, r2
 80039f4:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039f6:	2350      	movs	r3, #80	@ 0x50
 80039f8:	5ac2      	ldrh	r2, [r0, r3]
 80039fa:	7c23      	ldrb	r3, [r4, #16]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	18c3      	adds	r3, r0, r3
 8003a00:	189b      	adds	r3, r3, r2
 8003a02:	4a49      	ldr	r2, [pc, #292]	@ (8003b28 <HAL_PCD_IRQHandler+0x364>)
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a04:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a06:	4694      	mov	ip, r2
 8003a08:	4463      	add	r3, ip
 8003a0a:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8003a0c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a0e:	059b      	lsls	r3, r3, #22
 8003a10:	0d9b      	lsrs	r3, r3, #22
 8003a12:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8003a14:	18d3      	adds	r3, r2, r3
 8003a16:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a18:	f003 fb1a 	bl	8007050 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a1c:	7b23      	ldrb	r3, [r4, #12]
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a1e:	6820      	ldr	r0, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d100      	bne.n	8003a26 <HAL_PCD_IRQHandler+0x262>
 8003a24:	e726      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
 8003a26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d000      	beq.n	8003a2e <HAL_PCD_IRQHandler+0x26a>
 8003a2c:	e722      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003a2e:	2180      	movs	r1, #128	@ 0x80
 8003a30:	7b22      	ldrb	r2, [r4, #12]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	3934      	subs	r1, #52	@ 0x34
 8003a36:	5242      	strh	r2, [r0, r1]
          hpcd->USB_Address = 0U;
 8003a38:	7323      	strb	r3, [r4, #12]
 8003a3a:	e71b      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a3c:	2350      	movs	r3, #80	@ 0x50
 8003a3e:	5ac2      	ldrh	r2, [r0, r3]
 8003a40:	3301      	adds	r3, #1
 8003a42:	33ff      	adds	r3, #255	@ 0xff
 8003a44:	5ce3      	ldrb	r3, [r4, r3]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a46:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	18c3      	adds	r3, r0, r3
 8003a4c:	189b      	adds	r3, r3, r2
 8003a4e:	4a39      	ldr	r2, [pc, #228]	@ (8003b34 <HAL_PCD_IRQHandler+0x370>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a50:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a52:	4694      	mov	ip, r2
 8003a54:	0022      	movs	r2, r4
 8003a56:	4463      	add	r3, ip
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	3251      	adds	r2, #81	@ 0x51
 8003a5c:	059b      	lsls	r3, r3, #22
 8003a5e:	0d9b      	lsrs	r3, r3, #22
 8003a60:	32ff      	adds	r2, #255	@ 0xff
 8003a62:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003a64:	1861      	adds	r1, r4, r1
 8003a66:	88d2      	ldrh	r2, [r2, #6]
 8003a68:	f002 fb0a 	bl	8006080 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a6c:	6822      	ldr	r2, [r4, #0]
 8003a6e:	4930      	ldr	r1, [pc, #192]	@ (8003b30 <HAL_PCD_IRQHandler+0x36c>)
 8003a70:	8813      	ldrh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003a72:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a74:	400b      	ands	r3, r1
 8003a76:	2180      	movs	r1, #128	@ 0x80
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003a7c:	f003 fad0 	bl	8007020 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a80:	6820      	ldr	r0, [r4, #0]
 8003a82:	e6f7      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
          if (ep->type == EP_TYPE_BULK)
 8003a84:	2654      	movs	r6, #84	@ 0x54
 8003a86:	36ff      	adds	r6, #255	@ 0xff
 8003a88:	46b4      	mov	ip, r6
 8003a8a:	449c      	add	ip, r3
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a8c:	0019      	movs	r1, r3
          if (ep->type == EP_TYPE_BULK)
 8003a8e:	4666      	mov	r6, ip
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a90:	3151      	adds	r1, #81	@ 0x51
          if (ep->type == EP_TYPE_BULK)
 8003a92:	7836      	ldrb	r6, [r6, #0]
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a94:	31ff      	adds	r1, #255	@ 0xff

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a96:	780a      	ldrb	r2, [r1, #0]
          if (ep->type == EP_TYPE_BULK)
 8003a98:	2e02      	cmp	r6, #2
 8003a9a:	d100      	bne.n	8003a9e <HAL_PCD_IRQHandler+0x2da>
 8003a9c:	e1fe      	b.n	8003e9c <HAL_PCD_IRQHandler+0x6d8>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	4694      	mov	ip, r2
 8003aa2:	4484      	add	ip, r0
 8003aa4:	4662      	mov	r2, ip
 8003aa6:	4e24      	ldr	r6, [pc, #144]	@ (8003b38 <HAL_PCD_IRQHandler+0x374>)
 8003aa8:	8812      	ldrh	r2, [r2, #0]
 8003aaa:	4032      	ands	r2, r6
 8003aac:	4e23      	ldr	r6, [pc, #140]	@ (8003b3c <HAL_PCD_IRQHandler+0x378>)
 8003aae:	4332      	orrs	r2, r6
 8003ab0:	4666      	mov	r6, ip
 8003ab2:	8032      	strh	r2, [r6, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ab4:	780a      	ldrb	r2, [r1, #0]
 8003ab6:	0091      	lsls	r1, r2, #2
 8003ab8:	1841      	adds	r1, r0, r1
 8003aba:	8809      	ldrh	r1, [r1, #0]
 8003abc:	0449      	lsls	r1, r1, #17
 8003abe:	d400      	bmi.n	8003ac2 <HAL_PCD_IRQHandler+0x2fe>
 8003ac0:	e140      	b.n	8003d44 <HAL_PCD_IRQHandler+0x580>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ac2:	2150      	movs	r1, #80	@ 0x50
 8003ac4:	5a41      	ldrh	r1, [r0, r1]
 8003ac6:	00d2      	lsls	r2, r2, #3
 8003ac8:	1852      	adds	r2, r2, r1
 8003aca:	4917      	ldr	r1, [pc, #92]	@ (8003b28 <HAL_PCD_IRQHandler+0x364>)
 8003acc:	1812      	adds	r2, r2, r0
 8003ace:	468c      	mov	ip, r1
 8003ad0:	4462      	add	r2, ip
 8003ad2:	8812      	ldrh	r2, [r2, #0]
 8003ad4:	0592      	lsls	r2, r2, #22
 8003ad6:	0d91      	lsrs	r1, r2, #22
 8003ad8:	4688      	mov	r8, r1
              if (count != 0U)
 8003ada:	2a00      	cmp	r2, #0
 8003adc:	d100      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0x31c>
 8003ade:	e75b      	b.n	8003998 <HAL_PCD_IRQHandler+0x1d4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	3259      	adds	r2, #89	@ 0x59
 8003ae4:	e142      	b.n	8003d6c <HAL_PCD_IRQHandler+0x5a8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ae6:	2244      	movs	r2, #68	@ 0x44
  __HAL_LOCK(hpcd);
 8003ae8:	25a4      	movs	r5, #164	@ 0xa4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003aea:	6821      	ldr	r1, [r4, #0]
 8003aec:	4814      	ldr	r0, [pc, #80]	@ (8003b40 <HAL_PCD_IRQHandler+0x37c>)
 8003aee:	5a8b      	ldrh	r3, [r1, r2]
  __HAL_LOCK(hpcd);
 8003af0:	00ad      	lsls	r5, r5, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003af2:	4003      	ands	r3, r0
 8003af4:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResetCallback(hpcd);
 8003af6:	0020      	movs	r0, r4
 8003af8:	f003 fabe 	bl	8007078 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8003afc:	5d63      	ldrb	r3, [r4, r5]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d100      	bne.n	8003b04 <HAL_PCD_IRQHandler+0x340>
 8003b02:	e699      	b.n	8003838 <HAL_PCD_IRQHandler+0x74>
 8003b04:	2301      	movs	r3, #1
 8003b06:	5563      	strb	r3, [r4, r5]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b08:	2100      	movs	r1, #0
 8003b0a:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 8003b0c:	7326      	strb	r6, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b0e:	f002 fa8b 	bl	8006028 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b12:	5566      	strb	r6, [r4, r5]
  return HAL_OK;
 8003b14:	e690      	b.n	8003838 <HAL_PCD_IRQHandler+0x74>
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	fffffeff 	.word	0xfffffeff
 8003b1c:	ffffbfff 	.word	0xffffbfff
 8003b20:	ffff8f0f 	.word	0xffff8f0f
 8003b24:	ffff8000 	.word	0xffff8000
 8003b28:	00000402 	.word	0x00000402
 8003b2c:	ffffefff 	.word	0xffffefff
 8003b30:	00000f8f 	.word	0x00000f8f
 8003b34:	00000406 	.word	0x00000406
 8003b38:	ffff8f8f 	.word	0xffff8f8f
 8003b3c:	000080c0 	.word	0x000080c0
 8003b40:	fffffbff 	.word	0xfffffbff
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b44:	8803      	ldrh	r3, [r0, #0]
 8003b46:	4aca      	ldr	r2, [pc, #808]	@ (8003e70 <HAL_PCD_IRQHandler+0x6ac>)
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b48:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2280      	movs	r2, #128	@ 0x80
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b52:	2350      	movs	r3, #80	@ 0x50
 8003b54:	5ac2      	ldrh	r2, [r0, r3]
 8003b56:	3301      	adds	r3, #1
 8003b58:	33ff      	adds	r3, #255	@ 0xff
 8003b5a:	5ce3      	ldrb	r3, [r4, r3]
 8003b5c:	3551      	adds	r5, #81	@ 0x51
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	18c3      	adds	r3, r0, r3
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	4ac3      	ldr	r2, [pc, #780]	@ (8003e74 <HAL_PCD_IRQHandler+0x6b0>)
 8003b66:	35ff      	adds	r5, #255	@ 0xff
 8003b68:	4694      	mov	ip, r2
 8003b6a:	4463      	add	r3, ip
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	059b      	lsls	r3, r3, #22
 8003b70:	0d9b      	lsrs	r3, r3, #22
 8003b72:	61eb      	str	r3, [r5, #28]
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003b74:	d00e      	beq.n	8003b94 <HAL_PCD_IRQHandler+0x3d0>
 8003b76:	6969      	ldr	r1, [r5, #20]
 8003b78:	2900      	cmp	r1, #0
 8003b7a:	d00b      	beq.n	8003b94 <HAL_PCD_IRQHandler+0x3d0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003b7c:	88ea      	ldrh	r2, [r5, #6]
 8003b7e:	f002 fa7f 	bl	8006080 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003b82:	696b      	ldr	r3, [r5, #20]
 8003b84:	69ea      	ldr	r2, [r5, #28]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b86:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8003b88:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b8a:	2100      	movs	r1, #0
            ep->xfer_buff += ep->xfer_count;
 8003b8c:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003b8e:	f003 fa51 	bl	8007034 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	8803      	ldrh	r3, [r0, #0]
 8003b96:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003b98:	051b      	lsls	r3, r3, #20
 8003b9a:	d500      	bpl.n	8003b9e <HAL_PCD_IRQHandler+0x3da>
 8003b9c:	e66a      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
 8003b9e:	23c0      	movs	r3, #192	@ 0xc0
 8003ba0:	019b      	lsls	r3, r3, #6
 8003ba2:	401a      	ands	r2, r3
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d100      	bne.n	8003baa <HAL_PCD_IRQHandler+0x3e6>
 8003ba8:	e664      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003baa:	2350      	movs	r3, #80	@ 0x50
 8003bac:	5ac2      	ldrh	r2, [r0, r3]
 8003bae:	4bb1      	ldr	r3, [pc, #708]	@ (8003e74 <HAL_PCD_IRQHandler+0x6b0>)
 8003bb0:	18c3      	adds	r3, r0, r3
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	0592      	lsls	r2, r2, #22
 8003bb8:	0d92      	lsrs	r2, r2, #22
 8003bba:	801a      	strh	r2, [r3, #0]
 8003bbc:	692a      	ldr	r2, [r5, #16]
 8003bbe:	2a00      	cmp	r2, #0
 8003bc0:	d000      	beq.n	8003bc4 <HAL_PCD_IRQHandler+0x400>
 8003bc2:	e1be      	b.n	8003f42 <HAL_PCD_IRQHandler+0x77e>
 8003bc4:	2180      	movs	r1, #128	@ 0x80
 8003bc6:	881a      	ldrh	r2, [r3, #0]
 8003bc8:	0209      	lsls	r1, r1, #8
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003bce:	8802      	ldrh	r2, [r0, #0]
 8003bd0:	4ba9      	ldr	r3, [pc, #676]	@ (8003e78 <HAL_PCD_IRQHandler+0x6b4>)
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	23c0      	movs	r3, #192	@ 0xc0
 8003bd6:	019b      	lsls	r3, r3, #6
 8003bd8:	4053      	eors	r3, r2
 8003bda:	4aa8      	ldr	r2, [pc, #672]	@ (8003e7c <HAL_PCD_IRQHandler+0x6b8>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	8003      	strh	r3, [r0, #0]
 8003be0:	e648      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003be2:	2244      	movs	r2, #68	@ 0x44
 8003be4:	6821      	ldr	r1, [r4, #0]
 8003be6:	48a6      	ldr	r0, [pc, #664]	@ (8003e80 <HAL_PCD_IRQHandler+0x6bc>)
 8003be8:	5a8b      	ldrh	r3, [r1, r2]
 8003bea:	4003      	ands	r3, r0
 8003bec:	528b      	strh	r3, [r1, r2]
    return;
 8003bee:	e623      	b.n	8003838 <HAL_PCD_IRQHandler+0x74>
          ep->xfer_len = 0U;
 8003bf0:	1c69      	adds	r1, r5, #1
 8003bf2:	008b      	lsls	r3, r1, #2
 8003bf4:	185b      	adds	r3, r3, r1
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	5119      	str	r1, [r3, r4]
          if (ep->doublebuffer != 0U)
 8003bfc:	7f13      	ldrb	r3, [r2, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01b      	beq.n	8003c3a <HAL_PCD_IRQHandler+0x476>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c02:	2340      	movs	r3, #64	@ 0x40
 8003c04:	001e      	movs	r6, r3
 8003c06:	403e      	ands	r6, r7
 8003c08:	423b      	tst	r3, r7
 8003c0a:	d000      	beq.n	8003c0e <HAL_PCD_IRQHandler+0x44a>
 8003c0c:	e0f0      	b.n	8003df0 <HAL_PCD_IRQHandler+0x62c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c0e:	7c53      	ldrb	r3, [r2, #17]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d000      	beq.n	8003c16 <HAL_PCD_IRQHandler+0x452>
 8003c14:	e22c      	b.n	8004070 <HAL_PCD_IRQHandler+0x8ac>
 8003c16:	3350      	adds	r3, #80	@ 0x50
 8003c18:	5ac1      	ldrh	r1, [r0, r3]
 8003c1a:	7c13      	ldrb	r3, [r2, #16]
 8003c1c:	4a95      	ldr	r2, [pc, #596]	@ (8003e74 <HAL_PCD_IRQHandler+0x6b0>)
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4690      	mov	r8, r2
 8003c22:	4443      	add	r3, r8
 8003c24:	181b      	adds	r3, r3, r0
 8003c26:	185b      	adds	r3, r3, r1
 8003c28:	4661      	mov	r1, ip
 8003c2a:	881a      	ldrh	r2, [r3, #0]
 8003c2c:	0592      	lsls	r2, r2, #22
 8003c2e:	0d92      	lsrs	r2, r2, #22
 8003c30:	801a      	strh	r2, [r3, #0]
 8003c32:	881a      	ldrh	r2, [r3, #0]
 8003c34:	4311      	orrs	r1, r2
 8003c36:	b28a      	uxth	r2, r1
 8003c38:	801a      	strh	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c3a:	9b00      	ldr	r3, [sp, #0]
 8003c3c:	0020      	movs	r0, r4
 8003c3e:	469c      	mov	ip, r3
 8003c40:	4465      	add	r5, ip
 8003c42:	00ed      	lsls	r5, r5, #3
 8003c44:	1965      	adds	r5, r4, r5
 8003c46:	7c29      	ldrb	r1, [r5, #16]
 8003c48:	f003 fa02 	bl	8007050 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c4c:	6820      	ldr	r0, [r4, #0]
 8003c4e:	e611      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
 8003c50:	9b03      	ldr	r3, [sp, #12]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c52:	0020      	movs	r0, r4
 8003c54:	4649      	mov	r1, r9
 8003c56:	6293      	str	r3, [r2, #40]	@ 0x28
 8003c58:	f003 f9fa 	bl	8007050 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	e609      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c60:	2180      	movs	r1, #128	@ 0x80
 8003c62:	01c9      	lsls	r1, r1, #7
 8003c64:	4039      	ands	r1, r7
 8003c66:	000e      	movs	r6, r1
 8003c68:	9103      	str	r1, [sp, #12]
 8003c6a:	2140      	movs	r1, #64	@ 0x40
 8003c6c:	000b      	movs	r3, r1
 8003c6e:	403b      	ands	r3, r7
 8003c70:	4698      	mov	r8, r3
 8003c72:	4239      	tst	r1, r7
 8003c74:	d100      	bne.n	8003c78 <HAL_PCD_IRQHandler+0x4b4>
 8003c76:	e082      	b.n	8003d7e <HAL_PCD_IRQHandler+0x5ba>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c78:	4b82      	ldr	r3, [pc, #520]	@ (8003e84 <HAL_PCD_IRQHandler+0x6c0>)
 8003c7a:	2750      	movs	r7, #80	@ 0x50
 8003c7c:	4698      	mov	r8, r3
 8003c7e:	5bc1      	ldrh	r1, [r0, r7]
 8003c80:	9b02      	ldr	r3, [sp, #8]
 8003c82:	4480      	add	r8, r0
 8003c84:	4441      	add	r1, r8
 8003c86:	5ac9      	ldrh	r1, [r1, r3]

    if (ep->xfer_len > TxPctSize)
 8003c88:	9b01      	ldr	r3, [sp, #4]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c8a:	0589      	lsls	r1, r1, #22
 8003c8c:	0d89      	lsrs	r1, r1, #22
    if (ep->xfer_len > TxPctSize)
 8003c8e:	4299      	cmp	r1, r3
 8003c90:	d300      	bcc.n	8003c94 <HAL_PCD_IRQHandler+0x4d0>
 8003c92:	e1a2      	b.n	8003fda <HAL_PCD_IRQHandler+0x816>
    {
      ep->xfer_len -= TxPctSize;
 8003c94:	1a5b      	subs	r3, r3, r1
 8003c96:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c98:	2e00      	cmp	r6, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_PCD_IRQHandler+0x4ea>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c9c:	464b      	mov	r3, r9
 8003c9e:	009f      	lsls	r7, r3, #2
 8003ca0:	19c7      	adds	r7, r0, r7
 8003ca2:	883b      	ldrh	r3, [r7, #0]
 8003ca4:	4e78      	ldr	r6, [pc, #480]	@ (8003e88 <HAL_PCD_IRQHandler+0x6c4>)
 8003ca6:	4033      	ands	r3, r6
 8003ca8:	4e78      	ldr	r6, [pc, #480]	@ (8003e8c <HAL_PCD_IRQHandler+0x6c8>)
 8003caa:	4333      	orrs	r3, r6
 8003cac:	803b      	strh	r3, [r7, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cae:	9b00      	ldr	r3, [sp, #0]
 8003cb0:	195b      	adds	r3, r3, r5
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	18e3      	adds	r3, r4, r3
 8003cb6:	001f      	movs	r7, r3
 8003cb8:	3734      	adds	r7, #52	@ 0x34
 8003cba:	783e      	ldrb	r6, [r7, #0]
 8003cbc:	2e01      	cmp	r6, #1
 8003cbe:	d000      	beq.n	8003cc2 <HAL_PCD_IRQHandler+0x4fe>
 8003cc0:	e084      	b.n	8003dcc <HAL_PCD_IRQHandler+0x608>
      {
        ep->xfer_buff += TxPctSize;
 8003cc2:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8003cc4:	46b1      	mov	r9, r6
 8003cc6:	4489      	add	r9, r1
 8003cc8:	464e      	mov	r6, r9
 8003cca:	625e      	str	r6, [r3, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8003ccc:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8003cce:	46b4      	mov	ip, r6
 8003cd0:	448c      	add	ip, r1
 8003cd2:	4666      	mov	r6, ip
 8003cd4:	62d6      	str	r6, [r2, #44]	@ 0x2c

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd8:	4694      	mov	ip, r2
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	4594      	cmp	ip, r2
 8003cde:	d200      	bcs.n	8003ce2 <HAL_PCD_IRQHandler+0x51e>
 8003ce0:	e288      	b.n	80041f4 <HAL_PCD_IRQHandler+0xa30>
        {
          len = ep->maxpacket;
          ep->xfer_len_db -= len;
 8003ce2:	4661      	mov	r1, ip
 8003ce4:	1a89      	subs	r1, r1, r2
 8003ce6:	6319      	str	r1, [r3, #48]	@ 0x30
          ep->xfer_len_db = 0U;
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ce8:	b291      	uxth	r1, r2
 8003cea:	9b00      	ldr	r3, [sp, #0]
 8003cec:	195b      	adds	r3, r3, r5
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	18e3      	adds	r3, r4, r3
 8003cf2:	7c5b      	ldrb	r3, [r3, #17]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d000      	beq.n	8003cfa <HAL_PCD_IRQHandler+0x536>
 8003cf8:	e271      	b.n	80041de <HAL_PCD_IRQHandler+0xa1a>
 8003cfa:	9e02      	ldr	r6, [sp, #8]
 8003cfc:	3350      	adds	r3, #80	@ 0x50
 8003cfe:	46b4      	mov	ip, r6
 8003d00:	5ac3      	ldrh	r3, [r0, r3]
 8003d02:	4443      	add	r3, r8
 8003d04:	4463      	add	r3, ip
 8003d06:	881f      	ldrh	r7, [r3, #0]
 8003d08:	05bf      	lsls	r7, r7, #22
 8003d0a:	0dbf      	lsrs	r7, r7, #22
 8003d0c:	801f      	strh	r7, [r3, #0]
 8003d0e:	2a00      	cmp	r2, #0
 8003d10:	d000      	beq.n	8003d14 <HAL_PCD_IRQHandler+0x550>
 8003d12:	e2aa      	b.n	800426a <HAL_PCD_IRQHandler+0xaa6>
 8003d14:	2780      	movs	r7, #128	@ 0x80
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	023f      	lsls	r7, r7, #8
 8003d1a:	433a      	orrs	r2, r7
 8003d1c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d1e:	9b00      	ldr	r3, [sp, #0]
 8003d20:	195b      	adds	r3, r3, r5
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	18e3      	adds	r3, r4, r3
 8003d26:	8b1a      	ldrh	r2, [r3, #24]
 8003d28:	000b      	movs	r3, r1
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	f002 f990 	bl	8006050 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d30:	6820      	ldr	r0, [r4, #0]
 8003d32:	e04b      	b.n	8003dcc <HAL_PCD_IRQHandler+0x608>
        ep = &hpcd->OUT_ep[epindex];
 8003d34:	3151      	adds	r1, #81	@ 0x51
 8003d36:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d38:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003d3a:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d3c:	f001 fe18 	bl	8005970 <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	e5ac      	b.n	800389e <HAL_PCD_IRQHandler+0xda>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d44:	2150      	movs	r1, #80	@ 0x50
 8003d46:	5a41      	ldrh	r1, [r0, r1]
 8003d48:	00d2      	lsls	r2, r2, #3
 8003d4a:	1852      	adds	r2, r2, r1
 8003d4c:	4949      	ldr	r1, [pc, #292]	@ (8003e74 <HAL_PCD_IRQHandler+0x6b0>)
 8003d4e:	1812      	adds	r2, r2, r0
 8003d50:	468c      	mov	ip, r1
 8003d52:	4462      	add	r2, ip
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	0592      	lsls	r2, r2, #22
 8003d58:	0d91      	lsrs	r1, r2, #22
 8003d5a:	4688      	mov	r8, r1
              if (count != 0U)
 8003d5c:	2a00      	cmp	r2, #0
 8003d5e:	d100      	bne.n	8003d62 <HAL_PCD_IRQHandler+0x59e>
 8003d60:	e61a      	b.n	8003998 <HAL_PCD_IRQHandler+0x1d4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d62:	001a      	movs	r2, r3
 8003d64:	325b      	adds	r2, #91	@ 0x5b
 8003d66:	e001      	b.n	8003d6c <HAL_PCD_IRQHandler+0x5a8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003d68:	001a      	movs	r2, r3
 8003d6a:	3257      	adds	r2, #87	@ 0x57
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003d6c:	3365      	adds	r3, #101	@ 0x65
 8003d6e:	33ff      	adds	r3, #255	@ 0xff
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d70:	32ff      	adds	r2, #255	@ 0xff
 8003d72:	6819      	ldr	r1, [r3, #0]
 8003d74:	8812      	ldrh	r2, [r2, #0]
 8003d76:	4643      	mov	r3, r8
 8003d78:	f002 f982 	bl	8006080 <USB_ReadPMA>
 8003d7c:	e60e      	b.n	800399c <HAL_PCD_IRQHandler+0x1d8>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003e74 <HAL_PCD_IRQHandler+0x6b0>)
 8003d80:	2150      	movs	r1, #80	@ 0x50
 8003d82:	469c      	mov	ip, r3
 8003d84:	5a41      	ldrh	r1, [r0, r1]
 8003d86:	9b02      	ldr	r3, [sp, #8]
 8003d88:	4484      	add	ip, r0
 8003d8a:	4461      	add	r1, ip
 8003d8c:	5ac9      	ldrh	r1, [r1, r3]
    if (ep->xfer_len >= TxPctSize)
 8003d8e:	9b01      	ldr	r3, [sp, #4]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d90:	0589      	lsls	r1, r1, #22
 8003d92:	0d89      	lsrs	r1, r1, #22
    if (ep->xfer_len >= TxPctSize)
 8003d94:	4299      	cmp	r1, r3
 8003d96:	d900      	bls.n	8003d9a <HAL_PCD_IRQHandler+0x5d6>
 8003d98:	e0e0      	b.n	8003f5c <HAL_PCD_IRQHandler+0x798>
      ep->xfer_len -= TxPctSize;
 8003d9a:	1a5b      	subs	r3, r3, r1
 8003d9c:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8003d9e:	d100      	bne.n	8003da2 <HAL_PCD_IRQHandler+0x5de>
 8003da0:	e0de      	b.n	8003f60 <HAL_PCD_IRQHandler+0x79c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003da2:	2e00      	cmp	r6, #0
 8003da4:	d108      	bne.n	8003db8 <HAL_PCD_IRQHandler+0x5f4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003da6:	464b      	mov	r3, r9
 8003da8:	009f      	lsls	r7, r3, #2
 8003daa:	19c7      	adds	r7, r0, r7
 8003dac:	883b      	ldrh	r3, [r7, #0]
 8003dae:	4e36      	ldr	r6, [pc, #216]	@ (8003e88 <HAL_PCD_IRQHandler+0x6c4>)
 8003db0:	4033      	ands	r3, r6
 8003db2:	4e36      	ldr	r6, [pc, #216]	@ (8003e8c <HAL_PCD_IRQHandler+0x6c8>)
 8003db4:	4333      	orrs	r3, r6
 8003db6:	803b      	strh	r3, [r7, #0]
      if (ep->xfer_fill_db == 1U)
 8003db8:	9b00      	ldr	r3, [sp, #0]
 8003dba:	195b      	adds	r3, r3, r5
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	18e3      	adds	r3, r4, r3
 8003dc0:	001f      	movs	r7, r3
 8003dc2:	3734      	adds	r7, #52	@ 0x34
 8003dc4:	783e      	ldrb	r6, [r7, #0]
 8003dc6:	2e01      	cmp	r6, #1
 8003dc8:	d100      	bne.n	8003dcc <HAL_PCD_IRQHandler+0x608>
 8003dca:	e1cf      	b.n	800416c <HAL_PCD_IRQHandler+0x9a8>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003dcc:	9b00      	ldr	r3, [sp, #0]
 8003dce:	4a30      	ldr	r2, [pc, #192]	@ (8003e90 <HAL_PCD_IRQHandler+0x6cc>)
 8003dd0:	469c      	mov	ip, r3
 8003dd2:	4465      	add	r5, ip
 8003dd4:	00ed      	lsls	r5, r5, #3
 8003dd6:	1965      	adds	r5, r4, r5
 8003dd8:	7c2b      	ldrb	r3, [r5, #16]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	18c3      	adds	r3, r0, r3
 8003dde:	8819      	ldrh	r1, [r3, #0]
 8003de0:	4011      	ands	r1, r2
 8003de2:	2230      	movs	r2, #48	@ 0x30
 8003de4:	4051      	eors	r1, r2
 8003de6:	4a2b      	ldr	r2, [pc, #172]	@ (8003e94 <HAL_PCD_IRQHandler+0x6d0>)
 8003de8:	430a      	orrs	r2, r1
 8003dea:	b292      	uxth	r2, r2
 8003dec:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003dee:	e541      	b.n	8003874 <HAL_PCD_IRQHandler+0xb0>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003df0:	7c53      	ldrb	r3, [r2, #17]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d000      	beq.n	8003df8 <HAL_PCD_IRQHandler+0x634>
 8003df6:	e12d      	b.n	8004054 <HAL_PCD_IRQHandler+0x890>
 8003df8:	3350      	adds	r3, #80	@ 0x50
 8003dfa:	5ac1      	ldrh	r1, [r0, r3]
 8003dfc:	7c13      	ldrb	r3, [r2, #16]
 8003dfe:	4a21      	ldr	r2, [pc, #132]	@ (8003e84 <HAL_PCD_IRQHandler+0x6c0>)
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	e70d      	b.n	8003c20 <HAL_PCD_IRQHandler+0x45c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003e04:	2044      	movs	r0, #68	@ 0x44
 8003e06:	6822      	ldr	r2, [r4, #0]
 8003e08:	5a11      	ldrh	r1, [r2, r0]
 8003e0a:	4399      	bics	r1, r3
    if (hpcd->LPM_State == LPM_L0)
 8003e0c:	23b2      	movs	r3, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003e0e:	5211      	strh	r1, [r2, r0]
    if (hpcd->LPM_State == LPM_L0)
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	5ce1      	ldrb	r1, [r4, r3]
 8003e14:	2900      	cmp	r1, #0
 8003e16:	d000      	beq.n	8003e1a <HAL_PCD_IRQHandler+0x656>
 8003e18:	e08f      	b.n	8003f3a <HAL_PCD_IRQHandler+0x776>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003e1a:	2504      	movs	r5, #4
 8003e1c:	3140      	adds	r1, #64	@ 0x40
 8003e1e:	5a50      	ldrh	r0, [r2, r1]
 8003e20:	4328      	orrs	r0, r5
 8003e22:	5250      	strh	r0, [r2, r1]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e24:	5a50      	ldrh	r0, [r2, r1]
 8003e26:	3504      	adds	r5, #4
 8003e28:	4328      	orrs	r0, r5
 8003e2a:	5250      	strh	r0, [r2, r1]
      hpcd->LPM_State = LPM_L1;
 8003e2c:	393f      	subs	r1, #63	@ 0x3f
 8003e2e:	54e1      	strb	r1, [r4, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003e30:	2354      	movs	r3, #84	@ 0x54
 8003e32:	5ad2      	ldrh	r2, [r2, r3]
 8003e34:	3b18      	subs	r3, #24
 8003e36:	0892      	lsrs	r2, r2, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	22b3      	movs	r2, #179	@ 0xb3
 8003e3c:	0092      	lsls	r2, r2, #2
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e3e:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003e40:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003e42:	f000 fbbf 	bl	80045c4 <HAL_PCDEx_LPM_Callback>
 8003e46:	e4f7      	b.n	8003838 <HAL_PCD_IRQHandler+0x74>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e48:	2240      	movs	r2, #64	@ 0x40
 8003e4a:	2008      	movs	r0, #8
 8003e4c:	6823      	ldr	r3, [r4, #0]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e4e:	4d12      	ldr	r5, [pc, #72]	@ (8003e98 <HAL_PCD_IRQHandler+0x6d4>)
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e50:	5a99      	ldrh	r1, [r3, r2]
 8003e52:	4301      	orrs	r1, r0
 8003e54:	5299      	strh	r1, [r3, r2]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e56:	303c      	adds	r0, #60	@ 0x3c
 8003e58:	5a19      	ldrh	r1, [r3, r0]
 8003e5a:	4029      	ands	r1, r5
 8003e5c:	5219      	strh	r1, [r3, r0]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003e5e:	5a99      	ldrh	r1, [r3, r2]
 8003e60:	3840      	subs	r0, #64	@ 0x40
 8003e62:	4301      	orrs	r1, r0
 8003e64:	5299      	strh	r1, [r3, r2]
    HAL_PCD_SuspendCallback(hpcd);
 8003e66:	0020      	movs	r0, r4
 8003e68:	f003 f918 	bl	800709c <HAL_PCD_SuspendCallback>
    return;
 8003e6c:	e4e4      	b.n	8003838 <HAL_PCD_IRQHandler+0x74>
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	00000f8f 	.word	0x00000f8f
 8003e74:	00000406 	.word	0x00000406
 8003e78:	ffffbf8f 	.word	0xffffbf8f
 8003e7c:	00008080 	.word	0x00008080
 8003e80:	ffffdfff 	.word	0xffffdfff
 8003e84:	00000402 	.word	0x00000402
 8003e88:	ffff8f8f 	.word	0xffff8f8f
 8003e8c:	0000c080 	.word	0x0000c080
 8003e90:	ffff8fbf 	.word	0xffff8fbf
 8003e94:	ffff8080 	.word	0xffff8080
 8003e98:	fffff7ff 	.word	0xfffff7ff
    if (ep->xfer_len >= count)
 8003e9c:	3667      	adds	r6, #103	@ 0x67
 8003e9e:	36ff      	adds	r6, #255	@ 0xff
 8003ea0:	46b4      	mov	ip, r6
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ea2:	2680      	movs	r6, #128	@ 0x80
 8003ea4:	01f6      	lsls	r6, r6, #7
 8003ea6:	46b0      	mov	r8, r6
    if (ep->xfer_len >= count)
 8003ea8:	449c      	add	ip, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eaa:	403e      	ands	r6, r7
    if (ep->xfer_len >= count)
 8003eac:	4663      	mov	r3, ip
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eae:	46b1      	mov	r9, r6
 8003eb0:	4646      	mov	r6, r8
    if (ep->xfer_len >= count)
 8003eb2:	681b      	ldr	r3, [r3, #0]
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003eb4:	00d1      	lsls	r1, r2, #3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003eb6:	4237      	tst	r7, r6
 8003eb8:	d100      	bne.n	8003ebc <HAL_PCD_IRQHandler+0x6f8>
 8003eba:	e0e7      	b.n	800408c <HAL_PCD_IRQHandler+0x8c8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ebc:	2650      	movs	r6, #80	@ 0x50
 8003ebe:	5b86      	ldrh	r6, [r0, r6]
 8003ec0:	46b0      	mov	r8, r6
 8003ec2:	4ecf      	ldr	r6, [pc, #828]	@ (8004200 <HAL_PCD_IRQHandler+0xa3c>)
 8003ec4:	4441      	add	r1, r8
 8003ec6:	46b0      	mov	r8, r6
 8003ec8:	1809      	adds	r1, r1, r0
 8003eca:	4441      	add	r1, r8
 8003ecc:	8809      	ldrh	r1, [r1, #0]
 8003ece:	0589      	lsls	r1, r1, #22
 8003ed0:	0d89      	lsrs	r1, r1, #22
    if (ep->xfer_len >= count)
 8003ed2:	4688      	mov	r8, r1
 8003ed4:	4299      	cmp	r1, r3
 8003ed6:	d900      	bls.n	8003eda <HAL_PCD_IRQHandler+0x716>
 8003ed8:	e140      	b.n	800415c <HAL_PCD_IRQHandler+0x998>
      ep->xfer_len -= count;
 8003eda:	4666      	mov	r6, ip
 8003edc:	1a5b      	subs	r3, r3, r1
 8003ede:	6033      	str	r3, [r6, #0]
    if (ep->xfer_len == 0U)
 8003ee0:	d10d      	bne.n	8003efe <HAL_PCD_IRQHandler+0x73a>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ee2:	0093      	lsls	r3, r2, #2
 8003ee4:	469c      	mov	ip, r3
 8003ee6:	4484      	add	ip, r0
 8003ee8:	4663      	mov	r3, ip
 8003eea:	4ec6      	ldr	r6, [pc, #792]	@ (8004204 <HAL_PCD_IRQHandler+0xa40>)
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	401e      	ands	r6, r3
 8003ef0:	2380      	movs	r3, #128	@ 0x80
 8003ef2:	019b      	lsls	r3, r3, #6
 8003ef4:	4073      	eors	r3, r6
 8003ef6:	4ec4      	ldr	r6, [pc, #784]	@ (8004208 <HAL_PCD_IRQHandler+0xa44>)
 8003ef8:	4333      	orrs	r3, r6
 8003efa:	4666      	mov	r6, ip
 8003efc:	8033      	strh	r3, [r6, #0]
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003efe:	067b      	lsls	r3, r7, #25
 8003f00:	d507      	bpl.n	8003f12 <HAL_PCD_IRQHandler+0x74e>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f02:	0092      	lsls	r2, r2, #2
 8003f04:	1882      	adds	r2, r0, r2
 8003f06:	8813      	ldrh	r3, [r2, #0]
 8003f08:	4ec0      	ldr	r6, [pc, #768]	@ (800420c <HAL_PCD_IRQHandler+0xa48>)
 8003f0a:	4033      	ands	r3, r6
 8003f0c:	4ec0      	ldr	r6, [pc, #768]	@ (8004210 <HAL_PCD_IRQHandler+0xa4c>)
 8003f0e:	4333      	orrs	r3, r6
 8003f10:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8003f12:	2900      	cmp	r1, #0
 8003f14:	d100      	bne.n	8003f18 <HAL_PCD_IRQHandler+0x754>
 8003f16:	e541      	b.n	800399c <HAL_PCD_IRQHandler+0x1d8>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f18:	9b00      	ldr	r3, [sp, #0]
 8003f1a:	195b      	adds	r3, r3, r5
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	18e3      	adds	r3, r4, r3
 8003f20:	001a      	movs	r2, r3
 8003f22:	3259      	adds	r2, #89	@ 0x59
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f24:	3365      	adds	r3, #101	@ 0x65
 8003f26:	33ff      	adds	r3, #255	@ 0xff
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	32ff      	adds	r2, #255	@ 0xff
 8003f2c:	469c      	mov	ip, r3
 8003f2e:	8812      	ldrh	r2, [r2, #0]
 8003f30:	000b      	movs	r3, r1
 8003f32:	4661      	mov	r1, ip
 8003f34:	f002 f8a4 	bl	8006080 <USB_ReadPMA>
 8003f38:	e530      	b.n	800399c <HAL_PCD_IRQHandler+0x1d8>
      HAL_PCD_SuspendCallback(hpcd);
 8003f3a:	0020      	movs	r0, r4
 8003f3c:	f003 f8ae 	bl	800709c <HAL_PCD_SuspendCallback>
 8003f40:	e47a      	b.n	8003838 <HAL_PCD_IRQHandler+0x74>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f42:	2a3e      	cmp	r2, #62	@ 0x3e
 8003f44:	d900      	bls.n	8003f48 <HAL_PCD_IRQHandler+0x784>
 8003f46:	e0d5      	b.n	80040f4 <HAL_PCD_IRQHandler+0x930>
 8003f48:	2501      	movs	r5, #1
 8003f4a:	0851      	lsrs	r1, r2, #1
 8003f4c:	402a      	ands	r2, r5
 8003f4e:	1889      	adds	r1, r1, r2
 8003f50:	881a      	ldrh	r2, [r3, #0]
 8003f52:	0289      	lsls	r1, r1, #10
 8003f54:	430a      	orrs	r2, r1
 8003f56:	b292      	uxth	r2, r2
 8003f58:	801a      	strh	r2, [r3, #0]
 8003f5a:	e638      	b.n	8003bce <HAL_PCD_IRQHandler+0x40a>
 8003f5c:	4643      	mov	r3, r8
 8003f5e:	6293      	str	r3, [r2, #40]	@ 0x28
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f60:	9b00      	ldr	r3, [sp, #0]
 8003f62:	195b      	adds	r3, r3, r5
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	18e3      	adds	r3, r4, r3
 8003f68:	7c5b      	ldrb	r3, [r3, #17]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d000      	beq.n	8003f70 <HAL_PCD_IRQHandler+0x7ac>
 8003f6e:	e0e1      	b.n	8004134 <HAL_PCD_IRQHandler+0x970>
 8003f70:	9e02      	ldr	r6, [sp, #8]
 8003f72:	49a3      	ldr	r1, [pc, #652]	@ (8004200 <HAL_PCD_IRQHandler+0xa3c>)
 8003f74:	2750      	movs	r7, #80	@ 0x50
 8003f76:	4688      	mov	r8, r1
 8003f78:	0033      	movs	r3, r6
 8003f7a:	5bc2      	ldrh	r2, [r0, r7]
 8003f7c:	4443      	add	r3, r8
 8003f7e:	18c3      	adds	r3, r0, r3
 8003f80:	189b      	adds	r3, r3, r2
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	0592      	lsls	r2, r2, #22
 8003f86:	0d92      	lsrs	r2, r2, #22
 8003f88:	801a      	strh	r2, [r3, #0]
 8003f8a:	8819      	ldrh	r1, [r3, #0]
 8003f8c:	4aa1      	ldr	r2, [pc, #644]	@ (8004214 <HAL_PCD_IRQHandler+0xa50>)
 8003f8e:	4311      	orrs	r1, r2
 8003f90:	b289      	uxth	r1, r1
 8003f92:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f94:	5bc3      	ldrh	r3, [r0, r7]
 8003f96:	4463      	add	r3, ip
 8003f98:	46b4      	mov	ip, r6
 8003f9a:	4463      	add	r3, ip
 8003f9c:	8819      	ldrh	r1, [r3, #0]
 8003f9e:	0589      	lsls	r1, r1, #22
 8003fa0:	0d89      	lsrs	r1, r1, #22
 8003fa2:	8019      	strh	r1, [r3, #0]
 8003fa4:	8819      	ldrh	r1, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fac:	0020      	movs	r0, r4
 8003fae:	4649      	mov	r1, r9
 8003fb0:	f003 f84e 	bl	8007050 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fb4:	9b03      	ldr	r3, [sp, #12]
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fb6:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d000      	beq.n	8003fbe <HAL_PCD_IRQHandler+0x7fa>
 8003fbc:	e706      	b.n	8003dcc <HAL_PCD_IRQHandler+0x608>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fbe:	9b00      	ldr	r3, [sp, #0]
 8003fc0:	4992      	ldr	r1, [pc, #584]	@ (800420c <HAL_PCD_IRQHandler+0xa48>)
 8003fc2:	195b      	adds	r3, r3, r5
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	18e3      	adds	r3, r4, r3
 8003fc8:	7c1b      	ldrb	r3, [r3, #16]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	18c3      	adds	r3, r0, r3
 8003fce:	881a      	ldrh	r2, [r3, #0]
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	4991      	ldr	r1, [pc, #580]	@ (8004218 <HAL_PCD_IRQHandler+0xa54>)
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	e6f8      	b.n	8003dcc <HAL_PCD_IRQHandler+0x608>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	6293      	str	r3, [r2, #40]	@ 0x28
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fde:	7c52      	ldrb	r2, [r2, #17]
 8003fe0:	2a00      	cmp	r2, #0
 8003fe2:	d000      	beq.n	8003fe6 <HAL_PCD_IRQHandler+0x822>
 8003fe4:	e094      	b.n	8004110 <HAL_PCD_IRQHandler+0x94c>
 8003fe6:	5bc3      	ldrh	r3, [r0, r7]
 8003fe8:	9902      	ldr	r1, [sp, #8]
 8003fea:	4443      	add	r3, r8
 8003fec:	4688      	mov	r8, r1
 8003fee:	4666      	mov	r6, ip
 8003ff0:	4443      	add	r3, r8
 8003ff2:	881a      	ldrh	r2, [r3, #0]
 8003ff4:	0592      	lsls	r2, r2, #22
 8003ff6:	0d92      	lsrs	r2, r2, #22
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	881a      	ldrh	r2, [r3, #0]
 8003ffc:	4332      	orrs	r2, r6
 8003ffe:	b292      	uxth	r2, r2
 8004000:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004002:	000b      	movs	r3, r1
 8004004:	4985      	ldr	r1, [pc, #532]	@ (800421c <HAL_PCD_IRQHandler+0xa58>)
 8004006:	5bc2      	ldrh	r2, [r0, r7]
 8004008:	4688      	mov	r8, r1
 800400a:	4443      	add	r3, r8
 800400c:	181b      	adds	r3, r3, r0
 800400e:	189b      	adds	r3, r3, r2
 8004010:	881a      	ldrh	r2, [r3, #0]
 8004012:	0592      	lsls	r2, r2, #22
 8004014:	0d92      	lsrs	r2, r2, #22
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	4332      	orrs	r2, r6
 800401c:	b292      	uxth	r2, r2
 800401e:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004020:	0020      	movs	r0, r4
 8004022:	4649      	mov	r1, r9
 8004024:	f003 f814 	bl	8007050 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004028:	9b03      	ldr	r3, [sp, #12]
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800402a:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1c6      	bne.n	8003fbe <HAL_PCD_IRQHandler+0x7fa>
 8004030:	e6cc      	b.n	8003dcc <HAL_PCD_IRQHandler+0x608>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004032:	2244      	movs	r2, #68	@ 0x44
 8004034:	6821      	ldr	r1, [r4, #0]
 8004036:	487a      	ldr	r0, [pc, #488]	@ (8004220 <HAL_PCD_IRQHandler+0xa5c>)
 8004038:	5a8b      	ldrh	r3, [r1, r2]
 800403a:	4003      	ands	r3, r0
 800403c:	528b      	strh	r3, [r1, r2]
    HAL_PCD_SOFCallback(hpcd);
 800403e:	0020      	movs	r0, r4
 8004040:	f003 f812 	bl	8007068 <HAL_PCD_SOFCallback>
    return;
 8004044:	f7ff fbf8 	bl	8003838 <HAL_PCD_IRQHandler+0x74>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004048:	2100      	movs	r1, #0
 800404a:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 800404c:	54e5      	strb	r5, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800404e:	f000 fab9 	bl	80045c4 <HAL_PCDEx_LPM_Callback>
 8004052:	e474      	b.n	800393e <HAL_PCD_IRQHandler+0x17a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004054:	2b01      	cmp	r3, #1
 8004056:	d000      	beq.n	800405a <HAL_PCD_IRQHandler+0x896>
 8004058:	e5ef      	b.n	8003c3a <HAL_PCD_IRQHandler+0x476>
 800405a:	334f      	adds	r3, #79	@ 0x4f
 800405c:	5ac7      	ldrh	r7, [r0, r3]
 800405e:	7c13      	ldrb	r3, [r2, #16]
 8004060:	4a67      	ldr	r2, [pc, #412]	@ (8004200 <HAL_PCD_IRQHandler+0xa3c>)
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4694      	mov	ip, r2
 8004066:	4463      	add	r3, ip
 8004068:	18c3      	adds	r3, r0, r3
 800406a:	19db      	adds	r3, r3, r7
 800406c:	8019      	strh	r1, [r3, #0]
 800406e:	e5e4      	b.n	8003c3a <HAL_PCD_IRQHandler+0x476>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004070:	2b01      	cmp	r3, #1
 8004072:	d000      	beq.n	8004076 <HAL_PCD_IRQHandler+0x8b2>
 8004074:	e5e1      	b.n	8003c3a <HAL_PCD_IRQHandler+0x476>
 8004076:	334f      	adds	r3, #79	@ 0x4f
 8004078:	5ac1      	ldrh	r1, [r0, r3]
 800407a:	7c13      	ldrb	r3, [r2, #16]
 800407c:	4a67      	ldr	r2, [pc, #412]	@ (800421c <HAL_PCD_IRQHandler+0xa58>)
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4694      	mov	ip, r2
 8004082:	4463      	add	r3, ip
 8004084:	181b      	adds	r3, r3, r0
 8004086:	185b      	adds	r3, r3, r1
 8004088:	801e      	strh	r6, [r3, #0]
 800408a:	e5d6      	b.n	8003c3a <HAL_PCD_IRQHandler+0x476>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800408c:	2650      	movs	r6, #80	@ 0x50
 800408e:	5b86      	ldrh	r6, [r0, r6]
 8004090:	46b0      	mov	r8, r6
 8004092:	4e62      	ldr	r6, [pc, #392]	@ (800421c <HAL_PCD_IRQHandler+0xa58>)
 8004094:	4441      	add	r1, r8
 8004096:	46b0      	mov	r8, r6
 8004098:	1809      	adds	r1, r1, r0
 800409a:	4441      	add	r1, r8
 800409c:	8809      	ldrh	r1, [r1, #0]
 800409e:	0589      	lsls	r1, r1, #22
 80040a0:	0d89      	lsrs	r1, r1, #22
    if (ep->xfer_len >= count)
 80040a2:	4688      	mov	r8, r1
 80040a4:	4299      	cmp	r1, r3
 80040a6:	d85d      	bhi.n	8004164 <HAL_PCD_IRQHandler+0x9a0>
      ep->xfer_len -= count;
 80040a8:	4666      	mov	r6, ip
 80040aa:	1a5b      	subs	r3, r3, r1
 80040ac:	6033      	str	r3, [r6, #0]
    if (ep->xfer_len == 0U)
 80040ae:	d10d      	bne.n	80040cc <HAL_PCD_IRQHandler+0x908>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80040b0:	0093      	lsls	r3, r2, #2
 80040b2:	469c      	mov	ip, r3
 80040b4:	4484      	add	ip, r0
 80040b6:	4663      	mov	r3, ip
 80040b8:	4e52      	ldr	r6, [pc, #328]	@ (8004204 <HAL_PCD_IRQHandler+0xa40>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	401e      	ands	r6, r3
 80040be:	2380      	movs	r3, #128	@ 0x80
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	4073      	eors	r3, r6
 80040c4:	4e50      	ldr	r6, [pc, #320]	@ (8004208 <HAL_PCD_IRQHandler+0xa44>)
 80040c6:	4333      	orrs	r3, r6
 80040c8:	4666      	mov	r6, ip
 80040ca:	8033      	strh	r3, [r6, #0]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80040cc:	067b      	lsls	r3, r7, #25
 80040ce:	d407      	bmi.n	80040e0 <HAL_PCD_IRQHandler+0x91c>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80040d0:	0092      	lsls	r2, r2, #2
 80040d2:	1882      	adds	r2, r0, r2
 80040d4:	8813      	ldrh	r3, [r2, #0]
 80040d6:	4e4d      	ldr	r6, [pc, #308]	@ (800420c <HAL_PCD_IRQHandler+0xa48>)
 80040d8:	4033      	ands	r3, r6
 80040da:	4e4d      	ldr	r6, [pc, #308]	@ (8004210 <HAL_PCD_IRQHandler+0xa4c>)
 80040dc:	4333      	orrs	r3, r6
 80040de:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 80040e0:	2900      	cmp	r1, #0
 80040e2:	d100      	bne.n	80040e6 <HAL_PCD_IRQHandler+0x922>
 80040e4:	e45a      	b.n	800399c <HAL_PCD_IRQHandler+0x1d8>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040e6:	9b00      	ldr	r3, [sp, #0]
 80040e8:	195b      	adds	r3, r3, r5
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	18e3      	adds	r3, r4, r3
 80040ee:	001a      	movs	r2, r3
 80040f0:	325b      	adds	r2, #91	@ 0x5b
 80040f2:	e717      	b.n	8003f24 <HAL_PCD_IRQHandler+0x760>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80040f4:	251f      	movs	r5, #31
 80040f6:	0951      	lsrs	r1, r2, #5
 80040f8:	402a      	ands	r2, r5
 80040fa:	4255      	negs	r5, r2
 80040fc:	416a      	adcs	r2, r5
 80040fe:	1a89      	subs	r1, r1, r2
 8004100:	881a      	ldrh	r2, [r3, #0]
 8004102:	0289      	lsls	r1, r1, #10
 8004104:	4311      	orrs	r1, r2
 8004106:	4a43      	ldr	r2, [pc, #268]	@ (8004214 <HAL_PCD_IRQHandler+0xa50>)
 8004108:	430a      	orrs	r2, r1
 800410a:	b292      	uxth	r2, r2
 800410c:	801a      	strh	r2, [r3, #0]
 800410e:	e55e      	b.n	8003bce <HAL_PCD_IRQHandler+0x40a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004110:	2a01      	cmp	r2, #1
 8004112:	d000      	beq.n	8004116 <HAL_PCD_IRQHandler+0x952>
 8004114:	e784      	b.n	8004020 <HAL_PCD_IRQHandler+0x85c>
 8004116:	9e02      	ldr	r6, [sp, #8]
 8004118:	5bc2      	ldrh	r2, [r0, r7]
 800411a:	46b4      	mov	ip, r6
 800411c:	4442      	add	r2, r8
 800411e:	4462      	add	r2, ip
 8004120:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004122:	0032      	movs	r2, r6
 8004124:	4e3d      	ldr	r6, [pc, #244]	@ (800421c <HAL_PCD_IRQHandler+0xa58>)
 8004126:	5bc1      	ldrh	r1, [r0, r7]
 8004128:	46b4      	mov	ip, r6
 800412a:	4462      	add	r2, ip
 800412c:	1812      	adds	r2, r2, r0
 800412e:	1852      	adds	r2, r2, r1
 8004130:	8013      	strh	r3, [r2, #0]
 8004132:	e775      	b.n	8004020 <HAL_PCD_IRQHandler+0x85c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004134:	2b01      	cmp	r3, #1
 8004136:	d000      	beq.n	800413a <HAL_PCD_IRQHandler+0x976>
 8004138:	e738      	b.n	8003fac <HAL_PCD_IRQHandler+0x7e8>
 800413a:	9e02      	ldr	r6, [sp, #8]
 800413c:	4f30      	ldr	r7, [pc, #192]	@ (8004200 <HAL_PCD_IRQHandler+0xa3c>)
 800413e:	2150      	movs	r1, #80	@ 0x50
 8004140:	0033      	movs	r3, r6
 8004142:	46b8      	mov	r8, r7
 8004144:	5a42      	ldrh	r2, [r0, r1]
 8004146:	4443      	add	r3, r8
 8004148:	18c3      	adds	r3, r0, r3
 800414a:	189b      	adds	r3, r3, r2
 800414c:	2200      	movs	r2, #0
 800414e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004150:	5a43      	ldrh	r3, [r0, r1]
 8004152:	4463      	add	r3, ip
 8004154:	46b4      	mov	ip, r6
 8004156:	4463      	add	r3, ip
 8004158:	801a      	strh	r2, [r3, #0]
 800415a:	e727      	b.n	8003fac <HAL_PCD_IRQHandler+0x7e8>
      ep->xfer_len = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	4666      	mov	r6, ip
 8004160:	6033      	str	r3, [r6, #0]
    if (ep->xfer_len == 0U)
 8004162:	e6be      	b.n	8003ee2 <HAL_PCD_IRQHandler+0x71e>
      ep->xfer_len = 0U;
 8004164:	4663      	mov	r3, ip
 8004166:	464e      	mov	r6, r9
 8004168:	601e      	str	r6, [r3, #0]
    if (ep->xfer_len == 0U)
 800416a:	e7a1      	b.n	80040b0 <HAL_PCD_IRQHandler+0x8ec>
        ep->xfer_buff += TxPctSize;
 800416c:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 800416e:	46b1      	mov	r9, r6
 8004170:	4489      	add	r9, r1
 8004172:	464e      	mov	r6, r9
 8004174:	625e      	str	r6, [r3, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8004176:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8004178:	46b0      	mov	r8, r6
 800417a:	4488      	add	r8, r1
 800417c:	4646      	mov	r6, r8
 800417e:	62d6      	str	r6, [r2, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004180:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004182:	4690      	mov	r8, r2
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	4590      	cmp	r8, r2
 8004188:	d358      	bcc.n	800423c <HAL_PCD_IRQHandler+0xa78>
          ep->xfer_len_db -= len;
 800418a:	4641      	mov	r1, r8
 800418c:	1a89      	subs	r1, r1, r2
 800418e:	6319      	str	r1, [r3, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004190:	b291      	uxth	r1, r2
 8004192:	9b00      	ldr	r3, [sp, #0]
 8004194:	195b      	adds	r3, r3, r5
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	18e3      	adds	r3, r4, r3
 800419a:	7c5b      	ldrb	r3, [r3, #17]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d143      	bne.n	8004228 <HAL_PCD_IRQHandler+0xa64>
 80041a0:	3350      	adds	r3, #80	@ 0x50
 80041a2:	5ac3      	ldrh	r3, [r0, r3]
 80041a4:	9e02      	ldr	r6, [sp, #8]
 80041a6:	4463      	add	r3, ip
 80041a8:	46b4      	mov	ip, r6
 80041aa:	4463      	add	r3, ip
 80041ac:	881f      	ldrh	r7, [r3, #0]
 80041ae:	05bf      	lsls	r7, r7, #22
 80041b0:	0dbf      	lsrs	r7, r7, #22
 80041b2:	801f      	strh	r7, [r3, #0]
 80041b4:	2a00      	cmp	r2, #0
 80041b6:	d000      	beq.n	80041ba <HAL_PCD_IRQHandler+0x9f6>
 80041b8:	e075      	b.n	80042a6 <HAL_PCD_IRQHandler+0xae2>
 80041ba:	2780      	movs	r7, #128	@ 0x80
 80041bc:	881a      	ldrh	r2, [r3, #0]
 80041be:	023f      	lsls	r7, r7, #8
 80041c0:	433a      	orrs	r2, r7
 80041c2:	801a      	strh	r2, [r3, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041c4:	9b00      	ldr	r3, [sp, #0]
 80041c6:	195b      	adds	r3, r3, r5
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	18e3      	adds	r3, r4, r3
 80041cc:	8b5a      	ldrh	r2, [r3, #26]
 80041ce:	000b      	movs	r3, r1
 80041d0:	4649      	mov	r1, r9
 80041d2:	f001 ff3d 	bl	8006050 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041d6:	6820      	ldr	r0, [r4, #0]
 80041d8:	e5f8      	b.n	8003dcc <HAL_PCD_IRQHandler+0x608>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80041da:	4662      	mov	r2, ip
 80041dc:	b291      	uxth	r1, r2
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d000      	beq.n	80041e4 <HAL_PCD_IRQHandler+0xa20>
 80041e2:	e59c      	b.n	8003d1e <HAL_PCD_IRQHandler+0x55a>
 80041e4:	9a02      	ldr	r2, [sp, #8]
 80041e6:	334f      	adds	r3, #79	@ 0x4f
 80041e8:	4694      	mov	ip, r2
 80041ea:	5ac3      	ldrh	r3, [r0, r3]
 80041ec:	4443      	add	r3, r8
 80041ee:	4463      	add	r3, ip
 80041f0:	8019      	strh	r1, [r3, #0]
 80041f2:	e594      	b.n	8003d1e <HAL_PCD_IRQHandler+0x55a>
        else if (ep->xfer_len_db == 0U)
 80041f4:	4662      	mov	r2, ip
 80041f6:	2a00      	cmp	r2, #0
 80041f8:	d126      	bne.n	8004248 <HAL_PCD_IRQHandler+0xa84>
          ep->xfer_fill_db = 0U;
 80041fa:	703a      	strb	r2, [r7, #0]
    if (ep->xfer_len > TxPctSize)
 80041fc:	000a      	movs	r2, r1
 80041fe:	e574      	b.n	8003cea <HAL_PCD_IRQHandler+0x526>
 8004200:	00000402 	.word	0x00000402
 8004204:	ffffbf8f 	.word	0xffffbf8f
 8004208:	00008080 	.word	0x00008080
 800420c:	ffff8f8f 	.word	0xffff8f8f
 8004210:	000080c0 	.word	0x000080c0
 8004214:	ffff8000 	.word	0xffff8000
 8004218:	0000c080 	.word	0x0000c080
 800421c:	00000406 	.word	0x00000406
 8004220:	fffffdff 	.word	0xfffffdff
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004224:	4642      	mov	r2, r8
 8004226:	b291      	uxth	r1, r2
 8004228:	2b01      	cmp	r3, #1
 800422a:	d1cb      	bne.n	80041c4 <HAL_PCD_IRQHandler+0xa00>
 800422c:	334f      	adds	r3, #79	@ 0x4f
 800422e:	5ac3      	ldrh	r3, [r0, r3]
 8004230:	9a02      	ldr	r2, [sp, #8]
 8004232:	4463      	add	r3, ip
 8004234:	4694      	mov	ip, r2
 8004236:	4463      	add	r3, ip
 8004238:	8019      	strh	r1, [r3, #0]
 800423a:	e7c3      	b.n	80041c4 <HAL_PCD_IRQHandler+0xa00>
        else if (ep->xfer_len_db == 0U)
 800423c:	4642      	mov	r2, r8
 800423e:	2a00      	cmp	r2, #0
 8004240:	d120      	bne.n	8004284 <HAL_PCD_IRQHandler+0xac0>
          ep->xfer_fill_db = 0U;
 8004242:	703a      	strb	r2, [r7, #0]
    if (ep->xfer_len >= TxPctSize)
 8004244:	000a      	movs	r2, r1
 8004246:	e7a4      	b.n	8004192 <HAL_PCD_IRQHandler+0x9ce>
          ep->xfer_fill_db = 0U;
 8004248:	2200      	movs	r2, #0
 800424a:	703a      	strb	r2, [r7, #0]
          ep->xfer_len_db = 0U;
 800424c:	631a      	str	r2, [r3, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800424e:	7c5b      	ldrb	r3, [r3, #17]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1c2      	bne.n	80041da <HAL_PCD_IRQHandler+0xa16>
 8004254:	2350      	movs	r3, #80	@ 0x50
 8004256:	9a02      	ldr	r2, [sp, #8]
 8004258:	5ac3      	ldrh	r3, [r0, r3]
 800425a:	4443      	add	r3, r8
 800425c:	4690      	mov	r8, r2
 800425e:	4443      	add	r3, r8
 8004260:	881a      	ldrh	r2, [r3, #0]
 8004262:	0592      	lsls	r2, r2, #22
 8004264:	0d92      	lsrs	r2, r2, #22
 8004266:	801a      	strh	r2, [r3, #0]
 8004268:	4662      	mov	r2, ip
 800426a:	2a3e      	cmp	r2, #62	@ 0x3e
 800426c:	d828      	bhi.n	80042c0 <HAL_PCD_IRQHandler+0xafc>
 800426e:	2101      	movs	r1, #1
 8004270:	0857      	lsrs	r7, r2, #1
 8004272:	4011      	ands	r1, r2
 8004274:	187f      	adds	r7, r7, r1
 8004276:	8819      	ldrh	r1, [r3, #0]
 8004278:	02bf      	lsls	r7, r7, #10
 800427a:	4339      	orrs	r1, r7
 800427c:	b289      	uxth	r1, r1
 800427e:	8019      	strh	r1, [r3, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004280:	b291      	uxth	r1, r2
 8004282:	e54c      	b.n	8003d1e <HAL_PCD_IRQHandler+0x55a>
          ep->xfer_len_db = 0U;
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8004288:	703a      	strb	r2, [r7, #0]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800428a:	7c5b      	ldrb	r3, [r3, #17]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1c9      	bne.n	8004224 <HAL_PCD_IRQHandler+0xa60>
 8004290:	2350      	movs	r3, #80	@ 0x50
 8004292:	9a02      	ldr	r2, [sp, #8]
 8004294:	5ac3      	ldrh	r3, [r0, r3]
 8004296:	4463      	add	r3, ip
 8004298:	4694      	mov	ip, r2
 800429a:	4463      	add	r3, ip
 800429c:	881a      	ldrh	r2, [r3, #0]
 800429e:	0592      	lsls	r2, r2, #22
 80042a0:	0d92      	lsrs	r2, r2, #22
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	4642      	mov	r2, r8
 80042a6:	2a3e      	cmp	r2, #62	@ 0x3e
 80042a8:	d81a      	bhi.n	80042e0 <HAL_PCD_IRQHandler+0xb1c>
 80042aa:	2101      	movs	r1, #1
 80042ac:	0857      	lsrs	r7, r2, #1
 80042ae:	4011      	ands	r1, r2
 80042b0:	187f      	adds	r7, r7, r1
 80042b2:	8819      	ldrh	r1, [r3, #0]
 80042b4:	02bf      	lsls	r7, r7, #10
 80042b6:	4339      	orrs	r1, r7
 80042b8:	b289      	uxth	r1, r1
 80042ba:	8019      	strh	r1, [r3, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80042bc:	b291      	uxth	r1, r2
 80042be:	e781      	b.n	80041c4 <HAL_PCD_IRQHandler+0xa00>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042c0:	271f      	movs	r7, #31
 80042c2:	4017      	ands	r7, r2
 80042c4:	003e      	movs	r6, r7
 80042c6:	4277      	negs	r7, r6
 80042c8:	4177      	adcs	r7, r6
 80042ca:	0951      	lsrs	r1, r2, #5
 80042cc:	1bc9      	subs	r1, r1, r7
 80042ce:	881f      	ldrh	r7, [r3, #0]
 80042d0:	0289      	lsls	r1, r1, #10
 80042d2:	430f      	orrs	r7, r1
 80042d4:	490a      	ldr	r1, [pc, #40]	@ (8004300 <HAL_PCD_IRQHandler+0xb3c>)
 80042d6:	4339      	orrs	r1, r7
 80042d8:	b289      	uxth	r1, r1
 80042da:	8019      	strh	r1, [r3, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80042dc:	b291      	uxth	r1, r2
 80042de:	e51e      	b.n	8003d1e <HAL_PCD_IRQHandler+0x55a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042e0:	271f      	movs	r7, #31
 80042e2:	4017      	ands	r7, r2
 80042e4:	003e      	movs	r6, r7
 80042e6:	4277      	negs	r7, r6
 80042e8:	4177      	adcs	r7, r6
 80042ea:	0951      	lsrs	r1, r2, #5
 80042ec:	1bc9      	subs	r1, r1, r7
 80042ee:	881f      	ldrh	r7, [r3, #0]
 80042f0:	0289      	lsls	r1, r1, #10
 80042f2:	430f      	orrs	r7, r1
 80042f4:	4902      	ldr	r1, [pc, #8]	@ (8004300 <HAL_PCD_IRQHandler+0xb3c>)
 80042f6:	4339      	orrs	r1, r7
 80042f8:	b289      	uxth	r1, r1
 80042fa:	8019      	strh	r1, [r3, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80042fc:	b291      	uxth	r1, r2
 80042fe:	e761      	b.n	80041c4 <HAL_PCD_IRQHandler+0xa00>
 8004300:	ffff8000 	.word	0xffff8000

08004304 <HAL_PCD_SetAddress>:
{
 8004304:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8004306:	25a4      	movs	r5, #164	@ 0xa4
 8004308:	00ad      	lsls	r5, r5, #2
 800430a:	5d43      	ldrb	r3, [r0, r5]
{
 800430c:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800430e:	2b01      	cmp	r3, #1
 8004310:	d009      	beq.n	8004326 <HAL_PCD_SetAddress+0x22>
 8004312:	2301      	movs	r3, #1
 8004314:	5543      	strb	r3, [r0, r5]
  hpcd->USB_Address = address;
 8004316:	7301      	strb	r1, [r0, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004318:	6800      	ldr	r0, [r0, #0]
 800431a:	f001 fe85 	bl	8006028 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800431e:	2300      	movs	r3, #0
  return HAL_OK;
 8004320:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 8004322:	5563      	strb	r3, [r4, r5]
}
 8004324:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8004326:	2002      	movs	r0, #2
 8004328:	e7fc      	b.n	8004324 <HAL_PCD_SetAddress+0x20>
 800432a:	46c0      	nop			@ (mov r8, r8)

0800432c <HAL_PCD_EP_Open>:
{
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	0005      	movs	r5, r0
 8004330:	2007      	movs	r0, #7
 8004332:	4008      	ands	r0, r1
 8004334:	0084      	lsls	r4, r0, #2
 8004336:	1824      	adds	r4, r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8004338:	b249      	sxtb	r1, r1
 800433a:	00e4      	lsls	r4, r4, #3
 800433c:	2900      	cmp	r1, #0
 800433e:	db1d      	blt.n	800437c <HAL_PCD_EP_Open+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004340:	0021      	movs	r1, r4
    ep->is_in = 0U;
 8004342:	2600      	movs	r6, #0
 8004344:	192c      	adds	r4, r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004346:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8004348:	3452      	adds	r4, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800434a:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 800434c:	34ff      	adds	r4, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800434e:	1869      	adds	r1, r5, r1
    ep->is_in = 0U;
 8004350:	7026      	strb	r6, [r4, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004352:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8004354:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8004356:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8004358:	2b02      	cmp	r3, #2
 800435a:	d101      	bne.n	8004360 <HAL_PCD_EP_Open+0x34>
    ep->data_pid_start = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8004360:	24a4      	movs	r4, #164	@ 0xa4
 8004362:	00a4      	lsls	r4, r4, #2
 8004364:	5d2b      	ldrb	r3, [r5, r4]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d00f      	beq.n	800438a <HAL_PCD_EP_Open+0x5e>
 800436a:	2301      	movs	r3, #1
 800436c:	552b      	strb	r3, [r5, r4]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800436e:	6828      	ldr	r0, [r5, #0]
 8004370:	f001 f91a 	bl	80055a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004374:	2300      	movs	r3, #0
  return ret;
 8004376:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 8004378:	552b      	strb	r3, [r5, r4]
}
 800437a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800437c:	0021      	movs	r1, r4
    ep->is_in = 1U;
 800437e:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004380:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8004382:	192c      	adds	r4, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004384:	1869      	adds	r1, r5, r1
    ep->is_in = 1U;
 8004386:	7466      	strb	r6, [r4, #17]
 8004388:	e7e3      	b.n	8004352 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800438a:	2002      	movs	r0, #2
 800438c:	e7f5      	b.n	800437a <HAL_PCD_EP_Open+0x4e>
 800438e:	46c0      	nop			@ (mov r8, r8)

08004390 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004390:	2207      	movs	r2, #7
 8004392:	400a      	ands	r2, r1
 8004394:	0093      	lsls	r3, r2, #2
 8004396:	189b      	adds	r3, r3, r2
 8004398:	b249      	sxtb	r1, r1
{
 800439a:	b570      	push	{r4, r5, r6, lr}
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	0004      	movs	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80043a0:	2900      	cmp	r1, #0
 80043a2:	db17      	blt.n	80043d4 <HAL_PCD_EP_Close+0x44>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a4:	0019      	movs	r1, r3
 80043a6:	3151      	adds	r1, #81	@ 0x51
 80043a8:	31ff      	adds	r1, #255	@ 0xff
 80043aa:	1841      	adds	r1, r0, r1
    ep->is_in = 0U;
 80043ac:	18c3      	adds	r3, r0, r3
  __HAL_LOCK(hpcd);
 80043ae:	25a4      	movs	r5, #164	@ 0xa4
    ep->is_in = 0U;
 80043b0:	2000      	movs	r0, #0
 80043b2:	3352      	adds	r3, #82	@ 0x52
 80043b4:	33ff      	adds	r3, #255	@ 0xff
 80043b6:	7018      	strb	r0, [r3, #0]
  __HAL_LOCK(hpcd);
 80043b8:	00ad      	lsls	r5, r5, #2
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ba:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80043bc:	5d63      	ldrb	r3, [r4, r5]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d014      	beq.n	80043ec <HAL_PCD_EP_Close+0x5c>
 80043c2:	2301      	movs	r3, #1
 80043c4:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	f001 fa4c 	bl	8005864 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043cc:	2300      	movs	r3, #0
  return HAL_OK;
 80043ce:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 80043d0:	5563      	strb	r3, [r4, r5]
}
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043d4:	0019      	movs	r1, r3
 80043d6:	3110      	adds	r1, #16
    ep->is_in = 1U;
 80043d8:	18c3      	adds	r3, r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043da:	1841      	adds	r1, r0, r1
  __HAL_LOCK(hpcd);
 80043dc:	25a4      	movs	r5, #164	@ 0xa4
    ep->is_in = 1U;
 80043de:	2001      	movs	r0, #1
  __HAL_LOCK(hpcd);
 80043e0:	00ad      	lsls	r5, r5, #2
    ep->is_in = 1U;
 80043e2:	7458      	strb	r0, [r3, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80043e6:	5d63      	ldrb	r3, [r4, r5]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d1ea      	bne.n	80043c2 <HAL_PCD_EP_Close+0x32>
 80043ec:	2002      	movs	r0, #2
 80043ee:	e7f0      	b.n	80043d2 <HAL_PCD_EP_Close+0x42>

080043f0 <HAL_PCD_EP_Receive>:
{
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	2407      	movs	r4, #7
}
 80043f4:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 80043f6:	008c      	lsls	r4, r1, #2
 80043f8:	1864      	adds	r4, r4, r1
 80043fa:	00e4      	lsls	r4, r4, #3
 80043fc:	1905      	adds	r5, r0, r4
 80043fe:	002e      	movs	r6, r5
 8004400:	3665      	adds	r6, #101	@ 0x65
 8004402:	36ff      	adds	r6, #255	@ 0xff
 8004404:	6032      	str	r2, [r6, #0]
  ep->xfer_len = len;
 8004406:	002a      	movs	r2, r5
 8004408:	3269      	adds	r2, #105	@ 0x69
 800440a:	32ff      	adds	r2, #255	@ 0xff
 800440c:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 800440e:	2300      	movs	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8004410:	3551      	adds	r5, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004412:	3451      	adds	r4, #81	@ 0x51
  ep->xfer_count = 0U;
 8004414:	6053      	str	r3, [r2, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004416:	35ff      	adds	r5, #255	@ 0xff
  ep->is_in = 0U;
 8004418:	3a17      	subs	r2, #23
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800441a:	34ff      	adds	r4, #255	@ 0xff
  ep->is_in = 0U;
 800441c:	7013      	strb	r3, [r2, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800441e:	7029      	strb	r1, [r5, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004420:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004422:	6800      	ldr	r0, [r0, #0]
 8004424:	f001 faa4 	bl	8005970 <USB_EPStartXfer>
}
 8004428:	2000      	movs	r0, #0
 800442a:	bd70      	pop	{r4, r5, r6, pc}

0800442c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800442c:	2307      	movs	r3, #7
 800442e:	400b      	ands	r3, r1
 8004430:	0099      	lsls	r1, r3, #2
 8004432:	18c9      	adds	r1, r1, r3
 8004434:	00c9      	lsls	r1, r1, #3
 8004436:	1840      	adds	r0, r0, r1
 8004438:	306d      	adds	r0, #109	@ 0x6d
 800443a:	30ff      	adds	r0, #255	@ 0xff
 800443c:	6800      	ldr	r0, [r0, #0]
}
 800443e:	4770      	bx	lr

08004440 <HAL_PCD_EP_Transmit>:
{
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	2407      	movs	r4, #7
}
 8004444:	4021      	ands	r1, r4
 8004446:	008c      	lsls	r4, r1, #2
  ep->xfer_buff = pBuf;
 8004448:	1864      	adds	r4, r4, r1
 800444a:	00e4      	lsls	r4, r4, #3
 800444c:	1905      	adds	r5, r0, r4
  ep->xfer_fill_db = 1U;
 800444e:	002e      	movs	r6, r5
  ep->xfer_buff = pBuf;
 8004450:	626a      	str	r2, [r5, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8004452:	2201      	movs	r2, #1
 8004454:	3634      	adds	r6, #52	@ 0x34
  ep->xfer_len = len;
 8004456:	62ab      	str	r3, [r5, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 8004458:	7032      	strb	r2, [r6, #0]
  ep->xfer_len_db = len;
 800445a:	632b      	str	r3, [r5, #48]	@ 0x30
  ep->xfer_count = 0U;
 800445c:	2300      	movs	r3, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800445e:	3410      	adds	r4, #16
  ep->num = ep_addr & EP_ADDR_MSK;
 8004460:	7429      	strb	r1, [r5, #16]
  ep->xfer_count = 0U;
 8004462:	62eb      	str	r3, [r5, #44]	@ 0x2c
  ep->is_in = 1U;
 8004464:	746a      	strb	r2, [r5, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004466:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004468:	6800      	ldr	r0, [r0, #0]
 800446a:	f001 fa81 	bl	8005970 <USB_EPStartXfer>
}
 800446e:	2000      	movs	r0, #0
 8004470:	bd70      	pop	{r4, r5, r6, pc}
 8004472:	46c0      	nop			@ (mov r8, r8)

08004474 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004474:	2307      	movs	r3, #7
{
 8004476:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004478:	7902      	ldrb	r2, [r0, #4]
{
 800447a:	0004      	movs	r4, r0
 800447c:	400b      	ands	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800447e:	429a      	cmp	r2, r3
 8004480:	d331      	bcc.n	80044e6 <HAL_PCD_EP_SetStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 8004482:	b24a      	sxtb	r2, r1
 8004484:	2a00      	cmp	r2, #0
 8004486:	db1b      	blt.n	80044c0 <HAL_PCD_EP_SetStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr];
 8004488:	008a      	lsls	r2, r1, #2
 800448a:	1852      	adds	r2, r2, r1
 800448c:	00d2      	lsls	r2, r2, #3
 800448e:	0011      	movs	r1, r2
 8004490:	3151      	adds	r1, #81	@ 0x51
 8004492:	31ff      	adds	r1, #255	@ 0xff
 8004494:	1841      	adds	r1, r0, r1
    ep->is_in = 0U;
 8004496:	1882      	adds	r2, r0, r2
 8004498:	2000      	movs	r0, #0
 800449a:	3252      	adds	r2, #82	@ 0x52
 800449c:	32ff      	adds	r2, #255	@ 0xff
 800449e:	7010      	strb	r0, [r2, #0]
  __HAL_LOCK(hpcd);
 80044a0:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 80044a2:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a4:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 1U;
 80044a6:	708a      	strb	r2, [r1, #2]
  __HAL_LOCK(hpcd);
 80044a8:	00ad      	lsls	r5, r5, #2
 80044aa:	5d63      	ldrb	r3, [r4, r5]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d018      	beq.n	80044e2 <HAL_PCD_EP_SetStall+0x6e>
 80044b0:	5562      	strb	r2, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044b2:	6820      	ldr	r0, [r4, #0]
 80044b4:	f001 fd54 	bl	8005f60 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80044b8:	2300      	movs	r3, #0
  return HAL_OK;
 80044ba:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 80044bc:	5563      	strb	r3, [r4, r5]
}
 80044be:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044c0:	009a      	lsls	r2, r3, #2
 80044c2:	18d2      	adds	r2, r2, r3
 80044c4:	00d2      	lsls	r2, r2, #3
 80044c6:	0011      	movs	r1, r2
 80044c8:	3110      	adds	r1, #16
 80044ca:	1841      	adds	r1, r0, r1
    ep->is_in = 1U;
 80044cc:	1882      	adds	r2, r0, r2
 80044ce:	2001      	movs	r0, #1
  __HAL_LOCK(hpcd);
 80044d0:	25a4      	movs	r5, #164	@ 0xa4
    ep->is_in = 1U;
 80044d2:	7450      	strb	r0, [r2, #17]
  ep->is_stall = 1U;
 80044d4:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d6:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 1U;
 80044d8:	708a      	strb	r2, [r1, #2]
  __HAL_LOCK(hpcd);
 80044da:	00ad      	lsls	r5, r5, #2
 80044dc:	5d63      	ldrb	r3, [r4, r5]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d1e6      	bne.n	80044b0 <HAL_PCD_EP_SetStall+0x3c>
 80044e2:	2002      	movs	r0, #2
 80044e4:	e7eb      	b.n	80044be <HAL_PCD_EP_SetStall+0x4a>
    return HAL_ERROR;
 80044e6:	2001      	movs	r0, #1
 80044e8:	e7e9      	b.n	80044be <HAL_PCD_EP_SetStall+0x4a>
 80044ea:	46c0      	nop			@ (mov r8, r8)

080044ec <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044ec:	230f      	movs	r3, #15
{
 80044ee:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044f0:	7902      	ldrb	r2, [r0, #4]
{
 80044f2:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044f4:	400b      	ands	r3, r1
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d330      	bcc.n	800455c <HAL_PCD_EP_ClrStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 80044fa:	2207      	movs	r2, #7
 80044fc:	400a      	ands	r2, r1
 80044fe:	0093      	lsls	r3, r2, #2
 8004500:	189b      	adds	r3, r3, r2
 8004502:	b249      	sxtb	r1, r1
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	2900      	cmp	r1, #0
 8004508:	db18      	blt.n	800453c <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800450a:	0019      	movs	r1, r3
 800450c:	3151      	adds	r1, #81	@ 0x51
 800450e:	31ff      	adds	r1, #255	@ 0xff
 8004510:	1841      	adds	r1, r0, r1
    ep->is_in = 0U;
 8004512:	18c3      	adds	r3, r0, r3
  ep->is_stall = 0U;
 8004514:	2600      	movs	r6, #0
    ep->is_in = 0U;
 8004516:	2000      	movs	r0, #0
  __HAL_LOCK(hpcd);
 8004518:	25a4      	movs	r5, #164	@ 0xa4
    ep->is_in = 0U;
 800451a:	3352      	adds	r3, #82	@ 0x52
 800451c:	33ff      	adds	r3, #255	@ 0xff
 800451e:	7018      	strb	r0, [r3, #0]
  __HAL_LOCK(hpcd);
 8004520:	00ad      	lsls	r5, r5, #2
  ep->is_stall = 0U;
 8004522:	708e      	strb	r6, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004524:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004526:	5d63      	ldrb	r3, [r4, r5]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d015      	beq.n	8004558 <HAL_PCD_EP_ClrStall+0x6c>
 800452c:	2301      	movs	r3, #1
 800452e:	5563      	strb	r3, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004530:	6820      	ldr	r0, [r4, #0]
 8004532:	f001 fd37 	bl	8005fa4 <USB_EPClearStall>
  return HAL_OK;
 8004536:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 8004538:	5566      	strb	r6, [r4, r5]
}
 800453a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800453c:	0019      	movs	r1, r3
 800453e:	3110      	adds	r1, #16
 8004540:	1841      	adds	r1, r0, r1
    ep->is_in = 1U;
 8004542:	18c3      	adds	r3, r0, r3
  ep->is_stall = 0U;
 8004544:	2600      	movs	r6, #0
    ep->is_in = 1U;
 8004546:	2001      	movs	r0, #1
  __HAL_LOCK(hpcd);
 8004548:	25a4      	movs	r5, #164	@ 0xa4
    ep->is_in = 1U;
 800454a:	7458      	strb	r0, [r3, #17]
  __HAL_LOCK(hpcd);
 800454c:	00ad      	lsls	r5, r5, #2
  ep->is_stall = 0U;
 800454e:	708e      	strb	r6, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004550:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004552:	5d63      	ldrb	r3, [r4, r5]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d1e9      	bne.n	800452c <HAL_PCD_EP_ClrStall+0x40>
 8004558:	2002      	movs	r0, #2
 800455a:	e7ee      	b.n	800453a <HAL_PCD_EP_ClrStall+0x4e>
    return HAL_ERROR;
 800455c:	2001      	movs	r0, #1
 800455e:	e7ec      	b.n	800453a <HAL_PCD_EP_ClrStall+0x4e>

08004560 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004560:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004562:	060c      	lsls	r4, r1, #24
 8004564:	d50e      	bpl.n	8004584 <HAL_PCDEx_PMAConfig+0x24>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004566:	2407      	movs	r4, #7
 8004568:	400c      	ands	r4, r1
 800456a:	00a1      	lsls	r1, r4, #2
 800456c:	1909      	adds	r1, r1, r4
 800456e:	00c9      	lsls	r1, r1, #3
 8004570:	3110      	adds	r1, #16
 8004572:	1840      	adds	r0, r0, r1
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004574:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8004576:	2a00      	cmp	r2, #0
 8004578:	d10d      	bne.n	8004596 <HAL_PCDEx_PMAConfig+0x36>
    ep->doublebuffer = 0U;
 800457a:	2300      	movs	r3, #0
    ep->pmaadress = (uint16_t)pmaadress;
 800457c:	80c1      	strh	r1, [r0, #6]
 800457e:	7303      	strb	r3, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004580:	2000      	movs	r0, #0
 8004582:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8004584:	008c      	lsls	r4, r1, #2
 8004586:	1861      	adds	r1, r4, r1
 8004588:	00c9      	lsls	r1, r1, #3
 800458a:	3151      	adds	r1, #81	@ 0x51
 800458c:	31ff      	adds	r1, #255	@ 0xff
 800458e:	1840      	adds	r0, r0, r1
    ep->pmaadress = (uint16_t)pmaadress;
 8004590:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8004592:	2a00      	cmp	r2, #0
 8004594:	d0f1      	beq.n	800457a <HAL_PCDEx_PMAConfig+0x1a>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004596:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8004598:	2301      	movs	r3, #1
 800459a:	e7f0      	b.n	800457e <HAL_PCDEx_PMAConfig+0x1e>

0800459c <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
  hpcd->lpm_active = 1U;
 800459c:	23b4      	movs	r3, #180	@ 0xb4
 800459e:	2101      	movs	r1, #1
 80045a0:	009b      	lsls	r3, r3, #2
  USB_TypeDef *USBx = hpcd->Instance;
 80045a2:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 80045a4:	50c1      	str	r1, [r0, r3]
  hpcd->LPM_State = LPM_L0;
 80045a6:	2100      	movs	r1, #0
 80045a8:	3b08      	subs	r3, #8
 80045aa:	54c1      	strb	r1, [r0, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80045ac:	2354      	movs	r3, #84	@ 0x54
 80045ae:	2001      	movs	r0, #1
 80045b0:	5ad1      	ldrh	r1, [r2, r3]
 80045b2:	4301      	orrs	r1, r0
 80045b4:	52d1      	strh	r1, [r2, r3]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80045b6:	5ad1      	ldrh	r1, [r2, r3]
 80045b8:	3001      	adds	r0, #1
 80045ba:	4301      	orrs	r1, r0
 80045bc:	52d1      	strh	r1, [r2, r3]

  return HAL_OK;
}
 80045be:	2000      	movs	r0, #0
 80045c0:	4770      	bx	lr
 80045c2:	46c0      	nop			@ (mov r8, r8)

080045c4 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045c4:	4770      	bx	lr
 80045c6:	46c0      	nop			@ (mov r8, r8)

080045c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ca:	46ce      	mov	lr, r9
 80045cc:	4647      	mov	r7, r8
 80045ce:	b580      	push	{r7, lr}
 80045d0:	0004      	movs	r4, r0
 80045d2:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d100      	bne.n	80045da <HAL_RCC_OscConfig+0x12>
 80045d8:	e0f1      	b.n	80047be <HAL_RCC_OscConfig+0x1f6>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045da:	6803      	ldr	r3, [r0, #0]
 80045dc:	07da      	lsls	r2, r3, #31
 80045de:	d52f      	bpl.n	8004640 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80045e0:	210c      	movs	r1, #12
 80045e2:	48c2      	ldr	r0, [pc, #776]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 80045e4:	6842      	ldr	r2, [r0, #4]
 80045e6:	400a      	ands	r2, r1
 80045e8:	2a04      	cmp	r2, #4
 80045ea:	d100      	bne.n	80045ee <HAL_RCC_OscConfig+0x26>
 80045ec:	e105      	b.n	80047fa <HAL_RCC_OscConfig+0x232>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045ee:	6842      	ldr	r2, [r0, #4]
 80045f0:	4011      	ands	r1, r2
 80045f2:	2908      	cmp	r1, #8
 80045f4:	d100      	bne.n	80045f8 <HAL_RCC_OscConfig+0x30>
 80045f6:	e0f7      	b.n	80047e8 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f8:	6863      	ldr	r3, [r4, #4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d100      	bne.n	8004600 <HAL_RCC_OscConfig+0x38>
 80045fe:	e106      	b.n	800480e <HAL_RCC_OscConfig+0x246>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d100      	bne.n	8004606 <HAL_RCC_OscConfig+0x3e>
 8004604:	e128      	b.n	8004858 <HAL_RCC_OscConfig+0x290>
 8004606:	2b05      	cmp	r3, #5
 8004608:	d100      	bne.n	800460c <HAL_RCC_OscConfig+0x44>
 800460a:	e22a      	b.n	8004a62 <HAL_RCC_OscConfig+0x49a>
 800460c:	4bb7      	ldr	r3, [pc, #732]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 800460e:	49b8      	ldr	r1, [pc, #736]	@ (80048f0 <HAL_RCC_OscConfig+0x328>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	400a      	ands	r2, r1
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	49b6      	ldr	r1, [pc, #728]	@ (80048f4 <HAL_RCC_OscConfig+0x32c>)
 800461a:	400a      	ands	r2, r1
 800461c:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461e:	f7fd fdc7 	bl	80021b0 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004624:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4fb1      	ldr	r7, [pc, #708]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 8004628:	02b6      	lsls	r6, r6, #10
 800462a:	e005      	b.n	8004638 <HAL_RCC_OscConfig+0x70>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800462c:	f7fd fdc0 	bl	80021b0 <HAL_GetTick>
 8004630:	1b40      	subs	r0, r0, r5
 8004632:	2864      	cmp	r0, #100	@ 0x64
 8004634:	d900      	bls.n	8004638 <HAL_RCC_OscConfig+0x70>
 8004636:	e10d      	b.n	8004854 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	4233      	tst	r3, r6
 800463c:	d0f6      	beq.n	800462c <HAL_RCC_OscConfig+0x64>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	079a      	lsls	r2, r3, #30
 8004642:	d529      	bpl.n	8004698 <HAL_RCC_OscConfig+0xd0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004644:	220c      	movs	r2, #12
 8004646:	49a9      	ldr	r1, [pc, #676]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 8004648:	6848      	ldr	r0, [r1, #4]
 800464a:	4202      	tst	r2, r0
 800464c:	d100      	bne.n	8004650 <HAL_RCC_OscConfig+0x88>
 800464e:	e0af      	b.n	80047b0 <HAL_RCC_OscConfig+0x1e8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004650:	6848      	ldr	r0, [r1, #4]
 8004652:	4002      	ands	r2, r0
 8004654:	2a08      	cmp	r2, #8
 8004656:	d100      	bne.n	800465a <HAL_RCC_OscConfig+0x92>
 8004658:	e0a1      	b.n	800479e <HAL_RCC_OscConfig+0x1d6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800465a:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800465c:	4da3      	ldr	r5, [pc, #652]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800465e:	2b00      	cmp	r3, #0
 8004660:	d100      	bne.n	8004664 <HAL_RCC_OscConfig+0x9c>
 8004662:	e130      	b.n	80048c6 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_HSI_ENABLE();
 8004664:	2201      	movs	r2, #1
 8004666:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004668:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800466a:	4313      	orrs	r3, r2
 800466c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800466e:	f7fd fd9f 	bl	80021b0 <HAL_GetTick>
 8004672:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004674:	e005      	b.n	8004682 <HAL_RCC_OscConfig+0xba>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004676:	f7fd fd9b 	bl	80021b0 <HAL_GetTick>
 800467a:	1b80      	subs	r0, r0, r6
 800467c:	2802      	cmp	r0, #2
 800467e:	d900      	bls.n	8004682 <HAL_RCC_OscConfig+0xba>
 8004680:	e0e8      	b.n	8004854 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004682:	682b      	ldr	r3, [r5, #0]
 8004684:	421f      	tst	r7, r3
 8004686:	d0f6      	beq.n	8004676 <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004688:	21f8      	movs	r1, #248	@ 0xf8
 800468a:	682a      	ldr	r2, [r5, #0]
 800468c:	6923      	ldr	r3, [r4, #16]
 800468e:	438a      	bics	r2, r1
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4313      	orrs	r3, r2
 8004694:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	071a      	lsls	r2, r3, #28
 800469a:	d42d      	bmi.n	80046f8 <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469c:	075a      	lsls	r2, r3, #29
 800469e:	d544      	bpl.n	800472a <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a0:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80046a2:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a4:	4b91      	ldr	r3, [pc, #580]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 80046a6:	0552      	lsls	r2, r2, #21
 80046a8:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80046aa:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ac:	4211      	tst	r1, r2
 80046ae:	d108      	bne.n	80046c2 <HAL_RCC_OscConfig+0xfa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b0:	69d9      	ldr	r1, [r3, #28]
 80046b2:	4311      	orrs	r1, r2
 80046b4:	61d9      	str	r1, [r3, #28]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	4013      	ands	r3, r2
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80046be:	2301      	movs	r3, #1
 80046c0:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c2:	2780      	movs	r7, #128	@ 0x80
 80046c4:	4e8c      	ldr	r6, [pc, #560]	@ (80048f8 <HAL_RCC_OscConfig+0x330>)
 80046c6:	007f      	lsls	r7, r7, #1
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	423b      	tst	r3, r7
 80046cc:	d100      	bne.n	80046d0 <HAL_RCC_OscConfig+0x108>
 80046ce:	e0a5      	b.n	800481c <HAL_RCC_OscConfig+0x254>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d0:	68a3      	ldr	r3, [r4, #8]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d100      	bne.n	80046d8 <HAL_RCC_OscConfig+0x110>
 80046d6:	e115      	b.n	8004904 <HAL_RCC_OscConfig+0x33c>
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d100      	bne.n	80046de <HAL_RCC_OscConfig+0x116>
 80046dc:	e0d5      	b.n	800488a <HAL_RCC_OscConfig+0x2c2>
 80046de:	2b05      	cmp	r3, #5
 80046e0:	d100      	bne.n	80046e4 <HAL_RCC_OscConfig+0x11c>
 80046e2:	e144      	b.n	800496e <HAL_RCC_OscConfig+0x3a6>
 80046e4:	2101      	movs	r1, #1
 80046e6:	4b81      	ldr	r3, [pc, #516]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 80046e8:	6a1a      	ldr	r2, [r3, #32]
 80046ea:	438a      	bics	r2, r1
 80046ec:	621a      	str	r2, [r3, #32]
 80046ee:	6a1a      	ldr	r2, [r3, #32]
 80046f0:	3103      	adds	r1, #3
 80046f2:	438a      	bics	r2, r1
 80046f4:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046f6:	e109      	b.n	800490c <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046f8:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 80046fa:	4d7c      	ldr	r5, [pc, #496]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d060      	beq.n	80047c2 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 8004700:	2201      	movs	r2, #1
 8004702:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004704:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8004706:	4313      	orrs	r3, r2
 8004708:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 800470a:	f7fd fd51 	bl	80021b0 <HAL_GetTick>
 800470e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004710:	e005      	b.n	800471e <HAL_RCC_OscConfig+0x156>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004712:	f7fd fd4d 	bl	80021b0 <HAL_GetTick>
 8004716:	1b80      	subs	r0, r0, r6
 8004718:	2802      	cmp	r0, #2
 800471a:	d900      	bls.n	800471e <HAL_RCC_OscConfig+0x156>
 800471c:	e09a      	b.n	8004854 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004720:	421f      	tst	r7, r3
 8004722:	d0f6      	beq.n	8004712 <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	075a      	lsls	r2, r3, #29
 8004728:	d4ba      	bmi.n	80046a0 <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800472a:	06db      	lsls	r3, r3, #27
 800472c:	d512      	bpl.n	8004754 <HAL_RCC_OscConfig+0x18c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800472e:	6963      	ldr	r3, [r4, #20]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d100      	bne.n	8004736 <HAL_RCC_OscConfig+0x16e>
 8004734:	e140      	b.n	80049b8 <HAL_RCC_OscConfig+0x3f0>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004736:	3305      	adds	r3, #5
 8004738:	d000      	beq.n	800473c <HAL_RCC_OscConfig+0x174>
 800473a:	e0f9      	b.n	8004930 <HAL_RCC_OscConfig+0x368>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800473c:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800473e:	20f8      	movs	r0, #248	@ 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8004740:	4a6a      	ldr	r2, [pc, #424]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 8004742:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004744:	438b      	bics	r3, r1
 8004746:	6353      	str	r3, [r2, #52]	@ 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004748:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800474a:	69a3      	ldr	r3, [r4, #24]
 800474c:	4381      	bics	r1, r0
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	430b      	orrs	r3, r1
 8004752:	6353      	str	r3, [r2, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004754:	6a23      	ldr	r3, [r4, #32]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d01b      	beq.n	8004792 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800475a:	220c      	movs	r2, #12
 800475c:	4d63      	ldr	r5, [pc, #396]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 800475e:	6869      	ldr	r1, [r5, #4]
 8004760:	400a      	ands	r2, r1
 8004762:	2a08      	cmp	r2, #8
 8004764:	d100      	bne.n	8004768 <HAL_RCC_OscConfig+0x1a0>
 8004766:	e10c      	b.n	8004982 <HAL_RCC_OscConfig+0x3ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004768:	2b02      	cmp	r3, #2
 800476a:	d100      	bne.n	800476e <HAL_RCC_OscConfig+0x1a6>
 800476c:	e142      	b.n	80049f4 <HAL_RCC_OscConfig+0x42c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476e:	682b      	ldr	r3, [r5, #0]
 8004770:	4a62      	ldr	r2, [pc, #392]	@ (80048fc <HAL_RCC_OscConfig+0x334>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004772:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8004774:	4013      	ands	r3, r2
 8004776:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004778:	f7fd fd1a 	bl	80021b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800477c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800477e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004780:	e004      	b.n	800478c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004782:	f7fd fd15 	bl	80021b0 <HAL_GetTick>
 8004786:	1b00      	subs	r0, r0, r4
 8004788:	2802      	cmp	r0, #2
 800478a:	d863      	bhi.n	8004854 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	4233      	tst	r3, r6
 8004790:	d1f7      	bne.n	8004782 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }

  return HAL_OK;
 8004792:	2000      	movs	r0, #0
}
 8004794:	b003      	add	sp, #12
 8004796:	bcc0      	pop	{r6, r7}
 8004798:	46b9      	mov	r9, r7
 800479a:	46b0      	mov	r8, r6
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800479e:	684a      	ldr	r2, [r1, #4]
 80047a0:	21c0      	movs	r1, #192	@ 0xc0
 80047a2:	0249      	lsls	r1, r1, #9
 80047a4:	400a      	ands	r2, r1
 80047a6:	2180      	movs	r1, #128	@ 0x80
 80047a8:	0209      	lsls	r1, r1, #8
 80047aa:	428a      	cmp	r2, r1
 80047ac:	d000      	beq.n	80047b0 <HAL_RCC_OscConfig+0x1e8>
 80047ae:	e754      	b.n	800465a <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b0:	4a4e      	ldr	r2, [pc, #312]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	0792      	lsls	r2, r2, #30
 80047b6:	d541      	bpl.n	800483c <HAL_RCC_OscConfig+0x274>
 80047b8:	68e2      	ldr	r2, [r4, #12]
 80047ba:	2a01      	cmp	r2, #1
 80047bc:	d03e      	beq.n	800483c <HAL_RCC_OscConfig+0x274>
    return HAL_ERROR;
 80047be:	2001      	movs	r0, #1
 80047c0:	e7e8      	b.n	8004794 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_DISABLE();
 80047c2:	2201      	movs	r2, #1
 80047c4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c6:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80047c8:	4393      	bics	r3, r2
 80047ca:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 80047cc:	f7fd fcf0 	bl	80021b0 <HAL_GetTick>
 80047d0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d2:	e004      	b.n	80047de <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d4:	f7fd fcec 	bl	80021b0 <HAL_GetTick>
 80047d8:	1b80      	subs	r0, r0, r6
 80047da:	2802      	cmp	r0, #2
 80047dc:	d83a      	bhi.n	8004854 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047de:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80047e0:	421f      	tst	r7, r3
 80047e2:	d1f7      	bne.n	80047d4 <HAL_RCC_OscConfig+0x20c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	e79e      	b.n	8004726 <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047e8:	21c0      	movs	r1, #192	@ 0xc0
 80047ea:	6842      	ldr	r2, [r0, #4]
 80047ec:	0249      	lsls	r1, r1, #9
 80047ee:	400a      	ands	r2, r1
 80047f0:	2180      	movs	r1, #128	@ 0x80
 80047f2:	0249      	lsls	r1, r1, #9
 80047f4:	428a      	cmp	r2, r1
 80047f6:	d000      	beq.n	80047fa <HAL_RCC_OscConfig+0x232>
 80047f8:	e6fe      	b.n	80045f8 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fa:	4a3c      	ldr	r2, [pc, #240]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	0392      	lsls	r2, r2, #14
 8004800:	d400      	bmi.n	8004804 <HAL_RCC_OscConfig+0x23c>
 8004802:	e71d      	b.n	8004640 <HAL_RCC_OscConfig+0x78>
 8004804:	6862      	ldr	r2, [r4, #4]
 8004806:	2a00      	cmp	r2, #0
 8004808:	d000      	beq.n	800480c <HAL_RCC_OscConfig+0x244>
 800480a:	e719      	b.n	8004640 <HAL_RCC_OscConfig+0x78>
 800480c:	e7d7      	b.n	80047be <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800480e:	2380      	movs	r3, #128	@ 0x80
 8004810:	4a36      	ldr	r2, [pc, #216]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 8004812:	025b      	lsls	r3, r3, #9
 8004814:	6811      	ldr	r1, [r2, #0]
 8004816:	430b      	orrs	r3, r1
 8004818:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800481a:	e700      	b.n	800461e <HAL_RCC_OscConfig+0x56>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800481c:	6833      	ldr	r3, [r6, #0]
 800481e:	433b      	orrs	r3, r7
 8004820:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004822:	f7fd fcc5 	bl	80021b0 <HAL_GetTick>
 8004826:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	e004      	b.n	8004834 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482a:	f7fd fcc1 	bl	80021b0 <HAL_GetTick>
 800482e:	1b40      	subs	r0, r0, r5
 8004830:	2864      	cmp	r0, #100	@ 0x64
 8004832:	d80f      	bhi.n	8004854 <HAL_RCC_OscConfig+0x28c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004834:	6833      	ldr	r3, [r6, #0]
 8004836:	423b      	tst	r3, r7
 8004838:	d0f7      	beq.n	800482a <HAL_RCC_OscConfig+0x262>
 800483a:	e749      	b.n	80046d0 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	25f8      	movs	r5, #248	@ 0xf8
 800483e:	482b      	ldr	r0, [pc, #172]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 8004840:	6922      	ldr	r2, [r4, #16]
 8004842:	6801      	ldr	r1, [r0, #0]
 8004844:	00d2      	lsls	r2, r2, #3
 8004846:	43a9      	bics	r1, r5
 8004848:	430a      	orrs	r2, r1
 800484a:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484c:	071a      	lsls	r2, r3, #28
 800484e:	d400      	bmi.n	8004852 <HAL_RCC_OscConfig+0x28a>
 8004850:	e724      	b.n	800469c <HAL_RCC_OscConfig+0xd4>
 8004852:	e751      	b.n	80046f8 <HAL_RCC_OscConfig+0x130>
            return HAL_TIMEOUT;
 8004854:	2003      	movs	r0, #3
 8004856:	e79d      	b.n	8004794 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004858:	4d24      	ldr	r5, [pc, #144]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
 800485a:	4a25      	ldr	r2, [pc, #148]	@ (80048f0 <HAL_RCC_OscConfig+0x328>)
 800485c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485e:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004860:	4013      	ands	r3, r2
 8004862:	602b      	str	r3, [r5, #0]
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	4a23      	ldr	r2, [pc, #140]	@ (80048f4 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004868:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800486a:	4013      	ands	r3, r2
 800486c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800486e:	f7fd fc9f 	bl	80021b0 <HAL_GetTick>
 8004872:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004874:	e004      	b.n	8004880 <HAL_RCC_OscConfig+0x2b8>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004876:	f7fd fc9b 	bl	80021b0 <HAL_GetTick>
 800487a:	1b80      	subs	r0, r0, r6
 800487c:	2864      	cmp	r0, #100	@ 0x64
 800487e:	d8e9      	bhi.n	8004854 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	423b      	tst	r3, r7
 8004884:	d1f7      	bne.n	8004876 <HAL_RCC_OscConfig+0x2ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	e6da      	b.n	8004640 <HAL_RCC_OscConfig+0x78>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800488a:	2201      	movs	r2, #1
 800488c:	4e17      	ldr	r6, [pc, #92]	@ (80048ec <HAL_RCC_OscConfig+0x324>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488e:	4d1c      	ldr	r5, [pc, #112]	@ (8004900 <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004890:	6a33      	ldr	r3, [r6, #32]
 8004892:	4393      	bics	r3, r2
 8004894:	6233      	str	r3, [r6, #32]
 8004896:	6a33      	ldr	r3, [r6, #32]
 8004898:	3203      	adds	r2, #3
 800489a:	4393      	bics	r3, r2
 800489c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800489e:	f7fd fc87 	bl	80021b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a2:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80048a4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a6:	4698      	mov	r8, r3
 80048a8:	e004      	b.n	80048b4 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fd fc81 	bl	80021b0 <HAL_GetTick>
 80048ae:	1bc0      	subs	r0, r0, r7
 80048b0:	42a8      	cmp	r0, r5
 80048b2:	d8cf      	bhi.n	8004854 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b4:	4642      	mov	r2, r8
 80048b6:	6a33      	ldr	r3, [r6, #32]
 80048b8:	421a      	tst	r2, r3
 80048ba:	d1f6      	bne.n	80048aa <HAL_RCC_OscConfig+0x2e2>
    if(pwrclkchanged == SET)
 80048bc:	464b      	mov	r3, r9
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d04e      	beq.n	8004960 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	e731      	b.n	800472a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 80048c6:	2201      	movs	r2, #1
 80048c8:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80048cc:	4393      	bics	r3, r2
 80048ce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80048d0:	f7fd fc6e 	bl	80021b0 <HAL_GetTick>
 80048d4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	e004      	b.n	80048e2 <HAL_RCC_OscConfig+0x31a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048d8:	f7fd fc6a 	bl	80021b0 <HAL_GetTick>
 80048dc:	1b80      	subs	r0, r0, r6
 80048de:	2802      	cmp	r0, #2
 80048e0:	d8b8      	bhi.n	8004854 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048e2:	682b      	ldr	r3, [r5, #0]
 80048e4:	421f      	tst	r7, r3
 80048e6:	d1f7      	bne.n	80048d8 <HAL_RCC_OscConfig+0x310>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	e6d5      	b.n	8004698 <HAL_RCC_OscConfig+0xd0>
 80048ec:	40021000 	.word	0x40021000
 80048f0:	fffeffff 	.word	0xfffeffff
 80048f4:	fffbffff 	.word	0xfffbffff
 80048f8:	40007000 	.word	0x40007000
 80048fc:	feffffff 	.word	0xfeffffff
 8004900:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004904:	495d      	ldr	r1, [pc, #372]	@ (8004a7c <HAL_RCC_OscConfig+0x4b4>)
 8004906:	6a0a      	ldr	r2, [r1, #32]
 8004908:	4313      	orrs	r3, r2
 800490a:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 800490c:	f7fd fc50 	bl	80021b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004910:	4b5a      	ldr	r3, [pc, #360]	@ (8004a7c <HAL_RCC_OscConfig+0x4b4>)
      tickstart = HAL_GetTick();
 8004912:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004914:	4698      	mov	r8, r3
 8004916:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004918:	4d59      	ldr	r5, [pc, #356]	@ (8004a80 <HAL_RCC_OscConfig+0x4b8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491a:	e004      	b.n	8004926 <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800491c:	f7fd fc48 	bl	80021b0 <HAL_GetTick>
 8004920:	1b80      	subs	r0, r0, r6
 8004922:	42a8      	cmp	r0, r5
 8004924:	d896      	bhi.n	8004854 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004926:	4643      	mov	r3, r8
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	421f      	tst	r7, r3
 800492c:	d0f6      	beq.n	800491c <HAL_RCC_OscConfig+0x354>
 800492e:	e7c5      	b.n	80048bc <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004930:	2204      	movs	r2, #4
 8004932:	4d52      	ldr	r5, [pc, #328]	@ (8004a7c <HAL_RCC_OscConfig+0x4b4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004934:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004936:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004938:	4313      	orrs	r3, r2
 800493a:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 800493c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800493e:	3a03      	subs	r2, #3
 8004940:	4393      	bics	r3, r2
 8004942:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8004944:	f7fd fc34 	bl	80021b0 <HAL_GetTick>
 8004948:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800494a:	e005      	b.n	8004958 <HAL_RCC_OscConfig+0x390>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800494c:	f7fd fc30 	bl	80021b0 <HAL_GetTick>
 8004950:	1b80      	subs	r0, r0, r6
 8004952:	2802      	cmp	r0, #2
 8004954:	d900      	bls.n	8004958 <HAL_RCC_OscConfig+0x390>
 8004956:	e77d      	b.n	8004854 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004958:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800495a:	421f      	tst	r7, r3
 800495c:	d1f6      	bne.n	800494c <HAL_RCC_OscConfig+0x384>
 800495e:	e6f9      	b.n	8004754 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004960:	4a46      	ldr	r2, [pc, #280]	@ (8004a7c <HAL_RCC_OscConfig+0x4b4>)
 8004962:	4948      	ldr	r1, [pc, #288]	@ (8004a84 <HAL_RCC_OscConfig+0x4bc>)
 8004964:	69d3      	ldr	r3, [r2, #28]
 8004966:	400b      	ands	r3, r1
 8004968:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	e6dd      	b.n	800472a <HAL_RCC_OscConfig+0x162>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800496e:	2104      	movs	r1, #4
 8004970:	4b42      	ldr	r3, [pc, #264]	@ (8004a7c <HAL_RCC_OscConfig+0x4b4>)
 8004972:	6a1a      	ldr	r2, [r3, #32]
 8004974:	430a      	orrs	r2, r1
 8004976:	621a      	str	r2, [r3, #32]
 8004978:	6a1a      	ldr	r2, [r3, #32]
 800497a:	3903      	subs	r1, #3
 800497c:	430a      	orrs	r2, r1
 800497e:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004980:	e7c4      	b.n	800490c <HAL_RCC_OscConfig+0x344>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004982:	2b01      	cmp	r3, #1
 8004984:	d100      	bne.n	8004988 <HAL_RCC_OscConfig+0x3c0>
 8004986:	e71a      	b.n	80047be <HAL_RCC_OscConfig+0x1f6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004988:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 800498a:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800498c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800498e:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8004990:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	401a      	ands	r2, r3
 8004994:	428a      	cmp	r2, r1
 8004996:	d000      	beq.n	800499a <HAL_RCC_OscConfig+0x3d2>
 8004998:	e711      	b.n	80047be <HAL_RCC_OscConfig+0x1f6>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800499a:	220f      	movs	r2, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800499c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800499e:	4002      	ands	r2, r0
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a0:	428a      	cmp	r2, r1
 80049a2:	d000      	beq.n	80049a6 <HAL_RCC_OscConfig+0x3de>
 80049a4:	e70b      	b.n	80047be <HAL_RCC_OscConfig+0x1f6>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80049a6:	22f0      	movs	r2, #240	@ 0xf0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80049a8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80049aa:	0392      	lsls	r2, r2, #14
 80049ac:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80049ae:	1a18      	subs	r0, r3, r0
 80049b0:	1e43      	subs	r3, r0, #1
 80049b2:	4198      	sbcs	r0, r3
 80049b4:	b2c0      	uxtb	r0, r0
 80049b6:	e6ed      	b.n	8004794 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSI14ADC_DISABLE();
 80049b8:	2104      	movs	r1, #4
 80049ba:	4d30      	ldr	r5, [pc, #192]	@ (8004a7c <HAL_RCC_OscConfig+0x4b4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80049bc:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80049be:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80049c0:	430a      	orrs	r2, r1
 80049c2:	636a      	str	r2, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 80049c4:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80049c6:	4313      	orrs	r3, r2
 80049c8:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80049ca:	f7fd fbf1 	bl	80021b0 <HAL_GetTick>
 80049ce:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80049d0:	e005      	b.n	80049de <HAL_RCC_OscConfig+0x416>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80049d2:	f7fd fbed 	bl	80021b0 <HAL_GetTick>
 80049d6:	1b80      	subs	r0, r0, r6
 80049d8:	2802      	cmp	r0, #2
 80049da:	d900      	bls.n	80049de <HAL_RCC_OscConfig+0x416>
 80049dc:	e73a      	b.n	8004854 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80049de:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80049e0:	421f      	tst	r7, r3
 80049e2:	d0f6      	beq.n	80049d2 <HAL_RCC_OscConfig+0x40a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80049e4:	21f8      	movs	r1, #248	@ 0xf8
 80049e6:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80049e8:	69a3      	ldr	r3, [r4, #24]
 80049ea:	438a      	bics	r2, r1
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4313      	orrs	r3, r2
 80049f0:	636b      	str	r3, [r5, #52]	@ 0x34
 80049f2:	e6af      	b.n	8004754 <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_PLL_DISABLE();
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	4a24      	ldr	r2, [pc, #144]	@ (8004a88 <HAL_RCC_OscConfig+0x4c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80049fa:	4013      	ands	r3, r2
 80049fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80049fe:	f7fd fbd7 	bl	80021b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a02:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8004a04:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a06:	e005      	b.n	8004a14 <HAL_RCC_OscConfig+0x44c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fd fbd2 	bl	80021b0 <HAL_GetTick>
 8004a0c:	1b80      	subs	r0, r0, r6
 8004a0e:	2802      	cmp	r0, #2
 8004a10:	d900      	bls.n	8004a14 <HAL_RCC_OscConfig+0x44c>
 8004a12:	e71f      	b.n	8004854 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a14:	682b      	ldr	r3, [r5, #0]
 8004a16:	423b      	tst	r3, r7
 8004a18:	d1f6      	bne.n	8004a08 <HAL_RCC_OscConfig+0x440>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a1a:	220f      	movs	r2, #15
 8004a1c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a1e:	4e17      	ldr	r6, [pc, #92]	@ (8004a7c <HAL_RCC_OscConfig+0x4b4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a20:	4393      	bics	r3, r2
 8004a22:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004a24:	4313      	orrs	r3, r2
 8004a26:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8004a28:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004a2a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004a2c:	686a      	ldr	r2, [r5, #4]
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	4916      	ldr	r1, [pc, #88]	@ (8004a8c <HAL_RCC_OscConfig+0x4c4>)
 8004a32:	400a      	ands	r2, r1
 8004a34:	4313      	orrs	r3, r2
 8004a36:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004a38:	2380      	movs	r3, #128	@ 0x80
 8004a3a:	682a      	ldr	r2, [r5, #0]
 8004a3c:	045b      	lsls	r3, r3, #17
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a42:	f7fd fbb5 	bl	80021b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a46:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004a48:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a4a:	04ad      	lsls	r5, r5, #18
 8004a4c:	e005      	b.n	8004a5a <HAL_RCC_OscConfig+0x492>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a4e:	f7fd fbaf 	bl	80021b0 <HAL_GetTick>
 8004a52:	1b00      	subs	r0, r0, r4
 8004a54:	2802      	cmp	r0, #2
 8004a56:	d900      	bls.n	8004a5a <HAL_RCC_OscConfig+0x492>
 8004a58:	e6fc      	b.n	8004854 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a5a:	6833      	ldr	r3, [r6, #0]
 8004a5c:	422b      	tst	r3, r5
 8004a5e:	d0f6      	beq.n	8004a4e <HAL_RCC_OscConfig+0x486>
 8004a60:	e697      	b.n	8004792 <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a62:	2280      	movs	r2, #128	@ 0x80
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <HAL_RCC_OscConfig+0x4b4>)
 8004a66:	02d2      	lsls	r2, r2, #11
 8004a68:	6819      	ldr	r1, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	2280      	movs	r2, #128	@ 0x80
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	0252      	lsls	r2, r2, #9
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a78:	e5d1      	b.n	800461e <HAL_RCC_OscConfig+0x56>
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	00001388 	.word	0x00001388
 8004a84:	efffffff 	.word	0xefffffff
 8004a88:	feffffff 	.word	0xfeffffff
 8004a8c:	ffc27fff 	.word	0xffc27fff

08004a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	46ce      	mov	lr, r9
 8004a94:	4647      	mov	r7, r8
 8004a96:	0004      	movs	r4, r0
 8004a98:	000d      	movs	r5, r1
 8004a9a:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	d00d      	beq.n	8004abc <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4945      	ldr	r1, [pc, #276]	@ (8004bb8 <HAL_RCC_ClockConfig+0x128>)
 8004aa4:	680a      	ldr	r2, [r1, #0]
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	42aa      	cmp	r2, r5
 8004aaa:	d20c      	bcs.n	8004ac6 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aac:	680a      	ldr	r2, [r1, #0]
 8004aae:	439a      	bics	r2, r3
 8004ab0:	432a      	orrs	r2, r5
 8004ab2:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab4:	680a      	ldr	r2, [r1, #0]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	42ab      	cmp	r3, r5
 8004aba:	d004      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8004abc:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8004abe:	bcc0      	pop	{r6, r7}
 8004ac0:	46b9      	mov	r9, r7
 8004ac2:	46b0      	mov	r8, r6
 8004ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	079a      	lsls	r2, r3, #30
 8004aca:	d50e      	bpl.n	8004aea <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004acc:	075a      	lsls	r2, r3, #29
 8004ace:	d505      	bpl.n	8004adc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ad0:	22e0      	movs	r2, #224	@ 0xe0
 8004ad2:	493a      	ldr	r1, [pc, #232]	@ (8004bbc <HAL_RCC_ClockConfig+0x12c>)
 8004ad4:	00d2      	lsls	r2, r2, #3
 8004ad6:	6848      	ldr	r0, [r1, #4]
 8004ad8:	4302      	orrs	r2, r0
 8004ada:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004adc:	20f0      	movs	r0, #240	@ 0xf0
 8004ade:	4937      	ldr	r1, [pc, #220]	@ (8004bbc <HAL_RCC_ClockConfig+0x12c>)
 8004ae0:	684a      	ldr	r2, [r1, #4]
 8004ae2:	4382      	bics	r2, r0
 8004ae4:	68a0      	ldr	r0, [r4, #8]
 8004ae6:	4302      	orrs	r2, r0
 8004ae8:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aea:	07db      	lsls	r3, r3, #31
 8004aec:	d522      	bpl.n	8004b34 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aee:	4b33      	ldr	r3, [pc, #204]	@ (8004bbc <HAL_RCC_ClockConfig+0x12c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af0:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af4:	2a01      	cmp	r2, #1
 8004af6:	d059      	beq.n	8004bac <HAL_RCC_ClockConfig+0x11c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af8:	2a02      	cmp	r2, #2
 8004afa:	d054      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x116>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afc:	079b      	lsls	r3, r3, #30
 8004afe:	d5dd      	bpl.n	8004abc <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b00:	2103      	movs	r1, #3
 8004b02:	4e2e      	ldr	r6, [pc, #184]	@ (8004bbc <HAL_RCC_ClockConfig+0x12c>)
 8004b04:	6873      	ldr	r3, [r6, #4]
 8004b06:	438b      	bics	r3, r1
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004b0c:	f7fd fb50 	bl	80021b0 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b10:	230c      	movs	r3, #12
 8004b12:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b14:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc0 <HAL_RCC_ClockConfig+0x130>)
    tickstart = HAL_GetTick();
 8004b16:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b18:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1a:	e004      	b.n	8004b26 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1c:	f7fd fb48 	bl	80021b0 <HAL_GetTick>
 8004b20:	1bc0      	subs	r0, r0, r7
 8004b22:	4548      	cmp	r0, r9
 8004b24:	d845      	bhi.n	8004bb2 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4643      	mov	r3, r8
 8004b28:	6872      	ldr	r2, [r6, #4]
 8004b2a:	401a      	ands	r2, r3
 8004b2c:	6863      	ldr	r3, [r4, #4]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d1f3      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b34:	2101      	movs	r1, #1
 8004b36:	4a20      	ldr	r2, [pc, #128]	@ (8004bb8 <HAL_RCC_ClockConfig+0x128>)
 8004b38:	6813      	ldr	r3, [r2, #0]
 8004b3a:	400b      	ands	r3, r1
 8004b3c:	42ab      	cmp	r3, r5
 8004b3e:	d905      	bls.n	8004b4c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	438b      	bics	r3, r1
 8004b44:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	4219      	tst	r1, r3
 8004b4a:	d1b7      	bne.n	8004abc <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	075b      	lsls	r3, r3, #29
 8004b50:	d506      	bpl.n	8004b60 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004b52:	4a1a      	ldr	r2, [pc, #104]	@ (8004bbc <HAL_RCC_ClockConfig+0x12c>)
 8004b54:	491b      	ldr	r1, [pc, #108]	@ (8004bc4 <HAL_RCC_ClockConfig+0x134>)
 8004b56:	6853      	ldr	r3, [r2, #4]
 8004b58:	400b      	ands	r3, r1
 8004b5a:	68e1      	ldr	r1, [r4, #12]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b60:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004b62:	4916      	ldr	r1, [pc, #88]	@ (8004bbc <HAL_RCC_ClockConfig+0x12c>)
 8004b64:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004b66:	401a      	ands	r2, r3
 8004b68:	2a08      	cmp	r2, #8
 8004b6a:	d00e      	beq.n	8004b8a <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b6c:	4816      	ldr	r0, [pc, #88]	@ (8004bc8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004b6e:	4b13      	ldr	r3, [pc, #76]	@ (8004bbc <HAL_RCC_ClockConfig+0x12c>)
 8004b70:	4a16      	ldr	r2, [pc, #88]	@ (8004bcc <HAL_RCC_ClockConfig+0x13c>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4916      	ldr	r1, [pc, #88]	@ (8004bd0 <HAL_RCC_ClockConfig+0x140>)
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	0f1b      	lsrs	r3, r3, #28
 8004b7a:	5cd3      	ldrb	r3, [r2, r3]
 8004b7c:	40d8      	lsrs	r0, r3
 8004b7e:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b80:	2003      	movs	r0, #3
 8004b82:	f7fd fad3 	bl	800212c <HAL_InitTick>
  return HAL_OK;
 8004b86:	2000      	movs	r0, #0
 8004b88:	e799      	b.n	8004abe <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004b8a:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004b8c:	3207      	adds	r2, #7
 8004b8e:	4911      	ldr	r1, [pc, #68]	@ (8004bd4 <HAL_RCC_ClockConfig+0x144>)
 8004b90:	0c9b      	lsrs	r3, r3, #18
 8004b92:	4013      	ands	r3, r2
 8004b94:	5ccc      	ldrb	r4, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004b96:	4b10      	ldr	r3, [pc, #64]	@ (8004bd8 <HAL_RCC_ClockConfig+0x148>)
 8004b98:	4002      	ands	r2, r0
 8004b9a:	5c99      	ldrb	r1, [r3, r2]
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b9c:	480a      	ldr	r0, [pc, #40]	@ (8004bc8 <HAL_RCC_ClockConfig+0x138>)
 8004b9e:	f7fb fac5 	bl	800012c <__udivsi3>
 8004ba2:	4360      	muls	r0, r4
 8004ba4:	e7e3      	b.n	8004b6e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba6:	019b      	lsls	r3, r3, #6
 8004ba8:	d4aa      	bmi.n	8004b00 <HAL_RCC_ClockConfig+0x70>
 8004baa:	e787      	b.n	8004abc <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bac:	039b      	lsls	r3, r3, #14
 8004bae:	d4a7      	bmi.n	8004b00 <HAL_RCC_ClockConfig+0x70>
 8004bb0:	e784      	b.n	8004abc <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8004bb2:	2003      	movs	r0, #3
 8004bb4:	e783      	b.n	8004abe <HAL_RCC_ClockConfig+0x2e>
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	40022000 	.word	0x40022000
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	00001388 	.word	0x00001388
 8004bc4:	fffff8ff 	.word	0xfffff8ff
 8004bc8:	007a1200 	.word	0x007a1200
 8004bcc:	080089b0 	.word	0x080089b0
 8004bd0:	20000014 	.word	0x20000014
 8004bd4:	080089d0 	.word	0x080089d0
 8004bd8:	080089c0 	.word	0x080089c0

08004bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bde:	46ce      	mov	lr, r9
 8004be0:	4647      	mov	r7, r8
 8004be2:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004be4:	6803      	ldr	r3, [r0, #0]
{
 8004be6:	0004      	movs	r4, r0
 8004be8:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bea:	03da      	lsls	r2, r3, #15
 8004bec:	d530      	bpl.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bee:	2280      	movs	r2, #128	@ 0x80
 8004bf0:	4b44      	ldr	r3, [pc, #272]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004bf2:	0552      	lsls	r2, r2, #21
 8004bf4:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004bf6:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf8:	4211      	tst	r1, r2
 8004bfa:	d04b      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfc:	2680      	movs	r6, #128	@ 0x80
 8004bfe:	4d42      	ldr	r5, [pc, #264]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8004c00:	0076      	lsls	r6, r6, #1
 8004c02:	682b      	ldr	r3, [r5, #0]
 8004c04:	4233      	tst	r3, r6
 8004c06:	d053      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c08:	4d3e      	ldr	r5, [pc, #248]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004c0a:	23c0      	movs	r3, #192	@ 0xc0
 8004c0c:	6a2a      	ldr	r2, [r5, #32]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	0010      	movs	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c12:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c14:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c16:	421a      	tst	r2, r3
 8004c18:	d011      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c1a:	400b      	ands	r3, r1
 8004c1c:	4283      	cmp	r3, r0
 8004c1e:	d00e      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c20:	2080      	movs	r0, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c22:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c24:	6a2e      	ldr	r6, [r5, #32]
 8004c26:	0240      	lsls	r0, r0, #9
 8004c28:	4330      	orrs	r0, r6
 8004c2a:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c2c:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c2e:	4a37      	ldr	r2, [pc, #220]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c30:	4e37      	ldr	r6, [pc, #220]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c32:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c34:	4030      	ands	r0, r6
 8004c36:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c38:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c3a:	07db      	lsls	r3, r3, #31
 8004c3c:	d44f      	bmi.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x102>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3e:	4a31      	ldr	r2, [pc, #196]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004c40:	4832      	ldr	r0, [pc, #200]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c42:	6a13      	ldr	r3, [r2, #32]
 8004c44:	4003      	ands	r3, r0
 8004c46:	430b      	orrs	r3, r1
 8004c48:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c4a:	2f01      	cmp	r7, #1
 8004c4c:	d041      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	07da      	lsls	r2, r3, #31
 8004c52:	d506      	bpl.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c54:	2003      	movs	r0, #3
 8004c56:	492b      	ldr	r1, [pc, #172]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004c58:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004c5a:	4382      	bics	r2, r0
 8004c5c:	68a0      	ldr	r0, [r4, #8]
 8004c5e:	4302      	orrs	r2, r0
 8004c60:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c62:	069a      	lsls	r2, r3, #26
 8004c64:	d506      	bpl.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c66:	2010      	movs	r0, #16
 8004c68:	4926      	ldr	r1, [pc, #152]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004c6a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004c6c:	4382      	bics	r2, r0
 8004c6e:	68e0      	ldr	r0, [r4, #12]
 8004c70:	4302      	orrs	r2, r0
 8004c72:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c74:	039b      	lsls	r3, r3, #14
 8004c76:	d405      	bmi.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004c78:	2000      	movs	r0, #0
}
 8004c7a:	b003      	add	sp, #12
 8004c7c:	bcc0      	pop	{r6, r7}
 8004c7e:	46b9      	mov	r9, r7
 8004c80:	46b0      	mov	r8, r6
 8004c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c84:	2180      	movs	r1, #128	@ 0x80
 8004c86:	4a1f      	ldr	r2, [pc, #124]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004c88:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004c8a:	438b      	bics	r3, r1
 8004c8c:	6921      	ldr	r1, [r4, #16]
 8004c8e:	430b      	orrs	r3, r1
 8004c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c92:	e7f1      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c94:	2680      	movs	r6, #128	@ 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c98:	4d1b      	ldr	r5, [pc, #108]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c9a:	4311      	orrs	r1, r2
 8004c9c:	61d9      	str	r1, [r3, #28]
 8004c9e:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	9301      	str	r3, [sp, #4]
 8004ca6:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca8:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8004caa:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cac:	4233      	tst	r3, r6
 8004cae:	d1ab      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	4333      	orrs	r3, r6
 8004cb4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004cb6:	f7fd fa7b 	bl	80021b0 <HAL_GetTick>
 8004cba:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	4233      	tst	r3, r6
 8004cc0:	d1a2      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc2:	f7fd fa75 	bl	80021b0 <HAL_GetTick>
 8004cc6:	4643      	mov	r3, r8
 8004cc8:	1ac0      	subs	r0, r0, r3
 8004cca:	2864      	cmp	r0, #100	@ 0x64
 8004ccc:	d9f6      	bls.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xe0>
          return HAL_TIMEOUT;
 8004cce:	2003      	movs	r0, #3
 8004cd0:	e7d3      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd2:	69d3      	ldr	r3, [r2, #28]
 8004cd4:	490f      	ldr	r1, [pc, #60]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004cd6:	400b      	ands	r3, r1
 8004cd8:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	e7b8      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x74>
        tickstart = HAL_GetTick();
 8004cde:	f7fd fa67 	bl	80021b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
        tickstart = HAL_GetTick();
 8004ce8:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cec:	e004      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fd fa5f 	bl	80021b0 <HAL_GetTick>
 8004cf2:	1b80      	subs	r0, r0, r6
 8004cf4:	4548      	cmp	r0, r9
 8004cf6:	d8ea      	bhi.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xf2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	6a2b      	ldr	r3, [r5, #32]
 8004cfc:	421a      	tst	r2, r3
 8004cfe:	d0f6      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d00:	6861      	ldr	r1, [r4, #4]
 8004d02:	e79c      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40007000 	.word	0x40007000
 8004d0c:	fffffcff 	.word	0xfffffcff
 8004d10:	fffeffff 	.word	0xfffeffff
 8004d14:	efffffff 	.word	0xefffffff
 8004d18:	00001388 	.word	0x00001388

08004d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d1c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d1e:	2401      	movs	r4, #1
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d20:	2573      	movs	r5, #115	@ 0x73
  tmpccer = TIMx->CCER;
 8004d22:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d24:	6a02      	ldr	r2, [r0, #32]
 8004d26:	43a2      	bics	r2, r4
 8004d28:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004d2a:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004d2c:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d2e:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d30:	680d      	ldr	r5, [r1, #0]
 8004d32:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d34:	2502      	movs	r5, #2
 8004d36:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d38:	688d      	ldr	r5, [r1, #8]
 8004d3a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d3c:	4d0e      	ldr	r5, [pc, #56]	@ (8004d78 <TIM_OC1_SetConfig+0x5c>)
 8004d3e:	42a8      	cmp	r0, r5
 8004d40:	d008      	beq.n	8004d54 <TIM_OC1_SetConfig+0x38>
 8004d42:	4d0e      	ldr	r5, [pc, #56]	@ (8004d7c <TIM_OC1_SetConfig+0x60>)
 8004d44:	42a8      	cmp	r0, r5
 8004d46:	d005      	beq.n	8004d54 <TIM_OC1_SetConfig+0x38>
 8004d48:	4d0d      	ldr	r5, [pc, #52]	@ (8004d80 <TIM_OC1_SetConfig+0x64>)
 8004d4a:	42a8      	cmp	r0, r5
 8004d4c:	d002      	beq.n	8004d54 <TIM_OC1_SetConfig+0x38>
 8004d4e:	4d0d      	ldr	r5, [pc, #52]	@ (8004d84 <TIM_OC1_SetConfig+0x68>)
 8004d50:	42a8      	cmp	r0, r5
 8004d52:	d10b      	bne.n	8004d6c <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d54:	2508      	movs	r5, #8
 8004d56:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d58:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d5a:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004d5c:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d5e:	2504      	movs	r5, #4
 8004d60:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d62:	4d09      	ldr	r5, [pc, #36]	@ (8004d88 <TIM_OC1_SetConfig+0x6c>)
 8004d64:	4015      	ands	r5, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d66:	694a      	ldr	r2, [r1, #20]
 8004d68:	4332      	orrs	r2, r6
 8004d6a:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d6c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d6e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004d70:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004d72:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	6203      	str	r3, [r0, #32]
}
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
 8004d78:	40012c00 	.word	0x40012c00
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40014400 	.word	0x40014400
 8004d84:	40014800 	.word	0x40014800
 8004d88:	fffffcff 	.word	0xfffffcff

08004d8c <HAL_TIM_Base_Init>:
{
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004d90:	d100      	bne.n	8004d94 <HAL_TIM_Base_Init+0x8>
 8004d92:	e06d      	b.n	8004e70 <HAL_TIM_Base_Init+0xe4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d94:	233d      	movs	r3, #61	@ 0x3d
 8004d96:	5cc3      	ldrb	r3, [r0, r3]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d020      	beq.n	8004de0 <HAL_TIM_Base_Init+0x54>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9e:	233d      	movs	r3, #61	@ 0x3d
 8004da0:	2202      	movs	r2, #2
 8004da2:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da4:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da6:	4e33      	ldr	r6, [pc, #204]	@ (8004e74 <HAL_TIM_Base_Init+0xe8>)
  tmpcr1 = TIMx->CR1;
 8004da8:	681a      	ldr	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8004daa:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dac:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dae:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db0:	42b3      	cmp	r3, r6
 8004db2:	d01a      	beq.n	8004dea <HAL_TIM_Base_Init+0x5e>
 8004db4:	4e30      	ldr	r6, [pc, #192]	@ (8004e78 <HAL_TIM_Base_Init+0xec>)
 8004db6:	42b3      	cmp	r3, r6
 8004db8:	d046      	beq.n	8004e48 <HAL_TIM_Base_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dba:	4e30      	ldr	r6, [pc, #192]	@ (8004e7c <HAL_TIM_Base_Init+0xf0>)
 8004dbc:	42b3      	cmp	r3, r6
 8004dbe:	d047      	beq.n	8004e50 <HAL_TIM_Base_Init+0xc4>
 8004dc0:	4e2f      	ldr	r6, [pc, #188]	@ (8004e80 <HAL_TIM_Base_Init+0xf4>)
 8004dc2:	42b3      	cmp	r3, r6
 8004dc4:	d049      	beq.n	8004e5a <HAL_TIM_Base_Init+0xce>
 8004dc6:	4e2f      	ldr	r6, [pc, #188]	@ (8004e84 <HAL_TIM_Base_Init+0xf8>)
 8004dc8:	42b3      	cmp	r3, r6
 8004dca:	d012      	beq.n	8004df2 <HAL_TIM_Base_Init+0x66>
 8004dcc:	4e2e      	ldr	r6, [pc, #184]	@ (8004e88 <HAL_TIM_Base_Init+0xfc>)
 8004dce:	42b3      	cmp	r3, r6
 8004dd0:	d00f      	beq.n	8004df2 <HAL_TIM_Base_Init+0x66>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd2:	2680      	movs	r6, #128	@ 0x80
 8004dd4:	43b2      	bics	r2, r6
 8004dd6:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004dd8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dda:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ddc:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dde:	e014      	b.n	8004e0a <HAL_TIM_Base_Init+0x7e>
    htim->Lock = HAL_UNLOCKED;
 8004de0:	333c      	adds	r3, #60	@ 0x3c
 8004de2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8004de4:	f7fd f85a 	bl	8001e9c <HAL_TIM_Base_MspInit>
 8004de8:	e7d9      	b.n	8004d9e <HAL_TIM_Base_Init+0x12>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dea:	2670      	movs	r6, #112	@ 0x70
 8004dec:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004dee:	68a6      	ldr	r6, [r4, #8]
 8004df0:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df2:	4e26      	ldr	r6, [pc, #152]	@ (8004e8c <HAL_TIM_Base_Init+0x100>)
 8004df4:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df6:	6926      	ldr	r6, [r4, #16]
 8004df8:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dfa:	2680      	movs	r6, #128	@ 0x80
 8004dfc:	43b2      	bics	r2, r6
 8004dfe:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004e00:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e02:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e04:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004e06:	6962      	ldr	r2, [r4, #20]
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e0e:	6919      	ldr	r1, [r3, #16]
 8004e10:	420a      	tst	r2, r1
 8004e12:	d002      	beq.n	8004e1a <HAL_TIM_Base_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e14:	6919      	ldr	r1, [r3, #16]
 8004e16:	4391      	bics	r1, r2
 8004e18:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 8004e1e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e20:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e22:	3a08      	subs	r2, #8
 8004e24:	54a3      	strb	r3, [r4, r2]
 8004e26:	3201      	adds	r2, #1
 8004e28:	54a3      	strb	r3, [r4, r2]
 8004e2a:	3201      	adds	r2, #1
 8004e2c:	54a3      	strb	r3, [r4, r2]
 8004e2e:	3201      	adds	r2, #1
 8004e30:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e32:	3201      	adds	r2, #1
 8004e34:	54a3      	strb	r3, [r4, r2]
 8004e36:	3201      	adds	r2, #1
 8004e38:	54a3      	strb	r3, [r4, r2]
 8004e3a:	3201      	adds	r2, #1
 8004e3c:	54a3      	strb	r3, [r4, r2]
 8004e3e:	3201      	adds	r2, #1
 8004e40:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004e42:	3a08      	subs	r2, #8
 8004e44:	54a3      	strb	r3, [r4, r2]
}
 8004e46:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e48:	2670      	movs	r6, #112	@ 0x70
 8004e4a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004e4c:	68a6      	ldr	r6, [r4, #8]
 8004e4e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e50:	4e0e      	ldr	r6, [pc, #56]	@ (8004e8c <HAL_TIM_Base_Init+0x100>)
 8004e52:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e54:	6926      	ldr	r6, [r4, #16]
 8004e56:	4332      	orrs	r2, r6
 8004e58:	e7bb      	b.n	8004dd2 <HAL_TIM_Base_Init+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5a:	4e0c      	ldr	r6, [pc, #48]	@ (8004e8c <HAL_TIM_Base_Init+0x100>)
 8004e5c:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e5e:	6926      	ldr	r6, [r4, #16]
 8004e60:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e62:	2680      	movs	r6, #128	@ 0x80
 8004e64:	43b2      	bics	r2, r6
 8004e66:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 8004e68:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e6a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e6c:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e6e:	e7ca      	b.n	8004e06 <HAL_TIM_Base_Init+0x7a>
    return HAL_ERROR;
 8004e70:	2001      	movs	r0, #1
 8004e72:	e7e8      	b.n	8004e46 <HAL_TIM_Base_Init+0xba>
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40002000 	.word	0x40002000
 8004e80:	40014000 	.word	0x40014000
 8004e84:	40014400 	.word	0x40014400
 8004e88:	40014800 	.word	0x40014800
 8004e8c:	fffffcff 	.word	0xfffffcff

08004e90 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004e90:	213d      	movs	r1, #61	@ 0x3d
{
 8004e92:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8004e94:	5c42      	ldrb	r2, [r0, r1]
{
 8004e96:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8004e98:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8004e9a:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004e9c:	2a01      	cmp	r2, #1
 8004e9e:	d10f      	bne.n	8004ec0 <HAL_TIM_Base_Start+0x30>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	3201      	adds	r2, #1
 8004ea2:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a0c      	ldr	r2, [pc, #48]	@ (8004ed8 <HAL_TIM_Base_Start+0x48>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_TIM_Base_Start+0x32>
 8004eac:	4a0b      	ldr	r2, [pc, #44]	@ (8004edc <HAL_TIM_Base_Start+0x4c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d007      	beq.n	8004ec2 <HAL_TIM_Base_Start+0x32>
 8004eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee0 <HAL_TIM_Base_Start+0x50>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_TIM_Base_Start+0x32>
    __HAL_TIM_ENABLE(htim);
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4322      	orrs	r2, r4
 8004ebc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004ebe:	2000      	movs	r0, #0
}
 8004ec0:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec2:	2207      	movs	r2, #7
 8004ec4:	6899      	ldr	r1, [r3, #8]
 8004ec6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec8:	2a06      	cmp	r2, #6
 8004eca:	d0f8      	beq.n	8004ebe <HAL_TIM_Base_Start+0x2e>
      __HAL_TIM_ENABLE(htim);
 8004ecc:	2101      	movs	r1, #1
 8004ece:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004ed0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	e7f3      	b.n	8004ec0 <HAL_TIM_Base_Start+0x30>
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40014000 	.word	0x40014000

08004ee4 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8004ee4:	4770      	bx	lr
 8004ee6:	46c0      	nop			@ (mov r8, r8)

08004ee8 <HAL_TIM_PWM_Init>:
{
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004eec:	d100      	bne.n	8004ef0 <HAL_TIM_PWM_Init+0x8>
 8004eee:	e06d      	b.n	8004fcc <HAL_TIM_PWM_Init+0xe4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef0:	233d      	movs	r3, #61	@ 0x3d
 8004ef2:	5cc3      	ldrb	r3, [r0, r3]
 8004ef4:	b2da      	uxtb	r2, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d020      	beq.n	8004f3c <HAL_TIM_PWM_Init+0x54>
  htim->State = HAL_TIM_STATE_BUSY;
 8004efa:	233d      	movs	r3, #61	@ 0x3d
 8004efc:	2202      	movs	r2, #2
 8004efe:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f00:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f02:	4e33      	ldr	r6, [pc, #204]	@ (8004fd0 <HAL_TIM_PWM_Init+0xe8>)
  tmpcr1 = TIMx->CR1;
 8004f04:	681a      	ldr	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8004f06:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f08:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f0a:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f0c:	42b3      	cmp	r3, r6
 8004f0e:	d01a      	beq.n	8004f46 <HAL_TIM_PWM_Init+0x5e>
 8004f10:	4e30      	ldr	r6, [pc, #192]	@ (8004fd4 <HAL_TIM_PWM_Init+0xec>)
 8004f12:	42b3      	cmp	r3, r6
 8004f14:	d046      	beq.n	8004fa4 <HAL_TIM_PWM_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f16:	4e30      	ldr	r6, [pc, #192]	@ (8004fd8 <HAL_TIM_PWM_Init+0xf0>)
 8004f18:	42b3      	cmp	r3, r6
 8004f1a:	d047      	beq.n	8004fac <HAL_TIM_PWM_Init+0xc4>
 8004f1c:	4e2f      	ldr	r6, [pc, #188]	@ (8004fdc <HAL_TIM_PWM_Init+0xf4>)
 8004f1e:	42b3      	cmp	r3, r6
 8004f20:	d049      	beq.n	8004fb6 <HAL_TIM_PWM_Init+0xce>
 8004f22:	4e2f      	ldr	r6, [pc, #188]	@ (8004fe0 <HAL_TIM_PWM_Init+0xf8>)
 8004f24:	42b3      	cmp	r3, r6
 8004f26:	d012      	beq.n	8004f4e <HAL_TIM_PWM_Init+0x66>
 8004f28:	4e2e      	ldr	r6, [pc, #184]	@ (8004fe4 <HAL_TIM_PWM_Init+0xfc>)
 8004f2a:	42b3      	cmp	r3, r6
 8004f2c:	d00f      	beq.n	8004f4e <HAL_TIM_PWM_Init+0x66>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f2e:	2680      	movs	r6, #128	@ 0x80
 8004f30:	43b2      	bics	r2, r6
 8004f32:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004f34:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f36:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f38:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f3a:	e014      	b.n	8004f66 <HAL_TIM_PWM_Init+0x7e>
    htim->Lock = HAL_UNLOCKED;
 8004f3c:	333c      	adds	r3, #60	@ 0x3c
 8004f3e:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004f40:	f7ff ffd0 	bl	8004ee4 <HAL_TIM_PWM_MspInit>
 8004f44:	e7d9      	b.n	8004efa <HAL_TIM_PWM_Init+0x12>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f46:	2670      	movs	r6, #112	@ 0x70
 8004f48:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004f4a:	68a6      	ldr	r6, [r4, #8]
 8004f4c:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f4e:	4e26      	ldr	r6, [pc, #152]	@ (8004fe8 <HAL_TIM_PWM_Init+0x100>)
 8004f50:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f52:	6926      	ldr	r6, [r4, #16]
 8004f54:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f56:	2680      	movs	r6, #128	@ 0x80
 8004f58:	43b2      	bics	r2, r6
 8004f5a:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004f5c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f5e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f60:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004f62:	6962      	ldr	r2, [r4, #20]
 8004f64:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004f66:	2201      	movs	r2, #1
 8004f68:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f6a:	6919      	ldr	r1, [r3, #16]
 8004f6c:	420a      	tst	r2, r1
 8004f6e:	d002      	beq.n	8004f76 <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f70:	6919      	ldr	r1, [r3, #16]
 8004f72:	4391      	bics	r1, r2
 8004f74:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f76:	2301      	movs	r3, #1
 8004f78:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 8004f7a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f7c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7e:	3a08      	subs	r2, #8
 8004f80:	54a3      	strb	r3, [r4, r2]
 8004f82:	3201      	adds	r2, #1
 8004f84:	54a3      	strb	r3, [r4, r2]
 8004f86:	3201      	adds	r2, #1
 8004f88:	54a3      	strb	r3, [r4, r2]
 8004f8a:	3201      	adds	r2, #1
 8004f8c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8e:	3201      	adds	r2, #1
 8004f90:	54a3      	strb	r3, [r4, r2]
 8004f92:	3201      	adds	r2, #1
 8004f94:	54a3      	strb	r3, [r4, r2]
 8004f96:	3201      	adds	r2, #1
 8004f98:	54a3      	strb	r3, [r4, r2]
 8004f9a:	3201      	adds	r2, #1
 8004f9c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004f9e:	3a08      	subs	r2, #8
 8004fa0:	54a3      	strb	r3, [r4, r2]
}
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa4:	2670      	movs	r6, #112	@ 0x70
 8004fa6:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004fa8:	68a6      	ldr	r6, [r4, #8]
 8004faa:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fac:	4e0e      	ldr	r6, [pc, #56]	@ (8004fe8 <HAL_TIM_PWM_Init+0x100>)
 8004fae:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb0:	6926      	ldr	r6, [r4, #16]
 8004fb2:	4332      	orrs	r2, r6
 8004fb4:	e7bb      	b.n	8004f2e <HAL_TIM_PWM_Init+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb6:	4e0c      	ldr	r6, [pc, #48]	@ (8004fe8 <HAL_TIM_PWM_Init+0x100>)
 8004fb8:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fba:	6926      	ldr	r6, [r4, #16]
 8004fbc:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fbe:	2680      	movs	r6, #128	@ 0x80
 8004fc0:	43b2      	bics	r2, r6
 8004fc2:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 8004fc4:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fc8:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fca:	e7ca      	b.n	8004f62 <HAL_TIM_PWM_Init+0x7a>
    return HAL_ERROR;
 8004fcc:	2001      	movs	r0, #1
 8004fce:	e7e8      	b.n	8004fa2 <HAL_TIM_PWM_Init+0xba>
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40002000 	.word	0x40002000
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800
 8004fe8:	fffffcff 	.word	0xfffffcff

08004fec <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8004fec:	2900      	cmp	r1, #0
 8004fee:	d120      	bne.n	8005032 <HAL_TIM_PWM_Start+0x46>
 8004ff0:	233e      	movs	r3, #62	@ 0x3e
 8004ff2:	5cc2      	ldrb	r2, [r0, r3]
 8004ff4:	2a01      	cmp	r2, #1
 8004ff6:	d124      	bne.n	8005042 <HAL_TIM_PWM_Start+0x56>
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	54c2      	strb	r2, [r0, r3]
 8004ffc:	221f      	movs	r2, #31
 8004ffe:	4011      	ands	r1, r2
 8005000:	3a1e      	subs	r2, #30
 8005002:	408a      	lsls	r2, r1
 8005004:	6803      	ldr	r3, [r0, #0]
 8005006:	6a19      	ldr	r1, [r3, #32]
 8005008:	4391      	bics	r1, r2
 800500a:	6219      	str	r1, [r3, #32]
 800500c:	6a19      	ldr	r1, [r3, #32]
 800500e:	430a      	orrs	r2, r1
 8005010:	621a      	str	r2, [r3, #32]
 8005012:	4a1d      	ldr	r2, [pc, #116]	@ (8005088 <HAL_TIM_PWM_Start+0x9c>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d016      	beq.n	8005046 <HAL_TIM_PWM_Start+0x5a>
 8005018:	4a1c      	ldr	r2, [pc, #112]	@ (800508c <HAL_TIM_PWM_Start+0xa0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_TIM_PWM_Start+0x5a>
 800501e:	4a1c      	ldr	r2, [pc, #112]	@ (8005090 <HAL_TIM_PWM_Start+0xa4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d025      	beq.n	8005070 <HAL_TIM_PWM_Start+0x84>
 8005024:	4a1b      	ldr	r2, [pc, #108]	@ (8005094 <HAL_TIM_PWM_Start+0xa8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d022      	beq.n	8005070 <HAL_TIM_PWM_Start+0x84>
 800502a:	4a1b      	ldr	r2, [pc, #108]	@ (8005098 <HAL_TIM_PWM_Start+0xac>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d114      	bne.n	800505a <HAL_TIM_PWM_Start+0x6e>
 8005030:	e00e      	b.n	8005050 <HAL_TIM_PWM_Start+0x64>
 8005032:	2904      	cmp	r1, #4
 8005034:	d017      	beq.n	8005066 <HAL_TIM_PWM_Start+0x7a>
 8005036:	2908      	cmp	r1, #8
 8005038:	d020      	beq.n	800507c <HAL_TIM_PWM_Start+0x90>
 800503a:	2341      	movs	r3, #65	@ 0x41
 800503c:	5cc2      	ldrb	r2, [r0, r3]
 800503e:	2a01      	cmp	r2, #1
 8005040:	d0da      	beq.n	8004ff8 <HAL_TIM_PWM_Start+0xc>
 8005042:	2001      	movs	r0, #1
 8005044:	e00e      	b.n	8005064 <HAL_TIM_PWM_Start+0x78>
 8005046:	2280      	movs	r2, #128	@ 0x80
 8005048:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800504a:	0212      	lsls	r2, r2, #8
 800504c:	430a      	orrs	r2, r1
 800504e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005050:	2207      	movs	r2, #7
 8005052:	6899      	ldr	r1, [r3, #8]
 8005054:	400a      	ands	r2, r1
 8005056:	2a06      	cmp	r2, #6
 8005058:	d003      	beq.n	8005062 <HAL_TIM_PWM_Start+0x76>
 800505a:	2101      	movs	r1, #1
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	2000      	movs	r0, #0
 8005064:	4770      	bx	lr
 8005066:	233f      	movs	r3, #63	@ 0x3f
 8005068:	5cc2      	ldrb	r2, [r0, r3]
 800506a:	2a01      	cmp	r2, #1
 800506c:	d0c4      	beq.n	8004ff8 <HAL_TIM_PWM_Start+0xc>
 800506e:	e7e8      	b.n	8005042 <HAL_TIM_PWM_Start+0x56>
 8005070:	2280      	movs	r2, #128	@ 0x80
 8005072:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005074:	0212      	lsls	r2, r2, #8
 8005076:	430a      	orrs	r2, r1
 8005078:	645a      	str	r2, [r3, #68]	@ 0x44
 800507a:	e7ee      	b.n	800505a <HAL_TIM_PWM_Start+0x6e>
 800507c:	2340      	movs	r3, #64	@ 0x40
 800507e:	5cc2      	ldrb	r2, [r0, r3]
 8005080:	2a01      	cmp	r2, #1
 8005082:	d0b9      	beq.n	8004ff8 <HAL_TIM_PWM_Start+0xc>
 8005084:	e7dd      	b.n	8005042 <HAL_TIM_PWM_Start+0x56>
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40014000 	.word	0x40014000
 8005090:	40014400 	.word	0x40014400
 8005094:	40014800 	.word	0x40014800
 8005098:	40000400 	.word	0x40000400

0800509c <HAL_TIM_PWM_ConfigChannel>:
{
 800509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800509e:	233c      	movs	r3, #60	@ 0x3c
{
 80050a0:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80050a2:	5cc1      	ldrb	r1, [r0, r3]
{
 80050a4:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80050a6:	2901      	cmp	r1, #1
 80050a8:	d100      	bne.n	80050ac <HAL_TIM_PWM_ConfigChannel+0x10>
 80050aa:	e0de      	b.n	800526a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80050ac:	2101      	movs	r1, #1
 80050ae:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80050b0:	2a08      	cmp	r2, #8
 80050b2:	d100      	bne.n	80050b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80050b4:	e09a      	b.n	80051ec <HAL_TIM_PWM_ConfigChannel+0x150>
 80050b6:	d823      	bhi.n	8005100 <HAL_TIM_PWM_ConfigChannel+0x64>
 80050b8:	2a00      	cmp	r2, #0
 80050ba:	d100      	bne.n	80050be <HAL_TIM_PWM_ConfigChannel+0x22>
 80050bc:	e083      	b.n	80051c6 <HAL_TIM_PWM_ConfigChannel+0x12a>
 80050be:	2a04      	cmp	r2, #4
 80050c0:	d158      	bne.n	8005174 <HAL_TIM_PWM_ConfigChannel+0xd8>

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c2:	2110      	movs	r1, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050c4:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050c6:	4e6a      	ldr	r6, [pc, #424]	@ (8005270 <HAL_TIM_PWM_ConfigChannel+0x1d4>)
  tmpccer = TIMx->CCER;
 80050c8:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	438a      	bics	r2, r1
 80050ce:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050d0:	6859      	ldr	r1, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80050d2:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050d4:	4032      	ands	r2, r6

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d6:	682e      	ldr	r6, [r5, #0]
 80050d8:	0236      	lsls	r6, r6, #8
 80050da:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050dc:	2220      	movs	r2, #32
 80050de:	4390      	bics	r0, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050e0:	68aa      	ldr	r2, [r5, #8]
 80050e2:	0112      	lsls	r2, r2, #4
 80050e4:	4302      	orrs	r2, r0

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050e6:	4863      	ldr	r0, [pc, #396]	@ (8005274 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 80050e8:	4283      	cmp	r3, r0
 80050ea:	d048      	beq.n	800517e <HAL_TIM_PWM_ConfigChannel+0xe2>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	4862      	ldr	r0, [pc, #392]	@ (8005278 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 80050ee:	4283      	cmp	r3, r0
 80050f0:	d04d      	beq.n	800518e <HAL_TIM_PWM_ConfigChannel+0xf2>
 80050f2:	4862      	ldr	r0, [pc, #392]	@ (800527c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 80050f4:	4283      	cmp	r3, r0
 80050f6:	d04a      	beq.n	800518e <HAL_TIM_PWM_ConfigChannel+0xf2>
 80050f8:	4861      	ldr	r0, [pc, #388]	@ (8005280 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80050fa:	4283      	cmp	r3, r0
 80050fc:	d14e      	bne.n	800519c <HAL_TIM_PWM_ConfigChannel+0x100>
 80050fe:	e046      	b.n	800518e <HAL_TIM_PWM_ConfigChannel+0xf2>
  switch (Channel)
 8005100:	2a0c      	cmp	r2, #12
 8005102:	d137      	bne.n	8005174 <HAL_TIM_PWM_ConfigChannel+0xd8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005104:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005106:	485f      	ldr	r0, [pc, #380]	@ (8005284 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
  tmpccer = TIMx->CCER;
 8005108:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800510a:	6a1a      	ldr	r2, [r3, #32]
 800510c:	4002      	ands	r2, r0
 800510e:	621a      	str	r2, [r3, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005110:	4857      	ldr	r0, [pc, #348]	@ (8005270 <HAL_TIM_PWM_ConfigChannel+0x1d4>)
  tmpcr2 =  TIMx->CR2;
 8005112:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005114:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005116:	4002      	ands	r2, r0

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005118:	6828      	ldr	r0, [r5, #0]
 800511a:	0200      	lsls	r0, r0, #8
 800511c:	4310      	orrs	r0, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800511e:	4a5a      	ldr	r2, [pc, #360]	@ (8005288 <HAL_TIM_PWM_ConfigChannel+0x1ec>)
 8005120:	4011      	ands	r1, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005122:	68aa      	ldr	r2, [r5, #8]
 8005124:	0312      	lsls	r2, r2, #12
 8005126:	430a      	orrs	r2, r1

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005128:	4952      	ldr	r1, [pc, #328]	@ (8005274 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 800512a:	428b      	cmp	r3, r1
 800512c:	d008      	beq.n	8005140 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800512e:	4952      	ldr	r1, [pc, #328]	@ (8005278 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 8005130:	428b      	cmp	r3, r1
 8005132:	d005      	beq.n	8005140 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8005134:	4951      	ldr	r1, [pc, #324]	@ (800527c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8005136:	428b      	cmp	r3, r1
 8005138:	d002      	beq.n	8005140 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800513a:	4951      	ldr	r1, [pc, #324]	@ (8005280 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800513c:	428b      	cmp	r3, r1
 800513e:	d104      	bne.n	800514a <HAL_TIM_PWM_ConfigChannel+0xae>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005140:	4952      	ldr	r1, [pc, #328]	@ (800528c <HAL_TIM_PWM_ConfigChannel+0x1f0>)
 8005142:	4031      	ands	r1, r6

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005144:	696e      	ldr	r6, [r5, #20]
 8005146:	01b6      	lsls	r6, r6, #6
 8005148:	430e      	orrs	r6, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800514a:	6869      	ldr	r1, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800514c:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800514e:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005150:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005152:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005154:	2280      	movs	r2, #128	@ 0x80
 8005156:	69d9      	ldr	r1, [r3, #28]
 8005158:	0112      	lsls	r2, r2, #4
 800515a:	430a      	orrs	r2, r1
 800515c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800515e:	69da      	ldr	r2, [r3, #28]
 8005160:	494b      	ldr	r1, [pc, #300]	@ (8005290 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2000      	movs	r0, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005164:	400a      	ands	r2, r1
 8005166:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005168:	692a      	ldr	r2, [r5, #16]
 800516a:	69d9      	ldr	r1, [r3, #28]
 800516c:	0212      	lsls	r2, r2, #8
 800516e:	430a      	orrs	r2, r1
 8005170:	61da      	str	r2, [r3, #28]
      break;
 8005172:	e000      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0xda>
  switch (Channel)
 8005174:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005176:	233c      	movs	r3, #60	@ 0x3c
 8005178:	2200      	movs	r2, #0
 800517a:	54e2      	strb	r2, [r4, r3]
}
 800517c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 800517e:	2080      	movs	r0, #128	@ 0x80
 8005180:	4382      	bics	r2, r0
 8005182:	0017      	movs	r7, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005184:	68ea      	ldr	r2, [r5, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8005186:	3840      	subs	r0, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005188:	0112      	lsls	r2, r2, #4
 800518a:	433a      	orrs	r2, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800518c:	4382      	bics	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800518e:	4841      	ldr	r0, [pc, #260]	@ (8005294 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005190:	696f      	ldr	r7, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005192:	4008      	ands	r0, r1
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005194:	69a9      	ldr	r1, [r5, #24]
 8005196:	4339      	orrs	r1, r7
 8005198:	0089      	lsls	r1, r1, #2
 800519a:	4301      	orrs	r1, r0
  TIMx->CR2 = tmpcr2;
 800519c:	6059      	str	r1, [r3, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800519e:	6869      	ldr	r1, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 80051a0:	619e      	str	r6, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80051a2:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80051a4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051a6:	2280      	movs	r2, #128	@ 0x80
 80051a8:	6999      	ldr	r1, [r3, #24]
 80051aa:	0112      	lsls	r2, r2, #4
 80051ac:	430a      	orrs	r2, r1
 80051ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	4937      	ldr	r1, [pc, #220]	@ (8005290 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
  HAL_StatusTypeDef status = HAL_OK;
 80051b4:	2000      	movs	r0, #0
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051b6:	400a      	ands	r2, r1
 80051b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051ba:	692a      	ldr	r2, [r5, #16]
 80051bc:	6999      	ldr	r1, [r3, #24]
 80051be:	0212      	lsls	r2, r2, #8
 80051c0:	430a      	orrs	r2, r1
 80051c2:	619a      	str	r2, [r3, #24]
      break;
 80051c4:	e7d7      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051c6:	6806      	ldr	r6, [r0, #0]
 80051c8:	0029      	movs	r1, r5
 80051ca:	0030      	movs	r0, r6
 80051cc:	f7ff fda6 	bl	8004d1c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051d0:	2208      	movs	r2, #8
 80051d2:	69b3      	ldr	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80051d4:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051da:	69b3      	ldr	r3, [r6, #24]
 80051dc:	3a04      	subs	r2, #4
 80051de:	4393      	bics	r3, r2
 80051e0:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051e2:	69b3      	ldr	r3, [r6, #24]
 80051e4:	692a      	ldr	r2, [r5, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61b3      	str	r3, [r6, #24]
      break;
 80051ea:	e7c4      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0xda>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051ec:	2673      	movs	r6, #115	@ 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ee:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051f0:	4929      	ldr	r1, [pc, #164]	@ (8005298 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
  tmpccer = TIMx->CCER;
 80051f2:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	400a      	ands	r2, r1
 80051f8:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80051fa:	6859      	ldr	r1, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80051fc:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051fe:	43b2      	bics	r2, r6
  tmpccmrx |= OC_Config->OCMode;
 8005200:	682e      	ldr	r6, [r5, #0]
 8005202:	4316      	orrs	r6, r2
  tmpccer &= ~TIM_CCER_CC3P;
 8005204:	4a25      	ldr	r2, [pc, #148]	@ (800529c <HAL_TIM_PWM_ConfigChannel+0x200>)
 8005206:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005208:	68aa      	ldr	r2, [r5, #8]
 800520a:	0212      	lsls	r2, r2, #8
 800520c:	4302      	orrs	r2, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800520e:	4819      	ldr	r0, [pc, #100]	@ (8005274 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 8005210:	4283      	cmp	r3, r0
 8005212:	d01b      	beq.n	800524c <HAL_TIM_PWM_ConfigChannel+0x1b0>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005214:	4818      	ldr	r0, [pc, #96]	@ (8005278 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 8005216:	4283      	cmp	r3, r0
 8005218:	d01f      	beq.n	800525a <HAL_TIM_PWM_ConfigChannel+0x1be>
 800521a:	4818      	ldr	r0, [pc, #96]	@ (800527c <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 800521c:	4283      	cmp	r3, r0
 800521e:	d01c      	beq.n	800525a <HAL_TIM_PWM_ConfigChannel+0x1be>
 8005220:	4817      	ldr	r0, [pc, #92]	@ (8005280 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8005222:	4283      	cmp	r3, r0
 8005224:	d019      	beq.n	800525a <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 8005226:	6059      	str	r1, [r3, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8005228:	6869      	ldr	r1, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 800522a:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800522c:	63d9      	str	r1, [r3, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800522e:	2108      	movs	r1, #8
  TIMx->CCER = tmpccer;
 8005230:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005232:	69da      	ldr	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8005234:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005236:	430a      	orrs	r2, r1
 8005238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	3904      	subs	r1, #4
 800523e:	438a      	bics	r2, r1
 8005240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	6929      	ldr	r1, [r5, #16]
 8005246:	430a      	orrs	r2, r1
 8005248:	61da      	str	r2, [r3, #28]
      break;
 800524a:	e794      	b.n	8005176 <HAL_TIM_PWM_ConfigChannel+0xda>
    tmpccer &= ~TIM_CCER_CC3NP;
 800524c:	4814      	ldr	r0, [pc, #80]	@ (80052a0 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800524e:	4010      	ands	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005250:	68ea      	ldr	r2, [r5, #12]
 8005252:	0212      	lsls	r2, r2, #8
 8005254:	4302      	orrs	r2, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8005256:	480e      	ldr	r0, [pc, #56]	@ (8005290 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8005258:	4002      	ands	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525a:	4812      	ldr	r0, [pc, #72]	@ (80052a4 <HAL_TIM_PWM_ConfigChannel+0x208>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800525c:	696f      	ldr	r7, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525e:	4008      	ands	r0, r1
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005260:	69a9      	ldr	r1, [r5, #24]
 8005262:	4339      	orrs	r1, r7
 8005264:	0109      	lsls	r1, r1, #4
 8005266:	4301      	orrs	r1, r0
 8005268:	e7dd      	b.n	8005226 <HAL_TIM_PWM_ConfigChannel+0x18a>
  __HAL_LOCK(htim);
 800526a:	2002      	movs	r0, #2
 800526c:	e786      	b.n	800517c <HAL_TIM_PWM_ConfigChannel+0xe0>
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	ffff8cff 	.word	0xffff8cff
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40014000 	.word	0x40014000
 800527c:	40014400 	.word	0x40014400
 8005280:	40014800 	.word	0x40014800
 8005284:	ffffefff 	.word	0xffffefff
 8005288:	ffffdfff 	.word	0xffffdfff
 800528c:	ffffbfff 	.word	0xffffbfff
 8005290:	fffffbff 	.word	0xfffffbff
 8005294:	fffff3ff 	.word	0xfffff3ff
 8005298:	fffffeff 	.word	0xfffffeff
 800529c:	fffffdff 	.word	0xfffffdff
 80052a0:	fffff7ff 	.word	0xfffff7ff
 80052a4:	ffffcfff 	.word	0xffffcfff

080052a8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80052a8:	233c      	movs	r3, #60	@ 0x3c
{
 80052aa:	b570      	push	{r4, r5, r6, lr}
 80052ac:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 80052ae:	5cc0      	ldrb	r0, [r0, r3]
 80052b0:	2801      	cmp	r0, #1
 80052b2:	d100      	bne.n	80052b6 <HAL_TIM_ConfigClockSource+0xe>
 80052b4:	e073      	b.n	800539e <HAL_TIM_ConfigClockSource+0xf6>
 80052b6:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80052ba:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	3301      	adds	r3, #1
 80052be:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 80052c0:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c2:	4d51      	ldr	r5, [pc, #324]	@ (8005408 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 80052c4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052c6:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80052c8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80052ca:	680b      	ldr	r3, [r1, #0]
 80052cc:	2b60      	cmp	r3, #96	@ 0x60
 80052ce:	d100      	bne.n	80052d2 <HAL_TIM_ConfigClockSource+0x2a>
 80052d0:	e067      	b.n	80053a2 <HAL_TIM_ConfigClockSource+0xfa>
 80052d2:	d81d      	bhi.n	8005310 <HAL_TIM_ConfigClockSource+0x68>
 80052d4:	2b40      	cmp	r3, #64	@ 0x40
 80052d6:	d100      	bne.n	80052da <HAL_TIM_ConfigClockSource+0x32>
 80052d8:	e07d      	b.n	80053d6 <HAL_TIM_ConfigClockSource+0x12e>
 80052da:	d93f      	bls.n	800535c <HAL_TIM_ConfigClockSource+0xb4>
 80052dc:	2b50      	cmp	r3, #80	@ 0x50
 80052de:	d135      	bne.n	800534c <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 80052e0:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80052e2:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052e4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e6:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ea:	43a6      	bics	r6, r4
 80052ec:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ee:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80052f0:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f2:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f4:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052f6:	240a      	movs	r4, #10
 80052f8:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80052fa:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052fc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80052fe:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005300:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8005302:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005304:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005306:	3919      	subs	r1, #25
 8005308:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800530c:	2000      	movs	r0, #0
 800530e:	e01e      	b.n	800534e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8005310:	2480      	movs	r4, #128	@ 0x80
 8005312:	0164      	lsls	r4, r4, #5
 8005314:	42a3      	cmp	r3, r4
 8005316:	d0f9      	beq.n	800530c <HAL_TIM_ConfigClockSource+0x64>
 8005318:	2480      	movs	r4, #128	@ 0x80
 800531a:	01a4      	lsls	r4, r4, #6
 800531c:	42a3      	cmp	r3, r4
 800531e:	d12b      	bne.n	8005378 <HAL_TIM_ConfigClockSource+0xd0>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005320:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005322:	4b3a      	ldr	r3, [pc, #232]	@ (800540c <HAL_TIM_ConfigClockSource+0x164>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005324:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005326:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005328:	688b      	ldr	r3, [r1, #8]
 800532a:	68c9      	ldr	r1, [r1, #12]
 800532c:	432b      	orrs	r3, r5
 800532e:	0209      	lsls	r1, r1, #8
 8005330:	430b      	orrs	r3, r1
 8005332:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005334:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005336:	2380      	movs	r3, #128	@ 0x80
 8005338:	6881      	ldr	r1, [r0, #8]
 800533a:	01db      	lsls	r3, r3, #7
 800533c:	430b      	orrs	r3, r1
 800533e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005340:	2000      	movs	r0, #0
 8005342:	e004      	b.n	800534e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8005344:	2110      	movs	r1, #16
 8005346:	001c      	movs	r4, r3
 8005348:	438c      	bics	r4, r1
 800534a:	d00c      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 800534c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800534e:	233d      	movs	r3, #61	@ 0x3d
 8005350:	2101      	movs	r1, #1
 8005352:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8005354:	2100      	movs	r1, #0
 8005356:	3b01      	subs	r3, #1
 8005358:	54d1      	strb	r1, [r2, r3]
}
 800535a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800535c:	2b20      	cmp	r3, #32
 800535e:	d002      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0xbe>
 8005360:	d9f0      	bls.n	8005344 <HAL_TIM_ConfigClockSource+0x9c>
 8005362:	2b30      	cmp	r3, #48	@ 0x30
 8005364:	d1f2      	bne.n	800534c <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr &= ~TIM_SMCR_TS;
 8005366:	2470      	movs	r4, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8005368:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800536a:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800536c:	430b      	orrs	r3, r1
 800536e:	2107      	movs	r1, #7
 8005370:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005372:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005374:	2000      	movs	r0, #0
 8005376:	e7ea      	b.n	800534e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8005378:	2b70      	cmp	r3, #112	@ 0x70
 800537a:	d1e7      	bne.n	800534c <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 800537c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800537e:	4b23      	ldr	r3, [pc, #140]	@ (800540c <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005380:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005382:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005384:	688b      	ldr	r3, [r1, #8]
 8005386:	68c9      	ldr	r1, [r1, #12]
 8005388:	432b      	orrs	r3, r5
 800538a:	0209      	lsls	r1, r1, #8
 800538c:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800538e:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005390:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8005392:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005394:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005396:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8005398:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800539a:	2000      	movs	r0, #0
 800539c:	e7d7      	b.n	800534e <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 800539e:	2002      	movs	r0, #2
 80053a0:	e7db      	b.n	800535a <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a2:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 80053a4:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a6:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80053a8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053aa:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 80053ac:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ae:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b0:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b2:	4e17      	ldr	r6, [pc, #92]	@ (8005410 <HAL_TIM_ConfigClockSource+0x168>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b4:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b6:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b8:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053ba:	25a0      	movs	r5, #160	@ 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 80053bc:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053be:	2170      	movs	r1, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c0:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 80053c6:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80053c8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ca:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053cc:	3909      	subs	r1, #9
 80053ce:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80053d0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80053d2:	2000      	movs	r0, #0
 80053d4:	e7bb      	b.n	800534e <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 80053d6:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80053d8:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80053da:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053dc:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053de:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053e0:	43a6      	bics	r6, r4
 80053e2:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e4:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80053e6:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053e8:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ea:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053ec:	240a      	movs	r4, #10
 80053ee:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80053f0:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80053f2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80053f4:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053f6:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80053f8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053fa:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053fc:	3929      	subs	r1, #41	@ 0x29
 80053fe:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8005400:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005402:	2000      	movs	r0, #0
 8005404:	e7a3      	b.n	800534e <HAL_TIM_ConfigClockSource+0xa6>
 8005406:	46c0      	nop			@ (mov r8, r8)
 8005408:	ffff0088 	.word	0xffff0088
 800540c:	ffff00ff 	.word	0xffff00ff
 8005410:	ffff0fff 	.word	0xffff0fff

08005414 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8005414:	2900      	cmp	r1, #0
 8005416:	d124      	bne.n	8005462 <HAL_TIMEx_PWMN_Start+0x4e>
 8005418:	2342      	movs	r3, #66	@ 0x42
 800541a:	5cc2      	ldrb	r2, [r0, r3]
 800541c:	2a01      	cmp	r2, #1
 800541e:	d128      	bne.n	8005472 <HAL_TIMEx_PWMN_Start+0x5e>
 8005420:	2202      	movs	r2, #2
 8005422:	54c2      	strb	r2, [r0, r3]
 8005424:	220f      	movs	r2, #15
 8005426:	4011      	ands	r1, r2
 8005428:	3a0b      	subs	r2, #11
 800542a:	408a      	lsls	r2, r1
 800542c:	6803      	ldr	r3, [r0, #0]
 800542e:	6a19      	ldr	r1, [r3, #32]
 8005430:	4391      	bics	r1, r2
 8005432:	6219      	str	r1, [r3, #32]
 8005434:	6a19      	ldr	r1, [r3, #32]
 8005436:	430a      	orrs	r2, r1
 8005438:	621a      	str	r2, [r3, #32]
 800543a:	2280      	movs	r2, #128	@ 0x80
 800543c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800543e:	0212      	lsls	r2, r2, #8
 8005440:	430a      	orrs	r2, r1
 8005442:	645a      	str	r2, [r3, #68]	@ 0x44
 8005444:	4a14      	ldr	r2, [pc, #80]	@ (8005498 <HAL_TIMEx_PWMN_Start+0x84>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d015      	beq.n	8005476 <HAL_TIMEx_PWMN_Start+0x62>
 800544a:	4a14      	ldr	r2, [pc, #80]	@ (800549c <HAL_TIMEx_PWMN_Start+0x88>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d012      	beq.n	8005476 <HAL_TIMEx_PWMN_Start+0x62>
 8005450:	4a13      	ldr	r2, [pc, #76]	@ (80054a0 <HAL_TIMEx_PWMN_Start+0x8c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00f      	beq.n	8005476 <HAL_TIMEx_PWMN_Start+0x62>
 8005456:	2101      	movs	r1, #1
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	2000      	movs	r0, #0
 8005460:	4770      	bx	lr
 8005462:	2904      	cmp	r1, #4
 8005464:	d00d      	beq.n	8005482 <HAL_TIMEx_PWMN_Start+0x6e>
 8005466:	2908      	cmp	r1, #8
 8005468:	d010      	beq.n	800548c <HAL_TIMEx_PWMN_Start+0x78>
 800546a:	2345      	movs	r3, #69	@ 0x45
 800546c:	5cc2      	ldrb	r2, [r0, r3]
 800546e:	2a01      	cmp	r2, #1
 8005470:	d0d6      	beq.n	8005420 <HAL_TIMEx_PWMN_Start+0xc>
 8005472:	2001      	movs	r0, #1
 8005474:	e7f4      	b.n	8005460 <HAL_TIMEx_PWMN_Start+0x4c>
 8005476:	2207      	movs	r2, #7
 8005478:	6899      	ldr	r1, [r3, #8]
 800547a:	400a      	ands	r2, r1
 800547c:	2a06      	cmp	r2, #6
 800547e:	d1ea      	bne.n	8005456 <HAL_TIMEx_PWMN_Start+0x42>
 8005480:	e7ed      	b.n	800545e <HAL_TIMEx_PWMN_Start+0x4a>
 8005482:	2343      	movs	r3, #67	@ 0x43
 8005484:	5cc2      	ldrb	r2, [r0, r3]
 8005486:	2a01      	cmp	r2, #1
 8005488:	d0ca      	beq.n	8005420 <HAL_TIMEx_PWMN_Start+0xc>
 800548a:	e7f2      	b.n	8005472 <HAL_TIMEx_PWMN_Start+0x5e>
 800548c:	2344      	movs	r3, #68	@ 0x44
 800548e:	5cc2      	ldrb	r2, [r0, r3]
 8005490:	2a01      	cmp	r2, #1
 8005492:	d0c5      	beq.n	8005420 <HAL_TIMEx_PWMN_Start+0xc>
 8005494:	e7ed      	b.n	8005472 <HAL_TIMEx_PWMN_Start+0x5e>
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40000400 	.word	0x40000400
 80054a0:	40014000 	.word	0x40014000

080054a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a4:	233c      	movs	r3, #60	@ 0x3c
{
 80054a6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80054a8:	5cc3      	ldrb	r3, [r0, r3]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d020      	beq.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ae:	233d      	movs	r3, #61	@ 0x3d
 80054b0:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054b2:	2570      	movs	r5, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80054b4:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 80054b6:	6803      	ldr	r3, [r0, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80054ba:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80054bc:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054be:	680d      	ldr	r5, [r1, #0]
 80054c0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c4:	4a0b      	ldr	r2, [pc, #44]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d005      	beq.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80054ca:	4a0b      	ldr	r2, [pc, #44]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d002      	beq.n	80054d6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80054d0:	4a0a      	ldr	r2, [pc, #40]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d104      	bne.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054d6:	2280      	movs	r2, #128	@ 0x80
 80054d8:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054da:	684a      	ldr	r2, [r1, #4]
 80054dc:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054de:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	233d      	movs	r3, #61	@ 0x3d
 80054e2:	2201      	movs	r2, #1
 80054e4:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80054e6:	2200      	movs	r2, #0
 80054e8:	3b01      	subs	r3, #1
 80054ea:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80054ec:	2000      	movs	r0, #0
}
 80054ee:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80054f0:	2002      	movs	r0, #2
 80054f2:	e7fc      	b.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40014000 	.word	0x40014000

08005500 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005500:	223c      	movs	r2, #60	@ 0x3c
{
 8005502:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8005504:	5c83      	ldrb	r3, [r0, r2]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d01e      	beq.n	8005548 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800550a:	68cb      	ldr	r3, [r1, #12]
 800550c:	4c0f      	ldr	r4, [pc, #60]	@ (800554c <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 800550e:	4023      	ands	r3, r4
 8005510:	688c      	ldr	r4, [r1, #8]
 8005512:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005514:	4c0e      	ldr	r4, [pc, #56]	@ (8005550 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8005516:	4023      	ands	r3, r4
 8005518:	684c      	ldr	r4, [r1, #4]
 800551a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800551c:	4c0d      	ldr	r4, [pc, #52]	@ (8005554 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 800551e:	4023      	ands	r3, r4
 8005520:	680c      	ldr	r4, [r1, #0]
 8005522:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005524:	4c0c      	ldr	r4, [pc, #48]	@ (8005558 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8005526:	4023      	ands	r3, r4
 8005528:	690c      	ldr	r4, [r1, #16]
 800552a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800552c:	4c0b      	ldr	r4, [pc, #44]	@ (800555c <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 800552e:	4023      	ands	r3, r4
 8005530:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005532:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005534:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005536:	4c0a      	ldr	r4, [pc, #40]	@ (8005560 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8005538:	4023      	ands	r3, r4
 800553a:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800553c:	6801      	ldr	r1, [r0, #0]
 800553e:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005540:	2300      	movs	r3, #0
 8005542:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8005544:	2000      	movs	r0, #0
}
 8005546:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8005548:	2002      	movs	r0, #2
 800554a:	e7fc      	b.n	8005546 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 800554c:	fffffcff 	.word	0xfffffcff
 8005550:	fffffbff 	.word	0xfffffbff
 8005554:	fffff7ff 	.word	0xfffff7ff
 8005558:	ffffefff 	.word	0xffffefff
 800555c:	ffffdfff 	.word	0xffffdfff
 8005560:	ffffbfff 	.word	0xffffbfff

08005564 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005564:	2344      	movs	r3, #68	@ 0x44
 8005566:	2200      	movs	r2, #0
 8005568:	52c2      	strh	r2, [r0, r3]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800556a:	4a02      	ldr	r2, [pc, #8]	@ (8005574 <USB_EnableGlobalInt+0x10>)
 800556c:	3b04      	subs	r3, #4
 800556e:	52c2      	strh	r2, [r0, r3]

  return HAL_OK;
}
 8005570:	2000      	movs	r0, #0
 8005572:	4770      	bx	lr
 8005574:	ffffbf80 	.word	0xffffbf80

08005578 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005578:	2240      	movs	r2, #64	@ 0x40
 800557a:	5a83      	ldrh	r3, [r0, r2]
 800557c:	4902      	ldr	r1, [pc, #8]	@ (8005588 <USB_DisableGlobalInt+0x10>)
 800557e:	400b      	ands	r3, r1
 8005580:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 8005582:	2000      	movs	r0, #0
 8005584:	4770      	bx	lr
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	0000407f 	.word	0x0000407f

0800558c <USB_DevInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800558c:	2240      	movs	r2, #64	@ 0x40
 800558e:	2301      	movs	r3, #1
 8005590:	5283      	strh	r3, [r0, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	5283      	strh	r3, [r0, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005596:	3204      	adds	r2, #4
 8005598:	5283      	strh	r3, [r0, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800559a:	320c      	adds	r2, #12
 800559c:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 800559e:	2000      	movs	r0, #0
{
 80055a0:	b082      	sub	sp, #8
}
 80055a2:	b002      	add	sp, #8
 80055a4:	4770      	bx	lr
 80055a6:	46c0      	nop			@ (mov r8, r8)

080055a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055aa:	46ce      	mov	lr, r9
 80055ac:	4647      	mov	r7, r8
 80055ae:	b580      	push	{r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80055b0:	780d      	ldrb	r5, [r1, #0]
{
 80055b2:	0004      	movs	r4, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80055b4:	00ab      	lsls	r3, r5, #2
 80055b6:	18c3      	adds	r3, r0, r3
 80055b8:	881a      	ldrh	r2, [r3, #0]
 80055ba:	489d      	ldr	r0, [pc, #628]	@ (8005830 <USB_ActivateEndpoint+0x288>)

  /* initialize Endpoint */
  switch (ep->type)
 80055bc:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80055be:	4002      	ands	r2, r0
  switch (ep->type)
 80055c0:	2e02      	cmp	r6, #2
 80055c2:	d100      	bne.n	80055c6 <USB_ActivateEndpoint+0x1e>
 80055c4:	e110      	b.n	80057e8 <USB_ActivateEndpoint+0x240>
 80055c6:	d856      	bhi.n	8005676 <USB_ActivateEndpoint+0xce>
 80055c8:	2e00      	cmp	r6, #0
 80055ca:	d100      	bne.n	80055ce <USB_ActivateEndpoint+0x26>
 80055cc:	e0ed      	b.n	80057aa <USB_ActivateEndpoint+0x202>
    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
      break;

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80055ce:	2080      	movs	r0, #128	@ 0x80
 80055d0:	00c0      	lsls	r0, r0, #3
 80055d2:	4302      	orrs	r2, r0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80055d4:	4897      	ldr	r0, [pc, #604]	@ (8005834 <USB_ActivateEndpoint+0x28c>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80055d6:	4f98      	ldr	r7, [pc, #608]	@ (8005838 <USB_ActivateEndpoint+0x290>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80055d8:	4302      	orrs	r2, r0
 80055da:	b292      	uxth	r2, r2
 80055dc:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80055de:	881a      	ldrh	r2, [r3, #0]
 80055e0:	403a      	ands	r2, r7
 80055e2:	432a      	orrs	r2, r5
 80055e4:	4310      	orrs	r0, r2
 80055e6:	b280      	uxth	r0, r0
 80055e8:	8018      	strh	r0, [r3, #0]

  if (ep->doublebuffer == 0U)
 80055ea:	7b0a      	ldrb	r2, [r1, #12]
 80055ec:	2000      	movs	r0, #0
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	d047      	beq.n	8005682 <USB_ActivateEndpoint+0xda>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80055f2:	881a      	ldrh	r2, [r3, #0]
 80055f4:	4f91      	ldr	r7, [pc, #580]	@ (800583c <USB_ActivateEndpoint+0x294>)
 80055f6:	403a      	ands	r2, r7
 80055f8:	4f91      	ldr	r7, [pc, #580]	@ (8005840 <USB_ActivateEndpoint+0x298>)
 80055fa:	433a      	orrs	r2, r7
 80055fc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80055fe:	2780      	movs	r7, #128	@ 0x80
 8005600:	2250      	movs	r2, #80	@ 0x50
 8005602:	00ff      	lsls	r7, r7, #3
 8005604:	46b8      	mov	r8, r7
 8005606:	4694      	mov	ip, r2
 8005608:	890f      	ldrh	r7, [r1, #8]
 800560a:	5aa2      	ldrh	r2, [r4, r2]
 800560c:	00ed      	lsls	r5, r5, #3
 800560e:	1965      	adds	r5, r4, r5
 8005610:	1952      	adds	r2, r2, r5
 8005612:	087f      	lsrs	r7, r7, #1
 8005614:	4442      	add	r2, r8
 8005616:	007f      	lsls	r7, r7, #1
 8005618:	8017      	strh	r7, [r2, #0]
 800561a:	4662      	mov	r2, ip
 800561c:	5aa2      	ldrh	r2, [r4, r2]
 800561e:	4c89      	ldr	r4, [pc, #548]	@ (8005844 <USB_ActivateEndpoint+0x29c>)
 8005620:	1952      	adds	r2, r2, r5
 8005622:	46a4      	mov	ip, r4
 8005624:	894c      	ldrh	r4, [r1, #10]
 8005626:	4462      	add	r2, ip
 8005628:	0864      	lsrs	r4, r4, #1
 800562a:	0064      	lsls	r4, r4, #1
 800562c:	8014      	strh	r4, [r2, #0]

    if (ep->is_in == 0U)
 800562e:	784a      	ldrb	r2, [r1, #1]
 8005630:	2a00      	cmp	r2, #0
 8005632:	d15f      	bne.n	80056f4 <USB_ActivateEndpoint+0x14c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005634:	881a      	ldrh	r2, [r3, #0]
 8005636:	0452      	lsls	r2, r2, #17
 8005638:	d505      	bpl.n	8005646 <USB_ActivateEndpoint+0x9e>
 800563a:	881a      	ldrh	r2, [r3, #0]
 800563c:	497e      	ldr	r1, [pc, #504]	@ (8005838 <USB_ActivateEndpoint+0x290>)
 800563e:	400a      	ands	r2, r1
 8005640:	4981      	ldr	r1, [pc, #516]	@ (8005848 <USB_ActivateEndpoint+0x2a0>)
 8005642:	430a      	orrs	r2, r1
 8005644:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005646:	881a      	ldrh	r2, [r3, #0]
 8005648:	0652      	lsls	r2, r2, #25
 800564a:	d500      	bpl.n	800564e <USB_ActivateEndpoint+0xa6>
 800564c:	e0b1      	b.n	80057b2 <USB_ActivateEndpoint+0x20a>

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800564e:	8819      	ldrh	r1, [r3, #0]
 8005650:	4a7e      	ldr	r2, [pc, #504]	@ (800584c <USB_ActivateEndpoint+0x2a4>)
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005652:	4c7f      	ldr	r4, [pc, #508]	@ (8005850 <USB_ActivateEndpoint+0x2a8>)
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005654:	4011      	ands	r1, r2
 8005656:	22c0      	movs	r2, #192	@ 0xc0
 8005658:	0192      	lsls	r2, r2, #6
 800565a:	404a      	eors	r2, r1
 800565c:	4975      	ldr	r1, [pc, #468]	@ (8005834 <USB_ActivateEndpoint+0x28c>)
 800565e:	430a      	orrs	r2, r1
 8005660:	b292      	uxth	r2, r2
 8005662:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005664:	881a      	ldrh	r2, [r3, #0]
 8005666:	4022      	ands	r2, r4
 8005668:	4311      	orrs	r1, r2
 800566a:	b289      	uxth	r1, r1
 800566c:	8019      	strh	r1, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 800566e:	bcc0      	pop	{r6, r7}
 8005670:	46b9      	mov	r9, r7
 8005672:	46b0      	mov	r8, r6
 8005674:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (ep->type)
 8005676:	2e03      	cmp	r6, #3
 8005678:	d12c      	bne.n	80056d4 <USB_ActivateEndpoint+0x12c>
      wEpRegVal |= USB_EP_INTERRUPT;
 800567a:	20c0      	movs	r0, #192	@ 0xc0
 800567c:	00c0      	lsls	r0, r0, #3
 800567e:	4302      	orrs	r2, r0
      break;
 8005680:	e7a8      	b.n	80055d4 <USB_ActivateEndpoint+0x2c>
  if (ep->doublebuffer == 0U)
 8005682:	2000      	movs	r0, #0
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005684:	88ca      	ldrh	r2, [r1, #6]
 8005686:	00ef      	lsls	r7, r5, #3
 8005688:	0852      	lsrs	r2, r2, #1
 800568a:	0052      	lsls	r2, r2, #1
 800568c:	4691      	mov	r9, r2
    if (ep->is_in != 0U)
 800568e:	784a      	ldrb	r2, [r1, #1]
 8005690:	19e7      	adds	r7, r4, r7
 8005692:	2a00      	cmp	r2, #0
 8005694:	d052      	beq.n	800573c <USB_ActivateEndpoint+0x194>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005696:	2280      	movs	r2, #128	@ 0x80
 8005698:	2150      	movs	r1, #80	@ 0x50
 800569a:	00d2      	lsls	r2, r2, #3
 800569c:	4694      	mov	ip, r2
 800569e:	464a      	mov	r2, r9
 80056a0:	5a61      	ldrh	r1, [r4, r1]
 80056a2:	19c9      	adds	r1, r1, r7
 80056a4:	4461      	add	r1, ip
 80056a6:	800a      	strh	r2, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056a8:	881a      	ldrh	r2, [r3, #0]
 80056aa:	0652      	lsls	r2, r2, #25
 80056ac:	d505      	bpl.n	80056ba <USB_ActivateEndpoint+0x112>
 80056ae:	881a      	ldrh	r2, [r3, #0]
 80056b0:	4961      	ldr	r1, [pc, #388]	@ (8005838 <USB_ActivateEndpoint+0x290>)
 80056b2:	400a      	ands	r2, r1
 80056b4:	4967      	ldr	r1, [pc, #412]	@ (8005854 <USB_ActivateEndpoint+0x2ac>)
 80056b6:	430a      	orrs	r2, r1
 80056b8:	801a      	strh	r2, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 80056ba:	2e01      	cmp	r6, #1
 80056bc:	d100      	bne.n	80056c0 <USB_ActivateEndpoint+0x118>
 80056be:	e08c      	b.n	80057da <USB_ActivateEndpoint+0x232>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056c0:	8819      	ldrh	r1, [r3, #0]
 80056c2:	4a63      	ldr	r2, [pc, #396]	@ (8005850 <USB_ActivateEndpoint+0x2a8>)
 80056c4:	4011      	ands	r1, r2
 80056c6:	2220      	movs	r2, #32
 80056c8:	4051      	eors	r1, r2
 80056ca:	4a5a      	ldr	r2, [pc, #360]	@ (8005834 <USB_ActivateEndpoint+0x28c>)
 80056cc:	430a      	orrs	r2, r1
 80056ce:	b292      	uxth	r2, r2
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e7cc      	b.n	800566e <USB_ActivateEndpoint+0xc6>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80056d4:	4857      	ldr	r0, [pc, #348]	@ (8005834 <USB_ActivateEndpoint+0x28c>)
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056d6:	4f58      	ldr	r7, [pc, #352]	@ (8005838 <USB_ActivateEndpoint+0x290>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80056d8:	4302      	orrs	r2, r0
 80056da:	b292      	uxth	r2, r2
 80056dc:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	403a      	ands	r2, r7
 80056e2:	432a      	orrs	r2, r5
 80056e4:	4310      	orrs	r0, r2
 80056e6:	b280      	uxth	r0, r0
 80056e8:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
 80056ea:	7b0a      	ldrb	r2, [r1, #12]
 80056ec:	2001      	movs	r0, #1
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	d0c8      	beq.n	8005684 <USB_ActivateEndpoint+0xdc>
 80056f2:	e77e      	b.n	80055f2 <USB_ActivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056f4:	881a      	ldrh	r2, [r3, #0]
 80056f6:	0452      	lsls	r2, r2, #17
 80056f8:	d505      	bpl.n	8005706 <USB_ActivateEndpoint+0x15e>
 80056fa:	881a      	ldrh	r2, [r3, #0]
 80056fc:	494e      	ldr	r1, [pc, #312]	@ (8005838 <USB_ActivateEndpoint+0x290>)
 80056fe:	400a      	ands	r2, r1
 8005700:	4951      	ldr	r1, [pc, #324]	@ (8005848 <USB_ActivateEndpoint+0x2a0>)
 8005702:	430a      	orrs	r2, r1
 8005704:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005706:	881a      	ldrh	r2, [r3, #0]
 8005708:	0652      	lsls	r2, r2, #25
 800570a:	d505      	bpl.n	8005718 <USB_ActivateEndpoint+0x170>
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	494a      	ldr	r1, [pc, #296]	@ (8005838 <USB_ActivateEndpoint+0x290>)
 8005710:	400a      	ands	r2, r1
 8005712:	4950      	ldr	r1, [pc, #320]	@ (8005854 <USB_ActivateEndpoint+0x2ac>)
 8005714:	430a      	orrs	r2, r1
 8005716:	801a      	strh	r2, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8005718:	2e01      	cmp	r6, #1
 800571a:	d057      	beq.n	80057cc <USB_ActivateEndpoint+0x224>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800571c:	8819      	ldrh	r1, [r3, #0]
 800571e:	4a4c      	ldr	r2, [pc, #304]	@ (8005850 <USB_ActivateEndpoint+0x2a8>)
 8005720:	4011      	ands	r1, r2
 8005722:	2220      	movs	r2, #32
 8005724:	4051      	eors	r1, r2
 8005726:	4a43      	ldr	r2, [pc, #268]	@ (8005834 <USB_ActivateEndpoint+0x28c>)
 8005728:	430a      	orrs	r2, r1
 800572a:	b292      	uxth	r2, r2
 800572c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800572e:	881a      	ldrh	r2, [r3, #0]
 8005730:	4946      	ldr	r1, [pc, #280]	@ (800584c <USB_ActivateEndpoint+0x2a4>)
 8005732:	400a      	ands	r2, r1
 8005734:	4942      	ldr	r1, [pc, #264]	@ (8005840 <USB_ActivateEndpoint+0x298>)
 8005736:	430a      	orrs	r2, r1
 8005738:	801a      	strh	r2, [r3, #0]
  return ret;
 800573a:	e798      	b.n	800566e <USB_ActivateEndpoint+0xc6>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800573c:	2250      	movs	r2, #80	@ 0x50
 800573e:	5aa6      	ldrh	r6, [r4, r2]
 8005740:	4694      	mov	ip, r2
 8005742:	4a40      	ldr	r2, [pc, #256]	@ (8005844 <USB_ActivateEndpoint+0x29c>)
 8005744:	19f6      	adds	r6, r6, r7
 8005746:	4690      	mov	r8, r2
 8005748:	464a      	mov	r2, r9
 800574a:	4446      	add	r6, r8
 800574c:	8032      	strh	r2, [r6, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800574e:	4662      	mov	r2, ip
 8005750:	5aa2      	ldrh	r2, [r4, r2]
 8005752:	4c41      	ldr	r4, [pc, #260]	@ (8005858 <USB_ActivateEndpoint+0x2b0>)
 8005754:	19d2      	adds	r2, r2, r7
 8005756:	46a4      	mov	ip, r4
 8005758:	4462      	add	r2, ip
 800575a:	8814      	ldrh	r4, [r2, #0]
 800575c:	6909      	ldr	r1, [r1, #16]
 800575e:	05a4      	lsls	r4, r4, #22
 8005760:	0da4      	lsrs	r4, r4, #22
 8005762:	8014      	strh	r4, [r2, #0]
 8005764:	2900      	cmp	r1, #0
 8005766:	d02b      	beq.n	80057c0 <USB_ActivateEndpoint+0x218>
 8005768:	293e      	cmp	r1, #62	@ 0x3e
 800576a:	d853      	bhi.n	8005814 <USB_ActivateEndpoint+0x26c>
 800576c:	2601      	movs	r6, #1
 800576e:	084c      	lsrs	r4, r1, #1
 8005770:	4031      	ands	r1, r6
 8005772:	1864      	adds	r4, r4, r1
 8005774:	8811      	ldrh	r1, [r2, #0]
 8005776:	02a4      	lsls	r4, r4, #10
 8005778:	4321      	orrs	r1, r4
 800577a:	b289      	uxth	r1, r1
 800577c:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800577e:	881a      	ldrh	r2, [r3, #0]
 8005780:	0452      	lsls	r2, r2, #17
 8005782:	d505      	bpl.n	8005790 <USB_ActivateEndpoint+0x1e8>
 8005784:	881a      	ldrh	r2, [r3, #0]
 8005786:	492c      	ldr	r1, [pc, #176]	@ (8005838 <USB_ActivateEndpoint+0x290>)
 8005788:	400a      	ands	r2, r1
 800578a:	492f      	ldr	r1, [pc, #188]	@ (8005848 <USB_ActivateEndpoint+0x2a0>)
 800578c:	430a      	orrs	r2, r1
 800578e:	801a      	strh	r2, [r3, #0]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005790:	4a2e      	ldr	r2, [pc, #184]	@ (800584c <USB_ActivateEndpoint+0x2a4>)
 8005792:	8819      	ldrh	r1, [r3, #0]
 8005794:	4011      	ands	r1, r2
 8005796:	22c0      	movs	r2, #192	@ 0xc0
      if (ep->num == 0U)
 8005798:	2d00      	cmp	r5, #0
 800579a:	d000      	beq.n	800579e <USB_ActivateEndpoint+0x1f6>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800579c:	2280      	movs	r2, #128	@ 0x80
 800579e:	0192      	lsls	r2, r2, #6
 80057a0:	404a      	eors	r2, r1
 80057a2:	4927      	ldr	r1, [pc, #156]	@ (8005840 <USB_ActivateEndpoint+0x298>)
 80057a4:	430a      	orrs	r2, r1
 80057a6:	801a      	strh	r2, [r3, #0]
 80057a8:	e761      	b.n	800566e <USB_ActivateEndpoint+0xc6>
      wEpRegVal |= USB_EP_CONTROL;
 80057aa:	2080      	movs	r0, #128	@ 0x80
 80057ac:	0080      	lsls	r0, r0, #2
 80057ae:	4302      	orrs	r2, r0
      break;
 80057b0:	e710      	b.n	80055d4 <USB_ActivateEndpoint+0x2c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057b2:	881a      	ldrh	r2, [r3, #0]
 80057b4:	4920      	ldr	r1, [pc, #128]	@ (8005838 <USB_ActivateEndpoint+0x290>)
 80057b6:	400a      	ands	r2, r1
 80057b8:	4926      	ldr	r1, [pc, #152]	@ (8005854 <USB_ActivateEndpoint+0x2ac>)
 80057ba:	430a      	orrs	r2, r1
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e746      	b.n	800564e <USB_ActivateEndpoint+0xa6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80057c0:	2480      	movs	r4, #128	@ 0x80
 80057c2:	8811      	ldrh	r1, [r2, #0]
 80057c4:	0224      	lsls	r4, r4, #8
 80057c6:	4321      	orrs	r1, r4
 80057c8:	8011      	strh	r1, [r2, #0]
 80057ca:	e7d8      	b.n	800577e <USB_ActivateEndpoint+0x1d6>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057cc:	881a      	ldrh	r2, [r3, #0]
 80057ce:	4920      	ldr	r1, [pc, #128]	@ (8005850 <USB_ActivateEndpoint+0x2a8>)
 80057d0:	400a      	ands	r2, r1
 80057d2:	491b      	ldr	r1, [pc, #108]	@ (8005840 <USB_ActivateEndpoint+0x298>)
 80057d4:	430a      	orrs	r2, r1
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	e7a9      	b.n	800572e <USB_ActivateEndpoint+0x186>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057da:	881a      	ldrh	r2, [r3, #0]
 80057dc:	491c      	ldr	r1, [pc, #112]	@ (8005850 <USB_ActivateEndpoint+0x2a8>)
 80057de:	400a      	ands	r2, r1
 80057e0:	4917      	ldr	r1, [pc, #92]	@ (8005840 <USB_ActivateEndpoint+0x298>)
 80057e2:	430a      	orrs	r2, r1
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e742      	b.n	800566e <USB_ActivateEndpoint+0xc6>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057e8:	4812      	ldr	r0, [pc, #72]	@ (8005834 <USB_ActivateEndpoint+0x28c>)
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057ea:	4f13      	ldr	r7, [pc, #76]	@ (8005838 <USB_ActivateEndpoint+0x290>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057ec:	4302      	orrs	r2, r0
 80057ee:	b292      	uxth	r2, r2
 80057f0:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057f2:	881a      	ldrh	r2, [r3, #0]
 80057f4:	403a      	ands	r2, r7
 80057f6:	432a      	orrs	r2, r5
 80057f8:	4310      	orrs	r0, r2
 80057fa:	b280      	uxth	r0, r0
 80057fc:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
 80057fe:	7b0a      	ldrb	r2, [r1, #12]
 8005800:	2a00      	cmp	r2, #0
 8005802:	d100      	bne.n	8005806 <USB_ActivateEndpoint+0x25e>
 8005804:	e73d      	b.n	8005682 <USB_ActivateEndpoint+0xda>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005806:	881a      	ldrh	r2, [r3, #0]
 8005808:	4814      	ldr	r0, [pc, #80]	@ (800585c <USB_ActivateEndpoint+0x2b4>)
 800580a:	403a      	ands	r2, r7
 800580c:	4302      	orrs	r2, r0
 800580e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005810:	2000      	movs	r0, #0
 8005812:	e6f4      	b.n	80055fe <USB_ActivateEndpoint+0x56>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005814:	261f      	movs	r6, #31
 8005816:	094c      	lsrs	r4, r1, #5
 8005818:	4031      	ands	r1, r6
 800581a:	424e      	negs	r6, r1
 800581c:	4171      	adcs	r1, r6
 800581e:	1a64      	subs	r4, r4, r1
 8005820:	8811      	ldrh	r1, [r2, #0]
 8005822:	02a4      	lsls	r4, r4, #10
 8005824:	430c      	orrs	r4, r1
 8005826:	490e      	ldr	r1, [pc, #56]	@ (8005860 <USB_ActivateEndpoint+0x2b8>)
 8005828:	4321      	orrs	r1, r4
 800582a:	b289      	uxth	r1, r1
 800582c:	8011      	strh	r1, [r2, #0]
 800582e:	e7a6      	b.n	800577e <USB_ActivateEndpoint+0x1d6>
 8005830:	ffff898f 	.word	0xffff898f
 8005834:	ffff8080 	.word	0xffff8080
 8005838:	ffff8f8f 	.word	0xffff8f8f
 800583c:	ffff8e8f 	.word	0xffff8e8f
 8005840:	00008080 	.word	0x00008080
 8005844:	00000404 	.word	0x00000404
 8005848:	0000c080 	.word	0x0000c080
 800584c:	ffffbf8f 	.word	0xffffbf8f
 8005850:	ffff8fbf 	.word	0xffff8fbf
 8005854:	000080c0 	.word	0x000080c0
 8005858:	00000406 	.word	0x00000406
 800585c:	00008180 	.word	0x00008180
 8005860:	ffff8000 	.word	0xffff8000

08005864 <USB_DeactivateEndpoint>:
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005864:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8005866:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	18c0      	adds	r0, r0, r3
  if (ep->doublebuffer == 0U)
 800586c:	7b0b      	ldrb	r3, [r1, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10d      	bne.n	800588e <USB_DeactivateEndpoint+0x2a>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005872:	8803      	ldrh	r3, [r0, #0]
    if (ep->is_in != 0U)
 8005874:	2a00      	cmp	r2, #0
 8005876:	d057      	beq.n	8005928 <USB_DeactivateEndpoint+0xc4>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005878:	065b      	lsls	r3, r3, #25
 800587a:	d500      	bpl.n	800587e <USB_DeactivateEndpoint+0x1a>
 800587c:	e063      	b.n	8005946 <USB_DeactivateEndpoint+0xe2>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800587e:	8803      	ldrh	r3, [r0, #0]
 8005880:	4a34      	ldr	r2, [pc, #208]	@ (8005954 <USB_DeactivateEndpoint+0xf0>)
 8005882:	4013      	ands	r3, r2
 8005884:	4a34      	ldr	r2, [pc, #208]	@ (8005958 <USB_DeactivateEndpoint+0xf4>)
 8005886:	4313      	orrs	r3, r2
 8005888:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800588a:	2000      	movs	r0, #0
 800588c:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800588e:	8803      	ldrh	r3, [r0, #0]
    if (ep->is_in == 0U)
 8005890:	2a00      	cmp	r2, #0
 8005892:	d124      	bne.n	80058de <USB_DeactivateEndpoint+0x7a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005894:	045b      	lsls	r3, r3, #17
 8005896:	d505      	bpl.n	80058a4 <USB_DeactivateEndpoint+0x40>
 8005898:	8803      	ldrh	r3, [r0, #0]
 800589a:	4a30      	ldr	r2, [pc, #192]	@ (800595c <USB_DeactivateEndpoint+0xf8>)
 800589c:	4013      	ands	r3, r2
 800589e:	4a30      	ldr	r2, [pc, #192]	@ (8005960 <USB_DeactivateEndpoint+0xfc>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	8003      	strh	r3, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058a4:	8803      	ldrh	r3, [r0, #0]
 80058a6:	065b      	lsls	r3, r3, #25
 80058a8:	d505      	bpl.n	80058b6 <USB_DeactivateEndpoint+0x52>
 80058aa:	8803      	ldrh	r3, [r0, #0]
 80058ac:	4a2b      	ldr	r2, [pc, #172]	@ (800595c <USB_DeactivateEndpoint+0xf8>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005964 <USB_DeactivateEndpoint+0x100>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	8003      	strh	r3, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 80058b6:	8803      	ldrh	r3, [r0, #0]
 80058b8:	4a28      	ldr	r2, [pc, #160]	@ (800595c <USB_DeactivateEndpoint+0xf8>)
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058ba:	4926      	ldr	r1, [pc, #152]	@ (8005954 <USB_DeactivateEndpoint+0xf0>)
      PCD_TX_DTOG(USBx, ep->num);
 80058bc:	4013      	ands	r3, r2
 80058be:	4a29      	ldr	r2, [pc, #164]	@ (8005964 <USB_DeactivateEndpoint+0x100>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80058c4:	8803      	ldrh	r3, [r0, #0]
 80058c6:	4a28      	ldr	r2, [pc, #160]	@ (8005968 <USB_DeactivateEndpoint+0x104>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	4a28      	ldr	r2, [pc, #160]	@ (800596c <USB_DeactivateEndpoint+0x108>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058d2:	8803      	ldrh	r3, [r0, #0]
 80058d4:	400b      	ands	r3, r1
 80058d6:	431a      	orrs	r2, r3
 80058d8:	b292      	uxth	r2, r2
 80058da:	8002      	strh	r2, [r0, #0]
 80058dc:	e7d5      	b.n	800588a <USB_DeactivateEndpoint+0x26>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058de:	045b      	lsls	r3, r3, #17
 80058e0:	d505      	bpl.n	80058ee <USB_DeactivateEndpoint+0x8a>
 80058e2:	8803      	ldrh	r3, [r0, #0]
 80058e4:	4a1d      	ldr	r2, [pc, #116]	@ (800595c <USB_DeactivateEndpoint+0xf8>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005960 <USB_DeactivateEndpoint+0xfc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	8003      	strh	r3, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058ee:	8803      	ldrh	r3, [r0, #0]
 80058f0:	065b      	lsls	r3, r3, #25
 80058f2:	d505      	bpl.n	8005900 <USB_DeactivateEndpoint+0x9c>
 80058f4:	8803      	ldrh	r3, [r0, #0]
 80058f6:	4a19      	ldr	r2, [pc, #100]	@ (800595c <USB_DeactivateEndpoint+0xf8>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005964 <USB_DeactivateEndpoint+0x100>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	8003      	strh	r3, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005900:	8803      	ldrh	r3, [r0, #0]
 8005902:	4a16      	ldr	r2, [pc, #88]	@ (800595c <USB_DeactivateEndpoint+0xf8>)
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005904:	4918      	ldr	r1, [pc, #96]	@ (8005968 <USB_DeactivateEndpoint+0x104>)
      PCD_RX_DTOG(USBx, ep->num);
 8005906:	4013      	ands	r3, r2
 8005908:	4a15      	ldr	r2, [pc, #84]	@ (8005960 <USB_DeactivateEndpoint+0xfc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800590e:	8803      	ldrh	r3, [r0, #0]
 8005910:	4a10      	ldr	r2, [pc, #64]	@ (8005954 <USB_DeactivateEndpoint+0xf0>)
 8005912:	4013      	ands	r3, r2
 8005914:	4a15      	ldr	r2, [pc, #84]	@ (800596c <USB_DeactivateEndpoint+0x108>)
 8005916:	4313      	orrs	r3, r2
 8005918:	b29b      	uxth	r3, r3
 800591a:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800591c:	8803      	ldrh	r3, [r0, #0]
 800591e:	400b      	ands	r3, r1
 8005920:	431a      	orrs	r2, r3
 8005922:	b292      	uxth	r2, r2
 8005924:	8002      	strh	r2, [r0, #0]
 8005926:	e7b0      	b.n	800588a <USB_DeactivateEndpoint+0x26>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005928:	045b      	lsls	r3, r3, #17
 800592a:	d505      	bpl.n	8005938 <USB_DeactivateEndpoint+0xd4>
 800592c:	8803      	ldrh	r3, [r0, #0]
 800592e:	4a0b      	ldr	r2, [pc, #44]	@ (800595c <USB_DeactivateEndpoint+0xf8>)
 8005930:	4013      	ands	r3, r2
 8005932:	4a0b      	ldr	r2, [pc, #44]	@ (8005960 <USB_DeactivateEndpoint+0xfc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005938:	8803      	ldrh	r3, [r0, #0]
 800593a:	4a0b      	ldr	r2, [pc, #44]	@ (8005968 <USB_DeactivateEndpoint+0x104>)
 800593c:	4013      	ands	r3, r2
 800593e:	4a06      	ldr	r2, [pc, #24]	@ (8005958 <USB_DeactivateEndpoint+0xf4>)
 8005940:	4313      	orrs	r3, r2
 8005942:	8003      	strh	r3, [r0, #0]
 8005944:	e7a1      	b.n	800588a <USB_DeactivateEndpoint+0x26>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005946:	8803      	ldrh	r3, [r0, #0]
 8005948:	4a04      	ldr	r2, [pc, #16]	@ (800595c <USB_DeactivateEndpoint+0xf8>)
 800594a:	4013      	ands	r3, r2
 800594c:	4a05      	ldr	r2, [pc, #20]	@ (8005964 <USB_DeactivateEndpoint+0x100>)
 800594e:	4313      	orrs	r3, r2
 8005950:	8003      	strh	r3, [r0, #0]
 8005952:	e794      	b.n	800587e <USB_DeactivateEndpoint+0x1a>
 8005954:	ffff8fbf 	.word	0xffff8fbf
 8005958:	00008080 	.word	0x00008080
 800595c:	ffff8f8f 	.word	0xffff8f8f
 8005960:	0000c080 	.word	0x0000c080
 8005964:	000080c0 	.word	0x000080c0
 8005968:	ffffbf8f 	.word	0xffffbf8f
 800596c:	ffff8080 	.word	0xffff8080

08005970 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005972:	4645      	mov	r5, r8
 8005974:	46de      	mov	lr, fp
 8005976:	4657      	mov	r7, sl
 8005978:	464e      	mov	r6, r9
 800597a:	b5e0      	push	{r5, r6, r7, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800597c:	784b      	ldrb	r3, [r1, #1]
{
 800597e:	0002      	movs	r2, r0
    {
      len = ep->xfer_len;
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005980:	7b0d      	ldrb	r5, [r1, #12]
{
 8005982:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 8005984:	2b01      	cmp	r3, #1
 8005986:	d100      	bne.n	800598a <USB_EPStartXfer+0x1a>
 8005988:	e072      	b.n	8005a70 <USB_EPStartXfer+0x100>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800598a:	2d00      	cmp	r5, #0
 800598c:	d04c      	beq.n	8005a28 <USB_EPStartXfer+0xb8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800598e:	78cc      	ldrb	r4, [r1, #3]
 8005990:	2c02      	cmp	r4, #2
 8005992:	d100      	bne.n	8005996 <USB_EPStartXfer+0x26>
 8005994:	e0e7      	b.n	8005b66 <USB_EPStartXfer+0x1f6>
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
      }
      else
      {
        return HAL_ERROR;
 8005996:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8005998:	2c01      	cmp	r4, #1
 800599a:	d13e      	bne.n	8005a1a <USB_EPStartXfer+0xaa>
        if (ep->xfer_len > ep->maxpacket)
 800599c:	698d      	ldr	r5, [r1, #24]
 800599e:	6908      	ldr	r0, [r1, #16]
          ep->xfer_len = 0U;
 80059a0:	2400      	movs	r4, #0
        if (ep->xfer_len > ep->maxpacket)
 80059a2:	4285      	cmp	r5, r0
 80059a4:	d901      	bls.n	80059aa <USB_EPStartXfer+0x3a>
          ep->xfer_len -= len;
 80059a6:	1a2c      	subs	r4, r5, r0
 80059a8:	0005      	movs	r5, r0
 80059aa:	618c      	str	r4, [r1, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d127      	bne.n	8005a00 <USB_EPStartXfer+0x90>
 80059b0:	2650      	movs	r6, #80	@ 0x50
 80059b2:	4b95      	ldr	r3, [pc, #596]	@ (8005c08 <USB_EPStartXfer+0x298>)
 80059b4:	5b90      	ldrh	r0, [r2, r6]
 80059b6:	780c      	ldrb	r4, [r1, #0]
 80059b8:	18d3      	adds	r3, r2, r3
 80059ba:	181b      	adds	r3, r3, r0
 80059bc:	00e4      	lsls	r4, r4, #3
 80059be:	191b      	adds	r3, r3, r4
 80059c0:	8818      	ldrh	r0, [r3, #0]
 80059c2:	0580      	lsls	r0, r0, #22
 80059c4:	0d80      	lsrs	r0, r0, #22
 80059c6:	8018      	strh	r0, [r3, #0]
 80059c8:	4890      	ldr	r0, [pc, #576]	@ (8005c0c <USB_EPStartXfer+0x29c>)
 80059ca:	4680      	mov	r8, r0
 80059cc:	4490      	add	r8, r2
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	d100      	bne.n	80059d4 <USB_EPStartXfer+0x64>
 80059d2:	e207      	b.n	8005de4 <USB_EPStartXfer+0x474>
 80059d4:	2d3e      	cmp	r5, #62	@ 0x3e
 80059d6:	d900      	bls.n	80059da <USB_EPStartXfer+0x6a>
 80059d8:	e295      	b.n	8005f06 <USB_EPStartXfer+0x596>
 80059da:	2001      	movs	r0, #1
 80059dc:	086f      	lsrs	r7, r5, #1
 80059de:	4005      	ands	r5, r0
 80059e0:	197f      	adds	r7, r7, r5
 80059e2:	02bf      	lsls	r7, r7, #10
 80059e4:	881d      	ldrh	r5, [r3, #0]
 80059e6:	b2bf      	uxth	r7, r7
 80059e8:	433d      	orrs	r5, r7
 80059ea:	801d      	strh	r5, [r3, #0]
 80059ec:	5b93      	ldrh	r3, [r2, r6]
 80059ee:	4443      	add	r3, r8
 80059f0:	191b      	adds	r3, r3, r4
 80059f2:	8818      	ldrh	r0, [r3, #0]
 80059f4:	0580      	lsls	r0, r0, #22
 80059f6:	0d80      	lsrs	r0, r0, #22
 80059f8:	8018      	strh	r0, [r3, #0]
 80059fa:	8818      	ldrh	r0, [r3, #0]
 80059fc:	4307      	orrs	r7, r0
 80059fe:	801f      	strh	r7, [r3, #0]
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005a00:	780b      	ldrb	r3, [r1, #0]
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	18d2      	adds	r2, r2, r3
 8005a06:	8811      	ldrh	r1, [r2, #0]
 8005a08:	4b81      	ldr	r3, [pc, #516]	@ (8005c10 <USB_EPStartXfer+0x2a0>)
  }

  return HAL_OK;
 8005a0a:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a0c:	4019      	ands	r1, r3
 8005a0e:	23c0      	movs	r3, #192	@ 0xc0
 8005a10:	019b      	lsls	r3, r3, #6
 8005a12:	404b      	eors	r3, r1
 8005a14:	497f      	ldr	r1, [pc, #508]	@ (8005c14 <USB_EPStartXfer+0x2a4>)
 8005a16:	430b      	orrs	r3, r1
 8005a18:	8013      	strh	r3, [r2, #0]
}
 8005a1a:	b007      	add	sp, #28
 8005a1c:	bcf0      	pop	{r4, r5, r6, r7}
 8005a1e:	46bb      	mov	fp, r7
 8005a20:	46b2      	mov	sl, r6
 8005a22:	46a9      	mov	r9, r5
 8005a24:	46a0      	mov	r8, r4
 8005a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (ep->xfer_len > ep->maxpacket)
 8005a28:	698c      	ldr	r4, [r1, #24]
 8005a2a:	690b      	ldr	r3, [r1, #16]
        ep->xfer_len = 0U;
 8005a2c:	2000      	movs	r0, #0
      if (ep->xfer_len > ep->maxpacket)
 8005a2e:	429c      	cmp	r4, r3
 8005a30:	d901      	bls.n	8005a36 <USB_EPStartXfer+0xc6>
        ep->xfer_len -= len;
 8005a32:	1ae0      	subs	r0, r4, r3
 8005a34:	001c      	movs	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a36:	2350      	movs	r3, #80	@ 0x50
 8005a38:	6188      	str	r0, [r1, #24]
 8005a3a:	5ad5      	ldrh	r5, [r2, r3]
 8005a3c:	4b73      	ldr	r3, [pc, #460]	@ (8005c0c <USB_EPStartXfer+0x29c>)
 8005a3e:	7808      	ldrb	r0, [r1, #0]
 8005a40:	18d3      	adds	r3, r2, r3
 8005a42:	195b      	adds	r3, r3, r5
 8005a44:	00c0      	lsls	r0, r0, #3
 8005a46:	18c0      	adds	r0, r0, r3
 8005a48:	8803      	ldrh	r3, [r0, #0]
 8005a4a:	059b      	lsls	r3, r3, #22
 8005a4c:	0d9b      	lsrs	r3, r3, #22
 8005a4e:	8003      	strh	r3, [r0, #0]
 8005a50:	2c00      	cmp	r4, #0
 8005a52:	d100      	bne.n	8005a56 <USB_EPStartXfer+0xe6>
 8005a54:	e081      	b.n	8005b5a <USB_EPStartXfer+0x1ea>
 8005a56:	2c3e      	cmp	r4, #62	@ 0x3e
 8005a58:	d900      	bls.n	8005a5c <USB_EPStartXfer+0xec>
 8005a5a:	e0c6      	b.n	8005bea <USB_EPStartXfer+0x27a>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	0865      	lsrs	r5, r4, #1
 8005a60:	4023      	ands	r3, r4
 8005a62:	18ed      	adds	r5, r5, r3
 8005a64:	8803      	ldrh	r3, [r0, #0]
 8005a66:	02ad      	lsls	r5, r5, #10
 8005a68:	432b      	orrs	r3, r5
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	8003      	strh	r3, [r0, #0]
 8005a6e:	e7c7      	b.n	8005a00 <USB_EPStartXfer+0x90>
    if (ep->xfer_len > ep->maxpacket)
 8005a70:	690c      	ldr	r4, [r1, #16]
 8005a72:	6988      	ldr	r0, [r1, #24]
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d868      	bhi.n	8005b4a <USB_EPStartXfer+0x1da>
    if (ep->doublebuffer == 0U)
 8005a78:	2680      	movs	r6, #128	@ 0x80
 8005a7a:	00f6      	lsls	r6, r6, #3
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a7c:	694b      	ldr	r3, [r1, #20]
 8005a7e:	1997      	adds	r7, r2, r6
    if (ep->doublebuffer == 0U)
 8005a80:	2d00      	cmp	r5, #0
 8005a82:	d12f      	bne.n	8005ae4 <USB_EPStartXfer+0x174>
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a84:	0404      	lsls	r4, r0, #16
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005a86:	b286      	uxth	r6, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a88:	0c24      	lsrs	r4, r4, #16
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a8a:	88c8      	ldrh	r0, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a8c:	3401      	adds	r4, #1
 8005a8e:	0864      	lsrs	r4, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a90:	19c0      	adds	r0, r0, r7

  for (count = n; count != 0U; count--)
 8005a92:	2c00      	cmp	r4, #0
 8005a94:	d00f      	beq.n	8005ab6 <USB_EPStartXfer+0x146>
 8005a96:	0064      	lsls	r4, r4, #1
 8005a98:	1ac5      	subs	r5, r0, r3
 8005a9a:	191c      	adds	r4, r3, r4
 8005a9c:	4694      	mov	ip, r2
 8005a9e:	002a      	movs	r2, r5
 8005aa0:	0025      	movs	r5, r4
 8005aa2:	7858      	ldrb	r0, [r3, #1]
 8005aa4:	781c      	ldrb	r4, [r3, #0]
 8005aa6:	0200      	lsls	r0, r0, #8
 8005aa8:	189f      	adds	r7, r3, r2
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005aaa:	4320      	orrs	r0, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8005aac:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005aae:	8038      	strh	r0, [r7, #0]
  for (count = n; count != 0U; count--)
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	d1f6      	bne.n	8005aa2 <USB_EPStartXfer+0x132>
 8005ab4:	4662      	mov	r2, ip
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005ab6:	2350      	movs	r3, #80	@ 0x50
 8005ab8:	4853      	ldr	r0, [pc, #332]	@ (8005c08 <USB_EPStartXfer+0x298>)
 8005aba:	5ad4      	ldrh	r4, [r2, r3]
 8005abc:	780b      	ldrb	r3, [r1, #0]
 8005abe:	1810      	adds	r0, r2, r0
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	1900      	adds	r0, r0, r4
 8005ac4:	181b      	adds	r3, r3, r0
 8005ac6:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ac8:	780b      	ldrb	r3, [r1, #0]
  return HAL_OK;
 8005aca:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	18d3      	adds	r3, r2, r3
 8005ad0:	8819      	ldrh	r1, [r3, #0]
 8005ad2:	4a51      	ldr	r2, [pc, #324]	@ (8005c18 <USB_EPStartXfer+0x2a8>)
 8005ad4:	4011      	ands	r1, r2
 8005ad6:	2230      	movs	r2, #48	@ 0x30
 8005ad8:	4051      	eors	r1, r2
 8005ada:	4a50      	ldr	r2, [pc, #320]	@ (8005c1c <USB_EPStartXfer+0x2ac>)
 8005adc:	430a      	orrs	r2, r1
 8005ade:	b292      	uxth	r2, r2
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	e79a      	b.n	8005a1a <USB_EPStartXfer+0xaa>
        if (ep->xfer_len_db > ep->maxpacket)
 8005ae4:	6a0d      	ldr	r5, [r1, #32]
 8005ae6:	46ab      	mov	fp, r5
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ae8:	780d      	ldrb	r5, [r1, #0]
 8005aea:	00ae      	lsls	r6, r5, #2
 8005aec:	46b4      	mov	ip, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005aee:	00ed      	lsls	r5, r5, #3
 8005af0:	9501      	str	r5, [sp, #4]
      if (ep->type == EP_TYPE_BULK)
 8005af2:	78ce      	ldrb	r6, [r1, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005af4:	4494      	add	ip, r2
      if (ep->type == EP_TYPE_BULK)
 8005af6:	2e02      	cmp	r6, #2
 8005af8:	d100      	bne.n	8005afc <USB_EPStartXfer+0x18c>
 8005afa:	e099      	b.n	8005c30 <USB_EPStartXfer+0x2c0>
        ep->xfer_len_db -= len;
 8005afc:	465c      	mov	r4, fp
 8005afe:	1a26      	subs	r6, r4, r0
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b00:	4664      	mov	r4, ip
        ep->xfer_len_db -= len;
 8005b02:	620e      	str	r6, [r1, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b04:	b286      	uxth	r6, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b06:	0400      	lsls	r0, r0, #16
 8005b08:	0c00      	lsrs	r0, r0, #16
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b0a:	8824      	ldrh	r4, [r4, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	0840      	lsrs	r0, r0, #1
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b10:	0664      	lsls	r4, r4, #25
 8005b12:	d400      	bmi.n	8005b16 <USB_EPStartXfer+0x1a6>
 8005b14:	e112      	b.n	8005d3c <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b16:	2450      	movs	r4, #80	@ 0x50
 8005b18:	5b14      	ldrh	r4, [r2, r4]
 8005b1a:	46a4      	mov	ip, r4
 8005b1c:	4c3b      	ldr	r4, [pc, #236]	@ (8005c0c <USB_EPStartXfer+0x29c>)
 8005b1e:	1914      	adds	r4, r2, r4
 8005b20:	4464      	add	r4, ip
 8005b22:	46ac      	mov	ip, r5
 8005b24:	4464      	add	r4, ip
 8005b26:	8026      	strh	r6, [r4, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b28:	894d      	ldrh	r5, [r1, #10]
 8005b2a:	19ef      	adds	r7, r5, r7
  for (count = n; count != 0U; count--)
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d0cb      	beq.n	8005ac8 <USB_EPStartXfer+0x158>
 8005b30:	0044      	lsls	r4, r0, #1
 8005b32:	191c      	adds	r4, r3, r4
 8005b34:	1aff      	subs	r7, r7, r3
 8005b36:	7858      	ldrb	r0, [r3, #1]
 8005b38:	781e      	ldrb	r6, [r3, #0]
 8005b3a:	0200      	lsls	r0, r0, #8
 8005b3c:	19dd      	adds	r5, r3, r7
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005b3e:	4330      	orrs	r0, r6
    pBuf++;
 8005b40:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005b42:	8028      	strh	r0, [r5, #0]
  for (count = n; count != 0U; count--)
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	d1f6      	bne.n	8005b36 <USB_EPStartXfer+0x1c6>
 8005b48:	e7be      	b.n	8005ac8 <USB_EPStartXfer+0x158>
 8005b4a:	2680      	movs	r6, #128	@ 0x80
 8005b4c:	00f6      	lsls	r6, r6, #3
 8005b4e:	0020      	movs	r0, r4
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b50:	694b      	ldr	r3, [r1, #20]
 8005b52:	1997      	adds	r7, r2, r6
    if (ep->doublebuffer == 0U)
 8005b54:	2d00      	cmp	r5, #0
 8005b56:	d1c5      	bne.n	8005ae4 <USB_EPStartXfer+0x174>
 8005b58:	e794      	b.n	8005a84 <USB_EPStartXfer+0x114>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005b5a:	2480      	movs	r4, #128	@ 0x80
 8005b5c:	8803      	ldrh	r3, [r0, #0]
 8005b5e:	0224      	lsls	r4, r4, #8
 8005b60:	4323      	orrs	r3, r4
 8005b62:	8003      	strh	r3, [r0, #0]
 8005b64:	e74c      	b.n	8005a00 <USB_EPStartXfer+0x90>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d129      	bne.n	8005bbe <USB_EPStartXfer+0x24e>
 8005b6a:	2650      	movs	r6, #80	@ 0x50
 8005b6c:	4b26      	ldr	r3, [pc, #152]	@ (8005c08 <USB_EPStartXfer+0x298>)
 8005b6e:	5b80      	ldrh	r0, [r0, r6]
 8005b70:	780c      	ldrb	r4, [r1, #0]
 8005b72:	18d3      	adds	r3, r2, r3
 8005b74:	181b      	adds	r3, r3, r0
 8005b76:	00e4      	lsls	r4, r4, #3
 8005b78:	191b      	adds	r3, r3, r4
 8005b7a:	8818      	ldrh	r0, [r3, #0]
 8005b7c:	690d      	ldr	r5, [r1, #16]
 8005b7e:	0580      	lsls	r0, r0, #22
 8005b80:	0d80      	lsrs	r0, r0, #22
 8005b82:	8018      	strh	r0, [r3, #0]
 8005b84:	4821      	ldr	r0, [pc, #132]	@ (8005c0c <USB_EPStartXfer+0x29c>)
 8005b86:	1810      	adds	r0, r2, r0
 8005b88:	2d00      	cmp	r5, #0
 8005b8a:	d100      	bne.n	8005b8e <USB_EPStartXfer+0x21e>
 8005b8c:	e119      	b.n	8005dc2 <USB_EPStartXfer+0x452>
 8005b8e:	2d3e      	cmp	r5, #62	@ 0x3e
 8005b90:	d900      	bls.n	8005b94 <USB_EPStartXfer+0x224>
 8005b92:	e195      	b.n	8005ec0 <USB_EPStartXfer+0x550>
 8005b94:	086f      	lsrs	r7, r5, #1
 8005b96:	46b8      	mov	r8, r7
 8005b98:	2701      	movs	r7, #1
 8005b9a:	403d      	ands	r5, r7
 8005b9c:	44a8      	add	r8, r5
 8005b9e:	4647      	mov	r7, r8
 8005ba0:	881d      	ldrh	r5, [r3, #0]
 8005ba2:	02bf      	lsls	r7, r7, #10
 8005ba4:	b2bf      	uxth	r7, r7
 8005ba6:	433d      	orrs	r5, r7
 8005ba8:	801d      	strh	r5, [r3, #0]
 8005baa:	5b93      	ldrh	r3, [r2, r6]
 8005bac:	18c3      	adds	r3, r0, r3
 8005bae:	191b      	adds	r3, r3, r4
 8005bb0:	8818      	ldrh	r0, [r3, #0]
 8005bb2:	0580      	lsls	r0, r0, #22
 8005bb4:	0d80      	lsrs	r0, r0, #22
 8005bb6:	8018      	strh	r0, [r3, #0]
 8005bb8:	8818      	ldrh	r0, [r3, #0]
 8005bba:	4307      	orrs	r7, r0
 8005bbc:	801f      	strh	r7, [r3, #0]
        if (ep->xfer_count != 0U)
 8005bbe:	69cb      	ldr	r3, [r1, #28]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d100      	bne.n	8005bc6 <USB_EPStartXfer+0x256>
 8005bc4:	e71c      	b.n	8005a00 <USB_EPStartXfer+0x90>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005bc6:	780b      	ldrb	r3, [r1, #0]
 8005bc8:	4d15      	ldr	r5, [pc, #84]	@ (8005c20 <USB_EPStartXfer+0x2b0>)
 8005bca:	0098      	lsls	r0, r3, #2
 8005bcc:	1810      	adds	r0, r2, r0
 8005bce:	8804      	ldrh	r4, [r0, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bd0:	402c      	ands	r4, r5
 8005bd2:	42ac      	cmp	r4, r5
 8005bd4:	d002      	beq.n	8005bdc <USB_EPStartXfer+0x26c>
 8005bd6:	2c00      	cmp	r4, #0
 8005bd8:	d000      	beq.n	8005bdc <USB_EPStartXfer+0x26c>
 8005bda:	e712      	b.n	8005a02 <USB_EPStartXfer+0x92>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005bdc:	8803      	ldrh	r3, [r0, #0]
 8005bde:	4c11      	ldr	r4, [pc, #68]	@ (8005c24 <USB_EPStartXfer+0x2b4>)
 8005be0:	4023      	ands	r3, r4
 8005be2:	4c11      	ldr	r4, [pc, #68]	@ (8005c28 <USB_EPStartXfer+0x2b8>)
 8005be4:	4323      	orrs	r3, r4
 8005be6:	8003      	strh	r3, [r0, #0]
 8005be8:	e70a      	b.n	8005a00 <USB_EPStartXfer+0x90>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005bea:	251f      	movs	r5, #31
 8005bec:	0963      	lsrs	r3, r4, #5
 8005bee:	402c      	ands	r4, r5
 8005bf0:	4265      	negs	r5, r4
 8005bf2:	416c      	adcs	r4, r5
 8005bf4:	1b1b      	subs	r3, r3, r4
 8005bf6:	8804      	ldrh	r4, [r0, #0]
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	431c      	orrs	r4, r3
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <USB_EPStartXfer+0x2bc>)
 8005bfe:	4323      	orrs	r3, r4
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	8003      	strh	r3, [r0, #0]
 8005c04:	e6fc      	b.n	8005a00 <USB_EPStartXfer+0x90>
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	00000402 	.word	0x00000402
 8005c0c:	00000406 	.word	0x00000406
 8005c10:	ffffbf8f 	.word	0xffffbf8f
 8005c14:	00008080 	.word	0x00008080
 8005c18:	ffff8fbf 	.word	0xffff8fbf
 8005c1c:	ffff8080 	.word	0xffff8080
 8005c20:	00004040 	.word	0x00004040
 8005c24:	ffff8f8f 	.word	0xffff8f8f
 8005c28:	000080c0 	.word	0x000080c0
 8005c2c:	ffff8000 	.word	0xffff8000
        if (ep->xfer_len_db > ep->maxpacket)
 8005c30:	4ec4      	ldr	r6, [pc, #784]	@ (8005f44 <USB_EPStartXfer+0x5d4>)
 8005c32:	46b1      	mov	r9, r6
 8005c34:	4491      	add	r9, r2
 8005c36:	455c      	cmp	r4, fp
 8005c38:	d300      	bcc.n	8005c3c <USB_EPStartXfer+0x2cc>
 8005c3a:	e09a      	b.n	8005d72 <USB_EPStartXfer+0x402>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c3c:	4665      	mov	r5, ip
 8005c3e:	882d      	ldrh	r5, [r5, #0]
 8005c40:	46a8      	mov	r8, r5
 8005c42:	4646      	mov	r6, r8
 8005c44:	4dc0      	ldr	r5, [pc, #768]	@ (8005f48 <USB_EPStartXfer+0x5d8>)
 8005c46:	402e      	ands	r6, r5
 8005c48:	4dc0      	ldr	r5, [pc, #768]	@ (8005f4c <USB_EPStartXfer+0x5dc>)
 8005c4a:	432e      	orrs	r6, r5
 8005c4c:	4665      	mov	r5, ip
 8005c4e:	802e      	strh	r6, [r5, #0]
          ep->xfer_len_db -= len;
 8005c50:	465d      	mov	r5, fp
 8005c52:	1a2d      	subs	r5, r5, r0
 8005c54:	46ab      	mov	fp, r5
 8005c56:	620d      	str	r5, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c58:	4665      	mov	r5, ip
 8005c5a:	882e      	ldrh	r6, [r5, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005c5c:	0405      	lsls	r5, r0, #16
 8005c5e:	0c2d      	lsrs	r5, r5, #16
 8005c60:	46ac      	mov	ip, r5
 8005c62:	2501      	movs	r5, #1
 8005c64:	46a8      	mov	r8, r5
 8005c66:	44c4      	add	ip, r8
 8005c68:	4665      	mov	r5, ip
 8005c6a:	086d      	lsrs	r5, r5, #1
 8005c6c:	46aa      	mov	sl, r5
 8005c6e:	4db8      	ldr	r5, [pc, #736]	@ (8005f50 <USB_EPStartXfer+0x5e0>)
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c70:	9603      	str	r6, [sp, #12]
 8005c72:	46ac      	mov	ip, r5
 8005c74:	4494      	add	ip, r2
 8005c76:	4665      	mov	r5, ip
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c78:	b286      	uxth	r6, r0
 8005c7a:	9602      	str	r6, [sp, #8]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c7c:	9e03      	ldr	r6, [sp, #12]
 8005c7e:	9504      	str	r5, [sp, #16]
 8005c80:	0676      	lsls	r6, r6, #25
 8005c82:	d400      	bmi.n	8005c86 <USB_EPStartXfer+0x316>
 8005c84:	e0bf      	b.n	8005e06 <USB_EPStartXfer+0x496>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005c86:	2650      	movs	r6, #80	@ 0x50
 8005c88:	9d01      	ldr	r5, [sp, #4]
 8005c8a:	5b96      	ldrh	r6, [r2, r6]
 8005c8c:	4466      	add	r6, ip
 8005c8e:	46ac      	mov	ip, r5
 8005c90:	b285      	uxth	r5, r0
 8005c92:	4466      	add	r6, ip
 8005c94:	8035      	strh	r5, [r6, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c96:	894e      	ldrh	r6, [r1, #10]
  for (count = n; count != 0U; count--)
 8005c98:	4655      	mov	r5, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005c9a:	46b4      	mov	ip, r6
 8005c9c:	44bc      	add	ip, r7
  for (count = n; count != 0U; count--)
 8005c9e:	2d00      	cmp	r5, #0
 8005ca0:	d022      	beq.n	8005ce8 <USB_EPStartXfer+0x378>
 8005ca2:	006e      	lsls	r6, r5, #1
 8005ca4:	4665      	mov	r5, ip
 8005ca6:	46b0      	mov	r8, r6
 8005ca8:	1aed      	subs	r5, r5, r3
 8005caa:	46ac      	mov	ip, r5
 8005cac:	9005      	str	r0, [sp, #20]
 8005cae:	0010      	movs	r0, r2
 8005cb0:	4498      	add	r8, r3
 8005cb2:	9403      	str	r4, [sp, #12]
 8005cb4:	465c      	mov	r4, fp
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	468b      	mov	fp, r1
  uint8_t *pBuf = pbUsrBuf;
 8005cba:	001e      	movs	r6, r3
 8005cbc:	4661      	mov	r1, ip
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	469c      	mov	ip, r3
 8005cc2:	9d01      	ldr	r5, [sp, #4]
 8005cc4:	9404      	str	r4, [sp, #16]
 8005cc6:	7870      	ldrb	r0, [r6, #1]
 8005cc8:	7833      	ldrb	r3, [r6, #0]
 8005cca:	0200      	lsls	r0, r0, #8
 8005ccc:	1874      	adds	r4, r6, r1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005cce:	4318      	orrs	r0, r3
    pBuf++;
 8005cd0:	3602      	adds	r6, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005cd2:	8020      	strh	r0, [r4, #0]
  for (count = n; count != 0U; count--)
 8005cd4:	4296      	cmp	r6, r2
 8005cd6:	d1f6      	bne.n	8005cc6 <USB_EPStartXfer+0x356>
 8005cd8:	9501      	str	r5, [sp, #4]
 8005cda:	9d04      	ldr	r5, [sp, #16]
 8005cdc:	4659      	mov	r1, fp
 8005cde:	4663      	mov	r3, ip
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	46ab      	mov	fp, r5
 8005ce4:	9c03      	ldr	r4, [sp, #12]
 8005ce6:	9805      	ldr	r0, [sp, #20]
              ep->xfer_len_db -= len;
 8005ce8:	465d      	mov	r5, fp
            ep->xfer_buff += len;
 8005cea:	181b      	adds	r3, r3, r0
 8005cec:	614b      	str	r3, [r1, #20]
              ep->xfer_len_db -= len;
 8005cee:	1a28      	subs	r0, r5, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8005cf0:	455c      	cmp	r4, fp
 8005cf2:	d307      	bcc.n	8005d04 <USB_EPStartXfer+0x394>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cf4:	b2a8      	uxth	r0, r5
 8005cf6:	9002      	str	r0, [sp, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005cf8:	0428      	lsls	r0, r5, #16
 8005cfa:	0c00      	lsrs	r0, r0, #16
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	0840      	lsrs	r0, r0, #1
 8005d00:	4682      	mov	sl, r0
              ep->xfer_len_db = 0U;
 8005d02:	2000      	movs	r0, #0
 8005d04:	6208      	str	r0, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d06:	2050      	movs	r0, #80	@ 0x50
 8005d08:	9c01      	ldr	r4, [sp, #4]
 8005d0a:	5a10      	ldrh	r0, [r2, r0]
 8005d0c:	46a4      	mov	ip, r4
 8005d0e:	4448      	add	r0, r9
 8005d10:	9c02      	ldr	r4, [sp, #8]
 8005d12:	4460      	add	r0, ip
 8005d14:	8004      	strh	r4, [r0, #0]
  for (count = n; count != 0U; count--)
 8005d16:	4650      	mov	r0, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d18:	890e      	ldrh	r6, [r1, #8]
 8005d1a:	19f6      	adds	r6, r6, r7
  for (count = n; count != 0U; count--)
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d100      	bne.n	8005d22 <USB_EPStartXfer+0x3b2>
 8005d20:	e6d2      	b.n	8005ac8 <USB_EPStartXfer+0x158>
 8005d22:	0047      	lsls	r7, r0, #1
 8005d24:	19df      	adds	r7, r3, r7
 8005d26:	1af6      	subs	r6, r6, r3
 8005d28:	7858      	ldrb	r0, [r3, #1]
 8005d2a:	781d      	ldrb	r5, [r3, #0]
 8005d2c:	0200      	lsls	r0, r0, #8
 8005d2e:	199c      	adds	r4, r3, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005d30:	4328      	orrs	r0, r5
    pBuf++;
 8005d32:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005d34:	8020      	strh	r0, [r4, #0]
  for (count = n; count != 0U; count--)
 8005d36:	42bb      	cmp	r3, r7
 8005d38:	d1f6      	bne.n	8005d28 <USB_EPStartXfer+0x3b8>
 8005d3a:	e6c5      	b.n	8005ac8 <USB_EPStartXfer+0x158>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d3c:	2450      	movs	r4, #80	@ 0x50
 8005d3e:	5b14      	ldrh	r4, [r2, r4]
 8005d40:	46a4      	mov	ip, r4
 8005d42:	4c80      	ldr	r4, [pc, #512]	@ (8005f44 <USB_EPStartXfer+0x5d4>)
 8005d44:	1914      	adds	r4, r2, r4
 8005d46:	4464      	add	r4, ip
 8005d48:	46ac      	mov	ip, r5
 8005d4a:	4464      	add	r4, ip
 8005d4c:	8026      	strh	r6, [r4, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d4e:	890d      	ldrh	r5, [r1, #8]
 8005d50:	19ef      	adds	r7, r5, r7
  for (count = n; count != 0U; count--)
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d100      	bne.n	8005d58 <USB_EPStartXfer+0x3e8>
 8005d56:	e6b7      	b.n	8005ac8 <USB_EPStartXfer+0x158>
 8005d58:	0044      	lsls	r4, r0, #1
 8005d5a:	191c      	adds	r4, r3, r4
 8005d5c:	1aff      	subs	r7, r7, r3
 8005d5e:	7858      	ldrb	r0, [r3, #1]
 8005d60:	781e      	ldrb	r6, [r3, #0]
 8005d62:	0200      	lsls	r0, r0, #8
 8005d64:	19dd      	adds	r5, r3, r7
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005d66:	4330      	orrs	r0, r6
    pBuf++;
 8005d68:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005d6a:	8028      	strh	r0, [r5, #0]
  for (count = n; count != 0U; count--)
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	d1f6      	bne.n	8005d5e <USB_EPStartXfer+0x3ee>
 8005d70:	e6aa      	b.n	8005ac8 <USB_EPStartXfer+0x158>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005d72:	4660      	mov	r0, ip
 8005d74:	4c77      	ldr	r4, [pc, #476]	@ (8005f54 <USB_EPStartXfer+0x5e4>)
 8005d76:	8800      	ldrh	r0, [r0, #0]
 8005d78:	4020      	ands	r0, r4
 8005d7a:	4c77      	ldr	r4, [pc, #476]	@ (8005f58 <USB_EPStartXfer+0x5e8>)
 8005d7c:	4320      	orrs	r0, r4
 8005d7e:	4664      	mov	r4, ip
 8005d80:	8020      	strh	r0, [r4, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005d82:	2050      	movs	r0, #80	@ 0x50
 8005d84:	9c01      	ldr	r4, [sp, #4]
 8005d86:	5a10      	ldrh	r0, [r2, r0]
 8005d88:	46a4      	mov	ip, r4
 8005d8a:	465c      	mov	r4, fp
 8005d8c:	4448      	add	r0, r9
 8005d8e:	4460      	add	r0, ip
 8005d90:	b2a4      	uxth	r4, r4
 8005d92:	8004      	strh	r4, [r0, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d94:	4658      	mov	r0, fp
 8005d96:	0404      	lsls	r4, r0, #16
 8005d98:	0c24      	lsrs	r4, r4, #16
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d9a:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d9c:	3401      	adds	r4, #1
 8005d9e:	0864      	lsrs	r4, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005da0:	19c7      	adds	r7, r0, r7
  for (count = n; count != 0U; count--)
 8005da2:	2c00      	cmp	r4, #0
 8005da4:	d100      	bne.n	8005da8 <USB_EPStartXfer+0x438>
 8005da6:	e68f      	b.n	8005ac8 <USB_EPStartXfer+0x158>
 8005da8:	0064      	lsls	r4, r4, #1
 8005daa:	191c      	adds	r4, r3, r4
 8005dac:	1aff      	subs	r7, r7, r3
 8005dae:	7858      	ldrb	r0, [r3, #1]
 8005db0:	781e      	ldrb	r6, [r3, #0]
 8005db2:	0200      	lsls	r0, r0, #8
 8005db4:	19dd      	adds	r5, r3, r7
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005db6:	4330      	orrs	r0, r6
    pBuf++;
 8005db8:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005dba:	8028      	strh	r0, [r5, #0]
  for (count = n; count != 0U; count--)
 8005dbc:	42a3      	cmp	r3, r4
 8005dbe:	d1f6      	bne.n	8005dae <USB_EPStartXfer+0x43e>
 8005dc0:	e682      	b.n	8005ac8 <USB_EPStartXfer+0x158>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005dc2:	881f      	ldrh	r7, [r3, #0]
 8005dc4:	4d65      	ldr	r5, [pc, #404]	@ (8005f5c <USB_EPStartXfer+0x5ec>)
 8005dc6:	432f      	orrs	r7, r5
 8005dc8:	b2bf      	uxth	r7, r7
 8005dca:	801f      	strh	r7, [r3, #0]
 8005dcc:	5b93      	ldrh	r3, [r2, r6]
 8005dce:	18c3      	adds	r3, r0, r3
 8005dd0:	191b      	adds	r3, r3, r4
 8005dd2:	8818      	ldrh	r0, [r3, #0]
 8005dd4:	0580      	lsls	r0, r0, #22
 8005dd6:	0d80      	lsrs	r0, r0, #22
 8005dd8:	8018      	strh	r0, [r3, #0]
 8005dda:	8818      	ldrh	r0, [r3, #0]
 8005ddc:	4305      	orrs	r5, r0
 8005dde:	b2ad      	uxth	r5, r5
 8005de0:	801d      	strh	r5, [r3, #0]
 8005de2:	e6ec      	b.n	8005bbe <USB_EPStartXfer+0x24e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005de4:	881f      	ldrh	r7, [r3, #0]
 8005de6:	4d5d      	ldr	r5, [pc, #372]	@ (8005f5c <USB_EPStartXfer+0x5ec>)
 8005de8:	432f      	orrs	r7, r5
 8005dea:	b2bf      	uxth	r7, r7
 8005dec:	801f      	strh	r7, [r3, #0]
 8005dee:	5b93      	ldrh	r3, [r2, r6]
 8005df0:	4443      	add	r3, r8
 8005df2:	191b      	adds	r3, r3, r4
 8005df4:	8818      	ldrh	r0, [r3, #0]
 8005df6:	0580      	lsls	r0, r0, #22
 8005df8:	0d80      	lsrs	r0, r0, #22
 8005dfa:	8018      	strh	r0, [r3, #0]
 8005dfc:	8818      	ldrh	r0, [r3, #0]
 8005dfe:	4305      	orrs	r5, r0
 8005e00:	b2ad      	uxth	r5, r5
 8005e02:	801d      	strh	r5, [r3, #0]
 8005e04:	e5fc      	b.n	8005a00 <USB_EPStartXfer+0x90>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e06:	2650      	movs	r6, #80	@ 0x50
 8005e08:	9d01      	ldr	r5, [sp, #4]
 8005e0a:	5b96      	ldrh	r6, [r2, r6]
 8005e0c:	46ac      	mov	ip, r5
 8005e0e:	444e      	add	r6, r9
 8005e10:	4466      	add	r6, ip
 8005e12:	b285      	uxth	r5, r0
 8005e14:	8035      	strh	r5, [r6, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e16:	890e      	ldrh	r6, [r1, #8]
  for (count = n; count != 0U; count--)
 8005e18:	4655      	mov	r5, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e1a:	46b4      	mov	ip, r6
 8005e1c:	44bc      	add	ip, r7
  for (count = n; count != 0U; count--)
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	d022      	beq.n	8005e68 <USB_EPStartXfer+0x4f8>
 8005e22:	006e      	lsls	r6, r5, #1
 8005e24:	4665      	mov	r5, ip
 8005e26:	46b0      	mov	r8, r6
 8005e28:	1aed      	subs	r5, r5, r3
 8005e2a:	46ac      	mov	ip, r5
 8005e2c:	4498      	add	r8, r3
  uint8_t *pBuf = pbUsrBuf;
 8005e2e:	001e      	movs	r6, r3
 8005e30:	9403      	str	r4, [sp, #12]
 8005e32:	465c      	mov	r4, fp
 8005e34:	468b      	mov	fp, r1
 8005e36:	4641      	mov	r1, r8
 8005e38:	4698      	mov	r8, r3
 8005e3a:	4663      	mov	r3, ip
 8005e3c:	4691      	mov	r9, r2
 8005e3e:	4684      	mov	ip, r0
 8005e40:	0018      	movs	r0, r3
 8005e42:	9d01      	ldr	r5, [sp, #4]
 8005e44:	9405      	str	r4, [sp, #20]
 8005e46:	7874      	ldrb	r4, [r6, #1]
 8005e48:	7832      	ldrb	r2, [r6, #0]
 8005e4a:	0224      	lsls	r4, r4, #8
 8005e4c:	1833      	adds	r3, r6, r0
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005e4e:	4314      	orrs	r4, r2
    pBuf++;
 8005e50:	3602      	adds	r6, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005e52:	801c      	strh	r4, [r3, #0]
  for (count = n; count != 0U; count--)
 8005e54:	428e      	cmp	r6, r1
 8005e56:	d1f6      	bne.n	8005e46 <USB_EPStartXfer+0x4d6>
 8005e58:	9501      	str	r5, [sp, #4]
 8005e5a:	9d05      	ldr	r5, [sp, #20]
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	4660      	mov	r0, ip
 8005e60:	4643      	mov	r3, r8
 8005e62:	464a      	mov	r2, r9
 8005e64:	46ab      	mov	fp, r5
 8005e66:	9c03      	ldr	r4, [sp, #12]
              ep->xfer_len_db -= len;
 8005e68:	465d      	mov	r5, fp
            ep->xfer_buff += len;
 8005e6a:	181b      	adds	r3, r3, r0
 8005e6c:	614b      	str	r3, [r1, #20]
              ep->xfer_len_db -= len;
 8005e6e:	1a28      	subs	r0, r5, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8005e70:	455c      	cmp	r4, fp
 8005e72:	d307      	bcc.n	8005e84 <USB_EPStartXfer+0x514>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e74:	b2a8      	uxth	r0, r5
 8005e76:	9002      	str	r0, [sp, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e78:	0428      	lsls	r0, r5, #16
 8005e7a:	0c00      	lsrs	r0, r0, #16
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	0840      	lsrs	r0, r0, #1
 8005e80:	4682      	mov	sl, r0
              ep->xfer_len_db = 0U;
 8005e82:	2000      	movs	r0, #0
 8005e84:	6208      	str	r0, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e86:	9c04      	ldr	r4, [sp, #16]
 8005e88:	2050      	movs	r0, #80	@ 0x50
 8005e8a:	46a4      	mov	ip, r4
 8005e8c:	5a10      	ldrh	r0, [r2, r0]
 8005e8e:	9c01      	ldr	r4, [sp, #4]
 8005e90:	4460      	add	r0, ip
 8005e92:	46a4      	mov	ip, r4
 8005e94:	9c02      	ldr	r4, [sp, #8]
 8005e96:	4460      	add	r0, ip
 8005e98:	8004      	strh	r4, [r0, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e9a:	8948      	ldrh	r0, [r1, #10]
 8005e9c:	19c7      	adds	r7, r0, r7
  for (count = n; count != 0U; count--)
 8005e9e:	4650      	mov	r0, sl
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d100      	bne.n	8005ea6 <USB_EPStartXfer+0x536>
 8005ea4:	e610      	b.n	8005ac8 <USB_EPStartXfer+0x158>
 8005ea6:	0044      	lsls	r4, r0, #1
 8005ea8:	191c      	adds	r4, r3, r4
 8005eaa:	1aff      	subs	r7, r7, r3
 8005eac:	7858      	ldrb	r0, [r3, #1]
 8005eae:	781e      	ldrb	r6, [r3, #0]
 8005eb0:	0200      	lsls	r0, r0, #8
 8005eb2:	19dd      	adds	r5, r3, r7
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005eb4:	4330      	orrs	r0, r6
    pBuf++;
 8005eb6:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005eb8:	8028      	strh	r0, [r5, #0]
  for (count = n; count != 0U; count--)
 8005eba:	42a3      	cmp	r3, r4
 8005ebc:	d1f6      	bne.n	8005eac <USB_EPStartXfer+0x53c>
 8005ebe:	e603      	b.n	8005ac8 <USB_EPStartXfer+0x158>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ec0:	096f      	lsrs	r7, r5, #5
 8005ec2:	46bc      	mov	ip, r7
 8005ec4:	271f      	movs	r7, #31
 8005ec6:	403d      	ands	r5, r7
 8005ec8:	426f      	negs	r7, r5
 8005eca:	417d      	adcs	r5, r7
 8005ecc:	4667      	mov	r7, ip
 8005ece:	1b7d      	subs	r5, r7, r5
 8005ed0:	02ad      	lsls	r5, r5, #10
 8005ed2:	881f      	ldrh	r7, [r3, #0]
 8005ed4:	b2ad      	uxth	r5, r5
 8005ed6:	432f      	orrs	r7, r5
 8005ed8:	46b8      	mov	r8, r7
 8005eda:	46a9      	mov	r9, r5
 8005edc:	4645      	mov	r5, r8
 8005ede:	4f1f      	ldr	r7, [pc, #124]	@ (8005f5c <USB_EPStartXfer+0x5ec>)
 8005ee0:	433d      	orrs	r5, r7
 8005ee2:	46bc      	mov	ip, r7
 8005ee4:	b2af      	uxth	r7, r5
 8005ee6:	464d      	mov	r5, r9
 8005ee8:	801f      	strh	r7, [r3, #0]
 8005eea:	5b93      	ldrh	r3, [r2, r6]
 8005eec:	18c0      	adds	r0, r0, r3
 8005eee:	1900      	adds	r0, r0, r4
 8005ef0:	8803      	ldrh	r3, [r0, #0]
 8005ef2:	059b      	lsls	r3, r3, #22
 8005ef4:	0d9b      	lsrs	r3, r3, #22
 8005ef6:	8003      	strh	r3, [r0, #0]
 8005ef8:	8803      	ldrh	r3, [r0, #0]
 8005efa:	431d      	orrs	r5, r3
 8005efc:	4663      	mov	r3, ip
 8005efe:	431d      	orrs	r5, r3
 8005f00:	b2ab      	uxth	r3, r5
 8005f02:	8003      	strh	r3, [r0, #0]
 8005f04:	e65b      	b.n	8005bbe <USB_EPStartXfer+0x24e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f06:	201f      	movs	r0, #31
 8005f08:	096f      	lsrs	r7, r5, #5
 8005f0a:	4005      	ands	r5, r0
 8005f0c:	0028      	movs	r0, r5
 8005f0e:	4245      	negs	r5, r0
 8005f10:	4145      	adcs	r5, r0
 8005f12:	4812      	ldr	r0, [pc, #72]	@ (8005f5c <USB_EPStartXfer+0x5ec>)
 8005f14:	1b7f      	subs	r7, r7, r5
 8005f16:	4684      	mov	ip, r0
 8005f18:	881d      	ldrh	r5, [r3, #0]
 8005f1a:	02bf      	lsls	r7, r7, #10
 8005f1c:	b2bf      	uxth	r7, r7
 8005f1e:	433d      	orrs	r5, r7
 8005f20:	4305      	orrs	r5, r0
 8005f22:	b2ad      	uxth	r5, r5
 8005f24:	801d      	strh	r5, [r3, #0]
 8005f26:	5b93      	ldrh	r3, [r2, r6]
 8005f28:	4443      	add	r3, r8
 8005f2a:	1918      	adds	r0, r3, r4
 8005f2c:	8803      	ldrh	r3, [r0, #0]
 8005f2e:	059b      	lsls	r3, r3, #22
 8005f30:	0d9b      	lsrs	r3, r3, #22
 8005f32:	8003      	strh	r3, [r0, #0]
 8005f34:	8803      	ldrh	r3, [r0, #0]
 8005f36:	431f      	orrs	r7, r3
 8005f38:	4663      	mov	r3, ip
 8005f3a:	431f      	orrs	r7, r3
 8005f3c:	b2bb      	uxth	r3, r7
 8005f3e:	8003      	strh	r3, [r0, #0]
 8005f40:	e55e      	b.n	8005a00 <USB_EPStartXfer+0x90>
 8005f42:	46c0      	nop			@ (mov r8, r8)
 8005f44:	00000402 	.word	0x00000402
 8005f48:	ffff8f8f 	.word	0xffff8f8f
 8005f4c:	00008180 	.word	0x00008180
 8005f50:	00000406 	.word	0x00000406
 8005f54:	ffff8e8f 	.word	0xffff8e8f
 8005f58:	00008080 	.word	0x00008080
 8005f5c:	ffff8000 	.word	0xffff8000

08005f60 <USB_EPSetStall>:
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f60:	780b      	ldrb	r3, [r1, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8005f66:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f68:	8802      	ldrh	r2, [r0, #0]
  if (ep->is_in != 0U)
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f6e:	4b09      	ldr	r3, [pc, #36]	@ (8005f94 <USB_EPSetStall+0x34>)
 8005f70:	401a      	ands	r2, r3
 8005f72:	2310      	movs	r3, #16
 8005f74:	405a      	eors	r2, r3
 8005f76:	4b08      	ldr	r3, [pc, #32]	@ (8005f98 <USB_EPSetStall+0x38>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	8003      	strh	r3, [r0, #0]
}
 8005f7e:	2000      	movs	r0, #0
 8005f80:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f82:	4b06      	ldr	r3, [pc, #24]	@ (8005f9c <USB_EPSetStall+0x3c>)
 8005f84:	401a      	ands	r2, r3
 8005f86:	2380      	movs	r3, #128	@ 0x80
 8005f88:	015b      	lsls	r3, r3, #5
 8005f8a:	4053      	eors	r3, r2
 8005f8c:	4a04      	ldr	r2, [pc, #16]	@ (8005fa0 <USB_EPSetStall+0x40>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	8003      	strh	r3, [r0, #0]
 8005f92:	e7f4      	b.n	8005f7e <USB_EPSetStall+0x1e>
 8005f94:	ffff8fbf 	.word	0xffff8fbf
 8005f98:	ffff8080 	.word	0xffff8080
 8005f9c:	ffffbf8f 	.word	0xffffbf8f
 8005fa0:	00008080 	.word	0x00008080

08005fa4 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8005fa4:	7b0b      	ldrb	r3, [r1, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d11a      	bne.n	8005fe0 <USB_EPClearStall+0x3c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005faa:	780b      	ldrb	r3, [r1, #0]
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 8005fb0:	784b      	ldrb	r3, [r1, #1]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d016      	beq.n	8005fe4 <USB_EPClearStall+0x40>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fb6:	8803      	ldrh	r3, [r0, #0]
 8005fb8:	065b      	lsls	r3, r3, #25
 8005fba:	d505      	bpl.n	8005fc8 <USB_EPClearStall+0x24>
 8005fbc:	8803      	ldrh	r3, [r0, #0]
 8005fbe:	4a13      	ldr	r2, [pc, #76]	@ (800600c <USB_EPClearStall+0x68>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	4a13      	ldr	r2, [pc, #76]	@ (8006010 <USB_EPClearStall+0x6c>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	8003      	strh	r3, [r0, #0]
      if (ep->type != EP_TYPE_ISOC)
 8005fc8:	78cb      	ldrb	r3, [r1, #3]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d008      	beq.n	8005fe0 <USB_EPClearStall+0x3c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fce:	8802      	ldrh	r2, [r0, #0]
 8005fd0:	4b10      	ldr	r3, [pc, #64]	@ (8006014 <USB_EPClearStall+0x70>)
 8005fd2:	401a      	ands	r2, r3
 8005fd4:	2320      	movs	r3, #32
 8005fd6:	405a      	eors	r2, r3
 8005fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8006018 <USB_EPClearStall+0x74>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	8003      	strh	r3, [r0, #0]
}
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fe4:	8803      	ldrh	r3, [r0, #0]
 8005fe6:	045b      	lsls	r3, r3, #17
 8005fe8:	d505      	bpl.n	8005ff6 <USB_EPClearStall+0x52>
 8005fea:	8803      	ldrh	r3, [r0, #0]
 8005fec:	4a07      	ldr	r2, [pc, #28]	@ (800600c <USB_EPClearStall+0x68>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	@ (800601c <USB_EPClearStall+0x78>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ff6:	8802      	ldrh	r2, [r0, #0]
 8005ff8:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <USB_EPClearStall+0x7c>)
 8005ffa:	401a      	ands	r2, r3
 8005ffc:	23c0      	movs	r3, #192	@ 0xc0
 8005ffe:	019b      	lsls	r3, r3, #6
 8006000:	4053      	eors	r3, r2
 8006002:	4a08      	ldr	r2, [pc, #32]	@ (8006024 <USB_EPClearStall+0x80>)
 8006004:	4313      	orrs	r3, r2
 8006006:	8003      	strh	r3, [r0, #0]
 8006008:	e7ea      	b.n	8005fe0 <USB_EPClearStall+0x3c>
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	ffff8f8f 	.word	0xffff8f8f
 8006010:	000080c0 	.word	0x000080c0
 8006014:	ffff8fbf 	.word	0xffff8fbf
 8006018:	ffff8080 	.word	0xffff8080
 800601c:	0000c080 	.word	0x0000c080
 8006020:	ffffbf8f 	.word	0xffffbf8f
 8006024:	00008080 	.word	0x00008080

08006028 <USB_SetDevAddress>:
  if (address == 0U)
 8006028:	2900      	cmp	r1, #0
 800602a:	d102      	bne.n	8006032 <USB_SetDevAddress+0xa>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800602c:	234c      	movs	r3, #76	@ 0x4c
 800602e:	2280      	movs	r2, #128	@ 0x80
 8006030:	52c2      	strh	r2, [r0, r3]
}
 8006032:	2000      	movs	r0, #0
 8006034:	4770      	bx	lr
 8006036:	46c0      	nop			@ (mov r8, r8)

08006038 <USB_DevConnect>:
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006038:	2258      	movs	r2, #88	@ 0x58
 800603a:	2180      	movs	r1, #128	@ 0x80
 800603c:	5a83      	ldrh	r3, [r0, r2]
 800603e:	0209      	lsls	r1, r1, #8
 8006040:	430b      	orrs	r3, r1
 8006042:	5283      	strh	r3, [r0, r2]
}
 8006044:	2000      	movs	r0, #0
 8006046:	4770      	bx	lr

08006048 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 8006048:	2344      	movs	r3, #68	@ 0x44
 800604a:	5ac0      	ldrh	r0, [r0, r3]
 800604c:	b280      	uxth	r0, r0
}
 800604e:	4770      	bx	lr

08006050 <USB_WritePMA>:
{
 8006050:	b530      	push	{r4, r5, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006052:	2480      	movs	r4, #128	@ 0x80
 8006054:	00e4      	lsls	r4, r4, #3
 8006056:	46a4      	mov	ip, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006058:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800605a:	4462      	add	r2, ip
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800605c:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800605e:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <USB_WritePMA+0x2c>
 8006064:	005a      	lsls	r2, r3, #1
 8006066:	188a      	adds	r2, r1, r2
 8006068:	1a45      	subs	r5, r0, r1
 800606a:	784b      	ldrb	r3, [r1, #1]
 800606c:	780c      	ldrb	r4, [r1, #0]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	1948      	adds	r0, r1, r5
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006072:	4323      	orrs	r3, r4
    pBuf++;
 8006074:	3102      	adds	r1, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8006076:	8003      	strh	r3, [r0, #0]
  for (count = n; count != 0U; count--)
 8006078:	428a      	cmp	r2, r1
 800607a:	d1f6      	bne.n	800606a <USB_WritePMA+0x1a>
  }
}
 800607c:	bd30      	pop	{r4, r5, pc}
 800607e:	46c0      	nop			@ (mov r8, r8)

08006080 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006080:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006082:	2480      	movs	r4, #128	@ 0x80
 8006084:	00e4      	lsls	r4, r4, #3
 8006086:	46a4      	mov	ip, r4
 8006088:	4462      	add	r2, ip
 800608a:	1880      	adds	r0, r0, r2
 800608c:	0002      	movs	r2, r0
  uint32_t n = (uint32_t)wNBytes >> 1;
 800608e:	085f      	lsrs	r7, r3, #1

  for (count = n; count != 0U; count--)
 8006090:	d00f      	beq.n	80060b2 <USB_ReadPMA+0x32>
  uint8_t *pBuf = pbUsrBuf;
 8006092:	000c      	movs	r4, r1
  for (count = n; count != 0U; count--)
 8006094:	003d      	movs	r5, r7
 8006096:	1a46      	subs	r6, r0, r1
 8006098:	19a2      	adds	r2, r4, r6
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800609a:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 800609c:	3d01      	subs	r5, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 800609e:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80060a0:	7022      	strb	r2, [r4, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80060a2:	0a12      	lsrs	r2, r2, #8
 80060a4:	7062      	strb	r2, [r4, #1]
    pBuf++;
 80060a6:	3402      	adds	r4, #2
  for (count = n; count != 0U; count--)
 80060a8:	2d00      	cmp	r5, #0
 80060aa:	d1f5      	bne.n	8006098 <USB_ReadPMA+0x18>
 80060ac:	007f      	lsls	r7, r7, #1
    pdwVal++;
 80060ae:	19c2      	adds	r2, r0, r7
    pBuf++;
 80060b0:	19c9      	adds	r1, r1, r7
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80060b2:	07db      	lsls	r3, r3, #31
 80060b4:	d501      	bpl.n	80060ba <USB_ReadPMA+0x3a>
  {
    RdVal = *pdwVal;
 80060b6:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80060b8:	700b      	strb	r3, [r1, #0]
  }
}
 80060ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080060bc <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060bc:	23af      	movs	r3, #175	@ 0xaf
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	58c3      	ldr	r3, [r0, r3]
{
 80060c2:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00e      	beq.n	80060e6 <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060c8:	22ae      	movs	r2, #174	@ 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060ca:	2580      	movs	r5, #128	@ 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80060cc:	0092      	lsls	r2, r2, #2
 80060ce:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060d0:	00ad      	lsls	r5, r5, #2
 80060d2:	5d60      	ldrb	r0, [r4, r5]
 80060d4:	28ff      	cmp	r0, #255	@ 0xff
 80060d6:	d006      	beq.n	80060e6 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80060d8:	4a04      	ldr	r2, [pc, #16]	@ (80060ec <USBD_CDC_EP0_RxReady+0x30>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	0021      	movs	r1, r4
 80060de:	5ca2      	ldrb	r2, [r4, r2]
 80060e0:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80060e2:	23ff      	movs	r3, #255	@ 0xff
 80060e4:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 80060e6:	2000      	movs	r0, #0
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
 80060ea:	46c0      	nop			@ (mov r8, r8)
 80060ec:	00000201 	.word	0x00000201

080060f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80060f0:	2343      	movs	r3, #67	@ 0x43
 80060f2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
 80060f4:	4800      	ldr	r0, [pc, #0]	@ (80060f8 <USBD_CDC_GetFSCfgDesc+0x8>)
}
 80060f6:	4770      	bx	lr
 80060f8:	20000064 	.word	0x20000064

080060fc <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80060fc:	2343      	movs	r3, #67	@ 0x43
 80060fe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
 8006100:	4800      	ldr	r0, [pc, #0]	@ (8006104 <USBD_CDC_GetHSCfgDesc+0x8>)
}
 8006102:	4770      	bx	lr
 8006104:	200000a8 	.word	0x200000a8

08006108 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006108:	2343      	movs	r3, #67	@ 0x43
 800610a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800610c:	4800      	ldr	r0, [pc, #0]	@ (8006110 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
}
 800610e:	4770      	bx	lr
 8006110:	20000020 	.word	0x20000020

08006114 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006114:	230a      	movs	r3, #10
 8006116:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006118:	4800      	ldr	r0, [pc, #0]	@ (800611c <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 800611a:	4770      	bx	lr
 800611c:	20000124 	.word	0x20000124

08006120 <USBD_CDC_DataOut>:
{
 8006120:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006122:	26ae      	movs	r6, #174	@ 0xae
 8006124:	00b6      	lsls	r6, r6, #2
{
 8006126:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006128:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800612a:	f001 f8a9 	bl	8007280 <USBD_LL_GetRxDataSize>
 800612e:	2383      	movs	r3, #131	@ 0x83
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 8006134:	59a3      	ldr	r3, [r4, r6]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <USBD_CDC_DataOut+0x30>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800613a:	2383      	movs	r3, #131	@ 0x83
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	18e9      	adds	r1, r5, r3
 8006140:	3b08      	subs	r3, #8
 8006142:	58e8      	ldr	r0, [r5, r3]
 8006144:	33b8      	adds	r3, #184	@ 0xb8
 8006146:	58e3      	ldr	r3, [r4, r3]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	4798      	blx	r3
    return USBD_OK;
 800614c:	2000      	movs	r0, #0
}
 800614e:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8006150:	2002      	movs	r0, #2
 8006152:	e7fc      	b.n	800614e <USBD_CDC_DataOut+0x2e>

08006154 <USBD_CDC_DataIn>:
{
 8006154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006156:	23ae      	movs	r3, #174	@ 0xae
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	58c7      	ldr	r7, [r0, r3]
{
 800615c:	0004      	movs	r4, r0
 800615e:	000d      	movs	r5, r1
  if (pdev->pClassData != NULL)
 8006160:	2f00      	cmp	r7, #0
 8006162:	d01d      	beq.n	80061a0 <USBD_CDC_DataIn+0x4c>
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006164:	3308      	adds	r3, #8
 8006166:	58c2      	ldr	r2, [r0, r3]
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006168:	008b      	lsls	r3, r1, #2
 800616a:	185b      	adds	r3, r3, r1
 800616c:	009e      	lsls	r6, r3, #2
 800616e:	1986      	adds	r6, r0, r6
 8006170:	69f0      	ldr	r0, [r6, #28]
 8006172:	2800      	cmp	r0, #0
 8006174:	d006      	beq.n	8006184 <USBD_CDC_DataIn+0x30>
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	18d2      	adds	r2, r2, r3
 800617a:	6a11      	ldr	r1, [r2, #32]
 800617c:	f7fa f85c 	bl	8000238 <__aeabi_uidivmod>
 8006180:	2900      	cmp	r1, #0
 8006182:	d005      	beq.n	8006190 <USBD_CDC_DataIn+0x3c>
      hcdc->TxState = 0U;
 8006184:	2385      	movs	r3, #133	@ 0x85
 8006186:	2200      	movs	r2, #0
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	50fa      	str	r2, [r7, r3]
    return USBD_OK;
 800618c:	2000      	movs	r0, #0
}
 800618e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8006190:	61f1      	str	r1, [r6, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006192:	2300      	movs	r3, #0
 8006194:	2200      	movs	r2, #0
 8006196:	0029      	movs	r1, r5
 8006198:	0020      	movs	r0, r4
 800619a:	f001 f855 	bl	8007248 <USBD_LL_Transmit>
 800619e:	e7f5      	b.n	800618c <USBD_CDC_DataIn+0x38>
    return USBD_FAIL;
 80061a0:	2002      	movs	r0, #2
 80061a2:	e7f4      	b.n	800618e <USBD_CDC_DataIn+0x3a>

080061a4 <USBD_CDC_Setup>:
{
 80061a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061a6:	23ae      	movs	r3, #174	@ 0xae
{
 80061a8:	b083      	sub	sp, #12
  uint16_t status_info = 0U;
 80061aa:	466a      	mov	r2, sp
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	58c6      	ldr	r6, [r0, r3]
  uint8_t ifalt = 0U;
 80061b0:	466b      	mov	r3, sp
{
 80061b2:	0005      	movs	r5, r0
  uint16_t status_info = 0U;
 80061b4:	1d90      	adds	r0, r2, #6
 80061b6:	2260      	movs	r2, #96	@ 0x60
{
 80061b8:	000c      	movs	r4, r1
  uint8_t ifalt = 0U;
 80061ba:	1d59      	adds	r1, r3, #5
 80061bc:	2300      	movs	r3, #0
 80061be:	0017      	movs	r7, r2
 80061c0:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 80061c2:	8003      	strh	r3, [r0, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061c4:	7823      	ldrb	r3, [r4, #0]
 80061c6:	401f      	ands	r7, r3
 80061c8:	421a      	tst	r2, r3
 80061ca:	d015      	beq.n	80061f8 <USBD_CDC_Setup+0x54>
 80061cc:	2f20      	cmp	r7, #32
 80061ce:	d11a      	bne.n	8006206 <USBD_CDC_Setup+0x62>
      if (req->wLength)
 80061d0:	88e2      	ldrh	r2, [r4, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061d2:	7860      	ldrb	r0, [r4, #1]
      if (req->wLength)
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	d01d      	beq.n	8006214 <USBD_CDC_Setup+0x70>
        if (req->bmRequest & 0x80U)
 80061d8:	b25b      	sxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da41      	bge.n	8006262 <USBD_CDC_Setup+0xbe>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80061de:	23af      	movs	r3, #175	@ 0xaf
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	58eb      	ldr	r3, [r5, r3]
 80061e4:	0031      	movs	r1, r6
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80061ea:	0031      	movs	r1, r6
 80061ec:	0028      	movs	r0, r5
 80061ee:	88e2      	ldrh	r2, [r4, #6]
 80061f0:	f000 fd26 	bl	8006c40 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80061f4:	2000      	movs	r0, #0
 80061f6:	e00b      	b.n	8006210 <USBD_CDC_Setup+0x6c>
      switch (req->bRequest)
 80061f8:	7863      	ldrb	r3, [r4, #1]
 80061fa:	2b0a      	cmp	r3, #10
 80061fc:	d026      	beq.n	800624c <USBD_CDC_Setup+0xa8>
 80061fe:	2b0b      	cmp	r3, #11
 8006200:	d01d      	beq.n	800623e <USBD_CDC_Setup+0x9a>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00f      	beq.n	8006226 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8006206:	0028      	movs	r0, r5
 8006208:	0021      	movs	r1, r4
 800620a:	f000 fce7 	bl	8006bdc <USBD_CtlError>
            ret = USBD_FAIL;
 800620e:	2002      	movs	r0, #2
}
 8006210:	b003      	add	sp, #12
 8006212:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006214:	23af      	movs	r3, #175	@ 0xaf
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	58eb      	ldr	r3, [r5, r3]
 800621a:	2200      	movs	r2, #0
 800621c:	0021      	movs	r1, r4
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8006222:	2000      	movs	r0, #0
 8006224:	e7f4      	b.n	8006210 <USBD_CDC_Setup+0x6c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006226:	23a7      	movs	r3, #167	@ 0xa7
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	5ceb      	ldrb	r3, [r5, r3]
 800622c:	2b03      	cmp	r3, #3
 800622e:	d1ea      	bne.n	8006206 <USBD_CDC_Setup+0x62>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006230:	0001      	movs	r1, r0
 8006232:	2202      	movs	r2, #2
 8006234:	0028      	movs	r0, r5
 8006236:	f000 fd03 	bl	8006c40 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800623a:	2000      	movs	r0, #0
 800623c:	e7e8      	b.n	8006210 <USBD_CDC_Setup+0x6c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800623e:	23a7      	movs	r3, #167	@ 0xa7
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	5ceb      	ldrb	r3, [r5, r3]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d1de      	bne.n	8006206 <USBD_CDC_Setup+0x62>
  uint8_t ret = USBD_OK;
 8006248:	2000      	movs	r0, #0
 800624a:	e7e1      	b.n	8006210 <USBD_CDC_Setup+0x6c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624c:	23a7      	movs	r3, #167	@ 0xa7
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	5ceb      	ldrb	r3, [r5, r3]
 8006252:	2b03      	cmp	r3, #3
 8006254:	d1d7      	bne.n	8006206 <USBD_CDC_Setup+0x62>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006256:	2201      	movs	r2, #1
 8006258:	0028      	movs	r0, r5
 800625a:	f000 fcf1 	bl	8006c40 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800625e:	2000      	movs	r0, #0
 8006260:	e7d6      	b.n	8006210 <USBD_CDC_Setup+0x6c>
          hcdc->CmdOpCode = req->bRequest;
 8006262:	2380      	movs	r3, #128	@ 0x80
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	54f0      	strb	r0, [r6, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006268:	4b03      	ldr	r3, [pc, #12]	@ (8006278 <USBD_CDC_Setup+0xd4>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800626a:	0031      	movs	r1, r6
 800626c:	0028      	movs	r0, r5
          hcdc->CmdLength = (uint8_t)req->wLength;
 800626e:	54f2      	strb	r2, [r6, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006270:	f000 fcfc 	bl	8006c6c <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8006274:	2000      	movs	r0, #0
 8006276:	e7cb      	b.n	8006210 <USBD_CDC_Setup+0x6c>
 8006278:	00000201 	.word	0x00000201

0800627c <USBD_CDC_DeInit>:
{
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006280:	2600      	movs	r6, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006282:	2181      	movs	r1, #129	@ 0x81
 8006284:	f000 ff92 	bl	80071ac <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006288:	2101      	movs	r1, #1
 800628a:	0020      	movs	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800628c:	62e6      	str	r6, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800628e:	f000 ff8d 	bl	80071ac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006292:	23b6      	movs	r3, #182	@ 0xb6
  if (pdev->pClassData != NULL)
 8006294:	25ae      	movs	r5, #174	@ 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	50e6      	str	r6, [r4, r3]
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800629a:	2182      	movs	r1, #130	@ 0x82
 800629c:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 800629e:	00ad      	lsls	r5, r5, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80062a0:	f000 ff84 	bl	80071ac <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80062a4:	5963      	ldr	r3, [r4, r5]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80062a6:	6426      	str	r6, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d008      	beq.n	80062be <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80062ac:	23af      	movs	r3, #175	@ 0xaf
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	58e3      	ldr	r3, [r4, r3]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80062b6:	5960      	ldr	r0, [r4, r5]
 80062b8:	f000 ffee 	bl	8007298 <USBD_static_free>
    pdev->pClassData = NULL;
 80062bc:	5166      	str	r6, [r4, r5]
}
 80062be:	2000      	movs	r0, #0
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	46c0      	nop			@ (mov r8, r8)

080062c4 <USBD_CDC_Init>:
{
 80062c4:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062c6:	7c03      	ldrb	r3, [r0, #16]
{
 80062c8:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d13a      	bne.n	8006344 <USBD_CDC_Init+0x80>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062ce:	2380      	movs	r3, #128	@ 0x80
 80062d0:	2202      	movs	r2, #2
 80062d2:	2181      	movs	r1, #129	@ 0x81
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	f000 ff59 	bl	800718c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062da:	2301      	movs	r3, #1
 80062dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062de:	2380      	movs	r3, #128	@ 0x80
 80062e0:	2202      	movs	r2, #2
 80062e2:	2101      	movs	r1, #1
 80062e4:	0020      	movs	r0, r4
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	f000 ff50 	bl	800718c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062ec:	23b6      	movs	r3, #182	@ 0xb6
 80062ee:	2501      	movs	r5, #1
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	50e5      	str	r5, [r4, r3]
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062f4:	3b65      	subs	r3, #101	@ 0x65
 80062f6:	3bff      	subs	r3, #255	@ 0xff
 80062f8:	2203      	movs	r2, #3
 80062fa:	2182      	movs	r1, #130	@ 0x82
 80062fc:	0020      	movs	r0, r4
 80062fe:	f000 ff45 	bl	800718c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006302:	2087      	movs	r0, #135	@ 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006304:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006306:	0080      	lsls	r0, r0, #2
 8006308:	f000 ffc2 	bl	8007290 <USBD_static_malloc>
 800630c:	23ae      	movs	r3, #174	@ 0xae
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	1e05      	subs	r5, r0, #0
 8006312:	50e0      	str	r0, [r4, r3]
  if (pdev->pClassData == NULL)
 8006314:	d02e      	beq.n	8006374 <USBD_CDC_Init+0xb0>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006316:	3304      	adds	r3, #4
 8006318:	58e3      	ldr	r3, [r4, r3]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4798      	blx	r3
    hcdc->TxState = 0U;
 800631e:	2285      	movs	r2, #133	@ 0x85
 8006320:	2300      	movs	r3, #0
 8006322:	0092      	lsls	r2, r2, #2
 8006324:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 8006326:	3204      	adds	r2, #4
 8006328:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800632a:	7c23      	ldrb	r3, [r4, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d117      	bne.n	8006360 <USBD_CDC_Init+0x9c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006330:	2381      	movs	r3, #129	@ 0x81
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	58ea      	ldr	r2, [r5, r3]
 8006336:	2101      	movs	r1, #1
 8006338:	0020      	movs	r0, r4
 800633a:	3b04      	subs	r3, #4
 800633c:	f000 ff92 	bl	8007264 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8006340:	2000      	movs	r0, #0
}
 8006342:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006344:	2340      	movs	r3, #64	@ 0x40
 8006346:	2202      	movs	r2, #2
 8006348:	2181      	movs	r1, #129	@ 0x81
 800634a:	f000 ff1f 	bl	800718c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800634e:	2301      	movs	r3, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006350:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006352:	62e3      	str	r3, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006354:	2101      	movs	r1, #1
 8006356:	0020      	movs	r0, r4
 8006358:	333f      	adds	r3, #63	@ 0x3f
 800635a:	f000 ff17 	bl	800718c <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800635e:	e7c5      	b.n	80062ec <USBD_CDC_Init+0x28>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006360:	2381      	movs	r3, #129	@ 0x81
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	58ea      	ldr	r2, [r5, r3]
 8006366:	3bc5      	subs	r3, #197	@ 0xc5
 8006368:	2101      	movs	r1, #1
 800636a:	0020      	movs	r0, r4
 800636c:	3bff      	subs	r3, #255	@ 0xff
 800636e:	f000 ff79 	bl	8007264 <USBD_LL_PrepareReceive>
 8006372:	e7e5      	b.n	8006340 <USBD_CDC_Init+0x7c>
    ret = 1U;
 8006374:	2001      	movs	r0, #1
 8006376:	e7e4      	b.n	8006342 <USBD_CDC_Init+0x7e>

08006378 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8006378:	2900      	cmp	r1, #0
 800637a:	d004      	beq.n	8006386 <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 800637c:	23af      	movs	r3, #175	@ 0xaf
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 8006382:	2000      	movs	r0, #0
  }

  return ret;
}
 8006384:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006386:	2002      	movs	r0, #2
 8006388:	e7fc      	b.n	8006384 <USBD_CDC_RegisterInterface+0xc>
 800638a:	46c0      	nop			@ (mov r8, r8)

0800638c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800638c:	23ae      	movs	r3, #174	@ 0xae
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8006392:	2082      	movs	r0, #130	@ 0x82
 8006394:	0080      	lsls	r0, r0, #2
 8006396:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8006398:	2184      	movs	r1, #132	@ 0x84
 800639a:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 800639c:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 800639e:	505a      	str	r2, [r3, r1]
}
 80063a0:	4770      	bx	lr
 80063a2:	46c0      	nop			@ (mov r8, r8)

080063a4 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80063a4:	23ae      	movs	r3, #174	@ 0xae
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	58c2      	ldr	r2, [r0, r3]
 80063aa:	3bb4      	subs	r3, #180	@ 0xb4

  return USBD_OK;
}
 80063ac:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80063ae:	50d1      	str	r1, [r2, r3]
}
 80063b0:	4770      	bx	lr
 80063b2:	46c0      	nop			@ (mov r8, r8)

080063b4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063b4:	23ae      	movs	r3, #174	@ 0xae
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	58c2      	ldr	r2, [r0, r3]
{
 80063ba:	b510      	push	{r4, lr}
 80063bc:	0004      	movs	r4, r0

  if (pdev->pClassData != NULL)
 80063be:	2a00      	cmp	r2, #0
 80063c0:	d014      	beq.n	80063ec <USBD_CDC_TransmitPacket+0x38>
  {
    if (hcdc->TxState == 0U)
 80063c2:	3ba4      	subs	r3, #164	@ 0xa4
 80063c4:	58d1      	ldr	r1, [r2, r3]

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80063c6:	2001      	movs	r0, #1
    if (hcdc->TxState == 0U)
 80063c8:	2900      	cmp	r1, #0
 80063ca:	d000      	beq.n	80063ce <USBD_CDC_TransmitPacket+0x1a>
  }
  else
  {
    return USBD_FAIL;
  }
}
 80063cc:	bd10      	pop	{r4, pc}
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063ce:	2182      	movs	r1, #130	@ 0x82
      hcdc->TxState = 1U;
 80063d0:	50d0      	str	r0, [r2, r3]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063d2:	3b04      	subs	r3, #4
 80063d4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063d6:	0089      	lsls	r1, r1, #2
 80063d8:	5852      	ldr	r2, [r2, r1]
 80063da:	3988      	subs	r1, #136	@ 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063dc:	6323      	str	r3, [r4, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063de:	0020      	movs	r0, r4
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	39ff      	subs	r1, #255	@ 0xff
 80063e4:	f000 ff30 	bl	8007248 <USBD_LL_Transmit>
      return USBD_OK;
 80063e8:	2000      	movs	r0, #0
 80063ea:	e7ef      	b.n	80063cc <USBD_CDC_TransmitPacket+0x18>
    return USBD_FAIL;
 80063ec:	2002      	movs	r0, #2
 80063ee:	e7ed      	b.n	80063cc <USBD_CDC_TransmitPacket+0x18>

080063f0 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063f0:	23ae      	movs	r3, #174	@ 0xae
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	58c3      	ldr	r3, [r0, r3]
{
 80063f6:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d011      	beq.n	8006420 <USBD_CDC_ReceivePacket+0x30>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80063fc:	2281      	movs	r2, #129	@ 0x81
 80063fe:	0092      	lsls	r2, r2, #2
 8006400:	589a      	ldr	r2, [r3, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006402:	7c03      	ldrb	r3, [r0, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d106      	bne.n	8006416 <USBD_CDC_ReceivePacket+0x26>
      USBD_LL_PrepareReceive(pdev,
 8006408:	2380      	movs	r3, #128	@ 0x80
 800640a:	2101      	movs	r1, #1
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	f000 ff29 	bl	8007264 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006412:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006414:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8006416:	2340      	movs	r3, #64	@ 0x40
 8006418:	2101      	movs	r1, #1
 800641a:	f000 ff23 	bl	8007264 <USBD_LL_PrepareReceive>
 800641e:	e7f8      	b.n	8006412 <USBD_CDC_ReceivePacket+0x22>
    return USBD_FAIL;
 8006420:	2002      	movs	r0, #2
 8006422:	e7f7      	b.n	8006414 <USBD_CDC_ReceivePacket+0x24>

08006424 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006424:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006426:	2800      	cmp	r0, #0
 8006428:	d014      	beq.n	8006454 <USBD_Init+0x30>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800642a:	23ad      	movs	r3, #173	@ 0xad
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	58c4      	ldr	r4, [r0, r3]
 8006430:	2c00      	cmp	r4, #0
 8006432:	d001      	beq.n	8006438 <USBD_Init+0x14>
  {
    pdev->pClass = NULL;
 8006434:	2400      	movs	r4, #0
 8006436:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006438:	2900      	cmp	r1, #0
 800643a:	d002      	beq.n	8006442 <USBD_Init+0x1e>
  {
    pdev->pDesc = pdesc;
 800643c:	23ac      	movs	r3, #172	@ 0xac
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006442:	23a7      	movs	r3, #167	@ 0xa7
 8006444:	2101      	movs	r1, #1
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 800644a:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800644c:	f000 fe4e 	bl	80070ec <USBD_LL_Init>

  return USBD_OK;
 8006450:	2000      	movs	r0, #0
}
 8006452:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8006454:	2002      	movs	r0, #2
 8006456:	e7fc      	b.n	8006452 <USBD_Init+0x2e>

08006458 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8006458:	2900      	cmp	r1, #0
 800645a:	d004      	beq.n	8006466 <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800645c:	23ad      	movs	r3, #173	@ 0xad
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8006462:	2000      	movs	r0, #0
#endif
    status = USBD_FAIL;
  }

  return status;
}
 8006464:	4770      	bx	lr
    status = USBD_FAIL;
 8006466:	2002      	movs	r0, #2
 8006468:	e7fc      	b.n	8006464 <USBD_RegisterClass+0xc>
 800646a:	46c0      	nop			@ (mov r8, r8)

0800646c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800646c:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800646e:	f000 fe7f 	bl	8007170 <USBD_LL_Start>

  return USBD_OK;
}
 8006472:	2000      	movs	r0, #0
 8006474:	bd10      	pop	{r4, pc}
 8006476:	46c0      	nop			@ (mov r8, r8)

08006478 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006478:	23ad      	movs	r3, #173	@ 0xad
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	58c3      	ldr	r3, [r0, r3]
{
 800647e:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 8006480:	2b00      	cmp	r3, #0
 8006482:	d005      	beq.n	8006490 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4798      	blx	r3
 8006488:	1e43      	subs	r3, r0, #1
 800648a:	4198      	sbcs	r0, r3
 800648c:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 800648e:	bd10      	pop	{r4, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006490:	2002      	movs	r0, #2
 8006492:	e7fc      	b.n	800648e <USBD_SetClassConfig+0x16>

08006494 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006494:	23ad      	movs	r3, #173	@ 0xad
{
 8006496:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	58c3      	ldr	r3, [r0, r3]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	4798      	blx	r3

  return USBD_OK;
}
 80064a0:	2000      	movs	r0, #0
 80064a2:	bd10      	pop	{r4, pc}

080064a4 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064a4:	23aa      	movs	r3, #170	@ 0xaa
 80064a6:	009b      	lsls	r3, r3, #2
{
 80064a8:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064aa:	18c5      	adds	r5, r0, r3
{
 80064ac:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064ae:	0028      	movs	r0, r5
 80064b0:	f000 fb80 	bl	8006bb4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064b4:	23a5      	movs	r3, #165	@ 0xa5
 80064b6:	2201      	movs	r2, #1
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80064bc:	4b11      	ldr	r3, [pc, #68]	@ (8006504 <USBD_LL_SetupStage+0x60>)
 80064be:	5ae2      	ldrh	r2, [r4, r3]
 80064c0:	3b16      	subs	r3, #22
 80064c2:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80064c4:	3310      	adds	r3, #16
 80064c6:	5ce1      	ldrb	r1, [r4, r3]
 80064c8:	231f      	movs	r3, #31
 80064ca:	400b      	ands	r3, r1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d00a      	beq.n	80064e6 <USBD_LL_SetupStage+0x42>
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d012      	beq.n	80064fa <USBD_LL_SetupStage+0x56>
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <USBD_LL_SetupStage+0x4c>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064d8:	237f      	movs	r3, #127	@ 0x7f
 80064da:	0020      	movs	r0, r4
 80064dc:	4399      	bics	r1, r3
 80064de:	f000 fe73 	bl	80071c8 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 80064e2:	2000      	movs	r0, #0
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80064e6:	0029      	movs	r1, r5
 80064e8:	0020      	movs	r0, r4
 80064ea:	f000 fa8f 	bl	8006a0c <USBD_StdItfReq>
      break;
 80064ee:	e7f8      	b.n	80064e2 <USBD_LL_SetupStage+0x3e>
      USBD_StdDevReq(pdev, &pdev->request);
 80064f0:	0029      	movs	r1, r5
 80064f2:	0020      	movs	r0, r4
 80064f4:	f000 f916 	bl	8006724 <USBD_StdDevReq>
      break;
 80064f8:	e7f3      	b.n	80064e2 <USBD_LL_SetupStage+0x3e>
      USBD_StdEPReq(pdev, &pdev->request);
 80064fa:	0029      	movs	r1, r5
 80064fc:	0020      	movs	r0, r4
 80064fe:	f000 fab3 	bl	8006a68 <USBD_StdEPReq>
      break;
 8006502:	e7ee      	b.n	80064e2 <USBD_LL_SetupStage+0x3e>
 8006504:	000002ae 	.word	0x000002ae

08006508 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006508:	b510      	push	{r4, lr}
 800650a:	0013      	movs	r3, r2
 800650c:	0004      	movs	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800650e:	2900      	cmp	r1, #0
 8006510:	d108      	bne.n	8006524 <USBD_LL_DataOutStage+0x1c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006512:	20a5      	movs	r0, #165	@ 0xa5
 8006514:	0080      	lsls	r0, r0, #2
 8006516:	5822      	ldr	r2, [r4, r0]
 8006518:	2a03      	cmp	r2, #3
 800651a:	d013      	beq.n	8006544 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800651c:	2a05      	cmp	r2, #5
 800651e:	d023      	beq.n	8006568 <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006520:	2000      	movs	r0, #0
 8006522:	e00e      	b.n	8006542 <USBD_LL_DataOutStage+0x3a>
  else if ((pdev->pClass->DataOut != NULL) &&
 8006524:	23ad      	movs	r3, #173	@ 0xad
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	58c3      	ldr	r3, [r0, r3]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d007      	beq.n	8006540 <USBD_LL_DataOutStage+0x38>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006530:	22a7      	movs	r2, #167	@ 0xa7
 8006532:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 8006534:	5c82      	ldrb	r2, [r0, r2]
 8006536:	2a03      	cmp	r2, #3
 8006538:	d102      	bne.n	8006540 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 800653a:	4798      	blx	r3
  return USBD_OK;
 800653c:	2000      	movs	r0, #0
 800653e:	e000      	b.n	8006542 <USBD_LL_DataOutStage+0x3a>
    return USBD_FAIL;
 8006540:	2002      	movs	r0, #2
}
 8006542:	bd10      	pop	{r4, pc}
      if (pep->rem_length > pep->maxpacket)
 8006544:	0020      	movs	r0, r4
 8006546:	3055      	adds	r0, #85	@ 0x55
 8006548:	30ff      	adds	r0, #255	@ 0xff
 800654a:	68c1      	ldr	r1, [r0, #12]
 800654c:	6902      	ldr	r2, [r0, #16]
 800654e:	4291      	cmp	r1, r2
 8006550:	d911      	bls.n	8006576 <USBD_LL_DataOutStage+0x6e>
        pep->rem_length -= pep->maxpacket;
 8006552:	1a89      	subs	r1, r1, r2
 8006554:	60c1      	str	r1, [r0, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006556:	428a      	cmp	r2, r1
 8006558:	d81d      	bhi.n	8006596 <USBD_LL_DataOutStage+0x8e>
 800655a:	b292      	uxth	r2, r2
 800655c:	0019      	movs	r1, r3
 800655e:	0020      	movs	r0, r4
 8006560:	f000 fb96 	bl	8006c90 <USBD_CtlContinueRx>
  return USBD_OK;
 8006564:	2000      	movs	r0, #0
 8006566:	e7ec      	b.n	8006542 <USBD_LL_DataOutStage+0x3a>
        pdev->ep0_state = USBD_EP0_IDLE;
 8006568:	5021      	str	r1, [r4, r0]
        USBD_LL_StallEP(pdev, 0U);
 800656a:	2100      	movs	r1, #0
 800656c:	0020      	movs	r0, r4
 800656e:	f000 fe2b 	bl	80071c8 <USBD_LL_StallEP>
  return USBD_OK;
 8006572:	2000      	movs	r0, #0
 8006574:	e7e5      	b.n	8006542 <USBD_LL_DataOutStage+0x3a>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006576:	23ad      	movs	r3, #173	@ 0xad
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	58e3      	ldr	r3, [r4, r3]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <USBD_LL_DataOutStage+0x84>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006582:	22a7      	movs	r2, #167	@ 0xa7
 8006584:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006586:	5ca2      	ldrb	r2, [r4, r2]
 8006588:	2a03      	cmp	r2, #3
 800658a:	d006      	beq.n	800659a <USBD_LL_DataOutStage+0x92>
        USBD_CtlSendStatus(pdev);
 800658c:	0020      	movs	r0, r4
 800658e:	f000 fb87 	bl	8006ca0 <USBD_CtlSendStatus>
  return USBD_OK;
 8006592:	2000      	movs	r0, #0
 8006594:	e7d5      	b.n	8006542 <USBD_LL_DataOutStage+0x3a>
        USBD_CtlContinueRx(pdev, pdata,
 8006596:	b28a      	uxth	r2, r1
 8006598:	e7e0      	b.n	800655c <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 800659a:	0020      	movs	r0, r4
 800659c:	4798      	blx	r3
 800659e:	e7f5      	b.n	800658c <USBD_LL_DataOutStage+0x84>

080065a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	0004      	movs	r4, r0
 80065a4:	0013      	movs	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80065a6:	2900      	cmp	r1, #0
 80065a8:	d111      	bne.n	80065ce <USBD_LL_DataInStage+0x2e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065aa:	22a5      	movs	r2, #165	@ 0xa5
 80065ac:	0092      	lsls	r2, r2, #2
 80065ae:	5882      	ldr	r2, [r0, r2]
 80065b0:	2a02      	cmp	r2, #2
 80065b2:	d01e      	beq.n	80065f2 <USBD_LL_DataInStage+0x52>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80065b4:	2304      	movs	r3, #4
 80065b6:	439a      	bics	r2, r3
 80065b8:	d102      	bne.n	80065c0 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80065ba:	2180      	movs	r1, #128	@ 0x80
 80065bc:	f000 fe04 	bl	80071c8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80065c0:	23a8      	movs	r3, #168	@ 0xa8
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	5ce2      	ldrb	r2, [r4, r3]
 80065c6:	2a01      	cmp	r2, #1
 80065c8:	d010      	beq.n	80065ec <USBD_LL_DataInStage+0x4c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80065ca:	2000      	movs	r0, #0
}
 80065cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80065ce:	23ad      	movs	r3, #173	@ 0xad
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	58c3      	ldr	r3, [r0, r3]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <USBD_LL_DataInStage+0x48>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065da:	22a7      	movs	r2, #167	@ 0xa7
 80065dc:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80065de:	5c82      	ldrb	r2, [r0, r2]
 80065e0:	2a03      	cmp	r2, #3
 80065e2:	d101      	bne.n	80065e8 <USBD_LL_DataInStage+0x48>
    pdev->pClass->DataIn(pdev, epnum);
 80065e4:	4798      	blx	r3
 80065e6:	e7f0      	b.n	80065ca <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 80065e8:	2002      	movs	r0, #2
 80065ea:	e7ef      	b.n	80065cc <USBD_LL_DataInStage+0x2c>
      pdev->dev_test_mode = 0U;
 80065ec:	2200      	movs	r2, #0
 80065ee:	54e2      	strb	r2, [r4, r3]
 80065f0:	e7eb      	b.n	80065ca <USBD_LL_DataInStage+0x2a>
      if (pep->rem_length > pep->maxpacket)
 80065f2:	6a02      	ldr	r2, [r0, #32]
 80065f4:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 80065f6:	42aa      	cmp	r2, r5
 80065f8:	d827      	bhi.n	800664a <USBD_LL_DataInStage+0xaa>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80065fa:	69c7      	ldr	r7, [r0, #28]
 80065fc:	0029      	movs	r1, r5
 80065fe:	0038      	movs	r0, r7
 8006600:	f7f9 fe1a 	bl	8000238 <__aeabi_uidivmod>
 8006604:	1e0e      	subs	r6, r1, #0
 8006606:	d10d      	bne.n	8006624 <USBD_LL_DataInStage+0x84>
 8006608:	42bd      	cmp	r5, r7
 800660a:	d80b      	bhi.n	8006624 <USBD_LL_DataInStage+0x84>
            (pep->total_length < pdev->ep0_data_len))
 800660c:	25a6      	movs	r5, #166	@ 0xa6
 800660e:	00ad      	lsls	r5, r5, #2
            (pep->total_length >= pep->maxpacket) &&
 8006610:	5963      	ldr	r3, [r4, r5]
 8006612:	429f      	cmp	r7, r3
 8006614:	d206      	bcs.n	8006624 <USBD_LL_DataInStage+0x84>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006616:	2200      	movs	r2, #0
 8006618:	2100      	movs	r1, #0
 800661a:	0020      	movs	r0, r4
 800661c:	f000 fb1e 	bl	8006c5c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006620:	5166      	str	r6, [r4, r5]
 8006622:	e018      	b.n	8006656 <USBD_LL_DataInStage+0xb6>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006624:	23ad      	movs	r3, #173	@ 0xad
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	58e3      	ldr	r3, [r4, r3]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d004      	beq.n	800663a <USBD_LL_DataInStage+0x9a>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006630:	22a7      	movs	r2, #167	@ 0xa7
 8006632:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006634:	5ca2      	ldrb	r2, [r4, r2]
 8006636:	2a03      	cmp	r2, #3
 8006638:	d014      	beq.n	8006664 <USBD_LL_DataInStage+0xc4>
          USBD_LL_StallEP(pdev, 0x80U);
 800663a:	2180      	movs	r1, #128	@ 0x80
 800663c:	0020      	movs	r0, r4
 800663e:	f000 fdc3 	bl	80071c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006642:	0020      	movs	r0, r4
 8006644:	f000 fb38 	bl	8006cb8 <USBD_CtlReceiveStatus>
 8006648:	e7ba      	b.n	80065c0 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 800664a:	1b52      	subs	r2, r2, r5
 800664c:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800664e:	0019      	movs	r1, r3
 8006650:	b292      	uxth	r2, r2
 8006652:	f000 fb03 	bl	8006c5c <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006656:	2300      	movs	r3, #0
 8006658:	2200      	movs	r2, #0
 800665a:	2100      	movs	r1, #0
 800665c:	0020      	movs	r0, r4
 800665e:	f000 fe01 	bl	8007264 <USBD_LL_PrepareReceive>
 8006662:	e7ad      	b.n	80065c0 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 8006664:	0020      	movs	r0, r4
 8006666:	4798      	blx	r3
 8006668:	e7e7      	b.n	800663a <USBD_LL_DataInStage+0x9a>
 800666a:	46c0      	nop			@ (mov r8, r8)

0800666c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800666c:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800666e:	2340      	movs	r3, #64	@ 0x40
 8006670:	2200      	movs	r2, #0
 8006672:	2100      	movs	r1, #0
{
 8006674:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006676:	f000 fd89 	bl	800718c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800667a:	23ac      	movs	r3, #172	@ 0xac
 800667c:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800667e:	2640      	movs	r6, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	50e5      	str	r5, [r4, r3]
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006684:	330c      	adds	r3, #12
 8006686:	50e6      	str	r6, [r4, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006688:	3b25      	subs	r3, #37	@ 0x25
 800668a:	2200      	movs	r2, #0
 800668c:	3bff      	subs	r3, #255	@ 0xff
 800668e:	2180      	movs	r1, #128	@ 0x80
 8006690:	0020      	movs	r0, r4
 8006692:	f000 fd7b 	bl	800718c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006696:	23a7      	movs	r3, #167	@ 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 8006698:	22a5      	movs	r2, #165	@ 0xa5
  pdev->dev_state = USBD_STATE_DEFAULT;
 800669a:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800669c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800669e:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066a0:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	0092      	lsls	r2, r2, #2
 80066a6:	50a3      	str	r3, [r4, r2]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 80066a8:	3210      	adds	r2, #16
  pdev->dev_config = 0U;
 80066aa:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80066ac:	50a3      	str	r3, [r4, r2]

  if (pdev->pClassData)
 80066ae:	23ae      	movs	r3, #174	@ 0xae
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	58e3      	ldr	r3, [r4, r3]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d006      	beq.n	80066c6 <USBD_LL_Reset+0x5a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066b8:	23ad      	movs	r3, #173	@ 0xad
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	58e3      	ldr	r3, [r4, r3]
 80066be:	2100      	movs	r1, #0
 80066c0:	0020      	movs	r0, r4
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4798      	blx	r3
  }

  return USBD_OK;
}
 80066c6:	2000      	movs	r0, #0
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	46c0      	nop			@ (mov r8, r8)

080066cc <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80066cc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80066ce:	2000      	movs	r0, #0
 80066d0:	4770      	bx	lr
 80066d2:	46c0      	nop			@ (mov r8, r8)

080066d4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80066d4:	23a7      	movs	r3, #167	@ 0xa7
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	5cc1      	ldrb	r1, [r0, r3]
 80066da:	4a03      	ldr	r2, [pc, #12]	@ (80066e8 <USBD_LL_Suspend+0x14>)
 80066dc:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80066de:	2204      	movs	r2, #4
 80066e0:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 80066e2:	2000      	movs	r0, #0
 80066e4:	4770      	bx	lr
 80066e6:	46c0      	nop			@ (mov r8, r8)
 80066e8:	0000029d 	.word	0x0000029d

080066ec <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066ec:	23a7      	movs	r3, #167	@ 0xa7
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	5cc2      	ldrb	r2, [r0, r3]
 80066f2:	2a04      	cmp	r2, #4
 80066f4:	d102      	bne.n	80066fc <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066f6:	4a02      	ldr	r2, [pc, #8]	@ (8006700 <USBD_LL_Resume+0x14>)
 80066f8:	5c82      	ldrb	r2, [r0, r2]
 80066fa:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 80066fc:	2000      	movs	r0, #0
 80066fe:	4770      	bx	lr
 8006700:	0000029d 	.word	0x0000029d

08006704 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006704:	23a7      	movs	r3, #167	@ 0xa7
{
 8006706:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	5cc3      	ldrb	r3, [r0, r3]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d001      	beq.n	8006714 <USBD_LL_SOF+0x10>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8006710:	2000      	movs	r0, #0
 8006712:	bd10      	pop	{r4, pc}
    if (pdev->pClass->SOF != NULL)
 8006714:	23ad      	movs	r3, #173	@ 0xad
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	58c3      	ldr	r3, [r0, r3]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f7      	beq.n	8006710 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 8006720:	4798      	blx	r3
 8006722:	e7f5      	b.n	8006710 <USBD_LL_SOF+0xc>

08006724 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006724:	2360      	movs	r3, #96	@ 0x60
 8006726:	780a      	ldrb	r2, [r1, #0]
 8006728:	b570      	push	{r4, r5, r6, lr}
 800672a:	4013      	ands	r3, r2
 800672c:	000d      	movs	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800672e:	0019      	movs	r1, r3
 8006730:	22c0      	movs	r2, #192	@ 0xc0
 8006732:	3920      	subs	r1, #32
{
 8006734:	0004      	movs	r4, r0
 8006736:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006738:	4211      	tst	r1, r2
 800673a:	d00c      	beq.n	8006756 <USBD_StdDevReq+0x32>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d011      	beq.n	8006764 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8006740:	2180      	movs	r1, #128	@ 0x80
 8006742:	0020      	movs	r0, r4
 8006744:	f000 fd40 	bl	80071c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006748:	2100      	movs	r1, #0
 800674a:	0020      	movs	r0, r4
 800674c:	f000 fd3c 	bl	80071c8 <USBD_LL_StallEP>
}
 8006750:	2000      	movs	r0, #0
 8006752:	b002      	add	sp, #8
 8006754:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8006756:	23ad      	movs	r3, #173	@ 0xad
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	58c3      	ldr	r3, [r0, r3]
 800675c:	0029      	movs	r1, r5
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4798      	blx	r3
      break;
 8006762:	e7f5      	b.n	8006750 <USBD_StdDevReq+0x2c>
      switch (req->bRequest)
 8006764:	786b      	ldrb	r3, [r5, #1]
 8006766:	2b09      	cmp	r3, #9
 8006768:	d8ea      	bhi.n	8006740 <USBD_StdDevReq+0x1c>
 800676a:	4aa3      	ldr	r2, [pc, #652]	@ (80069f8 <USBD_StdDevReq+0x2d4>)
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	58d3      	ldr	r3, [r2, r3]
 8006770:	469f      	mov	pc, r3
  cfgidx = (uint8_t)(req->wValue);
 8006772:	78ab      	ldrb	r3, [r5, #2]
 8006774:	4da1      	ldr	r5, [pc, #644]	@ (80069fc <USBD_StdDevReq+0x2d8>)
 8006776:	702b      	strb	r3, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006778:	2b01      	cmp	r3, #1
 800677a:	d8e1      	bhi.n	8006740 <USBD_StdDevReq+0x1c>
    switch (pdev->dev_state)
 800677c:	21a7      	movs	r1, #167	@ 0xa7
 800677e:	0089      	lsls	r1, r1, #2
 8006780:	5c42      	ldrb	r2, [r0, r1]
 8006782:	2a02      	cmp	r2, #2
 8006784:	d100      	bne.n	8006788 <USBD_StdDevReq+0x64>
 8006786:	e119      	b.n	80069bc <USBD_StdDevReq+0x298>
 8006788:	2a03      	cmp	r2, #3
 800678a:	d100      	bne.n	800678e <USBD_StdDevReq+0x6a>
 800678c:	e104      	b.n	8006998 <USBD_StdDevReq+0x274>
  USBD_LL_StallEP(pdev, 0x80U);
 800678e:	2180      	movs	r1, #128	@ 0x80
 8006790:	f000 fd1a 	bl	80071c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006794:	2100      	movs	r1, #0
 8006796:	0020      	movs	r0, r4
 8006798:	f000 fd16 	bl	80071c8 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 800679c:	0020      	movs	r0, r4
 800679e:	7829      	ldrb	r1, [r5, #0]
 80067a0:	f7ff fe78 	bl	8006494 <USBD_ClrClassConfig>
        break;
 80067a4:	e7d4      	b.n	8006750 <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 80067a6:	23a7      	movs	r3, #167	@ 0xa7
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	5cc3      	ldrb	r3, [r0, r3]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d8c6      	bhi.n	8006740 <USBD_StdDevReq+0x1c>
      if (req->wLength != 0x2U)
 80067b2:	88eb      	ldrh	r3, [r5, #6]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d1c3      	bne.n	8006740 <USBD_StdDevReq+0x1c>
      if (pdev->dev_remote_wakeup)
 80067b8:	23a9      	movs	r3, #169	@ 0xa9
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	58c3      	ldr	r3, [r0, r3]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80067be:	0001      	movs	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067c0:	425a      	negs	r2, r3
 80067c2:	4153      	adcs	r3, r2
 80067c4:	2201      	movs	r2, #1
 80067c6:	425b      	negs	r3, r3
 80067c8:	4393      	bics	r3, r2
 80067ca:	3303      	adds	r3, #3
 80067cc:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80067ce:	310c      	adds	r1, #12
 80067d0:	3201      	adds	r2, #1
 80067d2:	f000 fa35 	bl	8006c40 <USBD_CtlSendData>
      break;
 80067d6:	e7bb      	b.n	8006750 <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 80067d8:	23a7      	movs	r3, #167	@ 0xa7
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	5cc3      	ldrb	r3, [r0, r3]
 80067de:	3b01      	subs	r3, #1
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d8ad      	bhi.n	8006740 <USBD_StdDevReq+0x1c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067e4:	886b      	ldrh	r3, [r5, #2]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d1b2      	bne.n	8006750 <USBD_StdDevReq+0x2c>
        pdev->dev_remote_wakeup = 0U;
 80067ea:	23a9      	movs	r3, #169	@ 0xa9
 80067ec:	2200      	movs	r2, #0
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	50c2      	str	r2, [r0, r3]
        USBD_CtlSendStatus(pdev);
 80067f2:	0020      	movs	r0, r4
 80067f4:	f000 fa54 	bl	8006ca0 <USBD_CtlSendStatus>
 80067f8:	e7aa      	b.n	8006750 <USBD_StdDevReq+0x2c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067fa:	886b      	ldrh	r3, [r5, #2]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d1a7      	bne.n	8006750 <USBD_StdDevReq+0x2c>
    pdev->dev_remote_wakeup = 1U;
 8006800:	22a9      	movs	r2, #169	@ 0xa9
 8006802:	0092      	lsls	r2, r2, #2
 8006804:	5083      	str	r3, [r0, r2]
    USBD_CtlSendStatus(pdev);
 8006806:	f000 fa4b 	bl	8006ca0 <USBD_CtlSendStatus>
 800680a:	e7a1      	b.n	8006750 <USBD_StdDevReq+0x2c>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800680c:	88ab      	ldrh	r3, [r5, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d000      	beq.n	8006814 <USBD_StdDevReq+0xf0>
 8006812:	e795      	b.n	8006740 <USBD_StdDevReq+0x1c>
 8006814:	88eb      	ldrh	r3, [r5, #6]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d000      	beq.n	800681c <USBD_StdDevReq+0xf8>
 800681a:	e791      	b.n	8006740 <USBD_StdDevReq+0x1c>
 800681c:	886d      	ldrh	r5, [r5, #2]
 800681e:	2d7f      	cmp	r5, #127	@ 0x7f
 8006820:	d900      	bls.n	8006824 <USBD_StdDevReq+0x100>
 8006822:	e78d      	b.n	8006740 <USBD_StdDevReq+0x1c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006824:	26a7      	movs	r6, #167	@ 0xa7
 8006826:	00b6      	lsls	r6, r6, #2
 8006828:	5d83      	ldrb	r3, [r0, r6]
 800682a:	2b03      	cmp	r3, #3
 800682c:	d100      	bne.n	8006830 <USBD_StdDevReq+0x10c>
 800682e:	e787      	b.n	8006740 <USBD_StdDevReq+0x1c>
      pdev->dev_address = dev_addr;
 8006830:	4b73      	ldr	r3, [pc, #460]	@ (8006a00 <USBD_StdDevReq+0x2dc>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006832:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8006834:	54c1      	strb	r1, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006836:	f000 fcf9 	bl	800722c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800683a:	0020      	movs	r0, r4
 800683c:	f000 fa30 	bl	8006ca0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006840:	2d00      	cmp	r5, #0
 8006842:	d100      	bne.n	8006846 <USBD_StdDevReq+0x122>
 8006844:	e0d4      	b.n	80069f0 <USBD_StdDevReq+0x2cc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006846:	2302      	movs	r3, #2
 8006848:	55a3      	strb	r3, [r4, r6]
 800684a:	e781      	b.n	8006750 <USBD_StdDevReq+0x2c>
  uint16_t len = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	466a      	mov	r2, sp
 8006850:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 8006852:	886a      	ldrh	r2, [r5, #2]
 8006854:	0a13      	lsrs	r3, r2, #8
 8006856:	2b07      	cmp	r3, #7
 8006858:	d900      	bls.n	800685c <USBD_StdDevReq+0x138>
 800685a:	e771      	b.n	8006740 <USBD_StdDevReq+0x1c>
 800685c:	4969      	ldr	r1, [pc, #420]	@ (8006a04 <USBD_StdDevReq+0x2e0>)
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	58cb      	ldr	r3, [r1, r3]
 8006862:	469f      	mov	pc, r3
  if (req->wLength != 1U)
 8006864:	88eb      	ldrh	r3, [r5, #6]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d000      	beq.n	800686c <USBD_StdDevReq+0x148>
 800686a:	e769      	b.n	8006740 <USBD_StdDevReq+0x1c>
    switch (pdev->dev_state)
 800686c:	23a7      	movs	r3, #167	@ 0xa7
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	5cc3      	ldrb	r3, [r0, r3]
 8006872:	2b02      	cmp	r3, #2
 8006874:	d900      	bls.n	8006878 <USBD_StdDevReq+0x154>
 8006876:	e087      	b.n	8006988 <USBD_StdDevReq+0x264>
 8006878:	2b00      	cmp	r3, #0
 800687a:	d100      	bne.n	800687e <USBD_StdDevReq+0x15a>
 800687c:	e760      	b.n	8006740 <USBD_StdDevReq+0x1c>
        pdev->dev_default_config = 0U;
 800687e:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006880:	0001      	movs	r1, r0
 8006882:	2201      	movs	r2, #1
        pdev->dev_default_config = 0U;
 8006884:	6083      	str	r3, [r0, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006886:	3108      	adds	r1, #8
 8006888:	f000 f9da 	bl	8006c40 <USBD_CtlSendData>
        break;
 800688c:	e760      	b.n	8006750 <USBD_StdDevReq+0x2c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800688e:	7c03      	ldrb	r3, [r0, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d000      	beq.n	8006896 <USBD_StdDevReq+0x172>
 8006894:	e754      	b.n	8006740 <USBD_StdDevReq+0x1c>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006896:	23ad      	movs	r3, #173	@ 0xad
 8006898:	466a      	mov	r2, sp
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	58c3      	ldr	r3, [r0, r3]
 800689e:	1d90      	adds	r0, r2, #6
 80068a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80068a4:	2307      	movs	r3, #7
 80068a6:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 80068a8:	466b      	mov	r3, sp
 80068aa:	88da      	ldrh	r2, [r3, #6]
 80068ac:	88eb      	ldrh	r3, [r5, #6]
 80068ae:	2a00      	cmp	r2, #0
 80068b0:	d00d      	beq.n	80068ce <USBD_StdDevReq+0x1aa>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d09d      	beq.n	80067f2 <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 80068b6:	1c11      	adds	r1, r2, #0
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d900      	bls.n	80068be <USBD_StdDevReq+0x19a>
 80068bc:	1c19      	adds	r1, r3, #0
 80068be:	466b      	mov	r3, sp
 80068c0:	b28a      	uxth	r2, r1
 80068c2:	80d9      	strh	r1, [r3, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068c4:	0001      	movs	r1, r0
 80068c6:	0020      	movs	r0, r4
 80068c8:	f000 f9ba 	bl	8006c40 <USBD_CtlSendData>
 80068cc:	88eb      	ldrh	r3, [r5, #6]
    if (req->wLength == 0U)
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d000      	beq.n	80068d4 <USBD_StdDevReq+0x1b0>
 80068d2:	e73d      	b.n	8006750 <USBD_StdDevReq+0x2c>
 80068d4:	e78d      	b.n	80067f2 <USBD_StdDevReq+0xce>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d6:	7c03      	ldrb	r3, [r0, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d000      	beq.n	80068de <USBD_StdDevReq+0x1ba>
 80068dc:	e730      	b.n	8006740 <USBD_StdDevReq+0x1c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80068de:	23ad      	movs	r3, #173	@ 0xad
 80068e0:	466a      	mov	r2, sp
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	58c3      	ldr	r3, [r0, r3]
 80068e6:	1d90      	adds	r0, r2, #6
 80068e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ea:	4798      	blx	r3
  if (err != 0U)
 80068ec:	e7dc      	b.n	80068a8 <USBD_StdDevReq+0x184>
      switch ((uint8_t)(req->wValue))
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	2a05      	cmp	r2, #5
 80068f2:	d900      	bls.n	80068f6 <USBD_StdDevReq+0x1d2>
 80068f4:	e724      	b.n	8006740 <USBD_StdDevReq+0x1c>
 80068f6:	4b44      	ldr	r3, [pc, #272]	@ (8006a08 <USBD_StdDevReq+0x2e4>)
 80068f8:	0092      	lsls	r2, r2, #2
 80068fa:	589b      	ldr	r3, [r3, r2]
 80068fc:	469f      	mov	pc, r3
      pdev->pClass->Setup(pdev, req);
 80068fe:	23ad      	movs	r3, #173	@ 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006900:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	58c3      	ldr	r3, [r0, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006906:	2a00      	cmp	r2, #0
 8006908:	d166      	bne.n	80069d8 <USBD_StdDevReq+0x2b4>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800690a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800690c:	466a      	mov	r2, sp
 800690e:	1d90      	adds	r0, r2, #6
 8006910:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006912:	2302      	movs	r3, #2
 8006914:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006916:	e7c7      	b.n	80068a8 <USBD_StdDevReq+0x184>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006918:	23ac      	movs	r3, #172	@ 0xac
 800691a:	466a      	mov	r2, sp
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	58e3      	ldr	r3, [r4, r3]
 8006920:	1d91      	adds	r1, r2, #6
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	7c00      	ldrb	r0, [r0, #16]
 8006926:	4798      	blx	r3
  if (err != 0U)
 8006928:	e7be      	b.n	80068a8 <USBD_StdDevReq+0x184>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800692a:	23ac      	movs	r3, #172	@ 0xac
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	58c3      	ldr	r3, [r0, r3]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d100      	bne.n	8006938 <USBD_StdDevReq+0x214>
 8006936:	e703      	b.n	8006740 <USBD_StdDevReq+0x1c>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006938:	466a      	mov	r2, sp
 800693a:	7c20      	ldrb	r0, [r4, #16]
 800693c:	1d91      	adds	r1, r2, #6
 800693e:	4798      	blx	r3
  if (err != 0U)
 8006940:	e7b2      	b.n	80068a8 <USBD_StdDevReq+0x184>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006942:	23ac      	movs	r3, #172	@ 0xac
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	58c3      	ldr	r3, [r0, r3]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f4      	bne.n	8006938 <USBD_StdDevReq+0x214>
 800694e:	e6f7      	b.n	8006740 <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006950:	23ac      	movs	r3, #172	@ 0xac
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	58c3      	ldr	r3, [r0, r3]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1ed      	bne.n	8006938 <USBD_StdDevReq+0x214>
 800695c:	e6f0      	b.n	8006740 <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800695e:	23ac      	movs	r3, #172	@ 0xac
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	58c3      	ldr	r3, [r0, r3]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e6      	bne.n	8006938 <USBD_StdDevReq+0x214>
 800696a:	e6e9      	b.n	8006740 <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800696c:	23ac      	movs	r3, #172	@ 0xac
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	58c3      	ldr	r3, [r0, r3]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1df      	bne.n	8006938 <USBD_StdDevReq+0x214>
 8006978:	e6e2      	b.n	8006740 <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800697a:	23ac      	movs	r3, #172	@ 0xac
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	58c3      	ldr	r3, [r0, r3]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1d8      	bne.n	8006938 <USBD_StdDevReq+0x214>
 8006986:	e6db      	b.n	8006740 <USBD_StdDevReq+0x1c>
    switch (pdev->dev_state)
 8006988:	2b03      	cmp	r3, #3
 800698a:	d000      	beq.n	800698e <USBD_StdDevReq+0x26a>
 800698c:	e6d8      	b.n	8006740 <USBD_StdDevReq+0x1c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800698e:	2201      	movs	r2, #1
 8006990:	1d01      	adds	r1, r0, #4
 8006992:	f000 f955 	bl	8006c40 <USBD_CtlSendData>
        break;
 8006996:	e6db      	b.n	8006750 <USBD_StdDevReq+0x2c>
        if (cfgidx == 0U)
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01f      	beq.n	80069dc <USBD_StdDevReq+0x2b8>
        else if (cfgidx != pdev->dev_config)
 800699c:	6841      	ldr	r1, [r0, #4]
 800699e:	2901      	cmp	r1, #1
 80069a0:	d100      	bne.n	80069a4 <USBD_StdDevReq+0x280>
 80069a2:	e726      	b.n	80067f2 <USBD_StdDevReq+0xce>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069a4:	b2c9      	uxtb	r1, r1
 80069a6:	f7ff fd75 	bl	8006494 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80069aa:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069ac:	0020      	movs	r0, r4
          pdev->dev_config = cfgidx;
 80069ae:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069b0:	f7ff fd62 	bl	8006478 <USBD_SetClassConfig>
 80069b4:	2802      	cmp	r0, #2
 80069b6:	d000      	beq.n	80069ba <USBD_StdDevReq+0x296>
 80069b8:	e71b      	b.n	80067f2 <USBD_StdDevReq+0xce>
 80069ba:	e6c1      	b.n	8006740 <USBD_StdDevReq+0x1c>
        if (cfgidx)
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d100      	bne.n	80069c2 <USBD_StdDevReq+0x29e>
 80069c0:	e717      	b.n	80067f2 <USBD_StdDevReq+0xce>
          pdev->dev_config = cfgidx;
 80069c2:	2301      	movs	r3, #1
 80069c4:	6043      	str	r3, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069c6:	3302      	adds	r3, #2
 80069c8:	5443      	strb	r3, [r0, r1]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069ca:	2101      	movs	r1, #1
 80069cc:	f7ff fd54 	bl	8006478 <USBD_SetClassConfig>
 80069d0:	2802      	cmp	r0, #2
 80069d2:	d000      	beq.n	80069d6 <USBD_StdDevReq+0x2b2>
 80069d4:	e70d      	b.n	80067f2 <USBD_StdDevReq+0xce>
 80069d6:	e6b3      	b.n	8006740 <USBD_StdDevReq+0x1c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80069d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069da:	e797      	b.n	800690c <USBD_StdDevReq+0x1e8>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069dc:	2202      	movs	r2, #2
 80069de:	5442      	strb	r2, [r0, r1]
          USBD_ClrClassConfig(pdev, cfgidx);
 80069e0:	2100      	movs	r1, #0
          pdev->dev_config = cfgidx;
 80069e2:	6043      	str	r3, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80069e4:	f7ff fd56 	bl	8006494 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80069e8:	0020      	movs	r0, r4
 80069ea:	f000 f959 	bl	8006ca0 <USBD_CtlSendStatus>
 80069ee:	e6af      	b.n	8006750 <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069f0:	2301      	movs	r3, #1
 80069f2:	55a3      	strb	r3, [r4, r6]
 80069f4:	e6ac      	b.n	8006750 <USBD_StdDevReq+0x2c>
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	080089e0 	.word	0x080089e0
 80069fc:	20000440 	.word	0x20000440
 8006a00:	0000029e 	.word	0x0000029e
 8006a04:	08008a08 	.word	0x08008a08
 8006a08:	08008a28 	.word	0x08008a28

08006a0c <USBD_StdItfReq>:
{
 8006a0c:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a0e:	780a      	ldrb	r2, [r1, #0]
{
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	4013      	ands	r3, r2
 8006a14:	0004      	movs	r4, r0
 8006a16:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a18:	0652      	lsls	r2, r2, #25
 8006a1a:	d50b      	bpl.n	8006a34 <USBD_StdItfReq+0x28>
 8006a1c:	2b40      	cmp	r3, #64	@ 0x40
 8006a1e:	d009      	beq.n	8006a34 <USBD_StdItfReq+0x28>
  USBD_LL_StallEP(pdev, 0x80U);
 8006a20:	2180      	movs	r1, #128	@ 0x80
 8006a22:	0020      	movs	r0, r4
 8006a24:	f000 fbd0 	bl	80071c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006a28:	2100      	movs	r1, #0
 8006a2a:	0020      	movs	r0, r4
 8006a2c:	f000 fbcc 	bl	80071c8 <USBD_LL_StallEP>
}
 8006a30:	2000      	movs	r0, #0
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8006a34:	23a7      	movs	r3, #167	@ 0xa7
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	5ce3      	ldrb	r3, [r4, r3]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d8ef      	bhi.n	8006a20 <USBD_StdItfReq+0x14>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a40:	792b      	ldrb	r3, [r5, #4]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d8ec      	bhi.n	8006a20 <USBD_StdItfReq+0x14>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a46:	23ad      	movs	r3, #173	@ 0xad
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	58e3      	ldr	r3, [r4, r3]
 8006a4c:	0029      	movs	r1, r5
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	0020      	movs	r0, r4
 8006a52:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a54:	88eb      	ldrh	r3, [r5, #6]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1ea      	bne.n	8006a30 <USBD_StdItfReq+0x24>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d1e8      	bne.n	8006a30 <USBD_StdItfReq+0x24>
              USBD_CtlSendStatus(pdev);
 8006a5e:	0020      	movs	r0, r4
 8006a60:	f000 f91e 	bl	8006ca0 <USBD_CtlSendStatus>
 8006a64:	e7e4      	b.n	8006a30 <USBD_StdItfReq+0x24>
 8006a66:	46c0      	nop			@ (mov r8, r8)

08006a68 <USBD_StdEPReq>:
{
 8006a68:	2360      	movs	r3, #96	@ 0x60
 8006a6a:	780a      	ldrb	r2, [r1, #0]
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4013      	ands	r3, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a70:	001c      	movs	r4, r3
 8006a72:	22c0      	movs	r2, #192	@ 0xc0
 8006a74:	3c20      	subs	r4, #32
{
 8006a76:	0005      	movs	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8006a78:	8888      	ldrh	r0, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a7a:	4214      	tst	r4, r2
 8006a7c:	d00b      	beq.n	8006a96 <USBD_StdEPReq+0x2e>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d010      	beq.n	8006aa4 <USBD_StdEPReq+0x3c>
  USBD_LL_StallEP(pdev, 0x80U);
 8006a82:	2180      	movs	r1, #128	@ 0x80
 8006a84:	0028      	movs	r0, r5
 8006a86:	f000 fb9f 	bl	80071c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	0028      	movs	r0, r5
 8006a8e:	f000 fb9b 	bl	80071c8 <USBD_LL_StallEP>
}
 8006a92:	2000      	movs	r0, #0
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8006a96:	23ad      	movs	r3, #173	@ 0xad
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	58eb      	ldr	r3, [r5, r3]
 8006a9c:	0028      	movs	r0, r5
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4798      	blx	r3
      break;
 8006aa2:	e7f6      	b.n	8006a92 <USBD_StdEPReq+0x2a>
      switch (req->bRequest)
 8006aa4:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8006aa6:	b2c2      	uxtb	r2, r0
      switch (req->bRequest)
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d043      	beq.n	8006b34 <USBD_StdEPReq+0xcc>
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	d02d      	beq.n	8006b0c <USBD_StdEPReq+0xa4>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e6      	bne.n	8006a82 <USBD_StdEPReq+0x1a>
          switch (pdev->dev_state)
 8006ab4:	23a7      	movs	r3, #167	@ 0xa7
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	5ceb      	ldrb	r3, [r5, r3]
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d056      	beq.n	8006b6c <USBD_StdEPReq+0x104>
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d1df      	bne.n	8006a82 <USBD_StdEPReq+0x1a>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ac2:	210f      	movs	r1, #15
 8006ac4:	4011      	ands	r1, r2
 8006ac6:	008b      	lsls	r3, r1, #2
 8006ac8:	185b      	adds	r3, r3, r1
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	18eb      	adds	r3, r5, r3
              if ((ep_addr & 0x80U) == 0x80U)
 8006ace:	0600      	lsls	r0, r0, #24
 8006ad0:	d45d      	bmi.n	8006b8e <USBD_StdEPReq+0x126>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ad2:	3359      	adds	r3, #89	@ 0x59
 8006ad4:	33ff      	adds	r3, #255	@ 0xff
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0d2      	beq.n	8006a82 <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006adc:	237f      	movs	r3, #127	@ 0x7f
 8006ade:	4013      	ands	r3, r2
 8006ae0:	009c      	lsls	r4, r3, #2
 8006ae2:	18e4      	adds	r4, r4, r3
 8006ae4:	00a4      	lsls	r4, r4, #2
 8006ae6:	3455      	adds	r4, #85	@ 0x55
 8006ae8:	34ff      	adds	r4, #255	@ 0xff
 8006aea:	192c      	adds	r4, r5, r4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d05a      	beq.n	8006ba6 <USBD_StdEPReq+0x13e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006af0:	0011      	movs	r1, r2
 8006af2:	0028      	movs	r0, r5
 8006af4:	f000 fb84 	bl	8007200 <USBD_LL_IsStallEP>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d054      	beq.n	8006ba6 <USBD_StdEPReq+0x13e>
 8006afc:	2301      	movs	r3, #1
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006afe:	2202      	movs	r2, #2
 8006b00:	0021      	movs	r1, r4
 8006b02:	0028      	movs	r0, r5
                pep->status = 0x0000U;
 8006b04:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b06:	f000 f89b 	bl	8006c40 <USBD_CtlSendData>
              break;
 8006b0a:	e7c2      	b.n	8006a92 <USBD_StdEPReq+0x2a>
          switch (pdev->dev_state)
 8006b0c:	23a7      	movs	r3, #167	@ 0xa7
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	5ceb      	ldrb	r3, [r5, r3]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d01e      	beq.n	8006b54 <USBD_StdEPReq+0xec>
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d1b3      	bne.n	8006a82 <USBD_StdEPReq+0x1a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b1a:	884b      	ldrh	r3, [r1, #2]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d115      	bne.n	8006b4c <USBD_StdEPReq+0xe4>
                if ((ep_addr != 0x00U) &&
 8006b20:	0653      	lsls	r3, r2, #25
 8006b22:	d013      	beq.n	8006b4c <USBD_StdEPReq+0xe4>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b24:	88cb      	ldrh	r3, [r1, #6]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d110      	bne.n	8006b4c <USBD_StdEPReq+0xe4>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b2a:	0011      	movs	r1, r2
 8006b2c:	0028      	movs	r0, r5
 8006b2e:	f000 fb4b 	bl	80071c8 <USBD_LL_StallEP>
 8006b32:	e00b      	b.n	8006b4c <USBD_StdEPReq+0xe4>
          switch (pdev->dev_state)
 8006b34:	23a7      	movs	r3, #167	@ 0xa7
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	5ceb      	ldrb	r3, [r5, r3]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d00a      	beq.n	8006b54 <USBD_StdEPReq+0xec>
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d19f      	bne.n	8006a82 <USBD_StdEPReq+0x1a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b42:	884b      	ldrh	r3, [r1, #2]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1a4      	bne.n	8006a92 <USBD_StdEPReq+0x2a>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b48:	0653      	lsls	r3, r2, #25
 8006b4a:	d12e      	bne.n	8006baa <USBD_StdEPReq+0x142>
              USBD_CtlSendStatus(pdev);
 8006b4c:	0028      	movs	r0, r5
 8006b4e:	f000 f8a7 	bl	8006ca0 <USBD_CtlSendStatus>
              break;
 8006b52:	e79e      	b.n	8006a92 <USBD_StdEPReq+0x2a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b54:	0653      	lsls	r3, r2, #25
 8006b56:	d100      	bne.n	8006b5a <USBD_StdEPReq+0xf2>
 8006b58:	e793      	b.n	8006a82 <USBD_StdEPReq+0x1a>
                USBD_LL_StallEP(pdev, ep_addr);
 8006b5a:	0011      	movs	r1, r2
 8006b5c:	0028      	movs	r0, r5
 8006b5e:	f000 fb33 	bl	80071c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b62:	2180      	movs	r1, #128	@ 0x80
 8006b64:	0028      	movs	r0, r5
 8006b66:	f000 fb2f 	bl	80071c8 <USBD_LL_StallEP>
 8006b6a:	e792      	b.n	8006a92 <USBD_StdEPReq+0x2a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b6c:	0652      	lsls	r2, r2, #25
 8006b6e:	d000      	beq.n	8006b72 <USBD_StdEPReq+0x10a>
 8006b70:	e787      	b.n	8006a82 <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b72:	0029      	movs	r1, r5
 8006b74:	3155      	adds	r1, #85	@ 0x55
 8006b76:	31ff      	adds	r1, #255	@ 0xff
 8006b78:	0600      	lsls	r0, r0, #24
 8006b7a:	d501      	bpl.n	8006b80 <USBD_StdEPReq+0x118>
 8006b7c:	3941      	subs	r1, #65	@ 0x41
 8006b7e:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 8006b80:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b82:	2202      	movs	r2, #2
 8006b84:	0028      	movs	r0, r5
              pep->status = 0x0000U;
 8006b86:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b88:	f000 f85a 	bl	8006c40 <USBD_CtlSendData>
              break;
 8006b8c:	e781      	b.n	8006a92 <USBD_StdEPReq+0x2a>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d100      	bne.n	8006b96 <USBD_StdEPReq+0x12e>
 8006b94:	e775      	b.n	8006a82 <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b96:	237f      	movs	r3, #127	@ 0x7f
 8006b98:	4013      	ands	r3, r2
 8006b9a:	1c59      	adds	r1, r3, #1
 8006b9c:	008c      	lsls	r4, r1, #2
 8006b9e:	1864      	adds	r4, r4, r1
 8006ba0:	00a4      	lsls	r4, r4, #2
 8006ba2:	192c      	adds	r4, r5, r4
 8006ba4:	e7a2      	b.n	8006aec <USBD_StdEPReq+0x84>
{
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	e7a9      	b.n	8006afe <USBD_StdEPReq+0x96>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006baa:	0011      	movs	r1, r2
 8006bac:	0028      	movs	r0, r5
 8006bae:	f000 fb19 	bl	80071e4 <USBD_LL_ClearStallEP>
 8006bb2:	e7cb      	b.n	8006b4c <USBD_StdEPReq+0xe4>

08006bb4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006bb4:	780b      	ldrb	r3, [r1, #0]
 8006bb6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006bb8:	784b      	ldrb	r3, [r1, #1]
 8006bba:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006bbc:	78cb      	ldrb	r3, [r1, #3]
 8006bbe:	788a      	ldrb	r2, [r1, #2]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006bc6:	794b      	ldrb	r3, [r1, #5]
 8006bc8:	790a      	ldrb	r2, [r1, #4]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006bd0:	79cb      	ldrb	r3, [r1, #7]
 8006bd2:	798a      	ldrb	r2, [r1, #6]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	80c3      	strh	r3, [r0, #6]
}
 8006bda:	4770      	bx	lr

08006bdc <USBD_CtlError>:
{
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006be0:	2180      	movs	r1, #128	@ 0x80
 8006be2:	f000 faf1 	bl	80071c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006be6:	2100      	movs	r1, #0
 8006be8:	0020      	movs	r0, r4
 8006bea:	f000 faed 	bl	80071c8 <USBD_LL_StallEP>
}
 8006bee:	bd10      	pop	{r4, pc}

08006bf0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	0004      	movs	r4, r0
 8006bf4:	000d      	movs	r5, r1
 8006bf6:	0016      	movs	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d01d      	beq.n	8006c38 <USBD_GetString+0x48>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8006bfc:	7803      	ldrb	r3, [r0, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d01b      	beq.n	8006c3a <USBD_GetString+0x4a>
 8006c02:	3001      	adds	r0, #1
 8006c04:	f7f9 fa80 	bl	8000108 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c08:	3001      	adds	r0, #1
 8006c0a:	b2c3      	uxtb	r3, r0
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c14:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c16:	702a      	strb	r2, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c18:	706b      	strb	r3, [r5, #1]
    while (*desc != '\0')
 8006c1a:	7820      	ldrb	r0, [r4, #0]
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d00b      	beq.n	8006c38 <USBD_GetString+0x48>
      unicode[idx++] =  0U;
 8006c20:	2100      	movs	r1, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c22:	3b01      	subs	r3, #1
      unicode[idx++] = *desc++;
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	54e8      	strb	r0, [r5, r3]
 8006c2a:	3401      	adds	r4, #1
      unicode[idx++] =  0U;
 8006c2c:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8006c2e:	7820      	ldrb	r0, [r4, #0]
      unicode[idx++] =  0U;
 8006c30:	3302      	adds	r3, #2
 8006c32:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d1f5      	bne.n	8006c24 <USBD_GetString+0x34>
}
 8006c38:	bd70      	pop	{r4, r5, r6, pc}
  while (*buf != '\0')
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e7e8      	b.n	8006c12 <USBD_GetString+0x22>

08006c40 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006c40:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c42:	22a5      	movs	r2, #165	@ 0xa5
{
 8006c44:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c46:	2402      	movs	r4, #2
 8006c48:	0092      	lsls	r2, r2, #2
 8006c4a:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c4c:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8006c4e:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c50:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8006c52:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c54:	f000 faf8 	bl	8007248 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006c58:	2000      	movs	r0, #0
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c60:	000a      	movs	r2, r1
 8006c62:	2100      	movs	r1, #0
 8006c64:	f000 faf0 	bl	8007248 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006c68:	2000      	movs	r0, #0
 8006c6a:	bd10      	pop	{r4, pc}

08006c6c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006c6c:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c6e:	22a5      	movs	r2, #165	@ 0xa5
{
 8006c70:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c72:	2403      	movs	r4, #3
 8006c74:	0092      	lsls	r2, r2, #2
 8006c76:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8006c78:	3a39      	subs	r2, #57	@ 0x39
 8006c7a:	3aff      	subs	r2, #255	@ 0xff
 8006c7c:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 8006c7e:	3204      	adds	r2, #4
 8006c80:	5083      	str	r3, [r0, r2]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c82:	000a      	movs	r2, r1
 8006c84:	2100      	movs	r1, #0
 8006c86:	f000 faed 	bl	8007264 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	46c0      	nop			@ (mov r8, r8)

08006c90 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006c90:	b510      	push	{r4, lr}
 8006c92:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c94:	000a      	movs	r2, r1
 8006c96:	2100      	movs	r1, #0
 8006c98:	f000 fae4 	bl	8007264 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	bd10      	pop	{r4, pc}

08006ca0 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ca0:	23a5      	movs	r3, #165	@ 0xa5
 8006ca2:	2204      	movs	r2, #4
{
 8006ca4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006caa:	2100      	movs	r1, #0
 8006cac:	2300      	movs	r3, #0
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f000 faca 	bl	8007248 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	bd10      	pop	{r4, pc}

08006cb8 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006cb8:	23a5      	movs	r3, #165	@ 0xa5
 8006cba:	2205      	movs	r2, #5
{
 8006cbc:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f000 facc 	bl	8007264 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006ccc:	2000      	movs	r0, #0
 8006cce:	bd10      	pop	{r4, pc}

08006cd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006cd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006cd2:	4c1a      	ldr	r4, [pc, #104]	@ (8006d3c <MX_USB_DEVICE_Init+0x6c>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	0020      	movs	r0, r4
 8006cd8:	4919      	ldr	r1, [pc, #100]	@ (8006d40 <MX_USB_DEVICE_Init+0x70>)
 8006cda:	f7ff fba3 	bl	8006424 <USBD_Init>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d111      	bne.n	8006d06 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ce2:	0020      	movs	r0, r4
 8006ce4:	4917      	ldr	r1, [pc, #92]	@ (8006d44 <MX_USB_DEVICE_Init+0x74>)
 8006ce6:	f7ff fbb7 	bl	8006458 <USBD_RegisterClass>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d113      	bne.n	8006d16 <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006cee:	0020      	movs	r0, r4
 8006cf0:	4915      	ldr	r1, [pc, #84]	@ (8006d48 <MX_USB_DEVICE_Init+0x78>)
 8006cf2:	f7ff fb41 	bl	8006378 <USBD_CDC_RegisterInterface>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d115      	bne.n	8006d26 <MX_USB_DEVICE_Init+0x56>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006cfa:	0020      	movs	r0, r4
 8006cfc:	f7ff fbb6 	bl	800646c <USBD_Start>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	d117      	bne.n	8006d34 <MX_USB_DEVICE_Init+0x64>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d04:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006d06:	f7fa f837 	bl	8000d78 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d0a:	0020      	movs	r0, r4
 8006d0c:	490d      	ldr	r1, [pc, #52]	@ (8006d44 <MX_USB_DEVICE_Init+0x74>)
 8006d0e:	f7ff fba3 	bl	8006458 <USBD_RegisterClass>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d0eb      	beq.n	8006cee <MX_USB_DEVICE_Init+0x1e>
    Error_Handler();
 8006d16:	f7fa f82f 	bl	8000d78 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d1a:	0020      	movs	r0, r4
 8006d1c:	490a      	ldr	r1, [pc, #40]	@ (8006d48 <MX_USB_DEVICE_Init+0x78>)
 8006d1e:	f7ff fb2b 	bl	8006378 <USBD_CDC_RegisterInterface>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d0e9      	beq.n	8006cfa <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 8006d26:	f7fa f827 	bl	8000d78 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d2a:	0020      	movs	r0, r4
 8006d2c:	f7ff fb9e 	bl	800646c <USBD_Start>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d0e7      	beq.n	8006d04 <MX_USB_DEVICE_Init+0x34>
    Error_Handler();
 8006d34:	f7fa f820 	bl	8000d78 <Error_Handler>
}
 8006d38:	e7e4      	b.n	8006d04 <MX_USB_DEVICE_Init+0x34>
 8006d3a:	46c0      	nop			@ (mov r8, r8)
 8006d3c:	20000444 	.word	0x20000444
 8006d40:	20000174 	.word	0x20000174
 8006d44:	200000ec 	.word	0x200000ec
 8006d48:	20000130 	.word	0x20000130

08006d4c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
  /* USER CODE END 4 */
}
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	4770      	bx	lr

08006d50 <CDC_Control_FS>:
			break;
	}

	return (USBD_OK);
  /* USER CODE END 5 */
}
 8006d50:	2000      	movs	r0, #0
 8006d52:	4770      	bx	lr

08006d54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	000e      	movs	r6, r1
 8006d58:	0004      	movs	r4, r0
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006d5a:	4d0f      	ldr	r5, [pc, #60]	@ (8006d98 <CDC_Receive_FS+0x44>)
 8006d5c:	0001      	movs	r1, r0
 8006d5e:	0028      	movs	r0, r5
 8006d60:	f7ff fb20 	bl	80063a4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006d64:	0028      	movs	r0, r5
 8006d66:	f7ff fb43 	bl	80063f0 <USBD_CDC_ReceivePacket>

	memset(buffer, '\0', 64);  // clear the buffer
 8006d6a:	4d0c      	ldr	r5, [pc, #48]	@ (8006d9c <CDC_Receive_FS+0x48>)
 8006d6c:	2240      	movs	r2, #64	@ 0x40
 8006d6e:	0028      	movs	r0, r5
 8006d70:	2100      	movs	r1, #0
 8006d72:	f000 fc5f 	bl	8007634 <memset>
	uint8_t len = (uint8_t) *Len;
	memcpy(buffer, Buf, len);  // copy the data to the buffer
 8006d76:	7836      	ldrb	r6, [r6, #0]
 8006d78:	0021      	movs	r1, r4
 8006d7a:	0032      	movs	r2, r6
 8006d7c:	0028      	movs	r0, r5
 8006d7e:	f000 fd44 	bl	800780a <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8006d82:	0032      	movs	r2, r6
 8006d84:	2100      	movs	r1, #0
 8006d86:	0020      	movs	r0, r4
 8006d88:	f000 fc54 	bl	8007634 <memset>
	commandRecieved = TRUE;
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	4b04      	ldr	r3, [pc, #16]	@ (8006da0 <CDC_Receive_FS+0x4c>)

	return (USBD_OK);
  /* USER CODE END 6 */
}
 8006d90:	2000      	movs	r0, #0
	commandRecieved = TRUE;
 8006d92:	701a      	strb	r2, [r3, #0]
}
 8006d94:	bd70      	pop	{r4, r5, r6, pc}
 8006d96:	46c0      	nop			@ (mov r8, r8)
 8006d98:	20000444 	.word	0x20000444
 8006d9c:	200003f8 	.word	0x200003f8
 8006da0:	20000228 	.word	0x20000228

08006da4 <CDC_Init_FS>:
{
 8006da4:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006da6:	4c06      	ldr	r4, [pc, #24]	@ (8006dc0 <CDC_Init_FS+0x1c>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	0020      	movs	r0, r4
 8006dac:	4905      	ldr	r1, [pc, #20]	@ (8006dc4 <CDC_Init_FS+0x20>)
 8006dae:	f7ff faed 	bl	800638c <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006db2:	0020      	movs	r0, r4
 8006db4:	4904      	ldr	r1, [pc, #16]	@ (8006dc8 <CDC_Init_FS+0x24>)
 8006db6:	f7ff faf5 	bl	80063a4 <USBD_CDC_SetRxBuffer>
}
 8006dba:	2000      	movs	r0, #0
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	46c0      	nop			@ (mov r8, r8)
 8006dc0:	20000444 	.word	0x20000444
 8006dc4:	20000708 	.word	0x20000708
 8006dc8:	20000b08 	.word	0x20000b08

08006dcc <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8006dcc:	22ae      	movs	r2, #174	@ 0xae
{
 8006dce:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8006dd0:	4c08      	ldr	r4, [pc, #32]	@ (8006df4 <CDC_Transmit_FS+0x28>)
 8006dd2:	0092      	lsls	r2, r2, #2
{
 8006dd4:	0003      	movs	r3, r0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8006dd6:	58a0      	ldr	r0, [r4, r2]
	if (hcdc->TxState != 0) {
 8006dd8:	3aa4      	subs	r2, #164	@ 0xa4
 8006dda:	5882      	ldr	r2, [r0, r2]
		return USBD_BUSY;
 8006ddc:	2001      	movs	r0, #1
	if (hcdc->TxState != 0) {
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	d107      	bne.n	8006df2 <CDC_Transmit_FS+0x26>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006de2:	000a      	movs	r2, r1
 8006de4:	0020      	movs	r0, r4
 8006de6:	0019      	movs	r1, r3
 8006de8:	f7ff fad0 	bl	800638c <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006dec:	0020      	movs	r0, r4
 8006dee:	f7ff fae1 	bl	80063b4 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8006df2:	bd10      	pop	{r4, pc}
 8006df4:	20000444 	.word	0x20000444

08006df8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006df8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
 8006dfa:	4801      	ldr	r0, [pc, #4]	@ (8006e00 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006dfc:	800b      	strh	r3, [r1, #0]
}
 8006dfe:	4770      	bx	lr
 8006e00:	20000160 	.word	0x20000160

08006e04 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e04:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 8006e06:	4801      	ldr	r0, [pc, #4]	@ (8006e0c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006e08:	800b      	strh	r3, [r1, #0]
}
 8006e0a:	4770      	bx	lr
 8006e0c:	2000015c 	.word	0x2000015c

08006e10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e10:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e12:	4c04      	ldr	r4, [pc, #16]	@ (8006e24 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8006e14:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e16:	0021      	movs	r1, r4
 8006e18:	4803      	ldr	r0, [pc, #12]	@ (8006e28 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006e1a:	f7ff fee9 	bl	8006bf0 <USBD_GetString>
  return USBD_StrDesc;
}
 8006e1e:	0020      	movs	r0, r4
 8006e20:	bd10      	pop	{r4, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	20000f08 	.word	0x20000f08
 8006e28:	08008a40 	.word	0x08008a40

08006e2c <USBD_FS_ProductStrDescriptor>:
{
 8006e2c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e2e:	4c04      	ldr	r4, [pc, #16]	@ (8006e40 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006e30:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e32:	0021      	movs	r1, r4
 8006e34:	4803      	ldr	r0, [pc, #12]	@ (8006e44 <USBD_FS_ProductStrDescriptor+0x18>)
 8006e36:	f7ff fedb 	bl	8006bf0 <USBD_GetString>
}
 8006e3a:	0020      	movs	r0, r4
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	46c0      	nop			@ (mov r8, r8)
 8006e40:	20000f08 	.word	0x20000f08
 8006e44:	08008a54 	.word	0x08008a54

08006e48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e48:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e4a:	4c04      	ldr	r4, [pc, #16]	@ (8006e5c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8006e4c:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e4e:	0021      	movs	r1, r4
 8006e50:	4803      	ldr	r0, [pc, #12]	@ (8006e60 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006e52:	f7ff fecd 	bl	8006bf0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006e56:	0020      	movs	r0, r4
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	46c0      	nop			@ (mov r8, r8)
 8006e5c:	20000f08 	.word	0x20000f08
 8006e60:	08008a6c 	.word	0x08008a6c

08006e64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e64:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e66:	4c04      	ldr	r4, [pc, #16]	@ (8006e78 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006e68:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e6a:	0021      	movs	r1, r4
 8006e6c:	4803      	ldr	r0, [pc, #12]	@ (8006e7c <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006e6e:	f7ff febf 	bl	8006bf0 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006e72:	0020      	movs	r0, r4
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	46c0      	nop			@ (mov r8, r8)
 8006e78:	20000f08 	.word	0x20000f08
 8006e7c:	08008a78 	.word	0x08008a78

08006e80 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006e80:	231a      	movs	r3, #26
{
 8006e82:	b530      	push	{r4, r5, lr}
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e84:	4a52      	ldr	r2, [pc, #328]	@ (8006fd0 <USBD_FS_SerialStrDescriptor+0x150>)
  *length = USB_SIZ_STRING_SERIAL;
 8006e86:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e88:	4b52      	ldr	r3, [pc, #328]	@ (8006fd4 <USBD_FS_SerialStrDescriptor+0x154>)

  deviceserial0 += deviceserial2;
 8006e8a:	6812      	ldr	r2, [r2, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e8c:	681b      	ldr	r3, [r3, #0]
  deviceserial0 += deviceserial2;
 8006e8e:	189b      	adds	r3, r3, r2

  if (deviceserial0 != 0)
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBD_FS_SerialStrDescriptor+0x18>
 8006e94:	4850      	ldr	r0, [pc, #320]	@ (8006fd8 <USBD_FS_SerialStrDescriptor+0x158>)
}
 8006e96:	bd30      	pop	{r4, r5, pc}
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 8006e98:	0f19      	lsrs	r1, r3, #28
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e9a:	000c      	movs	r4, r1
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e9c:	4a4f      	ldr	r2, [pc, #316]	@ (8006fdc <USBD_FS_SerialStrDescriptor+0x15c>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8006e9e:	0008      	movs	r0, r1
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ea0:	6812      	ldr	r2, [r2, #0]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ea2:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006ea4:	2909      	cmp	r1, #9
 8006ea6:	d900      	bls.n	8006eaa <USBD_FS_SerialStrDescriptor+0x2a>
 8006ea8:	e086      	b.n	8006fb8 <USBD_FS_SerialStrDescriptor+0x138>
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006eaa:	2100      	movs	r1, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006eac:	484a      	ldr	r0, [pc, #296]	@ (8006fd8 <USBD_FS_SerialStrDescriptor+0x158>)
    pbuf[2 * idx + 1] = 0;
 8006eae:	70c1      	strb	r1, [r0, #3]
    value = value << 4;
 8006eb0:	0119      	lsls	r1, r3, #4
    if (((value >> 28)) < 0xA)
 8006eb2:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006eb4:	7084      	strb	r4, [r0, #2]
 8006eb6:	002c      	movs	r4, r5
 8006eb8:	0029      	movs	r1, r5
 8006eba:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006ebc:	2d09      	cmp	r5, #9
 8006ebe:	d878      	bhi.n	8006fb2 <USBD_FS_SerialStrDescriptor+0x132>
    pbuf[2 * idx + 1] = 0;
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	7141      	strb	r1, [r0, #5]
    value = value << 4;
 8006ec4:	0219      	lsls	r1, r3, #8
    if (((value >> 28)) < 0xA)
 8006ec6:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ec8:	7104      	strb	r4, [r0, #4]
 8006eca:	002c      	movs	r4, r5
 8006ecc:	0029      	movs	r1, r5
 8006ece:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006ed0:	2d09      	cmp	r5, #9
 8006ed2:	d86b      	bhi.n	8006fac <USBD_FS_SerialStrDescriptor+0x12c>
    pbuf[2 * idx + 1] = 0;
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	71c1      	strb	r1, [r0, #7]
    value = value << 4;
 8006ed8:	0319      	lsls	r1, r3, #12
    if (((value >> 28)) < 0xA)
 8006eda:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006edc:	7184      	strb	r4, [r0, #6]
 8006ede:	002c      	movs	r4, r5
 8006ee0:	0029      	movs	r1, r5
 8006ee2:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006ee4:	2d09      	cmp	r5, #9
 8006ee6:	d85e      	bhi.n	8006fa6 <USBD_FS_SerialStrDescriptor+0x126>
    pbuf[2 * idx + 1] = 0;
 8006ee8:	2100      	movs	r1, #0
 8006eea:	7241      	strb	r1, [r0, #9]
    value = value << 4;
 8006eec:	0419      	lsls	r1, r3, #16
    if (((value >> 28)) < 0xA)
 8006eee:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ef0:	7204      	strb	r4, [r0, #8]
 8006ef2:	002c      	movs	r4, r5
 8006ef4:	0029      	movs	r1, r5
 8006ef6:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006ef8:	2d09      	cmp	r5, #9
 8006efa:	d851      	bhi.n	8006fa0 <USBD_FS_SerialStrDescriptor+0x120>
    pbuf[2 * idx + 1] = 0;
 8006efc:	2100      	movs	r1, #0
 8006efe:	72c1      	strb	r1, [r0, #11]
    value = value << 4;
 8006f00:	0519      	lsls	r1, r3, #20
    if (((value >> 28)) < 0xA)
 8006f02:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f04:	7284      	strb	r4, [r0, #10]
 8006f06:	002c      	movs	r4, r5
 8006f08:	0029      	movs	r1, r5
 8006f0a:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f0c:	2d09      	cmp	r5, #9
 8006f0e:	d844      	bhi.n	8006f9a <USBD_FS_SerialStrDescriptor+0x11a>
    pbuf[2 * idx + 1] = 0;
 8006f10:	2100      	movs	r1, #0
 8006f12:	7341      	strb	r1, [r0, #13]
    value = value << 4;
 8006f14:	0619      	lsls	r1, r3, #24
    if (((value >> 28)) < 0xA)
 8006f16:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f18:	7304      	strb	r4, [r0, #12]
 8006f1a:	002c      	movs	r4, r5
 8006f1c:	0029      	movs	r1, r5
 8006f1e:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f20:	2d09      	cmp	r5, #9
 8006f22:	d837      	bhi.n	8006f94 <USBD_FS_SerialStrDescriptor+0x114>
    pbuf[2 * idx + 1] = 0;
 8006f24:	2100      	movs	r1, #0
 8006f26:	73c1      	strb	r1, [r0, #15]
    if (((value >> 28)) < 0xA)
 8006f28:	310f      	adds	r1, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f2a:	7384      	strb	r4, [r0, #14]
    if (((value >> 28)) < 0xA)
 8006f2c:	000c      	movs	r4, r1
 8006f2e:	401c      	ands	r4, r3
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f30:	0023      	movs	r3, r4
 8006f32:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 8006f34:	2c09      	cmp	r4, #9
 8006f36:	d800      	bhi.n	8006f3a <USBD_FS_SerialStrDescriptor+0xba>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f38:	3b07      	subs	r3, #7
 8006f3a:	7403      	strb	r3, [r0, #16]
    pbuf[2 * idx + 1] = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	7443      	strb	r3, [r0, #17]
    if (((value >> 28)) < 0xA)
 8006f40:	0f13      	lsrs	r3, r2, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f42:	001c      	movs	r4, r3
 8006f44:	0019      	movs	r1, r3
 8006f46:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f48:	2b09      	cmp	r3, #9
 8006f4a:	d838      	bhi.n	8006fbe <USBD_FS_SerialStrDescriptor+0x13e>
    pbuf[2 * idx + 1] = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	74c3      	strb	r3, [r0, #19]
    value = value << 4;
 8006f50:	0113      	lsls	r3, r2, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f52:	7484      	strb	r4, [r0, #18]
    if (((value >> 28)) < 0xA)
 8006f54:	0f1c      	lsrs	r4, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f56:	0021      	movs	r1, r4
 8006f58:	0023      	movs	r3, r4
 8006f5a:	3130      	adds	r1, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f5c:	2c09      	cmp	r4, #9
 8006f5e:	d831      	bhi.n	8006fc4 <USBD_FS_SerialStrDescriptor+0x144>
    pbuf[2 * idx + 1] = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	7543      	strb	r3, [r0, #21]
    value = value << 4;
 8006f64:	0213      	lsls	r3, r2, #8
    if (((value >> 28)) < 0xA)
 8006f66:	0f1c      	lsrs	r4, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f68:	7501      	strb	r1, [r0, #20]
 8006f6a:	0021      	movs	r1, r4
 8006f6c:	0023      	movs	r3, r4
 8006f6e:	3130      	adds	r1, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f70:	2c09      	cmp	r4, #9
 8006f72:	d82a      	bhi.n	8006fca <USBD_FS_SerialStrDescriptor+0x14a>
    pbuf[2 * idx + 1] = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75c3      	strb	r3, [r0, #23]
    value = value << 4;
 8006f78:	0313      	lsls	r3, r2, #12
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f7a:	7581      	strb	r1, [r0, #22]
    if (((value >> 28)) < 0xA)
 8006f7c:	0f19      	lsrs	r1, r3, #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f7e:	000a      	movs	r2, r1
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f80:	000b      	movs	r3, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f82:	3237      	adds	r2, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 8006f84:	2909      	cmp	r1, #9
 8006f86:	d801      	bhi.n	8006f8c <USBD_FS_SerialStrDescriptor+0x10c>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f88:	3330      	adds	r3, #48	@ 0x30
 8006f8a:	001a      	movs	r2, r3
    pbuf[2 * idx + 1] = 0;
 8006f8c:	2300      	movs	r3, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f8e:	7602      	strb	r2, [r0, #24]
    pbuf[2 * idx + 1] = 0;
 8006f90:	7643      	strb	r3, [r0, #25]
  return (uint8_t *) USBD_StringSerial;
 8006f92:	e780      	b.n	8006e96 <USBD_FS_SerialStrDescriptor+0x16>
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f94:	3137      	adds	r1, #55	@ 0x37
 8006f96:	000c      	movs	r4, r1
 8006f98:	e7c4      	b.n	8006f24 <USBD_FS_SerialStrDescriptor+0xa4>
 8006f9a:	3137      	adds	r1, #55	@ 0x37
 8006f9c:	000c      	movs	r4, r1
 8006f9e:	e7b7      	b.n	8006f10 <USBD_FS_SerialStrDescriptor+0x90>
 8006fa0:	3137      	adds	r1, #55	@ 0x37
 8006fa2:	000c      	movs	r4, r1
 8006fa4:	e7aa      	b.n	8006efc <USBD_FS_SerialStrDescriptor+0x7c>
 8006fa6:	3137      	adds	r1, #55	@ 0x37
 8006fa8:	000c      	movs	r4, r1
 8006faa:	e79d      	b.n	8006ee8 <USBD_FS_SerialStrDescriptor+0x68>
 8006fac:	3137      	adds	r1, #55	@ 0x37
 8006fae:	000c      	movs	r4, r1
 8006fb0:	e790      	b.n	8006ed4 <USBD_FS_SerialStrDescriptor+0x54>
 8006fb2:	3137      	adds	r1, #55	@ 0x37
 8006fb4:	000c      	movs	r4, r1
 8006fb6:	e783      	b.n	8006ec0 <USBD_FS_SerialStrDescriptor+0x40>
 8006fb8:	3037      	adds	r0, #55	@ 0x37
 8006fba:	0004      	movs	r4, r0
 8006fbc:	e775      	b.n	8006eaa <USBD_FS_SerialStrDescriptor+0x2a>
 8006fbe:	3137      	adds	r1, #55	@ 0x37
 8006fc0:	000c      	movs	r4, r1
 8006fc2:	e7c3      	b.n	8006f4c <USBD_FS_SerialStrDescriptor+0xcc>
 8006fc4:	3337      	adds	r3, #55	@ 0x37
 8006fc6:	0019      	movs	r1, r3
 8006fc8:	e7ca      	b.n	8006f60 <USBD_FS_SerialStrDescriptor+0xe0>
 8006fca:	3337      	adds	r3, #55	@ 0x37
 8006fcc:	0019      	movs	r1, r3
 8006fce:	e7d1      	b.n	8006f74 <USBD_FS_SerialStrDescriptor+0xf4>
 8006fd0:	1ffff7b4 	.word	0x1ffff7b4
 8006fd4:	1ffff7ac 	.word	0x1ffff7ac
 8006fd8:	20000140 	.word	0x20000140
 8006fdc:	1ffff7b0 	.word	0x1ffff7b0

08006fe0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fe0:	b500      	push	{lr}
  if(pcdHandle->Instance==USB)
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <HAL_PCD_MspInit+0x38>)
 8006fe4:	6802      	ldr	r2, [r0, #0]
{
 8006fe6:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d001      	beq.n	8006ff0 <HAL_PCD_MspInit+0x10>
    HAL_NVIC_EnableIRQ(USB_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006fec:	b003      	add	sp, #12
 8006fee:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8006ff0:	2180      	movs	r1, #128	@ 0x80
 8006ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800701c <HAL_PCD_MspInit+0x3c>)
 8006ff4:	0409      	lsls	r1, r1, #16
 8006ff6:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8006ff8:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	61da      	str	r2, [r3, #28]
 8006ffe:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007000:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8007002:	400b      	ands	r3, r1
 8007004:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007006:	2100      	movs	r1, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8007008:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800700a:	f7fb fb2d 	bl	8002668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800700e:	201f      	movs	r0, #31
 8007010:	f7fb fb54 	bl	80026bc <HAL_NVIC_EnableIRQ>
}
 8007014:	e7ea      	b.n	8006fec <HAL_PCD_MspInit+0xc>
 8007016:	46c0      	nop			@ (mov r8, r8)
 8007018:	40005c00 	.word	0x40005c00
 800701c:	40021000 	.word	0x40021000

08007020 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007020:	23a6      	movs	r3, #166	@ 0xa6
{
 8007022:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	18c1      	adds	r1, r0, r3
 8007028:	3340      	adds	r3, #64	@ 0x40
 800702a:	58c0      	ldr	r0, [r0, r3]
 800702c:	f7ff fa3a 	bl	80064a4 <USBD_LL_SetupStage>
}
 8007030:	bd10      	pop	{r4, pc}
 8007032:	46c0      	nop			@ (mov r8, r8)

08007034 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007034:	008b      	lsls	r3, r1, #2
 8007036:	185b      	adds	r3, r3, r1
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	18c3      	adds	r3, r0, r3
 800703c:	3365      	adds	r3, #101	@ 0x65
 800703e:	33ff      	adds	r3, #255	@ 0xff
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	23b6      	movs	r3, #182	@ 0xb6
{
 8007044:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	58c0      	ldr	r0, [r0, r3]
 800704a:	f7ff fa5d 	bl	8006508 <USBD_LL_DataOutStage>
}
 800704e:	bd10      	pop	{r4, pc}

08007050 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007050:	008b      	lsls	r3, r1, #2
 8007052:	185b      	adds	r3, r3, r1
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	18c3      	adds	r3, r0, r3
 8007058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800705a:	23b6      	movs	r3, #182	@ 0xb6
{
 800705c:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	58c0      	ldr	r0, [r0, r3]
 8007062:	f7ff fa9d 	bl	80065a0 <USBD_LL_DataInStage>
}
 8007066:	bd10      	pop	{r4, pc}

08007068 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007068:	23b6      	movs	r3, #182	@ 0xb6
{
 800706a:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	58c0      	ldr	r0, [r0, r3]
 8007070:	f7ff fb48 	bl	8006704 <USBD_LL_SOF>
}
 8007074:	bd10      	pop	{r4, pc}
 8007076:	46c0      	nop			@ (mov r8, r8)

08007078 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007078:	b570      	push	{r4, r5, r6, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800707a:	7943      	ldrb	r3, [r0, #5]
{
 800707c:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800707e:	2b02      	cmp	r3, #2
 8007080:	d001      	beq.n	8007086 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8007082:	f7f9 fe79 	bl	8000d78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007086:	25b6      	movs	r5, #182	@ 0xb6
 8007088:	00ad      	lsls	r5, r5, #2
 800708a:	2101      	movs	r1, #1
 800708c:	5960      	ldr	r0, [r4, r5]
 800708e:	f7ff fb1d 	bl	80066cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007092:	5960      	ldr	r0, [r4, r5]
 8007094:	f7ff faea 	bl	800666c <USBD_LL_Reset>
}
 8007098:	bd70      	pop	{r4, r5, r6, pc}
 800709a:	46c0      	nop			@ (mov r8, r8)

0800709c <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800709c:	23b6      	movs	r3, #182	@ 0xb6
{
 800709e:	b510      	push	{r4, lr}
 80070a0:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	58c0      	ldr	r0, [r0, r3]
 80070a6:	f7ff fb15 	bl	80066d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80070aa:	7a63      	ldrb	r3, [r4, #9]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070b0:	2106      	movs	r1, #6
 80070b2:	4a02      	ldr	r2, [pc, #8]	@ (80070bc <HAL_PCD_SuspendCallback+0x20>)
 80070b4:	6913      	ldr	r3, [r2, #16]
 80070b6:	430b      	orrs	r3, r1
 80070b8:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80070ba:	bd10      	pop	{r4, pc}
 80070bc:	e000ed00 	.word	0xe000ed00

080070c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80070c2:	7a43      	ldrb	r3, [r0, #9]
{
 80070c4:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <HAL_PCD_ResumeCallback+0x16>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80070ca:	23b6      	movs	r3, #182	@ 0xb6
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	58e0      	ldr	r0, [r4, r3]
 80070d0:	f7ff fb0c 	bl	80066ec <USBD_LL_Resume>
}
 80070d4:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070d6:	2106      	movs	r1, #6
 80070d8:	4a03      	ldr	r2, [pc, #12]	@ (80070e8 <HAL_PCD_ResumeCallback+0x28>)
 80070da:	6913      	ldr	r3, [r2, #16]
 80070dc:	438b      	bics	r3, r1
 80070de:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80070e0:	f7f9 f9fe 	bl	80004e0 <SystemClock_Config>
}
 80070e4:	e7f1      	b.n	80070ca <HAL_PCD_ResumeCallback+0xa>
 80070e6:	46c0      	nop			@ (mov r8, r8)
 80070e8:	e000ed00 	.word	0xe000ed00

080070ec <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 80070ec:	23b6      	movs	r3, #182	@ 0xb6
{
 80070ee:	b570      	push	{r4, r5, r6, lr}
 80070f0:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 80070f2:	481d      	ldr	r0, [pc, #116]	@ (8007168 <USBD_LL_Init+0x7c>)
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 80070f8:	3b18      	subs	r3, #24
 80070fa:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 80070fc:	4b1b      	ldr	r3, [pc, #108]	@ (800716c <USBD_LL_Init+0x80>)
 80070fe:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007100:	2382      	movs	r3, #130	@ 0x82
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007106:	2302      	movs	r3, #2
 8007108:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800710a:	2300      	movs	r3, #0
 800710c:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800710e:	8143      	strh	r3, [r0, #10]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007110:	f7fc fa36 	bl	8003580 <HAL_PCD_Init>
 8007114:	2800      	cmp	r0, #0
 8007116:	d123      	bne.n	8007160 <USBD_LL_Init+0x74>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007118:	25b0      	movs	r5, #176	@ 0xb0
 800711a:	00ad      	lsls	r5, r5, #2
 800711c:	5960      	ldr	r0, [r4, r5]
 800711e:	2318      	movs	r3, #24
 8007120:	2200      	movs	r2, #0
 8007122:	2100      	movs	r1, #0
 8007124:	f7fd fa1c 	bl	8004560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007128:	5960      	ldr	r0, [r4, r5]
 800712a:	2358      	movs	r3, #88	@ 0x58
 800712c:	2200      	movs	r2, #0
 800712e:	2180      	movs	r1, #128	@ 0x80
 8007130:	f7fd fa16 	bl	8004560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007134:	5960      	ldr	r0, [r4, r5]
 8007136:	23c0      	movs	r3, #192	@ 0xc0
 8007138:	2200      	movs	r2, #0
 800713a:	2181      	movs	r1, #129	@ 0x81
 800713c:	f7fd fa10 	bl	8004560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007140:	2388      	movs	r3, #136	@ 0x88
 8007142:	5960      	ldr	r0, [r4, r5]
 8007144:	2200      	movs	r2, #0
 8007146:	2101      	movs	r1, #1
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	f7fd fa09 	bl	8004560 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800714e:	2380      	movs	r3, #128	@ 0x80
 8007150:	5960      	ldr	r0, [r4, r5]
 8007152:	2200      	movs	r2, #0
 8007154:	2182      	movs	r1, #130	@ 0x82
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	f7fd fa02 	bl	8004560 <HAL_PCDEx_PMAConfig>
}
 800715c:	2000      	movs	r0, #0
 800715e:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8007160:	f7f9 fe0a 	bl	8000d78 <Error_Handler>
 8007164:	e7d8      	b.n	8007118 <USBD_LL_Init+0x2c>
 8007166:	46c0      	nop			@ (mov r8, r8)
 8007168:	20001328 	.word	0x20001328
 800716c:	40005c00 	.word	0x40005c00

08007170 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8007170:	23b0      	movs	r3, #176	@ 0xb0
 8007172:	009b      	lsls	r3, r3, #2
{
 8007174:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007176:	58c0      	ldr	r0, [r0, r3]
 8007178:	f7fc fb0e 	bl	8003798 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800717c:	2800      	cmp	r0, #0
 800717e:	d003      	beq.n	8007188 <USBD_LL_Start+0x18>
 8007180:	3802      	subs	r0, #2
 8007182:	1e43      	subs	r3, r0, #1
 8007184:	4198      	sbcs	r0, r3
 8007186:	3001      	adds	r0, #1
}
 8007188:	bd10      	pop	{r4, pc}
 800718a:	46c0      	nop			@ (mov r8, r8)

0800718c <USBD_LL_OpenEP>:
{
 800718c:	b510      	push	{r4, lr}
 800718e:	0014      	movs	r4, r2
 8007190:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007192:	23b0      	movs	r3, #176	@ 0xb0
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	58c0      	ldr	r0, [r0, r3]
 8007198:	0023      	movs	r3, r4
 800719a:	f7fd f8c7 	bl	800432c <HAL_PCD_EP_Open>
  switch (hal_status)
 800719e:	2800      	cmp	r0, #0
 80071a0:	d003      	beq.n	80071aa <USBD_LL_OpenEP+0x1e>
 80071a2:	3802      	subs	r0, #2
 80071a4:	1e43      	subs	r3, r0, #1
 80071a6:	4198      	sbcs	r0, r3
 80071a8:	3001      	adds	r0, #1
}
 80071aa:	bd10      	pop	{r4, pc}

080071ac <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80071ac:	23b0      	movs	r3, #176	@ 0xb0
 80071ae:	009b      	lsls	r3, r3, #2
{
 80071b0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80071b2:	58c0      	ldr	r0, [r0, r3]
 80071b4:	f7fd f8ec 	bl	8004390 <HAL_PCD_EP_Close>
  switch (hal_status)
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d003      	beq.n	80071c4 <USBD_LL_CloseEP+0x18>
 80071bc:	3802      	subs	r0, #2
 80071be:	1e43      	subs	r3, r0, #1
 80071c0:	4198      	sbcs	r0, r3
 80071c2:	3001      	adds	r0, #1
}
 80071c4:	bd10      	pop	{r4, pc}
 80071c6:	46c0      	nop			@ (mov r8, r8)

080071c8 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80071c8:	23b0      	movs	r3, #176	@ 0xb0
 80071ca:	009b      	lsls	r3, r3, #2
{
 80071cc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80071ce:	58c0      	ldr	r0, [r0, r3]
 80071d0:	f7fd f950 	bl	8004474 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d003      	beq.n	80071e0 <USBD_LL_StallEP+0x18>
 80071d8:	3802      	subs	r0, #2
 80071da:	1e43      	subs	r3, r0, #1
 80071dc:	4198      	sbcs	r0, r3
 80071de:	3001      	adds	r0, #1
}
 80071e0:	bd10      	pop	{r4, pc}
 80071e2:	46c0      	nop			@ (mov r8, r8)

080071e4 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80071e4:	23b0      	movs	r3, #176	@ 0xb0
 80071e6:	009b      	lsls	r3, r3, #2
{
 80071e8:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80071ea:	58c0      	ldr	r0, [r0, r3]
 80071ec:	f7fd f97e 	bl	80044ec <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80071f0:	2800      	cmp	r0, #0
 80071f2:	d003      	beq.n	80071fc <USBD_LL_ClearStallEP+0x18>
 80071f4:	3802      	subs	r0, #2
 80071f6:	1e43      	subs	r3, r0, #1
 80071f8:	4198      	sbcs	r0, r3
 80071fa:	3001      	adds	r0, #1
}
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	46c0      	nop			@ (mov r8, r8)

08007200 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007200:	23b0      	movs	r3, #176	@ 0xb0
  if((ep_addr & 0x80) == 0x80)
 8007202:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8007208:	2a00      	cmp	r2, #0
 800720a:	db07      	blt.n	800721c <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800720c:	008a      	lsls	r2, r1, #2
 800720e:	1852      	adds	r2, r2, r1
 8007210:	00d2      	lsls	r2, r2, #3
 8007212:	189b      	adds	r3, r3, r2
 8007214:	3353      	adds	r3, #83	@ 0x53
 8007216:	33ff      	adds	r3, #255	@ 0xff
 8007218:	7818      	ldrb	r0, [r3, #0]
}
 800721a:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800721c:	227f      	movs	r2, #127	@ 0x7f
 800721e:	4011      	ands	r1, r2
 8007220:	008a      	lsls	r2, r1, #2
 8007222:	1852      	adds	r2, r2, r1
 8007224:	00d2      	lsls	r2, r2, #3
 8007226:	189b      	adds	r3, r3, r2
 8007228:	7c98      	ldrb	r0, [r3, #18]
 800722a:	e7f6      	b.n	800721a <USBD_LL_IsStallEP+0x1a>

0800722c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800722c:	23b0      	movs	r3, #176	@ 0xb0
 800722e:	009b      	lsls	r3, r3, #2
{
 8007230:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007232:	58c0      	ldr	r0, [r0, r3]
 8007234:	f7fd f866 	bl	8004304 <HAL_PCD_SetAddress>
  switch (hal_status)
 8007238:	2800      	cmp	r0, #0
 800723a:	d003      	beq.n	8007244 <USBD_LL_SetUSBAddress+0x18>
 800723c:	3802      	subs	r0, #2
 800723e:	1e43      	subs	r3, r0, #1
 8007240:	4198      	sbcs	r0, r3
 8007242:	3001      	adds	r0, #1
}
 8007244:	bd10      	pop	{r4, pc}
 8007246:	46c0      	nop			@ (mov r8, r8)

08007248 <USBD_LL_Transmit>:
{
 8007248:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800724a:	24b0      	movs	r4, #176	@ 0xb0
 800724c:	00a4      	lsls	r4, r4, #2
 800724e:	5900      	ldr	r0, [r0, r4]
 8007250:	f7fd f8f6 	bl	8004440 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8007254:	2800      	cmp	r0, #0
 8007256:	d003      	beq.n	8007260 <USBD_LL_Transmit+0x18>
 8007258:	3802      	subs	r0, #2
 800725a:	1e43      	subs	r3, r0, #1
 800725c:	4198      	sbcs	r0, r3
 800725e:	3001      	adds	r0, #1
}
 8007260:	bd10      	pop	{r4, pc}
 8007262:	46c0      	nop			@ (mov r8, r8)

08007264 <USBD_LL_PrepareReceive>:
{
 8007264:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007266:	24b0      	movs	r4, #176	@ 0xb0
 8007268:	00a4      	lsls	r4, r4, #2
 800726a:	5900      	ldr	r0, [r0, r4]
 800726c:	f7fd f8c0 	bl	80043f0 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8007270:	2800      	cmp	r0, #0
 8007272:	d003      	beq.n	800727c <USBD_LL_PrepareReceive+0x18>
 8007274:	3802      	subs	r0, #2
 8007276:	1e43      	subs	r3, r0, #1
 8007278:	4198      	sbcs	r0, r3
 800727a:	3001      	adds	r0, #1
}
 800727c:	bd10      	pop	{r4, pc}
 800727e:	46c0      	nop			@ (mov r8, r8)

08007280 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007280:	23b0      	movs	r3, #176	@ 0xb0
{
 8007282:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	58c0      	ldr	r0, [r0, r3]
 8007288:	f7fd f8d0 	bl	800442c <HAL_PCD_EP_GetRxCount>
}
 800728c:	bd10      	pop	{r4, pc}
 800728e:	46c0      	nop			@ (mov r8, r8)

08007290 <USBD_static_malloc>:
  return mem;
 8007290:	4800      	ldr	r0, [pc, #0]	@ (8007294 <USBD_static_malloc+0x4>)
}
 8007292:	4770      	bx	lr
 8007294:	20001108 	.word	0x20001108

08007298 <USBD_static_free>:
}
 8007298:	4770      	bx	lr
 800729a:	46c0      	nop			@ (mov r8, r8)

0800729c <atoi>:
 800729c:	b510      	push	{r4, lr}
 800729e:	220a      	movs	r2, #10
 80072a0:	2100      	movs	r1, #0
 80072a2:	f000 f88b 	bl	80073bc <strtol>
 80072a6:	bd10      	pop	{r4, pc}

080072a8 <_strtol_l.constprop.0>:
 80072a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072aa:	b085      	sub	sp, #20
 80072ac:	0017      	movs	r7, r2
 80072ae:	001e      	movs	r6, r3
 80072b0:	9003      	str	r0, [sp, #12]
 80072b2:	9101      	str	r1, [sp, #4]
 80072b4:	2b24      	cmp	r3, #36	@ 0x24
 80072b6:	d844      	bhi.n	8007342 <_strtol_l.constprop.0+0x9a>
 80072b8:	000c      	movs	r4, r1
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d041      	beq.n	8007342 <_strtol_l.constprop.0+0x9a>
 80072be:	4b3d      	ldr	r3, [pc, #244]	@ (80073b4 <_strtol_l.constprop.0+0x10c>)
 80072c0:	2208      	movs	r2, #8
 80072c2:	469c      	mov	ip, r3
 80072c4:	0023      	movs	r3, r4
 80072c6:	4661      	mov	r1, ip
 80072c8:	781d      	ldrb	r5, [r3, #0]
 80072ca:	3401      	adds	r4, #1
 80072cc:	5d48      	ldrb	r0, [r1, r5]
 80072ce:	0001      	movs	r1, r0
 80072d0:	4011      	ands	r1, r2
 80072d2:	4210      	tst	r0, r2
 80072d4:	d1f6      	bne.n	80072c4 <_strtol_l.constprop.0+0x1c>
 80072d6:	2d2d      	cmp	r5, #45	@ 0x2d
 80072d8:	d13a      	bne.n	8007350 <_strtol_l.constprop.0+0xa8>
 80072da:	7825      	ldrb	r5, [r4, #0]
 80072dc:	1c9c      	adds	r4, r3, #2
 80072de:	2301      	movs	r3, #1
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	2210      	movs	r2, #16
 80072e4:	0033      	movs	r3, r6
 80072e6:	4393      	bics	r3, r2
 80072e8:	d109      	bne.n	80072fe <_strtol_l.constprop.0+0x56>
 80072ea:	2d30      	cmp	r5, #48	@ 0x30
 80072ec:	d136      	bne.n	800735c <_strtol_l.constprop.0+0xb4>
 80072ee:	2120      	movs	r1, #32
 80072f0:	7823      	ldrb	r3, [r4, #0]
 80072f2:	438b      	bics	r3, r1
 80072f4:	2b58      	cmp	r3, #88	@ 0x58
 80072f6:	d131      	bne.n	800735c <_strtol_l.constprop.0+0xb4>
 80072f8:	0016      	movs	r6, r2
 80072fa:	7865      	ldrb	r5, [r4, #1]
 80072fc:	3402      	adds	r4, #2
 80072fe:	4a2e      	ldr	r2, [pc, #184]	@ (80073b8 <_strtol_l.constprop.0+0x110>)
 8007300:	9b00      	ldr	r3, [sp, #0]
 8007302:	4694      	mov	ip, r2
 8007304:	4463      	add	r3, ip
 8007306:	0031      	movs	r1, r6
 8007308:	0018      	movs	r0, r3
 800730a:	9302      	str	r3, [sp, #8]
 800730c:	f7f8 ff94 	bl	8000238 <__aeabi_uidivmod>
 8007310:	2200      	movs	r2, #0
 8007312:	4684      	mov	ip, r0
 8007314:	0010      	movs	r0, r2
 8007316:	002b      	movs	r3, r5
 8007318:	3b30      	subs	r3, #48	@ 0x30
 800731a:	2b09      	cmp	r3, #9
 800731c:	d825      	bhi.n	800736a <_strtol_l.constprop.0+0xc2>
 800731e:	001d      	movs	r5, r3
 8007320:	42ae      	cmp	r6, r5
 8007322:	dd31      	ble.n	8007388 <_strtol_l.constprop.0+0xe0>
 8007324:	1c53      	adds	r3, r2, #1
 8007326:	d009      	beq.n	800733c <_strtol_l.constprop.0+0x94>
 8007328:	2201      	movs	r2, #1
 800732a:	4252      	negs	r2, r2
 800732c:	4584      	cmp	ip, r0
 800732e:	d305      	bcc.n	800733c <_strtol_l.constprop.0+0x94>
 8007330:	d101      	bne.n	8007336 <_strtol_l.constprop.0+0x8e>
 8007332:	42a9      	cmp	r1, r5
 8007334:	db25      	blt.n	8007382 <_strtol_l.constprop.0+0xda>
 8007336:	2201      	movs	r2, #1
 8007338:	4370      	muls	r0, r6
 800733a:	1828      	adds	r0, r5, r0
 800733c:	7825      	ldrb	r5, [r4, #0]
 800733e:	3401      	adds	r4, #1
 8007340:	e7e9      	b.n	8007316 <_strtol_l.constprop.0+0x6e>
 8007342:	f000 fa2d 	bl	80077a0 <__errno>
 8007346:	2316      	movs	r3, #22
 8007348:	6003      	str	r3, [r0, #0]
 800734a:	2000      	movs	r0, #0
 800734c:	b005      	add	sp, #20
 800734e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007350:	9100      	str	r1, [sp, #0]
 8007352:	2d2b      	cmp	r5, #43	@ 0x2b
 8007354:	d1c5      	bne.n	80072e2 <_strtol_l.constprop.0+0x3a>
 8007356:	7825      	ldrb	r5, [r4, #0]
 8007358:	1c9c      	adds	r4, r3, #2
 800735a:	e7c2      	b.n	80072e2 <_strtol_l.constprop.0+0x3a>
 800735c:	2e00      	cmp	r6, #0
 800735e:	d1ce      	bne.n	80072fe <_strtol_l.constprop.0+0x56>
 8007360:	3608      	adds	r6, #8
 8007362:	2d30      	cmp	r5, #48	@ 0x30
 8007364:	d0cb      	beq.n	80072fe <_strtol_l.constprop.0+0x56>
 8007366:	3602      	adds	r6, #2
 8007368:	e7c9      	b.n	80072fe <_strtol_l.constprop.0+0x56>
 800736a:	002b      	movs	r3, r5
 800736c:	3b41      	subs	r3, #65	@ 0x41
 800736e:	2b19      	cmp	r3, #25
 8007370:	d801      	bhi.n	8007376 <_strtol_l.constprop.0+0xce>
 8007372:	3d37      	subs	r5, #55	@ 0x37
 8007374:	e7d4      	b.n	8007320 <_strtol_l.constprop.0+0x78>
 8007376:	002b      	movs	r3, r5
 8007378:	3b61      	subs	r3, #97	@ 0x61
 800737a:	2b19      	cmp	r3, #25
 800737c:	d804      	bhi.n	8007388 <_strtol_l.constprop.0+0xe0>
 800737e:	3d57      	subs	r5, #87	@ 0x57
 8007380:	e7ce      	b.n	8007320 <_strtol_l.constprop.0+0x78>
 8007382:	2201      	movs	r2, #1
 8007384:	4252      	negs	r2, r2
 8007386:	e7d9      	b.n	800733c <_strtol_l.constprop.0+0x94>
 8007388:	1c53      	adds	r3, r2, #1
 800738a:	d108      	bne.n	800739e <_strtol_l.constprop.0+0xf6>
 800738c:	2322      	movs	r3, #34	@ 0x22
 800738e:	9a03      	ldr	r2, [sp, #12]
 8007390:	9802      	ldr	r0, [sp, #8]
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	2f00      	cmp	r7, #0
 8007396:	d0d9      	beq.n	800734c <_strtol_l.constprop.0+0xa4>
 8007398:	1e63      	subs	r3, r4, #1
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	e007      	b.n	80073ae <_strtol_l.constprop.0+0x106>
 800739e:	9b00      	ldr	r3, [sp, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d000      	beq.n	80073a6 <_strtol_l.constprop.0+0xfe>
 80073a4:	4240      	negs	r0, r0
 80073a6:	2f00      	cmp	r7, #0
 80073a8:	d0d0      	beq.n	800734c <_strtol_l.constprop.0+0xa4>
 80073aa:	2a00      	cmp	r2, #0
 80073ac:	d1f4      	bne.n	8007398 <_strtol_l.constprop.0+0xf0>
 80073ae:	9b01      	ldr	r3, [sp, #4]
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	e7cb      	b.n	800734c <_strtol_l.constprop.0+0xa4>
 80073b4:	08008a87 	.word	0x08008a87
 80073b8:	7fffffff 	.word	0x7fffffff

080073bc <strtol>:
 80073bc:	b510      	push	{r4, lr}
 80073be:	4c04      	ldr	r4, [pc, #16]	@ (80073d0 <strtol+0x14>)
 80073c0:	0013      	movs	r3, r2
 80073c2:	000a      	movs	r2, r1
 80073c4:	0001      	movs	r1, r0
 80073c6:	6820      	ldr	r0, [r4, #0]
 80073c8:	f7ff ff6e 	bl	80072a8 <_strtol_l.constprop.0>
 80073cc:	bd10      	pop	{r4, pc}
 80073ce:	46c0      	nop			@ (mov r8, r8)
 80073d0:	2000019c 	.word	0x2000019c

080073d4 <std>:
 80073d4:	2300      	movs	r3, #0
 80073d6:	b510      	push	{r4, lr}
 80073d8:	0004      	movs	r4, r0
 80073da:	6003      	str	r3, [r0, #0]
 80073dc:	6043      	str	r3, [r0, #4]
 80073de:	6083      	str	r3, [r0, #8]
 80073e0:	8181      	strh	r1, [r0, #12]
 80073e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80073e4:	81c2      	strh	r2, [r0, #14]
 80073e6:	6103      	str	r3, [r0, #16]
 80073e8:	6143      	str	r3, [r0, #20]
 80073ea:	6183      	str	r3, [r0, #24]
 80073ec:	0019      	movs	r1, r3
 80073ee:	2208      	movs	r2, #8
 80073f0:	305c      	adds	r0, #92	@ 0x5c
 80073f2:	f000 f91f 	bl	8007634 <memset>
 80073f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007424 <std+0x50>)
 80073f8:	6224      	str	r4, [r4, #32]
 80073fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80073fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007428 <std+0x54>)
 80073fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007400:	4b0a      	ldr	r3, [pc, #40]	@ (800742c <std+0x58>)
 8007402:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007404:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <std+0x5c>)
 8007406:	6323      	str	r3, [r4, #48]	@ 0x30
 8007408:	4b0a      	ldr	r3, [pc, #40]	@ (8007434 <std+0x60>)
 800740a:	429c      	cmp	r4, r3
 800740c:	d005      	beq.n	800741a <std+0x46>
 800740e:	4b0a      	ldr	r3, [pc, #40]	@ (8007438 <std+0x64>)
 8007410:	429c      	cmp	r4, r3
 8007412:	d002      	beq.n	800741a <std+0x46>
 8007414:	4b09      	ldr	r3, [pc, #36]	@ (800743c <std+0x68>)
 8007416:	429c      	cmp	r4, r3
 8007418:	d103      	bne.n	8007422 <std+0x4e>
 800741a:	0020      	movs	r0, r4
 800741c:	3058      	adds	r0, #88	@ 0x58
 800741e:	f000 f9e9 	bl	80077f4 <__retarget_lock_init_recursive>
 8007422:	bd10      	pop	{r4, pc}
 8007424:	0800759d 	.word	0x0800759d
 8007428:	080075c5 	.word	0x080075c5
 800742c:	080075fd 	.word	0x080075fd
 8007430:	08007629 	.word	0x08007629
 8007434:	20001604 	.word	0x20001604
 8007438:	2000166c 	.word	0x2000166c
 800743c:	200016d4 	.word	0x200016d4

08007440 <stdio_exit_handler>:
 8007440:	b510      	push	{r4, lr}
 8007442:	4a03      	ldr	r2, [pc, #12]	@ (8007450 <stdio_exit_handler+0x10>)
 8007444:	4903      	ldr	r1, [pc, #12]	@ (8007454 <stdio_exit_handler+0x14>)
 8007446:	4804      	ldr	r0, [pc, #16]	@ (8007458 <stdio_exit_handler+0x18>)
 8007448:	f000 f86c 	bl	8007524 <_fwalk_sglue>
 800744c:	bd10      	pop	{r4, pc}
 800744e:	46c0      	nop			@ (mov r8, r8)
 8007450:	20000190 	.word	0x20000190
 8007454:	08008129 	.word	0x08008129
 8007458:	200001a0 	.word	0x200001a0

0800745c <cleanup_stdio>:
 800745c:	6841      	ldr	r1, [r0, #4]
 800745e:	4b0b      	ldr	r3, [pc, #44]	@ (800748c <cleanup_stdio+0x30>)
 8007460:	b510      	push	{r4, lr}
 8007462:	0004      	movs	r4, r0
 8007464:	4299      	cmp	r1, r3
 8007466:	d001      	beq.n	800746c <cleanup_stdio+0x10>
 8007468:	f000 fe5e 	bl	8008128 <_fflush_r>
 800746c:	68a1      	ldr	r1, [r4, #8]
 800746e:	4b08      	ldr	r3, [pc, #32]	@ (8007490 <cleanup_stdio+0x34>)
 8007470:	4299      	cmp	r1, r3
 8007472:	d002      	beq.n	800747a <cleanup_stdio+0x1e>
 8007474:	0020      	movs	r0, r4
 8007476:	f000 fe57 	bl	8008128 <_fflush_r>
 800747a:	68e1      	ldr	r1, [r4, #12]
 800747c:	4b05      	ldr	r3, [pc, #20]	@ (8007494 <cleanup_stdio+0x38>)
 800747e:	4299      	cmp	r1, r3
 8007480:	d002      	beq.n	8007488 <cleanup_stdio+0x2c>
 8007482:	0020      	movs	r0, r4
 8007484:	f000 fe50 	bl	8008128 <_fflush_r>
 8007488:	bd10      	pop	{r4, pc}
 800748a:	46c0      	nop			@ (mov r8, r8)
 800748c:	20001604 	.word	0x20001604
 8007490:	2000166c 	.word	0x2000166c
 8007494:	200016d4 	.word	0x200016d4

08007498 <global_stdio_init.part.0>:
 8007498:	b510      	push	{r4, lr}
 800749a:	4b09      	ldr	r3, [pc, #36]	@ (80074c0 <global_stdio_init.part.0+0x28>)
 800749c:	4a09      	ldr	r2, [pc, #36]	@ (80074c4 <global_stdio_init.part.0+0x2c>)
 800749e:	2104      	movs	r1, #4
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	4809      	ldr	r0, [pc, #36]	@ (80074c8 <global_stdio_init.part.0+0x30>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	f7ff ff95 	bl	80073d4 <std>
 80074aa:	2201      	movs	r2, #1
 80074ac:	2109      	movs	r1, #9
 80074ae:	4807      	ldr	r0, [pc, #28]	@ (80074cc <global_stdio_init.part.0+0x34>)
 80074b0:	f7ff ff90 	bl	80073d4 <std>
 80074b4:	2202      	movs	r2, #2
 80074b6:	2112      	movs	r1, #18
 80074b8:	4805      	ldr	r0, [pc, #20]	@ (80074d0 <global_stdio_init.part.0+0x38>)
 80074ba:	f7ff ff8b 	bl	80073d4 <std>
 80074be:	bd10      	pop	{r4, pc}
 80074c0:	2000173c 	.word	0x2000173c
 80074c4:	08007441 	.word	0x08007441
 80074c8:	20001604 	.word	0x20001604
 80074cc:	2000166c 	.word	0x2000166c
 80074d0:	200016d4 	.word	0x200016d4

080074d4 <__sfp_lock_acquire>:
 80074d4:	b510      	push	{r4, lr}
 80074d6:	4802      	ldr	r0, [pc, #8]	@ (80074e0 <__sfp_lock_acquire+0xc>)
 80074d8:	f000 f98d 	bl	80077f6 <__retarget_lock_acquire_recursive>
 80074dc:	bd10      	pop	{r4, pc}
 80074de:	46c0      	nop			@ (mov r8, r8)
 80074e0:	20001745 	.word	0x20001745

080074e4 <__sfp_lock_release>:
 80074e4:	b510      	push	{r4, lr}
 80074e6:	4802      	ldr	r0, [pc, #8]	@ (80074f0 <__sfp_lock_release+0xc>)
 80074e8:	f000 f986 	bl	80077f8 <__retarget_lock_release_recursive>
 80074ec:	bd10      	pop	{r4, pc}
 80074ee:	46c0      	nop			@ (mov r8, r8)
 80074f0:	20001745 	.word	0x20001745

080074f4 <__sinit>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	0004      	movs	r4, r0
 80074f8:	f7ff ffec 	bl	80074d4 <__sfp_lock_acquire>
 80074fc:	6a23      	ldr	r3, [r4, #32]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <__sinit+0x14>
 8007502:	f7ff ffef 	bl	80074e4 <__sfp_lock_release>
 8007506:	bd10      	pop	{r4, pc}
 8007508:	4b04      	ldr	r3, [pc, #16]	@ (800751c <__sinit+0x28>)
 800750a:	6223      	str	r3, [r4, #32]
 800750c:	4b04      	ldr	r3, [pc, #16]	@ (8007520 <__sinit+0x2c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f6      	bne.n	8007502 <__sinit+0xe>
 8007514:	f7ff ffc0 	bl	8007498 <global_stdio_init.part.0>
 8007518:	e7f3      	b.n	8007502 <__sinit+0xe>
 800751a:	46c0      	nop			@ (mov r8, r8)
 800751c:	0800745d 	.word	0x0800745d
 8007520:	2000173c 	.word	0x2000173c

08007524 <_fwalk_sglue>:
 8007524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007526:	0014      	movs	r4, r2
 8007528:	2600      	movs	r6, #0
 800752a:	9000      	str	r0, [sp, #0]
 800752c:	9101      	str	r1, [sp, #4]
 800752e:	68a5      	ldr	r5, [r4, #8]
 8007530:	6867      	ldr	r7, [r4, #4]
 8007532:	3f01      	subs	r7, #1
 8007534:	d504      	bpl.n	8007540 <_fwalk_sglue+0x1c>
 8007536:	6824      	ldr	r4, [r4, #0]
 8007538:	2c00      	cmp	r4, #0
 800753a:	d1f8      	bne.n	800752e <_fwalk_sglue+0xa>
 800753c:	0030      	movs	r0, r6
 800753e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007540:	89ab      	ldrh	r3, [r5, #12]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d908      	bls.n	8007558 <_fwalk_sglue+0x34>
 8007546:	220e      	movs	r2, #14
 8007548:	5eab      	ldrsh	r3, [r5, r2]
 800754a:	3301      	adds	r3, #1
 800754c:	d004      	beq.n	8007558 <_fwalk_sglue+0x34>
 800754e:	0029      	movs	r1, r5
 8007550:	9800      	ldr	r0, [sp, #0]
 8007552:	9b01      	ldr	r3, [sp, #4]
 8007554:	4798      	blx	r3
 8007556:	4306      	orrs	r6, r0
 8007558:	3568      	adds	r5, #104	@ 0x68
 800755a:	e7ea      	b.n	8007532 <_fwalk_sglue+0xe>

0800755c <siprintf>:
 800755c:	b40e      	push	{r1, r2, r3}
 800755e:	b500      	push	{lr}
 8007560:	490b      	ldr	r1, [pc, #44]	@ (8007590 <siprintf+0x34>)
 8007562:	b09c      	sub	sp, #112	@ 0x70
 8007564:	ab1d      	add	r3, sp, #116	@ 0x74
 8007566:	9002      	str	r0, [sp, #8]
 8007568:	9006      	str	r0, [sp, #24]
 800756a:	9107      	str	r1, [sp, #28]
 800756c:	9104      	str	r1, [sp, #16]
 800756e:	4809      	ldr	r0, [pc, #36]	@ (8007594 <siprintf+0x38>)
 8007570:	4909      	ldr	r1, [pc, #36]	@ (8007598 <siprintf+0x3c>)
 8007572:	cb04      	ldmia	r3!, {r2}
 8007574:	9105      	str	r1, [sp, #20]
 8007576:	6800      	ldr	r0, [r0, #0]
 8007578:	a902      	add	r1, sp, #8
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	f000 fad2 	bl	8007b24 <_svfiprintf_r>
 8007580:	2200      	movs	r2, #0
 8007582:	9b02      	ldr	r3, [sp, #8]
 8007584:	701a      	strb	r2, [r3, #0]
 8007586:	b01c      	add	sp, #112	@ 0x70
 8007588:	bc08      	pop	{r3}
 800758a:	b003      	add	sp, #12
 800758c:	4718      	bx	r3
 800758e:	46c0      	nop			@ (mov r8, r8)
 8007590:	7fffffff 	.word	0x7fffffff
 8007594:	2000019c 	.word	0x2000019c
 8007598:	ffff0208 	.word	0xffff0208

0800759c <__sread>:
 800759c:	b570      	push	{r4, r5, r6, lr}
 800759e:	000c      	movs	r4, r1
 80075a0:	250e      	movs	r5, #14
 80075a2:	5f49      	ldrsh	r1, [r1, r5]
 80075a4:	f000 f8d4 	bl	8007750 <_read_r>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	db03      	blt.n	80075b4 <__sread+0x18>
 80075ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80075ae:	181b      	adds	r3, r3, r0
 80075b0:	6563      	str	r3, [r4, #84]	@ 0x54
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	4a02      	ldr	r2, [pc, #8]	@ (80075c0 <__sread+0x24>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	81a3      	strh	r3, [r4, #12]
 80075bc:	e7f9      	b.n	80075b2 <__sread+0x16>
 80075be:	46c0      	nop			@ (mov r8, r8)
 80075c0:	ffffefff 	.word	0xffffefff

080075c4 <__swrite>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	001f      	movs	r7, r3
 80075c8:	898b      	ldrh	r3, [r1, #12]
 80075ca:	0005      	movs	r5, r0
 80075cc:	000c      	movs	r4, r1
 80075ce:	0016      	movs	r6, r2
 80075d0:	05db      	lsls	r3, r3, #23
 80075d2:	d505      	bpl.n	80075e0 <__swrite+0x1c>
 80075d4:	230e      	movs	r3, #14
 80075d6:	5ec9      	ldrsh	r1, [r1, r3]
 80075d8:	2200      	movs	r2, #0
 80075da:	2302      	movs	r3, #2
 80075dc:	f000 f8a4 	bl	8007728 <_lseek_r>
 80075e0:	89a3      	ldrh	r3, [r4, #12]
 80075e2:	4a05      	ldr	r2, [pc, #20]	@ (80075f8 <__swrite+0x34>)
 80075e4:	0028      	movs	r0, r5
 80075e6:	4013      	ands	r3, r2
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	0032      	movs	r2, r6
 80075ec:	230e      	movs	r3, #14
 80075ee:	5ee1      	ldrsh	r1, [r4, r3]
 80075f0:	003b      	movs	r3, r7
 80075f2:	f000 f8c1 	bl	8007778 <_write_r>
 80075f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075f8:	ffffefff 	.word	0xffffefff

080075fc <__sseek>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	000c      	movs	r4, r1
 8007600:	250e      	movs	r5, #14
 8007602:	5f49      	ldrsh	r1, [r1, r5]
 8007604:	f000 f890 	bl	8007728 <_lseek_r>
 8007608:	89a3      	ldrh	r3, [r4, #12]
 800760a:	1c42      	adds	r2, r0, #1
 800760c:	d103      	bne.n	8007616 <__sseek+0x1a>
 800760e:	4a05      	ldr	r2, [pc, #20]	@ (8007624 <__sseek+0x28>)
 8007610:	4013      	ands	r3, r2
 8007612:	81a3      	strh	r3, [r4, #12]
 8007614:	bd70      	pop	{r4, r5, r6, pc}
 8007616:	2280      	movs	r2, #128	@ 0x80
 8007618:	0152      	lsls	r2, r2, #5
 800761a:	4313      	orrs	r3, r2
 800761c:	81a3      	strh	r3, [r4, #12]
 800761e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007620:	e7f8      	b.n	8007614 <__sseek+0x18>
 8007622:	46c0      	nop			@ (mov r8, r8)
 8007624:	ffffefff 	.word	0xffffefff

08007628 <__sclose>:
 8007628:	b510      	push	{r4, lr}
 800762a:	230e      	movs	r3, #14
 800762c:	5ec9      	ldrsh	r1, [r1, r3]
 800762e:	f000 f869 	bl	8007704 <_close_r>
 8007632:	bd10      	pop	{r4, pc}

08007634 <memset>:
 8007634:	0003      	movs	r3, r0
 8007636:	1882      	adds	r2, r0, r2
 8007638:	4293      	cmp	r3, r2
 800763a:	d100      	bne.n	800763e <memset+0xa>
 800763c:	4770      	bx	lr
 800763e:	7019      	strb	r1, [r3, #0]
 8007640:	3301      	adds	r3, #1
 8007642:	e7f9      	b.n	8007638 <memset+0x4>

08007644 <strtok>:
 8007644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007646:	4b16      	ldr	r3, [pc, #88]	@ (80076a0 <strtok+0x5c>)
 8007648:	0005      	movs	r5, r0
 800764a:	681f      	ldr	r7, [r3, #0]
 800764c:	000e      	movs	r6, r1
 800764e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007650:	2c00      	cmp	r4, #0
 8007652:	d11d      	bne.n	8007690 <strtok+0x4c>
 8007654:	2050      	movs	r0, #80	@ 0x50
 8007656:	f000 f949 	bl	80078ec <malloc>
 800765a:	1e02      	subs	r2, r0, #0
 800765c:	6478      	str	r0, [r7, #68]	@ 0x44
 800765e:	d104      	bne.n	800766a <strtok+0x26>
 8007660:	215b      	movs	r1, #91	@ 0x5b
 8007662:	4b10      	ldr	r3, [pc, #64]	@ (80076a4 <strtok+0x60>)
 8007664:	4810      	ldr	r0, [pc, #64]	@ (80076a8 <strtok+0x64>)
 8007666:	f000 f8d9 	bl	800781c <__assert_func>
 800766a:	6004      	str	r4, [r0, #0]
 800766c:	6044      	str	r4, [r0, #4]
 800766e:	6084      	str	r4, [r0, #8]
 8007670:	60c4      	str	r4, [r0, #12]
 8007672:	6104      	str	r4, [r0, #16]
 8007674:	6144      	str	r4, [r0, #20]
 8007676:	6184      	str	r4, [r0, #24]
 8007678:	6284      	str	r4, [r0, #40]	@ 0x28
 800767a:	62c4      	str	r4, [r0, #44]	@ 0x2c
 800767c:	6304      	str	r4, [r0, #48]	@ 0x30
 800767e:	6344      	str	r4, [r0, #52]	@ 0x34
 8007680:	6384      	str	r4, [r0, #56]	@ 0x38
 8007682:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8007684:	6404      	str	r4, [r0, #64]	@ 0x40
 8007686:	6444      	str	r4, [r0, #68]	@ 0x44
 8007688:	6484      	str	r4, [r0, #72]	@ 0x48
 800768a:	64c4      	str	r4, [r0, #76]	@ 0x4c
 800768c:	7704      	strb	r4, [r0, #28]
 800768e:	6244      	str	r4, [r0, #36]	@ 0x24
 8007690:	0031      	movs	r1, r6
 8007692:	0028      	movs	r0, r5
 8007694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007696:	2301      	movs	r3, #1
 8007698:	f000 f808 	bl	80076ac <__strtok_r>
 800769c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800769e:	46c0      	nop			@ (mov r8, r8)
 80076a0:	2000019c 	.word	0x2000019c
 80076a4:	08008b87 	.word	0x08008b87
 80076a8:	08008b9e 	.word	0x08008b9e

080076ac <__strtok_r>:
 80076ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ae:	1e04      	subs	r4, r0, #0
 80076b0:	d102      	bne.n	80076b8 <__strtok_r+0xc>
 80076b2:	6814      	ldr	r4, [r2, #0]
 80076b4:	2c00      	cmp	r4, #0
 80076b6:	d009      	beq.n	80076cc <__strtok_r+0x20>
 80076b8:	0020      	movs	r0, r4
 80076ba:	000e      	movs	r6, r1
 80076bc:	7805      	ldrb	r5, [r0, #0]
 80076be:	3401      	adds	r4, #1
 80076c0:	7837      	ldrb	r7, [r6, #0]
 80076c2:	2f00      	cmp	r7, #0
 80076c4:	d104      	bne.n	80076d0 <__strtok_r+0x24>
 80076c6:	2d00      	cmp	r5, #0
 80076c8:	d10d      	bne.n	80076e6 <__strtok_r+0x3a>
 80076ca:	6015      	str	r5, [r2, #0]
 80076cc:	2000      	movs	r0, #0
 80076ce:	e006      	b.n	80076de <__strtok_r+0x32>
 80076d0:	3601      	adds	r6, #1
 80076d2:	42bd      	cmp	r5, r7
 80076d4:	d1f4      	bne.n	80076c0 <__strtok_r+0x14>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1ee      	bne.n	80076b8 <__strtok_r+0xc>
 80076da:	6014      	str	r4, [r2, #0]
 80076dc:	7003      	strb	r3, [r0, #0]
 80076de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e0:	3301      	adds	r3, #1
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	d102      	bne.n	80076ec <__strtok_r+0x40>
 80076e6:	000b      	movs	r3, r1
 80076e8:	7826      	ldrb	r6, [r4, #0]
 80076ea:	3401      	adds	r4, #1
 80076ec:	781d      	ldrb	r5, [r3, #0]
 80076ee:	42ae      	cmp	r6, r5
 80076f0:	d1f6      	bne.n	80076e0 <__strtok_r+0x34>
 80076f2:	2300      	movs	r3, #0
 80076f4:	001d      	movs	r5, r3
 80076f6:	429e      	cmp	r6, r3
 80076f8:	d002      	beq.n	8007700 <__strtok_r+0x54>
 80076fa:	0023      	movs	r3, r4
 80076fc:	1e61      	subs	r1, r4, #1
 80076fe:	700d      	strb	r5, [r1, #0]
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	e7ec      	b.n	80076de <__strtok_r+0x32>

08007704 <_close_r>:
 8007704:	2300      	movs	r3, #0
 8007706:	b570      	push	{r4, r5, r6, lr}
 8007708:	4d06      	ldr	r5, [pc, #24]	@ (8007724 <_close_r+0x20>)
 800770a:	0004      	movs	r4, r0
 800770c:	0008      	movs	r0, r1
 800770e:	602b      	str	r3, [r5, #0]
 8007710:	f7fa fcb0 	bl	8002074 <_close>
 8007714:	1c43      	adds	r3, r0, #1
 8007716:	d103      	bne.n	8007720 <_close_r+0x1c>
 8007718:	682b      	ldr	r3, [r5, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d000      	beq.n	8007720 <_close_r+0x1c>
 800771e:	6023      	str	r3, [r4, #0]
 8007720:	bd70      	pop	{r4, r5, r6, pc}
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	20001740 	.word	0x20001740

08007728 <_lseek_r>:
 8007728:	b570      	push	{r4, r5, r6, lr}
 800772a:	0004      	movs	r4, r0
 800772c:	0008      	movs	r0, r1
 800772e:	0011      	movs	r1, r2
 8007730:	001a      	movs	r2, r3
 8007732:	2300      	movs	r3, #0
 8007734:	4d05      	ldr	r5, [pc, #20]	@ (800774c <_lseek_r+0x24>)
 8007736:	602b      	str	r3, [r5, #0]
 8007738:	f7fa fca8 	bl	800208c <_lseek>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d103      	bne.n	8007748 <_lseek_r+0x20>
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d000      	beq.n	8007748 <_lseek_r+0x20>
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	bd70      	pop	{r4, r5, r6, pc}
 800774a:	46c0      	nop			@ (mov r8, r8)
 800774c:	20001740 	.word	0x20001740

08007750 <_read_r>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	0004      	movs	r4, r0
 8007754:	0008      	movs	r0, r1
 8007756:	0011      	movs	r1, r2
 8007758:	001a      	movs	r2, r3
 800775a:	2300      	movs	r3, #0
 800775c:	4d05      	ldr	r5, [pc, #20]	@ (8007774 <_read_r+0x24>)
 800775e:	602b      	str	r3, [r5, #0]
 8007760:	f7fa fc6c 	bl	800203c <_read>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d103      	bne.n	8007770 <_read_r+0x20>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d000      	beq.n	8007770 <_read_r+0x20>
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	bd70      	pop	{r4, r5, r6, pc}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	20001740 	.word	0x20001740

08007778 <_write_r>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	0004      	movs	r4, r0
 800777c:	0008      	movs	r0, r1
 800777e:	0011      	movs	r1, r2
 8007780:	001a      	movs	r2, r3
 8007782:	2300      	movs	r3, #0
 8007784:	4d05      	ldr	r5, [pc, #20]	@ (800779c <_write_r+0x24>)
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	f7fa fc66 	bl	8002058 <_write>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d103      	bne.n	8007798 <_write_r+0x20>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d000      	beq.n	8007798 <_write_r+0x20>
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	bd70      	pop	{r4, r5, r6, pc}
 800779a:	46c0      	nop			@ (mov r8, r8)
 800779c:	20001740 	.word	0x20001740

080077a0 <__errno>:
 80077a0:	4b01      	ldr	r3, [pc, #4]	@ (80077a8 <__errno+0x8>)
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	4770      	bx	lr
 80077a6:	46c0      	nop			@ (mov r8, r8)
 80077a8:	2000019c 	.word	0x2000019c

080077ac <__libc_init_array>:
 80077ac:	b570      	push	{r4, r5, r6, lr}
 80077ae:	2600      	movs	r6, #0
 80077b0:	4c0c      	ldr	r4, [pc, #48]	@ (80077e4 <__libc_init_array+0x38>)
 80077b2:	4d0d      	ldr	r5, [pc, #52]	@ (80077e8 <__libc_init_array+0x3c>)
 80077b4:	1b64      	subs	r4, r4, r5
 80077b6:	10a4      	asrs	r4, r4, #2
 80077b8:	42a6      	cmp	r6, r4
 80077ba:	d109      	bne.n	80077d0 <__libc_init_array+0x24>
 80077bc:	2600      	movs	r6, #0
 80077be:	f001 f81b 	bl	80087f8 <_init>
 80077c2:	4c0a      	ldr	r4, [pc, #40]	@ (80077ec <__libc_init_array+0x40>)
 80077c4:	4d0a      	ldr	r5, [pc, #40]	@ (80077f0 <__libc_init_array+0x44>)
 80077c6:	1b64      	subs	r4, r4, r5
 80077c8:	10a4      	asrs	r4, r4, #2
 80077ca:	42a6      	cmp	r6, r4
 80077cc:	d105      	bne.n	80077da <__libc_init_array+0x2e>
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	00b3      	lsls	r3, r6, #2
 80077d2:	58eb      	ldr	r3, [r5, r3]
 80077d4:	4798      	blx	r3
 80077d6:	3601      	adds	r6, #1
 80077d8:	e7ee      	b.n	80077b8 <__libc_init_array+0xc>
 80077da:	00b3      	lsls	r3, r6, #2
 80077dc:	58eb      	ldr	r3, [r5, r3]
 80077de:	4798      	blx	r3
 80077e0:	3601      	adds	r6, #1
 80077e2:	e7f2      	b.n	80077ca <__libc_init_array+0x1e>
 80077e4:	08008c68 	.word	0x08008c68
 80077e8:	08008c68 	.word	0x08008c68
 80077ec:	08008c6c 	.word	0x08008c6c
 80077f0:	08008c68 	.word	0x08008c68

080077f4 <__retarget_lock_init_recursive>:
 80077f4:	4770      	bx	lr

080077f6 <__retarget_lock_acquire_recursive>:
 80077f6:	4770      	bx	lr

080077f8 <__retarget_lock_release_recursive>:
 80077f8:	4770      	bx	lr

080077fa <strcpy>:
 80077fa:	0003      	movs	r3, r0
 80077fc:	780a      	ldrb	r2, [r1, #0]
 80077fe:	3101      	adds	r1, #1
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	3301      	adds	r3, #1
 8007804:	2a00      	cmp	r2, #0
 8007806:	d1f9      	bne.n	80077fc <strcpy+0x2>
 8007808:	4770      	bx	lr

0800780a <memcpy>:
 800780a:	2300      	movs	r3, #0
 800780c:	b510      	push	{r4, lr}
 800780e:	429a      	cmp	r2, r3
 8007810:	d100      	bne.n	8007814 <memcpy+0xa>
 8007812:	bd10      	pop	{r4, pc}
 8007814:	5ccc      	ldrb	r4, [r1, r3]
 8007816:	54c4      	strb	r4, [r0, r3]
 8007818:	3301      	adds	r3, #1
 800781a:	e7f8      	b.n	800780e <memcpy+0x4>

0800781c <__assert_func>:
 800781c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800781e:	0014      	movs	r4, r2
 8007820:	001a      	movs	r2, r3
 8007822:	4b09      	ldr	r3, [pc, #36]	@ (8007848 <__assert_func+0x2c>)
 8007824:	0005      	movs	r5, r0
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	000e      	movs	r6, r1
 800782a:	68d8      	ldr	r0, [r3, #12]
 800782c:	4b07      	ldr	r3, [pc, #28]	@ (800784c <__assert_func+0x30>)
 800782e:	2c00      	cmp	r4, #0
 8007830:	d101      	bne.n	8007836 <__assert_func+0x1a>
 8007832:	4b07      	ldr	r3, [pc, #28]	@ (8007850 <__assert_func+0x34>)
 8007834:	001c      	movs	r4, r3
 8007836:	4907      	ldr	r1, [pc, #28]	@ (8007854 <__assert_func+0x38>)
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	9402      	str	r4, [sp, #8]
 800783c:	002b      	movs	r3, r5
 800783e:	9600      	str	r6, [sp, #0]
 8007840:	f000 fc9e 	bl	8008180 <fiprintf>
 8007844:	f000 fcdd 	bl	8008202 <abort>
 8007848:	2000019c 	.word	0x2000019c
 800784c:	08008bf8 	.word	0x08008bf8
 8007850:	08008c33 	.word	0x08008c33
 8007854:	08008c05 	.word	0x08008c05

08007858 <_free_r>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	0005      	movs	r5, r0
 800785c:	1e0c      	subs	r4, r1, #0
 800785e:	d010      	beq.n	8007882 <_free_r+0x2a>
 8007860:	3c04      	subs	r4, #4
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	da00      	bge.n	800786a <_free_r+0x12>
 8007868:	18e4      	adds	r4, r4, r3
 800786a:	0028      	movs	r0, r5
 800786c:	f000 f8ea 	bl	8007a44 <__malloc_lock>
 8007870:	4a1d      	ldr	r2, [pc, #116]	@ (80078e8 <_free_r+0x90>)
 8007872:	6813      	ldr	r3, [r2, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d105      	bne.n	8007884 <_free_r+0x2c>
 8007878:	6063      	str	r3, [r4, #4]
 800787a:	6014      	str	r4, [r2, #0]
 800787c:	0028      	movs	r0, r5
 800787e:	f000 f8e9 	bl	8007a54 <__malloc_unlock>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	42a3      	cmp	r3, r4
 8007886:	d908      	bls.n	800789a <_free_r+0x42>
 8007888:	6820      	ldr	r0, [r4, #0]
 800788a:	1821      	adds	r1, r4, r0
 800788c:	428b      	cmp	r3, r1
 800788e:	d1f3      	bne.n	8007878 <_free_r+0x20>
 8007890:	6819      	ldr	r1, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	1809      	adds	r1, r1, r0
 8007896:	6021      	str	r1, [r4, #0]
 8007898:	e7ee      	b.n	8007878 <_free_r+0x20>
 800789a:	001a      	movs	r2, r3
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <_free_r+0x4e>
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	d9f9      	bls.n	800789a <_free_r+0x42>
 80078a6:	6811      	ldr	r1, [r2, #0]
 80078a8:	1850      	adds	r0, r2, r1
 80078aa:	42a0      	cmp	r0, r4
 80078ac:	d10b      	bne.n	80078c6 <_free_r+0x6e>
 80078ae:	6820      	ldr	r0, [r4, #0]
 80078b0:	1809      	adds	r1, r1, r0
 80078b2:	1850      	adds	r0, r2, r1
 80078b4:	6011      	str	r1, [r2, #0]
 80078b6:	4283      	cmp	r3, r0
 80078b8:	d1e0      	bne.n	800787c <_free_r+0x24>
 80078ba:	6818      	ldr	r0, [r3, #0]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	1841      	adds	r1, r0, r1
 80078c0:	6011      	str	r1, [r2, #0]
 80078c2:	6053      	str	r3, [r2, #4]
 80078c4:	e7da      	b.n	800787c <_free_r+0x24>
 80078c6:	42a0      	cmp	r0, r4
 80078c8:	d902      	bls.n	80078d0 <_free_r+0x78>
 80078ca:	230c      	movs	r3, #12
 80078cc:	602b      	str	r3, [r5, #0]
 80078ce:	e7d5      	b.n	800787c <_free_r+0x24>
 80078d0:	6820      	ldr	r0, [r4, #0]
 80078d2:	1821      	adds	r1, r4, r0
 80078d4:	428b      	cmp	r3, r1
 80078d6:	d103      	bne.n	80078e0 <_free_r+0x88>
 80078d8:	6819      	ldr	r1, [r3, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	1809      	adds	r1, r1, r0
 80078de:	6021      	str	r1, [r4, #0]
 80078e0:	6063      	str	r3, [r4, #4]
 80078e2:	6054      	str	r4, [r2, #4]
 80078e4:	e7ca      	b.n	800787c <_free_r+0x24>
 80078e6:	46c0      	nop			@ (mov r8, r8)
 80078e8:	2000174c 	.word	0x2000174c

080078ec <malloc>:
 80078ec:	b510      	push	{r4, lr}
 80078ee:	4b03      	ldr	r3, [pc, #12]	@ (80078fc <malloc+0x10>)
 80078f0:	0001      	movs	r1, r0
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	f000 f826 	bl	8007944 <_malloc_r>
 80078f8:	bd10      	pop	{r4, pc}
 80078fa:	46c0      	nop			@ (mov r8, r8)
 80078fc:	2000019c 	.word	0x2000019c

08007900 <sbrk_aligned>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	4e0f      	ldr	r6, [pc, #60]	@ (8007940 <sbrk_aligned+0x40>)
 8007904:	000d      	movs	r5, r1
 8007906:	6831      	ldr	r1, [r6, #0]
 8007908:	0004      	movs	r4, r0
 800790a:	2900      	cmp	r1, #0
 800790c:	d102      	bne.n	8007914 <sbrk_aligned+0x14>
 800790e:	f000 fc5b 	bl	80081c8 <_sbrk_r>
 8007912:	6030      	str	r0, [r6, #0]
 8007914:	0029      	movs	r1, r5
 8007916:	0020      	movs	r0, r4
 8007918:	f000 fc56 	bl	80081c8 <_sbrk_r>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d103      	bne.n	8007928 <sbrk_aligned+0x28>
 8007920:	2501      	movs	r5, #1
 8007922:	426d      	negs	r5, r5
 8007924:	0028      	movs	r0, r5
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	2303      	movs	r3, #3
 800792a:	1cc5      	adds	r5, r0, #3
 800792c:	439d      	bics	r5, r3
 800792e:	42a8      	cmp	r0, r5
 8007930:	d0f8      	beq.n	8007924 <sbrk_aligned+0x24>
 8007932:	1a29      	subs	r1, r5, r0
 8007934:	0020      	movs	r0, r4
 8007936:	f000 fc47 	bl	80081c8 <_sbrk_r>
 800793a:	3001      	adds	r0, #1
 800793c:	d1f2      	bne.n	8007924 <sbrk_aligned+0x24>
 800793e:	e7ef      	b.n	8007920 <sbrk_aligned+0x20>
 8007940:	20001748 	.word	0x20001748

08007944 <_malloc_r>:
 8007944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007946:	2203      	movs	r2, #3
 8007948:	1ccb      	adds	r3, r1, #3
 800794a:	4393      	bics	r3, r2
 800794c:	3308      	adds	r3, #8
 800794e:	0005      	movs	r5, r0
 8007950:	001f      	movs	r7, r3
 8007952:	2b0c      	cmp	r3, #12
 8007954:	d234      	bcs.n	80079c0 <_malloc_r+0x7c>
 8007956:	270c      	movs	r7, #12
 8007958:	42b9      	cmp	r1, r7
 800795a:	d833      	bhi.n	80079c4 <_malloc_r+0x80>
 800795c:	0028      	movs	r0, r5
 800795e:	f000 f871 	bl	8007a44 <__malloc_lock>
 8007962:	4e37      	ldr	r6, [pc, #220]	@ (8007a40 <_malloc_r+0xfc>)
 8007964:	6833      	ldr	r3, [r6, #0]
 8007966:	001c      	movs	r4, r3
 8007968:	2c00      	cmp	r4, #0
 800796a:	d12f      	bne.n	80079cc <_malloc_r+0x88>
 800796c:	0039      	movs	r1, r7
 800796e:	0028      	movs	r0, r5
 8007970:	f7ff ffc6 	bl	8007900 <sbrk_aligned>
 8007974:	0004      	movs	r4, r0
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	d15f      	bne.n	8007a3a <_malloc_r+0xf6>
 800797a:	6834      	ldr	r4, [r6, #0]
 800797c:	9400      	str	r4, [sp, #0]
 800797e:	9b00      	ldr	r3, [sp, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d14a      	bne.n	8007a1a <_malloc_r+0xd6>
 8007984:	2c00      	cmp	r4, #0
 8007986:	d052      	beq.n	8007a2e <_malloc_r+0xea>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	0028      	movs	r0, r5
 800798c:	18e3      	adds	r3, r4, r3
 800798e:	9900      	ldr	r1, [sp, #0]
 8007990:	9301      	str	r3, [sp, #4]
 8007992:	f000 fc19 	bl	80081c8 <_sbrk_r>
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	4283      	cmp	r3, r0
 800799a:	d148      	bne.n	8007a2e <_malloc_r+0xea>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	0028      	movs	r0, r5
 80079a0:	1aff      	subs	r7, r7, r3
 80079a2:	0039      	movs	r1, r7
 80079a4:	f7ff ffac 	bl	8007900 <sbrk_aligned>
 80079a8:	3001      	adds	r0, #1
 80079aa:	d040      	beq.n	8007a2e <_malloc_r+0xea>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	19db      	adds	r3, r3, r7
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	6833      	ldr	r3, [r6, #0]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	d133      	bne.n	8007a22 <_malloc_r+0xde>
 80079ba:	9b00      	ldr	r3, [sp, #0]
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	e019      	b.n	80079f4 <_malloc_r+0xb0>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	dac9      	bge.n	8007958 <_malloc_r+0x14>
 80079c4:	230c      	movs	r3, #12
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	2000      	movs	r0, #0
 80079ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079cc:	6821      	ldr	r1, [r4, #0]
 80079ce:	1bc9      	subs	r1, r1, r7
 80079d0:	d420      	bmi.n	8007a14 <_malloc_r+0xd0>
 80079d2:	290b      	cmp	r1, #11
 80079d4:	d90a      	bls.n	80079ec <_malloc_r+0xa8>
 80079d6:	19e2      	adds	r2, r4, r7
 80079d8:	6027      	str	r7, [r4, #0]
 80079da:	42a3      	cmp	r3, r4
 80079dc:	d104      	bne.n	80079e8 <_malloc_r+0xa4>
 80079de:	6032      	str	r2, [r6, #0]
 80079e0:	6863      	ldr	r3, [r4, #4]
 80079e2:	6011      	str	r1, [r2, #0]
 80079e4:	6053      	str	r3, [r2, #4]
 80079e6:	e005      	b.n	80079f4 <_malloc_r+0xb0>
 80079e8:	605a      	str	r2, [r3, #4]
 80079ea:	e7f9      	b.n	80079e0 <_malloc_r+0x9c>
 80079ec:	6862      	ldr	r2, [r4, #4]
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	d10e      	bne.n	8007a10 <_malloc_r+0xcc>
 80079f2:	6032      	str	r2, [r6, #0]
 80079f4:	0028      	movs	r0, r5
 80079f6:	f000 f82d 	bl	8007a54 <__malloc_unlock>
 80079fa:	0020      	movs	r0, r4
 80079fc:	2207      	movs	r2, #7
 80079fe:	300b      	adds	r0, #11
 8007a00:	1d23      	adds	r3, r4, #4
 8007a02:	4390      	bics	r0, r2
 8007a04:	1ac2      	subs	r2, r0, r3
 8007a06:	4298      	cmp	r0, r3
 8007a08:	d0df      	beq.n	80079ca <_malloc_r+0x86>
 8007a0a:	1a1b      	subs	r3, r3, r0
 8007a0c:	50a3      	str	r3, [r4, r2]
 8007a0e:	e7dc      	b.n	80079ca <_malloc_r+0x86>
 8007a10:	605a      	str	r2, [r3, #4]
 8007a12:	e7ef      	b.n	80079f4 <_malloc_r+0xb0>
 8007a14:	0023      	movs	r3, r4
 8007a16:	6864      	ldr	r4, [r4, #4]
 8007a18:	e7a6      	b.n	8007968 <_malloc_r+0x24>
 8007a1a:	9c00      	ldr	r4, [sp, #0]
 8007a1c:	6863      	ldr	r3, [r4, #4]
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	e7ad      	b.n	800797e <_malloc_r+0x3a>
 8007a22:	001a      	movs	r2, r3
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	42a3      	cmp	r3, r4
 8007a28:	d1fb      	bne.n	8007a22 <_malloc_r+0xde>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e7da      	b.n	80079e4 <_malloc_r+0xa0>
 8007a2e:	230c      	movs	r3, #12
 8007a30:	0028      	movs	r0, r5
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f000 f80e 	bl	8007a54 <__malloc_unlock>
 8007a38:	e7c6      	b.n	80079c8 <_malloc_r+0x84>
 8007a3a:	6007      	str	r7, [r0, #0]
 8007a3c:	e7da      	b.n	80079f4 <_malloc_r+0xb0>
 8007a3e:	46c0      	nop			@ (mov r8, r8)
 8007a40:	2000174c 	.word	0x2000174c

08007a44 <__malloc_lock>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	4802      	ldr	r0, [pc, #8]	@ (8007a50 <__malloc_lock+0xc>)
 8007a48:	f7ff fed5 	bl	80077f6 <__retarget_lock_acquire_recursive>
 8007a4c:	bd10      	pop	{r4, pc}
 8007a4e:	46c0      	nop			@ (mov r8, r8)
 8007a50:	20001744 	.word	0x20001744

08007a54 <__malloc_unlock>:
 8007a54:	b510      	push	{r4, lr}
 8007a56:	4802      	ldr	r0, [pc, #8]	@ (8007a60 <__malloc_unlock+0xc>)
 8007a58:	f7ff fece 	bl	80077f8 <__retarget_lock_release_recursive>
 8007a5c:	bd10      	pop	{r4, pc}
 8007a5e:	46c0      	nop			@ (mov r8, r8)
 8007a60:	20001744 	.word	0x20001744

08007a64 <__ssputs_r>:
 8007a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a66:	688e      	ldr	r6, [r1, #8]
 8007a68:	b085      	sub	sp, #20
 8007a6a:	001f      	movs	r7, r3
 8007a6c:	000c      	movs	r4, r1
 8007a6e:	680b      	ldr	r3, [r1, #0]
 8007a70:	9002      	str	r0, [sp, #8]
 8007a72:	9203      	str	r2, [sp, #12]
 8007a74:	42be      	cmp	r6, r7
 8007a76:	d830      	bhi.n	8007ada <__ssputs_r+0x76>
 8007a78:	210c      	movs	r1, #12
 8007a7a:	5e62      	ldrsh	r2, [r4, r1]
 8007a7c:	2190      	movs	r1, #144	@ 0x90
 8007a7e:	00c9      	lsls	r1, r1, #3
 8007a80:	420a      	tst	r2, r1
 8007a82:	d028      	beq.n	8007ad6 <__ssputs_r+0x72>
 8007a84:	2003      	movs	r0, #3
 8007a86:	6921      	ldr	r1, [r4, #16]
 8007a88:	1a5b      	subs	r3, r3, r1
 8007a8a:	9301      	str	r3, [sp, #4]
 8007a8c:	6963      	ldr	r3, [r4, #20]
 8007a8e:	4343      	muls	r3, r0
 8007a90:	9801      	ldr	r0, [sp, #4]
 8007a92:	0fdd      	lsrs	r5, r3, #31
 8007a94:	18ed      	adds	r5, r5, r3
 8007a96:	1c7b      	adds	r3, r7, #1
 8007a98:	181b      	adds	r3, r3, r0
 8007a9a:	106d      	asrs	r5, r5, #1
 8007a9c:	42ab      	cmp	r3, r5
 8007a9e:	d900      	bls.n	8007aa2 <__ssputs_r+0x3e>
 8007aa0:	001d      	movs	r5, r3
 8007aa2:	0552      	lsls	r2, r2, #21
 8007aa4:	d528      	bpl.n	8007af8 <__ssputs_r+0x94>
 8007aa6:	0029      	movs	r1, r5
 8007aa8:	9802      	ldr	r0, [sp, #8]
 8007aaa:	f7ff ff4b 	bl	8007944 <_malloc_r>
 8007aae:	1e06      	subs	r6, r0, #0
 8007ab0:	d02c      	beq.n	8007b0c <__ssputs_r+0xa8>
 8007ab2:	9a01      	ldr	r2, [sp, #4]
 8007ab4:	6921      	ldr	r1, [r4, #16]
 8007ab6:	f7ff fea8 	bl	800780a <memcpy>
 8007aba:	89a2      	ldrh	r2, [r4, #12]
 8007abc:	4b18      	ldr	r3, [pc, #96]	@ (8007b20 <__ssputs_r+0xbc>)
 8007abe:	401a      	ands	r2, r3
 8007ac0:	2380      	movs	r3, #128	@ 0x80
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	9b01      	ldr	r3, [sp, #4]
 8007ac8:	6126      	str	r6, [r4, #16]
 8007aca:	18f6      	adds	r6, r6, r3
 8007acc:	6026      	str	r6, [r4, #0]
 8007ace:	003e      	movs	r6, r7
 8007ad0:	6165      	str	r5, [r4, #20]
 8007ad2:	1aed      	subs	r5, r5, r3
 8007ad4:	60a5      	str	r5, [r4, #8]
 8007ad6:	42be      	cmp	r6, r7
 8007ad8:	d900      	bls.n	8007adc <__ssputs_r+0x78>
 8007ada:	003e      	movs	r6, r7
 8007adc:	0032      	movs	r2, r6
 8007ade:	9903      	ldr	r1, [sp, #12]
 8007ae0:	6820      	ldr	r0, [r4, #0]
 8007ae2:	f000 fb5d 	bl	80081a0 <memmove>
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	68a3      	ldr	r3, [r4, #8]
 8007aea:	1b9b      	subs	r3, r3, r6
 8007aec:	60a3      	str	r3, [r4, #8]
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	199b      	adds	r3, r3, r6
 8007af2:	6023      	str	r3, [r4, #0]
 8007af4:	b005      	add	sp, #20
 8007af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007af8:	002a      	movs	r2, r5
 8007afa:	9802      	ldr	r0, [sp, #8]
 8007afc:	f000 fb88 	bl	8008210 <_realloc_r>
 8007b00:	1e06      	subs	r6, r0, #0
 8007b02:	d1e0      	bne.n	8007ac6 <__ssputs_r+0x62>
 8007b04:	6921      	ldr	r1, [r4, #16]
 8007b06:	9802      	ldr	r0, [sp, #8]
 8007b08:	f7ff fea6 	bl	8007858 <_free_r>
 8007b0c:	230c      	movs	r3, #12
 8007b0e:	2001      	movs	r0, #1
 8007b10:	9a02      	ldr	r2, [sp, #8]
 8007b12:	4240      	negs	r0, r0
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	89a2      	ldrh	r2, [r4, #12]
 8007b18:	3334      	adds	r3, #52	@ 0x34
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	81a3      	strh	r3, [r4, #12]
 8007b1e:	e7e9      	b.n	8007af4 <__ssputs_r+0x90>
 8007b20:	fffffb7f 	.word	0xfffffb7f

08007b24 <_svfiprintf_r>:
 8007b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b26:	b0a1      	sub	sp, #132	@ 0x84
 8007b28:	9003      	str	r0, [sp, #12]
 8007b2a:	001d      	movs	r5, r3
 8007b2c:	898b      	ldrh	r3, [r1, #12]
 8007b2e:	000f      	movs	r7, r1
 8007b30:	0016      	movs	r6, r2
 8007b32:	061b      	lsls	r3, r3, #24
 8007b34:	d511      	bpl.n	8007b5a <_svfiprintf_r+0x36>
 8007b36:	690b      	ldr	r3, [r1, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10e      	bne.n	8007b5a <_svfiprintf_r+0x36>
 8007b3c:	2140      	movs	r1, #64	@ 0x40
 8007b3e:	f7ff ff01 	bl	8007944 <_malloc_r>
 8007b42:	6038      	str	r0, [r7, #0]
 8007b44:	6138      	str	r0, [r7, #16]
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d105      	bne.n	8007b56 <_svfiprintf_r+0x32>
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	9a03      	ldr	r2, [sp, #12]
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	2001      	movs	r0, #1
 8007b52:	4240      	negs	r0, r0
 8007b54:	e0cf      	b.n	8007cf6 <_svfiprintf_r+0x1d2>
 8007b56:	2340      	movs	r3, #64	@ 0x40
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	ac08      	add	r4, sp, #32
 8007b5e:	6163      	str	r3, [r4, #20]
 8007b60:	3320      	adds	r3, #32
 8007b62:	7663      	strb	r3, [r4, #25]
 8007b64:	3310      	adds	r3, #16
 8007b66:	76a3      	strb	r3, [r4, #26]
 8007b68:	9507      	str	r5, [sp, #28]
 8007b6a:	0035      	movs	r5, r6
 8007b6c:	782b      	ldrb	r3, [r5, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <_svfiprintf_r+0x52>
 8007b72:	2b25      	cmp	r3, #37	@ 0x25
 8007b74:	d148      	bne.n	8007c08 <_svfiprintf_r+0xe4>
 8007b76:	1bab      	subs	r3, r5, r6
 8007b78:	9305      	str	r3, [sp, #20]
 8007b7a:	42b5      	cmp	r5, r6
 8007b7c:	d00b      	beq.n	8007b96 <_svfiprintf_r+0x72>
 8007b7e:	0032      	movs	r2, r6
 8007b80:	0039      	movs	r1, r7
 8007b82:	9803      	ldr	r0, [sp, #12]
 8007b84:	f7ff ff6e 	bl	8007a64 <__ssputs_r>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d100      	bne.n	8007b8e <_svfiprintf_r+0x6a>
 8007b8c:	e0ae      	b.n	8007cec <_svfiprintf_r+0x1c8>
 8007b8e:	6963      	ldr	r3, [r4, #20]
 8007b90:	9a05      	ldr	r2, [sp, #20]
 8007b92:	189b      	adds	r3, r3, r2
 8007b94:	6163      	str	r3, [r4, #20]
 8007b96:	782b      	ldrb	r3, [r5, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d100      	bne.n	8007b9e <_svfiprintf_r+0x7a>
 8007b9c:	e0a6      	b.n	8007cec <_svfiprintf_r+0x1c8>
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	4252      	negs	r2, r2
 8007ba4:	6062      	str	r2, [r4, #4]
 8007ba6:	a904      	add	r1, sp, #16
 8007ba8:	3254      	adds	r2, #84	@ 0x54
 8007baa:	1852      	adds	r2, r2, r1
 8007bac:	1c6e      	adds	r6, r5, #1
 8007bae:	6023      	str	r3, [r4, #0]
 8007bb0:	60e3      	str	r3, [r4, #12]
 8007bb2:	60a3      	str	r3, [r4, #8]
 8007bb4:	7013      	strb	r3, [r2, #0]
 8007bb6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007bb8:	4b54      	ldr	r3, [pc, #336]	@ (8007d0c <_svfiprintf_r+0x1e8>)
 8007bba:	2205      	movs	r2, #5
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	7831      	ldrb	r1, [r6, #0]
 8007bc0:	9305      	str	r3, [sp, #20]
 8007bc2:	f000 fb13 	bl	80081ec <memchr>
 8007bc6:	1c75      	adds	r5, r6, #1
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d11f      	bne.n	8007c0c <_svfiprintf_r+0xe8>
 8007bcc:	6822      	ldr	r2, [r4, #0]
 8007bce:	06d3      	lsls	r3, r2, #27
 8007bd0:	d504      	bpl.n	8007bdc <_svfiprintf_r+0xb8>
 8007bd2:	2353      	movs	r3, #83	@ 0x53
 8007bd4:	a904      	add	r1, sp, #16
 8007bd6:	185b      	adds	r3, r3, r1
 8007bd8:	2120      	movs	r1, #32
 8007bda:	7019      	strb	r1, [r3, #0]
 8007bdc:	0713      	lsls	r3, r2, #28
 8007bde:	d504      	bpl.n	8007bea <_svfiprintf_r+0xc6>
 8007be0:	2353      	movs	r3, #83	@ 0x53
 8007be2:	a904      	add	r1, sp, #16
 8007be4:	185b      	adds	r3, r3, r1
 8007be6:	212b      	movs	r1, #43	@ 0x2b
 8007be8:	7019      	strb	r1, [r3, #0]
 8007bea:	7833      	ldrb	r3, [r6, #0]
 8007bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bee:	d016      	beq.n	8007c1e <_svfiprintf_r+0xfa>
 8007bf0:	0035      	movs	r5, r6
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	200a      	movs	r0, #10
 8007bf6:	68e3      	ldr	r3, [r4, #12]
 8007bf8:	782a      	ldrb	r2, [r5, #0]
 8007bfa:	1c6e      	adds	r6, r5, #1
 8007bfc:	3a30      	subs	r2, #48	@ 0x30
 8007bfe:	2a09      	cmp	r2, #9
 8007c00:	d950      	bls.n	8007ca4 <_svfiprintf_r+0x180>
 8007c02:	2900      	cmp	r1, #0
 8007c04:	d111      	bne.n	8007c2a <_svfiprintf_r+0x106>
 8007c06:	e017      	b.n	8007c38 <_svfiprintf_r+0x114>
 8007c08:	3501      	adds	r5, #1
 8007c0a:	e7af      	b.n	8007b6c <_svfiprintf_r+0x48>
 8007c0c:	9b05      	ldr	r3, [sp, #20]
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	1ac0      	subs	r0, r0, r3
 8007c12:	2301      	movs	r3, #1
 8007c14:	4083      	lsls	r3, r0
 8007c16:	4313      	orrs	r3, r2
 8007c18:	002e      	movs	r6, r5
 8007c1a:	6023      	str	r3, [r4, #0]
 8007c1c:	e7cc      	b.n	8007bb8 <_svfiprintf_r+0x94>
 8007c1e:	9b07      	ldr	r3, [sp, #28]
 8007c20:	1d19      	adds	r1, r3, #4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	9107      	str	r1, [sp, #28]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	db01      	blt.n	8007c2e <_svfiprintf_r+0x10a>
 8007c2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c2c:	e004      	b.n	8007c38 <_svfiprintf_r+0x114>
 8007c2e:	425b      	negs	r3, r3
 8007c30:	60e3      	str	r3, [r4, #12]
 8007c32:	2302      	movs	r3, #2
 8007c34:	4313      	orrs	r3, r2
 8007c36:	6023      	str	r3, [r4, #0]
 8007c38:	782b      	ldrb	r3, [r5, #0]
 8007c3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c3c:	d10c      	bne.n	8007c58 <_svfiprintf_r+0x134>
 8007c3e:	786b      	ldrb	r3, [r5, #1]
 8007c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c42:	d134      	bne.n	8007cae <_svfiprintf_r+0x18a>
 8007c44:	9b07      	ldr	r3, [sp, #28]
 8007c46:	3502      	adds	r5, #2
 8007c48:	1d1a      	adds	r2, r3, #4
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	9207      	str	r2, [sp, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	da01      	bge.n	8007c56 <_svfiprintf_r+0x132>
 8007c52:	2301      	movs	r3, #1
 8007c54:	425b      	negs	r3, r3
 8007c56:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c58:	4e2d      	ldr	r6, [pc, #180]	@ (8007d10 <_svfiprintf_r+0x1ec>)
 8007c5a:	2203      	movs	r2, #3
 8007c5c:	0030      	movs	r0, r6
 8007c5e:	7829      	ldrb	r1, [r5, #0]
 8007c60:	f000 fac4 	bl	80081ec <memchr>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d006      	beq.n	8007c76 <_svfiprintf_r+0x152>
 8007c68:	2340      	movs	r3, #64	@ 0x40
 8007c6a:	1b80      	subs	r0, r0, r6
 8007c6c:	4083      	lsls	r3, r0
 8007c6e:	6822      	ldr	r2, [r4, #0]
 8007c70:	3501      	adds	r5, #1
 8007c72:	4313      	orrs	r3, r2
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	7829      	ldrb	r1, [r5, #0]
 8007c78:	2206      	movs	r2, #6
 8007c7a:	4826      	ldr	r0, [pc, #152]	@ (8007d14 <_svfiprintf_r+0x1f0>)
 8007c7c:	1c6e      	adds	r6, r5, #1
 8007c7e:	7621      	strb	r1, [r4, #24]
 8007c80:	f000 fab4 	bl	80081ec <memchr>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d038      	beq.n	8007cfa <_svfiprintf_r+0x1d6>
 8007c88:	4b23      	ldr	r3, [pc, #140]	@ (8007d18 <_svfiprintf_r+0x1f4>)
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d122      	bne.n	8007cd4 <_svfiprintf_r+0x1b0>
 8007c8e:	2207      	movs	r2, #7
 8007c90:	9b07      	ldr	r3, [sp, #28]
 8007c92:	3307      	adds	r3, #7
 8007c94:	4393      	bics	r3, r2
 8007c96:	3308      	adds	r3, #8
 8007c98:	9307      	str	r3, [sp, #28]
 8007c9a:	6963      	ldr	r3, [r4, #20]
 8007c9c:	9a04      	ldr	r2, [sp, #16]
 8007c9e:	189b      	adds	r3, r3, r2
 8007ca0:	6163      	str	r3, [r4, #20]
 8007ca2:	e762      	b.n	8007b6a <_svfiprintf_r+0x46>
 8007ca4:	4343      	muls	r3, r0
 8007ca6:	0035      	movs	r5, r6
 8007ca8:	2101      	movs	r1, #1
 8007caa:	189b      	adds	r3, r3, r2
 8007cac:	e7a4      	b.n	8007bf8 <_svfiprintf_r+0xd4>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	200a      	movs	r0, #10
 8007cb2:	0019      	movs	r1, r3
 8007cb4:	3501      	adds	r5, #1
 8007cb6:	6063      	str	r3, [r4, #4]
 8007cb8:	782a      	ldrb	r2, [r5, #0]
 8007cba:	1c6e      	adds	r6, r5, #1
 8007cbc:	3a30      	subs	r2, #48	@ 0x30
 8007cbe:	2a09      	cmp	r2, #9
 8007cc0:	d903      	bls.n	8007cca <_svfiprintf_r+0x1a6>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0c8      	beq.n	8007c58 <_svfiprintf_r+0x134>
 8007cc6:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cc8:	e7c6      	b.n	8007c58 <_svfiprintf_r+0x134>
 8007cca:	4341      	muls	r1, r0
 8007ccc:	0035      	movs	r5, r6
 8007cce:	2301      	movs	r3, #1
 8007cd0:	1889      	adds	r1, r1, r2
 8007cd2:	e7f1      	b.n	8007cb8 <_svfiprintf_r+0x194>
 8007cd4:	aa07      	add	r2, sp, #28
 8007cd6:	9200      	str	r2, [sp, #0]
 8007cd8:	0021      	movs	r1, r4
 8007cda:	003a      	movs	r2, r7
 8007cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8007d1c <_svfiprintf_r+0x1f8>)
 8007cde:	9803      	ldr	r0, [sp, #12]
 8007ce0:	e000      	b.n	8007ce4 <_svfiprintf_r+0x1c0>
 8007ce2:	bf00      	nop
 8007ce4:	9004      	str	r0, [sp, #16]
 8007ce6:	9b04      	ldr	r3, [sp, #16]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	d1d6      	bne.n	8007c9a <_svfiprintf_r+0x176>
 8007cec:	89bb      	ldrh	r3, [r7, #12]
 8007cee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007cf0:	065b      	lsls	r3, r3, #25
 8007cf2:	d500      	bpl.n	8007cf6 <_svfiprintf_r+0x1d2>
 8007cf4:	e72c      	b.n	8007b50 <_svfiprintf_r+0x2c>
 8007cf6:	b021      	add	sp, #132	@ 0x84
 8007cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cfa:	aa07      	add	r2, sp, #28
 8007cfc:	9200      	str	r2, [sp, #0]
 8007cfe:	0021      	movs	r1, r4
 8007d00:	003a      	movs	r2, r7
 8007d02:	4b06      	ldr	r3, [pc, #24]	@ (8007d1c <_svfiprintf_r+0x1f8>)
 8007d04:	9803      	ldr	r0, [sp, #12]
 8007d06:	f000 f87b 	bl	8007e00 <_printf_i>
 8007d0a:	e7eb      	b.n	8007ce4 <_svfiprintf_r+0x1c0>
 8007d0c:	08008c34 	.word	0x08008c34
 8007d10:	08008c3a 	.word	0x08008c3a
 8007d14:	08008c3e 	.word	0x08008c3e
 8007d18:	00000000 	.word	0x00000000
 8007d1c:	08007a65 	.word	0x08007a65

08007d20 <_printf_common>:
 8007d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d22:	0016      	movs	r6, r2
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	688a      	ldr	r2, [r1, #8]
 8007d28:	690b      	ldr	r3, [r1, #16]
 8007d2a:	000c      	movs	r4, r1
 8007d2c:	9000      	str	r0, [sp, #0]
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	da00      	bge.n	8007d34 <_printf_common+0x14>
 8007d32:	0013      	movs	r3, r2
 8007d34:	0022      	movs	r2, r4
 8007d36:	6033      	str	r3, [r6, #0]
 8007d38:	3243      	adds	r2, #67	@ 0x43
 8007d3a:	7812      	ldrb	r2, [r2, #0]
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	d001      	beq.n	8007d44 <_printf_common+0x24>
 8007d40:	3301      	adds	r3, #1
 8007d42:	6033      	str	r3, [r6, #0]
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	069b      	lsls	r3, r3, #26
 8007d48:	d502      	bpl.n	8007d50 <_printf_common+0x30>
 8007d4a:	6833      	ldr	r3, [r6, #0]
 8007d4c:	3302      	adds	r3, #2
 8007d4e:	6033      	str	r3, [r6, #0]
 8007d50:	6822      	ldr	r2, [r4, #0]
 8007d52:	2306      	movs	r3, #6
 8007d54:	0015      	movs	r5, r2
 8007d56:	401d      	ands	r5, r3
 8007d58:	421a      	tst	r2, r3
 8007d5a:	d027      	beq.n	8007dac <_printf_common+0x8c>
 8007d5c:	0023      	movs	r3, r4
 8007d5e:	3343      	adds	r3, #67	@ 0x43
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	1e5a      	subs	r2, r3, #1
 8007d64:	4193      	sbcs	r3, r2
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	0692      	lsls	r2, r2, #26
 8007d6a:	d430      	bmi.n	8007dce <_printf_common+0xae>
 8007d6c:	0022      	movs	r2, r4
 8007d6e:	9901      	ldr	r1, [sp, #4]
 8007d70:	9800      	ldr	r0, [sp, #0]
 8007d72:	9d08      	ldr	r5, [sp, #32]
 8007d74:	3243      	adds	r2, #67	@ 0x43
 8007d76:	47a8      	blx	r5
 8007d78:	3001      	adds	r0, #1
 8007d7a:	d025      	beq.n	8007dc8 <_printf_common+0xa8>
 8007d7c:	2206      	movs	r2, #6
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	2500      	movs	r5, #0
 8007d82:	4013      	ands	r3, r2
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	d105      	bne.n	8007d94 <_printf_common+0x74>
 8007d88:	6833      	ldr	r3, [r6, #0]
 8007d8a:	68e5      	ldr	r5, [r4, #12]
 8007d8c:	1aed      	subs	r5, r5, r3
 8007d8e:	43eb      	mvns	r3, r5
 8007d90:	17db      	asrs	r3, r3, #31
 8007d92:	401d      	ands	r5, r3
 8007d94:	68a3      	ldr	r3, [r4, #8]
 8007d96:	6922      	ldr	r2, [r4, #16]
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	dd01      	ble.n	8007da0 <_printf_common+0x80>
 8007d9c:	1a9b      	subs	r3, r3, r2
 8007d9e:	18ed      	adds	r5, r5, r3
 8007da0:	2600      	movs	r6, #0
 8007da2:	42b5      	cmp	r5, r6
 8007da4:	d120      	bne.n	8007de8 <_printf_common+0xc8>
 8007da6:	2000      	movs	r0, #0
 8007da8:	e010      	b.n	8007dcc <_printf_common+0xac>
 8007daa:	3501      	adds	r5, #1
 8007dac:	68e3      	ldr	r3, [r4, #12]
 8007dae:	6832      	ldr	r2, [r6, #0]
 8007db0:	1a9b      	subs	r3, r3, r2
 8007db2:	42ab      	cmp	r3, r5
 8007db4:	ddd2      	ble.n	8007d5c <_printf_common+0x3c>
 8007db6:	0022      	movs	r2, r4
 8007db8:	2301      	movs	r3, #1
 8007dba:	9901      	ldr	r1, [sp, #4]
 8007dbc:	9800      	ldr	r0, [sp, #0]
 8007dbe:	9f08      	ldr	r7, [sp, #32]
 8007dc0:	3219      	adds	r2, #25
 8007dc2:	47b8      	blx	r7
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d1f0      	bne.n	8007daa <_printf_common+0x8a>
 8007dc8:	2001      	movs	r0, #1
 8007dca:	4240      	negs	r0, r0
 8007dcc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007dce:	2030      	movs	r0, #48	@ 0x30
 8007dd0:	18e1      	adds	r1, r4, r3
 8007dd2:	3143      	adds	r1, #67	@ 0x43
 8007dd4:	7008      	strb	r0, [r1, #0]
 8007dd6:	0021      	movs	r1, r4
 8007dd8:	1c5a      	adds	r2, r3, #1
 8007dda:	3145      	adds	r1, #69	@ 0x45
 8007ddc:	7809      	ldrb	r1, [r1, #0]
 8007dde:	18a2      	adds	r2, r4, r2
 8007de0:	3243      	adds	r2, #67	@ 0x43
 8007de2:	3302      	adds	r3, #2
 8007de4:	7011      	strb	r1, [r2, #0]
 8007de6:	e7c1      	b.n	8007d6c <_printf_common+0x4c>
 8007de8:	0022      	movs	r2, r4
 8007dea:	2301      	movs	r3, #1
 8007dec:	9901      	ldr	r1, [sp, #4]
 8007dee:	9800      	ldr	r0, [sp, #0]
 8007df0:	9f08      	ldr	r7, [sp, #32]
 8007df2:	321a      	adds	r2, #26
 8007df4:	47b8      	blx	r7
 8007df6:	3001      	adds	r0, #1
 8007df8:	d0e6      	beq.n	8007dc8 <_printf_common+0xa8>
 8007dfa:	3601      	adds	r6, #1
 8007dfc:	e7d1      	b.n	8007da2 <_printf_common+0x82>
	...

08007e00 <_printf_i>:
 8007e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e02:	b08b      	sub	sp, #44	@ 0x2c
 8007e04:	9206      	str	r2, [sp, #24]
 8007e06:	000a      	movs	r2, r1
 8007e08:	3243      	adds	r2, #67	@ 0x43
 8007e0a:	9307      	str	r3, [sp, #28]
 8007e0c:	9005      	str	r0, [sp, #20]
 8007e0e:	9203      	str	r2, [sp, #12]
 8007e10:	7e0a      	ldrb	r2, [r1, #24]
 8007e12:	000c      	movs	r4, r1
 8007e14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e16:	2a78      	cmp	r2, #120	@ 0x78
 8007e18:	d809      	bhi.n	8007e2e <_printf_i+0x2e>
 8007e1a:	2a62      	cmp	r2, #98	@ 0x62
 8007e1c:	d80b      	bhi.n	8007e36 <_printf_i+0x36>
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	d100      	bne.n	8007e24 <_printf_i+0x24>
 8007e22:	e0bc      	b.n	8007f9e <_printf_i+0x19e>
 8007e24:	497b      	ldr	r1, [pc, #492]	@ (8008014 <_printf_i+0x214>)
 8007e26:	9104      	str	r1, [sp, #16]
 8007e28:	2a58      	cmp	r2, #88	@ 0x58
 8007e2a:	d100      	bne.n	8007e2e <_printf_i+0x2e>
 8007e2c:	e090      	b.n	8007f50 <_printf_i+0x150>
 8007e2e:	0025      	movs	r5, r4
 8007e30:	3542      	adds	r5, #66	@ 0x42
 8007e32:	702a      	strb	r2, [r5, #0]
 8007e34:	e022      	b.n	8007e7c <_printf_i+0x7c>
 8007e36:	0010      	movs	r0, r2
 8007e38:	3863      	subs	r0, #99	@ 0x63
 8007e3a:	2815      	cmp	r0, #21
 8007e3c:	d8f7      	bhi.n	8007e2e <_printf_i+0x2e>
 8007e3e:	f7f8 f96b 	bl	8000118 <__gnu_thumb1_case_shi>
 8007e42:	0016      	.short	0x0016
 8007e44:	fff6001f 	.word	0xfff6001f
 8007e48:	fff6fff6 	.word	0xfff6fff6
 8007e4c:	001ffff6 	.word	0x001ffff6
 8007e50:	fff6fff6 	.word	0xfff6fff6
 8007e54:	fff6fff6 	.word	0xfff6fff6
 8007e58:	003600a1 	.word	0x003600a1
 8007e5c:	fff60080 	.word	0xfff60080
 8007e60:	00b2fff6 	.word	0x00b2fff6
 8007e64:	0036fff6 	.word	0x0036fff6
 8007e68:	fff6fff6 	.word	0xfff6fff6
 8007e6c:	0084      	.short	0x0084
 8007e6e:	0025      	movs	r5, r4
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	3542      	adds	r5, #66	@ 0x42
 8007e74:	1d11      	adds	r1, r2, #4
 8007e76:	6019      	str	r1, [r3, #0]
 8007e78:	6813      	ldr	r3, [r2, #0]
 8007e7a:	702b      	strb	r3, [r5, #0]
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e0a0      	b.n	8007fc2 <_printf_i+0x1c2>
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	6809      	ldr	r1, [r1, #0]
 8007e84:	1d02      	adds	r2, r0, #4
 8007e86:	060d      	lsls	r5, r1, #24
 8007e88:	d50b      	bpl.n	8007ea2 <_printf_i+0xa2>
 8007e8a:	6806      	ldr	r6, [r0, #0]
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	da03      	bge.n	8007e9a <_printf_i+0x9a>
 8007e92:	232d      	movs	r3, #45	@ 0x2d
 8007e94:	9a03      	ldr	r2, [sp, #12]
 8007e96:	4276      	negs	r6, r6
 8007e98:	7013      	strb	r3, [r2, #0]
 8007e9a:	4b5e      	ldr	r3, [pc, #376]	@ (8008014 <_printf_i+0x214>)
 8007e9c:	270a      	movs	r7, #10
 8007e9e:	9304      	str	r3, [sp, #16]
 8007ea0:	e018      	b.n	8007ed4 <_printf_i+0xd4>
 8007ea2:	6806      	ldr	r6, [r0, #0]
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	0649      	lsls	r1, r1, #25
 8007ea8:	d5f1      	bpl.n	8007e8e <_printf_i+0x8e>
 8007eaa:	b236      	sxth	r6, r6
 8007eac:	e7ef      	b.n	8007e8e <_printf_i+0x8e>
 8007eae:	6808      	ldr	r0, [r1, #0]
 8007eb0:	6819      	ldr	r1, [r3, #0]
 8007eb2:	c940      	ldmia	r1!, {r6}
 8007eb4:	0605      	lsls	r5, r0, #24
 8007eb6:	d402      	bmi.n	8007ebe <_printf_i+0xbe>
 8007eb8:	0640      	lsls	r0, r0, #25
 8007eba:	d500      	bpl.n	8007ebe <_printf_i+0xbe>
 8007ebc:	b2b6      	uxth	r6, r6
 8007ebe:	6019      	str	r1, [r3, #0]
 8007ec0:	4b54      	ldr	r3, [pc, #336]	@ (8008014 <_printf_i+0x214>)
 8007ec2:	270a      	movs	r7, #10
 8007ec4:	9304      	str	r3, [sp, #16]
 8007ec6:	2a6f      	cmp	r2, #111	@ 0x6f
 8007ec8:	d100      	bne.n	8007ecc <_printf_i+0xcc>
 8007eca:	3f02      	subs	r7, #2
 8007ecc:	0023      	movs	r3, r4
 8007ece:	2200      	movs	r2, #0
 8007ed0:	3343      	adds	r3, #67	@ 0x43
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	6863      	ldr	r3, [r4, #4]
 8007ed6:	60a3      	str	r3, [r4, #8]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	db03      	blt.n	8007ee4 <_printf_i+0xe4>
 8007edc:	2104      	movs	r1, #4
 8007ede:	6822      	ldr	r2, [r4, #0]
 8007ee0:	438a      	bics	r2, r1
 8007ee2:	6022      	str	r2, [r4, #0]
 8007ee4:	2e00      	cmp	r6, #0
 8007ee6:	d102      	bne.n	8007eee <_printf_i+0xee>
 8007ee8:	9d03      	ldr	r5, [sp, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00c      	beq.n	8007f08 <_printf_i+0x108>
 8007eee:	9d03      	ldr	r5, [sp, #12]
 8007ef0:	0030      	movs	r0, r6
 8007ef2:	0039      	movs	r1, r7
 8007ef4:	f7f8 f9a0 	bl	8000238 <__aeabi_uidivmod>
 8007ef8:	9b04      	ldr	r3, [sp, #16]
 8007efa:	3d01      	subs	r5, #1
 8007efc:	5c5b      	ldrb	r3, [r3, r1]
 8007efe:	702b      	strb	r3, [r5, #0]
 8007f00:	0033      	movs	r3, r6
 8007f02:	0006      	movs	r6, r0
 8007f04:	429f      	cmp	r7, r3
 8007f06:	d9f3      	bls.n	8007ef0 <_printf_i+0xf0>
 8007f08:	2f08      	cmp	r7, #8
 8007f0a:	d109      	bne.n	8007f20 <_printf_i+0x120>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	07db      	lsls	r3, r3, #31
 8007f10:	d506      	bpl.n	8007f20 <_printf_i+0x120>
 8007f12:	6862      	ldr	r2, [r4, #4]
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	dc02      	bgt.n	8007f20 <_printf_i+0x120>
 8007f1a:	2330      	movs	r3, #48	@ 0x30
 8007f1c:	3d01      	subs	r5, #1
 8007f1e:	702b      	strb	r3, [r5, #0]
 8007f20:	9b03      	ldr	r3, [sp, #12]
 8007f22:	1b5b      	subs	r3, r3, r5
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	9b07      	ldr	r3, [sp, #28]
 8007f28:	0021      	movs	r1, r4
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	9805      	ldr	r0, [sp, #20]
 8007f2e:	9b06      	ldr	r3, [sp, #24]
 8007f30:	aa09      	add	r2, sp, #36	@ 0x24
 8007f32:	f7ff fef5 	bl	8007d20 <_printf_common>
 8007f36:	3001      	adds	r0, #1
 8007f38:	d148      	bne.n	8007fcc <_printf_i+0x1cc>
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	4240      	negs	r0, r0
 8007f3e:	b00b      	add	sp, #44	@ 0x2c
 8007f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f42:	2220      	movs	r2, #32
 8007f44:	6809      	ldr	r1, [r1, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	6022      	str	r2, [r4, #0]
 8007f4a:	2278      	movs	r2, #120	@ 0x78
 8007f4c:	4932      	ldr	r1, [pc, #200]	@ (8008018 <_printf_i+0x218>)
 8007f4e:	9104      	str	r1, [sp, #16]
 8007f50:	0021      	movs	r1, r4
 8007f52:	3145      	adds	r1, #69	@ 0x45
 8007f54:	700a      	strb	r2, [r1, #0]
 8007f56:	6819      	ldr	r1, [r3, #0]
 8007f58:	6822      	ldr	r2, [r4, #0]
 8007f5a:	c940      	ldmia	r1!, {r6}
 8007f5c:	0610      	lsls	r0, r2, #24
 8007f5e:	d402      	bmi.n	8007f66 <_printf_i+0x166>
 8007f60:	0650      	lsls	r0, r2, #25
 8007f62:	d500      	bpl.n	8007f66 <_printf_i+0x166>
 8007f64:	b2b6      	uxth	r6, r6
 8007f66:	6019      	str	r1, [r3, #0]
 8007f68:	07d3      	lsls	r3, r2, #31
 8007f6a:	d502      	bpl.n	8007f72 <_printf_i+0x172>
 8007f6c:	2320      	movs	r3, #32
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	d001      	beq.n	8007f7a <_printf_i+0x17a>
 8007f76:	2710      	movs	r7, #16
 8007f78:	e7a8      	b.n	8007ecc <_printf_i+0xcc>
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	4393      	bics	r3, r2
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	e7f8      	b.n	8007f76 <_printf_i+0x176>
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	680d      	ldr	r5, [r1, #0]
 8007f88:	1d10      	adds	r0, r2, #4
 8007f8a:	6949      	ldr	r1, [r1, #20]
 8007f8c:	6018      	str	r0, [r3, #0]
 8007f8e:	6813      	ldr	r3, [r2, #0]
 8007f90:	062e      	lsls	r6, r5, #24
 8007f92:	d501      	bpl.n	8007f98 <_printf_i+0x198>
 8007f94:	6019      	str	r1, [r3, #0]
 8007f96:	e002      	b.n	8007f9e <_printf_i+0x19e>
 8007f98:	066d      	lsls	r5, r5, #25
 8007f9a:	d5fb      	bpl.n	8007f94 <_printf_i+0x194>
 8007f9c:	8019      	strh	r1, [r3, #0]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9d03      	ldr	r5, [sp, #12]
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	e7bf      	b.n	8007f26 <_printf_i+0x126>
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	1d11      	adds	r1, r2, #4
 8007faa:	6019      	str	r1, [r3, #0]
 8007fac:	6815      	ldr	r5, [r2, #0]
 8007fae:	2100      	movs	r1, #0
 8007fb0:	0028      	movs	r0, r5
 8007fb2:	6862      	ldr	r2, [r4, #4]
 8007fb4:	f000 f91a 	bl	80081ec <memchr>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d001      	beq.n	8007fc0 <_printf_i+0x1c0>
 8007fbc:	1b40      	subs	r0, r0, r5
 8007fbe:	6060      	str	r0, [r4, #4]
 8007fc0:	6863      	ldr	r3, [r4, #4]
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	9a03      	ldr	r2, [sp, #12]
 8007fc8:	7013      	strb	r3, [r2, #0]
 8007fca:	e7ac      	b.n	8007f26 <_printf_i+0x126>
 8007fcc:	002a      	movs	r2, r5
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	9906      	ldr	r1, [sp, #24]
 8007fd2:	9805      	ldr	r0, [sp, #20]
 8007fd4:	9d07      	ldr	r5, [sp, #28]
 8007fd6:	47a8      	blx	r5
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d0ae      	beq.n	8007f3a <_printf_i+0x13a>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	079b      	lsls	r3, r3, #30
 8007fe0:	d415      	bmi.n	800800e <_printf_i+0x20e>
 8007fe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe4:	68e0      	ldr	r0, [r4, #12]
 8007fe6:	4298      	cmp	r0, r3
 8007fe8:	daa9      	bge.n	8007f3e <_printf_i+0x13e>
 8007fea:	0018      	movs	r0, r3
 8007fec:	e7a7      	b.n	8007f3e <_printf_i+0x13e>
 8007fee:	0022      	movs	r2, r4
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	9906      	ldr	r1, [sp, #24]
 8007ff4:	9805      	ldr	r0, [sp, #20]
 8007ff6:	9e07      	ldr	r6, [sp, #28]
 8007ff8:	3219      	adds	r2, #25
 8007ffa:	47b0      	blx	r6
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d09c      	beq.n	8007f3a <_printf_i+0x13a>
 8008000:	3501      	adds	r5, #1
 8008002:	68e3      	ldr	r3, [r4, #12]
 8008004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008006:	1a9b      	subs	r3, r3, r2
 8008008:	42ab      	cmp	r3, r5
 800800a:	dcf0      	bgt.n	8007fee <_printf_i+0x1ee>
 800800c:	e7e9      	b.n	8007fe2 <_printf_i+0x1e2>
 800800e:	2500      	movs	r5, #0
 8008010:	e7f7      	b.n	8008002 <_printf_i+0x202>
 8008012:	46c0      	nop			@ (mov r8, r8)
 8008014:	08008c45 	.word	0x08008c45
 8008018:	08008c56 	.word	0x08008c56

0800801c <__sflush_r>:
 800801c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800801e:	220c      	movs	r2, #12
 8008020:	5e8b      	ldrsh	r3, [r1, r2]
 8008022:	0005      	movs	r5, r0
 8008024:	000c      	movs	r4, r1
 8008026:	071a      	lsls	r2, r3, #28
 8008028:	d456      	bmi.n	80080d8 <__sflush_r+0xbc>
 800802a:	684a      	ldr	r2, [r1, #4]
 800802c:	2a00      	cmp	r2, #0
 800802e:	dc02      	bgt.n	8008036 <__sflush_r+0x1a>
 8008030:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8008032:	2a00      	cmp	r2, #0
 8008034:	dd4e      	ble.n	80080d4 <__sflush_r+0xb8>
 8008036:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008038:	2f00      	cmp	r7, #0
 800803a:	d04b      	beq.n	80080d4 <__sflush_r+0xb8>
 800803c:	2200      	movs	r2, #0
 800803e:	2080      	movs	r0, #128	@ 0x80
 8008040:	682e      	ldr	r6, [r5, #0]
 8008042:	602a      	str	r2, [r5, #0]
 8008044:	001a      	movs	r2, r3
 8008046:	0140      	lsls	r0, r0, #5
 8008048:	6a21      	ldr	r1, [r4, #32]
 800804a:	4002      	ands	r2, r0
 800804c:	4203      	tst	r3, r0
 800804e:	d033      	beq.n	80080b8 <__sflush_r+0x9c>
 8008050:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	075b      	lsls	r3, r3, #29
 8008056:	d506      	bpl.n	8008066 <__sflush_r+0x4a>
 8008058:	6863      	ldr	r3, [r4, #4]
 800805a:	1ad2      	subs	r2, r2, r3
 800805c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <__sflush_r+0x4a>
 8008062:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008064:	1ad2      	subs	r2, r2, r3
 8008066:	2300      	movs	r3, #0
 8008068:	0028      	movs	r0, r5
 800806a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800806c:	6a21      	ldr	r1, [r4, #32]
 800806e:	47b8      	blx	r7
 8008070:	89a2      	ldrh	r2, [r4, #12]
 8008072:	1c43      	adds	r3, r0, #1
 8008074:	d106      	bne.n	8008084 <__sflush_r+0x68>
 8008076:	6829      	ldr	r1, [r5, #0]
 8008078:	291d      	cmp	r1, #29
 800807a:	d846      	bhi.n	800810a <__sflush_r+0xee>
 800807c:	4b29      	ldr	r3, [pc, #164]	@ (8008124 <__sflush_r+0x108>)
 800807e:	410b      	asrs	r3, r1
 8008080:	07db      	lsls	r3, r3, #31
 8008082:	d442      	bmi.n	800810a <__sflush_r+0xee>
 8008084:	2300      	movs	r3, #0
 8008086:	6063      	str	r3, [r4, #4]
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	04d2      	lsls	r2, r2, #19
 800808e:	d505      	bpl.n	800809c <__sflush_r+0x80>
 8008090:	1c43      	adds	r3, r0, #1
 8008092:	d102      	bne.n	800809a <__sflush_r+0x7e>
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d100      	bne.n	800809c <__sflush_r+0x80>
 800809a:	6560      	str	r0, [r4, #84]	@ 0x54
 800809c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800809e:	602e      	str	r6, [r5, #0]
 80080a0:	2900      	cmp	r1, #0
 80080a2:	d017      	beq.n	80080d4 <__sflush_r+0xb8>
 80080a4:	0023      	movs	r3, r4
 80080a6:	3344      	adds	r3, #68	@ 0x44
 80080a8:	4299      	cmp	r1, r3
 80080aa:	d002      	beq.n	80080b2 <__sflush_r+0x96>
 80080ac:	0028      	movs	r0, r5
 80080ae:	f7ff fbd3 	bl	8007858 <_free_r>
 80080b2:	2300      	movs	r3, #0
 80080b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80080b6:	e00d      	b.n	80080d4 <__sflush_r+0xb8>
 80080b8:	2301      	movs	r3, #1
 80080ba:	0028      	movs	r0, r5
 80080bc:	47b8      	blx	r7
 80080be:	0002      	movs	r2, r0
 80080c0:	1c43      	adds	r3, r0, #1
 80080c2:	d1c6      	bne.n	8008052 <__sflush_r+0x36>
 80080c4:	682b      	ldr	r3, [r5, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0c3      	beq.n	8008052 <__sflush_r+0x36>
 80080ca:	2b1d      	cmp	r3, #29
 80080cc:	d001      	beq.n	80080d2 <__sflush_r+0xb6>
 80080ce:	2b16      	cmp	r3, #22
 80080d0:	d11a      	bne.n	8008108 <__sflush_r+0xec>
 80080d2:	602e      	str	r6, [r5, #0]
 80080d4:	2000      	movs	r0, #0
 80080d6:	e01e      	b.n	8008116 <__sflush_r+0xfa>
 80080d8:	690e      	ldr	r6, [r1, #16]
 80080da:	2e00      	cmp	r6, #0
 80080dc:	d0fa      	beq.n	80080d4 <__sflush_r+0xb8>
 80080de:	680f      	ldr	r7, [r1, #0]
 80080e0:	600e      	str	r6, [r1, #0]
 80080e2:	1bba      	subs	r2, r7, r6
 80080e4:	9201      	str	r2, [sp, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	079b      	lsls	r3, r3, #30
 80080ea:	d100      	bne.n	80080ee <__sflush_r+0xd2>
 80080ec:	694a      	ldr	r2, [r1, #20]
 80080ee:	60a2      	str	r2, [r4, #8]
 80080f0:	9b01      	ldr	r3, [sp, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	ddee      	ble.n	80080d4 <__sflush_r+0xb8>
 80080f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80080f8:	0032      	movs	r2, r6
 80080fa:	001f      	movs	r7, r3
 80080fc:	0028      	movs	r0, r5
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	6a21      	ldr	r1, [r4, #32]
 8008102:	47b8      	blx	r7
 8008104:	2800      	cmp	r0, #0
 8008106:	dc07      	bgt.n	8008118 <__sflush_r+0xfc>
 8008108:	89a2      	ldrh	r2, [r4, #12]
 800810a:	2340      	movs	r3, #64	@ 0x40
 800810c:	2001      	movs	r0, #1
 800810e:	4313      	orrs	r3, r2
 8008110:	b21b      	sxth	r3, r3
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	4240      	negs	r0, r0
 8008116:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008118:	9b01      	ldr	r3, [sp, #4]
 800811a:	1836      	adds	r6, r6, r0
 800811c:	1a1b      	subs	r3, r3, r0
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	e7e6      	b.n	80080f0 <__sflush_r+0xd4>
 8008122:	46c0      	nop			@ (mov r8, r8)
 8008124:	dfbffffe 	.word	0xdfbffffe

08008128 <_fflush_r>:
 8008128:	690b      	ldr	r3, [r1, #16]
 800812a:	b570      	push	{r4, r5, r6, lr}
 800812c:	0005      	movs	r5, r0
 800812e:	000c      	movs	r4, r1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d102      	bne.n	800813a <_fflush_r+0x12>
 8008134:	2500      	movs	r5, #0
 8008136:	0028      	movs	r0, r5
 8008138:	bd70      	pop	{r4, r5, r6, pc}
 800813a:	2800      	cmp	r0, #0
 800813c:	d004      	beq.n	8008148 <_fflush_r+0x20>
 800813e:	6a03      	ldr	r3, [r0, #32]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <_fflush_r+0x20>
 8008144:	f7ff f9d6 	bl	80074f4 <__sinit>
 8008148:	220c      	movs	r2, #12
 800814a:	5ea3      	ldrsh	r3, [r4, r2]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d0f1      	beq.n	8008134 <_fflush_r+0xc>
 8008150:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008152:	07d2      	lsls	r2, r2, #31
 8008154:	d404      	bmi.n	8008160 <_fflush_r+0x38>
 8008156:	059b      	lsls	r3, r3, #22
 8008158:	d402      	bmi.n	8008160 <_fflush_r+0x38>
 800815a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800815c:	f7ff fb4b 	bl	80077f6 <__retarget_lock_acquire_recursive>
 8008160:	0028      	movs	r0, r5
 8008162:	0021      	movs	r1, r4
 8008164:	f7ff ff5a 	bl	800801c <__sflush_r>
 8008168:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800816a:	0005      	movs	r5, r0
 800816c:	07db      	lsls	r3, r3, #31
 800816e:	d4e2      	bmi.n	8008136 <_fflush_r+0xe>
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	059b      	lsls	r3, r3, #22
 8008174:	d4df      	bmi.n	8008136 <_fflush_r+0xe>
 8008176:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008178:	f7ff fb3e 	bl	80077f8 <__retarget_lock_release_recursive>
 800817c:	e7db      	b.n	8008136 <_fflush_r+0xe>
	...

08008180 <fiprintf>:
 8008180:	b40e      	push	{r1, r2, r3}
 8008182:	b517      	push	{r0, r1, r2, r4, lr}
 8008184:	4c05      	ldr	r4, [pc, #20]	@ (800819c <fiprintf+0x1c>)
 8008186:	ab05      	add	r3, sp, #20
 8008188:	cb04      	ldmia	r3!, {r2}
 800818a:	0001      	movs	r1, r0
 800818c:	6820      	ldr	r0, [r4, #0]
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	f000 f894 	bl	80082bc <_vfiprintf_r>
 8008194:	bc1e      	pop	{r1, r2, r3, r4}
 8008196:	bc08      	pop	{r3}
 8008198:	b003      	add	sp, #12
 800819a:	4718      	bx	r3
 800819c:	2000019c 	.word	0x2000019c

080081a0 <memmove>:
 80081a0:	b510      	push	{r4, lr}
 80081a2:	4288      	cmp	r0, r1
 80081a4:	d806      	bhi.n	80081b4 <memmove+0x14>
 80081a6:	2300      	movs	r3, #0
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d008      	beq.n	80081be <memmove+0x1e>
 80081ac:	5ccc      	ldrb	r4, [r1, r3]
 80081ae:	54c4      	strb	r4, [r0, r3]
 80081b0:	3301      	adds	r3, #1
 80081b2:	e7f9      	b.n	80081a8 <memmove+0x8>
 80081b4:	188b      	adds	r3, r1, r2
 80081b6:	4298      	cmp	r0, r3
 80081b8:	d2f5      	bcs.n	80081a6 <memmove+0x6>
 80081ba:	3a01      	subs	r2, #1
 80081bc:	d200      	bcs.n	80081c0 <memmove+0x20>
 80081be:	bd10      	pop	{r4, pc}
 80081c0:	5c8b      	ldrb	r3, [r1, r2]
 80081c2:	5483      	strb	r3, [r0, r2]
 80081c4:	e7f9      	b.n	80081ba <memmove+0x1a>
	...

080081c8 <_sbrk_r>:
 80081c8:	2300      	movs	r3, #0
 80081ca:	b570      	push	{r4, r5, r6, lr}
 80081cc:	4d06      	ldr	r5, [pc, #24]	@ (80081e8 <_sbrk_r+0x20>)
 80081ce:	0004      	movs	r4, r0
 80081d0:	0008      	movs	r0, r1
 80081d2:	602b      	str	r3, [r5, #0]
 80081d4:	f7f9 ff5c 	bl	8002090 <_sbrk>
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	d103      	bne.n	80081e4 <_sbrk_r+0x1c>
 80081dc:	682b      	ldr	r3, [r5, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d000      	beq.n	80081e4 <_sbrk_r+0x1c>
 80081e2:	6023      	str	r3, [r4, #0]
 80081e4:	bd70      	pop	{r4, r5, r6, pc}
 80081e6:	46c0      	nop			@ (mov r8, r8)
 80081e8:	20001740 	.word	0x20001740

080081ec <memchr>:
 80081ec:	b2c9      	uxtb	r1, r1
 80081ee:	1882      	adds	r2, r0, r2
 80081f0:	4290      	cmp	r0, r2
 80081f2:	d101      	bne.n	80081f8 <memchr+0xc>
 80081f4:	2000      	movs	r0, #0
 80081f6:	4770      	bx	lr
 80081f8:	7803      	ldrb	r3, [r0, #0]
 80081fa:	428b      	cmp	r3, r1
 80081fc:	d0fb      	beq.n	80081f6 <memchr+0xa>
 80081fe:	3001      	adds	r0, #1
 8008200:	e7f6      	b.n	80081f0 <memchr+0x4>

08008202 <abort>:
 8008202:	2006      	movs	r0, #6
 8008204:	b510      	push	{r4, lr}
 8008206:	f000 fa3f 	bl	8008688 <raise>
 800820a:	2001      	movs	r0, #1
 800820c:	f7f9 ff10 	bl	8002030 <_exit>

08008210 <_realloc_r>:
 8008210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008212:	0006      	movs	r6, r0
 8008214:	000c      	movs	r4, r1
 8008216:	0015      	movs	r5, r2
 8008218:	2900      	cmp	r1, #0
 800821a:	d105      	bne.n	8008228 <_realloc_r+0x18>
 800821c:	0011      	movs	r1, r2
 800821e:	f7ff fb91 	bl	8007944 <_malloc_r>
 8008222:	0004      	movs	r4, r0
 8008224:	0020      	movs	r0, r4
 8008226:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008228:	2a00      	cmp	r2, #0
 800822a:	d103      	bne.n	8008234 <_realloc_r+0x24>
 800822c:	f7ff fb14 	bl	8007858 <_free_r>
 8008230:	2400      	movs	r4, #0
 8008232:	e7f7      	b.n	8008224 <_realloc_r+0x14>
 8008234:	f000 fa48 	bl	80086c8 <_malloc_usable_size_r>
 8008238:	0007      	movs	r7, r0
 800823a:	4285      	cmp	r5, r0
 800823c:	d802      	bhi.n	8008244 <_realloc_r+0x34>
 800823e:	0843      	lsrs	r3, r0, #1
 8008240:	42ab      	cmp	r3, r5
 8008242:	d3ef      	bcc.n	8008224 <_realloc_r+0x14>
 8008244:	0029      	movs	r1, r5
 8008246:	0030      	movs	r0, r6
 8008248:	f7ff fb7c 	bl	8007944 <_malloc_r>
 800824c:	9001      	str	r0, [sp, #4]
 800824e:	2800      	cmp	r0, #0
 8008250:	d0ee      	beq.n	8008230 <_realloc_r+0x20>
 8008252:	002a      	movs	r2, r5
 8008254:	42bd      	cmp	r5, r7
 8008256:	d900      	bls.n	800825a <_realloc_r+0x4a>
 8008258:	003a      	movs	r2, r7
 800825a:	0021      	movs	r1, r4
 800825c:	9801      	ldr	r0, [sp, #4]
 800825e:	f7ff fad4 	bl	800780a <memcpy>
 8008262:	0021      	movs	r1, r4
 8008264:	0030      	movs	r0, r6
 8008266:	f7ff faf7 	bl	8007858 <_free_r>
 800826a:	9c01      	ldr	r4, [sp, #4]
 800826c:	e7da      	b.n	8008224 <_realloc_r+0x14>

0800826e <__sfputc_r>:
 800826e:	6893      	ldr	r3, [r2, #8]
 8008270:	b510      	push	{r4, lr}
 8008272:	3b01      	subs	r3, #1
 8008274:	6093      	str	r3, [r2, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	da04      	bge.n	8008284 <__sfputc_r+0x16>
 800827a:	6994      	ldr	r4, [r2, #24]
 800827c:	42a3      	cmp	r3, r4
 800827e:	db07      	blt.n	8008290 <__sfputc_r+0x22>
 8008280:	290a      	cmp	r1, #10
 8008282:	d005      	beq.n	8008290 <__sfputc_r+0x22>
 8008284:	6813      	ldr	r3, [r2, #0]
 8008286:	1c58      	adds	r0, r3, #1
 8008288:	6010      	str	r0, [r2, #0]
 800828a:	7019      	strb	r1, [r3, #0]
 800828c:	0008      	movs	r0, r1
 800828e:	bd10      	pop	{r4, pc}
 8008290:	f000 f930 	bl	80084f4 <__swbuf_r>
 8008294:	0001      	movs	r1, r0
 8008296:	e7f9      	b.n	800828c <__sfputc_r+0x1e>

08008298 <__sfputs_r>:
 8008298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829a:	0006      	movs	r6, r0
 800829c:	000f      	movs	r7, r1
 800829e:	0014      	movs	r4, r2
 80082a0:	18d5      	adds	r5, r2, r3
 80082a2:	42ac      	cmp	r4, r5
 80082a4:	d101      	bne.n	80082aa <__sfputs_r+0x12>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e007      	b.n	80082ba <__sfputs_r+0x22>
 80082aa:	7821      	ldrb	r1, [r4, #0]
 80082ac:	003a      	movs	r2, r7
 80082ae:	0030      	movs	r0, r6
 80082b0:	f7ff ffdd 	bl	800826e <__sfputc_r>
 80082b4:	3401      	adds	r4, #1
 80082b6:	1c43      	adds	r3, r0, #1
 80082b8:	d1f3      	bne.n	80082a2 <__sfputs_r+0xa>
 80082ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082bc <_vfiprintf_r>:
 80082bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082be:	b0a1      	sub	sp, #132	@ 0x84
 80082c0:	000f      	movs	r7, r1
 80082c2:	0015      	movs	r5, r2
 80082c4:	001e      	movs	r6, r3
 80082c6:	9003      	str	r0, [sp, #12]
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d004      	beq.n	80082d6 <_vfiprintf_r+0x1a>
 80082cc:	6a03      	ldr	r3, [r0, #32]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <_vfiprintf_r+0x1a>
 80082d2:	f7ff f90f 	bl	80074f4 <__sinit>
 80082d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082d8:	07db      	lsls	r3, r3, #31
 80082da:	d405      	bmi.n	80082e8 <_vfiprintf_r+0x2c>
 80082dc:	89bb      	ldrh	r3, [r7, #12]
 80082de:	059b      	lsls	r3, r3, #22
 80082e0:	d402      	bmi.n	80082e8 <_vfiprintf_r+0x2c>
 80082e2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80082e4:	f7ff fa87 	bl	80077f6 <__retarget_lock_acquire_recursive>
 80082e8:	89bb      	ldrh	r3, [r7, #12]
 80082ea:	071b      	lsls	r3, r3, #28
 80082ec:	d502      	bpl.n	80082f4 <_vfiprintf_r+0x38>
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d113      	bne.n	800831c <_vfiprintf_r+0x60>
 80082f4:	0039      	movs	r1, r7
 80082f6:	9803      	ldr	r0, [sp, #12]
 80082f8:	f000 f93e 	bl	8008578 <__swsetup_r>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d00d      	beq.n	800831c <_vfiprintf_r+0x60>
 8008300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008302:	07db      	lsls	r3, r3, #31
 8008304:	d503      	bpl.n	800830e <_vfiprintf_r+0x52>
 8008306:	2001      	movs	r0, #1
 8008308:	4240      	negs	r0, r0
 800830a:	b021      	add	sp, #132	@ 0x84
 800830c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830e:	89bb      	ldrh	r3, [r7, #12]
 8008310:	059b      	lsls	r3, r3, #22
 8008312:	d4f8      	bmi.n	8008306 <_vfiprintf_r+0x4a>
 8008314:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008316:	f7ff fa6f 	bl	80077f8 <__retarget_lock_release_recursive>
 800831a:	e7f4      	b.n	8008306 <_vfiprintf_r+0x4a>
 800831c:	2300      	movs	r3, #0
 800831e:	ac08      	add	r4, sp, #32
 8008320:	6163      	str	r3, [r4, #20]
 8008322:	3320      	adds	r3, #32
 8008324:	7663      	strb	r3, [r4, #25]
 8008326:	3310      	adds	r3, #16
 8008328:	76a3      	strb	r3, [r4, #26]
 800832a:	9607      	str	r6, [sp, #28]
 800832c:	002e      	movs	r6, r5
 800832e:	7833      	ldrb	r3, [r6, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <_vfiprintf_r+0x7c>
 8008334:	2b25      	cmp	r3, #37	@ 0x25
 8008336:	d148      	bne.n	80083ca <_vfiprintf_r+0x10e>
 8008338:	1b73      	subs	r3, r6, r5
 800833a:	9305      	str	r3, [sp, #20]
 800833c:	42ae      	cmp	r6, r5
 800833e:	d00b      	beq.n	8008358 <_vfiprintf_r+0x9c>
 8008340:	002a      	movs	r2, r5
 8008342:	0039      	movs	r1, r7
 8008344:	9803      	ldr	r0, [sp, #12]
 8008346:	f7ff ffa7 	bl	8008298 <__sfputs_r>
 800834a:	3001      	adds	r0, #1
 800834c:	d100      	bne.n	8008350 <_vfiprintf_r+0x94>
 800834e:	e0ae      	b.n	80084ae <_vfiprintf_r+0x1f2>
 8008350:	6963      	ldr	r3, [r4, #20]
 8008352:	9a05      	ldr	r2, [sp, #20]
 8008354:	189b      	adds	r3, r3, r2
 8008356:	6163      	str	r3, [r4, #20]
 8008358:	7833      	ldrb	r3, [r6, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d100      	bne.n	8008360 <_vfiprintf_r+0xa4>
 800835e:	e0a6      	b.n	80084ae <_vfiprintf_r+0x1f2>
 8008360:	2201      	movs	r2, #1
 8008362:	2300      	movs	r3, #0
 8008364:	4252      	negs	r2, r2
 8008366:	6062      	str	r2, [r4, #4]
 8008368:	a904      	add	r1, sp, #16
 800836a:	3254      	adds	r2, #84	@ 0x54
 800836c:	1852      	adds	r2, r2, r1
 800836e:	1c75      	adds	r5, r6, #1
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	60e3      	str	r3, [r4, #12]
 8008374:	60a3      	str	r3, [r4, #8]
 8008376:	7013      	strb	r3, [r2, #0]
 8008378:	65a3      	str	r3, [r4, #88]	@ 0x58
 800837a:	4b59      	ldr	r3, [pc, #356]	@ (80084e0 <_vfiprintf_r+0x224>)
 800837c:	2205      	movs	r2, #5
 800837e:	0018      	movs	r0, r3
 8008380:	7829      	ldrb	r1, [r5, #0]
 8008382:	9305      	str	r3, [sp, #20]
 8008384:	f7ff ff32 	bl	80081ec <memchr>
 8008388:	1c6e      	adds	r6, r5, #1
 800838a:	2800      	cmp	r0, #0
 800838c:	d11f      	bne.n	80083ce <_vfiprintf_r+0x112>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	06d3      	lsls	r3, r2, #27
 8008392:	d504      	bpl.n	800839e <_vfiprintf_r+0xe2>
 8008394:	2353      	movs	r3, #83	@ 0x53
 8008396:	a904      	add	r1, sp, #16
 8008398:	185b      	adds	r3, r3, r1
 800839a:	2120      	movs	r1, #32
 800839c:	7019      	strb	r1, [r3, #0]
 800839e:	0713      	lsls	r3, r2, #28
 80083a0:	d504      	bpl.n	80083ac <_vfiprintf_r+0xf0>
 80083a2:	2353      	movs	r3, #83	@ 0x53
 80083a4:	a904      	add	r1, sp, #16
 80083a6:	185b      	adds	r3, r3, r1
 80083a8:	212b      	movs	r1, #43	@ 0x2b
 80083aa:	7019      	strb	r1, [r3, #0]
 80083ac:	782b      	ldrb	r3, [r5, #0]
 80083ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80083b0:	d016      	beq.n	80083e0 <_vfiprintf_r+0x124>
 80083b2:	002e      	movs	r6, r5
 80083b4:	2100      	movs	r1, #0
 80083b6:	200a      	movs	r0, #10
 80083b8:	68e3      	ldr	r3, [r4, #12]
 80083ba:	7832      	ldrb	r2, [r6, #0]
 80083bc:	1c75      	adds	r5, r6, #1
 80083be:	3a30      	subs	r2, #48	@ 0x30
 80083c0:	2a09      	cmp	r2, #9
 80083c2:	d950      	bls.n	8008466 <_vfiprintf_r+0x1aa>
 80083c4:	2900      	cmp	r1, #0
 80083c6:	d111      	bne.n	80083ec <_vfiprintf_r+0x130>
 80083c8:	e017      	b.n	80083fa <_vfiprintf_r+0x13e>
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7af      	b.n	800832e <_vfiprintf_r+0x72>
 80083ce:	9b05      	ldr	r3, [sp, #20]
 80083d0:	6822      	ldr	r2, [r4, #0]
 80083d2:	1ac0      	subs	r0, r0, r3
 80083d4:	2301      	movs	r3, #1
 80083d6:	4083      	lsls	r3, r0
 80083d8:	4313      	orrs	r3, r2
 80083da:	0035      	movs	r5, r6
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	e7cc      	b.n	800837a <_vfiprintf_r+0xbe>
 80083e0:	9b07      	ldr	r3, [sp, #28]
 80083e2:	1d19      	adds	r1, r3, #4
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	9107      	str	r1, [sp, #28]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	db01      	blt.n	80083f0 <_vfiprintf_r+0x134>
 80083ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083ee:	e004      	b.n	80083fa <_vfiprintf_r+0x13e>
 80083f0:	425b      	negs	r3, r3
 80083f2:	60e3      	str	r3, [r4, #12]
 80083f4:	2302      	movs	r3, #2
 80083f6:	4313      	orrs	r3, r2
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	7833      	ldrb	r3, [r6, #0]
 80083fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80083fe:	d10c      	bne.n	800841a <_vfiprintf_r+0x15e>
 8008400:	7873      	ldrb	r3, [r6, #1]
 8008402:	2b2a      	cmp	r3, #42	@ 0x2a
 8008404:	d134      	bne.n	8008470 <_vfiprintf_r+0x1b4>
 8008406:	9b07      	ldr	r3, [sp, #28]
 8008408:	3602      	adds	r6, #2
 800840a:	1d1a      	adds	r2, r3, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	9207      	str	r2, [sp, #28]
 8008410:	2b00      	cmp	r3, #0
 8008412:	da01      	bge.n	8008418 <_vfiprintf_r+0x15c>
 8008414:	2301      	movs	r3, #1
 8008416:	425b      	negs	r3, r3
 8008418:	9309      	str	r3, [sp, #36]	@ 0x24
 800841a:	4d32      	ldr	r5, [pc, #200]	@ (80084e4 <_vfiprintf_r+0x228>)
 800841c:	2203      	movs	r2, #3
 800841e:	0028      	movs	r0, r5
 8008420:	7831      	ldrb	r1, [r6, #0]
 8008422:	f7ff fee3 	bl	80081ec <memchr>
 8008426:	2800      	cmp	r0, #0
 8008428:	d006      	beq.n	8008438 <_vfiprintf_r+0x17c>
 800842a:	2340      	movs	r3, #64	@ 0x40
 800842c:	1b40      	subs	r0, r0, r5
 800842e:	4083      	lsls	r3, r0
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	3601      	adds	r6, #1
 8008434:	4313      	orrs	r3, r2
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	7831      	ldrb	r1, [r6, #0]
 800843a:	2206      	movs	r2, #6
 800843c:	482a      	ldr	r0, [pc, #168]	@ (80084e8 <_vfiprintf_r+0x22c>)
 800843e:	1c75      	adds	r5, r6, #1
 8008440:	7621      	strb	r1, [r4, #24]
 8008442:	f7ff fed3 	bl	80081ec <memchr>
 8008446:	2800      	cmp	r0, #0
 8008448:	d040      	beq.n	80084cc <_vfiprintf_r+0x210>
 800844a:	4b28      	ldr	r3, [pc, #160]	@ (80084ec <_vfiprintf_r+0x230>)
 800844c:	2b00      	cmp	r3, #0
 800844e:	d122      	bne.n	8008496 <_vfiprintf_r+0x1da>
 8008450:	2207      	movs	r2, #7
 8008452:	9b07      	ldr	r3, [sp, #28]
 8008454:	3307      	adds	r3, #7
 8008456:	4393      	bics	r3, r2
 8008458:	3308      	adds	r3, #8
 800845a:	9307      	str	r3, [sp, #28]
 800845c:	6963      	ldr	r3, [r4, #20]
 800845e:	9a04      	ldr	r2, [sp, #16]
 8008460:	189b      	adds	r3, r3, r2
 8008462:	6163      	str	r3, [r4, #20]
 8008464:	e762      	b.n	800832c <_vfiprintf_r+0x70>
 8008466:	4343      	muls	r3, r0
 8008468:	002e      	movs	r6, r5
 800846a:	2101      	movs	r1, #1
 800846c:	189b      	adds	r3, r3, r2
 800846e:	e7a4      	b.n	80083ba <_vfiprintf_r+0xfe>
 8008470:	2300      	movs	r3, #0
 8008472:	200a      	movs	r0, #10
 8008474:	0019      	movs	r1, r3
 8008476:	3601      	adds	r6, #1
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	7832      	ldrb	r2, [r6, #0]
 800847c:	1c75      	adds	r5, r6, #1
 800847e:	3a30      	subs	r2, #48	@ 0x30
 8008480:	2a09      	cmp	r2, #9
 8008482:	d903      	bls.n	800848c <_vfiprintf_r+0x1d0>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0c8      	beq.n	800841a <_vfiprintf_r+0x15e>
 8008488:	9109      	str	r1, [sp, #36]	@ 0x24
 800848a:	e7c6      	b.n	800841a <_vfiprintf_r+0x15e>
 800848c:	4341      	muls	r1, r0
 800848e:	002e      	movs	r6, r5
 8008490:	2301      	movs	r3, #1
 8008492:	1889      	adds	r1, r1, r2
 8008494:	e7f1      	b.n	800847a <_vfiprintf_r+0x1be>
 8008496:	aa07      	add	r2, sp, #28
 8008498:	9200      	str	r2, [sp, #0]
 800849a:	0021      	movs	r1, r4
 800849c:	003a      	movs	r2, r7
 800849e:	4b14      	ldr	r3, [pc, #80]	@ (80084f0 <_vfiprintf_r+0x234>)
 80084a0:	9803      	ldr	r0, [sp, #12]
 80084a2:	e000      	b.n	80084a6 <_vfiprintf_r+0x1ea>
 80084a4:	bf00      	nop
 80084a6:	9004      	str	r0, [sp, #16]
 80084a8:	9b04      	ldr	r3, [sp, #16]
 80084aa:	3301      	adds	r3, #1
 80084ac:	d1d6      	bne.n	800845c <_vfiprintf_r+0x1a0>
 80084ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084b0:	07db      	lsls	r3, r3, #31
 80084b2:	d405      	bmi.n	80084c0 <_vfiprintf_r+0x204>
 80084b4:	89bb      	ldrh	r3, [r7, #12]
 80084b6:	059b      	lsls	r3, r3, #22
 80084b8:	d402      	bmi.n	80084c0 <_vfiprintf_r+0x204>
 80084ba:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80084bc:	f7ff f99c 	bl	80077f8 <__retarget_lock_release_recursive>
 80084c0:	89bb      	ldrh	r3, [r7, #12]
 80084c2:	065b      	lsls	r3, r3, #25
 80084c4:	d500      	bpl.n	80084c8 <_vfiprintf_r+0x20c>
 80084c6:	e71e      	b.n	8008306 <_vfiprintf_r+0x4a>
 80084c8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80084ca:	e71e      	b.n	800830a <_vfiprintf_r+0x4e>
 80084cc:	aa07      	add	r2, sp, #28
 80084ce:	9200      	str	r2, [sp, #0]
 80084d0:	0021      	movs	r1, r4
 80084d2:	003a      	movs	r2, r7
 80084d4:	4b06      	ldr	r3, [pc, #24]	@ (80084f0 <_vfiprintf_r+0x234>)
 80084d6:	9803      	ldr	r0, [sp, #12]
 80084d8:	f7ff fc92 	bl	8007e00 <_printf_i>
 80084dc:	e7e3      	b.n	80084a6 <_vfiprintf_r+0x1ea>
 80084de:	46c0      	nop			@ (mov r8, r8)
 80084e0:	08008c34 	.word	0x08008c34
 80084e4:	08008c3a 	.word	0x08008c3a
 80084e8:	08008c3e 	.word	0x08008c3e
 80084ec:	00000000 	.word	0x00000000
 80084f0:	08008299 	.word	0x08008299

080084f4 <__swbuf_r>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	0006      	movs	r6, r0
 80084f8:	000d      	movs	r5, r1
 80084fa:	0014      	movs	r4, r2
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d004      	beq.n	800850a <__swbuf_r+0x16>
 8008500:	6a03      	ldr	r3, [r0, #32]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <__swbuf_r+0x16>
 8008506:	f7fe fff5 	bl	80074f4 <__sinit>
 800850a:	69a3      	ldr	r3, [r4, #24]
 800850c:	60a3      	str	r3, [r4, #8]
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	071b      	lsls	r3, r3, #28
 8008512:	d502      	bpl.n	800851a <__swbuf_r+0x26>
 8008514:	6923      	ldr	r3, [r4, #16]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d109      	bne.n	800852e <__swbuf_r+0x3a>
 800851a:	0021      	movs	r1, r4
 800851c:	0030      	movs	r0, r6
 800851e:	f000 f82b 	bl	8008578 <__swsetup_r>
 8008522:	2800      	cmp	r0, #0
 8008524:	d003      	beq.n	800852e <__swbuf_r+0x3a>
 8008526:	2501      	movs	r5, #1
 8008528:	426d      	negs	r5, r5
 800852a:	0028      	movs	r0, r5
 800852c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800852e:	6923      	ldr	r3, [r4, #16]
 8008530:	6820      	ldr	r0, [r4, #0]
 8008532:	b2ef      	uxtb	r7, r5
 8008534:	1ac0      	subs	r0, r0, r3
 8008536:	6963      	ldr	r3, [r4, #20]
 8008538:	b2ed      	uxtb	r5, r5
 800853a:	4283      	cmp	r3, r0
 800853c:	dc05      	bgt.n	800854a <__swbuf_r+0x56>
 800853e:	0021      	movs	r1, r4
 8008540:	0030      	movs	r0, r6
 8008542:	f7ff fdf1 	bl	8008128 <_fflush_r>
 8008546:	2800      	cmp	r0, #0
 8008548:	d1ed      	bne.n	8008526 <__swbuf_r+0x32>
 800854a:	68a3      	ldr	r3, [r4, #8]
 800854c:	3001      	adds	r0, #1
 800854e:	3b01      	subs	r3, #1
 8008550:	60a3      	str	r3, [r4, #8]
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	6022      	str	r2, [r4, #0]
 8008558:	701f      	strb	r7, [r3, #0]
 800855a:	6963      	ldr	r3, [r4, #20]
 800855c:	4283      	cmp	r3, r0
 800855e:	d004      	beq.n	800856a <__swbuf_r+0x76>
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	07db      	lsls	r3, r3, #31
 8008564:	d5e1      	bpl.n	800852a <__swbuf_r+0x36>
 8008566:	2d0a      	cmp	r5, #10
 8008568:	d1df      	bne.n	800852a <__swbuf_r+0x36>
 800856a:	0021      	movs	r1, r4
 800856c:	0030      	movs	r0, r6
 800856e:	f7ff fddb 	bl	8008128 <_fflush_r>
 8008572:	2800      	cmp	r0, #0
 8008574:	d0d9      	beq.n	800852a <__swbuf_r+0x36>
 8008576:	e7d6      	b.n	8008526 <__swbuf_r+0x32>

08008578 <__swsetup_r>:
 8008578:	4b2d      	ldr	r3, [pc, #180]	@ (8008630 <__swsetup_r+0xb8>)
 800857a:	b570      	push	{r4, r5, r6, lr}
 800857c:	0005      	movs	r5, r0
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	000c      	movs	r4, r1
 8008582:	2800      	cmp	r0, #0
 8008584:	d004      	beq.n	8008590 <__swsetup_r+0x18>
 8008586:	6a03      	ldr	r3, [r0, #32]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <__swsetup_r+0x18>
 800858c:	f7fe ffb2 	bl	80074f4 <__sinit>
 8008590:	230c      	movs	r3, #12
 8008592:	5ee2      	ldrsh	r2, [r4, r3]
 8008594:	0713      	lsls	r3, r2, #28
 8008596:	d423      	bmi.n	80085e0 <__swsetup_r+0x68>
 8008598:	06d3      	lsls	r3, r2, #27
 800859a:	d407      	bmi.n	80085ac <__swsetup_r+0x34>
 800859c:	2309      	movs	r3, #9
 800859e:	602b      	str	r3, [r5, #0]
 80085a0:	2340      	movs	r3, #64	@ 0x40
 80085a2:	2001      	movs	r0, #1
 80085a4:	4313      	orrs	r3, r2
 80085a6:	81a3      	strh	r3, [r4, #12]
 80085a8:	4240      	negs	r0, r0
 80085aa:	e03a      	b.n	8008622 <__swsetup_r+0xaa>
 80085ac:	0752      	lsls	r2, r2, #29
 80085ae:	d513      	bpl.n	80085d8 <__swsetup_r+0x60>
 80085b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085b2:	2900      	cmp	r1, #0
 80085b4:	d008      	beq.n	80085c8 <__swsetup_r+0x50>
 80085b6:	0023      	movs	r3, r4
 80085b8:	3344      	adds	r3, #68	@ 0x44
 80085ba:	4299      	cmp	r1, r3
 80085bc:	d002      	beq.n	80085c4 <__swsetup_r+0x4c>
 80085be:	0028      	movs	r0, r5
 80085c0:	f7ff f94a 	bl	8007858 <_free_r>
 80085c4:	2300      	movs	r3, #0
 80085c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80085c8:	2224      	movs	r2, #36	@ 0x24
 80085ca:	89a3      	ldrh	r3, [r4, #12]
 80085cc:	4393      	bics	r3, r2
 80085ce:	81a3      	strh	r3, [r4, #12]
 80085d0:	2300      	movs	r3, #0
 80085d2:	6063      	str	r3, [r4, #4]
 80085d4:	6923      	ldr	r3, [r4, #16]
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	2308      	movs	r3, #8
 80085da:	89a2      	ldrh	r2, [r4, #12]
 80085dc:	4313      	orrs	r3, r2
 80085de:	81a3      	strh	r3, [r4, #12]
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10b      	bne.n	80085fe <__swsetup_r+0x86>
 80085e6:	21a0      	movs	r1, #160	@ 0xa0
 80085e8:	2280      	movs	r2, #128	@ 0x80
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	0089      	lsls	r1, r1, #2
 80085ee:	0092      	lsls	r2, r2, #2
 80085f0:	400b      	ands	r3, r1
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d003      	beq.n	80085fe <__swsetup_r+0x86>
 80085f6:	0021      	movs	r1, r4
 80085f8:	0028      	movs	r0, r5
 80085fa:	f000 f897 	bl	800872c <__smakebuf_r>
 80085fe:	230c      	movs	r3, #12
 8008600:	5ee2      	ldrsh	r2, [r4, r3]
 8008602:	2101      	movs	r1, #1
 8008604:	0013      	movs	r3, r2
 8008606:	400b      	ands	r3, r1
 8008608:	420a      	tst	r2, r1
 800860a:	d00b      	beq.n	8008624 <__swsetup_r+0xac>
 800860c:	2300      	movs	r3, #0
 800860e:	60a3      	str	r3, [r4, #8]
 8008610:	6963      	ldr	r3, [r4, #20]
 8008612:	425b      	negs	r3, r3
 8008614:	61a3      	str	r3, [r4, #24]
 8008616:	2000      	movs	r0, #0
 8008618:	6923      	ldr	r3, [r4, #16]
 800861a:	4283      	cmp	r3, r0
 800861c:	d101      	bne.n	8008622 <__swsetup_r+0xaa>
 800861e:	0613      	lsls	r3, r2, #24
 8008620:	d4be      	bmi.n	80085a0 <__swsetup_r+0x28>
 8008622:	bd70      	pop	{r4, r5, r6, pc}
 8008624:	0791      	lsls	r1, r2, #30
 8008626:	d400      	bmi.n	800862a <__swsetup_r+0xb2>
 8008628:	6963      	ldr	r3, [r4, #20]
 800862a:	60a3      	str	r3, [r4, #8]
 800862c:	e7f3      	b.n	8008616 <__swsetup_r+0x9e>
 800862e:	46c0      	nop			@ (mov r8, r8)
 8008630:	2000019c 	.word	0x2000019c

08008634 <_raise_r>:
 8008634:	b570      	push	{r4, r5, r6, lr}
 8008636:	0004      	movs	r4, r0
 8008638:	000d      	movs	r5, r1
 800863a:	291f      	cmp	r1, #31
 800863c:	d904      	bls.n	8008648 <_raise_r+0x14>
 800863e:	2316      	movs	r3, #22
 8008640:	6003      	str	r3, [r0, #0]
 8008642:	2001      	movs	r0, #1
 8008644:	4240      	negs	r0, r0
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <_raise_r+0x24>
 800864e:	008a      	lsls	r2, r1, #2
 8008650:	189b      	adds	r3, r3, r2
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	2a00      	cmp	r2, #0
 8008656:	d108      	bne.n	800866a <_raise_r+0x36>
 8008658:	0020      	movs	r0, r4
 800865a:	f000 f831 	bl	80086c0 <_getpid_r>
 800865e:	002a      	movs	r2, r5
 8008660:	0001      	movs	r1, r0
 8008662:	0020      	movs	r0, r4
 8008664:	f000 f81a 	bl	800869c <_kill_r>
 8008668:	e7ed      	b.n	8008646 <_raise_r+0x12>
 800866a:	2a01      	cmp	r2, #1
 800866c:	d009      	beq.n	8008682 <_raise_r+0x4e>
 800866e:	1c51      	adds	r1, r2, #1
 8008670:	d103      	bne.n	800867a <_raise_r+0x46>
 8008672:	2316      	movs	r3, #22
 8008674:	6003      	str	r3, [r0, #0]
 8008676:	2001      	movs	r0, #1
 8008678:	e7e5      	b.n	8008646 <_raise_r+0x12>
 800867a:	2100      	movs	r1, #0
 800867c:	0028      	movs	r0, r5
 800867e:	6019      	str	r1, [r3, #0]
 8008680:	4790      	blx	r2
 8008682:	2000      	movs	r0, #0
 8008684:	e7df      	b.n	8008646 <_raise_r+0x12>
	...

08008688 <raise>:
 8008688:	b510      	push	{r4, lr}
 800868a:	4b03      	ldr	r3, [pc, #12]	@ (8008698 <raise+0x10>)
 800868c:	0001      	movs	r1, r0
 800868e:	6818      	ldr	r0, [r3, #0]
 8008690:	f7ff ffd0 	bl	8008634 <_raise_r>
 8008694:	bd10      	pop	{r4, pc}
 8008696:	46c0      	nop			@ (mov r8, r8)
 8008698:	2000019c 	.word	0x2000019c

0800869c <_kill_r>:
 800869c:	2300      	movs	r3, #0
 800869e:	b570      	push	{r4, r5, r6, lr}
 80086a0:	4d06      	ldr	r5, [pc, #24]	@ (80086bc <_kill_r+0x20>)
 80086a2:	0004      	movs	r4, r0
 80086a4:	0008      	movs	r0, r1
 80086a6:	0011      	movs	r1, r2
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	f7f9 fcb9 	bl	8002020 <_kill>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d103      	bne.n	80086ba <_kill_r+0x1e>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d000      	beq.n	80086ba <_kill_r+0x1e>
 80086b8:	6023      	str	r3, [r4, #0]
 80086ba:	bd70      	pop	{r4, r5, r6, pc}
 80086bc:	20001740 	.word	0x20001740

080086c0 <_getpid_r>:
 80086c0:	b510      	push	{r4, lr}
 80086c2:	f7f9 fcab 	bl	800201c <_getpid>
 80086c6:	bd10      	pop	{r4, pc}

080086c8 <_malloc_usable_size_r>:
 80086c8:	1f0b      	subs	r3, r1, #4
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	1f18      	subs	r0, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da01      	bge.n	80086d6 <_malloc_usable_size_r+0xe>
 80086d2:	580b      	ldr	r3, [r1, r0]
 80086d4:	18c0      	adds	r0, r0, r3
 80086d6:	4770      	bx	lr

080086d8 <__swhatbuf_r>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	000e      	movs	r6, r1
 80086dc:	001d      	movs	r5, r3
 80086de:	230e      	movs	r3, #14
 80086e0:	5ec9      	ldrsh	r1, [r1, r3]
 80086e2:	0014      	movs	r4, r2
 80086e4:	b096      	sub	sp, #88	@ 0x58
 80086e6:	2900      	cmp	r1, #0
 80086e8:	da0c      	bge.n	8008704 <__swhatbuf_r+0x2c>
 80086ea:	89b2      	ldrh	r2, [r6, #12]
 80086ec:	2380      	movs	r3, #128	@ 0x80
 80086ee:	0011      	movs	r1, r2
 80086f0:	4019      	ands	r1, r3
 80086f2:	421a      	tst	r2, r3
 80086f4:	d114      	bne.n	8008720 <__swhatbuf_r+0x48>
 80086f6:	2380      	movs	r3, #128	@ 0x80
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	2000      	movs	r0, #0
 80086fc:	6029      	str	r1, [r5, #0]
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	b016      	add	sp, #88	@ 0x58
 8008702:	bd70      	pop	{r4, r5, r6, pc}
 8008704:	466a      	mov	r2, sp
 8008706:	f000 f853 	bl	80087b0 <_fstat_r>
 800870a:	2800      	cmp	r0, #0
 800870c:	dbed      	blt.n	80086ea <__swhatbuf_r+0x12>
 800870e:	23f0      	movs	r3, #240	@ 0xf0
 8008710:	9901      	ldr	r1, [sp, #4]
 8008712:	021b      	lsls	r3, r3, #8
 8008714:	4019      	ands	r1, r3
 8008716:	4b04      	ldr	r3, [pc, #16]	@ (8008728 <__swhatbuf_r+0x50>)
 8008718:	18c9      	adds	r1, r1, r3
 800871a:	424b      	negs	r3, r1
 800871c:	4159      	adcs	r1, r3
 800871e:	e7ea      	b.n	80086f6 <__swhatbuf_r+0x1e>
 8008720:	2100      	movs	r1, #0
 8008722:	2340      	movs	r3, #64	@ 0x40
 8008724:	e7e9      	b.n	80086fa <__swhatbuf_r+0x22>
 8008726:	46c0      	nop			@ (mov r8, r8)
 8008728:	ffffe000 	.word	0xffffe000

0800872c <__smakebuf_r>:
 800872c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800872e:	2602      	movs	r6, #2
 8008730:	898b      	ldrh	r3, [r1, #12]
 8008732:	0005      	movs	r5, r0
 8008734:	000c      	movs	r4, r1
 8008736:	b085      	sub	sp, #20
 8008738:	4233      	tst	r3, r6
 800873a:	d007      	beq.n	800874c <__smakebuf_r+0x20>
 800873c:	0023      	movs	r3, r4
 800873e:	3347      	adds	r3, #71	@ 0x47
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	6123      	str	r3, [r4, #16]
 8008744:	2301      	movs	r3, #1
 8008746:	6163      	str	r3, [r4, #20]
 8008748:	b005      	add	sp, #20
 800874a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800874c:	ab03      	add	r3, sp, #12
 800874e:	aa02      	add	r2, sp, #8
 8008750:	f7ff ffc2 	bl	80086d8 <__swhatbuf_r>
 8008754:	9f02      	ldr	r7, [sp, #8]
 8008756:	9001      	str	r0, [sp, #4]
 8008758:	0039      	movs	r1, r7
 800875a:	0028      	movs	r0, r5
 800875c:	f7ff f8f2 	bl	8007944 <_malloc_r>
 8008760:	2800      	cmp	r0, #0
 8008762:	d108      	bne.n	8008776 <__smakebuf_r+0x4a>
 8008764:	220c      	movs	r2, #12
 8008766:	5ea3      	ldrsh	r3, [r4, r2]
 8008768:	059a      	lsls	r2, r3, #22
 800876a:	d4ed      	bmi.n	8008748 <__smakebuf_r+0x1c>
 800876c:	2203      	movs	r2, #3
 800876e:	4393      	bics	r3, r2
 8008770:	431e      	orrs	r6, r3
 8008772:	81a6      	strh	r6, [r4, #12]
 8008774:	e7e2      	b.n	800873c <__smakebuf_r+0x10>
 8008776:	2380      	movs	r3, #128	@ 0x80
 8008778:	89a2      	ldrh	r2, [r4, #12]
 800877a:	6020      	str	r0, [r4, #0]
 800877c:	4313      	orrs	r3, r2
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	9b03      	ldr	r3, [sp, #12]
 8008782:	6120      	str	r0, [r4, #16]
 8008784:	6167      	str	r7, [r4, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00c      	beq.n	80087a4 <__smakebuf_r+0x78>
 800878a:	0028      	movs	r0, r5
 800878c:	230e      	movs	r3, #14
 800878e:	5ee1      	ldrsh	r1, [r4, r3]
 8008790:	f000 f820 	bl	80087d4 <_isatty_r>
 8008794:	2800      	cmp	r0, #0
 8008796:	d005      	beq.n	80087a4 <__smakebuf_r+0x78>
 8008798:	2303      	movs	r3, #3
 800879a:	89a2      	ldrh	r2, [r4, #12]
 800879c:	439a      	bics	r2, r3
 800879e:	3b02      	subs	r3, #2
 80087a0:	4313      	orrs	r3, r2
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	9a01      	ldr	r2, [sp, #4]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	81a3      	strh	r3, [r4, #12]
 80087ac:	e7cc      	b.n	8008748 <__smakebuf_r+0x1c>
	...

080087b0 <_fstat_r>:
 80087b0:	2300      	movs	r3, #0
 80087b2:	b570      	push	{r4, r5, r6, lr}
 80087b4:	4d06      	ldr	r5, [pc, #24]	@ (80087d0 <_fstat_r+0x20>)
 80087b6:	0004      	movs	r4, r0
 80087b8:	0008      	movs	r0, r1
 80087ba:	0011      	movs	r1, r2
 80087bc:	602b      	str	r3, [r5, #0]
 80087be:	f7f9 fc5d 	bl	800207c <_fstat>
 80087c2:	1c43      	adds	r3, r0, #1
 80087c4:	d103      	bne.n	80087ce <_fstat_r+0x1e>
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d000      	beq.n	80087ce <_fstat_r+0x1e>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd70      	pop	{r4, r5, r6, pc}
 80087d0:	20001740 	.word	0x20001740

080087d4 <_isatty_r>:
 80087d4:	2300      	movs	r3, #0
 80087d6:	b570      	push	{r4, r5, r6, lr}
 80087d8:	4d06      	ldr	r5, [pc, #24]	@ (80087f4 <_isatty_r+0x20>)
 80087da:	0004      	movs	r4, r0
 80087dc:	0008      	movs	r0, r1
 80087de:	602b      	str	r3, [r5, #0]
 80087e0:	f7f9 fc52 	bl	8002088 <_isatty>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d103      	bne.n	80087f0 <_isatty_r+0x1c>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d000      	beq.n	80087f0 <_isatty_r+0x1c>
 80087ee:	6023      	str	r3, [r4, #0]
 80087f0:	bd70      	pop	{r4, r5, r6, pc}
 80087f2:	46c0      	nop			@ (mov r8, r8)
 80087f4:	20001740 	.word	0x20001740

080087f8 <_init>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	46c0      	nop			@ (mov r8, r8)
 80087fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fe:	bc08      	pop	{r3}
 8008800:	469e      	mov	lr, r3
 8008802:	4770      	bx	lr

08008804 <_fini>:
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008806:	46c0      	nop			@ (mov r8, r8)
 8008808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880a:	bc08      	pop	{r3}
 800880c:	469e      	mov	lr, r3
 800880e:	4770      	bx	lr
