
FAC firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087dc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800889c  0800889c  0000989c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cf4  08008cf4  0000a1ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008cf4  08008cf4  0000a1ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008cf4  08008cf4  0000a1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cf4  08008cf4  00009cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008cf8  08008cf8  00009cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08008cfc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001564  200001ec  08008ee8  0000a1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001750  08008ee8  0000a750  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024461  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005823  00000000  00000000  0002e675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00013743  00000000  00000000  00033e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  000475e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000215c  00000000  00000000  000489e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002076c  00000000  00000000  0004ab3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005b92  00000000  00000000  0006b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00070e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004170  00000000  00000000  00070e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00074ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008884 	.word	0x08008884

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	08008884 	.word	0x08008884

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <initBattery>:

#include "battery.h"

extern ADC_HandleTypeDef hadc;

void initBattery() {
 8000418:	b510      	push	{r4, lr}
	HAL_ADC_Init(&hadc);
 800041a:	4c07      	ldr	r4, [pc, #28]	@ (8000438 <initBattery+0x20>)
 800041c:	0020      	movs	r0, r4
 800041e:	f001 fff5 	bl	800240c <HAL_ADC_Init>
	return 0;
}

uint16_t getADCValue(uint8_t channel) {
	uint16_t adc;
	HAL_ADC_Start(&hadc);
 8000422:	0020      	movs	r0, r4
 8000424:	f002 f896 	bl	8002554 <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc);
 8000428:	0020      	movs	r0, r4
 800042a:	f002 f8df 	bl	80025ec <HAL_ADC_GetValue>
	HAL_ADC_Stop(&hadc);
 800042e:	0020      	movs	r0, r4
 8000430:	f002 f8bc 	bl	80025ac <HAL_ADC_Stop>
}
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	200003a4 	.word	0x200003a4

0800043c <getBatteryConfiguration>:
uint8_t getBatteryConfiguration() {
 800043c:	b570      	push	{r4, r5, r6, lr}
	HAL_ADC_Start(&hadc);
 800043e:	4d16      	ldr	r5, [pc, #88]	@ (8000498 <getBatteryConfiguration+0x5c>)
 8000440:	0028      	movs	r0, r5
 8000442:	f002 f887 	bl	8002554 <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc);
 8000446:	0028      	movs	r0, r5
 8000448:	f002 f8d0 	bl	80025ec <HAL_ADC_GetValue>
 800044c:	0004      	movs	r4, r0
	HAL_ADC_Stop(&hadc);
 800044e:	0028      	movs	r0, r5
 8000450:	f002 f8ac 	bl	80025ac <HAL_ADC_Stop>
uint16_t getBattVoltage() {
	const uint32_t vref = 3300000;		// 3.3V in uV to make the result an integer
	const uint32_t adcRes = 4096;		// 12 bit resolution
	const uint32_t dividerRatio = 3;	// voltage divider in the circuit is 1/3
	uint32_t adc = getADCValue(BATTERY_CHANNEL);
	uint32_t vbat = ((vref / adcRes) * adc * dividerRatio) / 1000;	// /1000 to have the value in mV
 8000454:	21fa      	movs	r1, #250	@ 0xfa
 8000456:	0423      	lsls	r3, r4, #16
 8000458:	0c1a      	lsrs	r2, r3, #16
 800045a:	0b9b      	lsrs	r3, r3, #14
 800045c:	189b      	adds	r3, r3, r2
 800045e:	015b      	lsls	r3, r3, #5
 8000460:	189b      	adds	r3, r3, r2
 8000462:	0118      	lsls	r0, r3, #4
 8000464:	1ac0      	subs	r0, r0, r3
 8000466:	0089      	lsls	r1, r1, #2
 8000468:	f7ff fe60 	bl	800012c <__udivsi3>
	if (vbat >= MIN_1S_VOLTAGE - 200 && vbat <= MAX_1S_VOLTAGE + 200) return 1;	// 200 added (or subtracted) to have some margin
 800046c:	22e1      	movs	r2, #225	@ 0xe1
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <getBatteryConfiguration+0x60>)
	return vbat + COMPENSATION_VALUE;
 8000470:	b280      	uxth	r0, r0
	if (vbat >= MIN_1S_VOLTAGE - 200 && vbat <= MAX_1S_VOLTAGE + 200) return 1;	// 200 added (or subtracted) to have some margin
 8000472:	18c3      	adds	r3, r0, r3
 8000474:	b29b      	uxth	r3, r3
 8000476:	00d2      	lsls	r2, r2, #3
 8000478:	4293      	cmp	r3, r2
 800047a:	d90a      	bls.n	8000492 <getBatteryConfiguration+0x56>
	if (vbat >= MIN_2S_VOLTAGE - 200 && vbat <= MAX_2S_VOLTAGE + 200) return 2;	// 200 added (or subtracted) to have some margin
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <getBatteryConfiguration+0x64>)
 800047e:	22c8      	movs	r2, #200	@ 0xc8
 8000480:	469c      	mov	ip, r3
 8000482:	4460      	add	r0, ip
 8000484:	b283      	uxth	r3, r0
 8000486:	2000      	movs	r0, #0
 8000488:	0112      	lsls	r2, r2, #4
 800048a:	429a      	cmp	r2, r3
 800048c:	4140      	adcs	r0, r0
 800048e:	0040      	lsls	r0, r0, #1
}
 8000490:	bd70      	pop	{r4, r5, r6, pc}
	if (vbat >= MIN_1S_VOLTAGE - 200 && vbat <= MAX_1S_VOLTAGE + 200) return 1;	// 200 added (or subtracted) to have some margin
 8000492:	2001      	movs	r0, #1
 8000494:	e7fc      	b.n	8000490 <getBatteryConfiguration+0x54>
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	200003a4 	.word	0x200003a4
 800049c:	fffff63c 	.word	0xfffff63c
 80004a0:	ffffeb4c 	.word	0xffffeb4c

080004a4 <getBattVoltage>:
uint16_t getBattVoltage() {
 80004a4:	b570      	push	{r4, r5, r6, lr}
	HAL_ADC_Start(&hadc);
 80004a6:	4d0d      	ldr	r5, [pc, #52]	@ (80004dc <getBattVoltage+0x38>)
 80004a8:	0028      	movs	r0, r5
 80004aa:	f002 f853 	bl	8002554 <HAL_ADC_Start>
	adc = HAL_ADC_GetValue(&hadc);
 80004ae:	0028      	movs	r0, r5
 80004b0:	f002 f89c 	bl	80025ec <HAL_ADC_GetValue>
 80004b4:	0004      	movs	r4, r0
	HAL_ADC_Stop(&hadc);
 80004b6:	0028      	movs	r0, r5
 80004b8:	f002 f878 	bl	80025ac <HAL_ADC_Stop>
	uint32_t vbat = ((vref / adcRes) * adc * dividerRatio) / 1000;	// /1000 to have the value in mV
 80004bc:	21fa      	movs	r1, #250	@ 0xfa
 80004be:	0423      	lsls	r3, r4, #16
 80004c0:	0c1a      	lsrs	r2, r3, #16
 80004c2:	0b9b      	lsrs	r3, r3, #14
 80004c4:	189b      	adds	r3, r3, r2
 80004c6:	015b      	lsls	r3, r3, #5
 80004c8:	189b      	adds	r3, r3, r2
 80004ca:	0118      	lsls	r0, r3, #4
 80004cc:	1ac0      	subs	r0, r0, r3
 80004ce:	0089      	lsls	r1, r1, #2
 80004d0:	f7ff fe2c 	bl	800012c <__udivsi3>
	return vbat + COMPENSATION_VALUE;
 80004d4:	3064      	adds	r0, #100	@ 0x64
 80004d6:	b280      	uxth	r0, r0
}
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	200003a4 	.word	0x200003a4

080004e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004e0:	b510      	push	{r4, lr}
 80004e2:	b096      	sub	sp, #88	@ 0x58
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004e4:	2228      	movs	r2, #40	@ 0x28
 80004e6:	2100      	movs	r1, #0
 80004e8:	a80c      	add	r0, sp, #48	@ 0x30
 80004ea:	f007 f8e9 	bl	80076c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004ee:	2210      	movs	r2, #16
 80004f0:	2100      	movs	r1, #0
 80004f2:	a801      	add	r0, sp, #4
 80004f4:	f007 f8e4 	bl	80076c0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80004f8:	2214      	movs	r2, #20
 80004fa:	2100      	movs	r1, #0
 80004fc:	a805      	add	r0, sp, #20
 80004fe:	f007 f8df 	bl	80076c0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14 | RCC_OSCILLATORTYPE_HSE;
 8000502:	2213      	movs	r2, #19
 8000504:	2301      	movs	r3, #1
 8000506:	920a      	str	r2, [sp, #40]	@ 0x28
 8000508:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050a:	2301      	movs	r3, #1
 800050c:	930d      	str	r3, [sp, #52]	@ 0x34
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800050e:	930f      	str	r3, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	2202      	movs	r2, #2
 8000514:	025b      	lsls	r3, r3, #9
 8000516:	9212      	str	r2, [sp, #72]	@ 0x48
 8000518:	9313      	str	r3, [sp, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800051a:	2380      	movs	r3, #128	@ 0x80
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800051c:	2410      	movs	r4, #16
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800051e:	035b      	lsls	r3, r3, #13
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000520:	a80a      	add	r0, sp, #40	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	940e      	str	r4, [sp, #56]	@ 0x38
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000524:	9410      	str	r4, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000526:	9314      	str	r3, [sp, #80]	@ 0x50
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000528:	f004 f894 	bl	8004654 <HAL_RCC_OscConfig>
 800052c:	2800      	cmp	r0, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000532:	e7fe      	b.n	8000532 <SystemClock_Config+0x52>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000534:	2307      	movs	r3, #7
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000538:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053a:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053c:	3b05      	subs	r3, #5
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800053e:	2101      	movs	r1, #1
 8000540:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000542:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000544:	f004 faea 	bl	8004b1c <HAL_RCC_ClockConfig>
 8000548:	2800      	cmp	r0, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x70>
 800054c:	b672      	cpsid	i
	while (1) {
 800054e:	e7fe      	b.n	800054e <SystemClock_Config+0x6e>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_I2C1;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <SystemClock_Config+0x8c>)
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000552:	9008      	str	r0, [sp, #32]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_I2C1;
 8000554:	9305      	str	r3, [sp, #20]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000556:	2380      	movs	r3, #128	@ 0x80
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000558:	a805      	add	r0, sp, #20
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800055a:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800055c:	f004 fb84 	bl	8004c68 <HAL_RCCEx_PeriphCLKConfig>
 8000560:	2800      	cmp	r0, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x88>
 8000564:	b672      	cpsid	i
	while (1) {
 8000566:	e7fe      	b.n	8000566 <SystemClock_Config+0x86>
}
 8000568:	b016      	add	sp, #88	@ 0x58
 800056a:	bd10      	pop	{r4, pc}
 800056c:	00020020 	.word	0x00020020

08000570 <main>:
int main(void) {
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	46de      	mov	lr, fp
 8000574:	4645      	mov	r5, r8
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	b5e0      	push	{r5, r6, r7, lr}
 800057c:	b0b1      	sub	sp, #196	@ 0xc4
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800057e:	ac28      	add	r4, sp, #160	@ 0xa0
	HAL_Init();
 8000580:	f001 fe40 	bl	8002204 <HAL_Init>
	SystemClock_Config();
 8000584:	f7ff ffac 	bl	80004e0 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000588:	2214      	movs	r2, #20
 800058a:	2100      	movs	r1, #0
 800058c:	0020      	movs	r0, r4
 800058e:	f007 f897 	bl	80076c0 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2180      	movs	r1, #128	@ 0x80
 8000594:	4bcc      	ldr	r3, [pc, #816]	@ (80008c8 <main+0x358>)
 8000596:	0309      	lsls	r1, r1, #12
 8000598:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 800059a:	2580      	movs	r5, #128	@ 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800059c:	430a      	orrs	r2, r1
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin,
 80005a2:	27fc      	movs	r7, #252	@ 0xfc
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005a4:	400a      	ands	r2, r1
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	2180      	movs	r1, #128	@ 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80005aa:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	03c9      	lsls	r1, r1, #15
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005b6:	022d      	lsls	r5, r5, #8
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005b8:	400a      	ands	r2, r1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2180      	movs	r1, #128	@ 0x80
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005bc:	9218      	str	r2, [sp, #96]	@ 0x60
 80005be:	9a18      	ldr	r2, [sp, #96]	@ 0x60
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	0289      	lsls	r1, r1, #10
 80005c4:	430a      	orrs	r2, r1
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin,
 80005ca:	023f      	lsls	r7, r7, #8
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	400a      	ands	r2, r1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2180      	movs	r1, #128	@ 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80005d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	695a      	ldr	r2, [r3, #20]
 80005d6:	02c9      	lsls	r1, r1, #11
 80005d8:	430a      	orrs	r2, r1
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005e0:	400b      	ands	r3, r1
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005e2:	48ba      	ldr	r0, [pc, #744]	@ (80008cc <main+0x35c>)
 80005e4:	0029      	movs	r1, r5
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80005e8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005ea:	f002 f9db 	bl	80029a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin,
 80005ee:	2200      	movs	r2, #0
 80005f0:	0039      	movs	r1, r7
 80005f2:	48b7      	ldr	r0, [pc, #732]	@ (80008d0 <main+0x360>)
 80005f4:	f002 f9d6 	bl	80029a4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2600      	movs	r6, #0
	GPIO_InitStruct.Pin = U_LED_Pin;
 80005fa:	9528      	str	r5, [sp, #160]	@ 0xa0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2501      	movs	r5, #1
	HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 80005fe:	0021      	movs	r1, r4
 8000600:	48b2      	ldr	r0, [pc, #712]	@ (80008cc <main+0x35c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	6065      	str	r5, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	60a6      	str	r6, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	60e6      	str	r6, [r4, #12]
	HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 8000608:	f002 f8c4 	bl	8002794 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800060c:	23c4      	movs	r3, #196	@ 0xc4
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 800060e:	0021      	movs	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000610:	039b      	lsls	r3, r3, #14
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000612:	48af      	ldr	r0, [pc, #700]	@ (80008d0 <main+0x360>)
	GPIO_InitStruct.Pin = CH1_Pin;
 8000614:	9528      	str	r5, [sp, #160]	@ 0xa0
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000616:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000618:	60a5      	str	r5, [r4, #8]
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 800061a:	f002 f8bb 	bl	8002794 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CH2_Pin | CH3_Pin | CH4_Pin;
 800061e:	230e      	movs	r3, #14
 8000620:	9328      	str	r3, [sp, #160]	@ 0xa0
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000622:	2384      	movs	r3, #132	@ 0x84
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	0021      	movs	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000626:	039b      	lsls	r3, r3, #14
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	48a9      	ldr	r0, [pc, #676]	@ (80008d0 <main+0x360>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062a:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	60a5      	str	r5, [r4, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f002 f8b1 	bl	8002794 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	0021      	movs	r1, r4
 8000634:	48a6      	ldr	r0, [pc, #664]	@ (80008d0 <main+0x360>)
	GPIO_InitStruct.Pin = SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin;
 8000636:	9728      	str	r7, [sp, #160]	@ 0xa0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	6065      	str	r5, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	60a6      	str	r6, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	60e6      	str	r6, [r4, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063e:	f002 f8a9 	bl	8002794 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2005      	movs	r0, #5
 8000648:	f002 f854 	bl	80026f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800064c:	2005      	movs	r0, #5
 800064e:	f002 f87b 	bl	8002748 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2006      	movs	r0, #6
 8000658:	f002 f84c 	bl	80026f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800065c:	2006      	movs	r0, #6
 800065e:	f002 f873 	bl	8002748 <HAL_NVIC_EnableIRQ>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000662:	221c      	movs	r2, #28
 8000664:	2100      	movs	r1, #0
 8000666:	a821      	add	r0, sp, #132	@ 0x84
 8000668:	f007 f82a 	bl	80076c0 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800066c:	2220      	movs	r2, #32
 800066e:	2100      	movs	r1, #0
 8000670:	0020      	movs	r0, r4
 8000672:	f007 f825 	bl	80076c0 <memset>
	htim16.Instance = TIM16;
 8000676:	4d97      	ldr	r5, [pc, #604]	@ (80008d4 <main+0x364>)
 8000678:	4b97      	ldr	r3, [pc, #604]	@ (80008d8 <main+0x368>)
	htim16.Init.Period = 10000 - 1;
 800067a:	4f98      	ldr	r7, [pc, #608]	@ (80008dc <main+0x36c>)
	htim16.Instance = TIM16;
 800067c:	602b      	str	r3, [r5, #0]
	htim16.Init.Prescaler = 24 - 1;
 800067e:	2317      	movs	r3, #23
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000680:	0028      	movs	r0, r5
	htim16.Init.Prescaler = 24 - 1;
 8000682:	4698      	mov	r8, r3
 8000684:	606b      	str	r3, [r5, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	60ae      	str	r6, [r5, #8]
	htim16.Init.Period = 10000 - 1;
 8000688:	60ef      	str	r7, [r5, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068a:	612e      	str	r6, [r5, #16]
	htim16.Init.RepetitionCounter = 0;
 800068c:	616e      	str	r6, [r5, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	61ae      	str	r6, [r5, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000690:	f004 fbc2 	bl	8004e18 <HAL_TIM_Base_Init>
 8000694:	2800      	cmp	r0, #0
 8000696:	d001      	beq.n	800069c <main+0x12c>
 8000698:	b672      	cpsid	i
	while (1) {
 800069a:	e7fe      	b.n	800069a <main+0x12a>
	if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 800069c:	0028      	movs	r0, r5
 800069e:	f004 fc69 	bl	8004f74 <HAL_TIM_PWM_Init>
 80006a2:	1e02      	subs	r2, r0, #0
 80006a4:	d001      	beq.n	80006aa <main+0x13a>
 80006a6:	b672      	cpsid	i
	while (1) {
 80006a8:	e7fe      	b.n	80006a8 <main+0x138>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006aa:	2360      	movs	r3, #96	@ 0x60
	sConfigOC.Pulse = 0;
 80006ac:	9022      	str	r0, [sp, #136]	@ 0x88
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ae:	9023      	str	r0, [sp, #140]	@ 0x8c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b0:	9024      	str	r0, [sp, #144]	@ 0x90
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b2:	9025      	str	r0, [sp, #148]	@ 0x94
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b4:	9026      	str	r0, [sp, #152]	@ 0x98
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006b6:	9027      	str	r0, [sp, #156]	@ 0x9c
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80006b8:	a921      	add	r1, sp, #132	@ 0x84
 80006ba:	0028      	movs	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	469a      	mov	sl, r3
 80006be:	9321      	str	r3, [sp, #132]	@ 0x84
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80006c0:	f004 fd32 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d001      	beq.n	80006cc <main+0x15c>
 80006c8:	b672      	cpsid	i
	while (1) {
 80006ca:	e7fe      	b.n	80006ca <main+0x15a>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006cc:	2380      	movs	r3, #128	@ 0x80
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ce:	9028      	str	r0, [sp, #160]	@ 0xa0
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006d0:	019b      	lsls	r3, r3, #6
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d2:	6060      	str	r0, [r4, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d4:	60a0      	str	r0, [r4, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80006d6:	60e0      	str	r0, [r4, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006d8:	6120      	str	r0, [r4, #16]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006da:	61e0      	str	r0, [r4, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK) {
 80006dc:	0021      	movs	r1, r4
 80006de:	0028      	movs	r0, r5
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e0:	469b      	mov	fp, r3
 80006e2:	6163      	str	r3, [r4, #20]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK) {
 80006e4:	f004 ff52 	bl	800558c <HAL_TIMEx_ConfigBreakDeadTime>
 80006e8:	1e06      	subs	r6, r0, #0
 80006ea:	d001      	beq.n	80006f0 <main+0x180>
 80006ec:	b672      	cpsid	i
	while (1) {
 80006ee:	e7fe      	b.n	80006ee <main+0x17e>
	HAL_TIM_MspPostInit(&htim16);
 80006f0:	0028      	movs	r0, r5
 80006f2:	f001 fc5f 	bl	8001fb4 <HAL_TIM_MspPostInit>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80006f6:	221c      	movs	r2, #28
 80006f8:	0031      	movs	r1, r6
 80006fa:	a821      	add	r0, sp, #132	@ 0x84
 80006fc:	f006 ffe0 	bl	80076c0 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000700:	2220      	movs	r2, #32
 8000702:	0031      	movs	r1, r6
 8000704:	0020      	movs	r0, r4
 8000706:	f006 ffdb 	bl	80076c0 <memset>
	htim17.Instance = TIM17;
 800070a:	4b75      	ldr	r3, [pc, #468]	@ (80008e0 <main+0x370>)
 800070c:	4699      	mov	r9, r3
 800070e:	464a      	mov	r2, r9
 8000710:	4b74      	ldr	r3, [pc, #464]	@ (80008e4 <main+0x374>)
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000712:	4648      	mov	r0, r9
	htim17.Instance = TIM17;
 8000714:	6013      	str	r3, [r2, #0]
	htim17.Init.Prescaler = 24 - 1;
 8000716:	464b      	mov	r3, r9
 8000718:	4642      	mov	r2, r8
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	609e      	str	r6, [r3, #8]
	htim17.Init.Prescaler = 24 - 1;
 800071c:	605a      	str	r2, [r3, #4]
	htim17.Init.Period = 10000 - 1;
 800071e:	60df      	str	r7, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	611e      	str	r6, [r3, #16]
	htim17.Init.RepetitionCounter = 0;
 8000722:	615e      	str	r6, [r3, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000724:	619e      	str	r6, [r3, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000726:	f004 fb77 	bl	8004e18 <HAL_TIM_Base_Init>
 800072a:	2800      	cmp	r0, #0
 800072c:	d001      	beq.n	8000732 <main+0x1c2>
 800072e:	b672      	cpsid	i
	while (1) {
 8000730:	e7fe      	b.n	8000730 <main+0x1c0>
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 8000732:	4648      	mov	r0, r9
 8000734:	f004 fc1e 	bl	8004f74 <HAL_TIM_PWM_Init>
 8000738:	1e02      	subs	r2, r0, #0
 800073a:	d001      	beq.n	8000740 <main+0x1d0>
 800073c:	b672      	cpsid	i
	while (1) {
 800073e:	e7fe      	b.n	800073e <main+0x1ce>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000740:	4653      	mov	r3, sl
	sConfigOC.Pulse = 0;
 8000742:	9022      	str	r0, [sp, #136]	@ 0x88
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000744:	9023      	str	r0, [sp, #140]	@ 0x8c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000746:	9024      	str	r0, [sp, #144]	@ 0x90
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000748:	9025      	str	r0, [sp, #148]	@ 0x94
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800074a:	9026      	str	r0, [sp, #152]	@ 0x98
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800074c:	9027      	str	r0, [sp, #156]	@ 0x9c
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800074e:	a921      	add	r1, sp, #132	@ 0x84
 8000750:	4648      	mov	r0, r9
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000752:	9321      	str	r3, [sp, #132]	@ 0x84
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000754:	f004 fce8 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 8000758:	2800      	cmp	r0, #0
 800075a:	d001      	beq.n	8000760 <main+0x1f0>
 800075c:	b672      	cpsid	i
	while (1) {
 800075e:	e7fe      	b.n	800075e <main+0x1ee>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000760:	465b      	mov	r3, fp
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000762:	9028      	str	r0, [sp, #160]	@ 0xa0
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
 8000764:	0021      	movs	r1, r4
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000766:	6060      	str	r0, [r4, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000768:	60a0      	str	r0, [r4, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800076a:	60e0      	str	r0, [r4, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800076c:	6120      	str	r0, [r4, #16]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800076e:	61e0      	str	r0, [r4, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
 8000770:	4648      	mov	r0, r9
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000772:	6163      	str	r3, [r4, #20]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
 8000774:	f004 ff0a 	bl	800558c <HAL_TIMEx_ConfigBreakDeadTime>
 8000778:	1e07      	subs	r7, r0, #0
 800077a:	d001      	beq.n	8000780 <main+0x210>
 800077c:	b672      	cpsid	i
	while (1) {
 800077e:	e7fe      	b.n	800077e <main+0x20e>
	HAL_TIM_MspPostInit(&htim17);
 8000780:	4648      	mov	r0, r9
 8000782:	f001 fc17 	bl	8001fb4 <HAL_TIM_MspPostInit>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000786:	2210      	movs	r2, #16
 8000788:	0039      	movs	r1, r7
 800078a:	a81d      	add	r0, sp, #116	@ 0x74
 800078c:	f006 ff98 	bl	80076c0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000790:	2208      	movs	r2, #8
 8000792:	0039      	movs	r1, r7
 8000794:	a81b      	add	r0, sp, #108	@ 0x6c
 8000796:	f006 ff93 	bl	80076c0 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800079a:	221c      	movs	r2, #28
 800079c:	0039      	movs	r1, r7
 800079e:	a821      	add	r0, sp, #132	@ 0x84
 80007a0:	f006 ff8e 	bl	80076c0 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80007a4:	2220      	movs	r2, #32
 80007a6:	0039      	movs	r1, r7
 80007a8:	0020      	movs	r0, r4
 80007aa:	f006 ff89 	bl	80076c0 <memset>
	htim1.Instance = TIM1;
 80007ae:	4e4e      	ldr	r6, [pc, #312]	@ (80008e8 <main+0x378>)
 80007b0:	4b4e      	ldr	r3, [pc, #312]	@ (80008ec <main+0x37c>)
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80007b2:	0030      	movs	r0, r6
	htim1.Instance = TIM1;
 80007b4:	6033      	str	r3, [r6, #0]
	htim1.Init.Prescaler = 480 - 1;
 80007b6:	23e0      	movs	r3, #224	@ 0xe0
 80007b8:	33ff      	adds	r3, #255	@ 0xff
 80007ba:	6073      	str	r3, [r6, #4]
	htim1.Init.Period = 100 - 1;
 80007bc:	3b7d      	subs	r3, #125	@ 0x7d
 80007be:	3bff      	subs	r3, #255	@ 0xff
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	60b7      	str	r7, [r6, #8]
	htim1.Init.Period = 100 - 1;
 80007c2:	60f3      	str	r3, [r6, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	6137      	str	r7, [r6, #16]
	htim1.Init.RepetitionCounter = 0;
 80007c6:	6177      	str	r7, [r6, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	61b7      	str	r7, [r6, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80007ca:	f004 fb25 	bl	8004e18 <HAL_TIM_Base_Init>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d001      	beq.n	80007d6 <main+0x266>
 80007d2:	b672      	cpsid	i
	while (1) {
 80007d4:	e7fe      	b.n	80007d4 <main+0x264>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d6:	2380      	movs	r3, #128	@ 0x80
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007d8:	0030      	movs	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007da:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007dc:	a91d      	add	r1, sp, #116	@ 0x74
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	931d      	str	r3, [sp, #116]	@ 0x74
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007e0:	f004 fda8 	bl	8005334 <HAL_TIM_ConfigClockSource>
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d001      	beq.n	80007ec <main+0x27c>
 80007e8:	b672      	cpsid	i
	while (1) {
 80007ea:	e7fe      	b.n	80007ea <main+0x27a>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80007ec:	0030      	movs	r0, r6
 80007ee:	f004 fbc1 	bl	8004f74 <HAL_TIM_PWM_Init>
 80007f2:	2800      	cmp	r0, #0
 80007f4:	d001      	beq.n	80007fa <main+0x28a>
 80007f6:	b672      	cpsid	i
	while (1) {
 80007f8:	e7fe      	b.n	80007f8 <main+0x288>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fa:	901b      	str	r0, [sp, #108]	@ 0x6c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	901c      	str	r0, [sp, #112]	@ 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80007fe:	a91b      	add	r1, sp, #108	@ 0x6c
 8000800:	0030      	movs	r0, r6
 8000802:	f004 fe95 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8000806:	1e02      	subs	r2, r0, #0
 8000808:	d001      	beq.n	800080e <main+0x29e>
 800080a:	b672      	cpsid	i
	while (1) {
 800080c:	e7fe      	b.n	800080c <main+0x29c>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080e:	2360      	movs	r3, #96	@ 0x60
	sConfigOC.Pulse = 0;
 8000810:	9022      	str	r0, [sp, #136]	@ 0x88
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000812:	9023      	str	r0, [sp, #140]	@ 0x8c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000814:	9024      	str	r0, [sp, #144]	@ 0x90
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000816:	9025      	str	r0, [sp, #148]	@ 0x94
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000818:	9026      	str	r0, [sp, #152]	@ 0x98
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800081a:	9027      	str	r0, [sp, #156]	@ 0x9c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800081c:	a921      	add	r1, sp, #132	@ 0x84
 800081e:	0030      	movs	r0, r6
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000820:	9321      	str	r3, [sp, #132]	@ 0x84
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000822:	f004 fc81 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 8000826:	2800      	cmp	r0, #0
 8000828:	d001      	beq.n	800082e <main+0x2be>
 800082a:	b672      	cpsid	i
	while (1) {
 800082c:	e7fe      	b.n	800082c <main+0x2bc>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800082e:	2204      	movs	r2, #4
 8000830:	0030      	movs	r0, r6
 8000832:	a921      	add	r1, sp, #132	@ 0x84
 8000834:	f004 fc78 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 8000838:	2800      	cmp	r0, #0
 800083a:	d001      	beq.n	8000840 <main+0x2d0>
 800083c:	b672      	cpsid	i
	while (1) {
 800083e:	e7fe      	b.n	800083e <main+0x2ce>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000840:	2208      	movs	r2, #8
 8000842:	0030      	movs	r0, r6
 8000844:	a921      	add	r1, sp, #132	@ 0x84
 8000846:	f004 fc6f 	bl	8005128 <HAL_TIM_PWM_ConfigChannel>
 800084a:	2800      	cmp	r0, #0
 800084c:	d001      	beq.n	8000852 <main+0x2e2>
 800084e:	b672      	cpsid	i
	while (1) {
 8000850:	e7fe      	b.n	8000850 <main+0x2e0>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000852:	2380      	movs	r3, #128	@ 0x80
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000854:	9028      	str	r0, [sp, #160]	@ 0xa0
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000856:	019b      	lsls	r3, r3, #6
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000858:	6060      	str	r0, [r4, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085a:	60a0      	str	r0, [r4, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800085c:	60e0      	str	r0, [r4, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800085e:	6120      	str	r0, [r4, #16]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000860:	61e0      	str	r0, [r4, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000862:	0021      	movs	r1, r4
 8000864:	0030      	movs	r0, r6
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000866:	6163      	str	r3, [r4, #20]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000868:	f004 fe90 	bl	800558c <HAL_TIMEx_ConfigBreakDeadTime>
 800086c:	4680      	mov	r8, r0
 800086e:	2800      	cmp	r0, #0
 8000870:	d001      	beq.n	8000876 <main+0x306>
 8000872:	b672      	cpsid	i
	while (1) {
 8000874:	e7fe      	b.n	8000874 <main+0x304>
	HAL_TIM_MspPostInit(&htim1);
 8000876:	0030      	movs	r0, r6
 8000878:	f001 fb9c 	bl	8001fb4 <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 800087c:	4f1c      	ldr	r7, [pc, #112]	@ (80008f0 <main+0x380>)
 800087e:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <main+0x384>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000880:	0038      	movs	r0, r7
	hi2c1.Instance = I2C1;
 8000882:	603b      	str	r3, [r7, #0]
	hi2c1.Init.Timing = 0x00201D2B;
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <main+0x388>)
 8000886:	607b      	str	r3, [r7, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000888:	4643      	mov	r3, r8
 800088a:	60bb      	str	r3, [r7, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	2301      	movs	r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	469a      	mov	sl, r3
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000892:	4643      	mov	r3, r8
 8000894:	613b      	str	r3, [r7, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000896:	617b      	str	r3, [r7, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	61bb      	str	r3, [r7, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	61fb      	str	r3, [r7, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	623b      	str	r3, [r7, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800089e:	f002 fc0b 	bl	80030b8 <HAL_I2C_Init>
 80008a2:	1e01      	subs	r1, r0, #0
 80008a4:	d001      	beq.n	80008aa <main+0x33a>
 80008a6:	b672      	cpsid	i
	while (1) {
 80008a8:	e7fe      	b.n	80008a8 <main+0x338>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80008aa:	0038      	movs	r0, r7
 80008ac:	f002 fe5a 	bl	8003564 <HAL_I2CEx_ConfigAnalogFilter>
 80008b0:	1e01      	subs	r1, r0, #0
 80008b2:	d001      	beq.n	80008b8 <main+0x348>
 80008b4:	b672      	cpsid	i
	while (1) {
 80008b6:	e7fe      	b.n	80008b6 <main+0x346>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80008b8:	0038      	movs	r0, r7
 80008ba:	f002 fe79 	bl	80035b0 <HAL_I2CEx_ConfigDigitalFilter>
 80008be:	4680      	mov	r8, r0
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d01b      	beq.n	80008fc <main+0x38c>
 80008c4:	b672      	cpsid	i
	while (1) {
 80008c6:	e7fe      	b.n	80008c6 <main+0x356>
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800
 80008d0:	48000400 	.word	0x48000400
 80008d4:	20000278 	.word	0x20000278
 80008d8:	40014400 	.word	0x40014400
 80008dc:	0000270f 	.word	0x0000270f
 80008e0:	20000230 	.word	0x20000230
 80008e4:	40014800 	.word	0x40014800
 80008e8:	20000308 	.word	0x20000308
 80008ec:	40012c00 	.word	0x40012c00
 80008f0:	20000350 	.word	0x20000350
 80008f4:	40005400 	.word	0x40005400
 80008f8:	00201d2b 	.word	0x00201d2b
	MX_USB_DEVICE_Init();
 80008fc:	f006 fa2e 	bl	8006d5c <MX_USB_DEVICE_Init>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000900:	220c      	movs	r2, #12
 8000902:	4641      	mov	r1, r8
 8000904:	0020      	movs	r0, r4
 8000906:	f006 fedb 	bl	80076c0 <memset>
	hadc.Instance = ADC1;
 800090a:	4fd9      	ldr	r7, [pc, #868]	@ (8000c70 <main+0x700>)
 800090c:	4bd9      	ldr	r3, [pc, #868]	@ (8000c74 <main+0x704>)
	hadc.Init.DMAContinuousRequests = DISABLE;
 800090e:	4642      	mov	r2, r8
	hadc.Instance = ADC1;
 8000910:	603b      	str	r3, [r7, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000912:	4643      	mov	r3, r8
 8000914:	607b      	str	r3, [r7, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000916:	60bb      	str	r3, [r7, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000918:	60fb      	str	r3, [r7, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800091a:	4653      	mov	r3, sl
 800091c:	613b      	str	r3, [r7, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091e:	2304      	movs	r3, #4
 8000920:	617b      	str	r3, [r7, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000922:	2380      	movs	r3, #128	@ 0x80
 8000924:	045b      	lsls	r3, r3, #17
 8000926:	61bb      	str	r3, [r7, #24]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000928:	23c2      	movs	r3, #194	@ 0xc2
 800092a:	33ff      	adds	r3, #255	@ 0xff
 800092c:	61fb      	str	r3, [r7, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092e:	4643      	mov	r3, r8
 8000930:	623b      	str	r3, [r7, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000932:	2324      	movs	r3, #36	@ 0x24
 8000934:	54fa      	strb	r2, [r7, r3]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000936:	4653      	mov	r3, sl
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000938:	0038      	movs	r0, r7
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800093c:	f001 fd66 	bl	800240c <HAL_ADC_Init>
 8000940:	2800      	cmp	r0, #0
 8000942:	d001      	beq.n	8000948 <main+0x3d8>
 8000944:	b672      	cpsid	i
	while (1) {
 8000946:	e7fe      	b.n	8000946 <main+0x3d6>
	sConfig.Channel = ADC_CHANNEL_0;
 8000948:	2300      	movs	r3, #0
 800094a:	9328      	str	r3, [sp, #160]	@ 0xa0
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800094c:	2380      	movs	r3, #128	@ 0x80
 800094e:	015b      	lsls	r3, r3, #5
 8000950:	6063      	str	r3, [r4, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000952:	2380      	movs	r3, #128	@ 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000954:	0021      	movs	r1, r4
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000956:	055b      	lsls	r3, r3, #21
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000958:	0038      	movs	r0, r7
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800095a:	60a3      	str	r3, [r4, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800095c:	f001 fe4a 	bl	80025f4 <HAL_ADC_ConfigChannel>
 8000960:	2800      	cmp	r0, #0
 8000962:	d001      	beq.n	8000968 <main+0x3f8>
 8000964:	b672      	cpsid	i
	while (1) {
 8000966:	e7fe      	b.n	8000966 <main+0x3f6>
	htim6.Instance = TIM6;
 8000968:	4bc3      	ldr	r3, [pc, #780]	@ (8000c78 <main+0x708>)
 800096a:	4698      	mov	r8, r3
 800096c:	4642      	mov	r2, r8
 800096e:	4bc3      	ldr	r3, [pc, #780]	@ (8000c7c <main+0x70c>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	6090      	str	r0, [r2, #8]
	htim6.Instance = TIM6;
 8000972:	6013      	str	r3, [r2, #0]
	htim6.Init.Prescaler = 48 - 1;
 8000974:	232f      	movs	r3, #47	@ 0x2f
 8000976:	6053      	str	r3, [r2, #4]
	htim6.Init.Period = 65535;
 8000978:	4bc1      	ldr	r3, [pc, #772]	@ (8000c80 <main+0x710>)
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	6190      	str	r0, [r2, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800097c:	4640      	mov	r0, r8
	htim6.Init.Period = 65535;
 800097e:	60d3      	str	r3, [r2, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000980:	f004 fa4a 	bl	8004e18 <HAL_TIM_Base_Init>
 8000984:	2800      	cmp	r0, #0
 8000986:	d001      	beq.n	800098c <main+0x41c>
 8000988:	b672      	cpsid	i
	while (1) {
 800098a:	e7fe      	b.n	800098a <main+0x41a>
	initReciever(&htim6);
 800098c:	4640      	mov	r0, r8
 800098e:	f000 fc0d 	bl	80011ac <initReciever>
	initServos(&htim16);	// init servo 1 hv
 8000992:	0028      	movs	r0, r5
 8000994:	f000 fca8 	bl	80012e8 <initServos>
	initServos(&htim17);	// init servo 2
 8000998:	4648      	mov	r0, r9
 800099a:	f000 fca5 	bl	80012e8 <initServos>
	initMotors(&htim1);
 800099e:	0030      	movs	r0, r6
 80009a0:	f000 fa32 	bl	8000e08 <initMotors>
	initBattery(&hadc);
 80009a4:	0038      	movs	r0, r7
 80009a6:	f7ff fd37 	bl	8000418 <initBattery>
	batteryConfiguration = getBatteryConfiguration();
 80009aa:	f7ff fd47 	bl	800043c <getBatteryConfiguration>
 80009ae:	4bb5      	ldr	r3, [pc, #724]	@ (8000c84 <main+0x714>)
 80009b0:	7018      	strb	r0, [r3, #0]
	uint8_t isFirstWrite = read_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS);
 80009b2:	2064      	movs	r0, #100	@ 0x64
	batteryConfiguration = getBatteryConfiguration();
 80009b4:	9309      	str	r3, [sp, #36]	@ 0x24
	uint8_t isFirstWrite = read_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS);
 80009b6:	f000 fec9 	bl	800174c <read_byte_eeprom>
	if (isFirstWrite) {	// if is the first time the value is 255 (value of the memory empty)
 80009ba:	2800      	cmp	r0, #0
 80009bc:	d100      	bne.n	80009c0 <main+0x450>
 80009be:	e1e3      	b.n	8000d88 <main+0x818>
			HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 80009c0:	2780      	movs	r7, #128	@ 0x80
 80009c2:	250a      	movs	r5, #10
			HAL_Delay(100);
 80009c4:	2664      	movs	r6, #100	@ 0x64
			HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 80009c6:	023f      	lsls	r7, r7, #8
 80009c8:	0039      	movs	r1, r7
 80009ca:	48af      	ldr	r0, [pc, #700]	@ (8000c88 <main+0x718>)
 80009cc:	f001 fff0 	bl	80029b0 <HAL_GPIO_TogglePin>
		for (int i = 0; i < 10; i++) {
 80009d0:	3d01      	subs	r5, #1
			HAL_Delay(100);
 80009d2:	0030      	movs	r0, r6
 80009d4:	f001 fc38 	bl	8002248 <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 80009d8:	2d00      	cmp	r5, #0
 80009da:	d1f5      	bne.n	80009c8 <main+0x458>
		storeSettingsToEeprom();	// write the default settings
 80009dc:	f000 fd32 	bl	8001444 <storeSettingsToEeprom>
		write_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS, isFirstWrite);
 80009e0:	0029      	movs	r1, r5
 80009e2:	2064      	movs	r0, #100	@ 0x64
 80009e4:	f000 fec8 	bl	8001778 <write_byte_eeprom>
	disableMotor(M1);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f000 fb83 	bl	80010f4 <disableMotor>
	disableMotor(M2);
 80009ee:	2001      	movs	r0, #1
 80009f0:	f000 fb80 	bl	80010f4 <disableMotor>
	disableMotor(M3);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f000 fb7d 	bl	80010f4 <disableMotor>
	uint32_t timeLowBattery = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	4698      	mov	r8, r3
	uint32_t timeLimitBattery = 0;
 80009fe:	9308      	str	r3, [sp, #32]
	uint32_t time3 = 0;
 8000a00:	9307      	str	r3, [sp, #28]
	uint32_t time2 = 0;
 8000a02:	9306      	str	r3, [sp, #24]
	uint32_t time1 = 0;
 8000a04:	001d      	movs	r5, r3
 8000a06:	4ba1      	ldr	r3, [pc, #644]	@ (8000c8c <main+0x71c>)
			if (HAL_GetTick() - time1 >= 2000 && limit == FALSE) {
 8000a08:	4647      	mov	r7, r8
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	4ba0      	ldr	r3, [pc, #640]	@ (8000c90 <main+0x720>)
 8000a0e:	4ea1      	ldr	r6, [pc, #644]	@ (8000c94 <main+0x724>)
 8000a10:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a12:	4ba1      	ldr	r3, [pc, #644]	@ (8000c98 <main+0x728>)
 8000a14:	930e      	str	r3, [sp, #56]	@ 0x38
 8000a16:	4ba1      	ldr	r3, [pc, #644]	@ (8000c9c <main+0x72c>)
 8000a18:	469b      	mov	fp, r3
 8000a1a:	4ba1      	ldr	r3, [pc, #644]	@ (8000ca0 <main+0x730>)
 8000a1c:	46d8      	mov	r8, fp
 8000a1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a20:	4ba0      	ldr	r3, [pc, #640]	@ (8000ca4 <main+0x734>)
 8000a22:	9302      	str	r3, [sp, #8]
 8000a24:	4ba0      	ldr	r3, [pc, #640]	@ (8000ca8 <main+0x738>)
 8000a26:	9303      	str	r3, [sp, #12]
 8000a28:	4ba0      	ldr	r3, [pc, #640]	@ (8000cac <main+0x73c>)
 8000a2a:	9304      	str	r3, [sp, #16]
 8000a2c:	4ba0      	ldr	r3, [pc, #640]	@ (8000cb0 <main+0x740>)
 8000a2e:	469a      	mov	sl, r3
 8000a30:	4ba0      	ldr	r3, [pc, #640]	@ (8000cb4 <main+0x744>)
 8000a32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a34:	4ba0      	ldr	r3, [pc, #640]	@ (8000cb8 <main+0x748>)
 8000a36:	930c      	str	r3, [sp, #48]	@ 0x30
 8000a38:	4ba0      	ldr	r3, [pc, #640]	@ (8000cbc <main+0x74c>)
 8000a3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8000a3c:	4ba0      	ldr	r3, [pc, #640]	@ (8000cc0 <main+0x750>)
 8000a3e:	9311      	str	r3, [sp, #68]	@ 0x44
 8000a40:	4ba0      	ldr	r3, [pc, #640]	@ (8000cc4 <main+0x754>)
 8000a42:	9305      	str	r3, [sp, #20]
 8000a44:	4ba0      	ldr	r3, [pc, #640]	@ (8000cc8 <main+0x758>)
 8000a46:	9312      	str	r3, [sp, #72]	@ 0x48
 8000a48:	4ba0      	ldr	r3, [pc, #640]	@ (8000ccc <main+0x75c>)
 8000a4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8000a4c:	4ba0      	ldr	r3, [pc, #640]	@ (8000cd0 <main+0x760>)
 8000a4e:	930d      	str	r3, [sp, #52]	@ 0x34
 8000a50:	4ba0      	ldr	r3, [pc, #640]	@ (8000cd4 <main+0x764>)
 8000a52:	4699      	mov	r9, r3
 8000a54:	4ba0      	ldr	r3, [pc, #640]	@ (8000cd8 <main+0x768>)
 8000a56:	9314      	str	r3, [sp, #80]	@ 0x50
 8000a58:	4ba0      	ldr	r3, [pc, #640]	@ (8000cdc <main+0x76c>)
 8000a5a:	9315      	str	r3, [sp, #84]	@ 0x54
		if (!cutoff) {	// if the robot is not in cutoff
 8000a5c:	9b01      	ldr	r3, [sp, #4]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d000      	beq.n	8000a66 <main+0x4f6>
 8000a64:	e16b      	b.n	8000d3e <main+0x7ce>
			if (!noDisarm) {
 8000a66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	469b      	mov	fp, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d100      	bne.n	8000a72 <main+0x502>
 8000a70:	e0cd      	b.n	8000c0e <main+0x69e>
			if (!armed) {	// if the robot is not already armed
 8000a72:	4643      	mov	r3, r8
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d100      	bne.n	8000a7c <main+0x50c>
 8000a7a:	e0a4      	b.n	8000bc6 <main+0x656>
				enableMotor(M1);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 fb59 	bl	8001134 <enableMotor>
				enableMotor(M2);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f000 fb56 	bl	8001134 <enableMotor>
				enableMotor(M3);
 8000a88:	2002      	movs	r0, #2
 8000a8a:	f000 fb53 	bl	8001134 <enableMotor>
				if (tankMixIsON) {	// calculate and use the tank mix only if it's enabled
 8000a8e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d100      	bne.n	8000a98 <main+0x528>
 8000a96:	e125      	b.n	8000ce4 <main+0x774>
					tank = tankMix(getChannelValuePercentage(stChannel), getChannelValuePercentage(thChannel));
 8000a98:	9b03      	ldr	r3, [sp, #12]
 8000a9a:	7818      	ldrb	r0, [r3, #0]
 8000a9c:	f000 fb6a 	bl	8001174 <getChannelValuePercentage>
 8000aa0:	9b02      	ldr	r3, [sp, #8]
 8000aa2:	4683      	mov	fp, r0
 8000aa4:	7818      	ldrb	r0, [r3, #0]
 8000aa6:	f000 fb65 	bl	8001174 <getChannelValuePercentage>
 8000aaa:	0001      	movs	r1, r0
 8000aac:	4658      	mov	r0, fp
 8000aae:	f000 fbf1 	bl	8001294 <tankMix>
 8000ab2:	4653      	mov	r3, sl
 8000ab4:	8018      	strh	r0, [r3, #0]
					setTankMotor(tank);
 8000ab6:	6818      	ldr	r0, [r3, #0]
 8000ab8:	f000 f9b8 	bl	8000e2c <setTankMotor>
					setMotorSpeedBidirectional(mWeapon, getChannelValuePercentage(wpChannel));
 8000abc:	9b04      	ldr	r3, [sp, #16]
 8000abe:	7818      	ldrb	r0, [r3, #0]
				if (weaponDoubleDirection) {
 8000ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d100      	bne.n	8000aca <main+0x55a>
 8000ac8:	e0c4      	b.n	8000c54 <main+0x6e4>
					setMotorSpeedBidirectional(mWeapon, getChannelValuePercentage(wpChannel));
 8000aca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	469b      	mov	fp, r3
 8000ad0:	f000 fb50 	bl	8001174 <getChannelValuePercentage>
 8000ad4:	b241      	sxtb	r1, r0
 8000ad6:	4658      	mov	r0, fp
 8000ad8:	f000 fa30 	bl	8000f3c <setMotorSpeedBidirectional>
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000adc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8000ade:	7818      	ldrb	r0, [r3, #0]
				if (limit == TRUE) { // !!ASUME THAT S1 ES CONNECTED TO THE WEAPON ESC
 8000ae0:	7833      	ldrb	r3, [r6, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d100      	bne.n	8000ae8 <main+0x578>
 8000ae6:	e116      	b.n	8000d16 <main+0x7a6>
					setServoAngle(S1, getChannelValuePercentage(s1Channel));	// servo 1 attached to channel s1Channel
 8000ae8:	f000 fb44 	bl	8001174 <getChannelValuePercentage>
 8000aec:	0001      	movs	r1, r0
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 fc0c 	bl	800130c <setServoAngle>
				setServoAngle(S2, getChannelValuePercentage(s2Channel));
 8000af4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8000af6:	7818      	ldrb	r0, [r3, #0]
 8000af8:	f000 fb3c 	bl	8001174 <getChannelValuePercentage>
 8000afc:	0001      	movs	r1, r0
 8000afe:	2001      	movs	r0, #1
 8000b00:	f000 fc04 	bl	800130c <setServoAngle>
			if (HAL_GetTick() - time2 >= 200) {
 8000b04:	f001 fb9a 	bl	800223c <HAL_GetTick>
 8000b08:	9b06      	ldr	r3, [sp, #24]
 8000b0a:	1ac0      	subs	r0, r0, r3
 8000b0c:	28c7      	cmp	r0, #199	@ 0xc7
 8000b0e:	d83b      	bhi.n	8000b88 <main+0x618>
			if (HAL_GetTick() - time1 >= 2000 && limit == FALSE) {
 8000b10:	f001 fb94 	bl	800223c <HAL_GetTick>
 8000b14:	23fa      	movs	r3, #250	@ 0xfa
 8000b16:	1b40      	subs	r0, r0, r5
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	4298      	cmp	r0, r3
 8000b1c:	d30a      	bcc.n	8000b34 <main+0x5c4>
 8000b1e:	7833      	ldrb	r3, [r6, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d107      	bne.n	8000b34 <main+0x5c4>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000b24:	2180      	movs	r1, #128	@ 0x80
 8000b26:	4858      	ldr	r0, [pc, #352]	@ (8000c88 <main+0x718>)
 8000b28:	0209      	lsls	r1, r1, #8
 8000b2a:	f001 ff41 	bl	80029b0 <HAL_GPIO_TogglePin>
				time1 = HAL_GetTick();
 8000b2e:	f001 fb85 	bl	800223c <HAL_GetTick>
 8000b32:	0005      	movs	r5, r0
			if (HAL_GetTick() - time3 >= 350 && limit == TRUE) {
 8000b34:	f001 fb82 	bl	800223c <HAL_GetTick>
 8000b38:	9b07      	ldr	r3, [sp, #28]
 8000b3a:	1ac0      	subs	r0, r0, r3
 8000b3c:	23af      	movs	r3, #175	@ 0xaf
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4298      	cmp	r0, r3
 8000b42:	d30a      	bcc.n	8000b5a <main+0x5ea>
 8000b44:	7833      	ldrb	r3, [r6, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d107      	bne.n	8000b5a <main+0x5ea>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000b4a:	2180      	movs	r1, #128	@ 0x80
 8000b4c:	484e      	ldr	r0, [pc, #312]	@ (8000c88 <main+0x718>)
 8000b4e:	0209      	lsls	r1, r1, #8
 8000b50:	f001 ff2e 	bl	80029b0 <HAL_GPIO_TogglePin>
				time3 = HAL_GetTick();
 8000b54:	f001 fb72 	bl	800223c <HAL_GetTick>
 8000b58:	9007      	str	r0, [sp, #28]
		if (commandRecieved) {	// recieved a command from the USB
 8000b5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d100      	bne.n	8000b64 <main+0x5f4>
 8000b62:	e77b      	b.n	8000a5c <main+0x4ec>
			if (modifySettingsWithCommand()) {
 8000b64:	f000 fef0 	bl	8001948 <modifySettingsWithCommand>
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d100      	bne.n	8000b6e <main+0x5fe>
 8000b6c:	e0dd      	b.n	8000d2a <main+0x7ba>
				uint8_t s[] = "\nOK\n";
 8000b6e:	464b      	mov	r3, r9
 8000b70:	681b      	ldr	r3, [r3, #0]
				serialPrintString(s);
 8000b72:	0020      	movs	r0, r4
				uint8_t s[] = "\nOK\n";
 8000b74:	6023      	str	r3, [r4, #0]
 8000b76:	464b      	mov	r3, r9
 8000b78:	791b      	ldrb	r3, [r3, #4]
 8000b7a:	7123      	strb	r3, [r4, #4]
				serialPrintString(s);
 8000b7c:	f000 fc58 	bl	8001430 <serialPrintString>
			commandRecieved = FALSE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8000b84:	7013      	strb	r3, [r2, #0]
 8000b86:	e769      	b.n	8000a5c <main+0x4ec>
				batteryVoltage = getBattVoltage();
 8000b88:	f7ff fc8c 	bl	80004a4 <getBattVoltage>
 8000b8c:	9b05      	ldr	r3, [sp, #20]
 8000b8e:	8018      	strh	r0, [r3, #0]
				if (HAL_GetTick() - timeLimitBattery >= CUTOFF_BATTERY_TIMEOUT * 1000) {
 8000b90:	f001 fb54 	bl	800223c <HAL_GetTick>
 8000b94:	9b08      	ldr	r3, [sp, #32]
 8000b96:	1ac0      	subs	r0, r0, r3
 8000b98:	4b51      	ldr	r3, [pc, #324]	@ (8000ce0 <main+0x770>)
 8000b9a:	4298      	cmp	r0, r3
 8000b9c:	d800      	bhi.n	8000ba0 <main+0x630>
 8000b9e:	e10c      	b.n	8000dba <main+0x84a>
					limit = TRUE;	// activate limit state (weapon speed limited)
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	7033      	strb	r3, [r6, #0]
				if (HAL_GetTick() - timeLowBattery >= CUTOFF_BATTERY_TIMEOUT * 1000) {
 8000ba4:	f001 fb4a 	bl	800223c <HAL_GetTick>
 8000ba8:	4b4d      	ldr	r3, [pc, #308]	@ (8000ce0 <main+0x770>)
 8000baa:	1bc0      	subs	r0, r0, r7
 8000bac:	4298      	cmp	r0, r3
 8000bae:	d800      	bhi.n	8000bb2 <main+0x642>
 8000bb0:	e0ed      	b.n	8000d8e <main+0x81e>
					cutoff = TRUE;	// activate cutoff state (robot disarmed)
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	9a01      	ldr	r2, [sp, #4]
 8000bb6:	7013      	strb	r3, [r2, #0]
				time2 = HAL_GetTick();
 8000bb8:	f001 fb40 	bl	800223c <HAL_GetTick>
 8000bbc:	9006      	str	r0, [sp, #24]
 8000bbe:	e7a7      	b.n	8000b10 <main+0x5a0>
					armed = FALSE;
 8000bc0:	4643      	mov	r3, r8
 8000bc2:	465a      	mov	r2, fp
 8000bc4:	701a      	strb	r2, [r3, #0]
				makeSound(mLeft, 50);
 8000bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000bc8:	2132      	movs	r1, #50	@ 0x32
 8000bca:	7818      	ldrb	r0, [r3, #0]
 8000bcc:	f000 fa34 	bl	8001038 <makeSound>
				HAL_Delay(50);
 8000bd0:	2032      	movs	r0, #50	@ 0x32
 8000bd2:	f001 fb39 	bl	8002248 <HAL_Delay>
				if (noDisarm) {	// if the throttle steering and weapon channels are at zero/center arm the robot
 8000bd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d121      	bne.n	8000c22 <main+0x6b2>
			if (armed) {	// if armed do...
 8000bde:	4643      	mov	r3, r8
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	469b      	mov	fp, r3
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d000      	beq.n	8000bea <main+0x67a>
 8000be8:	e748      	b.n	8000a7c <main+0x50c>
				disableMotor(M1);
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 fa82 	bl	80010f4 <disableMotor>
				disableMotor(M2);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f000 fa7f 	bl	80010f4 <disableMotor>
				disableMotor(M3);
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f000 fa7c 	bl	80010f4 <disableMotor>
				setServoAngle(S1, 0);	// servo 1 attached to channel s1Channel
 8000bfc:	4659      	mov	r1, fp
 8000bfe:	4658      	mov	r0, fp
 8000c00:	f000 fb84 	bl	800130c <setServoAngle>
				setServoAngle(S2, 0);
 8000c04:	4659      	mov	r1, fp
 8000c06:	2001      	movs	r0, #1
 8000c08:	f000 fb80 	bl	800130c <setServoAngle>
 8000c0c:	e77a      	b.n	8000b04 <main+0x594>
				if (getChannelValuePercentage(armChannel) > 75)
 8000c0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000c10:	7818      	ldrb	r0, [r3, #0]
 8000c12:	f000 faaf 	bl	8001174 <getChannelValuePercentage>
 8000c16:	284b      	cmp	r0, #75	@ 0x4b
 8000c18:	d9d2      	bls.n	8000bc0 <main+0x650>
					armed = TRUE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	4642      	mov	r2, r8
 8000c1e:	7013      	strb	r3, [r2, #0]
			if (!armed) {	// if the robot is not already armed
 8000c20:	e72c      	b.n	8000a7c <main+0x50c>
	uint8_t position = getChannelValuePercentage(channel);
 8000c22:	9b02      	ldr	r3, [sp, #8]
 8000c24:	7818      	ldrb	r0, [r3, #0]
 8000c26:	f000 faa5 	bl	8001174 <getChannelValuePercentage>
	if (position >= 50 - 1 && position <= 50 + 1) {	// 50+1 and 50-1 to give some dead-zone
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	3b31      	subs	r3, #49	@ 0x31
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d8d4      	bhi.n	8000bde <main+0x66e>
	uint8_t position = getChannelValuePercentage(channel);
 8000c34:	9b03      	ldr	r3, [sp, #12]
 8000c36:	7818      	ldrb	r0, [r3, #0]
 8000c38:	f000 fa9c 	bl	8001174 <getChannelValuePercentage>
	if (position >= 50 - 1 && position <= 50 + 1) {	// 50+1 and 50-1 to give some dead-zone
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	3b31      	subs	r3, #49	@ 0x31
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d8cb      	bhi.n	8000bde <main+0x66e>
	uint8_t position = getChannelValuePercentage(channel);
 8000c46:	9b04      	ldr	r3, [sp, #16]
 8000c48:	7818      	ldrb	r0, [r3, #0]
 8000c4a:	f000 fa93 	bl	8001174 <getChannelValuePercentage>
	if (position <= 0 + 2) {	// 0+2 to give some dead-zone
 8000c4e:	2802      	cmp	r0, #2
 8000c50:	d9e3      	bls.n	8000c1a <main+0x6aa>
 8000c52:	e7c4      	b.n	8000bde <main+0x66e>
					uint8_t wp = getChannelValuePercentage(wpChannel);
 8000c54:	f000 fa8e 	bl	8001174 <getChannelValuePercentage>
					if (limit == TRUE) wp = wp / 2;	// valid only in the unidirectional mode  !!FOR DC MOTOR ONLY!!
 8000c58:	7833      	ldrb	r3, [r6, #0]
					uint8_t wp = getChannelValuePercentage(wpChannel);
 8000c5a:	0001      	movs	r1, r0
					if (limit == TRUE) wp = wp / 2;	// valid only in the unidirectional mode  !!FOR DC MOTOR ONLY!!
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d101      	bne.n	8000c64 <main+0x6f4>
 8000c60:	0841      	lsrs	r1, r0, #1
 8000c62:	b2c9      	uxtb	r1, r1
					setMotorSpeedUnidirectional(mWeapon, wp);
 8000c64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000c66:	b249      	sxtb	r1, r1
 8000c68:	7818      	ldrb	r0, [r3, #0]
 8000c6a:	f000 f9a9 	bl	8000fc0 <setMotorSpeedUnidirectional>
 8000c6e:	e735      	b.n	8000adc <main+0x56c>
 8000c70:	200003a4 	.word	0x200003a4
 8000c74:	40012400 	.word	0x40012400
 8000c78:	200002c0 	.word	0x200002c0
 8000c7c:	40001000 	.word	0x40001000
 8000c80:	0000ffff 	.word	0x0000ffff
 8000c84:	20000222 	.word	0x20000222
 8000c88:	48000800 	.word	0x48000800
 8000c8c:	20000224 	.word	0x20000224
 8000c90:	20000006 	.word	0x20000006
 8000c94:	20000223 	.word	0x20000223
 8000c98:	2000000c 	.word	0x2000000c
 8000c9c:	20000221 	.word	0x20000221
 8000ca0:	2000021d 	.word	0x2000021d
 8000ca4:	20000011 	.word	0x20000011
 8000ca8:	20000010 	.word	0x20000010
 8000cac:	2000000f 	.word	0x2000000f
 8000cb0:	2000022c 	.word	0x2000022c
 8000cb4:	2000021c 	.word	0x2000021c
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	2000000e 	.word	0x2000000e
 8000cc0:	2000000d 	.word	0x2000000d
 8000cc4:	20000226 	.word	0x20000226
 8000cc8:	20000005 	.word	0x20000005
 8000ccc:	20000004 	.word	0x20000004
 8000cd0:	20000228 	.word	0x20000228
 8000cd4:	080088ec 	.word	0x080088ec
 8000cd8:	080088f4 	.word	0x080088f4
 8000cdc:	20000007 	.word	0x20000007
 8000ce0:	0000270f 	.word	0x0000270f
					setMotorSpeedBidirectional(1, getChannelValuePercentage(thChannel));
 8000ce4:	9b02      	ldr	r3, [sp, #8]
 8000ce6:	7818      	ldrb	r0, [r3, #0]
 8000ce8:	f000 fa44 	bl	8001174 <getChannelValuePercentage>
 8000cec:	b241      	sxtb	r1, r0
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 f924 	bl	8000f3c <setMotorSpeedBidirectional>
					setMotorSpeedBidirectional(2, getChannelValuePercentage(stChannel));
 8000cf4:	9b03      	ldr	r3, [sp, #12]
 8000cf6:	7818      	ldrb	r0, [r3, #0]
 8000cf8:	f000 fa3c 	bl	8001174 <getChannelValuePercentage>
 8000cfc:	b241      	sxtb	r1, r0
 8000cfe:	2002      	movs	r0, #2
 8000d00:	f000 f91c 	bl	8000f3c <setMotorSpeedBidirectional>
					setMotorSpeedBidirectional(3, getChannelValuePercentage(wpChannel));
 8000d04:	9b04      	ldr	r3, [sp, #16]
 8000d06:	7818      	ldrb	r0, [r3, #0]
 8000d08:	f000 fa34 	bl	8001174 <getChannelValuePercentage>
 8000d0c:	b241      	sxtb	r1, r0
 8000d0e:	2003      	movs	r0, #3
 8000d10:	f000 f914 	bl	8000f3c <setMotorSpeedBidirectional>
 8000d14:	e6d2      	b.n	8000abc <main+0x54c>
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000d16:	f000 fa2d 	bl	8001174 <getChannelValuePercentage>
					if (limit == TRUE) s1 = s1 / 2;
 8000d1a:	7833      	ldrb	r3, [r6, #0]
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000d1c:	0001      	movs	r1, r0
					if (limit == TRUE) s1 = s1 / 2;
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d000      	beq.n	8000d24 <main+0x7b4>
 8000d22:	e6e4      	b.n	8000aee <main+0x57e>
 8000d24:	0841      	lsrs	r1, r0, #1
 8000d26:	b2c9      	uxtb	r1, r1
					setServoAngle(S1, s1); // servo 1 attached to channel s1Channel
 8000d28:	e6e1      	b.n	8000aee <main+0x57e>
				uint8_t s[] = "\nWHAT??\n";
 8000d2a:	0023      	movs	r3, r4
 8000d2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8000d2e:	ca03      	ldmia	r2!, {r0, r1}
 8000d30:	c303      	stmia	r3!, {r0, r1}
 8000d32:	7812      	ldrb	r2, [r2, #0]
				serialPrintString(s);
 8000d34:	0020      	movs	r0, r4
				uint8_t s[] = "\nWHAT??\n";
 8000d36:	701a      	strb	r2, [r3, #0]
				serialPrintString(s);
 8000d38:	f000 fb7a 	bl	8001430 <serialPrintString>
 8000d3c:	e720      	b.n	8000b80 <main+0x610>
			disableMotor(M1);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 f9d8 	bl	80010f4 <disableMotor>
			disableMotor(M2);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 f9d5 	bl	80010f4 <disableMotor>
			disableMotor(M3);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f000 f9d2 	bl	80010f4 <disableMotor>
			setServoAngle(S1, 0);	// servo 1 attached to channel s1Channel
 8000d50:	2100      	movs	r1, #0
 8000d52:	0008      	movs	r0, r1
 8000d54:	f000 fada 	bl	800130c <setServoAngle>
			setServoAngle(S2, 0);
 8000d58:	2100      	movs	r1, #0
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f000 fad6 	bl	800130c <setServoAngle>
			if (HAL_GetTick() - time1 >= 100) {
 8000d60:	f001 fa6c 	bl	800223c <HAL_GetTick>
 8000d64:	1b40      	subs	r0, r0, r5
 8000d66:	2863      	cmp	r0, #99	@ 0x63
 8000d68:	d800      	bhi.n	8000d6c <main+0x7fc>
 8000d6a:	e6f6      	b.n	8000b5a <main+0x5ea>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000d6c:	2180      	movs	r1, #128	@ 0x80
 8000d6e:	481d      	ldr	r0, [pc, #116]	@ (8000de4 <main+0x874>)
 8000d70:	0209      	lsls	r1, r1, #8
 8000d72:	f001 fe1d 	bl	80029b0 <HAL_GPIO_TogglePin>
				makeSound(mLeft, 100);	// beep while in cutoff mode
 8000d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000d78:	2164      	movs	r1, #100	@ 0x64
 8000d7a:	7818      	ldrb	r0, [r3, #0]
 8000d7c:	f000 f95c 	bl	8001038 <makeSound>
				time1 = HAL_GetTick();
 8000d80:	f001 fa5c 	bl	800223c <HAL_GetTick>
 8000d84:	0005      	movs	r5, r0
 8000d86:	e6e8      	b.n	8000b5a <main+0x5ea>
		loadSettingsFromEeprom();	// load the settings from the eeprom memory
 8000d88:	f000 fcdc 	bl	8001744 <loadSettingsFromEeprom>
 8000d8c:	e62c      	b.n	80009e8 <main+0x478>
				if (batteryVoltage >= cutOffVoltage * 100 * batteryConfiguration && !cutoff)
 8000d8e:	9b05      	ldr	r3, [sp, #20]
 8000d90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d92:	8819      	ldrh	r1, [r3, #0]
 8000d94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	435a      	muls	r2, r3
 8000d9c:	2364      	movs	r3, #100	@ 0x64
 8000d9e:	4353      	muls	r3, r2
 8000da0:	4299      	cmp	r1, r3
 8000da2:	da00      	bge.n	8000da6 <main+0x836>
 8000da4:	e708      	b.n	8000bb8 <main+0x648>
 8000da6:	9b01      	ldr	r3, [sp, #4]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d000      	beq.n	8000db0 <main+0x840>
 8000dae:	e703      	b.n	8000bb8 <main+0x648>
					timeLowBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8000db0:	f001 fa44 	bl	800223c <HAL_GetTick>
 8000db4:	300a      	adds	r0, #10
 8000db6:	0007      	movs	r7, r0
 8000db8:	e6fe      	b.n	8000bb8 <main+0x648>
				if (batteryVoltage >= limitVoltage * 100 * batteryConfiguration && !limit)
 8000dba:	9b05      	ldr	r3, [sp, #20]
 8000dbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000dbe:	8819      	ldrh	r1, [r3, #0]
 8000dc0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8000dc2:	7812      	ldrb	r2, [r2, #0]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	435a      	muls	r2, r3
 8000dc8:	2364      	movs	r3, #100	@ 0x64
 8000dca:	4353      	muls	r3, r2
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	da00      	bge.n	8000dd2 <main+0x862>
 8000dd0:	e6e8      	b.n	8000ba4 <main+0x634>
 8000dd2:	7833      	ldrb	r3, [r6, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d000      	beq.n	8000dda <main+0x86a>
 8000dd8:	e6e4      	b.n	8000ba4 <main+0x634>
					timeLimitBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8000dda:	f001 fa2f 	bl	800223c <HAL_GetTick>
 8000dde:	300a      	adds	r0, #10
 8000de0:	9008      	str	r0, [sp, #32]
 8000de2:	e6df      	b.n	8000ba4 <main+0x634>
 8000de4:	48000800 	.word	0x48000800

08000de8 <map>:
int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	001d      	movs	r5, r3
 8000dec:	ab04      	add	r3, sp, #16
 8000dee:	2400      	movs	r4, #0
 8000df0:	5f1c      	ldrsh	r4, [r3, r4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000df2:	1a43      	subs	r3, r0, r1
 8000df4:	1b60      	subs	r0, r4, r5
 8000df6:	4358      	muls	r0, r3
 8000df8:	1a51      	subs	r1, r2, r1
 8000dfa:	f7ff fa21 	bl	8000240 <__divsi3>
 8000dfe:	1940      	adds	r0, r0, r5
 8000e00:	b200      	sxth	r0, r0
}
 8000e02:	bd70      	pop	{r4, r5, r6, pc}

08000e04 <Error_Handler>:
 8000e04:	b672      	cpsid	i
	while (1) {
 8000e06:	e7fe      	b.n	8000e06 <Error_Handler+0x2>

08000e08 <initMotors>:

extern uint8_t m1Rev;
extern uint8_t m2Rev;
extern uint8_t m3Rev;

void initMotors(TIM_HandleTypeDef *htim) {
 8000e08:	b510      	push	{r4, lr}
 8000e0a:	0004      	movs	r4, r0
	HAL_TIM_PWM_Init(htim);
 8000e0c:	f004 f8b2 	bl	8004f74 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000e10:	2100      	movs	r1, #0
 8000e12:	0020      	movs	r0, r4
 8000e14:	f004 f930 	bl	8005078 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8000e18:	2104      	movs	r1, #4
 8000e1a:	0020      	movs	r0, r4
 8000e1c:	f004 f92c 	bl	8005078 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8000e20:	2108      	movs	r1, #8
 8000e22:	0020      	movs	r0, r4
 8000e24:	f004 f928 	bl	8005078 <HAL_TIM_PWM_Start>
}
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	46c0      	nop			@ (mov r8, r8)

08000e2c <setTankMotor>:

void setTankMotor(TankMotors t) {
 8000e2c:	b530      	push	{r4, r5, lr}
	// set the speed of the motors
	setMotorSpeedBidirectional(mLeft, t.speedL);
 8000e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f20 <setTankMotor+0xf4>)
void setTankMotor(TankMotors t) {
 8000e30:	b083      	sub	sp, #12
	setMotorSpeedBidirectional(mLeft, t.speedL);
 8000e32:	7819      	ldrb	r1, [r3, #0]
	}
	return isRev;
}

void setMotorSpeedBidirectional(uint8_t motorN, int8_t speed) {
	speed = (speed - 50) * 2;
 8000e34:	b243      	sxtb	r3, r0
 8000e36:	3b32      	subs	r3, #50	@ 0x32
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	b25b      	sxtb	r3, r3
	uint8_t sp = abs(speed);
	uint8_t dir;
	if (speed >= 0)
 8000e3c:	43da      	mvns	r2, r3
void setTankMotor(TankMotors t) {
 8000e3e:	ac01      	add	r4, sp, #4
 8000e40:	8020      	strh	r0, [r4, #0]
	uint8_t sp = abs(speed);
 8000e42:	17d8      	asrs	r0, r3, #31
 8000e44:	181d      	adds	r5, r3, r0
 8000e46:	4045      	eors	r5, r0
 8000e48:	b2ed      	uxtb	r5, r5
	if (speed >= 0)
 8000e4a:	0fd2      	lsrs	r2, r2, #31
	switch (motorN) {
 8000e4c:	2901      	cmp	r1, #1
 8000e4e:	d018      	beq.n	8000e82 <setTankMotor+0x56>
 8000e50:	2902      	cmp	r1, #2
 8000e52:	d057      	beq.n	8000f04 <setTankMotor+0xd8>
 8000e54:	2900      	cmp	r1, #0
 8000e56:	d048      	beq.n	8000eea <setTankMotor+0xbe>
	setMotorSpeedBidirectional(mRight, t.speedR);
 8000e58:	4b32      	ldr	r3, [pc, #200]	@ (8000f24 <setTankMotor+0xf8>)
 8000e5a:	7819      	ldrb	r1, [r3, #0]
	speed = (speed - 50) * 2;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	56e3      	ldrsb	r3, [r4, r3]
 8000e60:	3b32      	subs	r3, #50	@ 0x32
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	b25b      	sxtb	r3, r3
	if (speed >= 0)
 8000e66:	43da      	mvns	r2, r3
	uint8_t sp = abs(speed);
 8000e68:	17d8      	asrs	r0, r3, #31
 8000e6a:	181c      	adds	r4, r3, r0
 8000e6c:	4044      	eors	r4, r0
 8000e6e:	b2e4      	uxtb	r4, r4
	if (speed >= 0)
 8000e70:	0fd2      	lsrs	r2, r2, #31
	switch (motorN) {
 8000e72:	2901      	cmp	r1, #1
 8000e74:	d02c      	beq.n	8000ed0 <setTankMotor+0xa4>
 8000e76:	2902      	cmp	r1, #2
 8000e78:	d01d      	beq.n	8000eb6 <setTankMotor+0x8a>
 8000e7a:	2900      	cmp	r1, #0
 8000e7c:	d00e      	beq.n	8000e9c <setTankMotor+0x70>
}
 8000e7e:	b003      	add	sp, #12
 8000e80:	bd30      	pop	{r4, r5, pc}
			isRev = m2Rev;
 8000e82:	4929      	ldr	r1, [pc, #164]	@ (8000f28 <setTankMotor+0xfc>)
		dir = TRUE;
	else
		dir = FALSE;

	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000e84:	7809      	ldrb	r1, [r1, #0]
 8000e86:	2900      	cmp	r1, #0
 8000e88:	d000      	beq.n	8000e8c <setTankMotor+0x60>
 8000e8a:	0fda      	lsrs	r2, r3, #31
		case M1:
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
			TIM1->CCR1 = sp;
			break;
		case M2:
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000e8c:	2180      	movs	r1, #128	@ 0x80
 8000e8e:	4827      	ldr	r0, [pc, #156]	@ (8000f2c <setTankMotor+0x100>)
 8000e90:	0189      	lsls	r1, r1, #6
 8000e92:	f001 fd87 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000e96:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <setTankMotor+0x104>)
 8000e98:	639d      	str	r5, [r3, #56]	@ 0x38
			break;
 8000e9a:	e7dd      	b.n	8000e58 <setTankMotor+0x2c>
			isRev = m1Rev;
 8000e9c:	4925      	ldr	r1, [pc, #148]	@ (8000f34 <setTankMotor+0x108>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000e9e:	7809      	ldrb	r1, [r1, #0]
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	d000      	beq.n	8000ea6 <setTankMotor+0x7a>
 8000ea4:	0fda      	lsrs	r2, r3, #31
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000ea6:	2180      	movs	r1, #128	@ 0x80
 8000ea8:	4820      	ldr	r0, [pc, #128]	@ (8000f2c <setTankMotor+0x100>)
 8000eaa:	0209      	lsls	r1, r1, #8
 8000eac:	f001 fd7a 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <setTankMotor+0x104>)
 8000eb2:	635c      	str	r4, [r3, #52]	@ 0x34
			break;
 8000eb4:	e7e3      	b.n	8000e7e <setTankMotor+0x52>
			isRev = m3Rev;
 8000eb6:	4920      	ldr	r1, [pc, #128]	@ (8000f38 <setTankMotor+0x10c>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000eb8:	7809      	ldrb	r1, [r1, #0]
 8000eba:	2900      	cmp	r1, #0
 8000ebc:	d000      	beq.n	8000ec0 <setTankMotor+0x94>
 8000ebe:	0fda      	lsrs	r2, r3, #31
		case M3:
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8000ec0:	2180      	movs	r1, #128	@ 0x80
 8000ec2:	481a      	ldr	r0, [pc, #104]	@ (8000f2c <setTankMotor+0x100>)
 8000ec4:	0109      	lsls	r1, r1, #4
 8000ec6:	f001 fd6d 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <setTankMotor+0x104>)
 8000ecc:	63dc      	str	r4, [r3, #60]	@ 0x3c
}
 8000ece:	e7d6      	b.n	8000e7e <setTankMotor+0x52>
			isRev = m2Rev;
 8000ed0:	4915      	ldr	r1, [pc, #84]	@ (8000f28 <setTankMotor+0xfc>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000ed2:	7809      	ldrb	r1, [r1, #0]
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d000      	beq.n	8000eda <setTankMotor+0xae>
 8000ed8:	0fda      	lsrs	r2, r3, #31
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000eda:	2180      	movs	r1, #128	@ 0x80
 8000edc:	4813      	ldr	r0, [pc, #76]	@ (8000f2c <setTankMotor+0x100>)
 8000ede:	0189      	lsls	r1, r1, #6
 8000ee0:	f001 fd60 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <setTankMotor+0x104>)
 8000ee6:	639c      	str	r4, [r3, #56]	@ 0x38
			break;
 8000ee8:	e7c9      	b.n	8000e7e <setTankMotor+0x52>
			isRev = m1Rev;
 8000eea:	4912      	ldr	r1, [pc, #72]	@ (8000f34 <setTankMotor+0x108>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000eec:	7809      	ldrb	r1, [r1, #0]
 8000eee:	2900      	cmp	r1, #0
 8000ef0:	d000      	beq.n	8000ef4 <setTankMotor+0xc8>
 8000ef2:	0fda      	lsrs	r2, r3, #31
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000ef4:	2180      	movs	r1, #128	@ 0x80
 8000ef6:	480d      	ldr	r0, [pc, #52]	@ (8000f2c <setTankMotor+0x100>)
 8000ef8:	0209      	lsls	r1, r1, #8
 8000efa:	f001 fd53 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <setTankMotor+0x104>)
 8000f00:	635d      	str	r5, [r3, #52]	@ 0x34
			break;
 8000f02:	e7a9      	b.n	8000e58 <setTankMotor+0x2c>
			isRev = m3Rev;
 8000f04:	490c      	ldr	r1, [pc, #48]	@ (8000f38 <setTankMotor+0x10c>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000f06:	7809      	ldrb	r1, [r1, #0]
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	d000      	beq.n	8000f0e <setTankMotor+0xe2>
 8000f0c:	0fda      	lsrs	r2, r3, #31
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	4806      	ldr	r0, [pc, #24]	@ (8000f2c <setTankMotor+0x100>)
 8000f12:	0109      	lsls	r1, r1, #4
 8000f14:	f001 fd46 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8000f18:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <setTankMotor+0x104>)
 8000f1a:	63dd      	str	r5, [r3, #60]	@ 0x3c
			break;
 8000f1c:	e79c      	b.n	8000e58 <setTankMotor+0x2c>
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	2000021d 	.word	0x2000021d
 8000f24:	20000009 	.word	0x20000009
 8000f28:	2000000a 	.word	0x2000000a
 8000f2c:	48000400 	.word	0x48000400
 8000f30:	40012c00 	.word	0x40012c00
 8000f34:	2000000b 	.word	0x2000000b
 8000f38:	20000220 	.word	0x20000220

08000f3c <setMotorSpeedBidirectional>:
	speed = (speed - 50) * 2;
 8000f3c:	3932      	subs	r1, #50	@ 0x32
 8000f3e:	0049      	lsls	r1, r1, #1
 8000f40:	b249      	sxtb	r1, r1
	uint8_t sp = abs(speed);
 8000f42:	17ca      	asrs	r2, r1, #31
void setMotorSpeedBidirectional(uint8_t motorN, int8_t speed) {
 8000f44:	b510      	push	{r4, lr}
	uint8_t sp = abs(speed);
 8000f46:	188c      	adds	r4, r1, r2
 8000f48:	4054      	eors	r4, r2
	if (speed >= 0)
 8000f4a:	43ca      	mvns	r2, r1
	uint8_t sp = abs(speed);
 8000f4c:	b2e4      	uxtb	r4, r4
	if (speed >= 0)
 8000f4e:	0fd2      	lsrs	r2, r2, #31
	switch (motorN) {
 8000f50:	2801      	cmp	r0, #1
 8000f52:	d004      	beq.n	8000f5e <setMotorSpeedBidirectional+0x22>
 8000f54:	2802      	cmp	r0, #2
 8000f56:	d01c      	beq.n	8000f92 <setMotorSpeedBidirectional+0x56>
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d00d      	beq.n	8000f78 <setMotorSpeedBidirectional+0x3c>
	}
}
 8000f5c:	bd10      	pop	{r4, pc}
			isRev = m2Rev;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <setMotorSpeedBidirectional+0x70>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d000      	beq.n	8000f68 <setMotorSpeedBidirectional+0x2c>
 8000f66:	0fca      	lsrs	r2, r1, #31
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000f68:	2180      	movs	r1, #128	@ 0x80
 8000f6a:	4811      	ldr	r0, [pc, #68]	@ (8000fb0 <setMotorSpeedBidirectional+0x74>)
 8000f6c:	0189      	lsls	r1, r1, #6
 8000f6e:	f001 fd19 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000f72:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <setMotorSpeedBidirectional+0x78>)
 8000f74:	639c      	str	r4, [r3, #56]	@ 0x38
			break;
 8000f76:	e7f1      	b.n	8000f5c <setMotorSpeedBidirectional+0x20>
			isRev = m1Rev;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <setMotorSpeedBidirectional+0x7c>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d000      	beq.n	8000f82 <setMotorSpeedBidirectional+0x46>
 8000f80:	0fca      	lsrs	r2, r1, #31
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	480a      	ldr	r0, [pc, #40]	@ (8000fb0 <setMotorSpeedBidirectional+0x74>)
 8000f86:	0209      	lsls	r1, r1, #8
 8000f88:	f001 fd0c 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <setMotorSpeedBidirectional+0x78>)
 8000f8e:	635c      	str	r4, [r3, #52]	@ 0x34
			break;
 8000f90:	e7e4      	b.n	8000f5c <setMotorSpeedBidirectional+0x20>
			isRev = m3Rev;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <setMotorSpeedBidirectional+0x80>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d000      	beq.n	8000f9c <setMotorSpeedBidirectional+0x60>
 8000f9a:	0fca      	lsrs	r2, r1, #31
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <setMotorSpeedBidirectional+0x74>)
 8000fa0:	0109      	lsls	r1, r1, #4
 8000fa2:	f001 fcff 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8000fa6:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <setMotorSpeedBidirectional+0x78>)
 8000fa8:	63dc      	str	r4, [r3, #60]	@ 0x3c
}
 8000faa:	e7d7      	b.n	8000f5c <setMotorSpeedBidirectional+0x20>
 8000fac:	2000000a 	.word	0x2000000a
 8000fb0:	48000400 	.word	0x48000400
 8000fb4:	40012c00 	.word	0x40012c00
 8000fb8:	2000000b 	.word	0x2000000b
 8000fbc:	20000220 	.word	0x20000220

08000fc0 <setMotorSpeedUnidirectional>:

void setMotorSpeedUnidirectional(uint8_t motorN, int8_t speed) {
 8000fc0:	b510      	push	{r4, lr}
	uint8_t sp = speed;
	uint8_t dir = m1Rev;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <setMotorSpeedUnidirectional+0x64>)
	uint8_t sp = speed;
 8000fc4:	b2cc      	uxtb	r4, r1
	uint8_t dir = m1Rev;
 8000fc6:	781a      	ldrb	r2, [r3, #0]
	switch (motorN) {
 8000fc8:	2801      	cmp	r0, #1
 8000fca:	d004      	beq.n	8000fd6 <setMotorSpeedUnidirectional+0x16>
 8000fcc:	2802      	cmp	r0, #2
 8000fce:	d01a      	beq.n	8001006 <setMotorSpeedUnidirectional+0x46>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d00f      	beq.n	8000ff4 <setMotorSpeedUnidirectional+0x34>
		case M3:
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
			TIM1->CCR3 = sp;
			break;
	}
}
 8000fd4:	bd10      	pop	{r4, pc}
			isRev = m2Rev;
 8000fd6:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <setMotorSpeedUnidirectional+0x68>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <setMotorSpeedUnidirectional+0x24>
 8000fde:	4253      	negs	r3, r2
 8000fe0:	415a      	adcs	r2, r3
 8000fe2:	b2d2      	uxtb	r2, r2
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000fe4:	2180      	movs	r1, #128	@ 0x80
 8000fe6:	4811      	ldr	r0, [pc, #68]	@ (800102c <setMotorSpeedUnidirectional+0x6c>)
 8000fe8:	0189      	lsls	r1, r1, #6
 8000fea:	f001 fcdb 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <setMotorSpeedUnidirectional+0x70>)
 8000ff0:	639c      	str	r4, [r3, #56]	@ 0x38
			break;
 8000ff2:	e7ef      	b.n	8000fd4 <setMotorSpeedUnidirectional+0x14>
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	480c      	ldr	r0, [pc, #48]	@ (800102c <setMotorSpeedUnidirectional+0x6c>)
 8000ffa:	0209      	lsls	r1, r1, #8
 8000ffc:	f001 fcd2 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <setMotorSpeedUnidirectional+0x70>)
 8001002:	635c      	str	r4, [r3, #52]	@ 0x34
			break;
 8001004:	e7e6      	b.n	8000fd4 <setMotorSpeedUnidirectional+0x14>
			isRev = m3Rev;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <setMotorSpeedUnidirectional+0x74>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <setMotorSpeedUnidirectional+0x54>
 800100e:	4253      	negs	r3, r2
 8001010:	415a      	adcs	r2, r3
 8001012:	b2d2      	uxtb	r2, r2
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	4805      	ldr	r0, [pc, #20]	@ (800102c <setMotorSpeedUnidirectional+0x6c>)
 8001018:	0109      	lsls	r1, r1, #4
 800101a:	f001 fcc3 	bl	80029a4 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 800101e:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <setMotorSpeedUnidirectional+0x70>)
 8001020:	63dc      	str	r4, [r3, #60]	@ 0x3c
}
 8001022:	e7d7      	b.n	8000fd4 <setMotorSpeedUnidirectional+0x14>
 8001024:	2000000b 	.word	0x2000000b
 8001028:	2000000a 	.word	0x2000000a
 800102c:	48000400 	.word	0x48000400
 8001030:	40012c00 	.word	0x40012c00
 8001034:	20000220 	.word	0x20000220

08001038 <makeSound>:
/*	This is a blocking function that causes the motors to beep,
 *  keeping the duration as short as possible.
 * @duration:
 *
 */
void makeSound(uint8_t motorN, uint8_t duration) {
 8001038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103a:	0004      	movs	r4, r0
 800103c:	000d      	movs	r5, r1
	uint32_t time = HAL_GetTick();
 800103e:	f001 f8fd 	bl	800223c <HAL_GetTick>
 8001042:	0006      	movs	r6, r0
			break;
	}
}

void enableMotor(uint8_t motorN) {
	switch (motorN) {
 8001044:	2c01      	cmp	r4, #1
 8001046:	d026      	beq.n	8001096 <makeSound+0x5e>
 8001048:	2c02      	cmp	r4, #2
 800104a:	d047      	beq.n	80010dc <makeSound+0xa4>
 800104c:	2c00      	cmp	r4, #0
 800104e:	d03e      	beq.n	80010ce <makeSound+0x96>
				TIM1->CCR2 = 2;
 8001050:	2702      	movs	r7, #2
	while (HAL_GetTick() <= time + duration) {
 8001052:	19ad      	adds	r5, r5, r6
				TIM1->CCR2 = 2;
 8001054:	4e25      	ldr	r6, [pc, #148]	@ (80010ec <makeSound+0xb4>)
	while (HAL_GetTick() <= time + duration) {
 8001056:	f001 f8f1 	bl	800223c <HAL_GetTick>
 800105a:	42a8      	cmp	r0, r5
 800105c:	d808      	bhi.n	8001070 <makeSound+0x38>
		switch (motorN) {
 800105e:	2c01      	cmp	r4, #1
 8001060:	d017      	beq.n	8001092 <makeSound+0x5a>
 8001062:	2c02      	cmp	r4, #2
 8001064:	d10b      	bne.n	800107e <makeSound+0x46>
				TIM1->CCR3 = 2;
 8001066:	63f4      	str	r4, [r6, #60]	@ 0x3c
	while (HAL_GetTick() <= time + duration) {
 8001068:	f001 f8e8 	bl	800223c <HAL_GetTick>
 800106c:	42a8      	cmp	r0, r5
 800106e:	d9f6      	bls.n	800105e <makeSound+0x26>
	switch (motorN) {
 8001070:	2c01      	cmp	r4, #1
 8001072:	d025      	beq.n	80010c0 <makeSound+0x88>
 8001074:	2c02      	cmp	r4, #2
 8001076:	d01c      	beq.n	80010b2 <makeSound+0x7a>
 8001078:	2c00      	cmp	r4, #0
 800107a:	d013      	beq.n	80010a4 <makeSound+0x6c>
}
 800107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (motorN) {
 800107e:	2c00      	cmp	r4, #0
 8001080:	d005      	beq.n	800108e <makeSound+0x56>
	while (HAL_GetTick() <= time + duration) {
 8001082:	f001 f8db 	bl	800223c <HAL_GetTick>
 8001086:	42a8      	cmp	r0, r5
 8001088:	d8f2      	bhi.n	8001070 <makeSound+0x38>
		switch (motorN) {
 800108a:	2c00      	cmp	r4, #0
 800108c:	d1f9      	bne.n	8001082 <makeSound+0x4a>
				TIM1->CCR1 = 2;
 800108e:	6377      	str	r7, [r6, #52]	@ 0x34
				break;
 8001090:	e7e1      	b.n	8001056 <makeSound+0x1e>
				TIM1->CCR2 = 2;
 8001092:	63b7      	str	r7, [r6, #56]	@ 0x38
				break;
 8001094:	e7df      	b.n	8001056 <makeSound+0x1e>
		case M1:
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
			break;
		case M2:
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
 8001096:	2180      	movs	r1, #128	@ 0x80
 8001098:	2201      	movs	r2, #1
 800109a:	4815      	ldr	r0, [pc, #84]	@ (80010f0 <makeSound+0xb8>)
 800109c:	0149      	lsls	r1, r1, #5
 800109e:	f001 fc81 	bl	80029a4 <HAL_GPIO_WritePin>
			break;
 80010a2:	e7d5      	b.n	8001050 <makeSound+0x18>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, FALSE);
 80010a4:	2180      	movs	r1, #128	@ 0x80
 80010a6:	2200      	movs	r2, #0
 80010a8:	4811      	ldr	r0, [pc, #68]	@ (80010f0 <makeSound+0xb8>)
 80010aa:	01c9      	lsls	r1, r1, #7
 80010ac:	f001 fc7a 	bl	80029a4 <HAL_GPIO_WritePin>
}
 80010b0:	e7e4      	b.n	800107c <makeSound+0x44>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 80010b2:	2180      	movs	r1, #128	@ 0x80
 80010b4:	2200      	movs	r2, #0
 80010b6:	480e      	ldr	r0, [pc, #56]	@ (80010f0 <makeSound+0xb8>)
 80010b8:	00c9      	lsls	r1, r1, #3
 80010ba:	f001 fc73 	bl	80029a4 <HAL_GPIO_WritePin>
}
 80010be:	e7dd      	b.n	800107c <makeSound+0x44>
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
 80010c0:	2180      	movs	r1, #128	@ 0x80
 80010c2:	2200      	movs	r2, #0
 80010c4:	480a      	ldr	r0, [pc, #40]	@ (80010f0 <makeSound+0xb8>)
 80010c6:	0149      	lsls	r1, r1, #5
 80010c8:	f001 fc6c 	bl	80029a4 <HAL_GPIO_WritePin>
			break;
 80010cc:	e7d6      	b.n	800107c <makeSound+0x44>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
 80010ce:	2180      	movs	r1, #128	@ 0x80
 80010d0:	2201      	movs	r2, #1
 80010d2:	4807      	ldr	r0, [pc, #28]	@ (80010f0 <makeSound+0xb8>)
 80010d4:	01c9      	lsls	r1, r1, #7
 80010d6:	f001 fc65 	bl	80029a4 <HAL_GPIO_WritePin>
		case M3:
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
			break;
	}
}
 80010da:	e7b9      	b.n	8001050 <makeSound+0x18>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 80010dc:	2180      	movs	r1, #128	@ 0x80
 80010de:	2201      	movs	r2, #1
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <makeSound+0xb8>)
 80010e2:	00c9      	lsls	r1, r1, #3
 80010e4:	f001 fc5e 	bl	80029a4 <HAL_GPIO_WritePin>
			break;
 80010e8:	e7b2      	b.n	8001050 <makeSound+0x18>
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	40012c00 	.word	0x40012c00
 80010f0:	48000400 	.word	0x48000400

080010f4 <disableMotor>:
void disableMotor(uint8_t motorN) {
 80010f4:	b510      	push	{r4, lr}
	switch (motorN) {
 80010f6:	2801      	cmp	r0, #1
 80010f8:	d004      	beq.n	8001104 <disableMotor+0x10>
 80010fa:	2802      	cmp	r0, #2
 80010fc:	d010      	beq.n	8001120 <disableMotor+0x2c>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d007      	beq.n	8001112 <disableMotor+0x1e>
}
 8001102:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
 8001104:	2180      	movs	r1, #128	@ 0x80
 8001106:	2200      	movs	r2, #0
 8001108:	4809      	ldr	r0, [pc, #36]	@ (8001130 <disableMotor+0x3c>)
 800110a:	0149      	lsls	r1, r1, #5
 800110c:	f001 fc4a 	bl	80029a4 <HAL_GPIO_WritePin>
			break;
 8001110:	e7f7      	b.n	8001102 <disableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, FALSE);
 8001112:	2180      	movs	r1, #128	@ 0x80
 8001114:	2200      	movs	r2, #0
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <disableMotor+0x3c>)
 8001118:	01c9      	lsls	r1, r1, #7
 800111a:	f001 fc43 	bl	80029a4 <HAL_GPIO_WritePin>
}
 800111e:	e7f0      	b.n	8001102 <disableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 8001120:	2180      	movs	r1, #128	@ 0x80
 8001122:	2200      	movs	r2, #0
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <disableMotor+0x3c>)
 8001126:	00c9      	lsls	r1, r1, #3
 8001128:	f001 fc3c 	bl	80029a4 <HAL_GPIO_WritePin>
}
 800112c:	e7e9      	b.n	8001102 <disableMotor+0xe>
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	48000400 	.word	0x48000400

08001134 <enableMotor>:
void enableMotor(uint8_t motorN) {
 8001134:	b510      	push	{r4, lr}
	switch (motorN) {
 8001136:	2801      	cmp	r0, #1
 8001138:	d004      	beq.n	8001144 <enableMotor+0x10>
 800113a:	2802      	cmp	r0, #2
 800113c:	d010      	beq.n	8001160 <enableMotor+0x2c>
 800113e:	2800      	cmp	r0, #0
 8001140:	d007      	beq.n	8001152 <enableMotor+0x1e>
}
 8001142:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	2201      	movs	r2, #1
 8001148:	4809      	ldr	r0, [pc, #36]	@ (8001170 <enableMotor+0x3c>)
 800114a:	0149      	lsls	r1, r1, #5
 800114c:	f001 fc2a 	bl	80029a4 <HAL_GPIO_WritePin>
			break;
 8001150:	e7f7      	b.n	8001142 <enableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
 8001152:	2180      	movs	r1, #128	@ 0x80
 8001154:	2201      	movs	r2, #1
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <enableMotor+0x3c>)
 8001158:	01c9      	lsls	r1, r1, #7
 800115a:	f001 fc23 	bl	80029a4 <HAL_GPIO_WritePin>
}
 800115e:	e7f0      	b.n	8001142 <enableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 8001160:	2180      	movs	r1, #128	@ 0x80
 8001162:	2201      	movs	r2, #1
 8001164:	4802      	ldr	r0, [pc, #8]	@ (8001170 <enableMotor+0x3c>)
 8001166:	00c9      	lsls	r1, r1, #3
 8001168:	f001 fc1c 	bl	80029a4 <HAL_GPIO_WritePin>
}
 800116c:	e7e9      	b.n	8001142 <enableMotor+0xe>
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	48000400 	.word	0x48000400

08001174 <getChannelValuePercentage>:
//		}
//	}
//}

uint8_t getChannelValuePercentage(uint8_t channelNumber) {
	int temp = (reciever_channels[channelNumber] - 1000) / 10;
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <getChannelValuePercentage+0x28>)
 8001176:	0040      	lsls	r0, r0, #1
 8001178:	5ac3      	ldrh	r3, [r0, r3]
	if (temp > 100) temp = 100;
 800117a:	4a09      	ldr	r2, [pc, #36]	@ (80011a0 <getChannelValuePercentage+0x2c>)
 800117c:	2064      	movs	r0, #100	@ 0x64
uint8_t getChannelValuePercentage(uint8_t channelNumber) {
 800117e:	b510      	push	{r4, lr}
	if (temp > 100) temp = 100;
 8001180:	4293      	cmp	r3, r2
 8001182:	d803      	bhi.n	800118c <getChannelValuePercentage+0x18>
	if (temp < 0) temp = 0;
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <getChannelValuePercentage+0x30>)
 8001186:	2000      	movs	r0, #0
 8001188:	4293      	cmp	r3, r2
 800118a:	d800      	bhi.n	800118e <getChannelValuePercentage+0x1a>
	return temp;
}
 800118c:	bd10      	pop	{r4, pc}
	int temp = (reciever_channels[channelNumber] - 1000) / 10;
 800118e:	4a06      	ldr	r2, [pc, #24]	@ (80011a8 <getChannelValuePercentage+0x34>)
 8001190:	210a      	movs	r1, #10
 8001192:	1898      	adds	r0, r3, r2
 8001194:	f7ff f854 	bl	8000240 <__divsi3>
	return temp;
 8001198:	b2c0      	uxtb	r0, r0
 800119a:	e7f7      	b.n	800118c <getChannelValuePercentage+0x18>
 800119c:	200003e4 	.word	0x200003e4
 80011a0:	000007d9 	.word	0x000007d9
 80011a4:	000003de 	.word	0x000003de
 80011a8:	fffffc18 	.word	0xfffffc18

080011ac <initReciever>:

//void initRecieverPPM(TIM_HandleTypeDef *htim) {
//	HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_3);
//}

void initReciever(TIM_HandleTypeDef *htim) {
 80011ac:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(htim);
 80011ae:	f003 feb5 	bl	8004f1c <HAL_TIM_Base_Start>
}
 80011b2:	bd10      	pop	{r4, pc}

080011b4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (recieverIsPWM) {
 80011b4:	4b30      	ldr	r3, [pc, #192]	@ (8001278 <HAL_GPIO_EXTI_Callback+0xc4>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011b6:	b570      	push	{r4, r5, r6, lr}
	if (recieverIsPWM) {
 80011b8:	681b      	ldr	r3, [r3, #0]
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011ba:	0004      	movs	r4, r0
	if (recieverIsPWM) {
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00e      	beq.n	80011de <HAL_GPIO_EXTI_Callback+0x2a>
		// channel 1
		if (GPIO_Pin == CH1_Pin) {
 80011c0:	2801      	cmp	r0, #1
 80011c2:	d02b      	beq.n	800121c <HAL_GPIO_EXTI_Callback+0x68>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[1] = usWidth;
			}
		}
		// channel 2 (only falling, because it starts with ch1)
		if (GPIO_Pin == CH2_Pin) {
 80011c4:	2802      	cmp	r0, #2
 80011c6:	d043      	beq.n	8001250 <HAL_GPIO_EXTI_Callback+0x9c>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
			reciever_channels[2] = usWidth;
		}
		// channel 3 (only falling, because it starts with ch1)
		if (GPIO_Pin == CH3_Pin) {
 80011c8:	2804      	cmp	r0, #4
 80011ca:	d136      	bne.n	800123a <HAL_GPIO_EXTI_Callback+0x86>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80011cc:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <HAL_GPIO_EXTI_Callback+0xc8>)
 80011ce:	4a2c      	ldr	r2, [pc, #176]	@ (8001280 <HAL_GPIO_EXTI_Callback+0xcc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	8013      	strh	r3, [r2, #0]
			reciever_channels[3] = usWidth;
 80011d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001284 <HAL_GPIO_EXTI_Callback+0xd0>)
 80011da:	80d3      	strh	r3, [r2, #6]
					}
				}
			}
		}
	}
}
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
		if (GPIO_Pin == CH1_Pin) {
 80011de:	2801      	cmp	r0, #1
 80011e0:	d1fc      	bne.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 0) {
 80011e2:	2101      	movs	r1, #1
 80011e4:	4828      	ldr	r0, [pc, #160]	@ (8001288 <HAL_GPIO_EXTI_Callback+0xd4>)
 80011e6:	f001 fbd7 	bl	8002998 <HAL_GPIO_ReadPin>
 80011ea:	2800      	cmp	r0, #0
 80011ec:	d1f6      	bne.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80011ee:	4b23      	ldr	r3, [pc, #140]	@ (800127c <HAL_GPIO_EXTI_Callback+0xc8>)
 80011f0:	4923      	ldr	r1, [pc, #140]	@ (8001280 <HAL_GPIO_EXTI_Callback+0xcc>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
				__HAL_TIM_SET_COUNTER(&htim6, 0);  // reset the counter
 80011f6:	6250      	str	r0, [r2, #36]	@ 0x24
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 80011f8:	4a24      	ldr	r2, [pc, #144]	@ (800128c <HAL_GPIO_EXTI_Callback+0xd8>)
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	800b      	strh	r3, [r1, #0]
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 80011fe:	4293      	cmp	r3, r2
 8001200:	d82f      	bhi.n	8001262 <HAL_GPIO_EXTI_Callback+0xae>
					if (channelToRead != 0) {
 8001202:	4923      	ldr	r1, [pc, #140]	@ (8001290 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001204:	780a      	ldrb	r2, [r1, #0]
 8001206:	2a00      	cmp	r2, #0
 8001208:	d0e8      	beq.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 800120a:	0055      	lsls	r5, r2, #1
 800120c:	4c1d      	ldr	r4, [pc, #116]	@ (8001284 <HAL_GPIO_EXTI_Callback+0xd0>)
						channelToRead++;
 800120e:	3201      	adds	r2, #1
 8001210:	b2d2      	uxtb	r2, r2
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 8001212:	532b      	strh	r3, [r5, r4]
						if (channelToRead > NUMBER_OF_PPM_CHANNEL) {
 8001214:	2a08      	cmp	r2, #8
 8001216:	d82c      	bhi.n	8001272 <HAL_GPIO_EXTI_Callback+0xbe>
						channelToRead++;
 8001218:	700a      	strb	r2, [r1, #0]
 800121a:	e7df      	b.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 1) {
 800121c:	2101      	movs	r1, #1
 800121e:	481a      	ldr	r0, [pc, #104]	@ (8001288 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001220:	f001 fbba 	bl	8002998 <HAL_GPIO_ReadPin>
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001226:	681b      	ldr	r3, [r3, #0]
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 1) {
 8001228:	2801      	cmp	r0, #1
 800122a:	d01f      	beq.n	800126c <HAL_GPIO_EXTI_Callback+0xb8>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001230:	b29b      	uxth	r3, r3
 8001232:	8013      	strh	r3, [r2, #0]
				reciever_channels[1] = usWidth;
 8001234:	4a13      	ldr	r2, [pc, #76]	@ (8001284 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001236:	8053      	strh	r3, [r2, #2]
		if (GPIO_Pin == CH4_Pin) {
 8001238:	e7d0      	b.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
 800123a:	2808      	cmp	r0, #8
 800123c:	d1ce      	bne.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001240:	4a0f      	ldr	r2, [pc, #60]	@ (8001280 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001246:	b29b      	uxth	r3, r3
 8001248:	8013      	strh	r3, [r2, #0]
			reciever_channels[4] = usWidth;
 800124a:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <HAL_GPIO_EXTI_Callback+0xd0>)
 800124c:	8113      	strh	r3, [r2, #8]
 800124e:	e7c5      	b.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <HAL_GPIO_EXTI_Callback+0xc8>)
 8001252:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001258:	b29b      	uxth	r3, r3
 800125a:	8013      	strh	r3, [r2, #0]
			reciever_channels[2] = usWidth;
 800125c:	4a09      	ldr	r2, [pc, #36]	@ (8001284 <HAL_GPIO_EXTI_Callback+0xd0>)
 800125e:	8093      	strh	r3, [r2, #4]
		if (GPIO_Pin == CH4_Pin) {
 8001260:	e7bc      	b.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
					reciever_channels[0] = usWidth;	// store the separation pulse width
 8001262:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001264:	8013      	strh	r3, [r2, #0]
					channelToRead = 1;	// next channel is ch1
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001268:	701c      	strb	r4, [r3, #0]
 800126a:	e7b7      	b.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	@ 0x24
		if (GPIO_Pin == CH4_Pin) {
 8001270:	e7b4      	b.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
							channelToRead = 0;
 8001272:	7008      	strb	r0, [r1, #0]
}
 8001274:	e7b2      	b.n	80011dc <HAL_GPIO_EXTI_Callback+0x28>
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	20000000 	.word	0x20000000
 800127c:	200002c0 	.word	0x200002c0
 8001280:	200003f6 	.word	0x200003f6
 8001284:	200003e4 	.word	0x200003e4
 8001288:	48000400 	.word	0x48000400
 800128c:	00001194 	.word	0x00001194
 8001290:	20000012 	.word	0x20000012

08001294 <tankMix>:

TankMotors tankMix(uint8_t STchannel, uint8_t THchannel) {
 8001294:	b510      	push	{r4, lr}
	TankMotors t;
	int8_t st = (STchannel - 50) * 2;
	int8_t th = (THchannel - 50) * 2;
 8001296:	3932      	subs	r1, #50	@ 0x32
	int8_t st = (STchannel - 50) * 2;
 8001298:	3832      	subs	r0, #50	@ 0x32
	int8_t th = (THchannel - 50) * 2;
 800129a:	0049      	lsls	r1, r1, #1
	int8_t st = (STchannel - 50) * 2;
 800129c:	0040      	lsls	r0, r0, #1
	int16_t ml = th + st;	// mixing
 800129e:	b249      	sxtb	r1, r1
 80012a0:	b240      	sxtb	r0, r0
TankMotors tankMix(uint8_t STchannel, uint8_t THchannel) {
 80012a2:	b082      	sub	sp, #8
	int16_t ml = th + st;	// mixing
 80012a4:	180c      	adds	r4, r1, r0
	if (ml < -100) ml = -100;
	if (mr > 100) mr = 100;
	if (mr < -100) mr = -100;
	t.speedL = (ml + 100) / 2;	// keep value inside 0 and 100
	t.speedR = (mr + 100) / 2;
	return t;
 80012a6:	aa01      	add	r2, sp, #4
	if (ml < -100) ml = -100;
 80012a8:	1c23      	adds	r3, r4, #0
 80012aa:	3464      	adds	r4, #100	@ 0x64
 80012ac:	da01      	bge.n	80012b2 <tankMix+0x1e>
 80012ae:	2364      	movs	r3, #100	@ 0x64
 80012b0:	425b      	negs	r3, r3
	t.speedL = (ml + 100) / 2;	// keep value inside 0 and 100
 80012b2:	b21c      	sxth	r4, r3
 80012b4:	2c64      	cmp	r4, #100	@ 0x64
 80012b6:	dd00      	ble.n	80012ba <tankMix+0x26>
 80012b8:	2364      	movs	r3, #100	@ 0x64
 80012ba:	3364      	adds	r3, #100	@ 0x64
 80012bc:	b21b      	sxth	r3, r3
 80012be:	105b      	asrs	r3, r3, #1
	int16_t mr = th - st;	// mixing
 80012c0:	1a09      	subs	r1, r1, r0
	return t;
 80012c2:	7013      	strb	r3, [r2, #0]
	if (mr < -100) mr = -100;
 80012c4:	1c08      	adds	r0, r1, #0
 80012c6:	3164      	adds	r1, #100	@ 0x64
 80012c8:	da02      	bge.n	80012d0 <tankMix+0x3c>
 80012ca:	2364      	movs	r3, #100	@ 0x64
 80012cc:	425b      	negs	r3, r3
 80012ce:	1c18      	adds	r0, r3, #0
	t.speedR = (mr + 100) / 2;
 80012d0:	b203      	sxth	r3, r0
 80012d2:	2b64      	cmp	r3, #100	@ 0x64
 80012d4:	dd00      	ble.n	80012d8 <tankMix+0x44>
 80012d6:	2064      	movs	r0, #100	@ 0x64
 80012d8:	3064      	adds	r0, #100	@ 0x64
 80012da:	05c3      	lsls	r3, r0, #23
	return t;
 80012dc:	0e1b      	lsrs	r3, r3, #24
 80012de:	7810      	ldrb	r0, [r2, #0]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	4318      	orrs	r0, r3
}
 80012e4:	b002      	add	sp, #8
 80012e6:	bd10      	pop	{r4, pc}

080012e8 <initServos>:

extern uint8_t s1Rev;
extern uint8_t s2Rev;

void initServos(TIM_HandleTypeDef *htim) {
	TIM16->CCR1 = S1_MIN_TIME_PWM;
 80012e8:	22fa      	movs	r2, #250	@ 0xfa
void initServos(TIM_HandleTypeDef *htim) {
 80012ea:	b510      	push	{r4, lr}
	TIM16->CCR1 = S1_MIN_TIME_PWM;
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <initServos+0x1c>)
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM17->CCR1 = S2_MIN_TIME_PWM;
 80012f2:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <initServos+0x20>)
 80012f4:	3ac9      	subs	r2, #201	@ 0xc9
 80012f6:	3aff      	subs	r2, #255	@ 0xff
	HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1);
 80012f8:	2100      	movs	r1, #0
	TIM17->CCR1 = S2_MIN_TIME_PWM;
 80012fa:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIMEx_PWMN_Start(htim, TIM_CHANNEL_1);
 80012fc:	f004 f8d0 	bl	80054a0 <HAL_TIMEx_PWMN_Start>
}
 8001300:	bd10      	pop	{r4, pc}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	40014400 	.word	0x40014400
 8001308:	40014800 	.word	0x40014800

0800130c <setServoAngle>:
 * P(us) = P * 1'000'000
 * factor = 10000/P(us)
 * if factor < 1 divide by the new factor
 * new factor = 1/factor
 */
void setServoAngle(uint8_t servoN, uint8_t percentage) {
 800130c:	b500      	push	{lr}
	const uint8_t factor = 2;
	uint16_t temp = percentage;
 800130e:	1c0b      	adds	r3, r1, #0
void setServoAngle(uint8_t servoN, uint8_t percentage) {
 8001310:	b083      	sub	sp, #12
 8001312:	2964      	cmp	r1, #100	@ 0x64
 8001314:	d900      	bls.n	8001318 <setServoAngle+0xc>
 8001316:	2364      	movs	r3, #100	@ 0x64
 8001318:	b29b      	uxth	r3, r3
	switch (servoN) {
 800131a:	2800      	cmp	r0, #0
 800131c:	d018      	beq.n	8001350 <setServoAngle+0x44>
 800131e:	2801      	cmp	r0, #1
 8001320:	d114      	bne.n	800134c <setServoAngle+0x40>
			isRev = s2Rev;
 8001322:	4a16      	ldr	r2, [pc, #88]	@ (800137c <setServoAngle+0x70>)
	if (temp > 100) temp = 100;
	if (temp < 0) temp = 0;

	if (getServoRev(servoN)) temp = 100 - temp;	// take in count if the servo must be reversed or not
 8001324:	7812      	ldrb	r2, [r2, #0]
 8001326:	2a00      	cmp	r2, #0
 8001328:	d002      	beq.n	8001330 <setServoAngle+0x24>
 800132a:	2264      	movs	r2, #100	@ 0x64
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b29b      	uxth	r3, r3
		case S1:
			temp = map(temp, 0, 100, S1_MIN_TIME_PWM, S1_MAX_TIME_PWM);
			TIM16->CCR1 = temp * factor;
			break;
		case S2:
			temp = map(temp, 0, 100, S2_MIN_TIME_PWM, S2_MAX_TIME_PWM);
 8001330:	b218      	sxth	r0, r3
 8001332:	2396      	movs	r3, #150	@ 0x96
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2388      	movs	r3, #136	@ 0x88
 800133a:	2264      	movs	r2, #100	@ 0x64
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	2100      	movs	r1, #0
 8001340:	f7ff fd52 	bl	8000de8 <map>
			TIM17->CCR1 = temp * factor;
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <setServoAngle+0x74>)
 8001346:	b280      	uxth	r0, r0
 8001348:	0040      	lsls	r0, r0, #1
 800134a:	6358      	str	r0, [r3, #52]	@ 0x34
			break;
	}
}
 800134c:	b003      	add	sp, #12
 800134e:	bd00      	pop	{pc}
			isRev = s1Rev;
 8001350:	4a0c      	ldr	r2, [pc, #48]	@ (8001384 <setServoAngle+0x78>)
	if (getServoRev(servoN)) temp = 100 - temp;	// take in count if the servo must be reversed or not
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	2a00      	cmp	r2, #0
 8001356:	d002      	beq.n	800135e <setServoAngle+0x52>
 8001358:	2264      	movs	r2, #100	@ 0x64
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	b29b      	uxth	r3, r3
			temp = map(temp, 0, 100, S1_MIN_TIME_PWM, S1_MAX_TIME_PWM);
 800135e:	b218      	sxth	r0, r3
 8001360:	23fa      	movs	r3, #250	@ 0xfa
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	23fa      	movs	r3, #250	@ 0xfa
 8001368:	2264      	movs	r2, #100	@ 0x64
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	2100      	movs	r1, #0
 800136e:	f7ff fd3b 	bl	8000de8 <map>
			TIM16->CCR1 = temp * factor;
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <setServoAngle+0x7c>)
 8001374:	b280      	uxth	r0, r0
 8001376:	0040      	lsls	r0, r0, #1
 8001378:	6358      	str	r0, [r3, #52]	@ 0x34
			break;
 800137a:	e7e7      	b.n	800134c <setServoAngle+0x40>
 800137c:	2000021e 	.word	0x2000021e
 8001380:	40014800 	.word	0x40014800
 8001384:	2000021f 	.word	0x2000021f
 8001388:	40014400 	.word	0x40014400

0800138c <decodeCommand>:

	sprintf(recievedString, "%s, %s", c.type, c.value);
	return isOK;
}

Command decodeCommand(char *buffer) {
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	0005      	movs	r5, r0
	Command c;
	// make a copy of the buffer and use it because strtok is destructive
	char temp[strlen(buffer)];
 8001394:	0008      	movs	r0, r1
Command decodeCommand(char *buffer) {
 8001396:	000e      	movs	r6, r1
	char temp[strlen(buffer)];
 8001398:	f7fe feb6 	bl	8000108 <strlen>
 800139c:	4669      	mov	r1, sp
 800139e:	1dc3      	adds	r3, r0, #7
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	1acb      	subs	r3, r1, r3
 80013a6:	469d      	mov	sp, r3
 80013a8:	0002      	movs	r2, r0
 80013aa:	466c      	mov	r4, sp
	strcpy(temp, buffer);
 80013ac:	3201      	adds	r2, #1
 80013ae:	0031      	movs	r1, r6
 80013b0:	4668      	mov	r0, sp
 80013b2:	f006 fa70 	bl	8007896 <memcpy>
	return c;
}

void remove_all_chars(char *str, char c) {
	char *pr = str, *pw = str;
	while (*pr) {
 80013b6:	7823      	ldrb	r3, [r4, #0]
 80013b8:	466a      	mov	r2, sp
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <decodeCommand+0x46>
 80013be:	4669      	mov	r1, sp
		*pw = *pr++;
 80013c0:	7013      	strb	r3, [r2, #0]
		pw += (*pw != c);
 80013c2:	3b20      	subs	r3, #32
 80013c4:	1e58      	subs	r0, r3, #1
 80013c6:	4183      	sbcs	r3, r0
		*pw = *pr++;
 80013c8:	3101      	adds	r1, #1
		pw += (*pw != c);
 80013ca:	18d2      	adds	r2, r2, r3
	while (*pr) {
 80013cc:	780b      	ldrb	r3, [r1, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f6      	bne.n	80013c0 <decodeCommand+0x34>
	}
	*pw = '\0';
 80013d2:	2300      	movs	r3, #0
 80013d4:	7013      	strb	r3, [r2, #0]
	while (*pr) {
 80013d6:	7823      	ldrb	r3, [r4, #0]
 80013d8:	0022      	movs	r2, r4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d009      	beq.n	80013f2 <decodeCommand+0x66>
 80013de:	0021      	movs	r1, r4
		*pw = *pr++;
 80013e0:	7013      	strb	r3, [r2, #0]
		pw += (*pw != c);
 80013e2:	3b0a      	subs	r3, #10
 80013e4:	1e58      	subs	r0, r3, #1
 80013e6:	4183      	sbcs	r3, r0
		*pw = *pr++;
 80013e8:	3101      	adds	r1, #1
		pw += (*pw != c);
 80013ea:	18d2      	adds	r2, r2, r3
	while (*pr) {
 80013ec:	780b      	ldrb	r3, [r1, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f6      	bne.n	80013e0 <decodeCommand+0x54>
	*pw = '\0';
 80013f2:	2300      	movs	r3, #0
	char *token = strtok(temp, COMMAND_TYPE_SEPARATOR);
 80013f4:	4e0d      	ldr	r6, [pc, #52]	@ (800142c <decodeCommand+0xa0>)
	*pw = '\0';
 80013f6:	7013      	strb	r3, [r2, #0]
	char *token = strtok(temp, COMMAND_TYPE_SEPARATOR);
 80013f8:	0031      	movs	r1, r6
 80013fa:	0020      	movs	r0, r4
 80013fc:	f006 f968 	bl	80076d0 <strtok>
 8001400:	0001      	movs	r1, r0
	strcpy(c.type, token);
 8001402:	1d38      	adds	r0, r7, #4
 8001404:	f006 fa3f 	bl	8007886 <strcpy>
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 8001408:	0031      	movs	r1, r6
 800140a:	2000      	movs	r0, #0
 800140c:	f006 f960 	bl	80076d0 <strtok>
	strcpy(c.value, token);
 8001410:	230e      	movs	r3, #14
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 8001412:	0001      	movs	r1, r0
	strcpy(c.value, token);
 8001414:	18f8      	adds	r0, r7, r3
 8001416:	f006 fa36 	bl	8007886 <strcpy>
	return c;
 800141a:	2214      	movs	r2, #20
 800141c:	0028      	movs	r0, r5
 800141e:	1d39      	adds	r1, r7, #4
 8001420:	f006 fa39 	bl	8007896 <memcpy>
}
 8001424:	0028      	movs	r0, r5
 8001426:	46bd      	mov	sp, r7
 8001428:	b007      	add	sp, #28
 800142a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142c:	08008900 	.word	0x08008900

08001430 <serialPrintString>:
}

void serialPrintString(uint8_t *s) {
 8001430:	b510      	push	{r4, lr}
 8001432:	0004      	movs	r4, r0
	CDC_Transmit_FS(s, strlen(s));
 8001434:	f7fe fe68 	bl	8000108 <strlen>
 8001438:	b281      	uxth	r1, r0
 800143a:	0020      	movs	r0, r4
 800143c:	f005 fd0c 	bl	8006e58 <CDC_Transmit_FS>
}
 8001440:	bd10      	pop	{r4, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)

08001444 <storeSettingsToEeprom>:

void storeSettingsToEeprom() {
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	46ce      	mov	lr, r9
 8001448:	4647      	mov	r7, r8
 800144a:	b580      	push	{r7, lr}
	dataToStore[0] = thChannel;
	dataToStore[1] = stChannel;
	dataToStore[2] = wpChannel;
	dataToStore[3] = s1Channel;
	dataToStore[4] = s2Channel;
	dataToStore[5] = armChannel;
 800144c:	4a48      	ldr	r2, [pc, #288]	@ (8001570 <storeSettingsToEeprom+0x12c>)
	dataToStore[4] = s2Channel;
 800144e:	4b49      	ldr	r3, [pc, #292]	@ (8001574 <storeSettingsToEeprom+0x130>)
 8001450:	7812      	ldrb	r2, [r2, #0]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	0212      	lsls	r2, r2, #8

	dataToStore[6] = m1Rev;
 8001456:	4948      	ldr	r1, [pc, #288]	@ (8001578 <storeSettingsToEeprom+0x134>)
 8001458:	4313      	orrs	r3, r2
	dataToStore[7] = m2Rev;
 800145a:	4a48      	ldr	r2, [pc, #288]	@ (800157c <storeSettingsToEeprom+0x138>)
 800145c:	7809      	ldrb	r1, [r1, #0]
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	0409      	lsls	r1, r1, #16
 8001462:	0612      	lsls	r2, r2, #24
 8001464:	430b      	orrs	r3, r1
void storeSettingsToEeprom() {
 8001466:	b08b      	sub	sp, #44	@ 0x2c
 8001468:	4313      	orrs	r3, r2
	dataToStore[0] = thChannel;
 800146a:	9306      	str	r3, [sp, #24]
	dataToStore[8] = m3Rev;
 800146c:	4b44      	ldr	r3, [pc, #272]	@ (8001580 <storeSettingsToEeprom+0x13c>)
 800146e:	ad05      	add	r5, sp, #20
 8001470:	781b      	ldrb	r3, [r3, #0]
	dataToStore[1] = stChannel;
 8001472:	4944      	ldr	r1, [pc, #272]	@ (8001584 <storeSettingsToEeprom+0x140>)
	dataToStore[8] = m3Rev;
 8001474:	722b      	strb	r3, [r5, #8]
	dataToStore[9] = s1Rev;
 8001476:	4b44      	ldr	r3, [pc, #272]	@ (8001588 <storeSettingsToEeprom+0x144>)
	dataToStore[0] = thChannel;
 8001478:	4a44      	ldr	r2, [pc, #272]	@ (800158c <storeSettingsToEeprom+0x148>)
	dataToStore[9] = s1Rev;
 800147a:	781b      	ldrb	r3, [r3, #0]
	dataToStore[0] = thChannel;
 800147c:	7809      	ldrb	r1, [r1, #0]
 800147e:	7812      	ldrb	r2, [r2, #0]
	dataToStore[9] = s1Rev;
 8001480:	726b      	strb	r3, [r5, #9]
	dataToStore[10] = s2Rev;
 8001482:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <storeSettingsToEeprom+0x14c>)
	dataToStore[0] = thChannel;
 8001484:	0209      	lsls	r1, r1, #8
	dataToStore[2] = wpChannel;
 8001486:	4c43      	ldr	r4, [pc, #268]	@ (8001594 <storeSettingsToEeprom+0x150>)
	dataToStore[10] = s2Rev;
 8001488:	781b      	ldrb	r3, [r3, #0]
	dataToStore[0] = thChannel;
 800148a:	430a      	orrs	r2, r1
	dataToStore[3] = s1Channel;
 800148c:	4942      	ldr	r1, [pc, #264]	@ (8001598 <storeSettingsToEeprom+0x154>)
	dataToStore[0] = thChannel;
 800148e:	7824      	ldrb	r4, [r4, #0]
 8001490:	7809      	ldrb	r1, [r1, #0]
	dataToStore[10] = s2Rev;
 8001492:	72ab      	strb	r3, [r5, #10]

	switch (mLeft) {	// mLeft is code 0
 8001494:	4b41      	ldr	r3, [pc, #260]	@ (800159c <storeSettingsToEeprom+0x158>)
	dataToStore[0] = thChannel;
 8001496:	0424      	lsls	r4, r4, #16
 8001498:	0609      	lsls	r1, r1, #24
 800149a:	4322      	orrs	r2, r4
	switch (mLeft) {	// mLeft is code 0
 800149c:	781b      	ldrb	r3, [r3, #0]
	dataToStore[0] = thChannel;
 800149e:	430a      	orrs	r2, r1
 80014a0:	2000      	movs	r0, #0
 80014a2:	9205      	str	r2, [sp, #20]
	switch (mLeft) {	// mLeft is code 0
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d046      	beq.n	8001536 <storeSettingsToEeprom+0xf2>
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d05e      	beq.n	800156a <storeSettingsToEeprom+0x126>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d05a      	beq.n	8001566 <storeSettingsToEeprom+0x122>
		case M3:
			dataToStore[13] = 0;
			break;
	}

	switch (mRight) {	// mRight is code 1
 80014b0:	4b3b      	ldr	r3, [pc, #236]	@ (80015a0 <storeSettingsToEeprom+0x15c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d043      	beq.n	8001540 <storeSettingsToEeprom+0xfc>
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d051      	beq.n	8001560 <storeSettingsToEeprom+0x11c>
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d04c      	beq.n	800155a <storeSettingsToEeprom+0x116>
		case M3:
			dataToStore[13] = 1;
			break;
	}

	switch (mWeapon) {	// mWeapon is code 2
 80014c0:	4b38      	ldr	r3, [pc, #224]	@ (80015a4 <storeSettingsToEeprom+0x160>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d040      	beq.n	800154a <storeSettingsToEeprom+0x106>
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d044      	beq.n	8001556 <storeSettingsToEeprom+0x112>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d03f      	beq.n	8001550 <storeSettingsToEeprom+0x10c>
			break;
		case M3:
			dataToStore[13] = 2;
			break;
	}
	dataToStore[14] = weaponDoubleDirection;
 80014d0:	4b35      	ldr	r3, [pc, #212]	@ (80015a8 <storeSettingsToEeprom+0x164>)
 80014d2:	2613      	movs	r6, #19
 80014d4:	781b      	ldrb	r3, [r3, #0]
	dataToStore[16] = noDisarm;
	dataToStore[17] = limitVoltage;
	dataToStore[18] = cutOffVoltage;
	dataToStore[19] = recieverIsPWM;
	// write to memory
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 80014d6:	2400      	movs	r4, #0
	dataToStore[14] = weaponDoubleDirection;
 80014d8:	73ab      	strb	r3, [r5, #14]
	dataToStore[15] = tankMixIsON;
 80014da:	4b34      	ldr	r3, [pc, #208]	@ (80015ac <storeSettingsToEeprom+0x168>)
	return data;
}

void write_byte_eeprom(uint8_t address, uint8_t value) {
	uint8_t data = value;
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80014dc:	2701      	movs	r7, #1
	dataToStore[15] = tankMixIsON;
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	446e      	add	r6, sp
 80014e2:	73eb      	strb	r3, [r5, #15]
	dataToStore[16] = noDisarm;
 80014e4:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <storeSettingsToEeprom+0x16c>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	742b      	strb	r3, [r5, #16]
	dataToStore[17] = limitVoltage;
 80014ea:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <storeSettingsToEeprom+0x170>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	746b      	strb	r3, [r5, #17]
	dataToStore[18] = cutOffVoltage;
 80014f0:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <storeSettingsToEeprom+0x174>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	74ab      	strb	r3, [r5, #18]
	dataToStore[19] = recieverIsPWM;
 80014f6:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <storeSettingsToEeprom+0x178>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	74eb      	strb	r3, [r5, #19]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 80014fc:	4b30      	ldr	r3, [pc, #192]	@ (80015c0 <storeSettingsToEeprom+0x17c>)
 80014fe:	4699      	mov	r9, r3
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001500:	23fa      	movs	r3, #250	@ 0xfa
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4698      	mov	r8, r3
	uint8_t data = value;
 8001506:	782b      	ldrb	r3, [r5, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001508:	b2a2      	uxth	r2, r4
	uint8_t data = value;
 800150a:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800150c:	4643      	mov	r3, r8
 800150e:	21a0      	movs	r1, #160	@ 0xa0
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	4648      	mov	r0, r9
 8001514:	2301      	movs	r3, #1
 8001516:	9701      	str	r7, [sp, #4]
 8001518:	9600      	str	r6, [sp, #0]
 800151a:	f001 fe2d 	bl	8003178 <HAL_I2C_Mem_Write>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800151e:	3401      	adds	r4, #1
	HAL_Delay(10);
 8001520:	200a      	movs	r0, #10
 8001522:	f000 fe91 	bl	8002248 <HAL_Delay>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001526:	3501      	adds	r5, #1
 8001528:	2c14      	cmp	r4, #20
 800152a:	d1ec      	bne.n	8001506 <storeSettingsToEeprom+0xc2>
}
 800152c:	b00b      	add	sp, #44	@ 0x2c
 800152e:	bcc0      	pop	{r6, r7}
 8001530:	46b9      	mov	r9, r7
 8001532:	46b0      	mov	r8, r6
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (mRight) {	// mRight is code 1
 8001536:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <storeSettingsToEeprom+0x15c>)
			dataToStore[12] = 0;
 8001538:	7328      	strb	r0, [r5, #12]
	switch (mRight) {	// mRight is code 1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d1bb      	bne.n	80014b8 <storeSettingsToEeprom+0x74>
			dataToStore[12] = 1;
 8001540:	732b      	strb	r3, [r5, #12]
	switch (mWeapon) {	// mWeapon is code 2
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <storeSettingsToEeprom+0x160>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d1be      	bne.n	80014c8 <storeSettingsToEeprom+0x84>
			dataToStore[12] = 2;
 800154a:	2302      	movs	r3, #2
 800154c:	732b      	strb	r3, [r5, #12]
			break;
 800154e:	e7bf      	b.n	80014d0 <storeSettingsToEeprom+0x8c>
			dataToStore[11] = 2;
 8001550:	3302      	adds	r3, #2
 8001552:	72eb      	strb	r3, [r5, #11]
			break;
 8001554:	e7bc      	b.n	80014d0 <storeSettingsToEeprom+0x8c>
			dataToStore[13] = 2;
 8001556:	736b      	strb	r3, [r5, #13]
			break;
 8001558:	e7ba      	b.n	80014d0 <storeSettingsToEeprom+0x8c>
			dataToStore[11] = 1;
 800155a:	3301      	adds	r3, #1
 800155c:	72eb      	strb	r3, [r5, #11]
			break;
 800155e:	e7af      	b.n	80014c0 <storeSettingsToEeprom+0x7c>
			dataToStore[13] = 1;
 8001560:	2301      	movs	r3, #1
 8001562:	736b      	strb	r3, [r5, #13]
			break;
 8001564:	e7ac      	b.n	80014c0 <storeSettingsToEeprom+0x7c>
			dataToStore[11] = 0;
 8001566:	72eb      	strb	r3, [r5, #11]
			break;
 8001568:	e7a2      	b.n	80014b0 <storeSettingsToEeprom+0x6c>
			dataToStore[13] = 0;
 800156a:	7368      	strb	r0, [r5, #13]
			break;
 800156c:	e7a0      	b.n	80014b0 <storeSettingsToEeprom+0x6c>
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	2000000c 	.word	0x2000000c
 8001574:	2000000d 	.word	0x2000000d
 8001578:	2000000b 	.word	0x2000000b
 800157c:	2000000a 	.word	0x2000000a
 8001580:	20000220 	.word	0x20000220
 8001584:	20000010 	.word	0x20000010
 8001588:	2000021f 	.word	0x2000021f
 800158c:	20000011 	.word	0x20000011
 8001590:	2000021e 	.word	0x2000021e
 8001594:	2000000f 	.word	0x2000000f
 8001598:	2000000e 	.word	0x2000000e
 800159c:	2000021d 	.word	0x2000021d
 80015a0:	20000009 	.word	0x20000009
 80015a4:	20000008 	.word	0x20000008
 80015a8:	2000021c 	.word	0x2000021c
 80015ac:	20000007 	.word	0x20000007
 80015b0:	20000006 	.word	0x20000006
 80015b4:	20000005 	.word	0x20000005
 80015b8:	20000004 	.word	0x20000004
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000350 	.word	0x20000350

080015c4 <readSettingsFromEeprom>:
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 80015c4:	4b4a      	ldr	r3, [pc, #296]	@ (80016f0 <readSettingsFromEeprom+0x12c>)
void readSettingsFromEeprom() {
 80015c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c8:	46d6      	mov	lr, sl
 80015ca:	469a      	mov	sl, r3
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80015cc:	23fa      	movs	r3, #250	@ 0xfa
void readSettingsFromEeprom() {
 80015ce:	464f      	mov	r7, r9
 80015d0:	4646      	mov	r6, r8
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4699      	mov	r9, r3
 80015d6:	2301      	movs	r3, #1
void readSettingsFromEeprom() {
 80015d8:	b5c0      	push	{r6, r7, lr}
 80015da:	b08a      	sub	sp, #40	@ 0x28
 80015dc:	2613      	movs	r6, #19
 80015de:	af05      	add	r7, sp, #20
 80015e0:	003d      	movs	r5, r7
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 80015e2:	2400      	movs	r4, #0
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80015e4:	4698      	mov	r8, r3
 80015e6:	446e      	add	r6, sp
 80015e8:	464b      	mov	r3, r9
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	4643      	mov	r3, r8
 80015ee:	b2a2      	uxth	r2, r4
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	21a0      	movs	r1, #160	@ 0xa0
 80015f4:	2301      	movs	r3, #1
 80015f6:	4650      	mov	r0, sl
 80015f8:	9600      	str	r6, [sp, #0]
 80015fa:	f001 feb5 	bl	8003368 <HAL_I2C_Mem_Read>
	return data;
 80015fe:	7833      	ldrb	r3, [r6, #0]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001600:	3401      	adds	r4, #1
		dataRead[i] = read_byte_eeprom(i);
 8001602:	702b      	strb	r3, [r5, #0]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001604:	3501      	adds	r5, #1
 8001606:	2c14      	cmp	r4, #20
 8001608:	d1ee      	bne.n	80015e8 <readSettingsFromEeprom+0x24>
	thChannel = dataRead[0];
 800160a:	4b3a      	ldr	r3, [pc, #232]	@ (80016f4 <readSettingsFromEeprom+0x130>)
 800160c:	783a      	ldrb	r2, [r7, #0]
 800160e:	701a      	strb	r2, [r3, #0]
	stChannel = dataRead[1];
 8001610:	787a      	ldrb	r2, [r7, #1]
 8001612:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <readSettingsFromEeprom+0x134>)
 8001614:	701a      	strb	r2, [r3, #0]
	wpChannel = dataRead[2];
 8001616:	78ba      	ldrb	r2, [r7, #2]
 8001618:	4b38      	ldr	r3, [pc, #224]	@ (80016fc <readSettingsFromEeprom+0x138>)
 800161a:	701a      	strb	r2, [r3, #0]
	s1Channel = dataRead[3];
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	4b38      	ldr	r3, [pc, #224]	@ (8001700 <readSettingsFromEeprom+0x13c>)
 8001620:	701a      	strb	r2, [r3, #0]
	s2Channel = dataRead[4];
 8001622:	793a      	ldrb	r2, [r7, #4]
 8001624:	4b37      	ldr	r3, [pc, #220]	@ (8001704 <readSettingsFromEeprom+0x140>)
 8001626:	701a      	strb	r2, [r3, #0]
	armChannel = dataRead[5];
 8001628:	797a      	ldrb	r2, [r7, #5]
 800162a:	4b37      	ldr	r3, [pc, #220]	@ (8001708 <readSettingsFromEeprom+0x144>)
 800162c:	701a      	strb	r2, [r3, #0]
	m1Rev = dataRead[6];
 800162e:	79ba      	ldrb	r2, [r7, #6]
 8001630:	4b36      	ldr	r3, [pc, #216]	@ (800170c <readSettingsFromEeprom+0x148>)
 8001632:	701a      	strb	r2, [r3, #0]
	m2Rev = dataRead[7];
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	4b36      	ldr	r3, [pc, #216]	@ (8001710 <readSettingsFromEeprom+0x14c>)
 8001638:	701a      	strb	r2, [r3, #0]
	m3Rev = dataRead[8];
 800163a:	7a3a      	ldrb	r2, [r7, #8]
 800163c:	4b35      	ldr	r3, [pc, #212]	@ (8001714 <readSettingsFromEeprom+0x150>)
 800163e:	701a      	strb	r2, [r3, #0]
	s1Rev = dataRead[9];
 8001640:	7a7a      	ldrb	r2, [r7, #9]
 8001642:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <readSettingsFromEeprom+0x154>)
 8001644:	701a      	strb	r2, [r3, #0]
	s2Rev = dataRead[10];
 8001646:	7aba      	ldrb	r2, [r7, #10]
 8001648:	4b34      	ldr	r3, [pc, #208]	@ (800171c <readSettingsFromEeprom+0x158>)
 800164a:	701a      	strb	r2, [r3, #0]
	switch (dataRead[11]) {	// control M1 at which motor is assigned
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d029      	beq.n	80016a6 <readSettingsFromEeprom+0xe2>
 8001652:	2b02      	cmp	r3, #2
 8001654:	d048      	beq.n	80016e8 <readSettingsFromEeprom+0x124>
 8001656:	2b00      	cmp	r3, #0
 8001658:	d043      	beq.n	80016e2 <readSettingsFromEeprom+0x11e>
	switch (dataRead[12]) {	// control M2 at which motor is assigned
 800165a:	7b3b      	ldrb	r3, [r7, #12]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d028      	beq.n	80016b2 <readSettingsFromEeprom+0xee>
 8001660:	2b02      	cmp	r3, #2
 8001662:	d03a      	beq.n	80016da <readSettingsFromEeprom+0x116>
 8001664:	2b00      	cmp	r3, #0
 8001666:	d034      	beq.n	80016d2 <readSettingsFromEeprom+0x10e>
	switch (dataRead[13]) {	// control M3 at which motor is assigned
 8001668:	7b7b      	ldrb	r3, [r7, #13]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d026      	beq.n	80016bc <readSettingsFromEeprom+0xf8>
 800166e:	2b02      	cmp	r3, #2
 8001670:	d02c      	beq.n	80016cc <readSettingsFromEeprom+0x108>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d026      	beq.n	80016c4 <readSettingsFromEeprom+0x100>
	weaponDoubleDirection = dataRead[14];
 8001676:	7bba      	ldrb	r2, [r7, #14]
 8001678:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <readSettingsFromEeprom+0x15c>)
 800167a:	701a      	strb	r2, [r3, #0]
	tankMixIsON = dataRead[15];
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <readSettingsFromEeprom+0x160>)
 8001680:	701a      	strb	r2, [r3, #0]
	noDisarm = dataRead[16];
 8001682:	7c3a      	ldrb	r2, [r7, #16]
 8001684:	4b28      	ldr	r3, [pc, #160]	@ (8001728 <readSettingsFromEeprom+0x164>)
 8001686:	701a      	strb	r2, [r3, #0]
	limitVoltage = dataRead[17];
 8001688:	7c7a      	ldrb	r2, [r7, #17]
 800168a:	4b28      	ldr	r3, [pc, #160]	@ (800172c <readSettingsFromEeprom+0x168>)
 800168c:	701a      	strb	r2, [r3, #0]
	cutOffVoltage = dataRead[18];
 800168e:	7cba      	ldrb	r2, [r7, #18]
 8001690:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <readSettingsFromEeprom+0x16c>)
 8001692:	701a      	strb	r2, [r3, #0]
	recieverIsPWM = dataRead[19];
 8001694:	7cfa      	ldrb	r2, [r7, #19]
 8001696:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <readSettingsFromEeprom+0x170>)
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	b00a      	add	sp, #40	@ 0x28
 800169c:	bce0      	pop	{r5, r6, r7}
 800169e:	46ba      	mov	sl, r7
 80016a0:	46b1      	mov	r9, r6
 80016a2:	46a8      	mov	r8, r5
 80016a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mRight = M1;
 80016a6:	2200      	movs	r2, #0
 80016a8:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <readSettingsFromEeprom+0x174>)
 80016aa:	701a      	strb	r2, [r3, #0]
	switch (dataRead[12]) {	// control M2 at which motor is assigned
 80016ac:	7b3b      	ldrb	r3, [r7, #12]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d1d6      	bne.n	8001660 <readSettingsFromEeprom+0x9c>
			mRight = M2;
 80016b2:	4a21      	ldr	r2, [pc, #132]	@ (8001738 <readSettingsFromEeprom+0x174>)
 80016b4:	7013      	strb	r3, [r2, #0]
	switch (dataRead[13]) {	// control M3 at which motor is assigned
 80016b6:	7b7b      	ldrb	r3, [r7, #13]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d1d8      	bne.n	800166e <readSettingsFromEeprom+0xaa>
			mRight = M3;
 80016bc:	2202      	movs	r2, #2
 80016be:	4b1e      	ldr	r3, [pc, #120]	@ (8001738 <readSettingsFromEeprom+0x174>)
 80016c0:	701a      	strb	r2, [r3, #0]
			break;
 80016c2:	e7d8      	b.n	8001676 <readSettingsFromEeprom+0xb2>
			mLeft = M3;
 80016c4:	2202      	movs	r2, #2
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <readSettingsFromEeprom+0x178>)
 80016c8:	701a      	strb	r2, [r3, #0]
			break;
 80016ca:	e7d4      	b.n	8001676 <readSettingsFromEeprom+0xb2>
			mWeapon = M3;
 80016cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <readSettingsFromEeprom+0x17c>)
 80016ce:	7013      	strb	r3, [r2, #0]
			break;
 80016d0:	e7d1      	b.n	8001676 <readSettingsFromEeprom+0xb2>
			mLeft = M2;
 80016d2:	2201      	movs	r2, #1
 80016d4:	4b19      	ldr	r3, [pc, #100]	@ (800173c <readSettingsFromEeprom+0x178>)
 80016d6:	701a      	strb	r2, [r3, #0]
			break;
 80016d8:	e7c6      	b.n	8001668 <readSettingsFromEeprom+0xa4>
			mWeapon = M2;
 80016da:	2201      	movs	r2, #1
 80016dc:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <readSettingsFromEeprom+0x17c>)
 80016de:	701a      	strb	r2, [r3, #0]
			break;
 80016e0:	e7c2      	b.n	8001668 <readSettingsFromEeprom+0xa4>
			mLeft = M1;
 80016e2:	4a16      	ldr	r2, [pc, #88]	@ (800173c <readSettingsFromEeprom+0x178>)
 80016e4:	7013      	strb	r3, [r2, #0]
			break;
 80016e6:	e7b8      	b.n	800165a <readSettingsFromEeprom+0x96>
			mWeapon = M1;
 80016e8:	2200      	movs	r2, #0
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <readSettingsFromEeprom+0x17c>)
 80016ec:	701a      	strb	r2, [r3, #0]
			break;
 80016ee:	e7b4      	b.n	800165a <readSettingsFromEeprom+0x96>
 80016f0:	20000350 	.word	0x20000350
 80016f4:	20000011 	.word	0x20000011
 80016f8:	20000010 	.word	0x20000010
 80016fc:	2000000f 	.word	0x2000000f
 8001700:	2000000e 	.word	0x2000000e
 8001704:	2000000d 	.word	0x2000000d
 8001708:	2000000c 	.word	0x2000000c
 800170c:	2000000b 	.word	0x2000000b
 8001710:	2000000a 	.word	0x2000000a
 8001714:	20000220 	.word	0x20000220
 8001718:	2000021f 	.word	0x2000021f
 800171c:	2000021e 	.word	0x2000021e
 8001720:	2000021c 	.word	0x2000021c
 8001724:	20000007 	.word	0x20000007
 8001728:	20000006 	.word	0x20000006
 800172c:	20000005 	.word	0x20000005
 8001730:	20000004 	.word	0x20000004
 8001734:	20000000 	.word	0x20000000
 8001738:	20000009 	.word	0x20000009
 800173c:	2000021d 	.word	0x2000021d
 8001740:	20000008 	.word	0x20000008

08001744 <loadSettingsFromEeprom>:
void loadSettingsFromEeprom() {
 8001744:	b510      	push	{r4, lr}
	readSettingsFromEeprom();
 8001746:	f7ff ff3d 	bl	80015c4 <readSettingsFromEeprom>
}
 800174a:	bd10      	pop	{r4, pc}

0800174c <read_byte_eeprom>:
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800174c:	23fa      	movs	r3, #250	@ 0xfa
uint8_t read_byte_eeprom(uint8_t address) {
 800174e:	b530      	push	{r4, r5, lr}
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001750:	009b      	lsls	r3, r3, #2
uint8_t read_byte_eeprom(uint8_t address) {
 8001752:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001754:	2517      	movs	r5, #23
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	2301      	movs	r3, #1
 800175a:	4c06      	ldr	r4, [pc, #24]	@ (8001774 <read_byte_eeprom+0x28>)
 800175c:	446d      	add	r5, sp
uint8_t read_byte_eeprom(uint8_t address) {
 800175e:	0002      	movs	r2, r0
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001760:	21a0      	movs	r1, #160	@ 0xa0
 8001762:	0020      	movs	r0, r4
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	9500      	str	r5, [sp, #0]
 8001768:	f001 fdfe 	bl	8003368 <HAL_I2C_Mem_Read>
	return data;
 800176c:	7828      	ldrb	r0, [r5, #0]
}
 800176e:	b007      	add	sp, #28
 8001770:	bd30      	pop	{r4, r5, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	20000350 	.word	0x20000350

08001778 <write_byte_eeprom>:
	uint8_t data = value;
 8001778:	2317      	movs	r3, #23
void write_byte_eeprom(uint8_t address, uint8_t value) {
 800177a:	b510      	push	{r4, lr}
 800177c:	b086      	sub	sp, #24
	uint8_t data = value;
 800177e:	446b      	add	r3, sp
 8001780:	7019      	strb	r1, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001782:	21fa      	movs	r1, #250	@ 0xfa
 8001784:	0089      	lsls	r1, r1, #2
 8001786:	9102      	str	r1, [sp, #8]
 8001788:	2101      	movs	r1, #1
 800178a:	4c07      	ldr	r4, [pc, #28]	@ (80017a8 <write_byte_eeprom+0x30>)
void write_byte_eeprom(uint8_t address, uint8_t value) {
 800178c:	0002      	movs	r2, r0
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800178e:	9101      	str	r1, [sp, #4]
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	319f      	adds	r1, #159	@ 0x9f
 8001794:	2301      	movs	r3, #1
 8001796:	0020      	movs	r0, r4
 8001798:	f001 fcee 	bl	8003178 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800179c:	200a      	movs	r0, #10
 800179e:	f000 fd53 	bl	8002248 <HAL_Delay>
}
 80017a2:	b006      	add	sp, #24
 80017a4:	bd10      	pop	{r4, pc}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	20000350 	.word	0x20000350

080017ac <serialPrintSettings>:

void serialPrintSettings() {
 80017ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	dataRead[0] = thChannel;
	dataRead[1] = stChannel;
	dataRead[2] = wpChannel;
	dataRead[3] = s1Channel;
	dataRead[4] = s2Channel;
	dataRead[5] = armChannel;
 80017ae:	4a4e      	ldr	r2, [pc, #312]	@ (80018e8 <serialPrintSettings+0x13c>)
	dataRead[4] = s2Channel;
 80017b0:	4b4e      	ldr	r3, [pc, #312]	@ (80018ec <serialPrintSettings+0x140>)
 80017b2:	7812      	ldrb	r2, [r2, #0]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	0212      	lsls	r2, r2, #8

	dataRead[6] = m1Rev;
 80017b8:	494d      	ldr	r1, [pc, #308]	@ (80018f0 <serialPrintSettings+0x144>)
 80017ba:	4313      	orrs	r3, r2
	dataRead[7] = m2Rev;
 80017bc:	4a4d      	ldr	r2, [pc, #308]	@ (80018f4 <serialPrintSettings+0x148>)
 80017be:	7809      	ldrb	r1, [r1, #0]
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	0409      	lsls	r1, r1, #16
 80017c4:	0612      	lsls	r2, r2, #24
 80017c6:	430b      	orrs	r3, r1
	dataRead[1] = stChannel;
 80017c8:	494b      	ldr	r1, [pc, #300]	@ (80018f8 <serialPrintSettings+0x14c>)
 80017ca:	4313      	orrs	r3, r2
	dataRead[2] = wpChannel;
 80017cc:	4c4b      	ldr	r4, [pc, #300]	@ (80018fc <serialPrintSettings+0x150>)
	dataRead[0] = thChannel;
 80017ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001900 <serialPrintSettings+0x154>)
void serialPrintSettings() {
 80017d0:	b0a5      	sub	sp, #148	@ 0x94
	dataRead[0] = thChannel;
 80017d2:	7809      	ldrb	r1, [r1, #0]
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	7824      	ldrb	r4, [r4, #0]
 80017d8:	9304      	str	r3, [sp, #16]
	dataRead[8] = m3Rev;
 80017da:	4b4a      	ldr	r3, [pc, #296]	@ (8001904 <serialPrintSettings+0x158>)
	dataRead[0] = thChannel;
 80017dc:	0209      	lsls	r1, r1, #8
	dataRead[8] = m3Rev;
 80017de:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 80017e0:	0424      	lsls	r4, r4, #16
 80017e2:	430a      	orrs	r2, r1
 80017e4:	4322      	orrs	r2, r4
	dataRead[8] = m3Rev;
 80017e6:	ac03      	add	r4, sp, #12
 80017e8:	7223      	strb	r3, [r4, #8]
	dataRead[9] = s1Rev;
 80017ea:	4b47      	ldr	r3, [pc, #284]	@ (8001908 <serialPrintSettings+0x15c>)
	dataRead[3] = s1Channel;
 80017ec:	4947      	ldr	r1, [pc, #284]	@ (800190c <serialPrintSettings+0x160>)
	dataRead[9] = s1Rev;
 80017ee:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 80017f0:	7809      	ldrb	r1, [r1, #0]
	dataRead[9] = s1Rev;
 80017f2:	7263      	strb	r3, [r4, #9]
	dataRead[10] = s2Rev;
 80017f4:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <serialPrintSettings+0x164>)
	dataRead[0] = thChannel;
 80017f6:	0609      	lsls	r1, r1, #24
	dataRead[10] = s2Rev;
 80017f8:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 80017fa:	430a      	orrs	r2, r1
	dataRead[10] = s2Rev;
 80017fc:	72a3      	strb	r3, [r4, #10]

	switch (mLeft) {	// mleft is code 0
 80017fe:	4b45      	ldr	r3, [pc, #276]	@ (8001914 <serialPrintSettings+0x168>)
 8001800:	2000      	movs	r0, #0
 8001802:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 8001804:	9203      	str	r2, [sp, #12]
	switch (mLeft) {	// mleft is code 0
 8001806:	2b01      	cmp	r3, #1
 8001808:	d051      	beq.n	80018ae <serialPrintSettings+0x102>
 800180a:	2b02      	cmp	r3, #2
 800180c:	d069      	beq.n	80018e2 <serialPrintSettings+0x136>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d065      	beq.n	80018de <serialPrintSettings+0x132>
		case M3:
			dataRead[13] = 0;
			break;
	}

	switch (mRight) {	// mright is code 1
 8001812:	4b41      	ldr	r3, [pc, #260]	@ (8001918 <serialPrintSettings+0x16c>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d04e      	beq.n	80018b8 <serialPrintSettings+0x10c>
 800181a:	2b02      	cmp	r3, #2
 800181c:	d05c      	beq.n	80018d8 <serialPrintSettings+0x12c>
 800181e:	2b00      	cmp	r3, #0
 8001820:	d057      	beq.n	80018d2 <serialPrintSettings+0x126>
		case M3:
			dataRead[13] = 1;
			break;
	}

	switch (mWeapon) {	// mweapon is code 2
 8001822:	4b3e      	ldr	r3, [pc, #248]	@ (800191c <serialPrintSettings+0x170>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d04b      	beq.n	80018c2 <serialPrintSettings+0x116>
 800182a:	2b02      	cmp	r3, #2
 800182c:	d04f      	beq.n	80018ce <serialPrintSettings+0x122>
 800182e:	2b00      	cmp	r3, #0
 8001830:	d04a      	beq.n	80018c8 <serialPrintSettings+0x11c>
		case M3:
			dataRead[13] = 2;
			break;
	}

	dataRead[14] = weaponDoubleDirection;
 8001832:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <serialPrintSettings+0x174>)
	dataRead[16] = noDisarm;
	dataRead[17] = limitVoltage;
	dataRead[18] = cutOffVoltage;
	dataRead[19] = recieverIsPWM;

	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 8001834:	493b      	ldr	r1, [pc, #236]	@ (8001924 <serialPrintSettings+0x178>)
	dataRead[14] = weaponDoubleDirection;
 8001836:	781b      	ldrb	r3, [r3, #0]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 8001838:	2250      	movs	r2, #80	@ 0x50
	dataRead[14] = weaponDoubleDirection;
 800183a:	73a3      	strb	r3, [r4, #14]
	dataRead[15] = tankMixIsON;
 800183c:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <serialPrintSettings+0x17c>)
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 800183e:	a810      	add	r0, sp, #64	@ 0x40
	dataRead[15] = tankMixIsON;
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	af24      	add	r7, sp, #144	@ 0x90
 8001844:	73e3      	strb	r3, [r4, #15]
	dataRead[16] = noDisarm;
 8001846:	4b39      	ldr	r3, [pc, #228]	@ (800192c <serialPrintSettings+0x180>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	7423      	strb	r3, [r4, #16]
	dataRead[17] = limitVoltage;
 800184c:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <serialPrintSettings+0x184>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	7463      	strb	r3, [r4, #17]
	dataRead[18] = cutOffVoltage;
 8001852:	4b38      	ldr	r3, [pc, #224]	@ (8001934 <serialPrintSettings+0x188>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	74a3      	strb	r3, [r4, #18]
	dataRead[19] = recieverIsPWM;
 8001858:	4b37      	ldr	r3, [pc, #220]	@ (8001938 <serialPrintSettings+0x18c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	74e3      	strb	r3, [r4, #19]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 800185e:	f006 f81a 	bl	8007896 <memcpy>
			(const uint8_t*) COMMAND_M1ASS, (const uint8_t*) COMMAND_M2ASS, (const uint8_t*) COMMAND_M3ASS,
			(const uint8_t*) COMMAND_WPDD, (const uint8_t*) COMMAND_TANKON, (const uint8_t*) COMMAND_NODISARM,
			(const uint8_t*) COMMAND_LIMITVOLTAGE, (const uint8_t*) COMMAND_CUTOFFVOLTAGE,
			(const uint8_t*) COMMAND_RXPWMMODE };

	uint8_t c[] = "\nSETTINGS:\n";
 8001862:	4668      	mov	r0, sp
 8001864:	0002      	movs	r2, r0
 8001866:	4b35      	ldr	r3, [pc, #212]	@ (800193c <serialPrintSettings+0x190>)
 8001868:	cb62      	ldmia	r3!, {r1, r5, r6}
 800186a:	c262      	stmia	r2!, {r1, r5, r6}
	CDC_Transmit_FS(s, strlen(s));
 800186c:	210b      	movs	r1, #11
 800186e:	f005 faf3 	bl	8006e58 <CDC_Transmit_FS>
	serialPrintString(c);
	HAL_Delay(0);
 8001872:	2000      	movs	r0, #0
 8001874:	f000 fce8 	bl	8002248 <HAL_Delay>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 8001878:	4e31      	ldr	r6, [pc, #196]	@ (8001940 <serialPrintSettings+0x194>)
 800187a:	ad10      	add	r5, sp, #64	@ 0x40
		uint8_t string[30];
		sprintf(string, "%s > %d\n", commands[i], dataRead[i]);
 800187c:	7823      	ldrb	r3, [r4, #0]
 800187e:	cd04      	ldmia	r5!, {r2}
 8001880:	0031      	movs	r1, r6
 8001882:	a808      	add	r0, sp, #32
 8001884:	f005 feb0 	bl	80075e8 <siprintf>
	CDC_Transmit_FS(s, strlen(s));
 8001888:	a808      	add	r0, sp, #32
 800188a:	f7fe fc3d 	bl	8000108 <strlen>
 800188e:	b281      	uxth	r1, r0
 8001890:	a808      	add	r0, sp, #32
 8001892:	f005 fae1 	bl	8006e58 <CDC_Transmit_FS>
		serialPrintString(string);
		HAL_Delay(10);
 8001896:	200a      	movs	r0, #10
 8001898:	f000 fcd6 	bl	8002248 <HAL_Delay>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 800189c:	3401      	adds	r4, #1
 800189e:	42bd      	cmp	r5, r7
 80018a0:	d1ec      	bne.n	800187c <serialPrintSettings+0xd0>
	CDC_Transmit_FS(s, strlen(s));
 80018a2:	2151      	movs	r1, #81	@ 0x51
 80018a4:	4827      	ldr	r0, [pc, #156]	@ (8001944 <serialPrintSettings+0x198>)
 80018a6:	f005 fad7 	bl	8006e58 <CDC_Transmit_FS>
	}
	serialPrintString("\nwrite COMAND > VALUE (e.g. TH2CH>3)\nthan SAVE>1 to store all settings on EEPROM\n");
}
 80018aa:	b025      	add	sp, #148	@ 0x94
 80018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (mRight) {	// mright is code 1
 80018ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <serialPrintSettings+0x16c>)
			dataRead[12] = 0;
 80018b0:	7320      	strb	r0, [r4, #12]
	switch (mRight) {	// mright is code 1
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d1b0      	bne.n	800181a <serialPrintSettings+0x6e>
			dataRead[12] = 1;
 80018b8:	7323      	strb	r3, [r4, #12]
	switch (mWeapon) {	// mweapon is code 2
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <serialPrintSettings+0x170>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d1b3      	bne.n	800182a <serialPrintSettings+0x7e>
			dataRead[12] = 2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	7323      	strb	r3, [r4, #12]
			break;
 80018c6:	e7b4      	b.n	8001832 <serialPrintSettings+0x86>
			dataRead[11] = 2;
 80018c8:	3302      	adds	r3, #2
 80018ca:	72e3      	strb	r3, [r4, #11]
			break;
 80018cc:	e7b1      	b.n	8001832 <serialPrintSettings+0x86>
			dataRead[13] = 2;
 80018ce:	7363      	strb	r3, [r4, #13]
			break;
 80018d0:	e7af      	b.n	8001832 <serialPrintSettings+0x86>
			dataRead[11] = 1;
 80018d2:	3301      	adds	r3, #1
 80018d4:	72e3      	strb	r3, [r4, #11]
			break;
 80018d6:	e7a4      	b.n	8001822 <serialPrintSettings+0x76>
			dataRead[13] = 1;
 80018d8:	2301      	movs	r3, #1
 80018da:	7363      	strb	r3, [r4, #13]
			break;
 80018dc:	e7a1      	b.n	8001822 <serialPrintSettings+0x76>
			dataRead[11] = 0;
 80018de:	72e3      	strb	r3, [r4, #11]
			break;
 80018e0:	e797      	b.n	8001812 <serialPrintSettings+0x66>
			dataRead[13] = 0;
 80018e2:	7360      	strb	r0, [r4, #13]
			break;
 80018e4:	e795      	b.n	8001812 <serialPrintSettings+0x66>
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	2000000c 	.word	0x2000000c
 80018ec:	2000000d 	.word	0x2000000d
 80018f0:	2000000b 	.word	0x2000000b
 80018f4:	2000000a 	.word	0x2000000a
 80018f8:	20000010 	.word	0x20000010
 80018fc:	2000000f 	.word	0x2000000f
 8001900:	20000011 	.word	0x20000011
 8001904:	20000220 	.word	0x20000220
 8001908:	2000021f 	.word	0x2000021f
 800190c:	2000000e 	.word	0x2000000e
 8001910:	2000021e 	.word	0x2000021e
 8001914:	2000021d 	.word	0x2000021d
 8001918:	20000009 	.word	0x20000009
 800191c:	20000008 	.word	0x20000008
 8001920:	2000021c 	.word	0x2000021c
 8001924:	0800889c 	.word	0x0800889c
 8001928:	20000007 	.word	0x20000007
 800192c:	20000006 	.word	0x20000006
 8001930:	20000005 	.word	0x20000005
 8001934:	20000004 	.word	0x20000004
 8001938:	20000000 	.word	0x20000000
 800193c:	08008964 	.word	0x08008964
 8001940:	08008904 	.word	0x08008904
 8001944:	08008910 	.word	0x08008910

08001948 <modifySettingsWithCommand>:
int modifySettingsWithCommand() {
 8001948:	b570      	push	{r4, r5, r6, lr}
 800194a:	b086      	sub	sp, #24
	Command c = decodeCommand(buffer);
 800194c:	ad01      	add	r5, sp, #4
 800194e:	0028      	movs	r0, r5
 8001950:	49c5      	ldr	r1, [pc, #788]	@ (8001c68 <modifySettingsWithCommand+0x320>)
 8001952:	f7ff fd1b 	bl	800138c <decodeCommand>
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 8001956:	4ac5      	ldr	r2, [pc, #788]	@ (8001c6c <modifySettingsWithCommand+0x324>)
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	4293      	cmp	r3, r2
 800195c:	d100      	bne.n	8001960 <modifySettingsWithCommand+0x18>
 800195e:	e06c      	b.n	8001a3a <modifySettingsWithCommand+0xf2>
 8001960:	240e      	movs	r4, #14
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 8001962:	4ac3      	ldr	r2, [pc, #780]	@ (8001c70 <modifySettingsWithCommand+0x328>)
 8001964:	2600      	movs	r6, #0
 8001966:	446c      	add	r4, sp
 8001968:	4293      	cmp	r3, r2
 800196a:	d100      	bne.n	800196e <modifySettingsWithCommand+0x26>
 800196c:	e076      	b.n	8001a5c <modifySettingsWithCommand+0x114>
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 800196e:	4ac1      	ldr	r2, [pc, #772]	@ (8001c74 <modifySettingsWithCommand+0x32c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d100      	bne.n	8001976 <modifySettingsWithCommand+0x2e>
 8001974:	e081      	b.n	8001a7a <modifySettingsWithCommand+0x132>
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 8001976:	4ac0      	ldr	r2, [pc, #768]	@ (8001c78 <modifySettingsWithCommand+0x330>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d100      	bne.n	800197e <modifySettingsWithCommand+0x36>
 800197c:	e08c      	b.n	8001a98 <modifySettingsWithCommand+0x150>
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 800197e:	4abf      	ldr	r2, [pc, #764]	@ (8001c7c <modifySettingsWithCommand+0x334>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d100      	bne.n	8001986 <modifySettingsWithCommand+0x3e>
 8001984:	e097      	b.n	8001ab6 <modifySettingsWithCommand+0x16e>
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001986:	4bbe      	ldr	r3, [pc, #760]	@ (8001c80 <modifySettingsWithCommand+0x338>)
 8001988:	9a01      	ldr	r2, [sp, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d100      	bne.n	8001990 <modifySettingsWithCommand+0x48>
 800198e:	e0a1      	b.n	8001ad4 <modifySettingsWithCommand+0x18c>
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001990:	4abc      	ldr	r2, [pc, #752]	@ (8001c84 <modifySettingsWithCommand+0x33c>)
 8001992:	9b01      	ldr	r3, [sp, #4]
 8001994:	4293      	cmp	r3, r2
 8001996:	d100      	bne.n	800199a <modifySettingsWithCommand+0x52>
 8001998:	e0b0      	b.n	8001afc <modifySettingsWithCommand+0x1b4>
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 800199a:	4abb      	ldr	r2, [pc, #748]	@ (8001c88 <modifySettingsWithCommand+0x340>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d100      	bne.n	80019a2 <modifySettingsWithCommand+0x5a>
 80019a0:	e0bb      	b.n	8001b1a <modifySettingsWithCommand+0x1d2>
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 80019a2:	4aba      	ldr	r2, [pc, #744]	@ (8001c8c <modifySettingsWithCommand+0x344>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d100      	bne.n	80019aa <modifySettingsWithCommand+0x62>
 80019a8:	e0c6      	b.n	8001b38 <modifySettingsWithCommand+0x1f0>
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 80019aa:	4ab9      	ldr	r2, [pc, #740]	@ (8001c90 <modifySettingsWithCommand+0x348>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d100      	bne.n	80019b2 <modifySettingsWithCommand+0x6a>
 80019b0:	e0d1      	b.n	8001b56 <modifySettingsWithCommand+0x20e>
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 80019b2:	4ab8      	ldr	r2, [pc, #736]	@ (8001c94 <modifySettingsWithCommand+0x34c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d100      	bne.n	80019ba <modifySettingsWithCommand+0x72>
 80019b8:	e0dc      	b.n	8001b74 <modifySettingsWithCommand+0x22c>
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 80019ba:	4ab7      	ldr	r2, [pc, #732]	@ (8001c98 <modifySettingsWithCommand+0x350>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d100      	bne.n	80019c2 <modifySettingsWithCommand+0x7a>
 80019c0:	e0e7      	b.n	8001b92 <modifySettingsWithCommand+0x24a>
	if (strcmp(c.type, COMMAND_M2ASS) == 0) {
 80019c2:	4ab6      	ldr	r2, [pc, #728]	@ (8001c9c <modifySettingsWithCommand+0x354>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d100      	bne.n	80019ca <modifySettingsWithCommand+0x82>
 80019c8:	e1d6      	b.n	8001d78 <modifySettingsWithCommand+0x430>
	if (strcmp(c.type, COMMAND_M3ASS) == 0) {
 80019ca:	4ab5      	ldr	r2, [pc, #724]	@ (8001ca0 <modifySettingsWithCommand+0x358>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d100      	bne.n	80019d2 <modifySettingsWithCommand+0x8a>
 80019d0:	e1b8      	b.n	8001d44 <modifySettingsWithCommand+0x3fc>
	if (strcmp(c.type, COMMAND_WPDD) == 0) {
 80019d2:	4ab4      	ldr	r2, [pc, #720]	@ (8001ca4 <modifySettingsWithCommand+0x35c>)
 80019d4:	9901      	ldr	r1, [sp, #4]
 80019d6:	4291      	cmp	r1, r2
 80019d8:	d100      	bne.n	80019dc <modifySettingsWithCommand+0x94>
 80019da:	e1a7      	b.n	8001d2c <modifySettingsWithCommand+0x3e4>
	if (strcmp(c.type, COMMAND_TANKON) == 0) {
 80019dc:	4ab2      	ldr	r2, [pc, #712]	@ (8001ca8 <modifySettingsWithCommand+0x360>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d100      	bne.n	80019e4 <modifySettingsWithCommand+0x9c>
 80019e2:	e136      	b.n	8001c52 <modifySettingsWithCommand+0x30a>
	if (strcmp(c.type, COMMAND_NODISARM) == 0) {
 80019e4:	4bb1      	ldr	r3, [pc, #708]	@ (8001cac <modifySettingsWithCommand+0x364>)
 80019e6:	9a01      	ldr	r2, [sp, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d100      	bne.n	80019ee <modifySettingsWithCommand+0xa6>
 80019ec:	e121      	b.n	8001c32 <modifySettingsWithCommand+0x2ea>
	if (strcmp(c.type, COMMAND_LIMITVOLTAGE) == 0) {
 80019ee:	4bb0      	ldr	r3, [pc, #704]	@ (8001cb0 <modifySettingsWithCommand+0x368>)
 80019f0:	9a01      	ldr	r2, [sp, #4]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d100      	bne.n	80019f8 <modifySettingsWithCommand+0xb0>
 80019f6:	e111      	b.n	8001c1c <modifySettingsWithCommand+0x2d4>
	if (strcmp(c.type, COMMAND_CUTOFFVOLTAGE) == 0) {
 80019f8:	4bae      	ldr	r3, [pc, #696]	@ (8001cb4 <modifySettingsWithCommand+0x36c>)
 80019fa:	9a01      	ldr	r2, [sp, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d100      	bne.n	8001a02 <modifySettingsWithCommand+0xba>
 8001a00:	e100      	b.n	8001c04 <modifySettingsWithCommand+0x2bc>
	if (strcmp(c.type, COMMAND_RXPWMMODE) == 0) {
 8001a02:	4bad      	ldr	r3, [pc, #692]	@ (8001cb8 <modifySettingsWithCommand+0x370>)
 8001a04:	9a01      	ldr	r2, [sp, #4]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d100      	bne.n	8001a0c <modifySettingsWithCommand+0xc4>
 8001a0a:	e0f0      	b.n	8001bee <modifySettingsWithCommand+0x2a6>
	if (strcmp(c.type, COMMAND_SAVE) == 0) {
 8001a0c:	4aab      	ldr	r2, [pc, #684]	@ (8001cbc <modifySettingsWithCommand+0x374>)
 8001a0e:	9b01      	ldr	r3, [sp, #4]
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d100      	bne.n	8001a16 <modifySettingsWithCommand+0xce>
 8001a14:	e0e2      	b.n	8001bdc <modifySettingsWithCommand+0x294>
	if (strcmp(c.type, COMMAND_READ) == 0) {
 8001a16:	4aaa      	ldr	r2, [pc, #680]	@ (8001cc0 <modifySettingsWithCommand+0x378>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d100      	bne.n	8001a1e <modifySettingsWithCommand+0xd6>
 8001a1c:	e0d4      	b.n	8001bc8 <modifySettingsWithCommand+0x280>
	if (strcmp(c.type, COMMAND_CONNECTED) == 0) {
 8001a1e:	4ba9      	ldr	r3, [pc, #676]	@ (8001cc4 <modifySettingsWithCommand+0x37c>)
 8001a20:	9a01      	ldr	r2, [sp, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d100      	bne.n	8001a28 <modifySettingsWithCommand+0xe0>
 8001a26:	2601      	movs	r6, #1
	sprintf(recievedString, "%s, %s", c.type, c.value);
 8001a28:	0023      	movs	r3, r4
 8001a2a:	002a      	movs	r2, r5
 8001a2c:	49a6      	ldr	r1, [pc, #664]	@ (8001cc8 <modifySettingsWithCommand+0x380>)
 8001a2e:	48a7      	ldr	r0, [pc, #668]	@ (8001ccc <modifySettingsWithCommand+0x384>)
 8001a30:	f005 fdda 	bl	80075e8 <siprintf>
}
 8001a34:	0030      	movs	r0, r6
 8001a36:	b006      	add	sp, #24
 8001a38:	bd70      	pop	{r4, r5, r6, pc}
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 8001a3a:	88aa      	ldrh	r2, [r5, #4]
 8001a3c:	2a48      	cmp	r2, #72	@ 0x48
 8001a3e:	d000      	beq.n	8001a42 <modifySettingsWithCommand+0xfa>
 8001a40:	e78e      	b.n	8001960 <modifySettingsWithCommand+0x18>
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 8001a42:	240e      	movs	r4, #14
 8001a44:	446c      	add	r4, sp
 8001a46:	0020      	movs	r0, r4
 8001a48:	f005 fc6e 	bl	8007328 <atoi>
 8001a4c:	4ba0      	ldr	r3, [pc, #640]	@ (8001cd0 <modifySettingsWithCommand+0x388>)
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 8001a4e:	4a88      	ldr	r2, [pc, #544]	@ (8001c70 <modifySettingsWithCommand+0x328>)
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 8001a50:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001a52:	9b01      	ldr	r3, [sp, #4]
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 8001a54:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d000      	beq.n	8001a5c <modifySettingsWithCommand+0x114>
 8001a5a:	e788      	b.n	800196e <modifySettingsWithCommand+0x26>
 8001a5c:	88aa      	ldrh	r2, [r5, #4]
 8001a5e:	2a48      	cmp	r2, #72	@ 0x48
 8001a60:	d000      	beq.n	8001a64 <modifySettingsWithCommand+0x11c>
 8001a62:	e784      	b.n	800196e <modifySettingsWithCommand+0x26>
		stChannel = atoi(c.value);
 8001a64:	0020      	movs	r0, r4
 8001a66:	f005 fc5f 	bl	8007328 <atoi>
 8001a6a:	4b9a      	ldr	r3, [pc, #616]	@ (8001cd4 <modifySettingsWithCommand+0x38c>)
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 8001a6c:	4a81      	ldr	r2, [pc, #516]	@ (8001c74 <modifySettingsWithCommand+0x32c>)
		stChannel = atoi(c.value);
 8001a6e:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001a70:	9b01      	ldr	r3, [sp, #4]
		stChannel = atoi(c.value);
 8001a72:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d000      	beq.n	8001a7a <modifySettingsWithCommand+0x132>
 8001a78:	e77d      	b.n	8001976 <modifySettingsWithCommand+0x2e>
 8001a7a:	88aa      	ldrh	r2, [r5, #4]
 8001a7c:	2a48      	cmp	r2, #72	@ 0x48
 8001a7e:	d000      	beq.n	8001a82 <modifySettingsWithCommand+0x13a>
 8001a80:	e779      	b.n	8001976 <modifySettingsWithCommand+0x2e>
		wpChannel = atoi(c.value);
 8001a82:	0020      	movs	r0, r4
 8001a84:	f005 fc50 	bl	8007328 <atoi>
 8001a88:	4b93      	ldr	r3, [pc, #588]	@ (8001cd8 <modifySettingsWithCommand+0x390>)
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 8001a8a:	4a7b      	ldr	r2, [pc, #492]	@ (8001c78 <modifySettingsWithCommand+0x330>)
		wpChannel = atoi(c.value);
 8001a8c:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001a8e:	9b01      	ldr	r3, [sp, #4]
		wpChannel = atoi(c.value);
 8001a90:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d000      	beq.n	8001a98 <modifySettingsWithCommand+0x150>
 8001a96:	e772      	b.n	800197e <modifySettingsWithCommand+0x36>
 8001a98:	88aa      	ldrh	r2, [r5, #4]
 8001a9a:	2a48      	cmp	r2, #72	@ 0x48
 8001a9c:	d000      	beq.n	8001aa0 <modifySettingsWithCommand+0x158>
 8001a9e:	e76e      	b.n	800197e <modifySettingsWithCommand+0x36>
		s1Channel = atoi(c.value);
 8001aa0:	0020      	movs	r0, r4
 8001aa2:	f005 fc41 	bl	8007328 <atoi>
 8001aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8001cdc <modifySettingsWithCommand+0x394>)
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 8001aa8:	4a74      	ldr	r2, [pc, #464]	@ (8001c7c <modifySettingsWithCommand+0x334>)
		s1Channel = atoi(c.value);
 8001aaa:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001aac:	9b01      	ldr	r3, [sp, #4]
		s1Channel = atoi(c.value);
 8001aae:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d000      	beq.n	8001ab6 <modifySettingsWithCommand+0x16e>
 8001ab4:	e767      	b.n	8001986 <modifySettingsWithCommand+0x3e>
 8001ab6:	88ab      	ldrh	r3, [r5, #4]
 8001ab8:	2b48      	cmp	r3, #72	@ 0x48
 8001aba:	d000      	beq.n	8001abe <modifySettingsWithCommand+0x176>
 8001abc:	e763      	b.n	8001986 <modifySettingsWithCommand+0x3e>
		s2Channel = atoi(c.value);
 8001abe:	0020      	movs	r0, r4
 8001ac0:	f005 fc32 	bl	8007328 <atoi>
 8001ac4:	4b86      	ldr	r3, [pc, #536]	@ (8001ce0 <modifySettingsWithCommand+0x398>)
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001ac6:	9a01      	ldr	r2, [sp, #4]
		s2Channel = atoi(c.value);
 8001ac8:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001aca:	4b6d      	ldr	r3, [pc, #436]	@ (8001c80 <modifySettingsWithCommand+0x338>)
		s2Channel = atoi(c.value);
 8001acc:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d000      	beq.n	8001ad4 <modifySettingsWithCommand+0x18c>
 8001ad2:	e75d      	b.n	8001990 <modifySettingsWithCommand+0x48>
 8001ad4:	4b83      	ldr	r3, [pc, #524]	@ (8001ce4 <modifySettingsWithCommand+0x39c>)
 8001ad6:	88aa      	ldrh	r2, [r5, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d000      	beq.n	8001ade <modifySettingsWithCommand+0x196>
 8001adc:	e758      	b.n	8001990 <modifySettingsWithCommand+0x48>
 8001ade:	79ab      	ldrb	r3, [r5, #6]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d000      	beq.n	8001ae6 <modifySettingsWithCommand+0x19e>
 8001ae4:	e754      	b.n	8001990 <modifySettingsWithCommand+0x48>
		armChannel = atoi(c.value);
 8001ae6:	0020      	movs	r0, r4
 8001ae8:	f005 fc1e 	bl	8007328 <atoi>
 8001aec:	4b7e      	ldr	r3, [pc, #504]	@ (8001ce8 <modifySettingsWithCommand+0x3a0>)
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001aee:	4a65      	ldr	r2, [pc, #404]	@ (8001c84 <modifySettingsWithCommand+0x33c>)
		armChannel = atoi(c.value);
 8001af0:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001af2:	9b01      	ldr	r3, [sp, #4]
		armChannel = atoi(c.value);
 8001af4:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d000      	beq.n	8001afc <modifySettingsWithCommand+0x1b4>
 8001afa:	e74e      	b.n	800199a <modifySettingsWithCommand+0x52>
 8001afc:	88aa      	ldrh	r2, [r5, #4]
 8001afe:	2a56      	cmp	r2, #86	@ 0x56
 8001b00:	d000      	beq.n	8001b04 <modifySettingsWithCommand+0x1bc>
 8001b02:	e74a      	b.n	800199a <modifySettingsWithCommand+0x52>
		m1Rev = atoi(c.value);
 8001b04:	0020      	movs	r0, r4
 8001b06:	f005 fc0f 	bl	8007328 <atoi>
 8001b0a:	4b78      	ldr	r3, [pc, #480]	@ (8001cec <modifySettingsWithCommand+0x3a4>)
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 8001b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8001c88 <modifySettingsWithCommand+0x340>)
		m1Rev = atoi(c.value);
 8001b0e:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001b10:	9b01      	ldr	r3, [sp, #4]
		m1Rev = atoi(c.value);
 8001b12:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d000      	beq.n	8001b1a <modifySettingsWithCommand+0x1d2>
 8001b18:	e743      	b.n	80019a2 <modifySettingsWithCommand+0x5a>
 8001b1a:	88aa      	ldrh	r2, [r5, #4]
 8001b1c:	2a56      	cmp	r2, #86	@ 0x56
 8001b1e:	d000      	beq.n	8001b22 <modifySettingsWithCommand+0x1da>
 8001b20:	e73f      	b.n	80019a2 <modifySettingsWithCommand+0x5a>
		m2Rev = atoi(c.value);
 8001b22:	0020      	movs	r0, r4
 8001b24:	f005 fc00 	bl	8007328 <atoi>
 8001b28:	4b71      	ldr	r3, [pc, #452]	@ (8001cf0 <modifySettingsWithCommand+0x3a8>)
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 8001b2a:	4a58      	ldr	r2, [pc, #352]	@ (8001c8c <modifySettingsWithCommand+0x344>)
		m2Rev = atoi(c.value);
 8001b2c:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001b2e:	9b01      	ldr	r3, [sp, #4]
		m2Rev = atoi(c.value);
 8001b30:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d000      	beq.n	8001b38 <modifySettingsWithCommand+0x1f0>
 8001b36:	e738      	b.n	80019aa <modifySettingsWithCommand+0x62>
 8001b38:	88aa      	ldrh	r2, [r5, #4]
 8001b3a:	2a56      	cmp	r2, #86	@ 0x56
 8001b3c:	d000      	beq.n	8001b40 <modifySettingsWithCommand+0x1f8>
 8001b3e:	e734      	b.n	80019aa <modifySettingsWithCommand+0x62>
		m3Rev = atoi(c.value);
 8001b40:	0020      	movs	r0, r4
 8001b42:	f005 fbf1 	bl	8007328 <atoi>
 8001b46:	4b6b      	ldr	r3, [pc, #428]	@ (8001cf4 <modifySettingsWithCommand+0x3ac>)
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 8001b48:	4a51      	ldr	r2, [pc, #324]	@ (8001c90 <modifySettingsWithCommand+0x348>)
		m3Rev = atoi(c.value);
 8001b4a:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001b4c:	9b01      	ldr	r3, [sp, #4]
		m3Rev = atoi(c.value);
 8001b4e:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d000      	beq.n	8001b56 <modifySettingsWithCommand+0x20e>
 8001b54:	e72d      	b.n	80019b2 <modifySettingsWithCommand+0x6a>
 8001b56:	88aa      	ldrh	r2, [r5, #4]
 8001b58:	2a56      	cmp	r2, #86	@ 0x56
 8001b5a:	d000      	beq.n	8001b5e <modifySettingsWithCommand+0x216>
 8001b5c:	e729      	b.n	80019b2 <modifySettingsWithCommand+0x6a>
		s1Rev = atoi(c.value);
 8001b5e:	0020      	movs	r0, r4
 8001b60:	f005 fbe2 	bl	8007328 <atoi>
 8001b64:	4b64      	ldr	r3, [pc, #400]	@ (8001cf8 <modifySettingsWithCommand+0x3b0>)
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 8001b66:	4a4b      	ldr	r2, [pc, #300]	@ (8001c94 <modifySettingsWithCommand+0x34c>)
		s1Rev = atoi(c.value);
 8001b68:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001b6a:	9b01      	ldr	r3, [sp, #4]
		s1Rev = atoi(c.value);
 8001b6c:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d000      	beq.n	8001b74 <modifySettingsWithCommand+0x22c>
 8001b72:	e722      	b.n	80019ba <modifySettingsWithCommand+0x72>
 8001b74:	88aa      	ldrh	r2, [r5, #4]
 8001b76:	2a56      	cmp	r2, #86	@ 0x56
 8001b78:	d000      	beq.n	8001b7c <modifySettingsWithCommand+0x234>
 8001b7a:	e71e      	b.n	80019ba <modifySettingsWithCommand+0x72>
		s2Rev = atoi(c.value);
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	f005 fbd3 	bl	8007328 <atoi>
 8001b82:	4b5e      	ldr	r3, [pc, #376]	@ (8001cfc <modifySettingsWithCommand+0x3b4>)
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 8001b84:	4a44      	ldr	r2, [pc, #272]	@ (8001c98 <modifySettingsWithCommand+0x350>)
		s2Rev = atoi(c.value);
 8001b86:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001b88:	9b01      	ldr	r3, [sp, #4]
		s2Rev = atoi(c.value);
 8001b8a:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d000      	beq.n	8001b92 <modifySettingsWithCommand+0x24a>
 8001b90:	e717      	b.n	80019c2 <modifySettingsWithCommand+0x7a>
 8001b92:	88aa      	ldrh	r2, [r5, #4]
 8001b94:	2a53      	cmp	r2, #83	@ 0x53
 8001b96:	d000      	beq.n	8001b9a <modifySettingsWithCommand+0x252>
 8001b98:	e713      	b.n	80019c2 <modifySettingsWithCommand+0x7a>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001b9a:	4a59      	ldr	r2, [pc, #356]	@ (8001d00 <modifySettingsWithCommand+0x3b8>)
 8001b9c:	8821      	ldrh	r1, [r4, #0]
 8001b9e:	4291      	cmp	r1, r2
 8001ba0:	d100      	bne.n	8001ba4 <modifySettingsWithCommand+0x25c>
 8001ba2:	e12b      	b.n	8001dfc <modifySettingsWithCommand+0x4b4>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001ba4:	4a57      	ldr	r2, [pc, #348]	@ (8001d04 <modifySettingsWithCommand+0x3bc>)
 8001ba6:	8821      	ldrh	r1, [r4, #0]
 8001ba8:	4291      	cmp	r1, r2
 8001baa:	d100      	bne.n	8001bae <modifySettingsWithCommand+0x266>
 8001bac:	e11e      	b.n	8001dec <modifySettingsWithCommand+0x4a4>
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001bae:	4a56      	ldr	r2, [pc, #344]	@ (8001d08 <modifySettingsWithCommand+0x3c0>)
 8001bb0:	8821      	ldrh	r1, [r4, #0]
 8001bb2:	4291      	cmp	r1, r2
 8001bb4:	d000      	beq.n	8001bb8 <modifySettingsWithCommand+0x270>
 8001bb6:	e704      	b.n	80019c2 <modifySettingsWithCommand+0x7a>
 8001bb8:	78a2      	ldrb	r2, [r4, #2]
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	d000      	beq.n	8001bc0 <modifySettingsWithCommand+0x278>
 8001bbe:	e700      	b.n	80019c2 <modifySettingsWithCommand+0x7a>
			mWeapon = M1;
 8001bc0:	4952      	ldr	r1, [pc, #328]	@ (8001d0c <modifySettingsWithCommand+0x3c4>)
 8001bc2:	2601      	movs	r6, #1
 8001bc4:	700a      	strb	r2, [r1, #0]
			isOK = TRUE;
 8001bc6:	e6fc      	b.n	80019c2 <modifySettingsWithCommand+0x7a>
	if (strcmp(c.type, COMMAND_READ) == 0) {
 8001bc8:	792b      	ldrb	r3, [r5, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d000      	beq.n	8001bd0 <modifySettingsWithCommand+0x288>
 8001bce:	e726      	b.n	8001a1e <modifySettingsWithCommand+0xd6>
		readSettingsFromEeprom();
 8001bd0:	f7ff fcf8 	bl	80015c4 <readSettingsFromEeprom>
		serialPrintSettings();
 8001bd4:	2601      	movs	r6, #1
 8001bd6:	f7ff fde9 	bl	80017ac <serialPrintSettings>
		isOK = TRUE;
 8001bda:	e720      	b.n	8001a1e <modifySettingsWithCommand+0xd6>
	if (strcmp(c.type, COMMAND_SAVE) == 0) {
 8001bdc:	792a      	ldrb	r2, [r5, #4]
 8001bde:	2a00      	cmp	r2, #0
 8001be0:	d000      	beq.n	8001be4 <modifySettingsWithCommand+0x29c>
 8001be2:	e718      	b.n	8001a16 <modifySettingsWithCommand+0xce>
		storeSettingsToEeprom();
 8001be4:	f7ff fc2e 	bl	8001444 <storeSettingsToEeprom>
 8001be8:	2601      	movs	r6, #1
 8001bea:	9b01      	ldr	r3, [sp, #4]
 8001bec:	e713      	b.n	8001a16 <modifySettingsWithCommand+0xce>
	if (strcmp(c.type, COMMAND_RXPWMMODE) == 0) {
 8001bee:	88ab      	ldrh	r3, [r5, #4]
 8001bf0:	2b4d      	cmp	r3, #77	@ 0x4d
 8001bf2:	d000      	beq.n	8001bf6 <modifySettingsWithCommand+0x2ae>
 8001bf4:	e70a      	b.n	8001a0c <modifySettingsWithCommand+0xc4>
		recieverIsPWM = atoi(c.value);
 8001bf6:	0020      	movs	r0, r4
 8001bf8:	f005 fb96 	bl	8007328 <atoi>
 8001bfc:	4b44      	ldr	r3, [pc, #272]	@ (8001d10 <modifySettingsWithCommand+0x3c8>)
 8001bfe:	2601      	movs	r6, #1
 8001c00:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001c02:	e703      	b.n	8001a0c <modifySettingsWithCommand+0xc4>
	if (strcmp(c.type, COMMAND_CUTOFFVOLTAGE) == 0) {
 8001c04:	4b43      	ldr	r3, [pc, #268]	@ (8001d14 <modifySettingsWithCommand+0x3cc>)
 8001c06:	686a      	ldr	r2, [r5, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d000      	beq.n	8001c0e <modifySettingsWithCommand+0x2c6>
 8001c0c:	e6f9      	b.n	8001a02 <modifySettingsWithCommand+0xba>
		cutOffVoltage = atoi(c.value);
 8001c0e:	0020      	movs	r0, r4
 8001c10:	f005 fb8a 	bl	8007328 <atoi>
 8001c14:	4b40      	ldr	r3, [pc, #256]	@ (8001d18 <modifySettingsWithCommand+0x3d0>)
 8001c16:	2601      	movs	r6, #1
 8001c18:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001c1a:	e6f2      	b.n	8001a02 <modifySettingsWithCommand+0xba>
	if (strcmp(c.type, COMMAND_LIMITVOLTAGE) == 0) {
 8001c1c:	792b      	ldrb	r3, [r5, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d000      	beq.n	8001c24 <modifySettingsWithCommand+0x2dc>
 8001c22:	e6e9      	b.n	80019f8 <modifySettingsWithCommand+0xb0>
		limitVoltage = atoi(c.value);
 8001c24:	0020      	movs	r0, r4
 8001c26:	f005 fb7f 	bl	8007328 <atoi>
 8001c2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d1c <modifySettingsWithCommand+0x3d4>)
 8001c2c:	2601      	movs	r6, #1
 8001c2e:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001c30:	e6e2      	b.n	80019f8 <modifySettingsWithCommand+0xb0>
	if (strcmp(c.type, COMMAND_NODISARM) == 0) {
 8001c32:	4b3b      	ldr	r3, [pc, #236]	@ (8001d20 <modifySettingsWithCommand+0x3d8>)
 8001c34:	686a      	ldr	r2, [r5, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d000      	beq.n	8001c3c <modifySettingsWithCommand+0x2f4>
 8001c3a:	e6d8      	b.n	80019ee <modifySettingsWithCommand+0xa6>
 8001c3c:	7a2b      	ldrb	r3, [r5, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d000      	beq.n	8001c44 <modifySettingsWithCommand+0x2fc>
 8001c42:	e6d4      	b.n	80019ee <modifySettingsWithCommand+0xa6>
		noDisarm = atoi(c.value);
 8001c44:	0020      	movs	r0, r4
 8001c46:	f005 fb6f 	bl	8007328 <atoi>
 8001c4a:	4b36      	ldr	r3, [pc, #216]	@ (8001d24 <modifySettingsWithCommand+0x3dc>)
 8001c4c:	2601      	movs	r6, #1
 8001c4e:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001c50:	e6cd      	b.n	80019ee <modifySettingsWithCommand+0xa6>
	if (strcmp(c.type, COMMAND_TANKON) == 0) {
 8001c52:	88ab      	ldrh	r3, [r5, #4]
 8001c54:	2b4e      	cmp	r3, #78	@ 0x4e
 8001c56:	d000      	beq.n	8001c5a <modifySettingsWithCommand+0x312>
 8001c58:	e6c4      	b.n	80019e4 <modifySettingsWithCommand+0x9c>
		tankMixIsON = atoi(c.value);
 8001c5a:	0020      	movs	r0, r4
 8001c5c:	f005 fb64 	bl	8007328 <atoi>
 8001c60:	4b31      	ldr	r3, [pc, #196]	@ (8001d28 <modifySettingsWithCommand+0x3e0>)
 8001c62:	2601      	movs	r6, #1
 8001c64:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001c66:	e6bd      	b.n	80019e4 <modifySettingsWithCommand+0x9c>
 8001c68:	200003f8 	.word	0x200003f8
 8001c6c:	43324854 	.word	0x43324854
 8001c70:	43325453 	.word	0x43325453
 8001c74:	43325057 	.word	0x43325057
 8001c78:	43323153 	.word	0x43323153
 8001c7c:	43323253 	.word	0x43323253
 8001c80:	324d5241 	.word	0x324d5241
 8001c84:	4552314d 	.word	0x4552314d
 8001c88:	4552324d 	.word	0x4552324d
 8001c8c:	4552334d 	.word	0x4552334d
 8001c90:	45523153 	.word	0x45523153
 8001c94:	45523253 	.word	0x45523253
 8001c98:	5341314d 	.word	0x5341314d
 8001c9c:	5341324d 	.word	0x5341324d
 8001ca0:	5341334d 	.word	0x5341334d
 8001ca4:	44445057 	.word	0x44445057
 8001ca8:	4f4b4e54 	.word	0x4f4b4e54
 8001cac:	49444f4e 	.word	0x49444f4e
 8001cb0:	4d494c56 	.word	0x4d494c56
 8001cb4:	54554356 	.word	0x54554356
 8001cb8:	57505852 	.word	0x57505852
 8001cbc:	45564153 	.word	0x45564153
 8001cc0:	44414552 	.word	0x44414552
 8001cc4:	004e4f43 	.word	0x004e4f43
 8001cc8:	08008a34 	.word	0x08008a34
 8001ccc:	20000208 	.word	0x20000208
 8001cd0:	20000011 	.word	0x20000011
 8001cd4:	20000010 	.word	0x20000010
 8001cd8:	2000000f 	.word	0x2000000f
 8001cdc:	2000000e 	.word	0x2000000e
 8001ce0:	2000000d 	.word	0x2000000d
 8001ce4:	00004843 	.word	0x00004843
 8001ce8:	2000000c 	.word	0x2000000c
 8001cec:	2000000b 	.word	0x2000000b
 8001cf0:	2000000a 	.word	0x2000000a
 8001cf4:	20000220 	.word	0x20000220
 8001cf8:	2000021f 	.word	0x2000021f
 8001cfc:	2000021e 	.word	0x2000021e
 8001d00:	00004c4d 	.word	0x00004c4d
 8001d04:	0000524d 	.word	0x0000524d
 8001d08:	00005057 	.word	0x00005057
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	20000000 	.word	0x20000000
 8001d14:	0046464f 	.word	0x0046464f
 8001d18:	20000004 	.word	0x20000004
 8001d1c:	20000005 	.word	0x20000005
 8001d20:	4d524153 	.word	0x4d524153
 8001d24:	20000006 	.word	0x20000006
 8001d28:	20000007 	.word	0x20000007
	if (strcmp(c.type, COMMAND_WPDD) == 0) {
 8001d2c:	792a      	ldrb	r2, [r5, #4]
 8001d2e:	2a00      	cmp	r2, #0
 8001d30:	d000      	beq.n	8001d34 <modifySettingsWithCommand+0x3ec>
 8001d32:	e653      	b.n	80019dc <modifySettingsWithCommand+0x94>
		weaponDoubleDirection = atoi(c.value);
 8001d34:	0020      	movs	r0, r4
 8001d36:	f005 faf7 	bl	8007328 <atoi>
 8001d3a:	4b34      	ldr	r3, [pc, #208]	@ (8001e0c <modifySettingsWithCommand+0x4c4>)
 8001d3c:	2601      	movs	r6, #1
 8001d3e:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001d40:	9b01      	ldr	r3, [sp, #4]
 8001d42:	e64b      	b.n	80019dc <modifySettingsWithCommand+0x94>
	if (strcmp(c.type, COMMAND_M3ASS) == 0) {
 8001d44:	88aa      	ldrh	r2, [r5, #4]
 8001d46:	2a53      	cmp	r2, #83	@ 0x53
 8001d48:	d000      	beq.n	8001d4c <modifySettingsWithCommand+0x404>
 8001d4a:	e642      	b.n	80019d2 <modifySettingsWithCommand+0x8a>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001d4c:	4a30      	ldr	r2, [pc, #192]	@ (8001e10 <modifySettingsWithCommand+0x4c8>)
 8001d4e:	8821      	ldrh	r1, [r4, #0]
 8001d50:	4291      	cmp	r1, r2
 8001d52:	d033      	beq.n	8001dbc <modifySettingsWithCommand+0x474>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001d54:	4a2f      	ldr	r2, [pc, #188]	@ (8001e14 <modifySettingsWithCommand+0x4cc>)
 8001d56:	8821      	ldrh	r1, [r4, #0]
 8001d58:	4291      	cmp	r1, r2
 8001d5a:	d027      	beq.n	8001dac <modifySettingsWithCommand+0x464>
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e18 <modifySettingsWithCommand+0x4d0>)
 8001d5e:	8821      	ldrh	r1, [r4, #0]
 8001d60:	4291      	cmp	r1, r2
 8001d62:	d000      	beq.n	8001d66 <modifySettingsWithCommand+0x41e>
 8001d64:	e635      	b.n	80019d2 <modifySettingsWithCommand+0x8a>
 8001d66:	78a2      	ldrb	r2, [r4, #2]
 8001d68:	2a00      	cmp	r2, #0
 8001d6a:	d000      	beq.n	8001d6e <modifySettingsWithCommand+0x426>
 8001d6c:	e631      	b.n	80019d2 <modifySettingsWithCommand+0x8a>
			mWeapon = M3;
 8001d6e:	2102      	movs	r1, #2
 8001d70:	4a2a      	ldr	r2, [pc, #168]	@ (8001e1c <modifySettingsWithCommand+0x4d4>)
 8001d72:	2601      	movs	r6, #1
 8001d74:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001d76:	e62c      	b.n	80019d2 <modifySettingsWithCommand+0x8a>
	if (strcmp(c.type, COMMAND_M2ASS) == 0) {
 8001d78:	88aa      	ldrh	r2, [r5, #4]
 8001d7a:	2a53      	cmp	r2, #83	@ 0x53
 8001d7c:	d000      	beq.n	8001d80 <modifySettingsWithCommand+0x438>
 8001d7e:	e624      	b.n	80019ca <modifySettingsWithCommand+0x82>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001d80:	4a23      	ldr	r2, [pc, #140]	@ (8001e10 <modifySettingsWithCommand+0x4c8>)
 8001d82:	8821      	ldrh	r1, [r4, #0]
 8001d84:	4291      	cmp	r1, r2
 8001d86:	d029      	beq.n	8001ddc <modifySettingsWithCommand+0x494>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001d88:	4a22      	ldr	r2, [pc, #136]	@ (8001e14 <modifySettingsWithCommand+0x4cc>)
 8001d8a:	8821      	ldrh	r1, [r4, #0]
 8001d8c:	4291      	cmp	r1, r2
 8001d8e:	d01d      	beq.n	8001dcc <modifySettingsWithCommand+0x484>
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001d90:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <modifySettingsWithCommand+0x4d0>)
 8001d92:	8821      	ldrh	r1, [r4, #0]
 8001d94:	4291      	cmp	r1, r2
 8001d96:	d000      	beq.n	8001d9a <modifySettingsWithCommand+0x452>
 8001d98:	e617      	b.n	80019ca <modifySettingsWithCommand+0x82>
 8001d9a:	78a2      	ldrb	r2, [r4, #2]
 8001d9c:	2a00      	cmp	r2, #0
 8001d9e:	d000      	beq.n	8001da2 <modifySettingsWithCommand+0x45a>
 8001da0:	e613      	b.n	80019ca <modifySettingsWithCommand+0x82>
			mWeapon = M2;
 8001da2:	2101      	movs	r1, #1
 8001da4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <modifySettingsWithCommand+0x4d4>)
 8001da6:	2601      	movs	r6, #1
 8001da8:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001daa:	e60e      	b.n	80019ca <modifySettingsWithCommand+0x82>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001dac:	78a2      	ldrb	r2, [r4, #2]
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d1d4      	bne.n	8001d5c <modifySettingsWithCommand+0x414>
			mRight = M3;
 8001db2:	2102      	movs	r1, #2
 8001db4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e20 <modifySettingsWithCommand+0x4d8>)
 8001db6:	2601      	movs	r6, #1
 8001db8:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001dba:	e7cf      	b.n	8001d5c <modifySettingsWithCommand+0x414>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001dbc:	78a2      	ldrb	r2, [r4, #2]
 8001dbe:	2a00      	cmp	r2, #0
 8001dc0:	d1c8      	bne.n	8001d54 <modifySettingsWithCommand+0x40c>
			mLeft = M3;
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	4a17      	ldr	r2, [pc, #92]	@ (8001e24 <modifySettingsWithCommand+0x4dc>)
 8001dc6:	2601      	movs	r6, #1
 8001dc8:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001dca:	e7c3      	b.n	8001d54 <modifySettingsWithCommand+0x40c>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001dcc:	78a2      	ldrb	r2, [r4, #2]
 8001dce:	2a00      	cmp	r2, #0
 8001dd0:	d1de      	bne.n	8001d90 <modifySettingsWithCommand+0x448>
			mRight = M2;
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4a12      	ldr	r2, [pc, #72]	@ (8001e20 <modifySettingsWithCommand+0x4d8>)
 8001dd6:	2601      	movs	r6, #1
 8001dd8:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001dda:	e7d9      	b.n	8001d90 <modifySettingsWithCommand+0x448>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001ddc:	78a2      	ldrb	r2, [r4, #2]
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d1d2      	bne.n	8001d88 <modifySettingsWithCommand+0x440>
			mLeft = M2;
 8001de2:	2101      	movs	r1, #1
 8001de4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e24 <modifySettingsWithCommand+0x4dc>)
 8001de6:	2601      	movs	r6, #1
 8001de8:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001dea:	e7cd      	b.n	8001d88 <modifySettingsWithCommand+0x440>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001dec:	78a2      	ldrb	r2, [r4, #2]
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d000      	beq.n	8001df4 <modifySettingsWithCommand+0x4ac>
 8001df2:	e6dc      	b.n	8001bae <modifySettingsWithCommand+0x266>
			mRight = M1;
 8001df4:	490a      	ldr	r1, [pc, #40]	@ (8001e20 <modifySettingsWithCommand+0x4d8>)
 8001df6:	2601      	movs	r6, #1
 8001df8:	700a      	strb	r2, [r1, #0]
			isOK = TRUE;
 8001dfa:	e6d8      	b.n	8001bae <modifySettingsWithCommand+0x266>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001dfc:	78a2      	ldrb	r2, [r4, #2]
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d000      	beq.n	8001e04 <modifySettingsWithCommand+0x4bc>
 8001e02:	e6cf      	b.n	8001ba4 <modifySettingsWithCommand+0x25c>
			mLeft = M1;
 8001e04:	4907      	ldr	r1, [pc, #28]	@ (8001e24 <modifySettingsWithCommand+0x4dc>)
 8001e06:	2601      	movs	r6, #1
 8001e08:	700a      	strb	r2, [r1, #0]
			isOK = TRUE;
 8001e0a:	e6cb      	b.n	8001ba4 <modifySettingsWithCommand+0x25c>
 8001e0c:	2000021c 	.word	0x2000021c
 8001e10:	00004c4d 	.word	0x00004c4d
 8001e14:	0000524d 	.word	0x0000524d
 8001e18:	00005057 	.word	0x00005057
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	20000009 	.word	0x20000009
 8001e24:	2000021d 	.word	0x2000021d

08001e28 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_MspInit+0x2c>)
{
 8001e2c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	6999      	ldr	r1, [r3, #24]
 8001e30:	4311      	orrs	r1, r2
 8001e32:	6199      	str	r1, [r3, #24]
 8001e34:	6999      	ldr	r1, [r3, #24]
 8001e36:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e38:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	9200      	str	r2, [sp, #0]
 8001e3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	0549      	lsls	r1, r1, #21
 8001e42:	430a      	orrs	r2, r1
 8001e44:	61da      	str	r2, [r3, #28]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	400b      	ands	r3, r1
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4e:	b002      	add	sp, #8
 8001e50:	4770      	bx	lr
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e58:	b510      	push	{r4, lr}
 8001e5a:	0004      	movs	r4, r0
 8001e5c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5e:	2214      	movs	r2, #20
 8001e60:	2100      	movs	r1, #0
 8001e62:	a802      	add	r0, sp, #8
 8001e64:	f005 fc2c 	bl	80076c0 <memset>
  if(hadc->Instance==ADC1)
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_ADC_MspInit+0x58>)
 8001e6a:	6822      	ldr	r2, [r4, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e70:	b008      	add	sp, #32
 8001e72:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e74:	2180      	movs	r1, #128	@ 0x80
 8001e76:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <HAL_ADC_MspInit+0x5c>)
 8001e78:	0089      	lsls	r1, r1, #2
 8001e7a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	619a      	str	r2, [r3, #24]
 8001e82:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e86:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e88:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e8a:	9200      	str	r2, [sp, #0]
 8001e8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	0289      	lsls	r1, r1, #10
 8001e92:	430a      	orrs	r2, r1
 8001e94:	615a      	str	r2, [r3, #20]
 8001e96:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8001e98:	2207      	movs	r2, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8001ea0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8001ea4:	9202      	str	r2, [sp, #8]
 8001ea6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f000 fc74 	bl	8002794 <HAL_GPIO_Init>
}
 8001eac:	e7e0      	b.n	8001e70 <HAL_ADC_MspInit+0x18>
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	40012400 	.word	0x40012400
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb8:	b510      	push	{r4, lr}
 8001eba:	0004      	movs	r4, r0
 8001ebc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	2214      	movs	r2, #20
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	a802      	add	r0, sp, #8
 8001ec4:	f005 fbfc 	bl	80076c0 <memset>
  if(hi2c->Instance==I2C1)
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_I2C_MspInit+0x64>)
 8001eca:	6822      	ldr	r2, [r4, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ed0:	b008      	add	sp, #32
 8001ed2:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	4c12      	ldr	r4, [pc, #72]	@ (8001f20 <HAL_I2C_MspInit+0x68>)
 8001ed8:	02d2      	lsls	r2, r2, #11
 8001eda:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	4811      	ldr	r0, [pc, #68]	@ (8001f24 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	6163      	str	r3, [r4, #20]
 8001ee2:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eea:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eee:	2312      	movs	r3, #18
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	9202      	str	r2, [sp, #8]
 8001ef4:	9303      	str	r3, [sp, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2303      	movs	r3, #3
 8001efa:	9204      	str	r2, [sp, #16]
 8001efc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f02:	f000 fc47 	bl	8002794 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f06:	2280      	movs	r2, #128	@ 0x80
 8001f08:	69e3      	ldr	r3, [r4, #28]
 8001f0a:	0392      	lsls	r2, r2, #14
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61e3      	str	r3, [r4, #28]
 8001f10:	69e3      	ldr	r3, [r4, #28]
 8001f12:	4013      	ands	r3, r2
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	9b01      	ldr	r3, [sp, #4]
}
 8001f18:	e7da      	b.n	8001ed0 <HAL_I2C_MspInit+0x18>
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000400 	.word	0x48000400

08001f28 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001f28:	6803      	ldr	r3, [r0, #0]
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x78>)
{
 8001f2c:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d014      	beq.n	8001f5c <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8001f32:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x7c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d007      	beq.n	8001f48 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8001f38:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x80>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 8001f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001fac <HAL_TIM_Base_MspInit+0x84>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d021      	beq.n	8001f88 <HAL_TIM_Base_MspInit+0x60>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001f44:	b004      	add	sp, #16
 8001f46:	4770      	bx	lr
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f48:	2310      	movs	r3, #16
 8001f4a:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_TIM_Base_MspInit+0x88>)
 8001f4c:	69d1      	ldr	r1, [r2, #28]
 8001f4e:	4319      	orrs	r1, r3
 8001f50:	61d1      	str	r1, [r2, #28]
 8001f52:	69d2      	ldr	r2, [r2, #28]
 8001f54:	4013      	ands	r3, r2
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	9b01      	ldr	r3, [sp, #4]
 8001f5a:	e7f3      	b.n	8001f44 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f5c:	2180      	movs	r1, #128	@ 0x80
 8001f5e:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_TIM_Base_MspInit+0x88>)
 8001f60:	0109      	lsls	r1, r1, #4
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	619a      	str	r2, [r3, #24]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	400b      	ands	r3, r1
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	9b00      	ldr	r3, [sp, #0]
 8001f70:	e7e8      	b.n	8001f44 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f72:	2180      	movs	r1, #128	@ 0x80
 8001f74:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <HAL_TIM_Base_MspInit+0x88>)
 8001f76:	0289      	lsls	r1, r1, #10
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	619a      	str	r2, [r3, #24]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	400b      	ands	r3, r1
 8001f82:	9302      	str	r3, [sp, #8]
 8001f84:	9b02      	ldr	r3, [sp, #8]
 8001f86:	e7dd      	b.n	8001f44 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001f88:	2180      	movs	r1, #128	@ 0x80
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <HAL_TIM_Base_MspInit+0x88>)
 8001f8c:	02c9      	lsls	r1, r1, #11
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	619a      	str	r2, [r3, #24]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	400b      	ands	r3, r1
 8001f98:	9303      	str	r3, [sp, #12]
 8001f9a:	9b03      	ldr	r3, [sp, #12]
}
 8001f9c:	e7d2      	b.n	8001f44 <HAL_TIM_Base_MspInit+0x1c>
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40001000 	.word	0x40001000
 8001fa8:	40014400 	.word	0x40014400
 8001fac:	40014800 	.word	0x40014800
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fb4:	b510      	push	{r4, lr}
 8001fb6:	0004      	movs	r4, r0
 8001fb8:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	2214      	movs	r2, #20
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	a804      	add	r0, sp, #16
 8001fc0:	f005 fb7e 	bl	80076c0 <memset>
  if(htim->Instance==TIM1)
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	4a21      	ldr	r2, [pc, #132]	@ (800204c <HAL_TIM_MspPostInit+0x98>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM16)
 8001fcc:	4a20      	ldr	r2, [pc, #128]	@ (8002050 <HAL_TIM_MspPostInit+0x9c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01b      	beq.n	800200a <HAL_TIM_MspPostInit+0x56>

  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }
  else if(htim->Instance==TIM17)
 8001fd2:	4a20      	ldr	r2, [pc, #128]	@ (8002054 <HAL_TIM_MspPostInit+0xa0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d02d      	beq.n	8002034 <HAL_TIM_MspPostInit+0x80>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001fd8:	b00a      	add	sp, #40	@ 0x28
 8001fda:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fdc:	2180      	movs	r1, #128	@ 0x80
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <HAL_TIM_MspPostInit+0xa4>)
 8001fe0:	0289      	lsls	r1, r1, #10
 8001fe2:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	615a      	str	r2, [r3, #20]
 8001fea:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin|PWM_M3_Pin;
 8001fec:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	400b      	ands	r3, r1
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin|PWM_M3_Pin;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	00d2      	lsls	r2, r2, #3
 8001ff8:	9204      	str	r2, [sp, #16]
 8001ffa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ffc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	a904      	add	r1, sp, #16
 8002000:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002002:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002004:	f000 fbc6 	bl	8002794 <HAL_GPIO_Init>
 8002008:	e7e6      	b.n	8001fd8 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	2180      	movs	r1, #128	@ 0x80
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_TIM_MspPostInit+0xa4>)
 800200e:	02c9      	lsls	r1, r1, #11
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	430a      	orrs	r2, r1
 8002014:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Pin = SERVO1_HV_Pin;
 8002016:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	400b      	ands	r3, r1
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 8002020:	2302      	movs	r3, #2
 8002022:	9204      	str	r2, [sp, #16]
 8002024:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8002026:	2302      	movs	r3, #2
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8002028:	480c      	ldr	r0, [pc, #48]	@ (800205c <HAL_TIM_MspPostInit+0xa8>)
 800202a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800202c:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 800202e:	f000 fbb1 	bl	8002794 <HAL_GPIO_Init>
}
 8002032:	e7d1      	b.n	8001fd8 <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	2180      	movs	r1, #128	@ 0x80
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <HAL_TIM_MspPostInit+0xa4>)
 8002038:	02c9      	lsls	r1, r1, #11
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	430a      	orrs	r2, r1
 800203e:	615a      	str	r2, [r3, #20]
 8002040:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 8002042:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002044:	400b      	ands	r3, r1
 8002046:	9303      	str	r3, [sp, #12]
 8002048:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	e7e9      	b.n	8002020 <HAL_TIM_MspPostInit+0x6c>
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40014400 	.word	0x40014400
 8002054:	40014800 	.word	0x40014800
 8002058:	40021000 	.word	0x40021000
 800205c:	48000400 	.word	0x48000400

08002060 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002060:	e7fe      	b.n	8002060 <NMI_Handler>
 8002062:	46c0      	nop			@ (mov r8, r8)

08002064 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <HardFault_Handler>
 8002066:	46c0      	nop			@ (mov r8, r8)

08002068 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002068:	4770      	bx	lr
 800206a:	46c0      	nop			@ (mov r8, r8)

0800206c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800206c:	4770      	bx	lr
 800206e:	46c0      	nop			@ (mov r8, r8)

08002070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002070:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002072:	f000 f8d7 	bl	8002224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002076:	bd10      	pop	{r4, pc}

08002078 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002078:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH1_Pin);
 800207a:	2001      	movs	r0, #1
 800207c:	f000 fca0 	bl	80029c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH2_Pin);
 8002080:	2002      	movs	r0, #2
 8002082:	f000 fc9d 	bl	80029c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002086:	bd10      	pop	{r4, pc}

08002088 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002088:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH3_Pin);
 800208a:	2004      	movs	r0, #4
 800208c:	f000 fc98 	bl	80029c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH4_Pin);
 8002090:	2008      	movs	r0, #8
 8002092:	f000 fc95 	bl	80029c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002096:	bd10      	pop	{r4, pc}

08002098 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002098:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800209a:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <USB_IRQHandler+0xc>)
 800209c:	f001 fbd8 	bl	8003850 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80020a0:	bd10      	pop	{r4, pc}
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	20001328 	.word	0x20001328

080020a8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80020a8:	2001      	movs	r0, #1
 80020aa:	4770      	bx	lr

080020ac <_kill>:

int _kill(int pid, int sig)
{
 80020ac:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ae:	f005 fbbd 	bl	800782c <__errno>
 80020b2:	2316      	movs	r3, #22
 80020b4:	6003      	str	r3, [r0, #0]
  return -1;
 80020b6:	2001      	movs	r0, #1
}
 80020b8:	4240      	negs	r0, r0
 80020ba:	bd10      	pop	{r4, pc}

080020bc <_exit>:

void _exit (int status)
{
 80020bc:	b510      	push	{r4, lr}
  errno = EINVAL;
 80020be:	f005 fbb5 	bl	800782c <__errno>
 80020c2:	2316      	movs	r3, #22
 80020c4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80020c6:	e7fe      	b.n	80020c6 <_exit+0xa>

080020c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c8:	b570      	push	{r4, r5, r6, lr}
 80020ca:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	dd07      	ble.n	80020de <_read+0x16>
 80020ce:	000c      	movs	r4, r1
 80020d0:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 80020d2:	e000      	b.n	80020d6 <_read+0xe>
 80020d4:	bf00      	nop
 80020d6:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	3401      	adds	r4, #1
 80020da:	42ac      	cmp	r4, r5
 80020dc:	d1f9      	bne.n	80020d2 <_read+0xa>
  }

  return len;
}
 80020de:	0030      	movs	r0, r6
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)

080020e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	dd07      	ble.n	80020fa <_write+0x16>
 80020ea:	000c      	movs	r4, r1
 80020ec:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 80020ee:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f0:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 80020f2:	e000      	b.n	80020f6 <_write+0x12>
 80020f4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f6:	42ac      	cmp	r4, r5
 80020f8:	d1f9      	bne.n	80020ee <_write+0xa>
  }
  return len;
}
 80020fa:	0030      	movs	r0, r6
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
 80020fe:	46c0      	nop			@ (mov r8, r8)

08002100 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8002100:	2001      	movs	r0, #1
}
 8002102:	4240      	negs	r0, r0
 8002104:	4770      	bx	lr
 8002106:	46c0      	nop			@ (mov r8, r8)

08002108 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	019b      	lsls	r3, r3, #6
  return 0;
}
 800210c:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800210e:	604b      	str	r3, [r1, #4]
}
 8002110:	4770      	bx	lr
 8002112:	46c0      	nop			@ (mov r8, r8)

08002114 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002114:	2001      	movs	r0, #1
 8002116:	4770      	bx	lr

08002118 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002118:	2000      	movs	r0, #0
 800211a:	4770      	bx	lr

0800211c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <_sbrk+0x34>)
 800211e:	4a0d      	ldr	r2, [pc, #52]	@ (8002154 <_sbrk+0x38>)
{
 8002120:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002122:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002124:	490c      	ldr	r1, [pc, #48]	@ (8002158 <_sbrk+0x3c>)
{
 8002126:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002128:	6808      	ldr	r0, [r1, #0]
 800212a:	2800      	cmp	r0, #0
 800212c:	d004      	beq.n	8002138 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212e:	18c3      	adds	r3, r0, r3
 8002130:	4293      	cmp	r3, r2
 8002132:	d806      	bhi.n	8002142 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002134:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8002136:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002138:	4808      	ldr	r0, [pc, #32]	@ (800215c <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 800213a:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 800213c:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800213e:	4293      	cmp	r3, r2
 8002140:	d9f8      	bls.n	8002134 <_sbrk+0x18>
    errno = ENOMEM;
 8002142:	f005 fb73 	bl	800782c <__errno>
 8002146:	230c      	movs	r3, #12
 8002148:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800214a:	2001      	movs	r0, #1
 800214c:	4240      	negs	r0, r0
 800214e:	e7f2      	b.n	8002136 <_sbrk+0x1a>
 8002150:	00000400 	.word	0x00000400
 8002154:	20004000 	.word	0x20004000
 8002158:	20000438 	.word	0x20000438
 800215c:	20001750 	.word	0x20001750

08002160 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002160:	4770      	bx	lr
 8002162:	46c0      	nop			@ (mov r8, r8)

08002164 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002164:	480d      	ldr	r0, [pc, #52]	@ (800219c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002166:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/

  bl  SystemInit
 8002168:	f7ff fffa 	bl	8002160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800216c:	480c      	ldr	r0, [pc, #48]	@ (80021a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800216e:	490d      	ldr	r1, [pc, #52]	@ (80021a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002170:	4a0d      	ldr	r2, [pc, #52]	@ (80021a8 <LoopForever+0xe>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002174:	e002      	b.n	800217c <LoopCopyDataInit>

08002176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217a:	3304      	adds	r3, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800217c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002180:	d3f9      	bcc.n	8002176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002182:	4a0a      	ldr	r2, [pc, #40]	@ (80021ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002184:	4c0a      	ldr	r4, [pc, #40]	@ (80021b0 <LoopForever+0x16>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002188:	e001      	b.n	800218e <LoopFillZerobss>

0800218a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800218c:	3204      	adds	r2, #4

0800218e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002190:	d3fb      	bcc.n	800218a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002192:	f005 fb51 	bl	8007838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002196:	f7fe f9eb 	bl	8000570 <main>

0800219a <LoopForever>:

LoopForever:
    b LoopForever
 800219a:	e7fe      	b.n	800219a <LoopForever>
  ldr   r0, =_estack
 800219c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80021a8:	08008cfc 	.word	0x08008cfc
  ldr r2, =_sbss
 80021ac:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80021b0:	20001750 	.word	0x20001750

080021b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC1_IRQHandler>
	...

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b570      	push	{r4, r5, r6, lr}
 80021ba:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021bc:	20fa      	movs	r0, #250	@ 0xfa
 80021be:	4b0e      	ldr	r3, [pc, #56]	@ (80021f8 <HAL_InitTick+0x40>)
 80021c0:	0080      	lsls	r0, r0, #2
 80021c2:	7819      	ldrb	r1, [r3, #0]
 80021c4:	f7fd ffb2 	bl	800012c <__udivsi3>
 80021c8:	4d0c      	ldr	r5, [pc, #48]	@ (80021fc <HAL_InitTick+0x44>)
 80021ca:	0001      	movs	r1, r0
 80021cc:	6828      	ldr	r0, [r5, #0]
 80021ce:	f7fd ffad 	bl	800012c <__udivsi3>
 80021d2:	f000 fac5 	bl	8002760 <HAL_SYSTICK_Config>
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 80021da:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021dc:	2c03      	cmp	r4, #3
 80021de:	d900      	bls.n	80021e2 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80021e0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e2:	3802      	subs	r0, #2
 80021e4:	2200      	movs	r2, #0
 80021e6:	0021      	movs	r1, r4
 80021e8:	f000 fa84 	bl	80026f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021ec:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <HAL_InitTick+0x48>)
 80021ee:	2000      	movs	r0, #0
 80021f0:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80021f2:	e7f5      	b.n	80021e0 <HAL_InitTick+0x28>
    return HAL_ERROR;
 80021f4:	2001      	movs	r0, #1
 80021f6:	e7f3      	b.n	80021e0 <HAL_InitTick+0x28>
 80021f8:	20000018 	.word	0x20000018
 80021fc:	20000014 	.word	0x20000014
 8002200:	2000001c 	.word	0x2000001c

08002204 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002204:	2110      	movs	r1, #16
 8002206:	4a06      	ldr	r2, [pc, #24]	@ (8002220 <HAL_Init+0x1c>)
{
 8002208:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800220c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220e:	430b      	orrs	r3, r1
 8002210:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002212:	f7ff ffd1 	bl	80021b8 <HAL_InitTick>
  HAL_MspInit();
 8002216:	f7ff fe07 	bl	8001e28 <HAL_MspInit>
}
 800221a:	2000      	movs	r0, #0
 800221c:	bd10      	pop	{r4, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	40022000 	.word	0x40022000

08002224 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002224:	4a03      	ldr	r2, [pc, #12]	@ (8002234 <HAL_IncTick+0x10>)
 8002226:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <HAL_IncTick+0x14>)
 8002228:	6811      	ldr	r1, [r2, #0]
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	185b      	adds	r3, r3, r1
 800222e:	6013      	str	r3, [r2, #0]
}
 8002230:	4770      	bx	lr
 8002232:	46c0      	nop			@ (mov r8, r8)
 8002234:	2000043c 	.word	0x2000043c
 8002238:	20000018 	.word	0x20000018

0800223c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800223c:	4b01      	ldr	r3, [pc, #4]	@ (8002244 <HAL_GetTick+0x8>)
 800223e:	6818      	ldr	r0, [r3, #0]
}
 8002240:	4770      	bx	lr
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	2000043c 	.word	0x2000043c

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff fff6 	bl	800223c <HAL_GetTick>
 8002250:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	1c63      	adds	r3, r4, #1
 8002254:	d002      	beq.n	800225c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002256:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <HAL_Delay+0x20>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800225c:	f7ff ffee 	bl	800223c <HAL_GetTick>
 8002260:	1b40      	subs	r0, r0, r5
 8002262:	42a0      	cmp	r0, r4
 8002264:	d3fa      	bcc.n	800225c <HAL_Delay+0x14>
  {
  }
}
 8002266:	bd70      	pop	{r4, r5, r6, pc}
 8002268:	20000018 	.word	0x20000018

0800226c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800226e:	2303      	movs	r3, #3
 8002270:	6802      	ldr	r2, [r0, #0]
{
 8002272:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002274:	6891      	ldr	r1, [r2, #8]
 8002276:	400b      	ands	r3, r1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d001      	beq.n	8002280 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800227c:	2000      	movs	r0, #0
}
 800227e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002280:	6811      	ldr	r1, [r2, #0]
 8002282:	420b      	tst	r3, r1
 8002284:	d00e      	beq.n	80022a4 <ADC_Disable+0x38>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002286:	2705      	movs	r7, #5
 8002288:	6893      	ldr	r3, [r2, #8]
 800228a:	401f      	ands	r7, r3
 800228c:	2f01      	cmp	r7, #1
 800228e:	d00d      	beq.n	80022ac <ADC_Disable+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002290:	2210      	movs	r2, #16
 8002292:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 8002294:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	4313      	orrs	r3, r2
 8002298:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800229c:	3a0f      	subs	r2, #15
 800229e:	4313      	orrs	r3, r2
 80022a0:	63e3      	str	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80022a2:	e7ec      	b.n	800227e <ADC_Disable+0x12>
  if (ADC_IS_ENABLE(hadc) != RESET)
 80022a4:	68d3      	ldr	r3, [r2, #12]
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	d5e8      	bpl.n	800227c <ADC_Disable+0x10>
 80022aa:	e7ec      	b.n	8002286 <ADC_Disable+0x1a>
      __HAL_ADC_DISABLE(hadc);
 80022ac:	2102      	movs	r1, #2
 80022ae:	6893      	ldr	r3, [r2, #8]
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022b0:	2501      	movs	r5, #1
      __HAL_ADC_DISABLE(hadc);
 80022b2:	430b      	orrs	r3, r1
 80022b4:	6093      	str	r3, [r2, #8]
 80022b6:	2303      	movs	r3, #3
 80022b8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80022ba:	f7ff ffbf 	bl	800223c <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022be:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80022c0:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	421f      	tst	r7, r3
 80022c6:	d0d9      	beq.n	800227c <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022c8:	f7ff ffb8 	bl	800223c <HAL_GetTick>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022cc:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022ce:	1b80      	subs	r0, r0, r6
 80022d0:	2802      	cmp	r0, #2
 80022d2:	d902      	bls.n	80022da <ADC_Disable+0x6e>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	4215      	tst	r5, r2
 80022d8:	d103      	bne.n	80022e2 <ADC_Disable+0x76>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	421d      	tst	r5, r3
 80022de:	d1f3      	bne.n	80022c8 <ADC_Disable+0x5c>
 80022e0:	e7cc      	b.n	800227c <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	2210      	movs	r2, #16
 80022e4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 80022e6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e8:	4313      	orrs	r3, r2
 80022ea:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80022ee:	432b      	orrs	r3, r5
 80022f0:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80022f2:	e7c4      	b.n	800227e <ADC_Disable+0x12>

080022f4 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80022f4:	2204      	movs	r2, #4
 80022f6:	6803      	ldr	r3, [r0, #0]
{
 80022f8:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80022fa:	6899      	ldr	r1, [r3, #8]
{
 80022fc:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80022fe:	420a      	tst	r2, r1
 8002300:	d01d      	beq.n	800233e <ADC_ConversionStop+0x4a>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	420a      	tst	r2, r1
 8002306:	d006      	beq.n	8002316 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002308:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800230a:	0792      	lsls	r2, r2, #30
 800230c:	d403      	bmi.n	8002316 <ADC_ConversionStop+0x22>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800230e:	2110      	movs	r1, #16
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	430a      	orrs	r2, r1
 8002314:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002316:	f7ff ff91 	bl	800223c <HAL_GetTick>
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800231a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800231c:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	075b      	lsls	r3, r3, #29
 8002322:	d50c      	bpl.n	800233e <ADC_ConversionStop+0x4a>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002324:	2504      	movs	r5, #4
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002326:	f7ff ff89 	bl	800223c <HAL_GetTick>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800232a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800232c:	1b80      	subs	r0, r0, r6
 800232e:	2802      	cmp	r0, #2
 8002330:	d902      	bls.n	8002338 <ADC_ConversionStop+0x44>
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	4215      	tst	r5, r2
 8002336:	d104      	bne.n	8002342 <ADC_ConversionStop+0x4e>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	421d      	tst	r5, r3
 800233c:	d1f3      	bne.n	8002326 <ADC_ConversionStop+0x32>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800233e:	2000      	movs	r0, #0
}
 8002340:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	2210      	movs	r2, #16
 8002344:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002348:	4313      	orrs	r3, r2
 800234a:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800234e:	3a0f      	subs	r2, #15
 8002350:	4313      	orrs	r3, r2
 8002352:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002354:	e7f4      	b.n	8002340 <ADC_ConversionStop+0x4c>
 8002356:	46c0      	nop			@ (mov r8, r8)

08002358 <ADC_Enable.constprop.0>:
  __IO uint32_t wait_loop_index = 0U;
 8002358:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800235a:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800235c:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 800235e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002360:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002362:	6891      	ldr	r1, [r2, #8]
 8002364:	3303      	adds	r3, #3
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8002366:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002368:	400b      	ands	r3, r1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d037      	beq.n	80023de <ADC_Enable.constprop.0+0x86>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800236e:	6891      	ldr	r1, [r2, #8]
 8002370:	4b23      	ldr	r3, [pc, #140]	@ (8002400 <ADC_Enable.constprop.0+0xa8>)
 8002372:	4219      	tst	r1, r3
 8002374:	d129      	bne.n	80023ca <ADC_Enable.constprop.0+0x72>
    __HAL_ADC_ENABLE(hadc);
 8002376:	2101      	movs	r1, #1
 8002378:	6893      	ldr	r3, [r2, #8]
 800237a:	430b      	orrs	r3, r1
 800237c:	6093      	str	r3, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800237e:	4b21      	ldr	r3, [pc, #132]	@ (8002404 <ADC_Enable.constprop.0+0xac>)
 8002380:	4921      	ldr	r1, [pc, #132]	@ (8002408 <ADC_Enable.constprop.0+0xb0>)
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	f7fd fed2 	bl	800012c <__udivsi3>
 8002388:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800238a:	9b01      	ldr	r3, [sp, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <ADC_Enable.constprop.0+0x44>
      wait_loop_index--;
 8002390:	9b01      	ldr	r3, [sp, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002396:	9b01      	ldr	r3, [sp, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f9      	bne.n	8002390 <ADC_Enable.constprop.0+0x38>
    tickstart = HAL_GetTick();
 800239c:	f7ff ff4e 	bl	800223c <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023a0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80023a2:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023a4:	681b      	ldr	r3, [r3, #0]
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023a6:	2501      	movs	r5, #1
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023a8:	07db      	lsls	r3, r3, #31
 80023aa:	d40b      	bmi.n	80023c4 <ADC_Enable.constprop.0+0x6c>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023ac:	f7ff ff46 	bl	800223c <HAL_GetTick>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023b0:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023b2:	1b80      	subs	r0, r0, r6
 80023b4:	2802      	cmp	r0, #2
 80023b6:	d902      	bls.n	80023be <ADC_Enable.constprop.0+0x66>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4215      	tst	r5, r2
 80023bc:	d016      	beq.n	80023ec <ADC_Enable.constprop.0+0x94>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	421d      	tst	r5, r3
 80023c2:	d0f3      	beq.n	80023ac <ADC_Enable.constprop.0+0x54>
  return HAL_OK;
 80023c4:	2000      	movs	r0, #0
}
 80023c6:	b002      	add	sp, #8
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ca:	2210      	movs	r2, #16
 80023cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 80023ce:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d0:	4313      	orrs	r3, r2
 80023d2:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80023d6:	3a0f      	subs	r2, #15
 80023d8:	4313      	orrs	r3, r2
 80023da:	63e3      	str	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80023dc:	e7f3      	b.n	80023c6 <ADC_Enable.constprop.0+0x6e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023de:	6811      	ldr	r1, [r2, #0]
 80023e0:	420b      	tst	r3, r1
 80023e2:	d1ef      	bne.n	80023c4 <ADC_Enable.constprop.0+0x6c>
 80023e4:	68d3      	ldr	r3, [r2, #12]
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	d4ec      	bmi.n	80023c4 <ADC_Enable.constprop.0+0x6c>
 80023ea:	e7c0      	b.n	800236e <ADC_Enable.constprop.0+0x16>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ec:	2210      	movs	r2, #16
 80023ee:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
      return HAL_ERROR;
 80023f0:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f2:	4313      	orrs	r3, r2
 80023f4:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80023f8:	432b      	orrs	r3, r5
 80023fa:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 80023fc:	e7e3      	b.n	80023c6 <ADC_Enable.constprop.0+0x6e>
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	80000017 	.word	0x80000017
 8002404:	20000014 	.word	0x20000014
 8002408:	000f4240 	.word	0x000f4240

0800240c <HAL_ADC_Init>:
{
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8002410:	d064      	beq.n	80024dc <HAL_ADC_Init+0xd0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002412:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002414:	2b00      	cmp	r3, #0
 8002416:	d068      	beq.n	80024ea <HAL_ADC_Init+0xde>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002418:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800241a:	06db      	lsls	r3, r3, #27
 800241c:	d460      	bmi.n	80024e0 <HAL_ADC_Init+0xd4>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800241e:	6822      	ldr	r2, [r4, #0]
 8002420:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002422:	075b      	lsls	r3, r3, #29
 8002424:	d45c      	bmi.n	80024e0 <HAL_ADC_Init+0xd4>
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002428:	4947      	ldr	r1, [pc, #284]	@ (8002548 <HAL_ADC_Init+0x13c>)
 800242a:	400b      	ands	r3, r1
 800242c:	3106      	adds	r1, #6
 800242e:	31ff      	adds	r1, #255	@ 0xff
 8002430:	430b      	orrs	r3, r1
 8002432:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002434:	2303      	movs	r3, #3
 8002436:	6891      	ldr	r1, [r2, #8]
 8002438:	400b      	ands	r3, r1
 800243a:	2b01      	cmp	r3, #1
 800243c:	d05b      	beq.n	80024f6 <HAL_ADC_Init+0xea>
      MODIFY_REG(hadc->Instance->CFGR1,
 800243e:	2118      	movs	r1, #24
 8002440:	68d3      	ldr	r3, [r2, #12]
 8002442:	438b      	bics	r3, r1
 8002444:	68a1      	ldr	r1, [r4, #8]
 8002446:	430b      	orrs	r3, r1
 8002448:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800244a:	6913      	ldr	r3, [r2, #16]
 800244c:	6861      	ldr	r1, [r4, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	089b      	lsrs	r3, r3, #2
 8002452:	430b      	orrs	r3, r1
 8002454:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002456:	68d3      	ldr	r3, [r2, #12]
 8002458:	493c      	ldr	r1, [pc, #240]	@ (800254c <HAL_ADC_Init+0x140>)
 800245a:	400b      	ands	r3, r1
 800245c:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800245e:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002460:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002462:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002464:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002466:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002468:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800246a:	68e1      	ldr	r1, [r4, #12]
 800246c:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800246e:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002470:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002472:	2124      	movs	r1, #36	@ 0x24
 8002474:	5c61      	ldrb	r1, [r4, r1]
 8002476:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002478:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800247a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800247c:	3901      	subs	r1, #1
 800247e:	1e4d      	subs	r5, r1, #1
 8002480:	41a9      	sbcs	r1, r5
 8002482:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002484:	430b      	orrs	r3, r1
 8002486:	6921      	ldr	r1, [r4, #16]
 8002488:	3902      	subs	r1, #2
 800248a:	424d      	negs	r5, r1
 800248c:	4169      	adcs	r1, r5
 800248e:	0089      	lsls	r1, r1, #2
 8002490:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002492:	7ee1      	ldrb	r1, [r4, #27]
 8002494:	2901      	cmp	r1, #1
 8002496:	d03e      	beq.n	8002516 <HAL_ADC_Init+0x10a>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002498:	20c2      	movs	r0, #194	@ 0xc2
 800249a:	69e1      	ldr	r1, [r4, #28]
 800249c:	30ff      	adds	r0, #255	@ 0xff
 800249e:	4281      	cmp	r1, r0
 80024a0:	d002      	beq.n	80024a8 <HAL_ADC_Init+0x9c>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80024a2:	6a20      	ldr	r0, [r4, #32]
 80024a4:	4301      	orrs	r1, r0
 80024a6:	430b      	orrs	r3, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80024a8:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024aa:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80024ac:	4319      	orrs	r1, r3
 80024ae:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024b0:	2180      	movs	r1, #128	@ 0x80
 80024b2:	0549      	lsls	r1, r1, #21
 80024b4:	428d      	cmp	r5, r1
 80024b6:	d025      	beq.n	8002504 <HAL_ADC_Init+0xf8>
 80024b8:	1e69      	subs	r1, r5, #1
 80024ba:	2906      	cmp	r1, #6
 80024bc:	d922      	bls.n	8002504 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80024be:	68d2      	ldr	r2, [r2, #12]
 80024c0:	4923      	ldr	r1, [pc, #140]	@ (8002550 <HAL_ADC_Init+0x144>)
 80024c2:	400a      	ands	r2, r1
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d02c      	beq.n	8002522 <HAL_ADC_Init+0x116>
      ADC_STATE_CLR_SET(hadc->State,
 80024c8:	2212      	movs	r2, #18
 80024ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024cc:	4393      	bics	r3, r2
 80024ce:	3a02      	subs	r2, #2
 80024d0:	4313      	orrs	r3, r2
 80024d2:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80024d6:	3a0f      	subs	r2, #15
 80024d8:	4313      	orrs	r3, r2
 80024da:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80024dc:	2001      	movs	r0, #1
}
 80024de:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e0:	2210      	movs	r2, #16
 80024e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024e4:	4313      	orrs	r3, r2
 80024e6:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 80024e8:	e7f8      	b.n	80024dc <HAL_ADC_Init+0xd0>
    hadc->Lock = HAL_UNLOCKED;
 80024ea:	2234      	movs	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 80024ec:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 80024ee:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80024f0:	f7ff fcb2 	bl	8001e58 <HAL_ADC_MspInit>
 80024f4:	e790      	b.n	8002418 <HAL_ADC_Init+0xc>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80024f6:	6811      	ldr	r1, [r2, #0]
 80024f8:	420b      	tst	r3, r1
 80024fa:	d1ac      	bne.n	8002456 <HAL_ADC_Init+0x4a>
 80024fc:	68d3      	ldr	r3, [r2, #12]
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	d4a9      	bmi.n	8002456 <HAL_ADC_Init+0x4a>
 8002502:	e79c      	b.n	800243e <HAL_ADC_Init+0x32>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002504:	2107      	movs	r1, #7
 8002506:	6950      	ldr	r0, [r2, #20]
 8002508:	4388      	bics	r0, r1
 800250a:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800250c:	6950      	ldr	r0, [r2, #20]
 800250e:	4029      	ands	r1, r5
 8002510:	4301      	orrs	r1, r0
 8002512:	6151      	str	r1, [r2, #20]
 8002514:	e7d3      	b.n	80024be <HAL_ADC_Init+0xb2>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002516:	2800      	cmp	r0, #0
 8002518:	d10d      	bne.n	8002536 <HAL_ADC_Init+0x12a>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800251a:	2180      	movs	r1, #128	@ 0x80
 800251c:	0249      	lsls	r1, r1, #9
 800251e:	430b      	orrs	r3, r1
 8002520:	e7ba      	b.n	8002498 <HAL_ADC_Init+0x8c>
      ADC_CLEAR_ERRORCODE(hadc);
 8002522:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002524:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002526:	63e3      	str	r3, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8002528:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252a:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800252c:	4393      	bics	r3, r2
 800252e:	3a02      	subs	r2, #2
 8002530:	4313      	orrs	r3, r2
 8002532:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002534:	e7d3      	b.n	80024de <HAL_ADC_Init+0xd2>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002536:	2520      	movs	r5, #32
 8002538:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800253a:	4328      	orrs	r0, r5
 800253c:	63a0      	str	r0, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002540:	4301      	orrs	r1, r0
 8002542:	63e1      	str	r1, [r4, #60]	@ 0x3c
 8002544:	e7a8      	b.n	8002498 <HAL_ADC_Init+0x8c>
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	fffffefd 	.word	0xfffffefd
 800254c:	fffe0219 	.word	0xfffe0219
 8002550:	833fffe7 	.word	0x833fffe7

08002554 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002554:	6803      	ldr	r3, [r0, #0]
{
 8002556:	b510      	push	{r4, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002558:	689a      	ldr	r2, [r3, #8]
{
 800255a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800255c:	0752      	lsls	r2, r2, #29
 800255e:	d421      	bmi.n	80025a4 <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 8002560:	2234      	movs	r2, #52	@ 0x34
 8002562:	5c81      	ldrb	r1, [r0, r2]
 8002564:	2901      	cmp	r1, #1
 8002566:	d01d      	beq.n	80025a4 <HAL_ADC_Start+0x50>
 8002568:	2101      	movs	r1, #1
 800256a:	5481      	strb	r1, [r0, r2]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800256c:	7e42      	ldrb	r2, [r0, #25]
 800256e:	2a01      	cmp	r2, #1
 8002570:	d112      	bne.n	8002598 <HAL_ADC_Start+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 8002572:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002574:	4a0c      	ldr	r2, [pc, #48]	@ (80025a8 <HAL_ADC_Start+0x54>)
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002576:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002578:	4011      	ands	r1, r2
 800257a:	2280      	movs	r2, #128	@ 0x80
 800257c:	0052      	lsls	r2, r2, #1
 800257e:	430a      	orrs	r2, r1
 8002580:	63a2      	str	r2, [r4, #56]	@ 0x38
      __HAL_UNLOCK(hadc);
 8002582:	2134      	movs	r1, #52	@ 0x34
      ADC_CLEAR_ERRORCODE(hadc);
 8002584:	2200      	movs	r2, #0
 8002586:	63e2      	str	r2, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hadc);
 8002588:	5462      	strb	r2, [r4, r1]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800258a:	321c      	adds	r2, #28
 800258c:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	3930      	subs	r1, #48	@ 0x30
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]
}
 8002596:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8002598:	f7ff fede 	bl	8002358 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 800259c:	2800      	cmp	r0, #0
 800259e:	d1fa      	bne.n	8002596 <HAL_ADC_Start+0x42>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	e7e6      	b.n	8002572 <HAL_ADC_Start+0x1e>
    __HAL_LOCK(hadc);
 80025a4:	2002      	movs	r0, #2
 80025a6:	e7f6      	b.n	8002596 <HAL_ADC_Start+0x42>
 80025a8:	fffff0fe 	.word	0xfffff0fe

080025ac <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80025ac:	2334      	movs	r3, #52	@ 0x34
{ 
 80025ae:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 80025b0:	5cc2      	ldrb	r2, [r0, r3]
{ 
 80025b2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80025b4:	2a01      	cmp	r2, #1
 80025b6:	d014      	beq.n	80025e2 <HAL_ADC_Stop+0x36>
 80025b8:	2501      	movs	r5, #1
 80025ba:	54c5      	strb	r5, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 80025bc:	f7ff fe9a 	bl	80022f4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d003      	beq.n	80025cc <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 80025c4:	2334      	movs	r3, #52	@ 0x34
 80025c6:	2200      	movs	r2, #0
 80025c8:	54e2      	strb	r2, [r4, r3]
}
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80025cc:	0020      	movs	r0, r4
 80025ce:	f7ff fe4d 	bl	800226c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80025d2:	2800      	cmp	r0, #0
 80025d4:	d1f6      	bne.n	80025c4 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 80025d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025d8:	4a03      	ldr	r2, [pc, #12]	@ (80025e8 <HAL_ADC_Stop+0x3c>)
 80025da:	4013      	ands	r3, r2
 80025dc:	432b      	orrs	r3, r5
 80025de:	63a3      	str	r3, [r4, #56]	@ 0x38
 80025e0:	e7f0      	b.n	80025c4 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 80025e2:	2002      	movs	r0, #2
 80025e4:	e7f1      	b.n	80025ca <HAL_ADC_Stop+0x1e>
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	fffffefe 	.word	0xfffffefe

080025ec <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80025ec:	6803      	ldr	r3, [r0, #0]
 80025ee:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80025f0:	4770      	bx	lr
 80025f2:	46c0      	nop			@ (mov r8, r8)

080025f4 <HAL_ADC_ConfigChannel>:
{
 80025f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f6:	46c6      	mov	lr, r8
  __IO uint32_t wait_loop_index = 0U;
 80025f8:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80025fa:	2234      	movs	r2, #52	@ 0x34
{
 80025fc:	b500      	push	{lr}
 80025fe:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8002600:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002602:	5c83      	ldrb	r3, [r0, r2]
{
 8002604:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002606:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 8002608:	2b01      	cmp	r3, #1
 800260a:	d050      	beq.n	80026ae <HAL_ADC_ConfigChannel+0xba>
 800260c:	2301      	movs	r3, #1
 800260e:	5483      	strb	r3, [r0, r2]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002610:	6802      	ldr	r2, [r0, #0]
 8002612:	6890      	ldr	r0, [r2, #8]
 8002614:	0740      	lsls	r0, r0, #29
 8002616:	d50b      	bpl.n	8002630 <HAL_ADC_ConfigChannel+0x3c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002618:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 800261a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800261e:	4313      	orrs	r3, r2
 8002620:	63a3      	str	r3, [r4, #56]	@ 0x38
  __HAL_UNLOCK(hadc);
 8002622:	2334      	movs	r3, #52	@ 0x34
 8002624:	2200      	movs	r2, #0
 8002626:	54e2      	strb	r2, [r4, r3]
}
 8002628:	b002      	add	sp, #8
 800262a:	bc80      	pop	{r7}
 800262c:	46b8      	mov	r8, r7
 800262e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002630:	6808      	ldr	r0, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8002632:	4f2b      	ldr	r7, [pc, #172]	@ (80026e0 <HAL_ADC_ConfigChannel+0xec>)
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002634:	0006      	movs	r6, r0
    if (sConfig->Rank != ADC_RANK_NONE)
 8002636:	46b8      	mov	r8, r7
 8002638:	684f      	ldr	r7, [r1, #4]
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800263a:	4083      	lsls	r3, r0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800263c:	3e10      	subs	r6, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 800263e:	4547      	cmp	r7, r8
 8002640:	d024      	beq.n	800268c <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002642:	6a97      	ldr	r7, [r2, #40]	@ 0x28
 8002644:	433b      	orrs	r3, r7
 8002646:	6293      	str	r3, [r2, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	055b      	lsls	r3, r3, #21
 800264c:	429d      	cmp	r5, r3
 800264e:	d00f      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x7c>
 8002650:	3d01      	subs	r5, #1
 8002652:	2d06      	cmp	r5, #6
 8002654:	d90c      	bls.n	8002670 <HAL_ADC_ConfigChannel+0x7c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002656:	2307      	movs	r3, #7
 8002658:	688d      	ldr	r5, [r1, #8]
 800265a:	6951      	ldr	r1, [r2, #20]
 800265c:	4019      	ands	r1, r3
 800265e:	428d      	cmp	r5, r1
 8002660:	d006      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x7c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002662:	6951      	ldr	r1, [r2, #20]
 8002664:	4399      	bics	r1, r3
 8002666:	6151      	str	r1, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002668:	6951      	ldr	r1, [r2, #20]
 800266a:	402b      	ands	r3, r5
 800266c:	430b      	orrs	r3, r1
 800266e:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002670:	2e01      	cmp	r6, #1
 8002672:	d901      	bls.n	8002678 <HAL_ADC_ConfigChannel+0x84>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002674:	2000      	movs	r0, #0
 8002676:	e7d4      	b.n	8002622 <HAL_ADC_ConfigChannel+0x2e>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002678:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <HAL_ADC_ConfigChannel+0xf0>)
 800267a:	2280      	movs	r2, #128	@ 0x80
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	2810      	cmp	r0, #16
 8002680:	d017      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0xbe>
 8002682:	03d2      	lsls	r2, r2, #15
 8002684:	430a      	orrs	r2, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002686:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002688:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268a:	e7ca      	b.n	8002622 <HAL_ADC_ConfigChannel+0x2e>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800268c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800268e:	4399      	bics	r1, r3
 8002690:	6291      	str	r1, [r2, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002692:	2e01      	cmp	r6, #1
 8002694:	d8ee      	bhi.n	8002674 <HAL_ADC_ConfigChannel+0x80>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002696:	1e71      	subs	r1, r6, #1
 8002698:	418e      	sbcs	r6, r1
 800269a:	4913      	ldr	r1, [pc, #76]	@ (80026e8 <HAL_ADC_ConfigChannel+0xf4>)
 800269c:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <HAL_ADC_ConfigChannel+0xf0>)
 800269e:	468c      	mov	ip, r1
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	05b6      	lsls	r6, r6, #22
 80026a4:	4466      	add	r6, ip
 80026a6:	4016      	ands	r6, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a8:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026aa:	601e      	str	r6, [r3, #0]
 80026ac:	e7b9      	b.n	8002622 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80026ae:	2002      	movs	r0, #2
 80026b0:	e7ba      	b.n	8002628 <HAL_ADC_ConfigChannel+0x34>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80026b2:	0412      	lsls	r2, r2, #16
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <HAL_ADC_ConfigChannel+0xf8>)
 80026ba:	490d      	ldr	r1, [pc, #52]	@ (80026f0 <HAL_ADC_ConfigChannel+0xfc>)
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	f7fd fd35 	bl	800012c <__udivsi3>
 80026c2:	0083      	lsls	r3, r0, #2
 80026c4:	181b      	adds	r3, r3, r0
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80026ca:	9b01      	ldr	r3, [sp, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0d1      	beq.n	8002674 <HAL_ADC_ConfigChannel+0x80>
            wait_loop_index--;
 80026d0:	9b01      	ldr	r3, [sp, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80026d6:	9b01      	ldr	r3, [sp, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f9      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026dc:	2000      	movs	r0, #0
 80026de:	e7a0      	b.n	8002622 <HAL_ADC_ConfigChannel+0x2e>
 80026e0:	00001001 	.word	0x00001001
 80026e4:	40012708 	.word	0x40012708
 80026e8:	ff7fffff 	.word	0xff7fffff
 80026ec:	20000014 	.word	0x20000014
 80026f0:	000f4240 	.word	0x000f4240

080026f4 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026f4:	22ff      	movs	r2, #255	@ 0xff
 80026f6:	2303      	movs	r3, #3
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f8:	b510      	push	{r4, lr}
 80026fa:	0014      	movs	r4, r2
 80026fc:	4003      	ands	r3, r0
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002702:	0189      	lsls	r1, r1, #6
 8002704:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002706:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002708:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 800270a:	2800      	cmp	r0, #0
 800270c:	db0b      	blt.n	8002726 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800270e:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <HAL_NVIC_SetPriority+0x4c>)
 8002710:	21c0      	movs	r1, #192	@ 0xc0
 8002712:	469c      	mov	ip, r3
 8002714:	0880      	lsrs	r0, r0, #2
 8002716:	0080      	lsls	r0, r0, #2
 8002718:	4460      	add	r0, ip
 800271a:	0089      	lsls	r1, r1, #2
 800271c:	5843      	ldr	r3, [r0, r1]
 800271e:	4023      	ands	r3, r4
 8002720:	4313      	orrs	r3, r2
 8002722:	5043      	str	r3, [r0, r1]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002724:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002726:	230f      	movs	r3, #15
 8002728:	4906      	ldr	r1, [pc, #24]	@ (8002744 <HAL_NVIC_SetPriority+0x50>)
 800272a:	4003      	ands	r3, r0
 800272c:	468c      	mov	ip, r1
 800272e:	3b08      	subs	r3, #8
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4463      	add	r3, ip
 8002736:	69d9      	ldr	r1, [r3, #28]
 8002738:	400c      	ands	r4, r1
 800273a:	4314      	orrs	r4, r2
 800273c:	61dc      	str	r4, [r3, #28]
 800273e:	e7f1      	b.n	8002724 <HAL_NVIC_SetPriority+0x30>
 8002740:	e000e100 	.word	0xe000e100
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002748:	2800      	cmp	r0, #0
 800274a:	db05      	blt.n	8002758 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274c:	221f      	movs	r2, #31
 800274e:	2301      	movs	r3, #1
 8002750:	4002      	ands	r2, r0
 8002752:	4093      	lsls	r3, r2
 8002754:	4a01      	ldr	r2, [pc, #4]	@ (800275c <HAL_NVIC_EnableIRQ+0x14>)
 8002756:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002758:	4770      	bx	lr
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	e000e100 	.word	0xe000e100

08002760 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002760:	2280      	movs	r2, #128	@ 0x80
 8002762:	1e43      	subs	r3, r0, #1
 8002764:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002766:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002768:	4293      	cmp	r3, r2
 800276a:	d20e      	bcs.n	800278a <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800276c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276e:	4a07      	ldr	r2, [pc, #28]	@ (800278c <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002770:	4807      	ldr	r0, [pc, #28]	@ (8002790 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002772:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002774:	6a03      	ldr	r3, [r0, #32]
 8002776:	0609      	lsls	r1, r1, #24
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	430b      	orrs	r3, r1
 800277e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002782:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002784:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002786:	3307      	adds	r3, #7
 8002788:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800278a:	4770      	bx	lr
 800278c:	e000e010 	.word	0xe000e010
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	46de      	mov	lr, fp
 8002798:	4657      	mov	r7, sl
 800279a:	464e      	mov	r6, r9
 800279c:	4645      	mov	r5, r8
 800279e:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a0:	680c      	ldr	r4, [r1, #0]
  uint32_t position = 0x00u;
 80027a2:	2300      	movs	r3, #0
{
 80027a4:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a6:	2c00      	cmp	r4, #0
 80027a8:	d072      	beq.n	8002890 <HAL_GPIO_Init+0xfc>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027aa:	4a75      	ldr	r2, [pc, #468]	@ (8002980 <HAL_GPIO_Init+0x1ec>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ac:	4e75      	ldr	r6, [pc, #468]	@ (8002984 <HAL_GPIO_Init+0x1f0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	4693      	mov	fp, r2
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027b0:	9102      	str	r1, [sp, #8]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027b2:	2201      	movs	r2, #1
 80027b4:	409a      	lsls	r2, r3
 80027b6:	4694      	mov	ip, r2
 80027b8:	4022      	ands	r2, r4
 80027ba:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 80027bc:	4662      	mov	r2, ip
 80027be:	4214      	tst	r4, r2
 80027c0:	d062      	beq.n	8002888 <HAL_GPIO_Init+0xf4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027c2:	9902      	ldr	r1, [sp, #8]
 80027c4:	005d      	lsls	r5, r3, #1
 80027c6:	684a      	ldr	r2, [r1, #4]
 80027c8:	4692      	mov	sl, r2
 80027ca:	2203      	movs	r2, #3
 80027cc:	4651      	mov	r1, sl
 80027ce:	400a      	ands	r2, r1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027d0:	2103      	movs	r1, #3
 80027d2:	40a9      	lsls	r1, r5
 80027d4:	43c9      	mvns	r1, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027d6:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027d8:	9101      	str	r1, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027da:	2f01      	cmp	r7, #1
 80027dc:	d95f      	bls.n	800289e <HAL_GPIO_Init+0x10a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027de:	2a03      	cmp	r2, #3
 80027e0:	d000      	beq.n	80027e4 <HAL_GPIO_Init+0x50>
 80027e2:	e0b3      	b.n	800294c <HAL_GPIO_Init+0x1b8>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e4:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80027e6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027e8:	9901      	ldr	r1, [sp, #4]
 80027ea:	4039      	ands	r1, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027ec:	430a      	orrs	r2, r1
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ee:	21c0      	movs	r1, #192	@ 0xc0
      GPIOx->MODER = temp;
 80027f0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f2:	4652      	mov	r2, sl
 80027f4:	0289      	lsls	r1, r1, #10
 80027f6:	420a      	tst	r2, r1
 80027f8:	d046      	beq.n	8002888 <HAL_GPIO_Init+0xf4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	465a      	mov	r2, fp
 80027fc:	2101      	movs	r1, #1
 80027fe:	465d      	mov	r5, fp
 8002800:	6992      	ldr	r2, [r2, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002802:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002804:	430a      	orrs	r2, r1
 8002806:	61aa      	str	r2, [r5, #24]
 8002808:	69aa      	ldr	r2, [r5, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800280a:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280c:	400a      	ands	r2, r1
 800280e:	495e      	ldr	r1, [pc, #376]	@ (8002988 <HAL_GPIO_Init+0x1f4>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002810:	401d      	ands	r5, r3
 8002812:	468c      	mov	ip, r1
 8002814:	00ad      	lsls	r5, r5, #2
 8002816:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002818:	9205      	str	r2, [sp, #20]
 800281a:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 800281c:	089a      	lsrs	r2, r3, #2
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	4462      	add	r2, ip
 8002822:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002824:	43b9      	bics	r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002826:	2790      	movs	r7, #144	@ 0x90
 8002828:	05ff      	lsls	r7, r7, #23
 800282a:	42b8      	cmp	r0, r7
 800282c:	d00e      	beq.n	800284c <HAL_GPIO_Init+0xb8>
 800282e:	4f57      	ldr	r7, [pc, #348]	@ (800298c <HAL_GPIO_Init+0x1f8>)
 8002830:	42b8      	cmp	r0, r7
 8002832:	d100      	bne.n	8002836 <HAL_GPIO_Init+0xa2>
 8002834:	e09b      	b.n	800296e <HAL_GPIO_Init+0x1da>
 8002836:	4f56      	ldr	r7, [pc, #344]	@ (8002990 <HAL_GPIO_Init+0x1fc>)
 8002838:	42b8      	cmp	r0, r7
 800283a:	d100      	bne.n	800283e <HAL_GPIO_Init+0xaa>
 800283c:	e09b      	b.n	8002976 <HAL_GPIO_Init+0x1e2>
 800283e:	4f55      	ldr	r7, [pc, #340]	@ (8002994 <HAL_GPIO_Init+0x200>)
 8002840:	42b8      	cmp	r0, r7
 8002842:	d100      	bne.n	8002846 <HAL_GPIO_Init+0xb2>
 8002844:	e08f      	b.n	8002966 <HAL_GPIO_Init+0x1d2>
 8002846:	2705      	movs	r7, #5
 8002848:	40af      	lsls	r7, r5
 800284a:	4339      	orrs	r1, r7
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800284c:	2780      	movs	r7, #128	@ 0x80
 800284e:	4655      	mov	r5, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002850:	6091      	str	r1, [r2, #8]
        temp &= ~(iocurrent);
 8002852:	9900      	ldr	r1, [sp, #0]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002854:	037f      	lsls	r7, r7, #13
        temp &= ~(iocurrent);
 8002856:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR;
 8002858:	68b2      	ldr	r2, [r6, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800285a:	423d      	tst	r5, r7
 800285c:	d000      	beq.n	8002860 <HAL_GPIO_Init+0xcc>
 800285e:	e072      	b.n	8002946 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8002860:	400a      	ands	r2, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002862:	4655      	mov	r5, sl
        EXTI->RTSR = temp;
 8002864:	60b2      	str	r2, [r6, #8]
        temp = EXTI->FTSR;
 8002866:	68f2      	ldr	r2, [r6, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002868:	02ad      	lsls	r5, r5, #10
 800286a:	d469      	bmi.n	8002940 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 800286c:	400a      	ands	r2, r1
        EXTI->FTSR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800286e:	4655      	mov	r5, sl
        EXTI->FTSR = temp;
 8002870:	60f2      	str	r2, [r6, #12]
        temp = EXTI->EMR;
 8002872:	6872      	ldr	r2, [r6, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002874:	03ad      	lsls	r5, r5, #14
 8002876:	d460      	bmi.n	800293a <HAL_GPIO_Init+0x1a6>
        temp &= ~(iocurrent);
 8002878:	400a      	ands	r2, r1
        }
        EXTI->EMR = temp;

        temp = EXTI->IMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800287a:	4655      	mov	r5, sl
        EXTI->EMR = temp;
 800287c:	6072      	str	r2, [r6, #4]
        temp = EXTI->IMR;
 800287e:	6832      	ldr	r2, [r6, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002880:	03ed      	lsls	r5, r5, #15
 8002882:	d455      	bmi.n	8002930 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8002884:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002886:	6032      	str	r2, [r6, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002888:	0022      	movs	r2, r4
      }
    }

    position++;
 800288a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288c:	40da      	lsrs	r2, r3
 800288e:	d190      	bne.n	80027b2 <HAL_GPIO_Init+0x1e>
  } 
}
 8002890:	b007      	add	sp, #28
 8002892:	bcf0      	pop	{r4, r5, r6, r7}
 8002894:	46bb      	mov	fp, r7
 8002896:	46b2      	mov	sl, r6
 8002898:	46a9      	mov	r9, r5
 800289a:	46a0      	mov	r8, r4
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 800289e:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028a0:	000f      	movs	r7, r1
 80028a2:	9901      	ldr	r1, [sp, #4]
 80028a4:	400f      	ands	r7, r1
 80028a6:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028a8:	9f02      	ldr	r7, [sp, #8]
 80028aa:	68f9      	ldr	r1, [r7, #12]
 80028ac:	000f      	movs	r7, r1
 80028ae:	40af      	lsls	r7, r5
 80028b0:	46b8      	mov	r8, r7
 80028b2:	464f      	mov	r7, r9
 80028b4:	4641      	mov	r1, r8
 80028b6:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = temp;
 80028b8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80028ba:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028bc:	000f      	movs	r7, r1
 80028be:	4661      	mov	r1, ip
 80028c0:	438f      	bics	r7, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c2:	4651      	mov	r1, sl
 80028c4:	0909      	lsrs	r1, r1, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c6:	46b8      	mov	r8, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c8:	000f      	movs	r7, r1
 80028ca:	2101      	movs	r1, #1
 80028cc:	400f      	ands	r7, r1
 80028ce:	409f      	lsls	r7, r3
 80028d0:	46bc      	mov	ip, r7
 80028d2:	4647      	mov	r7, r8
 80028d4:	4661      	mov	r1, ip
 80028d6:	430f      	orrs	r7, r1
        GPIOx->OTYPER = temp;
 80028d8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80028da:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028dc:	000f      	movs	r7, r1
 80028de:	9901      	ldr	r1, [sp, #4]
 80028e0:	400f      	ands	r7, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028e2:	9902      	ldr	r1, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028e4:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028e6:	6889      	ldr	r1, [r1, #8]
 80028e8:	000f      	movs	r7, r1
 80028ea:	40af      	lsls	r7, r5
 80028ec:	46bc      	mov	ip, r7
 80028ee:	4647      	mov	r7, r8
 80028f0:	4661      	mov	r1, ip
 80028f2:	430f      	orrs	r7, r1
        GPIOx->PUPDR = temp;
 80028f4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f6:	2a02      	cmp	r2, #2
 80028f8:	d000      	beq.n	80028fc <HAL_GPIO_Init+0x168>
 80028fa:	e773      	b.n	80027e4 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3u];
 80028fc:	08d9      	lsrs	r1, r3, #3
 80028fe:	0089      	lsls	r1, r1, #2
 8002900:	468c      	mov	ip, r1
 8002902:	4484      	add	ip, r0
 8002904:	4661      	mov	r1, ip
 8002906:	6a0f      	ldr	r7, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002908:	2107      	movs	r1, #7
 800290a:	4019      	ands	r1, r3
 800290c:	0089      	lsls	r1, r1, #2
 800290e:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8002910:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002912:	210f      	movs	r1, #15
 8002914:	4647      	mov	r7, r8
 8002916:	40b9      	lsls	r1, r7
 8002918:	9f03      	ldr	r7, [sp, #12]
 800291a:	438f      	bics	r7, r1
 800291c:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800291e:	4647      	mov	r7, r8
 8002920:	9902      	ldr	r1, [sp, #8]
 8002922:	6909      	ldr	r1, [r1, #16]
 8002924:	40b9      	lsls	r1, r7
 8002926:	9f03      	ldr	r7, [sp, #12]
 8002928:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3u] = temp;
 800292a:	4661      	mov	r1, ip
 800292c:	620f      	str	r7, [r1, #32]
 800292e:	e759      	b.n	80027e4 <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 8002930:	9900      	ldr	r1, [sp, #0]
 8002932:	4311      	orrs	r1, r2
 8002934:	000a      	movs	r2, r1
        EXTI->IMR = temp;
 8002936:	6032      	str	r2, [r6, #0]
 8002938:	e7a6      	b.n	8002888 <HAL_GPIO_Init+0xf4>
          temp |= iocurrent;
 800293a:	9d00      	ldr	r5, [sp, #0]
 800293c:	432a      	orrs	r2, r5
 800293e:	e79c      	b.n	800287a <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 8002940:	9d00      	ldr	r5, [sp, #0]
 8002942:	432a      	orrs	r2, r5
 8002944:	e793      	b.n	800286e <HAL_GPIO_Init+0xda>
          temp |= iocurrent;
 8002946:	9d00      	ldr	r5, [sp, #0]
 8002948:	432a      	orrs	r2, r5
 800294a:	e78a      	b.n	8002862 <HAL_GPIO_Init+0xce>
 800294c:	000f      	movs	r7, r1
        temp = GPIOx->PUPDR;
 800294e:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002950:	4039      	ands	r1, r7
 8002952:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002954:	9902      	ldr	r1, [sp, #8]
 8002956:	6889      	ldr	r1, [r1, #8]
 8002958:	40a9      	lsls	r1, r5
 800295a:	468c      	mov	ip, r1
 800295c:	4641      	mov	r1, r8
 800295e:	4667      	mov	r7, ip
 8002960:	4339      	orrs	r1, r7
        GPIOx->PUPDR = temp;
 8002962:	60c1      	str	r1, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002964:	e73e      	b.n	80027e4 <HAL_GPIO_Init+0x50>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002966:	2703      	movs	r7, #3
 8002968:	40af      	lsls	r7, r5
 800296a:	4339      	orrs	r1, r7
 800296c:	e76e      	b.n	800284c <HAL_GPIO_Init+0xb8>
 800296e:	2701      	movs	r7, #1
 8002970:	40af      	lsls	r7, r5
 8002972:	4339      	orrs	r1, r7
 8002974:	e76a      	b.n	800284c <HAL_GPIO_Init+0xb8>
 8002976:	2702      	movs	r7, #2
 8002978:	40af      	lsls	r7, r5
 800297a:	4339      	orrs	r1, r7
 800297c:	e766      	b.n	800284c <HAL_GPIO_Init+0xb8>
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	40021000 	.word	0x40021000
 8002984:	40010400 	.word	0x40010400
 8002988:	40010000 	.word	0x40010000
 800298c:	48000400 	.word	0x48000400
 8002990:	48000800 	.word	0x48000800
 8002994:	48000c00 	.word	0x48000c00

08002998 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002998:	6900      	ldr	r0, [r0, #16]
 800299a:	4008      	ands	r0, r1
 800299c:	1e43      	subs	r3, r0, #1
 800299e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80029a0:	b2c0      	uxtb	r0, r0
  }
 80029a2:	4770      	bx	lr

080029a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a4:	2a00      	cmp	r2, #0
 80029a6:	d001      	beq.n	80029ac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029a8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029aa:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ac:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80029ae:	e7fc      	b.n	80029aa <HAL_GPIO_WritePin+0x6>

080029b0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029b0:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029b2:	0013      	movs	r3, r2
 80029b4:	400b      	ands	r3, r1
 80029b6:	041b      	lsls	r3, r3, #16
 80029b8:	4391      	bics	r1, r2
 80029ba:	430b      	orrs	r3, r1
 80029bc:	6183      	str	r3, [r0, #24]
}
 80029be:	4770      	bx	lr

080029c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029c0:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80029c2:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	4210      	tst	r0, r2
 80029c8:	d100      	bne.n	80029cc <HAL_GPIO_EXTI_IRQHandler+0xc>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80029ca:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029cc:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029ce:	f7fe fbf1 	bl	80011b4 <HAL_GPIO_EXTI_Callback>
}
 80029d2:	e7fa      	b.n	80029ca <HAL_GPIO_EXTI_IRQHandler+0xa>
 80029d4:	40010400 	.word	0x40010400

080029d8 <I2C_WaitOnFlagUntilTimeout.constprop.0>:
  * @param  Status The actual Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80029d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029da:	4657      	mov	r7, sl
 80029dc:	4645      	mov	r5, r8
 80029de:	46de      	mov	lr, fp
 80029e0:	464e      	mov	r6, r9
 80029e2:	b5e0      	push	{r5, r6, r7, lr}
 80029e4:	b083      	sub	sp, #12
 80029e6:	9101      	str	r1, [sp, #4]
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029e8:	2110      	movs	r1, #16
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ea:	6803      	ldr	r3, [r0, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029ec:	4688      	mov	r8, r1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ee:	699a      	ldr	r2, [r3, #24]
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
          tmp2 = hi2c->Mode;
 80029f0:	3132      	adds	r1, #50	@ 0x32
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80029f2:	0004      	movs	r4, r0
          tmp2 = hi2c->Mode;
 80029f4:	468a      	mov	sl, r1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f6:	0412      	lsls	r2, r2, #16
 80029f8:	d400      	bmi.n	80029fc <I2C_WaitOnFlagUntilTimeout.constprop.0+0x24>
 80029fa:	e096      	b.n	8002b2a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x152>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029fc:	4642      	mov	r2, r8
 80029fe:	4640      	mov	r0, r8
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a00:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002a02:	2500      	movs	r5, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a04:	400a      	ands	r2, r1
 8002a06:	4208      	tst	r0, r1
 8002a08:	d041      	beq.n	8002a8e <I2C_WaitOnFlagUntilTimeout.constprop.0+0xb6>
  uint32_t error_code = 0;
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4693      	mov	fp, r2

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a0e:	2280      	movs	r2, #128	@ 0x80
 8002a10:	0212      	lsls	r2, r2, #8
  HAL_StatusTypeDef status = HAL_OK;
 8002a12:	2700      	movs	r7, #0
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a14:	4691      	mov	r9, r2
  uint32_t tickstart = Tickstart;
 8002a16:	9e01      	ldr	r6, [sp, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a18:	61d8      	str	r0, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a1a:	3520      	adds	r5, #32
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	4215      	tst	r5, r2
 8002a20:	d12d      	bne.n	8002a7e <I2C_WaitOnFlagUntilTimeout.constprop.0+0xa6>
 8002a22:	2f00      	cmp	r7, #0
 8002a24:	d12e      	bne.n	8002a84 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xac>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a26:	f7ff fc09 	bl	800223c <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a2a:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a2c:	1b80      	subs	r0, r0, r6
 8002a2e:	2819      	cmp	r0, #25
 8002a30:	d9f4      	bls.n	8002a1c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x44>
          tmp2 = hi2c->Mode;
 8002a32:	4652      	mov	r2, sl
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a34:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002a36:	5ca2      	ldrb	r2, [r4, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a38:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a3e:	464a      	mov	r2, r9
 8002a40:	4211      	tst	r1, r2
 8002a42:	d00d      	beq.n	8002a60 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a44:	2180      	movs	r1, #128	@ 0x80
 8002a46:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a48:	4208      	tst	r0, r1
 8002a4a:	d109      	bne.n	8002a60 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
              (tmp1 != I2C_CR2_STOP) && \
 8002a4c:	4662      	mov	r2, ip
 8002a4e:	2a20      	cmp	r2, #32
 8002a50:	d006      	beq.n	8002a60 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4311      	orrs	r1, r2
 8002a56:	6059      	str	r1, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a58:	f7ff fbf0 	bl	800223c <HAL_GetTick>
 8002a5c:	0006      	movs	r6, r0
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	4215      	tst	r5, r2
 8002a64:	d1da      	bne.n	8002a1c <I2C_WaitOnFlagUntilTimeout.constprop.0+0x44>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a66:	f7ff fbe9 	bl	800223c <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a6a:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a6c:	1b80      	subs	r0, r0, r6
 8002a6e:	2819      	cmp	r0, #25
 8002a70:	d9f6      	bls.n	8002a60 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a72:	2220      	movs	r2, #32
 8002a74:	4693      	mov	fp, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a76:	699a      	ldr	r2, [r3, #24]

              status = HAL_ERROR;
 8002a78:	2701      	movs	r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a7a:	4215      	tst	r5, r2
 8002a7c:	d0d1      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x4a>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a7e:	2f00      	cmp	r7, #0
 8002a80:	d100      	bne.n	8002a84 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xac>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a82:	61dd      	str	r5, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a84:	2204      	movs	r2, #4
 8002a86:	4659      	mov	r1, fp
 8002a88:	4311      	orrs	r1, r2
 8002a8a:	000a      	movs	r2, r1

    status = HAL_ERROR;
 8002a8c:	2501      	movs	r5, #1
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a8e:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002a90:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a92:	0040      	lsls	r0, r0, #1
 8002a94:	4201      	tst	r1, r0
 8002a96:	d034      	beq.n	8002b02 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x12a>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a98:	2501      	movs	r5, #1

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a9a:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002a9c:	432a      	orrs	r2, r5

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a9e:	0548      	lsls	r0, r1, #21
 8002aa0:	d504      	bpl.n	8002aac <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd4>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002aa2:	2008      	movs	r0, #8
 8002aa4:	4302      	orrs	r2, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002aa6:	2080      	movs	r0, #128	@ 0x80
 8002aa8:	00c0      	lsls	r0, r0, #3
 8002aaa:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002aac:	0589      	lsls	r1, r1, #22
 8002aae:	d504      	bpl.n	8002aba <I2C_WaitOnFlagUntilTimeout.constprop.0+0xe2>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	430a      	orrs	r2, r1

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ab4:	31ff      	adds	r1, #255	@ 0xff
 8002ab6:	31ff      	adds	r1, #255	@ 0xff
 8002ab8:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002aba:	6999      	ldr	r1, [r3, #24]
 8002abc:	0789      	lsls	r1, r1, #30
 8002abe:	d501      	bpl.n	8002ac4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xec>
    hi2c->Instance->TXDR = 0x00U;
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	6299      	str	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	6998      	ldr	r0, [r3, #24]
 8002ac8:	4201      	tst	r1, r0
 8002aca:	d102      	bne.n	8002ad2 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002acc:	6998      	ldr	r0, [r3, #24]
 8002ace:	4301      	orrs	r1, r0
 8002ad0:	6199      	str	r1, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	481a      	ldr	r0, [pc, #104]	@ (8002b40 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x168>)
 8002ad6:	4001      	ands	r1, r0
 8002ad8:	6059      	str	r1, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002ada:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002adc:	4313      	orrs	r3, r2
 8002ade:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	2341      	movs	r3, #65	@ 0x41
 8002ae4:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	3301      	adds	r3, #1
 8002aea:	54e2      	strb	r2, [r4, r3]
          __HAL_UNLOCK(hi2c);
 8002aec:	2340      	movs	r3, #64	@ 0x40
 8002aee:	2200      	movs	r2, #0
      return HAL_ERROR;
 8002af0:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8002af2:	54e2      	strb	r2, [r4, r3]
}
 8002af4:	b003      	add	sp, #12
 8002af6:	bcf0      	pop	{r4, r5, r6, r7}
 8002af8:	46bb      	mov	fp, r7
 8002afa:	46b2      	mov	sl, r6
 8002afc:	46a9      	mov	r9, r5
 8002afe:	46a0      	mov	r8, r4
 8002b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b02:	0548      	lsls	r0, r1, #21
 8002b04:	d4cd      	bmi.n	8002aa2 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xca>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b06:	0589      	lsls	r1, r1, #22
 8002b08:	d4d2      	bmi.n	8002ab0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd8>
  if (status != HAL_OK)
 8002b0a:	2d00      	cmp	r5, #0
 8002b0c:	d1d5      	bne.n	8002aba <I2C_WaitOnFlagUntilTimeout.constprop.0+0xe2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0e:	f7ff fb95 	bl	800223c <HAL_GetTick>
 8002b12:	9b01      	ldr	r3, [sp, #4]
 8002b14:	1ac0      	subs	r0, r0, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b16:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b18:	2819      	cmp	r0, #25
 8002b1a:	d902      	bls.n	8002b22 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x14a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	0412      	lsls	r2, r2, #16
 8002b20:	d405      	bmi.n	8002b2e <I2C_WaitOnFlagUntilTimeout.constprop.0+0x156>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	0412      	lsls	r2, r2, #16
 8002b26:	d500      	bpl.n	8002b2a <I2C_WaitOnFlagUntilTimeout.constprop.0+0x152>
 8002b28:	e768      	b.n	80029fc <I2C_WaitOnFlagUntilTimeout.constprop.0+0x24>
  return HAL_OK;
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	e7e2      	b.n	8002af4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x11c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b2e:	2220      	movs	r2, #32
 8002b30:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002b32:	4313      	orrs	r3, r2
 8002b34:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	2341      	movs	r3, #65	@ 0x41
 8002b38:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	54e5      	strb	r5, [r4, r3]
          return HAL_ERROR;
 8002b3e:	e7d5      	b.n	8002aec <I2C_WaitOnFlagUntilTimeout.constprop.0+0x114>
 8002b40:	fe00e800 	.word	0xfe00e800

08002b44 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b46:	4657      	mov	r7, sl
 8002b48:	464e      	mov	r6, r9
 8002b4a:	46de      	mov	lr, fp
 8002b4c:	4645      	mov	r5, r8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b4e:	2410      	movs	r4, #16
{
 8002b50:	b5e0      	push	{r5, r6, r7, lr}
 8002b52:	0006      	movs	r6, r0
 8002b54:	000f      	movs	r7, r1
 8002b56:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b58:	6803      	ldr	r3, [r0, #0]
 8002b5a:	9201      	str	r2, [sp, #4]
 8002b5c:	2502      	movs	r5, #2
 8002b5e:	46b3      	mov	fp, r6
 8002b60:	002a      	movs	r2, r5
 8002b62:	6999      	ldr	r1, [r3, #24]
 8002b64:	400a      	ands	r2, r1
 8002b66:	420d      	tst	r5, r1
 8002b68:	d000      	beq.n	8002b6c <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 8002b6a:	e072      	b.n	8002c52 <I2C_WaitOnTXISFlagUntilTimeout+0x10e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b6c:	0021      	movs	r1, r4
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b6e:	6998      	ldr	r0, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	2600      	movs	r6, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b72:	4001      	ands	r1, r0
 8002b74:	4204      	tst	r4, r0
 8002b76:	d00b      	beq.n	8002b90 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b78:	61dc      	str	r4, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b7a:	1c79      	adds	r1, r7, #1
 8002b7c:	d16d      	bne.n	8002c5a <I2C_WaitOnTXISFlagUntilTimeout+0x116>
 8002b7e:	2020      	movs	r0, #32
 8002b80:	6999      	ldr	r1, [r3, #24]
 8002b82:	4208      	tst	r0, r1
 8002b84:	d0fc      	beq.n	8002b80 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b86:	2120      	movs	r1, #32
 8002b88:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002b8a:	2104      	movs	r1, #4
    status = HAL_ERROR;
 8002b8c:	2601      	movs	r6, #1
    error_code |= HAL_I2C_ERROR_AF;
 8002b8e:	4311      	orrs	r1, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b90:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002b92:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b94:	0040      	lsls	r0, r0, #1
 8002b96:	4202      	tst	r2, r0
 8002b98:	d035      	beq.n	8002c06 <I2C_WaitOnTXISFlagUntilTimeout+0xc2>
    error_code |= HAL_I2C_ERROR_BERR;
 8002b9a:	2401      	movs	r4, #1
 8002b9c:	465e      	mov	r6, fp
 8002b9e:	4321      	orrs	r1, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ba0:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ba2:	0550      	lsls	r0, r2, #21
 8002ba4:	d504      	bpl.n	8002bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
    error_code |= HAL_I2C_ERROR_OVR;
 8002ba6:	2008      	movs	r0, #8
 8002ba8:	4301      	orrs	r1, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002baa:	2080      	movs	r0, #128	@ 0x80
 8002bac:	00c0      	lsls	r0, r0, #3
 8002bae:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bb0:	0592      	lsls	r2, r2, #22
 8002bb2:	d504      	bpl.n	8002bbe <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	4311      	orrs	r1, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bb8:	32ff      	adds	r2, #255	@ 0xff
 8002bba:	32ff      	adds	r2, #255	@ 0xff
 8002bbc:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bbe:	699a      	ldr	r2, [r3, #24]
 8002bc0:	0792      	lsls	r2, r2, #30
 8002bc2:	d501      	bpl.n	8002bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	6998      	ldr	r0, [r3, #24]
 8002bcc:	4202      	tst	r2, r0
 8002bce:	d102      	bne.n	8002bd6 <I2C_WaitOnTXISFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bd0:	6998      	ldr	r0, [r3, #24]
 8002bd2:	4302      	orrs	r2, r0
 8002bd4:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	4851      	ldr	r0, [pc, #324]	@ (8002d20 <I2C_WaitOnTXISFlagUntilTimeout+0x1dc>)
 8002bda:	4002      	ands	r2, r0
 8002bdc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002bde:	6c73      	ldr	r3, [r6, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8002be2:	430b      	orrs	r3, r1
 8002be4:	6473      	str	r3, [r6, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	2341      	movs	r3, #65	@ 0x41
 8002be8:	54f2      	strb	r2, [r6, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bea:	2200      	movs	r2, #0
 8002bec:	3301      	adds	r3, #1
 8002bee:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8002bf0:	2340      	movs	r3, #64	@ 0x40
 8002bf2:	2200      	movs	r2, #0
      return HAL_ERROR;
 8002bf4:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8002bf6:	54f2      	strb	r2, [r6, r3]
}
 8002bf8:	b003      	add	sp, #12
 8002bfa:	bcf0      	pop	{r4, r5, r6, r7}
 8002bfc:	46bb      	mov	fp, r7
 8002bfe:	46b2      	mov	sl, r6
 8002c00:	46a9      	mov	r9, r5
 8002c02:	46a0      	mov	r8, r4
 8002c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c06:	0550      	lsls	r0, r2, #21
 8002c08:	d501      	bpl.n	8002c0e <I2C_WaitOnTXISFlagUntilTimeout+0xca>
 8002c0a:	465e      	mov	r6, fp
 8002c0c:	e7cb      	b.n	8002ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c0e:	0592      	lsls	r2, r2, #22
 8002c10:	d501      	bpl.n	8002c16 <I2C_WaitOnTXISFlagUntilTimeout+0xd2>
 8002c12:	465e      	mov	r6, fp
 8002c14:	e7ce      	b.n	8002bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x70>
  if (status != HAL_OK)
 8002c16:	2e00      	cmp	r6, #0
 8002c18:	d11d      	bne.n	8002c56 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
    if (Timeout != HAL_MAX_DELAY)
 8002c1a:	1c7a      	adds	r2, r7, #1
 8002c1c:	d0a0      	beq.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1e:	f7ff fb0d 	bl	800223c <HAL_GetTick>
 8002c22:	465e      	mov	r6, fp
 8002c24:	9b01      	ldr	r3, [sp, #4]
 8002c26:	1ac0      	subs	r0, r0, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c28:	6833      	ldr	r3, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c2a:	42b8      	cmp	r0, r7
 8002c2c:	d801      	bhi.n	8002c32 <I2C_WaitOnTXISFlagUntilTimeout+0xee>
 8002c2e:	2f00      	cmp	r7, #0
 8002c30:	d194      	bne.n	8002b5c <I2C_WaitOnTXISFlagUntilTimeout+0x18>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c32:	2102      	movs	r1, #2
 8002c34:	0008      	movs	r0, r1
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	4010      	ands	r0, r2
 8002c3a:	4211      	tst	r1, r2
 8002c3c:	d000      	beq.n	8002c40 <I2C_WaitOnTXISFlagUntilTimeout+0xfc>
 8002c3e:	e78d      	b.n	8002b5c <I2C_WaitOnTXISFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c40:	2220      	movs	r2, #32
 8002c42:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8002c44:	4313      	orrs	r3, r2
 8002c46:	6473      	str	r3, [r6, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	2341      	movs	r3, #65	@ 0x41
 8002c4a:	54f2      	strb	r2, [r6, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	54f0      	strb	r0, [r6, r3]
          return HAL_ERROR;
 8002c50:	e7ce      	b.n	8002bf0 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
  return HAL_OK;
 8002c52:	2000      	movs	r0, #0
 8002c54:	e7d0      	b.n	8002bf8 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
 8002c56:	465e      	mov	r6, fp
 8002c58:	e7b1      	b.n	8002bbe <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
  uint32_t tickstart = Tickstart;
 8002c5a:	9901      	ldr	r1, [sp, #4]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c5c:	9200      	str	r2, [sp, #0]
  uint32_t tickstart = Tickstart;
 8002c5e:	4688      	mov	r8, r1
  HAL_StatusTypeDef status = HAL_OK;
 8002c60:	2100      	movs	r1, #0
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c62:	003a      	movs	r2, r7
  HAL_StatusTypeDef status = HAL_OK;
 8002c64:	4689      	mov	r9, r1
          tmp2 = hi2c->Mode;
 8002c66:	3142      	adds	r1, #66	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c68:	465f      	mov	r7, fp
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c6a:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 8002c6c:	468a      	mov	sl, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c6e:	4693      	mov	fp, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	4216      	tst	r6, r2
 8002c74:	d10f      	bne.n	8002c96 <I2C_WaitOnTXISFlagUntilTimeout+0x152>
 8002c76:	464a      	mov	r2, r9
 8002c78:	2a00      	cmp	r2, #0
 8002c7a:	d14b      	bne.n	8002d14 <I2C_WaitOnTXISFlagUntilTimeout+0x1d0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c7c:	f7ff fade 	bl	800223c <HAL_GetTick>
 8002c80:	4643      	mov	r3, r8
 8002c82:	1ac0      	subs	r0, r0, r3
 8002c84:	4583      	cmp	fp, r0
 8002c86:	d30f      	bcc.n	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x164>
 8002c88:	465b      	mov	r3, fp
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x164>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c8e:	683b      	ldr	r3, [r7, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	4216      	tst	r6, r2
 8002c94:	d0ef      	beq.n	8002c76 <I2C_WaitOnTXISFlagUntilTimeout+0x132>
    if (status == HAL_OK)
 8002c96:	4659      	mov	r1, fp
 8002c98:	46bb      	mov	fp, r7
 8002c9a:	000f      	movs	r7, r1
 8002c9c:	4649      	mov	r1, r9
 8002c9e:	9a00      	ldr	r2, [sp, #0]
 8002ca0:	2900      	cmp	r1, #0
 8002ca2:	d100      	bne.n	8002ca6 <I2C_WaitOnTXISFlagUntilTimeout+0x162>
 8002ca4:	e76f      	b.n	8002b86 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
 8002ca6:	e770      	b.n	8002b8a <I2C_WaitOnTXISFlagUntilTimeout+0x46>
          tmp2 = hi2c->Mode;
 8002ca8:	4652      	mov	r2, sl
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002cae:	5cba      	ldrb	r2, [r7, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cb0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cb6:	2280      	movs	r2, #128	@ 0x80
 8002cb8:	0212      	lsls	r2, r2, #8
 8002cba:	4211      	tst	r1, r2
 8002cbc:	d01e      	beq.n	8002cfc <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002cbe:	2180      	movs	r1, #128	@ 0x80
 8002cc0:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cc2:	4208      	tst	r0, r1
 8002cc4:	d11a      	bne.n	8002cfc <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
              (tmp1 != I2C_CR2_STOP) && \
 8002cc6:	4662      	mov	r2, ip
 8002cc8:	2a20      	cmp	r2, #32
 8002cca:	d017      	beq.n	8002cfc <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4311      	orrs	r1, r2
 8002cd0:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8002cd2:	f7ff fab3 	bl	800223c <HAL_GetTick>
 8002cd6:	003a      	movs	r2, r7
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	4690      	mov	r8, r2
 8002cdc:	0007      	movs	r7, r0
 8002cde:	e006      	b.n	8002cee <I2C_WaitOnTXISFlagUntilTimeout+0x1aa>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ce0:	f7ff faac 	bl	800223c <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ce4:	4643      	mov	r3, r8
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ce6:	1bc0      	subs	r0, r0, r7
 8002ce8:	2819      	cmp	r0, #25
 8002cea:	d80b      	bhi.n	8002d04 <I2C_WaitOnTXISFlagUntilTimeout+0x1c0>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cec:	681b      	ldr	r3, [r3, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	4216      	tst	r6, r2
 8002cf2:	d0f5      	beq.n	8002ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x19c>
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	46b8      	mov	r8, r7
 8002cf8:	0017      	movs	r7, r2
 8002cfa:	e7b9      	b.n	8002c70 <I2C_WaitOnTXISFlagUntilTimeout+0x12c>
 8002cfc:	003a      	movs	r2, r7
 8002cfe:	4647      	mov	r7, r8
 8002d00:	4690      	mov	r8, r2
 8002d02:	e7f4      	b.n	8002cee <I2C_WaitOnTXISFlagUntilTimeout+0x1aa>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	2220      	movs	r2, #32
 8002d06:	9200      	str	r2, [sp, #0]
              status = HAL_ERROR;
 8002d08:	3a1f      	subs	r2, #31
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d0a:	46b8      	mov	r8, r7
              status = HAL_ERROR;
 8002d0c:	4691      	mov	r9, r2
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d0e:	001f      	movs	r7, r3
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	e7ad      	b.n	8002c70 <I2C_WaitOnTXISFlagUntilTimeout+0x12c>
 8002d14:	4659      	mov	r1, fp
 8002d16:	9a00      	ldr	r2, [sp, #0]
 8002d18:	46bb      	mov	fp, r7
 8002d1a:	000f      	movs	r7, r1
 8002d1c:	e735      	b.n	8002b8a <I2C_WaitOnTXISFlagUntilTimeout+0x46>
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	fe00e800 	.word	0xfe00e800

08002d24 <I2C_WaitOnFlagUntilTimeout>:
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	4657      	mov	r7, sl
 8002d28:	46de      	mov	lr, fp
 8002d2a:	4645      	mov	r5, r8
 8002d2c:	464e      	mov	r6, r9
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d2e:	2410      	movs	r4, #16
{
 8002d30:	b5e0      	push	{r5, r6, r7, lr}
 8002d32:	4692      	mov	sl, r2
 8002d34:	0007      	movs	r7, r0
 8002d36:	000d      	movs	r5, r1
 8002d38:	469b      	mov	fp, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d3a:	6803      	ldr	r3, [r0, #0]
{
 8002d3c:	b083      	sub	sp, #12
    error_code |= HAL_I2C_ERROR_AF;
 8002d3e:	2204      	movs	r2, #4
 8002d40:	4651      	mov	r1, sl
 8002d42:	4691      	mov	r9, r2
 8002d44:	46ba      	mov	sl, r7
 8002d46:	465f      	mov	r7, fp
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	402a      	ands	r2, r5
 8002d4c:	1b52      	subs	r2, r2, r5
 8002d4e:	4250      	negs	r0, r2
 8002d50:	4142      	adcs	r2, r0
 8002d52:	428a      	cmp	r2, r1
 8002d54:	d000      	beq.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0x34>
 8002d56:	e080      	b.n	8002e5a <I2C_WaitOnFlagUntilTimeout+0x136>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d58:	0022      	movs	r2, r4
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d5a:	6998      	ldr	r0, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d5c:	4002      	ands	r2, r0
 8002d5e:	4694      	mov	ip, r2
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2200      	movs	r2, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d62:	4204      	tst	r4, r0
 8002d64:	d00e      	beq.n	8002d84 <I2C_WaitOnFlagUntilTimeout+0x60>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d66:	61dc      	str	r4, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d68:	1c7a      	adds	r2, r7, #1
 8002d6a:	d000      	beq.n	8002d6e <I2C_WaitOnFlagUntilTimeout+0x4a>
 8002d6c:	e07c      	b.n	8002e68 <I2C_WaitOnFlagUntilTimeout+0x144>
 8002d6e:	2020      	movs	r0, #32
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	4210      	tst	r0, r2
 8002d74:	d0fc      	beq.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0x4c>
  uint32_t error_code = 0;
 8002d76:	2600      	movs	r6, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d78:	2220      	movs	r2, #32
 8002d7a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002d7c:	464a      	mov	r2, r9
 8002d7e:	4332      	orrs	r2, r6
 8002d80:	4694      	mov	ip, r2
    status = HAL_ERROR;
 8002d82:	2201      	movs	r2, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d84:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002d86:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d88:	0040      	lsls	r0, r0, #1
 8002d8a:	4206      	tst	r6, r0
 8002d8c:	d037      	beq.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0xda>
    error_code |= HAL_I2C_ERROR_BERR;
 8002d8e:	4662      	mov	r2, ip
 8002d90:	2401      	movs	r4, #1
 8002d92:	0031      	movs	r1, r6
 8002d94:	4657      	mov	r7, sl
 8002d96:	4322      	orrs	r2, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d98:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d9a:	0570      	lsls	r0, r6, #21
 8002d9c:	d504      	bpl.n	8002da8 <I2C_WaitOnFlagUntilTimeout+0x84>
    error_code |= HAL_I2C_ERROR_OVR;
 8002d9e:	2008      	movs	r0, #8
 8002da0:	4302      	orrs	r2, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002da2:	2080      	movs	r0, #128	@ 0x80
 8002da4:	00c0      	lsls	r0, r0, #3
 8002da6:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002da8:	0589      	lsls	r1, r1, #22
 8002daa:	d504      	bpl.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x92>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002dac:	2102      	movs	r1, #2
 8002dae:	430a      	orrs	r2, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002db0:	31ff      	adds	r1, #255	@ 0xff
 8002db2:	31ff      	adds	r1, #255	@ 0xff
 8002db4:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002db6:	6999      	ldr	r1, [r3, #24]
 8002db8:	0789      	lsls	r1, r1, #30
 8002dba:	d501      	bpl.n	8002dc0 <I2C_WaitOnFlagUntilTimeout+0x9c>
    hi2c->Instance->TXDR = 0x00U;
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	6299      	str	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	6998      	ldr	r0, [r3, #24]
 8002dc4:	4201      	tst	r1, r0
 8002dc6:	d102      	bne.n	8002dce <I2C_WaitOnFlagUntilTimeout+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dc8:	6998      	ldr	r0, [r3, #24]
 8002dca:	4301      	orrs	r1, r0
 8002dcc:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	484f      	ldr	r0, [pc, #316]	@ (8002f10 <I2C_WaitOnFlagUntilTimeout+0x1ec>)
 8002dd2:	4001      	ands	r1, r0
 8002dd4:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	647b      	str	r3, [r7, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ddc:	2220      	movs	r2, #32
 8002dde:	2341      	movs	r3, #65	@ 0x41
 8002de0:	54fa      	strb	r2, [r7, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de2:	2200      	movs	r2, #0
 8002de4:	3301      	adds	r3, #1
 8002de6:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 8002de8:	2340      	movs	r3, #64	@ 0x40
 8002dea:	2200      	movs	r2, #0
      return HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8002dee:	54fa      	strb	r2, [r7, r3]
}
 8002df0:	b003      	add	sp, #12
 8002df2:	bcf0      	pop	{r4, r5, r6, r7}
 8002df4:	46bb      	mov	fp, r7
 8002df6:	46b2      	mov	sl, r6
 8002df8:	46a9      	mov	r9, r5
 8002dfa:	46a0      	mov	r8, r4
 8002dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002dfe:	0570      	lsls	r0, r6, #21
 8002e00:	d503      	bpl.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0xe6>
 8002e02:	4662      	mov	r2, ip
 8002e04:	0031      	movs	r1, r6
 8002e06:	4657      	mov	r7, sl
 8002e08:	e7c9      	b.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x7a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e0a:	05b6      	lsls	r6, r6, #22
 8002e0c:	d502      	bpl.n	8002e14 <I2C_WaitOnFlagUntilTimeout+0xf0>
 8002e0e:	4662      	mov	r2, ip
 8002e10:	4657      	mov	r7, sl
 8002e12:	e7cb      	b.n	8002dac <I2C_WaitOnFlagUntilTimeout+0x88>
  if (status != HAL_OK)
 8002e14:	2a00      	cmp	r2, #0
 8002e16:	d124      	bne.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x13e>
    if (Timeout != HAL_MAX_DELAY)
 8002e18:	1c7a      	adds	r2, r7, #1
 8002e1a:	d095      	beq.n	8002d48 <I2C_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1c:	46bb      	mov	fp, r7
 8002e1e:	4657      	mov	r7, sl
 8002e20:	468a      	mov	sl, r1
 8002e22:	f7ff fa0b 	bl	800223c <HAL_GetTick>
 8002e26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002e28:	1ac0      	subs	r0, r0, r3
 8002e2a:	4558      	cmp	r0, fp
 8002e2c:	d802      	bhi.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x110>
 8002e2e:	465b      	mov	r3, fp
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d114      	bne.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x13a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	699a      	ldr	r2, [r3, #24]
 8002e38:	402a      	ands	r2, r5
 8002e3a:	1b52      	subs	r2, r2, r5
 8002e3c:	4251      	negs	r1, r2
 8002e3e:	414a      	adcs	r2, r1
 8002e40:	4552      	cmp	r2, sl
 8002e42:	d000      	beq.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x122>
 8002e44:	e77b      	b.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x1a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e46:	2220      	movs	r2, #32
 8002e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	647b      	str	r3, [r7, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	2341      	movs	r3, #65	@ 0x41
 8002e50:	54fa      	strb	r2, [r7, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e52:	2200      	movs	r2, #0
 8002e54:	3301      	adds	r3, #1
 8002e56:	54fa      	strb	r2, [r7, r3]
          return HAL_ERROR;
 8002e58:	e7c6      	b.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xc4>
  return HAL_OK;
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	e7c8      	b.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0xcc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	e76d      	b.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0x1a>
 8002e62:	4662      	mov	r2, ip
 8002e64:	4657      	mov	r7, sl
 8002e66:	e7a6      	b.n	8002db6 <I2C_WaitOnFlagUntilTimeout+0x92>
  uint32_t tickstart = Tickstart;
 8002e68:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  uint32_t error_code = 0;
 8002e6a:	2600      	movs	r6, #0
  uint32_t tickstart = Tickstart;
 8002e6c:	4693      	mov	fp, r2
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2200      	movs	r2, #0
 8002e70:	9200      	str	r2, [sp, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e72:	3220      	adds	r2, #32
 8002e74:	4690      	mov	r8, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e76:	002a      	movs	r2, r5
 8002e78:	4655      	mov	r5, sl
 8002e7a:	46b2      	mov	sl, r6
 8002e7c:	465e      	mov	r6, fp
 8002e7e:	4693      	mov	fp, r2
 8002e80:	9101      	str	r1, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e82:	4641      	mov	r1, r8
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	4211      	tst	r1, r2
 8002e88:	d134      	bne.n	8002ef4 <I2C_WaitOnFlagUntilTimeout+0x1d0>
 8002e8a:	9a00      	ldr	r2, [sp, #0]
 8002e8c:	2a00      	cmp	r2, #0
 8002e8e:	d13a      	bne.n	8002f06 <I2C_WaitOnFlagUntilTimeout+0x1e2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e90:	f7ff f9d4 	bl	800223c <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e94:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e96:	1b80      	subs	r0, r0, r6
 8002e98:	4287      	cmp	r7, r0
 8002e9a:	d301      	bcc.n	8002ea0 <I2C_WaitOnFlagUntilTimeout+0x17c>
 8002e9c:	2f00      	cmp	r7, #0
 8002e9e:	d1f0      	bne.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x15e>
          tmp2 = hi2c->Mode;
 8002ea0:	2242      	movs	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ea2:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8002ea4:	5caa      	ldrb	r2, [r5, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ea6:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002eac:	2280      	movs	r2, #128	@ 0x80
 8002eae:	0212      	lsls	r2, r2, #8
 8002eb0:	4211      	tst	r1, r2
 8002eb2:	d00d      	beq.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x1ac>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002eb4:	2180      	movs	r1, #128	@ 0x80
 8002eb6:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002eb8:	4208      	tst	r0, r1
 8002eba:	d109      	bne.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x1ac>
              (tmp1 != I2C_CR2_STOP) && \
 8002ebc:	4662      	mov	r2, ip
 8002ebe:	2a20      	cmp	r2, #32
 8002ec0:	d006      	beq.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x1ac>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8002ec8:	f7ff f9b8 	bl	800223c <HAL_GetTick>
 8002ecc:	0006      	movs	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ece:	682b      	ldr	r3, [r5, #0]
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	4211      	tst	r1, r2
 8002ed6:	d1d4      	bne.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x15e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ed8:	f7ff f9b0 	bl	800223c <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002edc:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ede:	1b80      	subs	r0, r0, r6
 8002ee0:	2819      	cmp	r0, #25
 8002ee2:	d9f5      	bls.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x1ac>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ee4:	2220      	movs	r2, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ee6:	4641      	mov	r1, r8
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ee8:	4692      	mov	sl, r2
              status = HAL_ERROR;
 8002eea:	3a1f      	subs	r2, #31
 8002eec:	9200      	str	r2, [sp, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	4211      	tst	r1, r2
 8002ef2:	d0ca      	beq.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0x166>
    if (status == HAL_OK)
 8002ef4:	9a00      	ldr	r2, [sp, #0]
 8002ef6:	4656      	mov	r6, sl
 8002ef8:	9901      	ldr	r1, [sp, #4]
 8002efa:	46aa      	mov	sl, r5
 8002efc:	465d      	mov	r5, fp
 8002efe:	2a00      	cmp	r2, #0
 8002f00:	d100      	bne.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0x1e0>
 8002f02:	e739      	b.n	8002d78 <I2C_WaitOnFlagUntilTimeout+0x54>
 8002f04:	e73a      	b.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0x58>
 8002f06:	4656      	mov	r6, sl
 8002f08:	9901      	ldr	r1, [sp, #4]
 8002f0a:	46aa      	mov	sl, r5
 8002f0c:	465d      	mov	r5, fp
 8002f0e:	e735      	b.n	8002d7c <I2C_WaitOnFlagUntilTimeout+0x58>
 8002f10:	fe00e800 	.word	0xfe00e800

08002f14 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f16:	46de      	mov	lr, fp
 8002f18:	4657      	mov	r7, sl
 8002f1a:	464e      	mov	r6, r9
 8002f1c:	4645      	mov	r5, r8
 8002f1e:	b5e0      	push	{r5, r6, r7, lr}
 8002f20:	000d      	movs	r5, r1
    error_code |= HAL_I2C_ERROR_AF;
 8002f22:	2104      	movs	r1, #4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f24:	6803      	ldr	r3, [r0, #0]
{
 8002f26:	4692      	mov	sl, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f28:	699a      	ldr	r2, [r3, #24]
{
 8002f2a:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f2c:	2610      	movs	r6, #16
    error_code |= HAL_I2C_ERROR_AF;
 8002f2e:	468b      	mov	fp, r1
{
 8002f30:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f32:	0692      	lsls	r2, r2, #26
 8002f34:	d464      	bmi.n	8003000 <I2C_WaitOnSTOPFlagUntilTimeout+0xec>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f36:	0032      	movs	r2, r6
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f38:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3a:	2700      	movs	r7, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	420e      	tst	r6, r1
 8002f40:	d00c      	beq.n	8002f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f42:	61de      	str	r6, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f44:	1c6a      	adds	r2, r5, #1
 8002f46:	d165      	bne.n	8003014 <I2C_WaitOnSTOPFlagUntilTimeout+0x100>
 8002f48:	2120      	movs	r1, #32
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	4211      	tst	r1, r2
 8002f4e:	d0fc      	beq.n	8002f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
  uint32_t error_code = 0;
 8002f50:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f52:	2120      	movs	r1, #32
 8002f54:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8002f56:	4659      	mov	r1, fp
    status = HAL_ERROR;
 8002f58:	2701      	movs	r7, #1
    error_code |= HAL_I2C_ERROR_AF;
 8002f5a:	430a      	orrs	r2, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f5c:	2080      	movs	r0, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 8002f5e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f60:	0040      	lsls	r0, r0, #1
 8002f62:	4201      	tst	r1, r0
 8002f64:	d034      	beq.n	8002fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0xbc>
    error_code |= HAL_I2C_ERROR_BERR;
 8002f66:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f68:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8002f6a:	432a      	orrs	r2, r5
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f6c:	0548      	lsls	r0, r1, #21
 8002f6e:	d504      	bpl.n	8002f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
    error_code |= HAL_I2C_ERROR_OVR;
 8002f70:	2008      	movs	r0, #8
 8002f72:	4302      	orrs	r2, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f74:	2080      	movs	r0, #128	@ 0x80
 8002f76:	00c0      	lsls	r0, r0, #3
 8002f78:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f7a:	0589      	lsls	r1, r1, #22
 8002f7c:	d504      	bpl.n	8002f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f7e:	2102      	movs	r1, #2
 8002f80:	430a      	orrs	r2, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f82:	31ff      	adds	r1, #255	@ 0xff
 8002f84:	31ff      	adds	r1, #255	@ 0xff
 8002f86:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	0789      	lsls	r1, r1, #30
 8002f8c:	d501      	bpl.n	8002f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    hi2c->Instance->TXDR = 0x00U;
 8002f8e:	2100      	movs	r1, #0
 8002f90:	6299      	str	r1, [r3, #40]	@ 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f92:	2101      	movs	r1, #1
 8002f94:	6998      	ldr	r0, [r3, #24]
 8002f96:	4201      	tst	r1, r0
 8002f98:	d102      	bne.n	8002fa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f9a:	6998      	ldr	r0, [r3, #24]
 8002f9c:	4301      	orrs	r1, r0
 8002f9e:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	4844      	ldr	r0, [pc, #272]	@ (80030b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a0>)
 8002fa4:	4001      	ands	r1, r0
 8002fa6:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8002fa8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002faa:	4313      	orrs	r3, r2
 8002fac:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	2220      	movs	r2, #32
 8002fb0:	2341      	movs	r3, #65	@ 0x41
 8002fb2:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8002fba:	2340      	movs	r3, #64	@ 0x40
 8002fbc:	2200      	movs	r2, #0
      return HAL_ERROR;
 8002fbe:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8002fc0:	54e2      	strb	r2, [r4, r3]
}
 8002fc2:	b003      	add	sp, #12
 8002fc4:	bcf0      	pop	{r4, r5, r6, r7}
 8002fc6:	46bb      	mov	fp, r7
 8002fc8:	46b2      	mov	sl, r6
 8002fca:	46a9      	mov	r9, r5
 8002fcc:	46a0      	mov	r8, r4
 8002fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fd0:	0548      	lsls	r0, r1, #21
 8002fd2:	d4cd      	bmi.n	8002f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002fd4:	0589      	lsls	r1, r1, #22
 8002fd6:	d4d2      	bmi.n	8002f7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  if (status != HAL_OK)
 8002fd8:	2f00      	cmp	r7, #0
 8002fda:	d1d5      	bne.n	8002f88 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fdc:	f7ff f92e 	bl	800223c <HAL_GetTick>
 8002fe0:	4653      	mov	r3, sl
 8002fe2:	1ac0      	subs	r0, r0, r3
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fe4:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	42a8      	cmp	r0, r5
 8002fe8:	d801      	bhi.n	8002fee <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
 8002fea:	2d00      	cmp	r5, #0
 8002fec:	d105      	bne.n	8002ffa <I2C_WaitOnSTOPFlagUntilTimeout+0xe6>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002fee:	2220      	movs	r2, #32
 8002ff0:	0010      	movs	r0, r2
 8002ff2:	6999      	ldr	r1, [r3, #24]
 8002ff4:	4008      	ands	r0, r1
 8002ff6:	420a      	tst	r2, r1
 8002ff8:	d004      	beq.n	8003004 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	0692      	lsls	r2, r2, #26
 8002ffe:	d59a      	bpl.n	8002f36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  return HAL_OK;
 8003000:	2000      	movs	r0, #0
 8003002:	e7de      	b.n	8002fc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xae>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003004:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003006:	4313      	orrs	r3, r2
 8003008:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800300a:	2341      	movs	r3, #65	@ 0x41
 800300c:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800300e:	3301      	adds	r3, #1
 8003010:	54e0      	strb	r0, [r4, r3]
        return HAL_ERROR;
 8003012:	e7d2      	b.n	8002fba <I2C_WaitOnSTOPFlagUntilTimeout+0xa6>
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003014:	0028      	movs	r0, r5
  uint32_t error_code = 0;
 8003016:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2100      	movs	r1, #0
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800301a:	4655      	mov	r5, sl
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	4689      	mov	r9, r1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800301e:	2720      	movs	r7, #32
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003020:	4692      	mov	sl, r2
 8003022:	4680      	mov	r8, r0
 8003024:	9501      	str	r5, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	4217      	tst	r7, r2
 800302a:	d10e      	bne.n	800304a <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
 800302c:	464a      	mov	r2, r9
 800302e:	2a00      	cmp	r2, #0
 8003030:	d13b      	bne.n	80030aa <I2C_WaitOnSTOPFlagUntilTimeout+0x196>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003032:	f7ff f903 	bl	800223c <HAL_GetTick>
 8003036:	1b40      	subs	r0, r0, r5
 8003038:	4580      	cmp	r8, r0
 800303a:	d30f      	bcc.n	800305c <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
 800303c:	4643      	mov	r3, r8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00c      	beq.n	800305c <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003042:	6823      	ldr	r3, [r4, #0]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	4217      	tst	r7, r2
 8003048:	d0f0      	beq.n	800302c <I2C_WaitOnSTOPFlagUntilTimeout+0x118>
    if (status == HAL_OK)
 800304a:	9901      	ldr	r1, [sp, #4]
 800304c:	4652      	mov	r2, sl
 800304e:	468a      	mov	sl, r1
 8003050:	4649      	mov	r1, r9
 8003052:	4645      	mov	r5, r8
 8003054:	2900      	cmp	r1, #0
 8003056:	d100      	bne.n	800305a <I2C_WaitOnSTOPFlagUntilTimeout+0x146>
 8003058:	e77b      	b.n	8002f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
 800305a:	e77c      	b.n	8002f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
          tmp2 = hi2c->Mode;
 800305c:	2242      	movs	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8003062:	5ca2      	ldrb	r2, [r4, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003064:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800306a:	2280      	movs	r2, #128	@ 0x80
 800306c:	0212      	lsls	r2, r2, #8
 800306e:	4211      	tst	r1, r2
 8003070:	d00d      	beq.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003072:	2180      	movs	r1, #128	@ 0x80
 8003074:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003076:	4208      	tst	r0, r1
 8003078:	d109      	bne.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
              (tmp1 != I2C_CR2_STOP) && \
 800307a:	4662      	mov	r2, ip
 800307c:	2a20      	cmp	r2, #32
 800307e:	d006      	beq.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	4311      	orrs	r1, r2
 8003084:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8003086:	f7ff f8d9 	bl	800223c <HAL_GetTick>
 800308a:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	4217      	tst	r7, r2
 8003092:	d1c8      	bne.n	8003026 <I2C_WaitOnSTOPFlagUntilTimeout+0x112>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003094:	f7ff f8d2 	bl	800223c <HAL_GetTick>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003098:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800309a:	1b40      	subs	r0, r0, r5
 800309c:	2819      	cmp	r0, #25
 800309e:	d9f6      	bls.n	800308e <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030a0:	2220      	movs	r2, #32
 80030a2:	4692      	mov	sl, r2
              status = HAL_ERROR;
 80030a4:	3a1f      	subs	r2, #31
 80030a6:	4691      	mov	r9, r2
 80030a8:	e7bd      	b.n	8003026 <I2C_WaitOnSTOPFlagUntilTimeout+0x112>
 80030aa:	9901      	ldr	r1, [sp, #4]
 80030ac:	4652      	mov	r2, sl
 80030ae:	4645      	mov	r5, r8
 80030b0:	468a      	mov	sl, r1
 80030b2:	e750      	b.n	8002f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 80030b4:	fe00e800 	.word	0xfe00e800

080030b8 <HAL_I2C_Init>:
{
 80030b8:	b510      	push	{r4, lr}
 80030ba:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 80030bc:	d052      	beq.n	8003164 <HAL_I2C_Init+0xac>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030be:	2341      	movs	r3, #65	@ 0x41
 80030c0:	5cc3      	ldrb	r3, [r0, r3]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d048      	beq.n	800315a <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030c8:	2341      	movs	r3, #65	@ 0x41
 80030ca:	2224      	movs	r2, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 80030cc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ce:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80030d0:	6823      	ldr	r3, [r4, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030d2:	68a0      	ldr	r0, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	438a      	bics	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80030da:	4923      	ldr	r1, [pc, #140]	@ (8003168 <HAL_I2C_Init+0xb0>)
 80030dc:	6862      	ldr	r2, [r4, #4]
 80030de:	400a      	ands	r2, r1
 80030e0:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	4921      	ldr	r1, [pc, #132]	@ (800316c <HAL_I2C_Init+0xb4>)
 80030e6:	400a      	ands	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030ea:	68e2      	ldr	r2, [r4, #12]
 80030ec:	2a01      	cmp	r2, #1
 80030ee:	d00b      	beq.n	8003108 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030f0:	2184      	movs	r1, #132	@ 0x84
 80030f2:	0209      	lsls	r1, r1, #8
 80030f4:	4301      	orrs	r1, r0
 80030f6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f8:	2a02      	cmp	r2, #2
 80030fa:	d109      	bne.n	8003110 <HAL_I2C_Init+0x58>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030fc:	2280      	movs	r2, #128	@ 0x80
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	e007      	b.n	8003118 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003108:	2280      	movs	r2, #128	@ 0x80
 800310a:	0212      	lsls	r2, r2, #8
 800310c:	4302      	orrs	r2, r0
 800310e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4917      	ldr	r1, [pc, #92]	@ (8003170 <HAL_I2C_Init+0xb8>)
 8003114:	400a      	ands	r2, r1
 8003116:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	4a16      	ldr	r2, [pc, #88]	@ (8003174 <HAL_I2C_Init+0xbc>)
  return HAL_OK;
 800311c:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	4911      	ldr	r1, [pc, #68]	@ (800316c <HAL_I2C_Init+0xb4>)
 8003126:	400a      	ands	r2, r1
 8003128:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800312a:	6961      	ldr	r1, [r4, #20]
 800312c:	6922      	ldr	r2, [r4, #16]
 800312e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003130:	69a1      	ldr	r1, [r4, #24]
 8003132:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003134:	430a      	orrs	r2, r1
 8003136:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003138:	6a21      	ldr	r1, [r4, #32]
 800313a:	69e2      	ldr	r2, [r4, #28]
 800313c:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 800313e:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003140:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003148:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800314a:	2241      	movs	r2, #65	@ 0x41
 800314c:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800314e:	6463      	str	r3, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003150:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003152:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8003154:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	54a3      	strb	r3, [r4, r2]
}
 8003158:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800315a:	3340      	adds	r3, #64	@ 0x40
 800315c:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 800315e:	f7fe feab 	bl	8001eb8 <HAL_I2C_MspInit>
 8003162:	e7b1      	b.n	80030c8 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8003164:	2001      	movs	r0, #1
 8003166:	e7f7      	b.n	8003158 <HAL_I2C_Init+0xa0>
 8003168:	f0ffffff 	.word	0xf0ffffff
 800316c:	ffff7fff 	.word	0xffff7fff
 8003170:	fffff7ff 	.word	0xfffff7ff
 8003174:	02008000 	.word	0x02008000

08003178 <HAL_I2C_Mem_Write>:
{
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	4657      	mov	r7, sl
 800317c:	464e      	mov	r6, r9
 800317e:	46de      	mov	lr, fp
 8003180:	4645      	mov	r5, r8
 8003182:	b5e0      	push	{r5, r6, r7, lr}
 8003184:	b083      	sub	sp, #12
 8003186:	001f      	movs	r7, r3
 8003188:	ab0c      	add	r3, sp, #48	@ 0x30
 800318a:	0016      	movs	r6, r2
 800318c:	cb04      	ldmia	r3!, {r2}
 800318e:	0004      	movs	r4, r0
 8003190:	881b      	ldrh	r3, [r3, #0]
 8003192:	000d      	movs	r5, r1
 8003194:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003196:	2341      	movs	r3, #65	@ 0x41
 8003198:	4699      	mov	r9, r3
 800319a:	5cc3      	ldrb	r3, [r0, r3]
{
 800319c:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d11f      	bne.n	80031e2 <HAL_I2C_Mem_Write+0x6a>
    if ((pData == NULL) || (Size == 0U))
 80031a2:	2a00      	cmp	r2, #0
 80031a4:	d019      	beq.n	80031da <HAL_I2C_Mem_Write+0x62>
 80031a6:	465b      	mov	r3, fp
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d016      	beq.n	80031da <HAL_I2C_Mem_Write+0x62>
    __HAL_LOCK(hi2c);
 80031ac:	2240      	movs	r2, #64	@ 0x40
 80031ae:	5c83      	ldrb	r3, [r0, r2]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d016      	beq.n	80031e2 <HAL_I2C_Mem_Write+0x6a>
 80031b4:	2301      	movs	r3, #1
 80031b6:	5483      	strb	r3, [r0, r2]
    tickstart = HAL_GetTick();
 80031b8:	f7ff f840 	bl	800223c <HAL_GetTick>
 80031bc:	4680      	mov	r8, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031be:	0001      	movs	r1, r0
 80031c0:	0020      	movs	r0, r4
 80031c2:	f7ff fc09 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 80031c6:	2800      	cmp	r0, #0
 80031c8:	d00d      	beq.n	80031e6 <HAL_I2C_Mem_Write+0x6e>
      return  HAL_ERROR;
 80031ca:	2001      	movs	r0, #1
}
 80031cc:	b003      	add	sp, #12
 80031ce:	bcf0      	pop	{r4, r5, r6, r7}
 80031d0:	46bb      	mov	fp, r7
 80031d2:	46b2      	mov	sl, r6
 80031d4:	46a9      	mov	r9, r5
 80031d6:	46a0      	mov	r8, r4
 80031d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031da:	2380      	movs	r3, #128	@ 0x80
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80031e0:	e7f3      	b.n	80031ca <HAL_I2C_Mem_Write+0x52>
    __HAL_LOCK(hi2c);
 80031e2:	2002      	movs	r0, #2
 80031e4:	e7f2      	b.n	80031cc <HAL_I2C_Mem_Write+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031e6:	2321      	movs	r3, #33	@ 0x21
 80031e8:	464a      	mov	r2, r9
 80031ea:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ec:	2240      	movs	r2, #64	@ 0x40
 80031ee:	3321      	adds	r3, #33	@ 0x21
 80031f0:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 80031f2:	4653      	mov	r3, sl
 80031f4:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031f6:	465b      	mov	r3, fp
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031f8:	6821      	ldr	r1, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031fa:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80031fc:	8563      	strh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80031fe:	684a      	ldr	r2, [r1, #4]
    hi2c->XferISR   = NULL;
 8003200:	6360      	str	r0, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 8003202:	4854      	ldr	r0, [pc, #336]	@ (8003354 <HAL_I2C_Mem_Write+0x1dc>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003204:	b2fb      	uxtb	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 8003206:	4002      	ands	r2, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003208:	05ad      	lsls	r5, r5, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800320a:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800320c:	4313      	orrs	r3, r2
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800320e:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003210:	4a51      	ldr	r2, [pc, #324]	@ (8003358 <HAL_I2C_Mem_Write+0x1e0>)
 8003212:	432b      	orrs	r3, r5
 8003214:	4313      	orrs	r3, r2
 8003216:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003218:	4642      	mov	r2, r8
 800321a:	0020      	movs	r0, r4
 800321c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800321e:	f7ff fc91 	bl	8002b44 <I2C_WaitOnTXISFlagUntilTimeout>
 8003222:	2800      	cmp	r0, #0
 8003224:	d157      	bne.n	80032d6 <HAL_I2C_Mem_Write+0x15e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003226:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003228:	2f01      	cmp	r7, #1
 800322a:	d162      	bne.n	80032f2 <HAL_I2C_Mem_Write+0x17a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800322c:	b2f6      	uxtb	r6, r6
 800322e:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003230:	4643      	mov	r3, r8
 8003232:	2200      	movs	r2, #0
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2180      	movs	r1, #128	@ 0x80
 8003238:	0020      	movs	r0, r4
 800323a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800323c:	f7ff fd72 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8003240:	2800      	cmp	r0, #0
 8003242:	d148      	bne.n	80032d6 <HAL_I2C_Mem_Write+0x15e>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003244:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003246:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003248:	2bff      	cmp	r3, #255	@ 0xff
 800324a:	d848      	bhi.n	80032de <HAL_I2C_Mem_Write+0x166>
      hi2c->XferSize = hi2c->XferCount;
 800324c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800324e:	4843      	ldr	r0, [pc, #268]	@ (800335c <HAL_I2C_Mem_Write+0x1e4>)
      hi2c->XferSize = hi2c->XferCount;
 8003250:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003252:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8003254:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003256:	b2db      	uxtb	r3, r3
 8003258:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800325a:	4001      	ands	r1, r0
 800325c:	432b      	orrs	r3, r5
 800325e:	430b      	orrs	r3, r1
 8003260:	2180      	movs	r1, #128	@ 0x80
 8003262:	0489      	lsls	r1, r1, #18
 8003264:	430b      	orrs	r3, r1
 8003266:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003268:	e002      	b.n	8003270 <HAL_I2C_Mem_Write+0xf8>
    } while (hi2c->XferCount > 0U);
 800326a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800326c:	2b00      	cmp	r3, #0
 800326e:	d05a      	beq.n	8003326 <HAL_I2C_Mem_Write+0x1ae>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003270:	4642      	mov	r2, r8
 8003272:	0020      	movs	r0, r4
 8003274:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003276:	f7ff fc65 	bl	8002b44 <I2C_WaitOnTXISFlagUntilTimeout>
 800327a:	2800      	cmp	r0, #0
 800327c:	d1a5      	bne.n	80031ca <HAL_I2C_Mem_Write+0x52>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800327e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003280:	6822      	ldr	r2, [r4, #0]
 8003282:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003284:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003286:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003288:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800328a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800328c:	3b01      	subs	r3, #1
 800328e:	b29b      	uxth	r3, r3
 8003290:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003292:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003294:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003296:	3b01      	subs	r3, #1
 8003298:	b29b      	uxth	r3, r3
 800329a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800329c:	2a00      	cmp	r2, #0
 800329e:	d0e4      	beq.n	800326a <HAL_I2C_Mem_Write+0xf2>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1e2      	bne.n	800326a <HAL_I2C_Mem_Write+0xf2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032a4:	4643      	mov	r3, r8
 80032a6:	2200      	movs	r2, #0
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2180      	movs	r1, #128	@ 0x80
 80032ac:	0020      	movs	r0, r4
 80032ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80032b0:	f7ff fd38 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 80032b4:	2800      	cmp	r0, #0
 80032b6:	d000      	beq.n	80032ba <HAL_I2C_Mem_Write+0x142>
 80032b8:	e787      	b.n	80031ca <HAL_I2C_Mem_Write+0x52>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80032bc:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032be:	2bff      	cmp	r3, #255	@ 0xff
 80032c0:	d922      	bls.n	8003308 <HAL_I2C_Mem_Write+0x190>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c2:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80032c4:	4925      	ldr	r1, [pc, #148]	@ (800335c <HAL_I2C_Mem_Write+0x1e4>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032c6:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80032c8:	6853      	ldr	r3, [r2, #4]
 80032ca:	400b      	ands	r3, r1
 80032cc:	4924      	ldr	r1, [pc, #144]	@ (8003360 <HAL_I2C_Mem_Write+0x1e8>)
 80032ce:	432b      	orrs	r3, r5
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6053      	str	r3, [r2, #4]
}
 80032d4:	e7c9      	b.n	800326a <HAL_I2C_Mem_Write+0xf2>
      __HAL_UNLOCK(hi2c);
 80032d6:	2340      	movs	r3, #64	@ 0x40
 80032d8:	2200      	movs	r2, #0
 80032da:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80032dc:	e775      	b.n	80031ca <HAL_I2C_Mem_Write+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032de:	23ff      	movs	r3, #255	@ 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80032e0:	491e      	ldr	r1, [pc, #120]	@ (800335c <HAL_I2C_Mem_Write+0x1e4>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e2:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80032e4:	6853      	ldr	r3, [r2, #4]
 80032e6:	400b      	ands	r3, r1
 80032e8:	491d      	ldr	r1, [pc, #116]	@ (8003360 <HAL_I2C_Mem_Write+0x1e8>)
 80032ea:	432b      	orrs	r3, r5
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6053      	str	r3, [r2, #4]
}
 80032f0:	e7be      	b.n	8003270 <HAL_I2C_Mem_Write+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032f2:	0a32      	lsrs	r2, r6, #8
 80032f4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f6:	0020      	movs	r0, r4
 80032f8:	4642      	mov	r2, r8
 80032fa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80032fc:	f7ff fc22 	bl	8002b44 <I2C_WaitOnTXISFlagUntilTimeout>
 8003300:	2800      	cmp	r0, #0
 8003302:	d1e8      	bne.n	80032d6 <HAL_I2C_Mem_Write+0x15e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	e791      	b.n	800322c <HAL_I2C_Mem_Write+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8003308:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800330a:	4814      	ldr	r0, [pc, #80]	@ (800335c <HAL_I2C_Mem_Write+0x1e4>)
          hi2c->XferSize = hi2c->XferCount;
 800330c:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800330e:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8003310:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003312:	b2db      	uxtb	r3, r3
 8003314:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8003316:	4001      	ands	r1, r0
 8003318:	432b      	orrs	r3, r5
 800331a:	430b      	orrs	r3, r1
 800331c:	2180      	movs	r1, #128	@ 0x80
 800331e:	0489      	lsls	r1, r1, #18
 8003320:	430b      	orrs	r3, r1
 8003322:	6053      	str	r3, [r2, #4]
}
 8003324:	e7a1      	b.n	800326a <HAL_I2C_Mem_Write+0xf2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003326:	4642      	mov	r2, r8
 8003328:	0020      	movs	r0, r4
 800332a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800332c:	f7ff fdf2 	bl	8002f14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003330:	2800      	cmp	r0, #0
 8003332:	d000      	beq.n	8003336 <HAL_I2C_Mem_Write+0x1be>
 8003334:	e749      	b.n	80031ca <HAL_I2C_Mem_Write+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003336:	2120      	movs	r1, #32
 8003338:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800333a:	4d0a      	ldr	r5, [pc, #40]	@ (8003364 <HAL_I2C_Mem_Write+0x1ec>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800333c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	402a      	ands	r2, r5
 8003342:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003344:	2341      	movs	r3, #65	@ 0x41
 8003346:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003348:	3301      	adds	r3, #1
 800334a:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 800334c:	3b02      	subs	r3, #2
 800334e:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8003350:	e73c      	b.n	80031cc <HAL_I2C_Mem_Write+0x54>
 8003352:	46c0      	nop			@ (mov r8, r8)
 8003354:	fc009800 	.word	0xfc009800
 8003358:	01002000 	.word	0x01002000
 800335c:	fc009c00 	.word	0xfc009c00
 8003360:	01ff0000 	.word	0x01ff0000
 8003364:	fe00e800 	.word	0xfe00e800

08003368 <HAL_I2C_Mem_Read>:
{
 8003368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800336a:	4657      	mov	r7, sl
 800336c:	464e      	mov	r6, r9
 800336e:	46de      	mov	lr, fp
 8003370:	4645      	mov	r5, r8
 8003372:	b5e0      	push	{r5, r6, r7, lr}
 8003374:	b083      	sub	sp, #12
 8003376:	001f      	movs	r7, r3
 8003378:	ab0c      	add	r3, sp, #48	@ 0x30
 800337a:	0016      	movs	r6, r2
 800337c:	cb04      	ldmia	r3!, {r2}
 800337e:	0004      	movs	r4, r0
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	000d      	movs	r5, r1
 8003384:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003386:	2341      	movs	r3, #65	@ 0x41
 8003388:	4699      	mov	r9, r3
 800338a:	5cc3      	ldrb	r3, [r0, r3]
{
 800338c:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800338e:	2b20      	cmp	r3, #32
 8003390:	d11f      	bne.n	80033d2 <HAL_I2C_Mem_Read+0x6a>
    if ((pData == NULL) || (Size == 0U))
 8003392:	2a00      	cmp	r2, #0
 8003394:	d019      	beq.n	80033ca <HAL_I2C_Mem_Read+0x62>
 8003396:	465b      	mov	r3, fp
 8003398:	2b00      	cmp	r3, #0
 800339a:	d016      	beq.n	80033ca <HAL_I2C_Mem_Read+0x62>
    __HAL_LOCK(hi2c);
 800339c:	2240      	movs	r2, #64	@ 0x40
 800339e:	5c83      	ldrb	r3, [r0, r2]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d016      	beq.n	80033d2 <HAL_I2C_Mem_Read+0x6a>
 80033a4:	2301      	movs	r3, #1
 80033a6:	5483      	strb	r3, [r0, r2]
    tickstart = HAL_GetTick();
 80033a8:	f7fe ff48 	bl	800223c <HAL_GetTick>
 80033ac:	4680      	mov	r8, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033ae:	0001      	movs	r1, r0
 80033b0:	0020      	movs	r0, r4
 80033b2:	f7ff fb11 	bl	80029d8 <I2C_WaitOnFlagUntilTimeout.constprop.0>
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_I2C_Mem_Read+0x6e>
      return  HAL_ERROR;
 80033ba:	2001      	movs	r0, #1
}
 80033bc:	b003      	add	sp, #12
 80033be:	bcf0      	pop	{r4, r5, r6, r7}
 80033c0:	46bb      	mov	fp, r7
 80033c2:	46b2      	mov	sl, r6
 80033c4:	46a9      	mov	r9, r5
 80033c6:	46a0      	mov	r8, r4
 80033c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033ca:	2380      	movs	r3, #128	@ 0x80
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80033d0:	e7f3      	b.n	80033ba <HAL_I2C_Mem_Read+0x52>
    __HAL_LOCK(hi2c);
 80033d2:	2002      	movs	r0, #2
 80033d4:	e7f2      	b.n	80033bc <HAL_I2C_Mem_Read+0x54>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033d6:	2322      	movs	r3, #34	@ 0x22
 80033d8:	464a      	mov	r2, r9
 80033da:	54a3      	strb	r3, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033dc:	2240      	movs	r2, #64	@ 0x40
 80033de:	3320      	adds	r3, #32
 80033e0:	54e2      	strb	r2, [r4, r3]
    hi2c->pBuffPtr  = pData;
 80033e2:	4653      	mov	r3, sl
 80033e4:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80033e6:	465b      	mov	r3, fp
  MODIFY_REG(hi2c->Instance->CR2, \
 80033e8:	6821      	ldr	r1, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ea:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->XferCount = Size;
 80033ec:	8563      	strh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80033ee:	684a      	ldr	r2, [r1, #4]
    hi2c->XferISR   = NULL;
 80033f0:	6360      	str	r0, [r4, #52]	@ 0x34
  MODIFY_REG(hi2c->Instance->CR2, \
 80033f2:	4856      	ldr	r0, [pc, #344]	@ (800354c <HAL_I2C_Mem_Read+0x1e4>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033f4:	b2fb      	uxtb	r3, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 80033f6:	4002      	ands	r2, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033f8:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80033fa:	4313      	orrs	r3, r2
 80033fc:	2280      	movs	r2, #128	@ 0x80
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033fe:	05ad      	lsls	r5, r5, #22
 8003400:	0dad      	lsrs	r5, r5, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8003402:	0192      	lsls	r2, r2, #6
 8003404:	432b      	orrs	r3, r5
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800340a:	4642      	mov	r2, r8
 800340c:	0020      	movs	r0, r4
 800340e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003410:	f7ff fb98 	bl	8002b44 <I2C_WaitOnTXISFlagUntilTimeout>
 8003414:	2800      	cmp	r0, #0
 8003416:	d15a      	bne.n	80034ce <HAL_I2C_Mem_Read+0x166>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003418:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800341a:	2f01      	cmp	r7, #1
 800341c:	d165      	bne.n	80034ea <HAL_I2C_Mem_Read+0x182>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800341e:	b2f6      	uxtb	r6, r6
 8003420:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003422:	4643      	mov	r3, r8
 8003424:	2200      	movs	r2, #0
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2140      	movs	r1, #64	@ 0x40
 800342a:	0020      	movs	r0, r4
 800342c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800342e:	f7ff fc79 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8003432:	2800      	cmp	r0, #0
 8003434:	d14b      	bne.n	80034ce <HAL_I2C_Mem_Read+0x166>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003436:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003438:	6822      	ldr	r2, [r4, #0]
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800343a:	2bff      	cmp	r3, #255	@ 0xff
 800343c:	d84b      	bhi.n	80034d6 <HAL_I2C_Mem_Read+0x16e>
      hi2c->XferSize = hi2c->XferCount;
 800343e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003440:	4842      	ldr	r0, [pc, #264]	@ (800354c <HAL_I2C_Mem_Read+0x1e4>)
      hi2c->XferSize = hi2c->XferCount;
 8003442:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003444:	6851      	ldr	r1, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8003446:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003448:	b2db      	uxtb	r3, r3
 800344a:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800344c:	4001      	ands	r1, r0
 800344e:	432b      	orrs	r3, r5
 8003450:	430b      	orrs	r3, r1
 8003452:	493f      	ldr	r1, [pc, #252]	@ (8003550 <HAL_I2C_Mem_Read+0x1e8>)
 8003454:	430b      	orrs	r3, r1
 8003456:	6053      	str	r3, [r2, #4]
}
 8003458:	e002      	b.n	8003460 <HAL_I2C_Mem_Read+0xf8>
    } while (hi2c->XferCount > 0U);
 800345a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800345c:	2b00      	cmp	r3, #0
 800345e:	d05e      	beq.n	800351e <HAL_I2C_Mem_Read+0x1b6>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003460:	4643      	mov	r3, r8
 8003462:	2200      	movs	r2, #0
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	2104      	movs	r1, #4
 8003468:	0020      	movs	r0, r4
 800346a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800346c:	f7ff fc5a 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 8003470:	2800      	cmp	r0, #0
 8003472:	d1a2      	bne.n	80033ba <HAL_I2C_Mem_Read+0x52>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003478:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800347a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800347c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 800347e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003480:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003482:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8003484:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8003486:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003488:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800348a:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800348c:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800348e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003490:	b29b      	uxth	r3, r3
 8003492:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003494:	2a00      	cmp	r2, #0
 8003496:	d0e0      	beq.n	800345a <HAL_I2C_Mem_Read+0xf2>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1de      	bne.n	800345a <HAL_I2C_Mem_Read+0xf2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800349c:	4643      	mov	r3, r8
 800349e:	2200      	movs	r2, #0
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	2180      	movs	r1, #128	@ 0x80
 80034a4:	0020      	movs	r0, r4
 80034a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80034a8:	f7ff fc3c 	bl	8002d24 <I2C_WaitOnFlagUntilTimeout>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d000      	beq.n	80034b2 <HAL_I2C_Mem_Read+0x14a>
 80034b0:	e783      	b.n	80033ba <HAL_I2C_Mem_Read+0x52>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80034b4:	6822      	ldr	r2, [r4, #0]
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034b6:	2bff      	cmp	r3, #255	@ 0xff
 80034b8:	d922      	bls.n	8003500 <HAL_I2C_Mem_Read+0x198>
          hi2c->XferSize = 1U;
 80034ba:	2301      	movs	r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80034bc:	4925      	ldr	r1, [pc, #148]	@ (8003554 <HAL_I2C_Mem_Read+0x1ec>)
          hi2c->XferSize = 1U;
 80034be:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80034c0:	6853      	ldr	r3, [r2, #4]
 80034c2:	400b      	ands	r3, r1
 80034c4:	4924      	ldr	r1, [pc, #144]	@ (8003558 <HAL_I2C_Mem_Read+0x1f0>)
 80034c6:	432b      	orrs	r3, r5
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6053      	str	r3, [r2, #4]
}
 80034cc:	e7c5      	b.n	800345a <HAL_I2C_Mem_Read+0xf2>
      __HAL_UNLOCK(hi2c);
 80034ce:	2340      	movs	r3, #64	@ 0x40
 80034d0:	2200      	movs	r2, #0
 80034d2:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 80034d4:	e771      	b.n	80033ba <HAL_I2C_Mem_Read+0x52>
      hi2c->XferSize = 1U;
 80034d6:	2301      	movs	r3, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80034d8:	491c      	ldr	r1, [pc, #112]	@ (800354c <HAL_I2C_Mem_Read+0x1e4>)
      hi2c->XferSize = 1U;
 80034da:	8523      	strh	r3, [r4, #40]	@ 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80034dc:	6853      	ldr	r3, [r2, #4]
 80034de:	400b      	ands	r3, r1
 80034e0:	491e      	ldr	r1, [pc, #120]	@ (800355c <HAL_I2C_Mem_Read+0x1f4>)
 80034e2:	432b      	orrs	r3, r5
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6053      	str	r3, [r2, #4]
}
 80034e8:	e7ba      	b.n	8003460 <HAL_I2C_Mem_Read+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ea:	0a32      	lsrs	r2, r6, #8
 80034ec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ee:	0020      	movs	r0, r4
 80034f0:	4642      	mov	r2, r8
 80034f2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80034f4:	f7ff fb26 	bl	8002b44 <I2C_WaitOnTXISFlagUntilTimeout>
 80034f8:	2800      	cmp	r0, #0
 80034fa:	d1e8      	bne.n	80034ce <HAL_I2C_Mem_Read+0x166>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034fc:	6823      	ldr	r3, [r4, #0]
 80034fe:	e78e      	b.n	800341e <HAL_I2C_Mem_Read+0xb6>
          hi2c->XferSize = hi2c->XferCount;
 8003500:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003502:	4814      	ldr	r0, [pc, #80]	@ (8003554 <HAL_I2C_Mem_Read+0x1ec>)
          hi2c->XferSize = hi2c->XferCount;
 8003504:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003506:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8003508:	8523      	strh	r3, [r4, #40]	@ 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800350a:	b2db      	uxtb	r3, r3
 800350c:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800350e:	4001      	ands	r1, r0
 8003510:	432b      	orrs	r3, r5
 8003512:	430b      	orrs	r3, r1
 8003514:	2180      	movs	r1, #128	@ 0x80
 8003516:	0489      	lsls	r1, r1, #18
 8003518:	430b      	orrs	r3, r1
 800351a:	6053      	str	r3, [r2, #4]
}
 800351c:	e79d      	b.n	800345a <HAL_I2C_Mem_Read+0xf2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800351e:	4642      	mov	r2, r8
 8003520:	0020      	movs	r0, r4
 8003522:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003524:	f7ff fcf6 	bl	8002f14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003528:	2800      	cmp	r0, #0
 800352a:	d000      	beq.n	800352e <HAL_I2C_Mem_Read+0x1c6>
 800352c:	e745      	b.n	80033ba <HAL_I2C_Mem_Read+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800352e:	2120      	movs	r1, #32
 8003530:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003532:	4d0b      	ldr	r5, [pc, #44]	@ (8003560 <HAL_I2C_Mem_Read+0x1f8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003534:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	402a      	ands	r2, r5
 800353a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800353c:	2341      	movs	r3, #65	@ 0x41
 800353e:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003540:	3301      	adds	r3, #1
 8003542:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8003544:	3b02      	subs	r3, #2
 8003546:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8003548:	e738      	b.n	80033bc <HAL_I2C_Mem_Read+0x54>
 800354a:	46c0      	nop			@ (mov r8, r8)
 800354c:	fc009800 	.word	0xfc009800
 8003550:	02002400 	.word	0x02002400
 8003554:	fc009c00 	.word	0xfc009c00
 8003558:	01010000 	.word	0x01010000
 800355c:	01012400 	.word	0x01012400
 8003560:	fe00e800 	.word	0xfe00e800

08003564 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003564:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003566:	2441      	movs	r4, #65	@ 0x41
 8003568:	5d03      	ldrb	r3, [r0, r4]
{
 800356a:	468c      	mov	ip, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800356c:	b2dd      	uxtb	r5, r3
 800356e:	2b20      	cmp	r3, #32
 8003570:	d11a      	bne.n	80035a8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003572:	2640      	movs	r6, #64	@ 0x40
 8003574:	5d83      	ldrb	r3, [r0, r6]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d016      	beq.n	80035a8 <HAL_I2CEx_ConfigAnalogFilter+0x44>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800357a:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800357c:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 800357e:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 8003580:	6803      	ldr	r3, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003582:	490a      	ldr	r1, [pc, #40]	@ (80035ac <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	43ba      	bics	r2, r7
 8003588:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	400a      	ands	r2, r1
 800358e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003590:	4662      	mov	r2, ip
 8003592:	6819      	ldr	r1, [r3, #0]
 8003594:	4311      	orrs	r1, r2
 8003596:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	433a      	orrs	r2, r7
 800359c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 80035a2:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 80035a4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80035a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80035a8:	2002      	movs	r0, #2
 80035aa:	e7fc      	b.n	80035a6 <HAL_I2CEx_ConfigAnalogFilter+0x42>
 80035ac:	ffffefff 	.word	0xffffefff

080035b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035b2:	46ce      	mov	lr, r9
 80035b4:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b6:	2441      	movs	r4, #65	@ 0x41
{
 80035b8:	b580      	push	{r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ba:	5d03      	ldrb	r3, [r0, r4]
 80035bc:	b2dd      	uxtb	r5, r3
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d11f      	bne.n	8003602 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c2:	2640      	movs	r6, #64	@ 0x40
 80035c4:	5d83      	ldrb	r3, [r0, r6]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d01b      	beq.n	8003602 <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ca:	2324      	movs	r3, #36	@ 0x24

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035cc:	2701      	movs	r7, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ce:	5503      	strb	r3, [r0, r4]
    __HAL_I2C_DISABLE(hi2c);
 80035d0:	6802      	ldr	r2, [r0, #0]
 80035d2:	46b9      	mov	r9, r7
 80035d4:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035d6:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 80035d8:	43bb      	bics	r3, r7
 80035da:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 80035dc:	6813      	ldr	r3, [r2, #0]
 80035de:	4698      	mov	r8, r3
    tmpreg &= ~(I2C_CR1_DNF);
 80035e0:	4647      	mov	r7, r8
 80035e2:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 80035e4:	401f      	ands	r7, r3
    tmpreg |= DigitalFilter << 8U;
 80035e6:	4339      	orrs	r1, r7

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035e8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ea:	4649      	mov	r1, r9
 80035ec:	6813      	ldr	r3, [r2, #0]
 80035ee:	430b      	orrs	r3, r1
 80035f0:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80035f4:	5505      	strb	r5, [r0, r4]
    __HAL_UNLOCK(hi2c);
 80035f6:	5583      	strb	r3, [r0, r6]

    return HAL_OK;
 80035f8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80035fa:	bcc0      	pop	{r6, r7}
 80035fc:	46b9      	mov	r9, r7
 80035fe:	46b0      	mov	r8, r6
 8003600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003602:	2002      	movs	r0, #2
 8003604:	e7f9      	b.n	80035fa <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	fffff0ff 	.word	0xfffff0ff

0800360c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	1e04      	subs	r4, r0, #0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003610:	d100      	bne.n	8003614 <HAL_PCD_Init+0x8>
 8003612:	e0f6      	b.n	8003802 <HAL_PCD_Init+0x1f6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003614:	4b7f      	ldr	r3, [pc, #508]	@ (8003814 <HAL_PCD_Init+0x208>)
 8003616:	5cc3      	ldrb	r3, [r0, r3]
 8003618:	b2da      	uxtb	r2, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d100      	bne.n	8003620 <HAL_PCD_Init+0x14>
 800361e:	e0e6      	b.n	80037ee <HAL_PCD_Init+0x1e2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003620:	2203      	movs	r2, #3
 8003622:	4b7c      	ldr	r3, [pc, #496]	@ (8003814 <HAL_PCD_Init+0x208>)
 8003624:	54e2      	strb	r2, [r4, r3]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	f001 ffec 	bl	8005604 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362c:	7922      	ldrb	r2, [r4, #4]
 800362e:	2a00      	cmp	r2, #0
 8003630:	d100      	bne.n	8003634 <HAL_PCD_Init+0x28>
 8003632:	e0cd      	b.n	80037d0 <HAL_PCD_Init+0x1c4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
    hpcd->IN_ep[i].num = i;
 8003634:	2180      	movs	r1, #128	@ 0x80
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003636:	2300      	movs	r3, #0
    hpcd->IN_ep[i].num = i;
 8003638:	0049      	lsls	r1, r1, #1
 800363a:	8221      	strh	r1, [r4, #16]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800363c:	74e3      	strb	r3, [r4, #19]
    hpcd->IN_ep[i].maxpacket = 0U;
 800363e:	6223      	str	r3, [r4, #32]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003640:	6263      	str	r3, [r4, #36]	@ 0x24
    hpcd->IN_ep[i].xfer_len = 0U;
 8003642:	62a3      	str	r3, [r4, #40]	@ 0x28
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003644:	2a01      	cmp	r2, #1
 8003646:	d100      	bne.n	800364a <HAL_PCD_Init+0x3e>
 8003648:	e0dd      	b.n	8003806 <HAL_PCD_Init+0x1fa>
    hpcd->IN_ep[i].num = i;
 800364a:	2002      	movs	r0, #2
 800364c:	30ff      	adds	r0, #255	@ 0xff
 800364e:	8720      	strh	r0, [r4, #56]	@ 0x38
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003650:	38c6      	subs	r0, #198	@ 0xc6
 8003652:	5423      	strb	r3, [r4, r0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003654:	64a3      	str	r3, [r4, #72]	@ 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003656:	64e3      	str	r3, [r4, #76]	@ 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 8003658:	6523      	str	r3, [r4, #80]	@ 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365a:	2a02      	cmp	r2, #2
 800365c:	d04c      	beq.n	80036f8 <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 800365e:	2581      	movs	r5, #129	@ 0x81
 8003660:	3025      	adds	r0, #37	@ 0x25
 8003662:	006d      	lsls	r5, r5, #1
 8003664:	5225      	strh	r5, [r4, r0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003666:	3003      	adds	r0, #3
 8003668:	5423      	strb	r3, [r4, r0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800366a:	6723      	str	r3, [r4, #112]	@ 0x70
    hpcd->IN_ep[i].xfer_buff = 0U;
 800366c:	6763      	str	r3, [r4, #116]	@ 0x74
    hpcd->IN_ep[i].xfer_len = 0U;
 800366e:	67a3      	str	r3, [r4, #120]	@ 0x78
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003670:	2a03      	cmp	r2, #3
 8003672:	d041      	beq.n	80036f8 <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 8003674:	2004      	movs	r0, #4
 8003676:	3d7a      	subs	r5, #122	@ 0x7a
 8003678:	30ff      	adds	r0, #255	@ 0xff
 800367a:	5360      	strh	r0, [r4, r5]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800367c:	3503      	adds	r5, #3
 800367e:	5563      	strb	r3, [r4, r5]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003680:	350d      	adds	r5, #13
 8003682:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003684:	3504      	adds	r5, #4
 8003686:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003688:	3504      	adds	r5, #4
 800368a:	5163      	str	r3, [r4, r5]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368c:	2a04      	cmp	r2, #4
 800368e:	d033      	beq.n	80036f8 <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 8003690:	2682      	movs	r6, #130	@ 0x82
 8003692:	3510      	adds	r5, #16
 8003694:	0076      	lsls	r6, r6, #1
 8003696:	5366      	strh	r6, [r4, r5]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003698:	3503      	adds	r5, #3
 800369a:	5563      	strb	r3, [r4, r5]
    hpcd->IN_ep[i].maxpacket = 0U;
 800369c:	350d      	adds	r5, #13
 800369e:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036a0:	3504      	adds	r5, #4
 80036a2:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036a4:	3504      	adds	r5, #4
 80036a6:	5163      	str	r3, [r4, r5]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a8:	2a05      	cmp	r2, #5
 80036aa:	d025      	beq.n	80036f8 <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 80036ac:	2606      	movs	r6, #6
 80036ae:	3510      	adds	r5, #16
 80036b0:	36ff      	adds	r6, #255	@ 0xff
 80036b2:	5366      	strh	r6, [r4, r5]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036b4:	3503      	adds	r5, #3
 80036b6:	5563      	strb	r3, [r4, r5]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036b8:	350d      	adds	r5, #13
 80036ba:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036bc:	3504      	adds	r5, #4
 80036be:	5163      	str	r3, [r4, r5]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036c0:	3504      	adds	r5, #4
 80036c2:	5163      	str	r3, [r4, r5]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036c4:	2a06      	cmp	r2, #6
 80036c6:	d017      	beq.n	80036f8 <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 80036c8:	3516      	adds	r5, #22
 80036ca:	5265      	strh	r5, [r4, r1]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036cc:	3110      	adds	r1, #16
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036ce:	5423      	strb	r3, [r4, r0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036d0:	5063      	str	r3, [r4, r1]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036d2:	3104      	adds	r1, #4
 80036d4:	5063      	str	r3, [r4, r1]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036d6:	3104      	adds	r1, #4
 80036d8:	5063      	str	r3, [r4, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036da:	2a07      	cmp	r2, #7
 80036dc:	d00c      	beq.n	80036f8 <HAL_PCD_Init+0xec>
    hpcd->IN_ep[i].num = i;
 80036de:	2008      	movs	r0, #8
 80036e0:	3110      	adds	r1, #16
 80036e2:	30ff      	adds	r0, #255	@ 0xff
 80036e4:	5260      	strh	r0, [r4, r1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036e6:	212c      	movs	r1, #44	@ 0x2c
 80036e8:	31ff      	adds	r1, #255	@ 0xff
 80036ea:	5463      	strb	r3, [r4, r1]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036ec:	310d      	adds	r1, #13
 80036ee:	5063      	str	r3, [r4, r1]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036f0:	3104      	adds	r1, #4
 80036f2:	5063      	str	r3, [r4, r1]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036f4:	3104      	adds	r1, #4
 80036f6:	5063      	str	r3, [r4, r1]
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
    hpcd->OUT_ep[i].num = i;
 80036f8:	20a8      	movs	r0, #168	@ 0xa8
 80036fa:	2300      	movs	r3, #0
 80036fc:	0040      	lsls	r0, r0, #1
 80036fe:	5223      	strh	r3, [r4, r0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003700:	2054      	movs	r0, #84	@ 0x54
    hpcd->OUT_ep[i].num = i;
 8003702:	2100      	movs	r1, #0
 8003704:	2501      	movs	r5, #1
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003706:	30ff      	adds	r0, #255	@ 0xff
 8003708:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800370a:	300d      	adds	r0, #13
 800370c:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800370e:	3004      	adds	r0, #4
 8003710:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003712:	3004      	adds	r0, #4
 8003714:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].num = i;
 8003716:	3010      	adds	r0, #16
 8003718:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800371a:	207c      	movs	r0, #124	@ 0x7c
 800371c:	30ff      	adds	r0, #255	@ 0xff
 800371e:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003720:	300d      	adds	r0, #13
 8003722:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003724:	3004      	adds	r0, #4
 8003726:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003728:	3004      	adds	r0, #4
 800372a:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800372c:	2a02      	cmp	r2, #2
 800372e:	d04f      	beq.n	80037d0 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 8003730:	3010      	adds	r0, #16
 8003732:	3501      	adds	r5, #1
 8003734:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003736:	20a4      	movs	r0, #164	@ 0xa4
 8003738:	30ff      	adds	r0, #255	@ 0xff
 800373a:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800373c:	300d      	adds	r0, #13
 800373e:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003740:	3004      	adds	r0, #4
 8003742:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003744:	3004      	adds	r0, #4
 8003746:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003748:	2a03      	cmp	r2, #3
 800374a:	d041      	beq.n	80037d0 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 800374c:	3010      	adds	r0, #16
 800374e:	3501      	adds	r5, #1
 8003750:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003752:	20cc      	movs	r0, #204	@ 0xcc
 8003754:	30ff      	adds	r0, #255	@ 0xff
 8003756:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003758:	300d      	adds	r0, #13
 800375a:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800375c:	3004      	adds	r0, #4
 800375e:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003760:	3004      	adds	r0, #4
 8003762:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003764:	2a04      	cmp	r2, #4
 8003766:	d033      	beq.n	80037d0 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 8003768:	3010      	adds	r0, #16
 800376a:	3501      	adds	r5, #1
 800376c:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800376e:	20f4      	movs	r0, #244	@ 0xf4
 8003770:	30ff      	adds	r0, #255	@ 0xff
 8003772:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003774:	300d      	adds	r0, #13
 8003776:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003778:	3004      	adds	r0, #4
 800377a:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800377c:	3004      	adds	r0, #4
 800377e:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003780:	2a05      	cmp	r2, #5
 8003782:	d025      	beq.n	80037d0 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 8003784:	3010      	adds	r0, #16
 8003786:	3501      	adds	r5, #1
 8003788:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800378a:	4823      	ldr	r0, [pc, #140]	@ (8003818 <HAL_PCD_Init+0x20c>)
 800378c:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800378e:	300d      	adds	r0, #13
 8003790:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003792:	3004      	adds	r0, #4
 8003794:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003796:	3004      	adds	r0, #4
 8003798:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800379a:	2a06      	cmp	r2, #6
 800379c:	d018      	beq.n	80037d0 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 800379e:	3010      	adds	r0, #16
 80037a0:	3501      	adds	r5, #1
 80037a2:	5225      	strh	r5, [r4, r0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037a4:	481d      	ldr	r0, [pc, #116]	@ (800381c <HAL_PCD_Init+0x210>)
 80037a6:	5421      	strb	r1, [r4, r0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037a8:	300d      	adds	r0, #13
 80037aa:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037ac:	3004      	adds	r0, #4
 80037ae:	5023      	str	r3, [r4, r0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037b0:	3004      	adds	r0, #4
 80037b2:	5023      	str	r3, [r4, r0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b4:	2a07      	cmp	r2, #7
 80037b6:	d00b      	beq.n	80037d0 <HAL_PCD_Init+0x1c4>
    hpcd->OUT_ep[i].num = i;
 80037b8:	229a      	movs	r2, #154	@ 0x9a
 80037ba:	2007      	movs	r0, #7
 80037bc:	0092      	lsls	r2, r2, #2
 80037be:	52a0      	strh	r0, [r4, r2]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037c0:	4a17      	ldr	r2, [pc, #92]	@ (8003820 <HAL_PCD_Init+0x214>)
 80037c2:	54a1      	strb	r1, [r4, r2]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037c4:	320d      	adds	r2, #13
 80037c6:	50a3      	str	r3, [r4, r2]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037c8:	3204      	adds	r2, #4
 80037ca:	50a3      	str	r3, [r4, r2]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037cc:	3204      	adds	r2, #4
 80037ce:	50a3      	str	r3, [r4, r2]
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80037d0:	68a2      	ldr	r2, [r4, #8]
 80037d2:	6820      	ldr	r0, [r4, #0]
 80037d4:	6861      	ldr	r1, [r4, #4]
 80037d6:	f001 ff1f 	bl	8005618 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80037da:	2300      	movs	r3, #0
  hpcd->State = HAL_PCD_STATE_READY;
 80037dc:	2201      	movs	r2, #1
  hpcd->USB_Address = 0U;
 80037de:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80037e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <HAL_PCD_Init+0x208>)
 80037e2:	54e2      	strb	r2, [r4, r3]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80037e4:	7aa3      	ldrb	r3, [r4, #10]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d007      	beq.n	80037fa <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 80037ea:	2000      	movs	r0, #0
}
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80037ee:	23a4      	movs	r3, #164	@ 0xa4
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	54c2      	strb	r2, [r0, r3]
    HAL_PCD_MspInit(hpcd);
 80037f4:	f003 fc3a 	bl	800706c <HAL_PCD_MspInit>
 80037f8:	e712      	b.n	8003620 <HAL_PCD_Init+0x14>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80037fa:	0020      	movs	r0, r4
 80037fc:	f000 ff14 	bl	8004628 <HAL_PCDEx_ActivateLPM>
 8003800:	e7f3      	b.n	80037ea <HAL_PCD_Init+0x1de>
    return HAL_ERROR;
 8003802:	2001      	movs	r0, #1
 8003804:	e7f2      	b.n	80037ec <HAL_PCD_Init+0x1e0>
    hpcd->OUT_ep[i].num = i;
 8003806:	22a8      	movs	r2, #168	@ 0xa8
 8003808:	0052      	lsls	r2, r2, #1
 800380a:	52a3      	strh	r3, [r4, r2]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800380c:	2254      	movs	r2, #84	@ 0x54
 800380e:	2100      	movs	r1, #0
 8003810:	32ff      	adds	r2, #255	@ 0xff
 8003812:	e7d6      	b.n	80037c2 <HAL_PCD_Init+0x1b6>
 8003814:	00000291 	.word	0x00000291
 8003818:	0000021b 	.word	0x0000021b
 800381c:	00000243 	.word	0x00000243
 8003820:	0000026b 	.word	0x0000026b

08003824 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003824:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8003826:	25a4      	movs	r5, #164	@ 0xa4
 8003828:	00ad      	lsls	r5, r5, #2
 800382a:	5d43      	ldrb	r3, [r0, r5]
{
 800382c:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800382e:	2b01      	cmp	r3, #1
 8003830:	d00b      	beq.n	800384a <HAL_PCD_Start+0x26>
 8003832:	2301      	movs	r3, #1
 8003834:	5543      	strb	r3, [r0, r5]
  __HAL_PCD_ENABLE(hpcd);
 8003836:	6800      	ldr	r0, [r0, #0]
 8003838:	f001 feda 	bl	80055f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800383c:	6820      	ldr	r0, [r4, #0]
 800383e:	f002 fc41 	bl	80060c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003842:	2300      	movs	r3, #0

  return HAL_OK;
 8003844:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 8003846:	5563      	strb	r3, [r4, r5]
}
 8003848:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800384a:	2002      	movs	r0, #2
 800384c:	e7fc      	b.n	8003848 <HAL_PCD_Start+0x24>
 800384e:	46c0      	nop			@ (mov r8, r8)

08003850 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	46de      	mov	lr, fp
 8003854:	464e      	mov	r6, r9
 8003856:	4657      	mov	r7, sl
 8003858:	4645      	mov	r5, r8
 800385a:	b5e0      	push	{r5, r6, r7, lr}
 800385c:	0004      	movs	r4, r0
 800385e:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003860:	6800      	ldr	r0, [r0, #0]
 8003862:	f002 fc37 	bl	80060d4 <USB_ReadInterrupts>

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	0006      	movs	r6, r0
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	401e      	ands	r6, r3
 800386e:	4218      	tst	r0, r3
 8003870:	d12f      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x82>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003872:	0543      	lsls	r3, r0, #21
 8003874:	d500      	bpl.n	8003878 <HAL_PCD_IRQHandler+0x28>
 8003876:	e17c      	b.n	8003b72 <HAL_PCD_IRQHandler+0x322>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003878:	0443      	lsls	r3, r0, #17
 800387a:	d41d      	bmi.n	80038b8 <HAL_PCD_IRQHandler+0x68>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	0005      	movs	r5, r0
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	401d      	ands	r5, r3
 8003884:	4218      	tst	r0, r3
 8003886:	d000      	beq.n	800388a <HAL_PCD_IRQHandler+0x3a>
 8003888:	e1f1      	b.n	8003c6e <HAL_PCD_IRQHandler+0x41e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800388a:	04c3      	lsls	r3, r0, #19
 800388c:	d500      	bpl.n	8003890 <HAL_PCD_IRQHandler+0x40>
 800388e:	e08c      	b.n	80039aa <HAL_PCD_IRQHandler+0x15a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003890:	0503      	lsls	r3, r0, #20
 8003892:	d500      	bpl.n	8003896 <HAL_PCD_IRQHandler+0x46>
 8003894:	e31e      	b.n	8003ed4 <HAL_PCD_IRQHandler+0x684>

    return;
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003896:	2380      	movs	r3, #128	@ 0x80
 8003898:	4203      	tst	r3, r0
 800389a:	d000      	beq.n	800389e <HAL_PCD_IRQHandler+0x4e>
 800389c:	e2f8      	b.n	8003e90 <HAL_PCD_IRQHandler+0x640>
    }

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800389e:	0583      	lsls	r3, r0, #22
 80038a0:	d501      	bpl.n	80038a6 <HAL_PCD_IRQHandler+0x56>
 80038a2:	f000 fc0c 	bl	80040be <HAL_PCD_IRQHandler+0x86e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80038a6:	05c0      	lsls	r0, r0, #23
 80038a8:	d50c      	bpl.n	80038c4 <HAL_PCD_IRQHandler+0x74>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80038aa:	2244      	movs	r2, #68	@ 0x44
 80038ac:	6821      	ldr	r1, [r4, #0]
 80038ae:	48bd      	ldr	r0, [pc, #756]	@ (8003ba4 <HAL_PCD_IRQHandler+0x354>)
 80038b0:	5a8b      	ldrh	r3, [r1, r2]
 80038b2:	4003      	ands	r3, r0
 80038b4:	528b      	strh	r3, [r1, r2]

    return;
 80038b6:	e005      	b.n	80038c4 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80038b8:	2244      	movs	r2, #68	@ 0x44
 80038ba:	6821      	ldr	r1, [r4, #0]
 80038bc:	48ba      	ldr	r0, [pc, #744]	@ (8003ba8 <HAL_PCD_IRQHandler+0x358>)
 80038be:	5a8b      	ldrh	r3, [r1, r2]
 80038c0:	4003      	ands	r3, r0
 80038c2:	528b      	strh	r3, [r1, r2]
  }
}
 80038c4:	b005      	add	sp, #20
 80038c6:	bcf0      	pop	{r4, r5, r6, r7}
 80038c8:	46bb      	mov	fp, r7
 80038ca:	46b2      	mov	sl, r6
 80038cc:	46a9      	mov	r9, r5
 80038ce:	46a0      	mov	r8, r4
 80038d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038d2:	2344      	movs	r3, #68	@ 0x44
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	5ac3      	ldrh	r3, [r0, r3]
 80038d8:	b21b      	sxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	daf2      	bge.n	80038c4 <HAL_PCD_IRQHandler+0x74>
  {
    wIstr = hpcd->Instance->ISTR;
 80038de:	2344      	movs	r3, #68	@ 0x44
 80038e0:	469b      	mov	fp, r3

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80038e2:	3b35      	subs	r3, #53	@ 0x35
 80038e4:	469a      	mov	sl, r3
 80038e6:	e010      	b.n	800390a <HAL_PCD_IRQHandler+0xba>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038e8:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80038ea:	06d2      	lsls	r2, r2, #27
 80038ec:	d400      	bmi.n	80038f0 <HAL_PCD_IRQHandler+0xa0>
 80038ee:	e0c1      	b.n	8003a74 <HAL_PCD_IRQHandler+0x224>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80038f0:	b29a      	uxth	r2, r3

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80038f2:	051b      	lsls	r3, r3, #20
 80038f4:	d500      	bpl.n	80038f8 <HAL_PCD_IRQHandler+0xa8>
 80038f6:	e0e7      	b.n	8003ac8 <HAL_PCD_IRQHandler+0x278>
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80038f8:	b212      	sxth	r2, r2
 80038fa:	2a00      	cmp	r2, #0
 80038fc:	da00      	bge.n	8003900 <HAL_PCD_IRQHandler+0xb0>
 80038fe:	e167      	b.n	8003bd0 <HAL_PCD_IRQHandler+0x380>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003900:	465b      	mov	r3, fp
 8003902:	5ac3      	ldrh	r3, [r0, r3]
 8003904:	b21b      	sxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	dadc      	bge.n	80038c4 <HAL_PCD_IRQHandler+0x74>
    wIstr = hpcd->Instance->ISTR;
 800390a:	465b      	mov	r3, fp
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800390c:	4655      	mov	r5, sl
    if (epindex == 0U)
 800390e:	4651      	mov	r1, sl
    wIstr = hpcd->Instance->ISTR;
 8003910:	5ac3      	ldrh	r3, [r0, r3]
 8003912:	b29a      	uxth	r2, r3
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003914:	401d      	ands	r5, r3
    if (epindex == 0U)
 8003916:	4219      	tst	r1, r3
 8003918:	d0e6      	beq.n	80038e8 <HAL_PCD_IRQHandler+0x98>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800391a:	00ae      	lsls	r6, r5, #2
 800391c:	1982      	adds	r2, r0, r6
 800391e:	8813      	ldrh	r3, [r2, #0]
 8003920:	9600      	str	r6, [sp, #0]
 8003922:	b29f      	uxth	r7, r3

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003924:	b21b      	sxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	db59      	blt.n	80039de <HAL_PCD_IRQHandler+0x18e>
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800392a:	2380      	movs	r3, #128	@ 0x80
 800392c:	423b      	tst	r3, r7
 800392e:	d0e7      	beq.n	8003900 <HAL_PCD_IRQHandler+0xb0>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003930:	9e00      	ldr	r6, [sp, #0]
 8003932:	499e      	ldr	r1, [pc, #632]	@ (8003bac <HAL_PCD_IRQHandler+0x35c>)
 8003934:	1982      	adds	r2, r0, r6
 8003936:	8813      	ldrh	r3, [r2, #0]
 8003938:	400b      	ands	r3, r1
 800393a:	499d      	ldr	r1, [pc, #628]	@ (8003bb0 <HAL_PCD_IRQHandler+0x360>)
 800393c:	430b      	orrs	r3, r1
 800393e:	468c      	mov	ip, r1

        if (ep->type == EP_TYPE_ISOC)
 8003940:	1971      	adds	r1, r6, r5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003942:	b29b      	uxth	r3, r3
        if (ep->type == EP_TYPE_ISOC)
 8003944:	00c9      	lsls	r1, r1, #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003946:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 8003948:	1862      	adds	r2, r4, r1
 800394a:	7cd3      	ldrb	r3, [r2, #19]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d100      	bne.n	8003952 <HAL_PCD_IRQHandler+0x102>
 8003950:	e194      	b.n	8003c7c <HAL_PCD_IRQHandler+0x42c>
          if ((wEPVal & USB_EP_KIND) == 0U)
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);

            if (ep->xfer_len > TxPctSize)
 8003952:	6a96      	ldr	r6, [r2, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003954:	7c13      	ldrb	r3, [r2, #16]
            if (ep->xfer_len > TxPctSize)
 8003956:	9601      	str	r6, [sp, #4]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003958:	2680      	movs	r6, #128	@ 0x80
 800395a:	0076      	lsls	r6, r6, #1
 800395c:	46b0      	mov	r8, r6
 800395e:	403e      	ands	r6, r7
 8003960:	9603      	str	r6, [sp, #12]
 8003962:	4646      	mov	r6, r8
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003964:	4699      	mov	r9, r3
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	9302      	str	r3, [sp, #8]
          if ((wEPVal & USB_EP_KIND) == 0U)
 800396a:	4237      	tst	r7, r6
 800396c:	d000      	beq.n	8003970 <HAL_PCD_IRQHandler+0x120>
 800396e:	e1bd      	b.n	8003cec <HAL_PCD_IRQHandler+0x49c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003970:	2550      	movs	r5, #80	@ 0x50
 8003972:	469c      	mov	ip, r3
 8003974:	5b45      	ldrh	r5, [r0, r5]
 8003976:	4e8f      	ldr	r6, [pc, #572]	@ (8003bb4 <HAL_PCD_IRQHandler+0x364>)
 8003978:	4465      	add	r5, ip
 800397a:	46b4      	mov	ip, r6
 800397c:	182d      	adds	r5, r5, r0
 800397e:	4465      	add	r5, ip
 8003980:	882d      	ldrh	r5, [r5, #0]
            if (ep->xfer_len > TxPctSize)
 8003982:	9b01      	ldr	r3, [sp, #4]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003984:	05ad      	lsls	r5, r5, #22
            if (ep->xfer_len > TxPctSize)
 8003986:	0dad      	lsrs	r5, r5, #22
 8003988:	429d      	cmp	r5, r3
 800398a:	d300      	bcc.n	800398e <HAL_PCD_IRQHandler+0x13e>
 800398c:	e1a6      	b.n	8003cdc <HAL_PCD_IRQHandler+0x48c>
            {
              ep->xfer_len -= TxPctSize;
 800398e:	1b5b      	subs	r3, r3, r5
 8003990:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003992:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8003994:	3110      	adds	r1, #16
              ep->xfer_buff += TxPctSize;
 8003996:	195b      	adds	r3, r3, r5
 8003998:	6253      	str	r3, [r2, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 800399a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 800399c:	1861      	adds	r1, r4, r1
              ep->xfer_count += TxPctSize;
 800399e:	195b      	adds	r3, r3, r5
 80039a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039a2:	f002 f82b 	bl	80059fc <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039a6:	6820      	ldr	r0, [r4, #0]
 80039a8:	e7aa      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80039aa:	2340      	movs	r3, #64	@ 0x40
 80039ac:	2004      	movs	r0, #4
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	5ad1      	ldrh	r1, [r2, r3]
 80039b2:	4381      	bics	r1, r0
 80039b4:	52d1      	strh	r1, [r2, r3]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80039b6:	5ad1      	ldrh	r1, [r2, r3]
 80039b8:	3004      	adds	r0, #4
 80039ba:	4381      	bics	r1, r0
 80039bc:	52d1      	strh	r1, [r2, r3]
    if (hpcd->LPM_State == LPM_L1)
 80039be:	23b2      	movs	r3, #178	@ 0xb2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	5ce2      	ldrb	r2, [r4, r3]
 80039c4:	2a01      	cmp	r2, #1
 80039c6:	d100      	bne.n	80039ca <HAL_PCD_IRQHandler+0x17a>
 80039c8:	e384      	b.n	80040d4 <HAL_PCD_IRQHandler+0x884>
    HAL_PCD_ResumeCallback(hpcd);
 80039ca:	0020      	movs	r0, r4
 80039cc:	f003 fbbe 	bl	800714c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039d0:	2244      	movs	r2, #68	@ 0x44
 80039d2:	6821      	ldr	r1, [r4, #0]
 80039d4:	4878      	ldr	r0, [pc, #480]	@ (8003bb8 <HAL_PCD_IRQHandler+0x368>)
 80039d6:	5a8b      	ldrh	r3, [r1, r2]
 80039d8:	4003      	ands	r3, r0
 80039da:	528b      	strh	r3, [r1, r2]
    return;
 80039dc:	e772      	b.n	80038c4 <HAL_PCD_IRQHandler+0x74>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80039de:	8813      	ldrh	r3, [r2, #0]
 80039e0:	4976      	ldr	r1, [pc, #472]	@ (8003bbc <HAL_PCD_IRQHandler+0x36c>)
 80039e2:	400b      	ands	r3, r1
 80039e4:	2180      	movs	r1, #128	@ 0x80
 80039e6:	430b      	orrs	r3, r1
 80039e8:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 80039ea:	1973      	adds	r3, r6, r5
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	18e3      	adds	r3, r4, r3
 80039f0:	001a      	movs	r2, r3
 80039f2:	325d      	adds	r2, #93	@ 0x5d
 80039f4:	32ff      	adds	r2, #255	@ 0xff
 80039f6:	7812      	ldrb	r2, [r2, #0]
 80039f8:	2a00      	cmp	r2, #0
 80039fa:	d000      	beq.n	80039fe <HAL_PCD_IRQHandler+0x1ae>
 80039fc:	e088      	b.n	8003b10 <HAL_PCD_IRQHandler+0x2c0>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039fe:	3250      	adds	r2, #80	@ 0x50
 8003a00:	5a81      	ldrh	r1, [r0, r2]
 8003a02:	001a      	movs	r2, r3
 8003a04:	3251      	adds	r2, #81	@ 0x51
 8003a06:	32ff      	adds	r2, #255	@ 0xff
 8003a08:	7812      	ldrb	r2, [r2, #0]
 8003a0a:	00d2      	lsls	r2, r2, #3
 8003a0c:	1852      	adds	r2, r2, r1
 8003a0e:	496c      	ldr	r1, [pc, #432]	@ (8003bc0 <HAL_PCD_IRQHandler+0x370>)
 8003a10:	1812      	adds	r2, r2, r0
 8003a12:	468c      	mov	ip, r1
 8003a14:	4462      	add	r2, ip
 8003a16:	8812      	ldrh	r2, [r2, #0]
 8003a18:	0592      	lsls	r2, r2, #22
 8003a1a:	0d91      	lsrs	r1, r2, #22
 8003a1c:	4688      	mov	r8, r1
          if (count != 0U)
 8003a1e:	2a00      	cmp	r2, #0
 8003a20:	d000      	beq.n	8003a24 <HAL_PCD_IRQHandler+0x1d4>
 8003a22:	e1e7      	b.n	8003df4 <HAL_PCD_IRQHandler+0x5a4>
{
 8003a24:	2300      	movs	r3, #0
 8003a26:	4698      	mov	r8, r3
        ep->xfer_count += count;
 8003a28:	9b00      	ldr	r3, [sp, #0]
 8003a2a:	1959      	adds	r1, r3, r5
 8003a2c:	00c9      	lsls	r1, r1, #3
 8003a2e:	1863      	adds	r3, r4, r1
 8003a30:	0018      	movs	r0, r3
 8003a32:	306d      	adds	r0, #109	@ 0x6d
 8003a34:	30ff      	adds	r0, #255	@ 0xff
 8003a36:	6802      	ldr	r2, [r0, #0]
        ep->xfer_buff += count;
 8003a38:	3808      	subs	r0, #8
        ep->xfer_count += count;
 8003a3a:	4442      	add	r2, r8
 8003a3c:	6082      	str	r2, [r0, #8]
        ep->xfer_buff += count;
 8003a3e:	6802      	ldr	r2, [r0, #0]
 8003a40:	4442      	add	r2, r8
 8003a42:	6002      	str	r2, [r0, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a44:	001a      	movs	r2, r3
 8003a46:	3269      	adds	r2, #105	@ 0x69
 8003a48:	32ff      	adds	r2, #255	@ 0xff
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	2a00      	cmp	r2, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_PCD_IRQHandler+0x20c>
 8003a50:	3361      	adds	r3, #97	@ 0x61
 8003a52:	33ff      	adds	r3, #255	@ 0xff
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4543      	cmp	r3, r8
 8003a58:	d800      	bhi.n	8003a5c <HAL_PCD_IRQHandler+0x20c>
 8003a5a:	e1b1      	b.n	8003dc0 <HAL_PCD_IRQHandler+0x570>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a5c:	9b00      	ldr	r3, [sp, #0]
 8003a5e:	0020      	movs	r0, r4
 8003a60:	195b      	adds	r3, r3, r5
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	18e3      	adds	r3, r4, r3
 8003a66:	3351      	adds	r3, #81	@ 0x51
 8003a68:	33ff      	adds	r3, #255	@ 0xff
 8003a6a:	7819      	ldrb	r1, [r3, #0]
 8003a6c:	f003 fb28 	bl	80070c0 <HAL_PCD_DataOutStageCallback>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a70:	6820      	ldr	r0, [r4, #0]
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a72:	e75a      	b.n	800392a <HAL_PCD_IRQHandler+0xda>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a74:	4a4d      	ldr	r2, [pc, #308]	@ (8003bac <HAL_PCD_IRQHandler+0x35c>)
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a76:	2100      	movs	r1, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2280      	movs	r2, #128	@ 0x80
 8003a7c:	0212      	lsls	r2, r2, #8
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a82:	2350      	movs	r3, #80	@ 0x50
 8003a84:	5ac2      	ldrh	r2, [r0, r3]
 8003a86:	7c23      	ldrb	r3, [r4, #16]
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	18c3      	adds	r3, r0, r3
 8003a8c:	189b      	adds	r3, r3, r2
 8003a8e:	4a49      	ldr	r2, [pc, #292]	@ (8003bb4 <HAL_PCD_IRQHandler+0x364>)
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003a90:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a92:	4694      	mov	ip, r2
 8003a94:	4463      	add	r3, ip
 8003a96:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8003a98:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003a9a:	059b      	lsls	r3, r3, #22
 8003a9c:	0d9b      	lsrs	r3, r3, #22
 8003a9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8003aa0:	18d3      	adds	r3, r2, r3
 8003aa2:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003aa4:	f003 fb1a 	bl	80070dc <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003aa8:	7b23      	ldrb	r3, [r4, #12]
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003aaa:	6820      	ldr	r0, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d100      	bne.n	8003ab2 <HAL_PCD_IRQHandler+0x262>
 8003ab0:	e726      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
 8003ab2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d000      	beq.n	8003aba <HAL_PCD_IRQHandler+0x26a>
 8003ab8:	e722      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003aba:	2180      	movs	r1, #128	@ 0x80
 8003abc:	7b22      	ldrb	r2, [r4, #12]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	3934      	subs	r1, #52	@ 0x34
 8003ac2:	5242      	strh	r2, [r0, r1]
          hpcd->USB_Address = 0U;
 8003ac4:	7323      	strb	r3, [r4, #12]
 8003ac6:	e71b      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ac8:	2350      	movs	r3, #80	@ 0x50
 8003aca:	5ac2      	ldrh	r2, [r0, r3]
 8003acc:	3301      	adds	r3, #1
 8003ace:	33ff      	adds	r3, #255	@ 0xff
 8003ad0:	5ce3      	ldrb	r3, [r4, r3]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ad2:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	18c3      	adds	r3, r0, r3
 8003ad8:	189b      	adds	r3, r3, r2
 8003ada:	4a39      	ldr	r2, [pc, #228]	@ (8003bc0 <HAL_PCD_IRQHandler+0x370>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003adc:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ade:	4694      	mov	ip, r2
 8003ae0:	0022      	movs	r2, r4
 8003ae2:	4463      	add	r3, ip
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	3251      	adds	r2, #81	@ 0x51
 8003ae8:	059b      	lsls	r3, r3, #22
 8003aea:	0d9b      	lsrs	r3, r3, #22
 8003aec:	32ff      	adds	r2, #255	@ 0xff
 8003aee:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003af0:	1861      	adds	r1, r4, r1
 8003af2:	88d2      	ldrh	r2, [r2, #6]
 8003af4:	f002 fb0a 	bl	800610c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	4930      	ldr	r1, [pc, #192]	@ (8003bbc <HAL_PCD_IRQHandler+0x36c>)
 8003afc:	8813      	ldrh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003afe:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b00:	400b      	ands	r3, r1
 8003b02:	2180      	movs	r1, #128	@ 0x80
 8003b04:	430b      	orrs	r3, r1
 8003b06:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8003b08:	f003 fad0 	bl	80070ac <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b0c:	6820      	ldr	r0, [r4, #0]
 8003b0e:	e6f7      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
          if (ep->type == EP_TYPE_BULK)
 8003b10:	2654      	movs	r6, #84	@ 0x54
 8003b12:	36ff      	adds	r6, #255	@ 0xff
 8003b14:	46b4      	mov	ip, r6
 8003b16:	449c      	add	ip, r3
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b18:	0019      	movs	r1, r3
          if (ep->type == EP_TYPE_BULK)
 8003b1a:	4666      	mov	r6, ip
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b1c:	3151      	adds	r1, #81	@ 0x51
          if (ep->type == EP_TYPE_BULK)
 8003b1e:	7836      	ldrb	r6, [r6, #0]
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b20:	31ff      	adds	r1, #255	@ 0xff

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b22:	780a      	ldrb	r2, [r1, #0]
          if (ep->type == EP_TYPE_BULK)
 8003b24:	2e02      	cmp	r6, #2
 8003b26:	d100      	bne.n	8003b2a <HAL_PCD_IRQHandler+0x2da>
 8003b28:	e1fe      	b.n	8003f28 <HAL_PCD_IRQHandler+0x6d8>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003b2a:	0092      	lsls	r2, r2, #2
 8003b2c:	4694      	mov	ip, r2
 8003b2e:	4484      	add	ip, r0
 8003b30:	4662      	mov	r2, ip
 8003b32:	4e24      	ldr	r6, [pc, #144]	@ (8003bc4 <HAL_PCD_IRQHandler+0x374>)
 8003b34:	8812      	ldrh	r2, [r2, #0]
 8003b36:	4032      	ands	r2, r6
 8003b38:	4e23      	ldr	r6, [pc, #140]	@ (8003bc8 <HAL_PCD_IRQHandler+0x378>)
 8003b3a:	4332      	orrs	r2, r6
 8003b3c:	4666      	mov	r6, ip
 8003b3e:	8032      	strh	r2, [r6, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003b40:	780a      	ldrb	r2, [r1, #0]
 8003b42:	0091      	lsls	r1, r2, #2
 8003b44:	1841      	adds	r1, r0, r1
 8003b46:	8809      	ldrh	r1, [r1, #0]
 8003b48:	0449      	lsls	r1, r1, #17
 8003b4a:	d400      	bmi.n	8003b4e <HAL_PCD_IRQHandler+0x2fe>
 8003b4c:	e140      	b.n	8003dd0 <HAL_PCD_IRQHandler+0x580>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b4e:	2150      	movs	r1, #80	@ 0x50
 8003b50:	5a41      	ldrh	r1, [r0, r1]
 8003b52:	00d2      	lsls	r2, r2, #3
 8003b54:	1852      	adds	r2, r2, r1
 8003b56:	4917      	ldr	r1, [pc, #92]	@ (8003bb4 <HAL_PCD_IRQHandler+0x364>)
 8003b58:	1812      	adds	r2, r2, r0
 8003b5a:	468c      	mov	ip, r1
 8003b5c:	4462      	add	r2, ip
 8003b5e:	8812      	ldrh	r2, [r2, #0]
 8003b60:	0592      	lsls	r2, r2, #22
 8003b62:	0d91      	lsrs	r1, r2, #22
 8003b64:	4688      	mov	r8, r1
              if (count != 0U)
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	d100      	bne.n	8003b6c <HAL_PCD_IRQHandler+0x31c>
 8003b6a:	e75b      	b.n	8003a24 <HAL_PCD_IRQHandler+0x1d4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	3259      	adds	r2, #89	@ 0x59
 8003b70:	e142      	b.n	8003df8 <HAL_PCD_IRQHandler+0x5a8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b72:	2244      	movs	r2, #68	@ 0x44
  __HAL_LOCK(hpcd);
 8003b74:	25a4      	movs	r5, #164	@ 0xa4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b76:	6821      	ldr	r1, [r4, #0]
 8003b78:	4814      	ldr	r0, [pc, #80]	@ (8003bcc <HAL_PCD_IRQHandler+0x37c>)
 8003b7a:	5a8b      	ldrh	r3, [r1, r2]
  __HAL_LOCK(hpcd);
 8003b7c:	00ad      	lsls	r5, r5, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003b7e:	4003      	ands	r3, r0
 8003b80:	528b      	strh	r3, [r1, r2]
    HAL_PCD_ResetCallback(hpcd);
 8003b82:	0020      	movs	r0, r4
 8003b84:	f003 fabe 	bl	8007104 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8003b88:	5d63      	ldrb	r3, [r4, r5]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d100      	bne.n	8003b90 <HAL_PCD_IRQHandler+0x340>
 8003b8e:	e699      	b.n	80038c4 <HAL_PCD_IRQHandler+0x74>
 8003b90:	2301      	movs	r3, #1
 8003b92:	5563      	strb	r3, [r4, r5]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b94:	2100      	movs	r1, #0
 8003b96:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 8003b98:	7326      	strb	r6, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b9a:	f002 fa8b 	bl	80060b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b9e:	5566      	strb	r6, [r4, r5]
  return HAL_OK;
 8003ba0:	e690      	b.n	80038c4 <HAL_PCD_IRQHandler+0x74>
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	fffffeff 	.word	0xfffffeff
 8003ba8:	ffffbfff 	.word	0xffffbfff
 8003bac:	ffff8f0f 	.word	0xffff8f0f
 8003bb0:	ffff8000 	.word	0xffff8000
 8003bb4:	00000402 	.word	0x00000402
 8003bb8:	ffffefff 	.word	0xffffefff
 8003bbc:	00000f8f 	.word	0x00000f8f
 8003bc0:	00000406 	.word	0x00000406
 8003bc4:	ffff8f8f 	.word	0xffff8f8f
 8003bc8:	000080c0 	.word	0x000080c0
 8003bcc:	fffffbff 	.word	0xfffffbff
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bd0:	8803      	ldrh	r3, [r0, #0]
 8003bd2:	4aca      	ldr	r2, [pc, #808]	@ (8003efc <HAL_PCD_IRQHandler+0x6ac>)
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bd4:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2280      	movs	r2, #128	@ 0x80
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003bde:	2350      	movs	r3, #80	@ 0x50
 8003be0:	5ac2      	ldrh	r2, [r0, r3]
 8003be2:	3301      	adds	r3, #1
 8003be4:	33ff      	adds	r3, #255	@ 0xff
 8003be6:	5ce3      	ldrb	r3, [r4, r3]
 8003be8:	3551      	adds	r5, #81	@ 0x51
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	18c3      	adds	r3, r0, r3
 8003bee:	189b      	adds	r3, r3, r2
 8003bf0:	4ac3      	ldr	r2, [pc, #780]	@ (8003f00 <HAL_PCD_IRQHandler+0x6b0>)
 8003bf2:	35ff      	adds	r5, #255	@ 0xff
 8003bf4:	4694      	mov	ip, r2
 8003bf6:	4463      	add	r3, ip
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	059b      	lsls	r3, r3, #22
 8003bfc:	0d9b      	lsrs	r3, r3, #22
 8003bfe:	61eb      	str	r3, [r5, #28]
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c00:	d00e      	beq.n	8003c20 <HAL_PCD_IRQHandler+0x3d0>
 8003c02:	6969      	ldr	r1, [r5, #20]
 8003c04:	2900      	cmp	r1, #0
 8003c06:	d00b      	beq.n	8003c20 <HAL_PCD_IRQHandler+0x3d0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c08:	88ea      	ldrh	r2, [r5, #6]
 8003c0a:	f002 fa7f 	bl	800610c <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8003c0e:	696b      	ldr	r3, [r5, #20]
 8003c10:	69ea      	ldr	r2, [r5, #28]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c12:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8003c14:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c16:	2100      	movs	r1, #0
            ep->xfer_buff += ep->xfer_count;
 8003c18:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c1a:	f003 fa51 	bl	80070c0 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c1e:	6820      	ldr	r0, [r4, #0]
 8003c20:	8803      	ldrh	r3, [r0, #0]
 8003c22:	b29a      	uxth	r2, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003c24:	051b      	lsls	r3, r3, #20
 8003c26:	d500      	bpl.n	8003c2a <HAL_PCD_IRQHandler+0x3da>
 8003c28:	e66a      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
 8003c2a:	23c0      	movs	r3, #192	@ 0xc0
 8003c2c:	019b      	lsls	r3, r3, #6
 8003c2e:	401a      	ands	r2, r3
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d100      	bne.n	8003c36 <HAL_PCD_IRQHandler+0x3e6>
 8003c34:	e664      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c36:	2350      	movs	r3, #80	@ 0x50
 8003c38:	5ac2      	ldrh	r2, [r0, r3]
 8003c3a:	4bb1      	ldr	r3, [pc, #708]	@ (8003f00 <HAL_PCD_IRQHandler+0x6b0>)
 8003c3c:	18c3      	adds	r3, r0, r3
 8003c3e:	189b      	adds	r3, r3, r2
 8003c40:	881a      	ldrh	r2, [r3, #0]
 8003c42:	0592      	lsls	r2, r2, #22
 8003c44:	0d92      	lsrs	r2, r2, #22
 8003c46:	801a      	strh	r2, [r3, #0]
 8003c48:	692a      	ldr	r2, [r5, #16]
 8003c4a:	2a00      	cmp	r2, #0
 8003c4c:	d000      	beq.n	8003c50 <HAL_PCD_IRQHandler+0x400>
 8003c4e:	e1be      	b.n	8003fce <HAL_PCD_IRQHandler+0x77e>
 8003c50:	2180      	movs	r1, #128	@ 0x80
 8003c52:	881a      	ldrh	r2, [r3, #0]
 8003c54:	0209      	lsls	r1, r1, #8
 8003c56:	430a      	orrs	r2, r1
 8003c58:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003c5a:	8802      	ldrh	r2, [r0, #0]
 8003c5c:	4ba9      	ldr	r3, [pc, #676]	@ (8003f04 <HAL_PCD_IRQHandler+0x6b4>)
 8003c5e:	401a      	ands	r2, r3
 8003c60:	23c0      	movs	r3, #192	@ 0xc0
 8003c62:	019b      	lsls	r3, r3, #6
 8003c64:	4053      	eors	r3, r2
 8003c66:	4aa8      	ldr	r2, [pc, #672]	@ (8003f08 <HAL_PCD_IRQHandler+0x6b8>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	8003      	strh	r3, [r0, #0]
 8003c6c:	e648      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c6e:	2244      	movs	r2, #68	@ 0x44
 8003c70:	6821      	ldr	r1, [r4, #0]
 8003c72:	48a6      	ldr	r0, [pc, #664]	@ (8003f0c <HAL_PCD_IRQHandler+0x6bc>)
 8003c74:	5a8b      	ldrh	r3, [r1, r2]
 8003c76:	4003      	ands	r3, r0
 8003c78:	528b      	strh	r3, [r1, r2]
    return;
 8003c7a:	e623      	b.n	80038c4 <HAL_PCD_IRQHandler+0x74>
          ep->xfer_len = 0U;
 8003c7c:	1c69      	adds	r1, r5, #1
 8003c7e:	008b      	lsls	r3, r1, #2
 8003c80:	185b      	adds	r3, r3, r1
 8003c82:	2100      	movs	r1, #0
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	5119      	str	r1, [r3, r4]
          if (ep->doublebuffer != 0U)
 8003c88:	7f13      	ldrb	r3, [r2, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01b      	beq.n	8003cc6 <HAL_PCD_IRQHandler+0x476>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c8e:	2340      	movs	r3, #64	@ 0x40
 8003c90:	001e      	movs	r6, r3
 8003c92:	403e      	ands	r6, r7
 8003c94:	423b      	tst	r3, r7
 8003c96:	d000      	beq.n	8003c9a <HAL_PCD_IRQHandler+0x44a>
 8003c98:	e0f0      	b.n	8003e7c <HAL_PCD_IRQHandler+0x62c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c9a:	7c53      	ldrb	r3, [r2, #17]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d000      	beq.n	8003ca2 <HAL_PCD_IRQHandler+0x452>
 8003ca0:	e22c      	b.n	80040fc <HAL_PCD_IRQHandler+0x8ac>
 8003ca2:	3350      	adds	r3, #80	@ 0x50
 8003ca4:	5ac1      	ldrh	r1, [r0, r3]
 8003ca6:	7c13      	ldrb	r3, [r2, #16]
 8003ca8:	4a95      	ldr	r2, [pc, #596]	@ (8003f00 <HAL_PCD_IRQHandler+0x6b0>)
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4690      	mov	r8, r2
 8003cae:	4443      	add	r3, r8
 8003cb0:	181b      	adds	r3, r3, r0
 8003cb2:	185b      	adds	r3, r3, r1
 8003cb4:	4661      	mov	r1, ip
 8003cb6:	881a      	ldrh	r2, [r3, #0]
 8003cb8:	0592      	lsls	r2, r2, #22
 8003cba:	0d92      	lsrs	r2, r2, #22
 8003cbc:	801a      	strh	r2, [r3, #0]
 8003cbe:	881a      	ldrh	r2, [r3, #0]
 8003cc0:	4311      	orrs	r1, r2
 8003cc2:	b28a      	uxth	r2, r1
 8003cc4:	801a      	strh	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cc6:	9b00      	ldr	r3, [sp, #0]
 8003cc8:	0020      	movs	r0, r4
 8003cca:	469c      	mov	ip, r3
 8003ccc:	4465      	add	r5, ip
 8003cce:	00ed      	lsls	r5, r5, #3
 8003cd0:	1965      	adds	r5, r4, r5
 8003cd2:	7c29      	ldrb	r1, [r5, #16]
 8003cd4:	f003 fa02 	bl	80070dc <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003cd8:	6820      	ldr	r0, [r4, #0]
 8003cda:	e611      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
 8003cdc:	9b03      	ldr	r3, [sp, #12]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cde:	0020      	movs	r0, r4
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	6293      	str	r3, [r2, #40]	@ 0x28
 8003ce4:	f003 f9fa 	bl	80070dc <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	e609      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cec:	2180      	movs	r1, #128	@ 0x80
 8003cee:	01c9      	lsls	r1, r1, #7
 8003cf0:	4039      	ands	r1, r7
 8003cf2:	000e      	movs	r6, r1
 8003cf4:	9103      	str	r1, [sp, #12]
 8003cf6:	2140      	movs	r1, #64	@ 0x40
 8003cf8:	000b      	movs	r3, r1
 8003cfa:	403b      	ands	r3, r7
 8003cfc:	4698      	mov	r8, r3
 8003cfe:	4239      	tst	r1, r7
 8003d00:	d100      	bne.n	8003d04 <HAL_PCD_IRQHandler+0x4b4>
 8003d02:	e082      	b.n	8003e0a <HAL_PCD_IRQHandler+0x5ba>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d04:	4b82      	ldr	r3, [pc, #520]	@ (8003f10 <HAL_PCD_IRQHandler+0x6c0>)
 8003d06:	2750      	movs	r7, #80	@ 0x50
 8003d08:	4698      	mov	r8, r3
 8003d0a:	5bc1      	ldrh	r1, [r0, r7]
 8003d0c:	9b02      	ldr	r3, [sp, #8]
 8003d0e:	4480      	add	r8, r0
 8003d10:	4441      	add	r1, r8
 8003d12:	5ac9      	ldrh	r1, [r1, r3]

    if (ep->xfer_len > TxPctSize)
 8003d14:	9b01      	ldr	r3, [sp, #4]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d16:	0589      	lsls	r1, r1, #22
 8003d18:	0d89      	lsrs	r1, r1, #22
    if (ep->xfer_len > TxPctSize)
 8003d1a:	4299      	cmp	r1, r3
 8003d1c:	d300      	bcc.n	8003d20 <HAL_PCD_IRQHandler+0x4d0>
 8003d1e:	e1a2      	b.n	8004066 <HAL_PCD_IRQHandler+0x816>
    {
      ep->xfer_len -= TxPctSize;
 8003d20:	1a5b      	subs	r3, r3, r1
 8003d22:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d24:	2e00      	cmp	r6, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_PCD_IRQHandler+0x4ea>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003d28:	464b      	mov	r3, r9
 8003d2a:	009f      	lsls	r7, r3, #2
 8003d2c:	19c7      	adds	r7, r0, r7
 8003d2e:	883b      	ldrh	r3, [r7, #0]
 8003d30:	4e78      	ldr	r6, [pc, #480]	@ (8003f14 <HAL_PCD_IRQHandler+0x6c4>)
 8003d32:	4033      	ands	r3, r6
 8003d34:	4e78      	ldr	r6, [pc, #480]	@ (8003f18 <HAL_PCD_IRQHandler+0x6c8>)
 8003d36:	4333      	orrs	r3, r6
 8003d38:	803b      	strh	r3, [r7, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d3a:	9b00      	ldr	r3, [sp, #0]
 8003d3c:	195b      	adds	r3, r3, r5
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	18e3      	adds	r3, r4, r3
 8003d42:	001f      	movs	r7, r3
 8003d44:	3734      	adds	r7, #52	@ 0x34
 8003d46:	783e      	ldrb	r6, [r7, #0]
 8003d48:	2e01      	cmp	r6, #1
 8003d4a:	d000      	beq.n	8003d4e <HAL_PCD_IRQHandler+0x4fe>
 8003d4c:	e084      	b.n	8003e58 <HAL_PCD_IRQHandler+0x608>
      {
        ep->xfer_buff += TxPctSize;
 8003d4e:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8003d50:	46b1      	mov	r9, r6
 8003d52:	4489      	add	r9, r1
 8003d54:	464e      	mov	r6, r9
 8003d56:	625e      	str	r6, [r3, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8003d58:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8003d5a:	46b4      	mov	ip, r6
 8003d5c:	448c      	add	ip, r1
 8003d5e:	4666      	mov	r6, ip
 8003d60:	62d6      	str	r6, [r2, #44]	@ 0x2c

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d64:	4694      	mov	ip, r2
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	4594      	cmp	ip, r2
 8003d6a:	d200      	bcs.n	8003d6e <HAL_PCD_IRQHandler+0x51e>
 8003d6c:	e288      	b.n	8004280 <HAL_PCD_IRQHandler+0xa30>
        {
          len = ep->maxpacket;
          ep->xfer_len_db -= len;
 8003d6e:	4661      	mov	r1, ip
 8003d70:	1a89      	subs	r1, r1, r2
 8003d72:	6319      	str	r1, [r3, #48]	@ 0x30
          ep->xfer_len_db = 0U;
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d74:	b291      	uxth	r1, r2
 8003d76:	9b00      	ldr	r3, [sp, #0]
 8003d78:	195b      	adds	r3, r3, r5
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	18e3      	adds	r3, r4, r3
 8003d7e:	7c5b      	ldrb	r3, [r3, #17]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d000      	beq.n	8003d86 <HAL_PCD_IRQHandler+0x536>
 8003d84:	e271      	b.n	800426a <HAL_PCD_IRQHandler+0xa1a>
 8003d86:	9e02      	ldr	r6, [sp, #8]
 8003d88:	3350      	adds	r3, #80	@ 0x50
 8003d8a:	46b4      	mov	ip, r6
 8003d8c:	5ac3      	ldrh	r3, [r0, r3]
 8003d8e:	4443      	add	r3, r8
 8003d90:	4463      	add	r3, ip
 8003d92:	881f      	ldrh	r7, [r3, #0]
 8003d94:	05bf      	lsls	r7, r7, #22
 8003d96:	0dbf      	lsrs	r7, r7, #22
 8003d98:	801f      	strh	r7, [r3, #0]
 8003d9a:	2a00      	cmp	r2, #0
 8003d9c:	d000      	beq.n	8003da0 <HAL_PCD_IRQHandler+0x550>
 8003d9e:	e2aa      	b.n	80042f6 <HAL_PCD_IRQHandler+0xaa6>
 8003da0:	2780      	movs	r7, #128	@ 0x80
 8003da2:	881a      	ldrh	r2, [r3, #0]
 8003da4:	023f      	lsls	r7, r7, #8
 8003da6:	433a      	orrs	r2, r7
 8003da8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003daa:	9b00      	ldr	r3, [sp, #0]
 8003dac:	195b      	adds	r3, r3, r5
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	18e3      	adds	r3, r4, r3
 8003db2:	8b1a      	ldrh	r2, [r3, #24]
 8003db4:	000b      	movs	r3, r1
 8003db6:	4649      	mov	r1, r9
 8003db8:	f002 f990 	bl	80060dc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	e04b      	b.n	8003e58 <HAL_PCD_IRQHandler+0x608>
        ep = &hpcd->OUT_ep[epindex];
 8003dc0:	3151      	adds	r1, #81	@ 0x51
 8003dc2:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dc4:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003dc6:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dc8:	f001 fe18 	bl	80059fc <USB_EPStartXfer>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003dcc:	6820      	ldr	r0, [r4, #0]
 8003dce:	e5ac      	b.n	800392a <HAL_PCD_IRQHandler+0xda>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dd0:	2150      	movs	r1, #80	@ 0x50
 8003dd2:	5a41      	ldrh	r1, [r0, r1]
 8003dd4:	00d2      	lsls	r2, r2, #3
 8003dd6:	1852      	adds	r2, r2, r1
 8003dd8:	4949      	ldr	r1, [pc, #292]	@ (8003f00 <HAL_PCD_IRQHandler+0x6b0>)
 8003dda:	1812      	adds	r2, r2, r0
 8003ddc:	468c      	mov	ip, r1
 8003dde:	4462      	add	r2, ip
 8003de0:	8812      	ldrh	r2, [r2, #0]
 8003de2:	0592      	lsls	r2, r2, #22
 8003de4:	0d91      	lsrs	r1, r2, #22
 8003de6:	4688      	mov	r8, r1
              if (count != 0U)
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d100      	bne.n	8003dee <HAL_PCD_IRQHandler+0x59e>
 8003dec:	e61a      	b.n	8003a24 <HAL_PCD_IRQHandler+0x1d4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003dee:	001a      	movs	r2, r3
 8003df0:	325b      	adds	r2, #91	@ 0x5b
 8003df2:	e001      	b.n	8003df8 <HAL_PCD_IRQHandler+0x5a8>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003df4:	001a      	movs	r2, r3
 8003df6:	3257      	adds	r2, #87	@ 0x57
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003df8:	3365      	adds	r3, #101	@ 0x65
 8003dfa:	33ff      	adds	r3, #255	@ 0xff
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003dfc:	32ff      	adds	r2, #255	@ 0xff
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	8812      	ldrh	r2, [r2, #0]
 8003e02:	4643      	mov	r3, r8
 8003e04:	f002 f982 	bl	800610c <USB_ReadPMA>
 8003e08:	e60e      	b.n	8003a28 <HAL_PCD_IRQHandler+0x1d8>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f00 <HAL_PCD_IRQHandler+0x6b0>)
 8003e0c:	2150      	movs	r1, #80	@ 0x50
 8003e0e:	469c      	mov	ip, r3
 8003e10:	5a41      	ldrh	r1, [r0, r1]
 8003e12:	9b02      	ldr	r3, [sp, #8]
 8003e14:	4484      	add	ip, r0
 8003e16:	4461      	add	r1, ip
 8003e18:	5ac9      	ldrh	r1, [r1, r3]
    if (ep->xfer_len >= TxPctSize)
 8003e1a:	9b01      	ldr	r3, [sp, #4]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e1c:	0589      	lsls	r1, r1, #22
 8003e1e:	0d89      	lsrs	r1, r1, #22
    if (ep->xfer_len >= TxPctSize)
 8003e20:	4299      	cmp	r1, r3
 8003e22:	d900      	bls.n	8003e26 <HAL_PCD_IRQHandler+0x5d6>
 8003e24:	e0e0      	b.n	8003fe8 <HAL_PCD_IRQHandler+0x798>
      ep->xfer_len -= TxPctSize;
 8003e26:	1a5b      	subs	r3, r3, r1
 8003e28:	6293      	str	r3, [r2, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8003e2a:	d100      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x5de>
 8003e2c:	e0de      	b.n	8003fec <HAL_PCD_IRQHandler+0x79c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003e2e:	2e00      	cmp	r6, #0
 8003e30:	d108      	bne.n	8003e44 <HAL_PCD_IRQHandler+0x5f4>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003e32:	464b      	mov	r3, r9
 8003e34:	009f      	lsls	r7, r3, #2
 8003e36:	19c7      	adds	r7, r0, r7
 8003e38:	883b      	ldrh	r3, [r7, #0]
 8003e3a:	4e36      	ldr	r6, [pc, #216]	@ (8003f14 <HAL_PCD_IRQHandler+0x6c4>)
 8003e3c:	4033      	ands	r3, r6
 8003e3e:	4e36      	ldr	r6, [pc, #216]	@ (8003f18 <HAL_PCD_IRQHandler+0x6c8>)
 8003e40:	4333      	orrs	r3, r6
 8003e42:	803b      	strh	r3, [r7, #0]
      if (ep->xfer_fill_db == 1U)
 8003e44:	9b00      	ldr	r3, [sp, #0]
 8003e46:	195b      	adds	r3, r3, r5
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	18e3      	adds	r3, r4, r3
 8003e4c:	001f      	movs	r7, r3
 8003e4e:	3734      	adds	r7, #52	@ 0x34
 8003e50:	783e      	ldrb	r6, [r7, #0]
 8003e52:	2e01      	cmp	r6, #1
 8003e54:	d100      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x608>
 8003e56:	e1cf      	b.n	80041f8 <HAL_PCD_IRQHandler+0x9a8>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003e58:	9b00      	ldr	r3, [sp, #0]
 8003e5a:	4a30      	ldr	r2, [pc, #192]	@ (8003f1c <HAL_PCD_IRQHandler+0x6cc>)
 8003e5c:	469c      	mov	ip, r3
 8003e5e:	4465      	add	r5, ip
 8003e60:	00ed      	lsls	r5, r5, #3
 8003e62:	1965      	adds	r5, r4, r5
 8003e64:	7c2b      	ldrb	r3, [r5, #16]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	18c3      	adds	r3, r0, r3
 8003e6a:	8819      	ldrh	r1, [r3, #0]
 8003e6c:	4011      	ands	r1, r2
 8003e6e:	2230      	movs	r2, #48	@ 0x30
 8003e70:	4051      	eors	r1, r2
 8003e72:	4a2b      	ldr	r2, [pc, #172]	@ (8003f20 <HAL_PCD_IRQHandler+0x6d0>)
 8003e74:	430a      	orrs	r2, r1
 8003e76:	b292      	uxth	r2, r2
 8003e78:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003e7a:	e541      	b.n	8003900 <HAL_PCD_IRQHandler+0xb0>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e7c:	7c53      	ldrb	r3, [r2, #17]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d000      	beq.n	8003e84 <HAL_PCD_IRQHandler+0x634>
 8003e82:	e12d      	b.n	80040e0 <HAL_PCD_IRQHandler+0x890>
 8003e84:	3350      	adds	r3, #80	@ 0x50
 8003e86:	5ac1      	ldrh	r1, [r0, r3]
 8003e88:	7c13      	ldrb	r3, [r2, #16]
 8003e8a:	4a21      	ldr	r2, [pc, #132]	@ (8003f10 <HAL_PCD_IRQHandler+0x6c0>)
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	e70d      	b.n	8003cac <HAL_PCD_IRQHandler+0x45c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003e90:	2044      	movs	r0, #68	@ 0x44
 8003e92:	6822      	ldr	r2, [r4, #0]
 8003e94:	5a11      	ldrh	r1, [r2, r0]
 8003e96:	4399      	bics	r1, r3
    if (hpcd->LPM_State == LPM_L0)
 8003e98:	23b2      	movs	r3, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003e9a:	5211      	strh	r1, [r2, r0]
    if (hpcd->LPM_State == LPM_L0)
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	5ce1      	ldrb	r1, [r4, r3]
 8003ea0:	2900      	cmp	r1, #0
 8003ea2:	d000      	beq.n	8003ea6 <HAL_PCD_IRQHandler+0x656>
 8003ea4:	e08f      	b.n	8003fc6 <HAL_PCD_IRQHandler+0x776>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003ea6:	2504      	movs	r5, #4
 8003ea8:	3140      	adds	r1, #64	@ 0x40
 8003eaa:	5a50      	ldrh	r0, [r2, r1]
 8003eac:	4328      	orrs	r0, r5
 8003eae:	5250      	strh	r0, [r2, r1]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003eb0:	5a50      	ldrh	r0, [r2, r1]
 8003eb2:	3504      	adds	r5, #4
 8003eb4:	4328      	orrs	r0, r5
 8003eb6:	5250      	strh	r0, [r2, r1]
      hpcd->LPM_State = LPM_L1;
 8003eb8:	393f      	subs	r1, #63	@ 0x3f
 8003eba:	54e1      	strb	r1, [r4, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003ebc:	2354      	movs	r3, #84	@ 0x54
 8003ebe:	5ad2      	ldrh	r2, [r2, r3]
 8003ec0:	3b18      	subs	r3, #24
 8003ec2:	0892      	lsrs	r2, r2, #2
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	22b3      	movs	r2, #179	@ 0xb3
 8003ec8:	0092      	lsls	r2, r2, #2
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003eca:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003ecc:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ece:	f000 fbbf 	bl	8004650 <HAL_PCDEx_LPM_Callback>
 8003ed2:	e4f7      	b.n	80038c4 <HAL_PCD_IRQHandler+0x74>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ed4:	2240      	movs	r2, #64	@ 0x40
 8003ed6:	2008      	movs	r0, #8
 8003ed8:	6823      	ldr	r3, [r4, #0]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003eda:	4d12      	ldr	r5, [pc, #72]	@ (8003f24 <HAL_PCD_IRQHandler+0x6d4>)
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003edc:	5a99      	ldrh	r1, [r3, r2]
 8003ede:	4301      	orrs	r1, r0
 8003ee0:	5299      	strh	r1, [r3, r2]
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003ee2:	303c      	adds	r0, #60	@ 0x3c
 8003ee4:	5a19      	ldrh	r1, [r3, r0]
 8003ee6:	4029      	ands	r1, r5
 8003ee8:	5219      	strh	r1, [r3, r0]
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003eea:	5a99      	ldrh	r1, [r3, r2]
 8003eec:	3840      	subs	r0, #64	@ 0x40
 8003eee:	4301      	orrs	r1, r0
 8003ef0:	5299      	strh	r1, [r3, r2]
    HAL_PCD_SuspendCallback(hpcd);
 8003ef2:	0020      	movs	r0, r4
 8003ef4:	f003 f918 	bl	8007128 <HAL_PCD_SuspendCallback>
    return;
 8003ef8:	e4e4      	b.n	80038c4 <HAL_PCD_IRQHandler+0x74>
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	00000f8f 	.word	0x00000f8f
 8003f00:	00000406 	.word	0x00000406
 8003f04:	ffffbf8f 	.word	0xffffbf8f
 8003f08:	00008080 	.word	0x00008080
 8003f0c:	ffffdfff 	.word	0xffffdfff
 8003f10:	00000402 	.word	0x00000402
 8003f14:	ffff8f8f 	.word	0xffff8f8f
 8003f18:	0000c080 	.word	0x0000c080
 8003f1c:	ffff8fbf 	.word	0xffff8fbf
 8003f20:	ffff8080 	.word	0xffff8080
 8003f24:	fffff7ff 	.word	0xfffff7ff
    if (ep->xfer_len >= count)
 8003f28:	3667      	adds	r6, #103	@ 0x67
 8003f2a:	36ff      	adds	r6, #255	@ 0xff
 8003f2c:	46b4      	mov	ip, r6
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f2e:	2680      	movs	r6, #128	@ 0x80
 8003f30:	01f6      	lsls	r6, r6, #7
 8003f32:	46b0      	mov	r8, r6
    if (ep->xfer_len >= count)
 8003f34:	449c      	add	ip, r3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f36:	403e      	ands	r6, r7
    if (ep->xfer_len >= count)
 8003f38:	4663      	mov	r3, ip
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f3a:	46b1      	mov	r9, r6
 8003f3c:	4646      	mov	r6, r8
    if (ep->xfer_len >= count)
 8003f3e:	681b      	ldr	r3, [r3, #0]
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f40:	00d1      	lsls	r1, r2, #3
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f42:	4237      	tst	r7, r6
 8003f44:	d100      	bne.n	8003f48 <HAL_PCD_IRQHandler+0x6f8>
 8003f46:	e0e7      	b.n	8004118 <HAL_PCD_IRQHandler+0x8c8>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f48:	2650      	movs	r6, #80	@ 0x50
 8003f4a:	5b86      	ldrh	r6, [r0, r6]
 8003f4c:	46b0      	mov	r8, r6
 8003f4e:	4ecf      	ldr	r6, [pc, #828]	@ (800428c <HAL_PCD_IRQHandler+0xa3c>)
 8003f50:	4441      	add	r1, r8
 8003f52:	46b0      	mov	r8, r6
 8003f54:	1809      	adds	r1, r1, r0
 8003f56:	4441      	add	r1, r8
 8003f58:	8809      	ldrh	r1, [r1, #0]
 8003f5a:	0589      	lsls	r1, r1, #22
 8003f5c:	0d89      	lsrs	r1, r1, #22
    if (ep->xfer_len >= count)
 8003f5e:	4688      	mov	r8, r1
 8003f60:	4299      	cmp	r1, r3
 8003f62:	d900      	bls.n	8003f66 <HAL_PCD_IRQHandler+0x716>
 8003f64:	e140      	b.n	80041e8 <HAL_PCD_IRQHandler+0x998>
      ep->xfer_len -= count;
 8003f66:	4666      	mov	r6, ip
 8003f68:	1a5b      	subs	r3, r3, r1
 8003f6a:	6033      	str	r3, [r6, #0]
    if (ep->xfer_len == 0U)
 8003f6c:	d10d      	bne.n	8003f8a <HAL_PCD_IRQHandler+0x73a>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f6e:	0093      	lsls	r3, r2, #2
 8003f70:	469c      	mov	ip, r3
 8003f72:	4484      	add	ip, r0
 8003f74:	4663      	mov	r3, ip
 8003f76:	4ec6      	ldr	r6, [pc, #792]	@ (8004290 <HAL_PCD_IRQHandler+0xa40>)
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	401e      	ands	r6, r3
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	019b      	lsls	r3, r3, #6
 8003f80:	4073      	eors	r3, r6
 8003f82:	4ec4      	ldr	r6, [pc, #784]	@ (8004294 <HAL_PCD_IRQHandler+0xa44>)
 8003f84:	4333      	orrs	r3, r6
 8003f86:	4666      	mov	r6, ip
 8003f88:	8033      	strh	r3, [r6, #0]
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f8a:	067b      	lsls	r3, r7, #25
 8003f8c:	d507      	bpl.n	8003f9e <HAL_PCD_IRQHandler+0x74e>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f8e:	0092      	lsls	r2, r2, #2
 8003f90:	1882      	adds	r2, r0, r2
 8003f92:	8813      	ldrh	r3, [r2, #0]
 8003f94:	4ec0      	ldr	r6, [pc, #768]	@ (8004298 <HAL_PCD_IRQHandler+0xa48>)
 8003f96:	4033      	ands	r3, r6
 8003f98:	4ec0      	ldr	r6, [pc, #768]	@ (800429c <HAL_PCD_IRQHandler+0xa4c>)
 8003f9a:	4333      	orrs	r3, r6
 8003f9c:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8003f9e:	2900      	cmp	r1, #0
 8003fa0:	d100      	bne.n	8003fa4 <HAL_PCD_IRQHandler+0x754>
 8003fa2:	e541      	b.n	8003a28 <HAL_PCD_IRQHandler+0x1d8>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fa4:	9b00      	ldr	r3, [sp, #0]
 8003fa6:	195b      	adds	r3, r3, r5
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	18e3      	adds	r3, r4, r3
 8003fac:	001a      	movs	r2, r3
 8003fae:	3259      	adds	r2, #89	@ 0x59
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003fb0:	3365      	adds	r3, #101	@ 0x65
 8003fb2:	33ff      	adds	r3, #255	@ 0xff
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	32ff      	adds	r2, #255	@ 0xff
 8003fb8:	469c      	mov	ip, r3
 8003fba:	8812      	ldrh	r2, [r2, #0]
 8003fbc:	000b      	movs	r3, r1
 8003fbe:	4661      	mov	r1, ip
 8003fc0:	f002 f8a4 	bl	800610c <USB_ReadPMA>
 8003fc4:	e530      	b.n	8003a28 <HAL_PCD_IRQHandler+0x1d8>
      HAL_PCD_SuspendCallback(hpcd);
 8003fc6:	0020      	movs	r0, r4
 8003fc8:	f003 f8ae 	bl	8007128 <HAL_PCD_SuspendCallback>
 8003fcc:	e47a      	b.n	80038c4 <HAL_PCD_IRQHandler+0x74>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003fce:	2a3e      	cmp	r2, #62	@ 0x3e
 8003fd0:	d900      	bls.n	8003fd4 <HAL_PCD_IRQHandler+0x784>
 8003fd2:	e0d5      	b.n	8004180 <HAL_PCD_IRQHandler+0x930>
 8003fd4:	2501      	movs	r5, #1
 8003fd6:	0851      	lsrs	r1, r2, #1
 8003fd8:	402a      	ands	r2, r5
 8003fda:	1889      	adds	r1, r1, r2
 8003fdc:	881a      	ldrh	r2, [r3, #0]
 8003fde:	0289      	lsls	r1, r1, #10
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	801a      	strh	r2, [r3, #0]
 8003fe6:	e638      	b.n	8003c5a <HAL_PCD_IRQHandler+0x40a>
 8003fe8:	4643      	mov	r3, r8
 8003fea:	6293      	str	r3, [r2, #40]	@ 0x28
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fec:	9b00      	ldr	r3, [sp, #0]
 8003fee:	195b      	adds	r3, r3, r5
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	18e3      	adds	r3, r4, r3
 8003ff4:	7c5b      	ldrb	r3, [r3, #17]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d000      	beq.n	8003ffc <HAL_PCD_IRQHandler+0x7ac>
 8003ffa:	e0e1      	b.n	80041c0 <HAL_PCD_IRQHandler+0x970>
 8003ffc:	9e02      	ldr	r6, [sp, #8]
 8003ffe:	49a3      	ldr	r1, [pc, #652]	@ (800428c <HAL_PCD_IRQHandler+0xa3c>)
 8004000:	2750      	movs	r7, #80	@ 0x50
 8004002:	4688      	mov	r8, r1
 8004004:	0033      	movs	r3, r6
 8004006:	5bc2      	ldrh	r2, [r0, r7]
 8004008:	4443      	add	r3, r8
 800400a:	18c3      	adds	r3, r0, r3
 800400c:	189b      	adds	r3, r3, r2
 800400e:	881a      	ldrh	r2, [r3, #0]
 8004010:	0592      	lsls	r2, r2, #22
 8004012:	0d92      	lsrs	r2, r2, #22
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	8819      	ldrh	r1, [r3, #0]
 8004018:	4aa1      	ldr	r2, [pc, #644]	@ (80042a0 <HAL_PCD_IRQHandler+0xa50>)
 800401a:	4311      	orrs	r1, r2
 800401c:	b289      	uxth	r1, r1
 800401e:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004020:	5bc3      	ldrh	r3, [r0, r7]
 8004022:	4463      	add	r3, ip
 8004024:	46b4      	mov	ip, r6
 8004026:	4463      	add	r3, ip
 8004028:	8819      	ldrh	r1, [r3, #0]
 800402a:	0589      	lsls	r1, r1, #22
 800402c:	0d89      	lsrs	r1, r1, #22
 800402e:	8019      	strh	r1, [r3, #0]
 8004030:	8819      	ldrh	r1, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	b292      	uxth	r2, r2
 8004036:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004038:	0020      	movs	r0, r4
 800403a:	4649      	mov	r1, r9
 800403c:	f003 f84e 	bl	80070dc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004040:	9b03      	ldr	r3, [sp, #12]
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004042:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004044:	2b00      	cmp	r3, #0
 8004046:	d000      	beq.n	800404a <HAL_PCD_IRQHandler+0x7fa>
 8004048:	e706      	b.n	8003e58 <HAL_PCD_IRQHandler+0x608>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800404a:	9b00      	ldr	r3, [sp, #0]
 800404c:	4992      	ldr	r1, [pc, #584]	@ (8004298 <HAL_PCD_IRQHandler+0xa48>)
 800404e:	195b      	adds	r3, r3, r5
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	18e3      	adds	r3, r4, r3
 8004054:	7c1b      	ldrb	r3, [r3, #16]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	18c3      	adds	r3, r0, r3
 800405a:	881a      	ldrh	r2, [r3, #0]
 800405c:	400a      	ands	r2, r1
 800405e:	4991      	ldr	r1, [pc, #580]	@ (80042a4 <HAL_PCD_IRQHandler+0xa54>)
 8004060:	430a      	orrs	r2, r1
 8004062:	801a      	strh	r2, [r3, #0]
 8004064:	e6f8      	b.n	8003e58 <HAL_PCD_IRQHandler+0x608>
 8004066:	2300      	movs	r3, #0
 8004068:	6293      	str	r3, [r2, #40]	@ 0x28
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800406a:	7c52      	ldrb	r2, [r2, #17]
 800406c:	2a00      	cmp	r2, #0
 800406e:	d000      	beq.n	8004072 <HAL_PCD_IRQHandler+0x822>
 8004070:	e094      	b.n	800419c <HAL_PCD_IRQHandler+0x94c>
 8004072:	5bc3      	ldrh	r3, [r0, r7]
 8004074:	9902      	ldr	r1, [sp, #8]
 8004076:	4443      	add	r3, r8
 8004078:	4688      	mov	r8, r1
 800407a:	4666      	mov	r6, ip
 800407c:	4443      	add	r3, r8
 800407e:	881a      	ldrh	r2, [r3, #0]
 8004080:	0592      	lsls	r2, r2, #22
 8004082:	0d92      	lsrs	r2, r2, #22
 8004084:	801a      	strh	r2, [r3, #0]
 8004086:	881a      	ldrh	r2, [r3, #0]
 8004088:	4332      	orrs	r2, r6
 800408a:	b292      	uxth	r2, r2
 800408c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800408e:	000b      	movs	r3, r1
 8004090:	4985      	ldr	r1, [pc, #532]	@ (80042a8 <HAL_PCD_IRQHandler+0xa58>)
 8004092:	5bc2      	ldrh	r2, [r0, r7]
 8004094:	4688      	mov	r8, r1
 8004096:	4443      	add	r3, r8
 8004098:	181b      	adds	r3, r3, r0
 800409a:	189b      	adds	r3, r3, r2
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	0592      	lsls	r2, r2, #22
 80040a0:	0d92      	lsrs	r2, r2, #22
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	4332      	orrs	r2, r6
 80040a8:	b292      	uxth	r2, r2
 80040aa:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040ac:	0020      	movs	r0, r4
 80040ae:	4649      	mov	r1, r9
 80040b0:	f003 f814 	bl	80070dc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040b4:	9b03      	ldr	r3, [sp, #12]
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80040b6:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1c6      	bne.n	800404a <HAL_PCD_IRQHandler+0x7fa>
 80040bc:	e6cc      	b.n	8003e58 <HAL_PCD_IRQHandler+0x608>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80040be:	2244      	movs	r2, #68	@ 0x44
 80040c0:	6821      	ldr	r1, [r4, #0]
 80040c2:	487a      	ldr	r0, [pc, #488]	@ (80042ac <HAL_PCD_IRQHandler+0xa5c>)
 80040c4:	5a8b      	ldrh	r3, [r1, r2]
 80040c6:	4003      	ands	r3, r0
 80040c8:	528b      	strh	r3, [r1, r2]
    HAL_PCD_SOFCallback(hpcd);
 80040ca:	0020      	movs	r0, r4
 80040cc:	f003 f812 	bl	80070f4 <HAL_PCD_SOFCallback>
    return;
 80040d0:	f7ff fbf8 	bl	80038c4 <HAL_PCD_IRQHandler+0x74>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040d4:	2100      	movs	r1, #0
 80040d6:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 80040d8:	54e5      	strb	r5, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040da:	f000 fab9 	bl	8004650 <HAL_PCDEx_LPM_Callback>
 80040de:	e474      	b.n	80039ca <HAL_PCD_IRQHandler+0x17a>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d000      	beq.n	80040e6 <HAL_PCD_IRQHandler+0x896>
 80040e4:	e5ef      	b.n	8003cc6 <HAL_PCD_IRQHandler+0x476>
 80040e6:	334f      	adds	r3, #79	@ 0x4f
 80040e8:	5ac7      	ldrh	r7, [r0, r3]
 80040ea:	7c13      	ldrb	r3, [r2, #16]
 80040ec:	4a67      	ldr	r2, [pc, #412]	@ (800428c <HAL_PCD_IRQHandler+0xa3c>)
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4694      	mov	ip, r2
 80040f2:	4463      	add	r3, ip
 80040f4:	18c3      	adds	r3, r0, r3
 80040f6:	19db      	adds	r3, r3, r7
 80040f8:	8019      	strh	r1, [r3, #0]
 80040fa:	e5e4      	b.n	8003cc6 <HAL_PCD_IRQHandler+0x476>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d000      	beq.n	8004102 <HAL_PCD_IRQHandler+0x8b2>
 8004100:	e5e1      	b.n	8003cc6 <HAL_PCD_IRQHandler+0x476>
 8004102:	334f      	adds	r3, #79	@ 0x4f
 8004104:	5ac1      	ldrh	r1, [r0, r3]
 8004106:	7c13      	ldrb	r3, [r2, #16]
 8004108:	4a67      	ldr	r2, [pc, #412]	@ (80042a8 <HAL_PCD_IRQHandler+0xa58>)
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4694      	mov	ip, r2
 800410e:	4463      	add	r3, ip
 8004110:	181b      	adds	r3, r3, r0
 8004112:	185b      	adds	r3, r3, r1
 8004114:	801e      	strh	r6, [r3, #0]
 8004116:	e5d6      	b.n	8003cc6 <HAL_PCD_IRQHandler+0x476>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004118:	2650      	movs	r6, #80	@ 0x50
 800411a:	5b86      	ldrh	r6, [r0, r6]
 800411c:	46b0      	mov	r8, r6
 800411e:	4e62      	ldr	r6, [pc, #392]	@ (80042a8 <HAL_PCD_IRQHandler+0xa58>)
 8004120:	4441      	add	r1, r8
 8004122:	46b0      	mov	r8, r6
 8004124:	1809      	adds	r1, r1, r0
 8004126:	4441      	add	r1, r8
 8004128:	8809      	ldrh	r1, [r1, #0]
 800412a:	0589      	lsls	r1, r1, #22
 800412c:	0d89      	lsrs	r1, r1, #22
    if (ep->xfer_len >= count)
 800412e:	4688      	mov	r8, r1
 8004130:	4299      	cmp	r1, r3
 8004132:	d85d      	bhi.n	80041f0 <HAL_PCD_IRQHandler+0x9a0>
      ep->xfer_len -= count;
 8004134:	4666      	mov	r6, ip
 8004136:	1a5b      	subs	r3, r3, r1
 8004138:	6033      	str	r3, [r6, #0]
    if (ep->xfer_len == 0U)
 800413a:	d10d      	bne.n	8004158 <HAL_PCD_IRQHandler+0x908>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800413c:	0093      	lsls	r3, r2, #2
 800413e:	469c      	mov	ip, r3
 8004140:	4484      	add	ip, r0
 8004142:	4663      	mov	r3, ip
 8004144:	4e52      	ldr	r6, [pc, #328]	@ (8004290 <HAL_PCD_IRQHandler+0xa40>)
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	401e      	ands	r6, r3
 800414a:	2380      	movs	r3, #128	@ 0x80
 800414c:	019b      	lsls	r3, r3, #6
 800414e:	4073      	eors	r3, r6
 8004150:	4e50      	ldr	r6, [pc, #320]	@ (8004294 <HAL_PCD_IRQHandler+0xa44>)
 8004152:	4333      	orrs	r3, r6
 8004154:	4666      	mov	r6, ip
 8004156:	8033      	strh	r3, [r6, #0]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004158:	067b      	lsls	r3, r7, #25
 800415a:	d407      	bmi.n	800416c <HAL_PCD_IRQHandler+0x91c>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800415c:	0092      	lsls	r2, r2, #2
 800415e:	1882      	adds	r2, r0, r2
 8004160:	8813      	ldrh	r3, [r2, #0]
 8004162:	4e4d      	ldr	r6, [pc, #308]	@ (8004298 <HAL_PCD_IRQHandler+0xa48>)
 8004164:	4033      	ands	r3, r6
 8004166:	4e4d      	ldr	r6, [pc, #308]	@ (800429c <HAL_PCD_IRQHandler+0xa4c>)
 8004168:	4333      	orrs	r3, r6
 800416a:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 800416c:	2900      	cmp	r1, #0
 800416e:	d100      	bne.n	8004172 <HAL_PCD_IRQHandler+0x922>
 8004170:	e45a      	b.n	8003a28 <HAL_PCD_IRQHandler+0x1d8>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004172:	9b00      	ldr	r3, [sp, #0]
 8004174:	195b      	adds	r3, r3, r5
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	18e3      	adds	r3, r4, r3
 800417a:	001a      	movs	r2, r3
 800417c:	325b      	adds	r2, #91	@ 0x5b
 800417e:	e717      	b.n	8003fb0 <HAL_PCD_IRQHandler+0x760>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004180:	251f      	movs	r5, #31
 8004182:	0951      	lsrs	r1, r2, #5
 8004184:	402a      	ands	r2, r5
 8004186:	4255      	negs	r5, r2
 8004188:	416a      	adcs	r2, r5
 800418a:	1a89      	subs	r1, r1, r2
 800418c:	881a      	ldrh	r2, [r3, #0]
 800418e:	0289      	lsls	r1, r1, #10
 8004190:	4311      	orrs	r1, r2
 8004192:	4a43      	ldr	r2, [pc, #268]	@ (80042a0 <HAL_PCD_IRQHandler+0xa50>)
 8004194:	430a      	orrs	r2, r1
 8004196:	b292      	uxth	r2, r2
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	e55e      	b.n	8003c5a <HAL_PCD_IRQHandler+0x40a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800419c:	2a01      	cmp	r2, #1
 800419e:	d000      	beq.n	80041a2 <HAL_PCD_IRQHandler+0x952>
 80041a0:	e784      	b.n	80040ac <HAL_PCD_IRQHandler+0x85c>
 80041a2:	9e02      	ldr	r6, [sp, #8]
 80041a4:	5bc2      	ldrh	r2, [r0, r7]
 80041a6:	46b4      	mov	ip, r6
 80041a8:	4442      	add	r2, r8
 80041aa:	4462      	add	r2, ip
 80041ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ae:	0032      	movs	r2, r6
 80041b0:	4e3d      	ldr	r6, [pc, #244]	@ (80042a8 <HAL_PCD_IRQHandler+0xa58>)
 80041b2:	5bc1      	ldrh	r1, [r0, r7]
 80041b4:	46b4      	mov	ip, r6
 80041b6:	4462      	add	r2, ip
 80041b8:	1812      	adds	r2, r2, r0
 80041ba:	1852      	adds	r2, r2, r1
 80041bc:	8013      	strh	r3, [r2, #0]
 80041be:	e775      	b.n	80040ac <HAL_PCD_IRQHandler+0x85c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d000      	beq.n	80041c6 <HAL_PCD_IRQHandler+0x976>
 80041c4:	e738      	b.n	8004038 <HAL_PCD_IRQHandler+0x7e8>
 80041c6:	9e02      	ldr	r6, [sp, #8]
 80041c8:	4f30      	ldr	r7, [pc, #192]	@ (800428c <HAL_PCD_IRQHandler+0xa3c>)
 80041ca:	2150      	movs	r1, #80	@ 0x50
 80041cc:	0033      	movs	r3, r6
 80041ce:	46b8      	mov	r8, r7
 80041d0:	5a42      	ldrh	r2, [r0, r1]
 80041d2:	4443      	add	r3, r8
 80041d4:	18c3      	adds	r3, r0, r3
 80041d6:	189b      	adds	r3, r3, r2
 80041d8:	2200      	movs	r2, #0
 80041da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041dc:	5a43      	ldrh	r3, [r0, r1]
 80041de:	4463      	add	r3, ip
 80041e0:	46b4      	mov	ip, r6
 80041e2:	4463      	add	r3, ip
 80041e4:	801a      	strh	r2, [r3, #0]
 80041e6:	e727      	b.n	8004038 <HAL_PCD_IRQHandler+0x7e8>
      ep->xfer_len = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	4666      	mov	r6, ip
 80041ec:	6033      	str	r3, [r6, #0]
    if (ep->xfer_len == 0U)
 80041ee:	e6be      	b.n	8003f6e <HAL_PCD_IRQHandler+0x71e>
      ep->xfer_len = 0U;
 80041f0:	4663      	mov	r3, ip
 80041f2:	464e      	mov	r6, r9
 80041f4:	601e      	str	r6, [r3, #0]
    if (ep->xfer_len == 0U)
 80041f6:	e7a1      	b.n	800413c <HAL_PCD_IRQHandler+0x8ec>
        ep->xfer_buff += TxPctSize;
 80041f8:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 80041fa:	46b1      	mov	r9, r6
 80041fc:	4489      	add	r9, r1
 80041fe:	464e      	mov	r6, r9
 8004200:	625e      	str	r6, [r3, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8004202:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8004204:	46b0      	mov	r8, r6
 8004206:	4488      	add	r8, r1
 8004208:	4646      	mov	r6, r8
 800420a:	62d6      	str	r6, [r2, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 800420c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800420e:	4690      	mov	r8, r2
 8004210:	6a1a      	ldr	r2, [r3, #32]
 8004212:	4590      	cmp	r8, r2
 8004214:	d358      	bcc.n	80042c8 <HAL_PCD_IRQHandler+0xa78>
          ep->xfer_len_db -= len;
 8004216:	4641      	mov	r1, r8
 8004218:	1a89      	subs	r1, r1, r2
 800421a:	6319      	str	r1, [r3, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800421c:	b291      	uxth	r1, r2
 800421e:	9b00      	ldr	r3, [sp, #0]
 8004220:	195b      	adds	r3, r3, r5
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	18e3      	adds	r3, r4, r3
 8004226:	7c5b      	ldrb	r3, [r3, #17]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d143      	bne.n	80042b4 <HAL_PCD_IRQHandler+0xa64>
 800422c:	3350      	adds	r3, #80	@ 0x50
 800422e:	5ac3      	ldrh	r3, [r0, r3]
 8004230:	9e02      	ldr	r6, [sp, #8]
 8004232:	4463      	add	r3, ip
 8004234:	46b4      	mov	ip, r6
 8004236:	4463      	add	r3, ip
 8004238:	881f      	ldrh	r7, [r3, #0]
 800423a:	05bf      	lsls	r7, r7, #22
 800423c:	0dbf      	lsrs	r7, r7, #22
 800423e:	801f      	strh	r7, [r3, #0]
 8004240:	2a00      	cmp	r2, #0
 8004242:	d000      	beq.n	8004246 <HAL_PCD_IRQHandler+0x9f6>
 8004244:	e075      	b.n	8004332 <HAL_PCD_IRQHandler+0xae2>
 8004246:	2780      	movs	r7, #128	@ 0x80
 8004248:	881a      	ldrh	r2, [r3, #0]
 800424a:	023f      	lsls	r7, r7, #8
 800424c:	433a      	orrs	r2, r7
 800424e:	801a      	strh	r2, [r3, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004250:	9b00      	ldr	r3, [sp, #0]
 8004252:	195b      	adds	r3, r3, r5
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	18e3      	adds	r3, r4, r3
 8004258:	8b5a      	ldrh	r2, [r3, #26]
 800425a:	000b      	movs	r3, r1
 800425c:	4649      	mov	r1, r9
 800425e:	f001 ff3d 	bl	80060dc <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004262:	6820      	ldr	r0, [r4, #0]
 8004264:	e5f8      	b.n	8003e58 <HAL_PCD_IRQHandler+0x608>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004266:	4662      	mov	r2, ip
 8004268:	b291      	uxth	r1, r2
 800426a:	2b01      	cmp	r3, #1
 800426c:	d000      	beq.n	8004270 <HAL_PCD_IRQHandler+0xa20>
 800426e:	e59c      	b.n	8003daa <HAL_PCD_IRQHandler+0x55a>
 8004270:	9a02      	ldr	r2, [sp, #8]
 8004272:	334f      	adds	r3, #79	@ 0x4f
 8004274:	4694      	mov	ip, r2
 8004276:	5ac3      	ldrh	r3, [r0, r3]
 8004278:	4443      	add	r3, r8
 800427a:	4463      	add	r3, ip
 800427c:	8019      	strh	r1, [r3, #0]
 800427e:	e594      	b.n	8003daa <HAL_PCD_IRQHandler+0x55a>
        else if (ep->xfer_len_db == 0U)
 8004280:	4662      	mov	r2, ip
 8004282:	2a00      	cmp	r2, #0
 8004284:	d126      	bne.n	80042d4 <HAL_PCD_IRQHandler+0xa84>
          ep->xfer_fill_db = 0U;
 8004286:	703a      	strb	r2, [r7, #0]
    if (ep->xfer_len > TxPctSize)
 8004288:	000a      	movs	r2, r1
 800428a:	e574      	b.n	8003d76 <HAL_PCD_IRQHandler+0x526>
 800428c:	00000402 	.word	0x00000402
 8004290:	ffffbf8f 	.word	0xffffbf8f
 8004294:	00008080 	.word	0x00008080
 8004298:	ffff8f8f 	.word	0xffff8f8f
 800429c:	000080c0 	.word	0x000080c0
 80042a0:	ffff8000 	.word	0xffff8000
 80042a4:	0000c080 	.word	0x0000c080
 80042a8:	00000406 	.word	0x00000406
 80042ac:	fffffdff 	.word	0xfffffdff
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042b0:	4642      	mov	r2, r8
 80042b2:	b291      	uxth	r1, r2
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d1cb      	bne.n	8004250 <HAL_PCD_IRQHandler+0xa00>
 80042b8:	334f      	adds	r3, #79	@ 0x4f
 80042ba:	5ac3      	ldrh	r3, [r0, r3]
 80042bc:	9a02      	ldr	r2, [sp, #8]
 80042be:	4463      	add	r3, ip
 80042c0:	4694      	mov	ip, r2
 80042c2:	4463      	add	r3, ip
 80042c4:	8019      	strh	r1, [r3, #0]
 80042c6:	e7c3      	b.n	8004250 <HAL_PCD_IRQHandler+0xa00>
        else if (ep->xfer_len_db == 0U)
 80042c8:	4642      	mov	r2, r8
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	d120      	bne.n	8004310 <HAL_PCD_IRQHandler+0xac0>
          ep->xfer_fill_db = 0U;
 80042ce:	703a      	strb	r2, [r7, #0]
    if (ep->xfer_len >= TxPctSize)
 80042d0:	000a      	movs	r2, r1
 80042d2:	e7a4      	b.n	800421e <HAL_PCD_IRQHandler+0x9ce>
          ep->xfer_fill_db = 0U;
 80042d4:	2200      	movs	r2, #0
 80042d6:	703a      	strb	r2, [r7, #0]
          ep->xfer_len_db = 0U;
 80042d8:	631a      	str	r2, [r3, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042da:	7c5b      	ldrb	r3, [r3, #17]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1c2      	bne.n	8004266 <HAL_PCD_IRQHandler+0xa16>
 80042e0:	2350      	movs	r3, #80	@ 0x50
 80042e2:	9a02      	ldr	r2, [sp, #8]
 80042e4:	5ac3      	ldrh	r3, [r0, r3]
 80042e6:	4443      	add	r3, r8
 80042e8:	4690      	mov	r8, r2
 80042ea:	4443      	add	r3, r8
 80042ec:	881a      	ldrh	r2, [r3, #0]
 80042ee:	0592      	lsls	r2, r2, #22
 80042f0:	0d92      	lsrs	r2, r2, #22
 80042f2:	801a      	strh	r2, [r3, #0]
 80042f4:	4662      	mov	r2, ip
 80042f6:	2a3e      	cmp	r2, #62	@ 0x3e
 80042f8:	d828      	bhi.n	800434c <HAL_PCD_IRQHandler+0xafc>
 80042fa:	2101      	movs	r1, #1
 80042fc:	0857      	lsrs	r7, r2, #1
 80042fe:	4011      	ands	r1, r2
 8004300:	187f      	adds	r7, r7, r1
 8004302:	8819      	ldrh	r1, [r3, #0]
 8004304:	02bf      	lsls	r7, r7, #10
 8004306:	4339      	orrs	r1, r7
 8004308:	b289      	uxth	r1, r1
 800430a:	8019      	strh	r1, [r3, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800430c:	b291      	uxth	r1, r2
 800430e:	e54c      	b.n	8003daa <HAL_PCD_IRQHandler+0x55a>
          ep->xfer_len_db = 0U;
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8004314:	703a      	strb	r2, [r7, #0]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004316:	7c5b      	ldrb	r3, [r3, #17]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1c9      	bne.n	80042b0 <HAL_PCD_IRQHandler+0xa60>
 800431c:	2350      	movs	r3, #80	@ 0x50
 800431e:	9a02      	ldr	r2, [sp, #8]
 8004320:	5ac3      	ldrh	r3, [r0, r3]
 8004322:	4463      	add	r3, ip
 8004324:	4694      	mov	ip, r2
 8004326:	4463      	add	r3, ip
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	0592      	lsls	r2, r2, #22
 800432c:	0d92      	lsrs	r2, r2, #22
 800432e:	801a      	strh	r2, [r3, #0]
 8004330:	4642      	mov	r2, r8
 8004332:	2a3e      	cmp	r2, #62	@ 0x3e
 8004334:	d81a      	bhi.n	800436c <HAL_PCD_IRQHandler+0xb1c>
 8004336:	2101      	movs	r1, #1
 8004338:	0857      	lsrs	r7, r2, #1
 800433a:	4011      	ands	r1, r2
 800433c:	187f      	adds	r7, r7, r1
 800433e:	8819      	ldrh	r1, [r3, #0]
 8004340:	02bf      	lsls	r7, r7, #10
 8004342:	4339      	orrs	r1, r7
 8004344:	b289      	uxth	r1, r1
 8004346:	8019      	strh	r1, [r3, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004348:	b291      	uxth	r1, r2
 800434a:	e781      	b.n	8004250 <HAL_PCD_IRQHandler+0xa00>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800434c:	271f      	movs	r7, #31
 800434e:	4017      	ands	r7, r2
 8004350:	003e      	movs	r6, r7
 8004352:	4277      	negs	r7, r6
 8004354:	4177      	adcs	r7, r6
 8004356:	0951      	lsrs	r1, r2, #5
 8004358:	1bc9      	subs	r1, r1, r7
 800435a:	881f      	ldrh	r7, [r3, #0]
 800435c:	0289      	lsls	r1, r1, #10
 800435e:	430f      	orrs	r7, r1
 8004360:	490a      	ldr	r1, [pc, #40]	@ (800438c <HAL_PCD_IRQHandler+0xb3c>)
 8004362:	4339      	orrs	r1, r7
 8004364:	b289      	uxth	r1, r1
 8004366:	8019      	strh	r1, [r3, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004368:	b291      	uxth	r1, r2
 800436a:	e51e      	b.n	8003daa <HAL_PCD_IRQHandler+0x55a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800436c:	271f      	movs	r7, #31
 800436e:	4017      	ands	r7, r2
 8004370:	003e      	movs	r6, r7
 8004372:	4277      	negs	r7, r6
 8004374:	4177      	adcs	r7, r6
 8004376:	0951      	lsrs	r1, r2, #5
 8004378:	1bc9      	subs	r1, r1, r7
 800437a:	881f      	ldrh	r7, [r3, #0]
 800437c:	0289      	lsls	r1, r1, #10
 800437e:	430f      	orrs	r7, r1
 8004380:	4902      	ldr	r1, [pc, #8]	@ (800438c <HAL_PCD_IRQHandler+0xb3c>)
 8004382:	4339      	orrs	r1, r7
 8004384:	b289      	uxth	r1, r1
 8004386:	8019      	strh	r1, [r3, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004388:	b291      	uxth	r1, r2
 800438a:	e761      	b.n	8004250 <HAL_PCD_IRQHandler+0xa00>
 800438c:	ffff8000 	.word	0xffff8000

08004390 <HAL_PCD_SetAddress>:
{
 8004390:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8004392:	25a4      	movs	r5, #164	@ 0xa4
 8004394:	00ad      	lsls	r5, r5, #2
 8004396:	5d43      	ldrb	r3, [r0, r5]
{
 8004398:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800439a:	2b01      	cmp	r3, #1
 800439c:	d009      	beq.n	80043b2 <HAL_PCD_SetAddress+0x22>
 800439e:	2301      	movs	r3, #1
 80043a0:	5543      	strb	r3, [r0, r5]
  hpcd->USB_Address = address;
 80043a2:	7301      	strb	r1, [r0, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043a4:	6800      	ldr	r0, [r0, #0]
 80043a6:	f001 fe85 	bl	80060b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043aa:	2300      	movs	r3, #0
  return HAL_OK;
 80043ac:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 80043ae:	5563      	strb	r3, [r4, r5]
}
 80043b0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80043b2:	2002      	movs	r0, #2
 80043b4:	e7fc      	b.n	80043b0 <HAL_PCD_SetAddress+0x20>
 80043b6:	46c0      	nop			@ (mov r8, r8)

080043b8 <HAL_PCD_EP_Open>:
{
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	0005      	movs	r5, r0
 80043bc:	2007      	movs	r0, #7
 80043be:	4008      	ands	r0, r1
 80043c0:	0084      	lsls	r4, r0, #2
 80043c2:	1824      	adds	r4, r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80043c4:	b249      	sxtb	r1, r1
 80043c6:	00e4      	lsls	r4, r4, #3
 80043c8:	2900      	cmp	r1, #0
 80043ca:	db1d      	blt.n	8004408 <HAL_PCD_EP_Open+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043cc:	0021      	movs	r1, r4
    ep->is_in = 0U;
 80043ce:	2600      	movs	r6, #0
 80043d0:	192c      	adds	r4, r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d2:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 80043d4:	3452      	adds	r4, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d6:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 80043d8:	34ff      	adds	r4, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043da:	1869      	adds	r1, r5, r1
    ep->is_in = 0U;
 80043dc:	7026      	strb	r6, [r4, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043de:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 80043e0:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80043e2:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d101      	bne.n	80043ec <HAL_PCD_EP_Open+0x34>
    ep->data_pid_start = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80043ec:	24a4      	movs	r4, #164	@ 0xa4
 80043ee:	00a4      	lsls	r4, r4, #2
 80043f0:	5d2b      	ldrb	r3, [r5, r4]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d00f      	beq.n	8004416 <HAL_PCD_EP_Open+0x5e>
 80043f6:	2301      	movs	r3, #1
 80043f8:	552b      	strb	r3, [r5, r4]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043fa:	6828      	ldr	r0, [r5, #0]
 80043fc:	f001 f91a 	bl	8005634 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004400:	2300      	movs	r3, #0
  return ret;
 8004402:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 8004404:	552b      	strb	r3, [r5, r4]
}
 8004406:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004408:	0021      	movs	r1, r4
    ep->is_in = 1U;
 800440a:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800440c:	3110      	adds	r1, #16
    ep->is_in = 1U;
 800440e:	192c      	adds	r4, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004410:	1869      	adds	r1, r5, r1
    ep->is_in = 1U;
 8004412:	7466      	strb	r6, [r4, #17]
 8004414:	e7e3      	b.n	80043de <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8004416:	2002      	movs	r0, #2
 8004418:	e7f5      	b.n	8004406 <HAL_PCD_EP_Open+0x4e>
 800441a:	46c0      	nop			@ (mov r8, r8)

0800441c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800441c:	2207      	movs	r2, #7
 800441e:	400a      	ands	r2, r1
 8004420:	0093      	lsls	r3, r2, #2
 8004422:	189b      	adds	r3, r3, r2
 8004424:	b249      	sxtb	r1, r1
{
 8004426:	b570      	push	{r4, r5, r6, lr}
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	0004      	movs	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800442c:	2900      	cmp	r1, #0
 800442e:	db17      	blt.n	8004460 <HAL_PCD_EP_Close+0x44>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004430:	0019      	movs	r1, r3
 8004432:	3151      	adds	r1, #81	@ 0x51
 8004434:	31ff      	adds	r1, #255	@ 0xff
 8004436:	1841      	adds	r1, r0, r1
    ep->is_in = 0U;
 8004438:	18c3      	adds	r3, r0, r3
  __HAL_LOCK(hpcd);
 800443a:	25a4      	movs	r5, #164	@ 0xa4
    ep->is_in = 0U;
 800443c:	2000      	movs	r0, #0
 800443e:	3352      	adds	r3, #82	@ 0x52
 8004440:	33ff      	adds	r3, #255	@ 0xff
 8004442:	7018      	strb	r0, [r3, #0]
  __HAL_LOCK(hpcd);
 8004444:	00ad      	lsls	r5, r5, #2
  ep->num = ep_addr & EP_ADDR_MSK;
 8004446:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004448:	5d63      	ldrb	r3, [r4, r5]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d014      	beq.n	8004478 <HAL_PCD_EP_Close+0x5c>
 800444e:	2301      	movs	r3, #1
 8004450:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004452:	6820      	ldr	r0, [r4, #0]
 8004454:	f001 fa4c 	bl	80058f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004458:	2300      	movs	r3, #0
  return HAL_OK;
 800445a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 800445c:	5563      	strb	r3, [r4, r5]
}
 800445e:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004460:	0019      	movs	r1, r3
 8004462:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8004464:	18c3      	adds	r3, r0, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004466:	1841      	adds	r1, r0, r1
  __HAL_LOCK(hpcd);
 8004468:	25a4      	movs	r5, #164	@ 0xa4
    ep->is_in = 1U;
 800446a:	2001      	movs	r0, #1
  __HAL_LOCK(hpcd);
 800446c:	00ad      	lsls	r5, r5, #2
    ep->is_in = 1U;
 800446e:	7458      	strb	r0, [r3, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004470:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004472:	5d63      	ldrb	r3, [r4, r5]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d1ea      	bne.n	800444e <HAL_PCD_EP_Close+0x32>
 8004478:	2002      	movs	r0, #2
 800447a:	e7f0      	b.n	800445e <HAL_PCD_EP_Close+0x42>

0800447c <HAL_PCD_EP_Receive>:
{
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	2407      	movs	r4, #7
}
 8004480:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 8004482:	008c      	lsls	r4, r1, #2
 8004484:	1864      	adds	r4, r4, r1
 8004486:	00e4      	lsls	r4, r4, #3
 8004488:	1905      	adds	r5, r0, r4
 800448a:	002e      	movs	r6, r5
 800448c:	3665      	adds	r6, #101	@ 0x65
 800448e:	36ff      	adds	r6, #255	@ 0xff
 8004490:	6032      	str	r2, [r6, #0]
  ep->xfer_len = len;
 8004492:	002a      	movs	r2, r5
 8004494:	3269      	adds	r2, #105	@ 0x69
 8004496:	32ff      	adds	r2, #255	@ 0xff
 8004498:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 800449a:	2300      	movs	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800449c:	3551      	adds	r5, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800449e:	3451      	adds	r4, #81	@ 0x51
  ep->xfer_count = 0U;
 80044a0:	6053      	str	r3, [r2, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a2:	35ff      	adds	r5, #255	@ 0xff
  ep->is_in = 0U;
 80044a4:	3a17      	subs	r2, #23
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a6:	34ff      	adds	r4, #255	@ 0xff
  ep->is_in = 0U;
 80044a8:	7013      	strb	r3, [r2, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044aa:	7029      	strb	r1, [r5, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044ac:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044ae:	6800      	ldr	r0, [r0, #0]
 80044b0:	f001 faa4 	bl	80059fc <USB_EPStartXfer>
}
 80044b4:	2000      	movs	r0, #0
 80044b6:	bd70      	pop	{r4, r5, r6, pc}

080044b8 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80044b8:	2307      	movs	r3, #7
 80044ba:	400b      	ands	r3, r1
 80044bc:	0099      	lsls	r1, r3, #2
 80044be:	18c9      	adds	r1, r1, r3
 80044c0:	00c9      	lsls	r1, r1, #3
 80044c2:	1840      	adds	r0, r0, r1
 80044c4:	306d      	adds	r0, #109	@ 0x6d
 80044c6:	30ff      	adds	r0, #255	@ 0xff
 80044c8:	6800      	ldr	r0, [r0, #0]
}
 80044ca:	4770      	bx	lr

080044cc <HAL_PCD_EP_Transmit>:
{
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	2407      	movs	r4, #7
}
 80044d0:	4021      	ands	r1, r4
 80044d2:	008c      	lsls	r4, r1, #2
  ep->xfer_buff = pBuf;
 80044d4:	1864      	adds	r4, r4, r1
 80044d6:	00e4      	lsls	r4, r4, #3
 80044d8:	1905      	adds	r5, r0, r4
  ep->xfer_fill_db = 1U;
 80044da:	002e      	movs	r6, r5
  ep->xfer_buff = pBuf;
 80044dc:	626a      	str	r2, [r5, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80044de:	2201      	movs	r2, #1
 80044e0:	3634      	adds	r6, #52	@ 0x34
  ep->xfer_len = len;
 80044e2:	62ab      	str	r3, [r5, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 80044e4:	7032      	strb	r2, [r6, #0]
  ep->xfer_len_db = len;
 80044e6:	632b      	str	r3, [r5, #48]	@ 0x30
  ep->xfer_count = 0U;
 80044e8:	2300      	movs	r3, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ea:	3410      	adds	r4, #16
  ep->num = ep_addr & EP_ADDR_MSK;
 80044ec:	7429      	strb	r1, [r5, #16]
  ep->xfer_count = 0U;
 80044ee:	62eb      	str	r3, [r5, #44]	@ 0x2c
  ep->is_in = 1U;
 80044f0:	746a      	strb	r2, [r5, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044f2:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044f4:	6800      	ldr	r0, [r0, #0]
 80044f6:	f001 fa81 	bl	80059fc <USB_EPStartXfer>
}
 80044fa:	2000      	movs	r0, #0
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
 80044fe:	46c0      	nop			@ (mov r8, r8)

08004500 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004500:	2307      	movs	r3, #7
{
 8004502:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004504:	7902      	ldrb	r2, [r0, #4]
{
 8004506:	0004      	movs	r4, r0
 8004508:	400b      	ands	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800450a:	429a      	cmp	r2, r3
 800450c:	d331      	bcc.n	8004572 <HAL_PCD_EP_SetStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800450e:	b24a      	sxtb	r2, r1
 8004510:	2a00      	cmp	r2, #0
 8004512:	db1b      	blt.n	800454c <HAL_PCD_EP_SetStall+0x4c>
    ep = &hpcd->OUT_ep[ep_addr];
 8004514:	008a      	lsls	r2, r1, #2
 8004516:	1852      	adds	r2, r2, r1
 8004518:	00d2      	lsls	r2, r2, #3
 800451a:	0011      	movs	r1, r2
 800451c:	3151      	adds	r1, #81	@ 0x51
 800451e:	31ff      	adds	r1, #255	@ 0xff
 8004520:	1841      	adds	r1, r0, r1
    ep->is_in = 0U;
 8004522:	1882      	adds	r2, r0, r2
 8004524:	2000      	movs	r0, #0
 8004526:	3252      	adds	r2, #82	@ 0x52
 8004528:	32ff      	adds	r2, #255	@ 0xff
 800452a:	7010      	strb	r0, [r2, #0]
  __HAL_LOCK(hpcd);
 800452c:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 800452e:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004530:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 1U;
 8004532:	708a      	strb	r2, [r1, #2]
  __HAL_LOCK(hpcd);
 8004534:	00ad      	lsls	r5, r5, #2
 8004536:	5d63      	ldrb	r3, [r4, r5]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d018      	beq.n	800456e <HAL_PCD_EP_SetStall+0x6e>
 800453c:	5562      	strb	r2, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800453e:	6820      	ldr	r0, [r4, #0]
 8004540:	f001 fd54 	bl	8005fec <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8004544:	2300      	movs	r3, #0
  return HAL_OK;
 8004546:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 8004548:	5563      	strb	r3, [r4, r5]
}
 800454a:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800454c:	009a      	lsls	r2, r3, #2
 800454e:	18d2      	adds	r2, r2, r3
 8004550:	00d2      	lsls	r2, r2, #3
 8004552:	0011      	movs	r1, r2
 8004554:	3110      	adds	r1, #16
 8004556:	1841      	adds	r1, r0, r1
    ep->is_in = 1U;
 8004558:	1882      	adds	r2, r0, r2
 800455a:	2001      	movs	r0, #1
  __HAL_LOCK(hpcd);
 800455c:	25a4      	movs	r5, #164	@ 0xa4
    ep->is_in = 1U;
 800455e:	7450      	strb	r0, [r2, #17]
  ep->is_stall = 1U;
 8004560:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004562:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 1U;
 8004564:	708a      	strb	r2, [r1, #2]
  __HAL_LOCK(hpcd);
 8004566:	00ad      	lsls	r5, r5, #2
 8004568:	5d63      	ldrb	r3, [r4, r5]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d1e6      	bne.n	800453c <HAL_PCD_EP_SetStall+0x3c>
 800456e:	2002      	movs	r0, #2
 8004570:	e7eb      	b.n	800454a <HAL_PCD_EP_SetStall+0x4a>
    return HAL_ERROR;
 8004572:	2001      	movs	r0, #1
 8004574:	e7e9      	b.n	800454a <HAL_PCD_EP_SetStall+0x4a>
 8004576:	46c0      	nop			@ (mov r8, r8)

08004578 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004578:	230f      	movs	r3, #15
{
 800457a:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800457c:	7902      	ldrb	r2, [r0, #4]
{
 800457e:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004580:	400b      	ands	r3, r1
 8004582:	429a      	cmp	r2, r3
 8004584:	d330      	bcc.n	80045e8 <HAL_PCD_EP_ClrStall+0x70>
  if ((0x80U & ep_addr) == 0x80U)
 8004586:	2207      	movs	r2, #7
 8004588:	400a      	ands	r2, r1
 800458a:	0093      	lsls	r3, r2, #2
 800458c:	189b      	adds	r3, r3, r2
 800458e:	b249      	sxtb	r1, r1
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	2900      	cmp	r1, #0
 8004594:	db18      	blt.n	80045c8 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004596:	0019      	movs	r1, r3
 8004598:	3151      	adds	r1, #81	@ 0x51
 800459a:	31ff      	adds	r1, #255	@ 0xff
 800459c:	1841      	adds	r1, r0, r1
    ep->is_in = 0U;
 800459e:	18c3      	adds	r3, r0, r3
  ep->is_stall = 0U;
 80045a0:	2600      	movs	r6, #0
    ep->is_in = 0U;
 80045a2:	2000      	movs	r0, #0
  __HAL_LOCK(hpcd);
 80045a4:	25a4      	movs	r5, #164	@ 0xa4
    ep->is_in = 0U;
 80045a6:	3352      	adds	r3, #82	@ 0x52
 80045a8:	33ff      	adds	r3, #255	@ 0xff
 80045aa:	7018      	strb	r0, [r3, #0]
  __HAL_LOCK(hpcd);
 80045ac:	00ad      	lsls	r5, r5, #2
  ep->is_stall = 0U;
 80045ae:	708e      	strb	r6, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045b0:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80045b2:	5d63      	ldrb	r3, [r4, r5]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d015      	beq.n	80045e4 <HAL_PCD_EP_ClrStall+0x6c>
 80045b8:	2301      	movs	r3, #1
 80045ba:	5563      	strb	r3, [r4, r5]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045bc:	6820      	ldr	r0, [r4, #0]
 80045be:	f001 fd37 	bl	8006030 <USB_EPClearStall>
  return HAL_OK;
 80045c2:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 80045c4:	5566      	strb	r6, [r4, r5]
}
 80045c6:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c8:	0019      	movs	r1, r3
 80045ca:	3110      	adds	r1, #16
 80045cc:	1841      	adds	r1, r0, r1
    ep->is_in = 1U;
 80045ce:	18c3      	adds	r3, r0, r3
  ep->is_stall = 0U;
 80045d0:	2600      	movs	r6, #0
    ep->is_in = 1U;
 80045d2:	2001      	movs	r0, #1
  __HAL_LOCK(hpcd);
 80045d4:	25a4      	movs	r5, #164	@ 0xa4
    ep->is_in = 1U;
 80045d6:	7458      	strb	r0, [r3, #17]
  __HAL_LOCK(hpcd);
 80045d8:	00ad      	lsls	r5, r5, #2
  ep->is_stall = 0U;
 80045da:	708e      	strb	r6, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045dc:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80045de:	5d63      	ldrb	r3, [r4, r5]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d1e9      	bne.n	80045b8 <HAL_PCD_EP_ClrStall+0x40>
 80045e4:	2002      	movs	r0, #2
 80045e6:	e7ee      	b.n	80045c6 <HAL_PCD_EP_ClrStall+0x4e>
    return HAL_ERROR;
 80045e8:	2001      	movs	r0, #1
 80045ea:	e7ec      	b.n	80045c6 <HAL_PCD_EP_ClrStall+0x4e>

080045ec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80045ec:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045ee:	060c      	lsls	r4, r1, #24
 80045f0:	d50e      	bpl.n	8004610 <HAL_PCDEx_PMAConfig+0x24>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f2:	2407      	movs	r4, #7
 80045f4:	400c      	ands	r4, r1
 80045f6:	00a1      	lsls	r1, r4, #2
 80045f8:	1909      	adds	r1, r1, r4
 80045fa:	00c9      	lsls	r1, r1, #3
 80045fc:	3110      	adds	r1, #16
 80045fe:	1840      	adds	r0, r0, r1
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004600:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8004602:	2a00      	cmp	r2, #0
 8004604:	d10d      	bne.n	8004622 <HAL_PCDEx_PMAConfig+0x36>
    ep->doublebuffer = 0U;
 8004606:	2300      	movs	r3, #0
    ep->pmaadress = (uint16_t)pmaadress;
 8004608:	80c1      	strh	r1, [r0, #6]
 800460a:	7303      	strb	r3, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800460c:	2000      	movs	r0, #0
 800460e:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8004610:	008c      	lsls	r4, r1, #2
 8004612:	1861      	adds	r1, r4, r1
 8004614:	00c9      	lsls	r1, r1, #3
 8004616:	3151      	adds	r1, #81	@ 0x51
 8004618:	31ff      	adds	r1, #255	@ 0xff
 800461a:	1840      	adds	r0, r0, r1
    ep->pmaadress = (uint16_t)pmaadress;
 800461c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800461e:	2a00      	cmp	r2, #0
 8004620:	d0f1      	beq.n	8004606 <HAL_PCDEx_PMAConfig+0x1a>
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004622:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8004624:	2301      	movs	r3, #1
 8004626:	e7f0      	b.n	800460a <HAL_PCDEx_PMAConfig+0x1e>

08004628 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
  hpcd->lpm_active = 1U;
 8004628:	23b4      	movs	r3, #180	@ 0xb4
 800462a:	2101      	movs	r1, #1
 800462c:	009b      	lsls	r3, r3, #2
  USB_TypeDef *USBx = hpcd->Instance;
 800462e:	6802      	ldr	r2, [r0, #0]
  hpcd->lpm_active = 1U;
 8004630:	50c1      	str	r1, [r0, r3]
  hpcd->LPM_State = LPM_L0;
 8004632:	2100      	movs	r1, #0
 8004634:	3b08      	subs	r3, #8
 8004636:	54c1      	strb	r1, [r0, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004638:	2354      	movs	r3, #84	@ 0x54
 800463a:	2001      	movs	r0, #1
 800463c:	5ad1      	ldrh	r1, [r2, r3]
 800463e:	4301      	orrs	r1, r0
 8004640:	52d1      	strh	r1, [r2, r3]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004642:	5ad1      	ldrh	r1, [r2, r3]
 8004644:	3001      	adds	r0, #1
 8004646:	4301      	orrs	r1, r0
 8004648:	52d1      	strh	r1, [r2, r3]

  return HAL_OK;
}
 800464a:	2000      	movs	r0, #0
 800464c:	4770      	bx	lr
 800464e:	46c0      	nop			@ (mov r8, r8)

08004650 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004650:	4770      	bx	lr
 8004652:	46c0      	nop			@ (mov r8, r8)

08004654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004656:	46ce      	mov	lr, r9
 8004658:	4647      	mov	r7, r8
 800465a:	b580      	push	{r7, lr}
 800465c:	0004      	movs	r4, r0
 800465e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004660:	2800      	cmp	r0, #0
 8004662:	d100      	bne.n	8004666 <HAL_RCC_OscConfig+0x12>
 8004664:	e0f1      	b.n	800484a <HAL_RCC_OscConfig+0x1f6>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004666:	6803      	ldr	r3, [r0, #0]
 8004668:	07da      	lsls	r2, r3, #31
 800466a:	d52f      	bpl.n	80046cc <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800466c:	210c      	movs	r1, #12
 800466e:	48c2      	ldr	r0, [pc, #776]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 8004670:	6842      	ldr	r2, [r0, #4]
 8004672:	400a      	ands	r2, r1
 8004674:	2a04      	cmp	r2, #4
 8004676:	d100      	bne.n	800467a <HAL_RCC_OscConfig+0x26>
 8004678:	e105      	b.n	8004886 <HAL_RCC_OscConfig+0x232>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800467a:	6842      	ldr	r2, [r0, #4]
 800467c:	4011      	ands	r1, r2
 800467e:	2908      	cmp	r1, #8
 8004680:	d100      	bne.n	8004684 <HAL_RCC_OscConfig+0x30>
 8004682:	e0f7      	b.n	8004874 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004684:	6863      	ldr	r3, [r4, #4]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d100      	bne.n	800468c <HAL_RCC_OscConfig+0x38>
 800468a:	e106      	b.n	800489a <HAL_RCC_OscConfig+0x246>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d100      	bne.n	8004692 <HAL_RCC_OscConfig+0x3e>
 8004690:	e128      	b.n	80048e4 <HAL_RCC_OscConfig+0x290>
 8004692:	2b05      	cmp	r3, #5
 8004694:	d100      	bne.n	8004698 <HAL_RCC_OscConfig+0x44>
 8004696:	e22a      	b.n	8004aee <HAL_RCC_OscConfig+0x49a>
 8004698:	4bb7      	ldr	r3, [pc, #732]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 800469a:	49b8      	ldr	r1, [pc, #736]	@ (800497c <HAL_RCC_OscConfig+0x328>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	400a      	ands	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	49b6      	ldr	r1, [pc, #728]	@ (8004980 <HAL_RCC_OscConfig+0x32c>)
 80046a6:	400a      	ands	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fd fdc7 	bl	800223c <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 80046b0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	4fb1      	ldr	r7, [pc, #708]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 80046b4:	02b6      	lsls	r6, r6, #10
 80046b6:	e005      	b.n	80046c4 <HAL_RCC_OscConfig+0x70>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fd fdc0 	bl	800223c <HAL_GetTick>
 80046bc:	1b40      	subs	r0, r0, r5
 80046be:	2864      	cmp	r0, #100	@ 0x64
 80046c0:	d900      	bls.n	80046c4 <HAL_RCC_OscConfig+0x70>
 80046c2:	e10d      	b.n	80048e0 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	4233      	tst	r3, r6
 80046c8:	d0f6      	beq.n	80046b8 <HAL_RCC_OscConfig+0x64>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	079a      	lsls	r2, r3, #30
 80046ce:	d529      	bpl.n	8004724 <HAL_RCC_OscConfig+0xd0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046d0:	220c      	movs	r2, #12
 80046d2:	49a9      	ldr	r1, [pc, #676]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 80046d4:	6848      	ldr	r0, [r1, #4]
 80046d6:	4202      	tst	r2, r0
 80046d8:	d100      	bne.n	80046dc <HAL_RCC_OscConfig+0x88>
 80046da:	e0af      	b.n	800483c <HAL_RCC_OscConfig+0x1e8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046dc:	6848      	ldr	r0, [r1, #4]
 80046de:	4002      	ands	r2, r0
 80046e0:	2a08      	cmp	r2, #8
 80046e2:	d100      	bne.n	80046e6 <HAL_RCC_OscConfig+0x92>
 80046e4:	e0a1      	b.n	800482a <HAL_RCC_OscConfig+0x1d6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046e6:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e8:	4da3      	ldr	r5, [pc, #652]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d100      	bne.n	80046f0 <HAL_RCC_OscConfig+0x9c>
 80046ee:	e130      	b.n	8004952 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_HSI_ENABLE();
 80046f0:	2201      	movs	r2, #1
 80046f2:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f4:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80046f6:	4313      	orrs	r3, r2
 80046f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80046fa:	f7fd fd9f 	bl	800223c <HAL_GetTick>
 80046fe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004700:	e005      	b.n	800470e <HAL_RCC_OscConfig+0xba>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004702:	f7fd fd9b 	bl	800223c <HAL_GetTick>
 8004706:	1b80      	subs	r0, r0, r6
 8004708:	2802      	cmp	r0, #2
 800470a:	d900      	bls.n	800470e <HAL_RCC_OscConfig+0xba>
 800470c:	e0e8      	b.n	80048e0 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470e:	682b      	ldr	r3, [r5, #0]
 8004710:	421f      	tst	r7, r3
 8004712:	d0f6      	beq.n	8004702 <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004714:	21f8      	movs	r1, #248	@ 0xf8
 8004716:	682a      	ldr	r2, [r5, #0]
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	438a      	bics	r2, r1
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4313      	orrs	r3, r2
 8004720:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	071a      	lsls	r2, r3, #28
 8004726:	d42d      	bmi.n	8004784 <HAL_RCC_OscConfig+0x130>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004728:	075a      	lsls	r2, r3, #29
 800472a:	d544      	bpl.n	80047b6 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472c:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004730:	4b91      	ldr	r3, [pc, #580]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 8004732:	0552      	lsls	r2, r2, #21
 8004734:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004736:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004738:	4211      	tst	r1, r2
 800473a:	d108      	bne.n	800474e <HAL_RCC_OscConfig+0xfa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473c:	69d9      	ldr	r1, [r3, #28]
 800473e:	4311      	orrs	r1, r2
 8004740:	61d9      	str	r1, [r3, #28]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4013      	ands	r3, r2
 8004746:	9301      	str	r3, [sp, #4]
 8004748:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800474a:	2301      	movs	r3, #1
 800474c:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474e:	2780      	movs	r7, #128	@ 0x80
 8004750:	4e8c      	ldr	r6, [pc, #560]	@ (8004984 <HAL_RCC_OscConfig+0x330>)
 8004752:	007f      	lsls	r7, r7, #1
 8004754:	6833      	ldr	r3, [r6, #0]
 8004756:	423b      	tst	r3, r7
 8004758:	d100      	bne.n	800475c <HAL_RCC_OscConfig+0x108>
 800475a:	e0a5      	b.n	80048a8 <HAL_RCC_OscConfig+0x254>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475c:	68a3      	ldr	r3, [r4, #8]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d100      	bne.n	8004764 <HAL_RCC_OscConfig+0x110>
 8004762:	e115      	b.n	8004990 <HAL_RCC_OscConfig+0x33c>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d100      	bne.n	800476a <HAL_RCC_OscConfig+0x116>
 8004768:	e0d5      	b.n	8004916 <HAL_RCC_OscConfig+0x2c2>
 800476a:	2b05      	cmp	r3, #5
 800476c:	d100      	bne.n	8004770 <HAL_RCC_OscConfig+0x11c>
 800476e:	e144      	b.n	80049fa <HAL_RCC_OscConfig+0x3a6>
 8004770:	2101      	movs	r1, #1
 8004772:	4b81      	ldr	r3, [pc, #516]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	438a      	bics	r2, r1
 8004778:	621a      	str	r2, [r3, #32]
 800477a:	6a1a      	ldr	r2, [r3, #32]
 800477c:	3103      	adds	r1, #3
 800477e:	438a      	bics	r2, r1
 8004780:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004782:	e109      	b.n	8004998 <HAL_RCC_OscConfig+0x344>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004784:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8004786:	4d7c      	ldr	r5, [pc, #496]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004788:	2b00      	cmp	r3, #0
 800478a:	d060      	beq.n	800484e <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_LSI_ENABLE();
 800478c:	2201      	movs	r2, #1
 800478e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004790:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8004792:	4313      	orrs	r3, r2
 8004794:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8004796:	f7fd fd51 	bl	800223c <HAL_GetTick>
 800479a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479c:	e005      	b.n	80047aa <HAL_RCC_OscConfig+0x156>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479e:	f7fd fd4d 	bl	800223c <HAL_GetTick>
 80047a2:	1b80      	subs	r0, r0, r6
 80047a4:	2802      	cmp	r0, #2
 80047a6:	d900      	bls.n	80047aa <HAL_RCC_OscConfig+0x156>
 80047a8:	e09a      	b.n	80048e0 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80047ac:	421f      	tst	r7, r3
 80047ae:	d0f6      	beq.n	800479e <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	075a      	lsls	r2, r3, #29
 80047b4:	d4ba      	bmi.n	800472c <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80047b6:	06db      	lsls	r3, r3, #27
 80047b8:	d512      	bpl.n	80047e0 <HAL_RCC_OscConfig+0x18c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80047ba:	6963      	ldr	r3, [r4, #20]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d100      	bne.n	80047c2 <HAL_RCC_OscConfig+0x16e>
 80047c0:	e140      	b.n	8004a44 <HAL_RCC_OscConfig+0x3f0>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80047c2:	3305      	adds	r3, #5
 80047c4:	d000      	beq.n	80047c8 <HAL_RCC_OscConfig+0x174>
 80047c6:	e0f9      	b.n	80049bc <HAL_RCC_OscConfig+0x368>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80047c8:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80047ca:	20f8      	movs	r0, #248	@ 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80047cc:	4a6a      	ldr	r2, [pc, #424]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 80047ce:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80047d0:	438b      	bics	r3, r1
 80047d2:	6353      	str	r3, [r2, #52]	@ 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80047d4:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80047d6:	69a3      	ldr	r3, [r4, #24]
 80047d8:	4381      	bics	r1, r0
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	430b      	orrs	r3, r1
 80047de:	6353      	str	r3, [r2, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e0:	6a23      	ldr	r3, [r4, #32]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01b      	beq.n	800481e <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047e6:	220c      	movs	r2, #12
 80047e8:	4d63      	ldr	r5, [pc, #396]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 80047ea:	6869      	ldr	r1, [r5, #4]
 80047ec:	400a      	ands	r2, r1
 80047ee:	2a08      	cmp	r2, #8
 80047f0:	d100      	bne.n	80047f4 <HAL_RCC_OscConfig+0x1a0>
 80047f2:	e10c      	b.n	8004a0e <HAL_RCC_OscConfig+0x3ba>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d100      	bne.n	80047fa <HAL_RCC_OscConfig+0x1a6>
 80047f8:	e142      	b.n	8004a80 <HAL_RCC_OscConfig+0x42c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	4a62      	ldr	r2, [pc, #392]	@ (8004988 <HAL_RCC_OscConfig+0x334>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047fe:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8004800:	4013      	ands	r3, r2
 8004802:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004804:	f7fd fd1a 	bl	800223c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004808:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800480a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480c:	e004      	b.n	8004818 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480e:	f7fd fd15 	bl	800223c <HAL_GetTick>
 8004812:	1b00      	subs	r0, r0, r4
 8004814:	2802      	cmp	r0, #2
 8004816:	d863      	bhi.n	80048e0 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	4233      	tst	r3, r6
 800481c:	d1f7      	bne.n	800480e <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }

  return HAL_OK;
 800481e:	2000      	movs	r0, #0
}
 8004820:	b003      	add	sp, #12
 8004822:	bcc0      	pop	{r6, r7}
 8004824:	46b9      	mov	r9, r7
 8004826:	46b0      	mov	r8, r6
 8004828:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800482a:	684a      	ldr	r2, [r1, #4]
 800482c:	21c0      	movs	r1, #192	@ 0xc0
 800482e:	0249      	lsls	r1, r1, #9
 8004830:	400a      	ands	r2, r1
 8004832:	2180      	movs	r1, #128	@ 0x80
 8004834:	0209      	lsls	r1, r1, #8
 8004836:	428a      	cmp	r2, r1
 8004838:	d000      	beq.n	800483c <HAL_RCC_OscConfig+0x1e8>
 800483a:	e754      	b.n	80046e6 <HAL_RCC_OscConfig+0x92>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483c:	4a4e      	ldr	r2, [pc, #312]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	0792      	lsls	r2, r2, #30
 8004842:	d541      	bpl.n	80048c8 <HAL_RCC_OscConfig+0x274>
 8004844:	68e2      	ldr	r2, [r4, #12]
 8004846:	2a01      	cmp	r2, #1
 8004848:	d03e      	beq.n	80048c8 <HAL_RCC_OscConfig+0x274>
    return HAL_ERROR;
 800484a:	2001      	movs	r0, #1
 800484c:	e7e8      	b.n	8004820 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_DISABLE();
 800484e:	2201      	movs	r2, #1
 8004850:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004852:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8004854:	4393      	bics	r3, r2
 8004856:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8004858:	f7fd fcf0 	bl	800223c <HAL_GetTick>
 800485c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485e:	e004      	b.n	800486a <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004860:	f7fd fcec 	bl	800223c <HAL_GetTick>
 8004864:	1b80      	subs	r0, r0, r6
 8004866:	2802      	cmp	r0, #2
 8004868:	d83a      	bhi.n	80048e0 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800486c:	421f      	tst	r7, r3
 800486e:	d1f7      	bne.n	8004860 <HAL_RCC_OscConfig+0x20c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	e79e      	b.n	80047b2 <HAL_RCC_OscConfig+0x15e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004874:	21c0      	movs	r1, #192	@ 0xc0
 8004876:	6842      	ldr	r2, [r0, #4]
 8004878:	0249      	lsls	r1, r1, #9
 800487a:	400a      	ands	r2, r1
 800487c:	2180      	movs	r1, #128	@ 0x80
 800487e:	0249      	lsls	r1, r1, #9
 8004880:	428a      	cmp	r2, r1
 8004882:	d000      	beq.n	8004886 <HAL_RCC_OscConfig+0x232>
 8004884:	e6fe      	b.n	8004684 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004886:	4a3c      	ldr	r2, [pc, #240]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	0392      	lsls	r2, r2, #14
 800488c:	d400      	bmi.n	8004890 <HAL_RCC_OscConfig+0x23c>
 800488e:	e71d      	b.n	80046cc <HAL_RCC_OscConfig+0x78>
 8004890:	6862      	ldr	r2, [r4, #4]
 8004892:	2a00      	cmp	r2, #0
 8004894:	d000      	beq.n	8004898 <HAL_RCC_OscConfig+0x244>
 8004896:	e719      	b.n	80046cc <HAL_RCC_OscConfig+0x78>
 8004898:	e7d7      	b.n	800484a <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800489a:	2380      	movs	r3, #128	@ 0x80
 800489c:	4a36      	ldr	r2, [pc, #216]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 800489e:	025b      	lsls	r3, r3, #9
 80048a0:	6811      	ldr	r1, [r2, #0]
 80048a2:	430b      	orrs	r3, r1
 80048a4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048a6:	e700      	b.n	80046aa <HAL_RCC_OscConfig+0x56>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048a8:	6833      	ldr	r3, [r6, #0]
 80048aa:	433b      	orrs	r3, r7
 80048ac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80048ae:	f7fd fcc5 	bl	800223c <HAL_GetTick>
 80048b2:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b4:	e004      	b.n	80048c0 <HAL_RCC_OscConfig+0x26c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b6:	f7fd fcc1 	bl	800223c <HAL_GetTick>
 80048ba:	1b40      	subs	r0, r0, r5
 80048bc:	2864      	cmp	r0, #100	@ 0x64
 80048be:	d80f      	bhi.n	80048e0 <HAL_RCC_OscConfig+0x28c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	6833      	ldr	r3, [r6, #0]
 80048c2:	423b      	tst	r3, r7
 80048c4:	d0f7      	beq.n	80048b6 <HAL_RCC_OscConfig+0x262>
 80048c6:	e749      	b.n	800475c <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c8:	25f8      	movs	r5, #248	@ 0xf8
 80048ca:	482b      	ldr	r0, [pc, #172]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 80048cc:	6922      	ldr	r2, [r4, #16]
 80048ce:	6801      	ldr	r1, [r0, #0]
 80048d0:	00d2      	lsls	r2, r2, #3
 80048d2:	43a9      	bics	r1, r5
 80048d4:	430a      	orrs	r2, r1
 80048d6:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d8:	071a      	lsls	r2, r3, #28
 80048da:	d400      	bmi.n	80048de <HAL_RCC_OscConfig+0x28a>
 80048dc:	e724      	b.n	8004728 <HAL_RCC_OscConfig+0xd4>
 80048de:	e751      	b.n	8004784 <HAL_RCC_OscConfig+0x130>
            return HAL_TIMEOUT;
 80048e0:	2003      	movs	r0, #3
 80048e2:	e79d      	b.n	8004820 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e4:	4d24      	ldr	r5, [pc, #144]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
 80048e6:	4a25      	ldr	r2, [pc, #148]	@ (800497c <HAL_RCC_OscConfig+0x328>)
 80048e8:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ec:	4013      	ands	r3, r2
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	4a23      	ldr	r2, [pc, #140]	@ (8004980 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f4:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f6:	4013      	ands	r3, r2
 80048f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80048fa:	f7fd fc9f 	bl	800223c <HAL_GetTick>
 80048fe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004900:	e004      	b.n	800490c <HAL_RCC_OscConfig+0x2b8>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004902:	f7fd fc9b 	bl	800223c <HAL_GetTick>
 8004906:	1b80      	subs	r0, r0, r6
 8004908:	2864      	cmp	r0, #100	@ 0x64
 800490a:	d8e9      	bhi.n	80048e0 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	423b      	tst	r3, r7
 8004910:	d1f7      	bne.n	8004902 <HAL_RCC_OscConfig+0x2ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	e6da      	b.n	80046cc <HAL_RCC_OscConfig+0x78>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004916:	2201      	movs	r2, #1
 8004918:	4e17      	ldr	r6, [pc, #92]	@ (8004978 <HAL_RCC_OscConfig+0x324>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	4d1c      	ldr	r5, [pc, #112]	@ (800498c <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491c:	6a33      	ldr	r3, [r6, #32]
 800491e:	4393      	bics	r3, r2
 8004920:	6233      	str	r3, [r6, #32]
 8004922:	6a33      	ldr	r3, [r6, #32]
 8004924:	3203      	adds	r2, #3
 8004926:	4393      	bics	r3, r2
 8004928:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800492a:	f7fd fc87 	bl	800223c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492e:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8004930:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004932:	4698      	mov	r8, r3
 8004934:	e004      	b.n	8004940 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fd fc81 	bl	800223c <HAL_GetTick>
 800493a:	1bc0      	subs	r0, r0, r7
 800493c:	42a8      	cmp	r0, r5
 800493e:	d8cf      	bhi.n	80048e0 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004940:	4642      	mov	r2, r8
 8004942:	6a33      	ldr	r3, [r6, #32]
 8004944:	421a      	tst	r2, r3
 8004946:	d1f6      	bne.n	8004936 <HAL_RCC_OscConfig+0x2e2>
    if(pwrclkchanged == SET)
 8004948:	464b      	mov	r3, r9
 800494a:	2b01      	cmp	r3, #1
 800494c:	d04e      	beq.n	80049ec <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	e731      	b.n	80047b6 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8004952:	2201      	movs	r2, #1
 8004954:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004956:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8004958:	4393      	bics	r3, r2
 800495a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800495c:	f7fd fc6e 	bl	800223c <HAL_GetTick>
 8004960:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004962:	e004      	b.n	800496e <HAL_RCC_OscConfig+0x31a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004964:	f7fd fc6a 	bl	800223c <HAL_GetTick>
 8004968:	1b80      	subs	r0, r0, r6
 800496a:	2802      	cmp	r0, #2
 800496c:	d8b8      	bhi.n	80048e0 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	682b      	ldr	r3, [r5, #0]
 8004970:	421f      	tst	r7, r3
 8004972:	d1f7      	bne.n	8004964 <HAL_RCC_OscConfig+0x310>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	e6d5      	b.n	8004724 <HAL_RCC_OscConfig+0xd0>
 8004978:	40021000 	.word	0x40021000
 800497c:	fffeffff 	.word	0xfffeffff
 8004980:	fffbffff 	.word	0xfffbffff
 8004984:	40007000 	.word	0x40007000
 8004988:	feffffff 	.word	0xfeffffff
 800498c:	00001388 	.word	0x00001388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004990:	495d      	ldr	r1, [pc, #372]	@ (8004b08 <HAL_RCC_OscConfig+0x4b4>)
 8004992:	6a0a      	ldr	r2, [r1, #32]
 8004994:	4313      	orrs	r3, r2
 8004996:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8004998:	f7fd fc50 	bl	800223c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b5a      	ldr	r3, [pc, #360]	@ (8004b08 <HAL_RCC_OscConfig+0x4b4>)
      tickstart = HAL_GetTick();
 800499e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a0:	4698      	mov	r8, r3
 80049a2:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	4d59      	ldr	r5, [pc, #356]	@ (8004b0c <HAL_RCC_OscConfig+0x4b8>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a6:	e004      	b.n	80049b2 <HAL_RCC_OscConfig+0x35e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a8:	f7fd fc48 	bl	800223c <HAL_GetTick>
 80049ac:	1b80      	subs	r0, r0, r6
 80049ae:	42a8      	cmp	r0, r5
 80049b0:	d896      	bhi.n	80048e0 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049b2:	4643      	mov	r3, r8
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	421f      	tst	r7, r3
 80049b8:	d0f6      	beq.n	80049a8 <HAL_RCC_OscConfig+0x354>
 80049ba:	e7c5      	b.n	8004948 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSI14ADC_DISABLE();
 80049bc:	2204      	movs	r2, #4
 80049be:	4d52      	ldr	r5, [pc, #328]	@ (8004b08 <HAL_RCC_OscConfig+0x4b4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80049c0:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80049c2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80049c4:	4313      	orrs	r3, r2
 80049c6:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 80049c8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80049ca:	3a03      	subs	r2, #3
 80049cc:	4393      	bics	r3, r2
 80049ce:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80049d0:	f7fd fc34 	bl	800223c <HAL_GetTick>
 80049d4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80049d6:	e005      	b.n	80049e4 <HAL_RCC_OscConfig+0x390>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80049d8:	f7fd fc30 	bl	800223c <HAL_GetTick>
 80049dc:	1b80      	subs	r0, r0, r6
 80049de:	2802      	cmp	r0, #2
 80049e0:	d900      	bls.n	80049e4 <HAL_RCC_OscConfig+0x390>
 80049e2:	e77d      	b.n	80048e0 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80049e4:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80049e6:	421f      	tst	r7, r3
 80049e8:	d1f6      	bne.n	80049d8 <HAL_RCC_OscConfig+0x384>
 80049ea:	e6f9      	b.n	80047e0 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ec:	4a46      	ldr	r2, [pc, #280]	@ (8004b08 <HAL_RCC_OscConfig+0x4b4>)
 80049ee:	4948      	ldr	r1, [pc, #288]	@ (8004b10 <HAL_RCC_OscConfig+0x4bc>)
 80049f0:	69d3      	ldr	r3, [r2, #28]
 80049f2:	400b      	ands	r3, r1
 80049f4:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	e6dd      	b.n	80047b6 <HAL_RCC_OscConfig+0x162>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049fa:	2104      	movs	r1, #4
 80049fc:	4b42      	ldr	r3, [pc, #264]	@ (8004b08 <HAL_RCC_OscConfig+0x4b4>)
 80049fe:	6a1a      	ldr	r2, [r3, #32]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	621a      	str	r2, [r3, #32]
 8004a04:	6a1a      	ldr	r2, [r3, #32]
 8004a06:	3903      	subs	r1, #3
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a0c:	e7c4      	b.n	8004998 <HAL_RCC_OscConfig+0x344>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d100      	bne.n	8004a14 <HAL_RCC_OscConfig+0x3c0>
 8004a12:	e71a      	b.n	800484a <HAL_RCC_OscConfig+0x1f6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a14:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 8004a16:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a18:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004a1a:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8004a1c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1e:	401a      	ands	r2, r3
 8004a20:	428a      	cmp	r2, r1
 8004a22:	d000      	beq.n	8004a26 <HAL_RCC_OscConfig+0x3d2>
 8004a24:	e711      	b.n	800484a <HAL_RCC_OscConfig+0x1f6>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a26:	220f      	movs	r2, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a28:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a2a:	4002      	ands	r2, r0
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a2c:	428a      	cmp	r2, r1
 8004a2e:	d000      	beq.n	8004a32 <HAL_RCC_OscConfig+0x3de>
 8004a30:	e70b      	b.n	800484a <HAL_RCC_OscConfig+0x1f6>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004a32:	22f0      	movs	r2, #240	@ 0xf0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a34:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004a36:	0392      	lsls	r2, r2, #14
 8004a38:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a3a:	1a18      	subs	r0, r3, r0
 8004a3c:	1e43      	subs	r3, r0, #1
 8004a3e:	4198      	sbcs	r0, r3
 8004a40:	b2c0      	uxtb	r0, r0
 8004a42:	e6ed      	b.n	8004820 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a44:	2104      	movs	r1, #4
 8004a46:	4d30      	ldr	r5, [pc, #192]	@ (8004b08 <HAL_RCC_OscConfig+0x4b4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a48:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a4a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	636a      	str	r2, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8004a50:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8004a52:	4313      	orrs	r3, r2
 8004a54:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8004a56:	f7fd fbf1 	bl	800223c <HAL_GetTick>
 8004a5a:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a5c:	e005      	b.n	8004a6a <HAL_RCC_OscConfig+0x416>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a5e:	f7fd fbed 	bl	800223c <HAL_GetTick>
 8004a62:	1b80      	subs	r0, r0, r6
 8004a64:	2802      	cmp	r0, #2
 8004a66:	d900      	bls.n	8004a6a <HAL_RCC_OscConfig+0x416>
 8004a68:	e73a      	b.n	80048e0 <HAL_RCC_OscConfig+0x28c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a6a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004a6c:	421f      	tst	r7, r3
 8004a6e:	d0f6      	beq.n	8004a5e <HAL_RCC_OscConfig+0x40a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a70:	21f8      	movs	r1, #248	@ 0xf8
 8004a72:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8004a74:	69a3      	ldr	r3, [r4, #24]
 8004a76:	438a      	bics	r2, r1
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	636b      	str	r3, [r5, #52]	@ 0x34
 8004a7e:	e6af      	b.n	80047e0 <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_PLL_DISABLE();
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	4a24      	ldr	r2, [pc, #144]	@ (8004b14 <HAL_RCC_OscConfig+0x4c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a84:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8004a86:	4013      	ands	r3, r2
 8004a88:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004a8a:	f7fd fbd7 	bl	800223c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a8e:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8004a90:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a92:	e005      	b.n	8004aa0 <HAL_RCC_OscConfig+0x44c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fd fbd2 	bl	800223c <HAL_GetTick>
 8004a98:	1b80      	subs	r0, r0, r6
 8004a9a:	2802      	cmp	r0, #2
 8004a9c:	d900      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x44c>
 8004a9e:	e71f      	b.n	80048e0 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	423b      	tst	r3, r7
 8004aa4:	d1f6      	bne.n	8004a94 <HAL_RCC_OscConfig+0x440>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aa6:	220f      	movs	r2, #15
 8004aa8:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aaa:	4e17      	ldr	r6, [pc, #92]	@ (8004b08 <HAL_RCC_OscConfig+0x4b4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004aac:	4393      	bics	r3, r2
 8004aae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8004ab4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004ab6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004ab8:	686a      	ldr	r2, [r5, #4]
 8004aba:	430b      	orrs	r3, r1
 8004abc:	4916      	ldr	r1, [pc, #88]	@ (8004b18 <HAL_RCC_OscConfig+0x4c4>)
 8004abe:	400a      	ands	r2, r1
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004ac4:	2380      	movs	r3, #128	@ 0x80
 8004ac6:	682a      	ldr	r2, [r5, #0]
 8004ac8:	045b      	lsls	r3, r3, #17
 8004aca:	4313      	orrs	r3, r2
 8004acc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ace:	f7fd fbb5 	bl	800223c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ad2:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004ad4:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ad6:	04ad      	lsls	r5, r5, #18
 8004ad8:	e005      	b.n	8004ae6 <HAL_RCC_OscConfig+0x492>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fd fbaf 	bl	800223c <HAL_GetTick>
 8004ade:	1b00      	subs	r0, r0, r4
 8004ae0:	2802      	cmp	r0, #2
 8004ae2:	d900      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x492>
 8004ae4:	e6fc      	b.n	80048e0 <HAL_RCC_OscConfig+0x28c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ae6:	6833      	ldr	r3, [r6, #0]
 8004ae8:	422b      	tst	r3, r5
 8004aea:	d0f6      	beq.n	8004ada <HAL_RCC_OscConfig+0x486>
 8004aec:	e697      	b.n	800481e <HAL_RCC_OscConfig+0x1ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aee:	2280      	movs	r2, #128	@ 0x80
 8004af0:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_RCC_OscConfig+0x4b4>)
 8004af2:	02d2      	lsls	r2, r2, #11
 8004af4:	6819      	ldr	r1, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	2280      	movs	r2, #128	@ 0x80
 8004afc:	6819      	ldr	r1, [r3, #0]
 8004afe:	0252      	lsls	r2, r2, #9
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b04:	e5d1      	b.n	80046aa <HAL_RCC_OscConfig+0x56>
 8004b06:	46c0      	nop			@ (mov r8, r8)
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	00001388 	.word	0x00001388
 8004b10:	efffffff 	.word	0xefffffff
 8004b14:	feffffff 	.word	0xfeffffff
 8004b18:	ffc27fff 	.word	0xffc27fff

08004b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1e:	46ce      	mov	lr, r9
 8004b20:	4647      	mov	r7, r8
 8004b22:	0004      	movs	r4, r0
 8004b24:	000d      	movs	r5, r1
 8004b26:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d00d      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4945      	ldr	r1, [pc, #276]	@ (8004c44 <HAL_RCC_ClockConfig+0x128>)
 8004b30:	680a      	ldr	r2, [r1, #0]
 8004b32:	401a      	ands	r2, r3
 8004b34:	42aa      	cmp	r2, r5
 8004b36:	d20c      	bcs.n	8004b52 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b38:	680a      	ldr	r2, [r1, #0]
 8004b3a:	439a      	bics	r2, r3
 8004b3c:	432a      	orrs	r2, r5
 8004b3e:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b40:	680a      	ldr	r2, [r1, #0]
 8004b42:	4013      	ands	r3, r2
 8004b44:	42ab      	cmp	r3, r5
 8004b46:	d004      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 8004b48:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8004b4a:	bcc0      	pop	{r6, r7}
 8004b4c:	46b9      	mov	r9, r7
 8004b4e:	46b0      	mov	r8, r6
 8004b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	079a      	lsls	r2, r3, #30
 8004b56:	d50e      	bpl.n	8004b76 <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	075a      	lsls	r2, r3, #29
 8004b5a:	d505      	bpl.n	8004b68 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b5c:	22e0      	movs	r2, #224	@ 0xe0
 8004b5e:	493a      	ldr	r1, [pc, #232]	@ (8004c48 <HAL_RCC_ClockConfig+0x12c>)
 8004b60:	00d2      	lsls	r2, r2, #3
 8004b62:	6848      	ldr	r0, [r1, #4]
 8004b64:	4302      	orrs	r2, r0
 8004b66:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b68:	20f0      	movs	r0, #240	@ 0xf0
 8004b6a:	4937      	ldr	r1, [pc, #220]	@ (8004c48 <HAL_RCC_ClockConfig+0x12c>)
 8004b6c:	684a      	ldr	r2, [r1, #4]
 8004b6e:	4382      	bics	r2, r0
 8004b70:	68a0      	ldr	r0, [r4, #8]
 8004b72:	4302      	orrs	r2, r0
 8004b74:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b76:	07db      	lsls	r3, r3, #31
 8004b78:	d522      	bpl.n	8004bc0 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7a:	4b33      	ldr	r3, [pc, #204]	@ (8004c48 <HAL_RCC_ClockConfig+0x12c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7c:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b80:	2a01      	cmp	r2, #1
 8004b82:	d059      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x11c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b84:	2a02      	cmp	r2, #2
 8004b86:	d054      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x116>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b88:	079b      	lsls	r3, r3, #30
 8004b8a:	d5dd      	bpl.n	8004b48 <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b8c:	2103      	movs	r1, #3
 8004b8e:	4e2e      	ldr	r6, [pc, #184]	@ (8004c48 <HAL_RCC_ClockConfig+0x12c>)
 8004b90:	6873      	ldr	r3, [r6, #4]
 8004b92:	438b      	bics	r3, r1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004b98:	f7fd fb50 	bl	800223c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9c:	230c      	movs	r3, #12
 8004b9e:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c4c <HAL_RCC_ClockConfig+0x130>)
    tickstart = HAL_GetTick();
 8004ba2:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba4:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba6:	e004      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ba8:	f7fd fb48 	bl	800223c <HAL_GetTick>
 8004bac:	1bc0      	subs	r0, r0, r7
 8004bae:	4548      	cmp	r0, r9
 8004bb0:	d845      	bhi.n	8004c3e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb2:	4643      	mov	r3, r8
 8004bb4:	6872      	ldr	r2, [r6, #4]
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d1f3      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	4a20      	ldr	r2, [pc, #128]	@ (8004c44 <HAL_RCC_ClockConfig+0x128>)
 8004bc4:	6813      	ldr	r3, [r2, #0]
 8004bc6:	400b      	ands	r3, r1
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	d905      	bls.n	8004bd8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bcc:	6813      	ldr	r3, [r2, #0]
 8004bce:	438b      	bics	r3, r1
 8004bd0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd2:	6813      	ldr	r3, [r2, #0]
 8004bd4:	4219      	tst	r1, r3
 8004bd6:	d1b7      	bne.n	8004b48 <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	6823      	ldr	r3, [r4, #0]
 8004bda:	075b      	lsls	r3, r3, #29
 8004bdc:	d506      	bpl.n	8004bec <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004bde:	4a1a      	ldr	r2, [pc, #104]	@ (8004c48 <HAL_RCC_ClockConfig+0x12c>)
 8004be0:	491b      	ldr	r1, [pc, #108]	@ (8004c50 <HAL_RCC_ClockConfig+0x134>)
 8004be2:	6853      	ldr	r3, [r2, #4]
 8004be4:	400b      	ands	r3, r1
 8004be6:	68e1      	ldr	r1, [r4, #12]
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bec:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8004bee:	4916      	ldr	r1, [pc, #88]	@ (8004c48 <HAL_RCC_ClockConfig+0x12c>)
 8004bf0:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	2a08      	cmp	r2, #8
 8004bf6:	d00e      	beq.n	8004c16 <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bf8:	4816      	ldr	r0, [pc, #88]	@ (8004c54 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bfa:	4b13      	ldr	r3, [pc, #76]	@ (8004c48 <HAL_RCC_ClockConfig+0x12c>)
 8004bfc:	4a16      	ldr	r2, [pc, #88]	@ (8004c58 <HAL_RCC_ClockConfig+0x13c>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	4916      	ldr	r1, [pc, #88]	@ (8004c5c <HAL_RCC_ClockConfig+0x140>)
 8004c02:	061b      	lsls	r3, r3, #24
 8004c04:	0f1b      	lsrs	r3, r3, #28
 8004c06:	5cd3      	ldrb	r3, [r2, r3]
 8004c08:	40d8      	lsrs	r0, r3
 8004c0a:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c0c:	2003      	movs	r0, #3
 8004c0e:	f7fd fad3 	bl	80021b8 <HAL_InitTick>
  return HAL_OK;
 8004c12:	2000      	movs	r0, #0
 8004c14:	e799      	b.n	8004b4a <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004c16:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c18:	3207      	adds	r2, #7
 8004c1a:	4911      	ldr	r1, [pc, #68]	@ (8004c60 <HAL_RCC_ClockConfig+0x144>)
 8004c1c:	0c9b      	lsrs	r3, r3, #18
 8004c1e:	4013      	ands	r3, r2
 8004c20:	5ccc      	ldrb	r4, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004c22:	4b10      	ldr	r3, [pc, #64]	@ (8004c64 <HAL_RCC_ClockConfig+0x148>)
 8004c24:	4002      	ands	r2, r0
 8004c26:	5c99      	ldrb	r1, [r3, r2]
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c28:	480a      	ldr	r0, [pc, #40]	@ (8004c54 <HAL_RCC_ClockConfig+0x138>)
 8004c2a:	f7fb fa7f 	bl	800012c <__udivsi3>
 8004c2e:	4360      	muls	r0, r4
 8004c30:	e7e3      	b.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c32:	019b      	lsls	r3, r3, #6
 8004c34:	d4aa      	bmi.n	8004b8c <HAL_RCC_ClockConfig+0x70>
 8004c36:	e787      	b.n	8004b48 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c38:	039b      	lsls	r3, r3, #14
 8004c3a:	d4a7      	bmi.n	8004b8c <HAL_RCC_ClockConfig+0x70>
 8004c3c:	e784      	b.n	8004b48 <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8004c3e:	2003      	movs	r0, #3
 8004c40:	e783      	b.n	8004b4a <HAL_RCC_ClockConfig+0x2e>
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	40022000 	.word	0x40022000
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	00001388 	.word	0x00001388
 8004c50:	fffff8ff 	.word	0xfffff8ff
 8004c54:	007a1200 	.word	0x007a1200
 8004c58:	08008a3c 	.word	0x08008a3c
 8004c5c:	20000014 	.word	0x20000014
 8004c60:	08008a5c 	.word	0x08008a5c
 8004c64:	08008a4c 	.word	0x08008a4c

08004c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c6a:	46ce      	mov	lr, r9
 8004c6c:	4647      	mov	r7, r8
 8004c6e:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c70:	6803      	ldr	r3, [r0, #0]
{
 8004c72:	0004      	movs	r4, r0
 8004c74:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c76:	03da      	lsls	r2, r3, #15
 8004c78:	d530      	bpl.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7a:	2280      	movs	r2, #128	@ 0x80
 8004c7c:	4b44      	ldr	r3, [pc, #272]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004c7e:	0552      	lsls	r2, r2, #21
 8004c80:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004c82:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c84:	4211      	tst	r1, r2
 8004c86:	d04b      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c88:	2680      	movs	r6, #128	@ 0x80
 8004c8a:	4d42      	ldr	r5, [pc, #264]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8004c8c:	0076      	lsls	r6, r6, #1
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	4233      	tst	r3, r6
 8004c92:	d053      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c94:	4d3e      	ldr	r5, [pc, #248]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004c96:	23c0      	movs	r3, #192	@ 0xc0
 8004c98:	6a2a      	ldr	r2, [r5, #32]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	0010      	movs	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c9e:	6861      	ldr	r1, [r4, #4]
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ca0:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ca2:	421a      	tst	r2, r3
 8004ca4:	d011      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004ca6:	400b      	ands	r3, r1
 8004ca8:	4283      	cmp	r3, r0
 8004caa:	d00e      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cac:	2080      	movs	r0, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cae:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cb0:	6a2e      	ldr	r6, [r5, #32]
 8004cb2:	0240      	lsls	r0, r0, #9
 8004cb4:	4330      	orrs	r0, r6
 8004cb6:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb8:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cba:	4a37      	ldr	r2, [pc, #220]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cbc:	4e37      	ldr	r6, [pc, #220]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cbe:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc0:	4030      	ands	r0, r6
 8004cc2:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cc4:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cc6:	07db      	lsls	r3, r3, #31
 8004cc8:	d44f      	bmi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x102>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cca:	4a31      	ldr	r2, [pc, #196]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004ccc:	4832      	ldr	r0, [pc, #200]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cce:	6a13      	ldr	r3, [r2, #32]
 8004cd0:	4003      	ands	r3, r0
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cd6:	2f01      	cmp	r7, #1
 8004cd8:	d041      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	07da      	lsls	r2, r3, #31
 8004cde:	d506      	bpl.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ce0:	2003      	movs	r0, #3
 8004ce2:	492b      	ldr	r1, [pc, #172]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004ce4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004ce6:	4382      	bics	r2, r0
 8004ce8:	68a0      	ldr	r0, [r4, #8]
 8004cea:	4302      	orrs	r2, r0
 8004cec:	630a      	str	r2, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cee:	069a      	lsls	r2, r3, #26
 8004cf0:	d506      	bpl.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf2:	2010      	movs	r0, #16
 8004cf4:	4926      	ldr	r1, [pc, #152]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004cf6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004cf8:	4382      	bics	r2, r0
 8004cfa:	68e0      	ldr	r0, [r4, #12]
 8004cfc:	4302      	orrs	r2, r0
 8004cfe:	630a      	str	r2, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d00:	039b      	lsls	r3, r3, #14
 8004d02:	d405      	bmi.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xa8>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004d04:	2000      	movs	r0, #0
}
 8004d06:	b003      	add	sp, #12
 8004d08:	bcc0      	pop	{r6, r7}
 8004d0a:	46b9      	mov	r9, r7
 8004d0c:	46b0      	mov	r8, r6
 8004d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d10:	2180      	movs	r1, #128	@ 0x80
 8004d12:	4a1f      	ldr	r2, [pc, #124]	@ (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004d14:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004d16:	438b      	bics	r3, r1
 8004d18:	6921      	ldr	r1, [r4, #16]
 8004d1a:	430b      	orrs	r3, r1
 8004d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d1e:	e7f1      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d20:	2680      	movs	r6, #128	@ 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d22:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d24:	4d1b      	ldr	r5, [pc, #108]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d26:	4311      	orrs	r1, r2
 8004d28:	61d9      	str	r1, [r3, #28]
 8004d2a:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2c:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4013      	ands	r3, r2
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d34:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 8004d36:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d38:	4233      	tst	r3, r6
 8004d3a:	d1ab      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	4333      	orrs	r3, r6
 8004d40:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004d42:	f7fd fa7b 	bl	800223c <HAL_GetTick>
 8004d46:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	4233      	tst	r3, r6
 8004d4c:	d1a2      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d4e:	f7fd fa75 	bl	800223c <HAL_GetTick>
 8004d52:	4643      	mov	r3, r8
 8004d54:	1ac0      	subs	r0, r0, r3
 8004d56:	2864      	cmp	r0, #100	@ 0x64
 8004d58:	d9f6      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
          return HAL_TIMEOUT;
 8004d5a:	2003      	movs	r0, #3
 8004d5c:	e7d3      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d5e:	69d3      	ldr	r3, [r2, #28]
 8004d60:	490f      	ldr	r1, [pc, #60]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004d62:	400b      	ands	r3, r1
 8004d64:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	e7b8      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x74>
        tickstart = HAL_GetTick();
 8004d6a:	f7fd fa67 	bl	800223c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6e:	2302      	movs	r3, #2
 8004d70:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d72:	4b0c      	ldr	r3, [pc, #48]	@ (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
        tickstart = HAL_GetTick();
 8004d74:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d76:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	e004      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x11c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd fa5f 	bl	800223c <HAL_GetTick>
 8004d7e:	1b80      	subs	r0, r0, r6
 8004d80:	4548      	cmp	r0, r9
 8004d82:	d8ea      	bhi.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xf2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d84:	4642      	mov	r2, r8
 8004d86:	6a2b      	ldr	r3, [r5, #32]
 8004d88:	421a      	tst	r2, r3
 8004d8a:	d0f6      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x112>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8c:	6861      	ldr	r1, [r4, #4]
 8004d8e:	e79c      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40007000 	.word	0x40007000
 8004d98:	fffffcff 	.word	0xfffffcff
 8004d9c:	fffeffff 	.word	0xfffeffff
 8004da0:	efffffff 	.word	0xefffffff
 8004da4:	00001388 	.word	0x00001388

08004da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004daa:	2401      	movs	r4, #1
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dac:	2573      	movs	r5, #115	@ 0x73
  tmpccer = TIMx->CCER;
 8004dae:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db0:	6a02      	ldr	r2, [r0, #32]
 8004db2:	43a2      	bics	r2, r4
 8004db4:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004db6:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004db8:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dba:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dbc:	680d      	ldr	r5, [r1, #0]
 8004dbe:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dc0:	2502      	movs	r5, #2
 8004dc2:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dc4:	688d      	ldr	r5, [r1, #8]
 8004dc6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dc8:	4d0e      	ldr	r5, [pc, #56]	@ (8004e04 <TIM_OC1_SetConfig+0x5c>)
 8004dca:	42a8      	cmp	r0, r5
 8004dcc:	d008      	beq.n	8004de0 <TIM_OC1_SetConfig+0x38>
 8004dce:	4d0e      	ldr	r5, [pc, #56]	@ (8004e08 <TIM_OC1_SetConfig+0x60>)
 8004dd0:	42a8      	cmp	r0, r5
 8004dd2:	d005      	beq.n	8004de0 <TIM_OC1_SetConfig+0x38>
 8004dd4:	4d0d      	ldr	r5, [pc, #52]	@ (8004e0c <TIM_OC1_SetConfig+0x64>)
 8004dd6:	42a8      	cmp	r0, r5
 8004dd8:	d002      	beq.n	8004de0 <TIM_OC1_SetConfig+0x38>
 8004dda:	4d0d      	ldr	r5, [pc, #52]	@ (8004e10 <TIM_OC1_SetConfig+0x68>)
 8004ddc:	42a8      	cmp	r0, r5
 8004dde:	d10b      	bne.n	8004df8 <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004de0:	2508      	movs	r5, #8
 8004de2:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004de4:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004de6:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004de8:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dea:	2504      	movs	r5, #4
 8004dec:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dee:	4d09      	ldr	r5, [pc, #36]	@ (8004e14 <TIM_OC1_SetConfig+0x6c>)
 8004df0:	4015      	ands	r5, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8004df2:	694a      	ldr	r2, [r1, #20]
 8004df4:	4332      	orrs	r2, r6
 8004df6:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dfa:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004dfc:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004dfe:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	6203      	str	r3, [r0, #32]
}
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40014000 	.word	0x40014000
 8004e0c:	40014400 	.word	0x40014400
 8004e10:	40014800 	.word	0x40014800
 8004e14:	fffffcff 	.word	0xfffffcff

08004e18 <HAL_TIM_Base_Init>:
{
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004e1c:	d100      	bne.n	8004e20 <HAL_TIM_Base_Init+0x8>
 8004e1e:	e06d      	b.n	8004efc <HAL_TIM_Base_Init+0xe4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e20:	233d      	movs	r3, #61	@ 0x3d
 8004e22:	5cc3      	ldrb	r3, [r0, r3]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d020      	beq.n	8004e6c <HAL_TIM_Base_Init+0x54>
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2a:	233d      	movs	r3, #61	@ 0x3d
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e30:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e32:	4e33      	ldr	r6, [pc, #204]	@ (8004f00 <HAL_TIM_Base_Init+0xe8>)
  tmpcr1 = TIMx->CR1;
 8004e34:	681a      	ldr	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8004e36:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e38:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e3a:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e3c:	42b3      	cmp	r3, r6
 8004e3e:	d01a      	beq.n	8004e76 <HAL_TIM_Base_Init+0x5e>
 8004e40:	4e30      	ldr	r6, [pc, #192]	@ (8004f04 <HAL_TIM_Base_Init+0xec>)
 8004e42:	42b3      	cmp	r3, r6
 8004e44:	d046      	beq.n	8004ed4 <HAL_TIM_Base_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e46:	4e30      	ldr	r6, [pc, #192]	@ (8004f08 <HAL_TIM_Base_Init+0xf0>)
 8004e48:	42b3      	cmp	r3, r6
 8004e4a:	d047      	beq.n	8004edc <HAL_TIM_Base_Init+0xc4>
 8004e4c:	4e2f      	ldr	r6, [pc, #188]	@ (8004f0c <HAL_TIM_Base_Init+0xf4>)
 8004e4e:	42b3      	cmp	r3, r6
 8004e50:	d049      	beq.n	8004ee6 <HAL_TIM_Base_Init+0xce>
 8004e52:	4e2f      	ldr	r6, [pc, #188]	@ (8004f10 <HAL_TIM_Base_Init+0xf8>)
 8004e54:	42b3      	cmp	r3, r6
 8004e56:	d012      	beq.n	8004e7e <HAL_TIM_Base_Init+0x66>
 8004e58:	4e2e      	ldr	r6, [pc, #184]	@ (8004f14 <HAL_TIM_Base_Init+0xfc>)
 8004e5a:	42b3      	cmp	r3, r6
 8004e5c:	d00f      	beq.n	8004e7e <HAL_TIM_Base_Init+0x66>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5e:	2680      	movs	r6, #128	@ 0x80
 8004e60:	43b2      	bics	r2, r6
 8004e62:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004e64:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e66:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e68:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e6a:	e014      	b.n	8004e96 <HAL_TIM_Base_Init+0x7e>
    htim->Lock = HAL_UNLOCKED;
 8004e6c:	333c      	adds	r3, #60	@ 0x3c
 8004e6e:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8004e70:	f7fd f85a 	bl	8001f28 <HAL_TIM_Base_MspInit>
 8004e74:	e7d9      	b.n	8004e2a <HAL_TIM_Base_Init+0x12>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e76:	2670      	movs	r6, #112	@ 0x70
 8004e78:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004e7a:	68a6      	ldr	r6, [r4, #8]
 8004e7c:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e7e:	4e26      	ldr	r6, [pc, #152]	@ (8004f18 <HAL_TIM_Base_Init+0x100>)
 8004e80:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e82:	6926      	ldr	r6, [r4, #16]
 8004e84:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e86:	2680      	movs	r6, #128	@ 0x80
 8004e88:	43b2      	bics	r2, r6
 8004e8a:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004e8c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e8e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e90:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004e92:	6962      	ldr	r2, [r4, #20]
 8004e94:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e9a:	6919      	ldr	r1, [r3, #16]
 8004e9c:	420a      	tst	r2, r1
 8004e9e:	d002      	beq.n	8004ea6 <HAL_TIM_Base_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ea0:	6919      	ldr	r1, [r3, #16]
 8004ea2:	4391      	bics	r1, r2
 8004ea4:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 8004eaa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eac:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eae:	3a08      	subs	r2, #8
 8004eb0:	54a3      	strb	r3, [r4, r2]
 8004eb2:	3201      	adds	r2, #1
 8004eb4:	54a3      	strb	r3, [r4, r2]
 8004eb6:	3201      	adds	r2, #1
 8004eb8:	54a3      	strb	r3, [r4, r2]
 8004eba:	3201      	adds	r2, #1
 8004ebc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ebe:	3201      	adds	r2, #1
 8004ec0:	54a3      	strb	r3, [r4, r2]
 8004ec2:	3201      	adds	r2, #1
 8004ec4:	54a3      	strb	r3, [r4, r2]
 8004ec6:	3201      	adds	r2, #1
 8004ec8:	54a3      	strb	r3, [r4, r2]
 8004eca:	3201      	adds	r2, #1
 8004ecc:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004ece:	3a08      	subs	r2, #8
 8004ed0:	54a3      	strb	r3, [r4, r2]
}
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed4:	2670      	movs	r6, #112	@ 0x70
 8004ed6:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004ed8:	68a6      	ldr	r6, [r4, #8]
 8004eda:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004edc:	4e0e      	ldr	r6, [pc, #56]	@ (8004f18 <HAL_TIM_Base_Init+0x100>)
 8004ede:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee0:	6926      	ldr	r6, [r4, #16]
 8004ee2:	4332      	orrs	r2, r6
 8004ee4:	e7bb      	b.n	8004e5e <HAL_TIM_Base_Init+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee6:	4e0c      	ldr	r6, [pc, #48]	@ (8004f18 <HAL_TIM_Base_Init+0x100>)
 8004ee8:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eea:	6926      	ldr	r6, [r4, #16]
 8004eec:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eee:	2680      	movs	r6, #128	@ 0x80
 8004ef0:	43b2      	bics	r2, r6
 8004ef2:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 8004ef4:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ef6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ef8:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004efa:	e7ca      	b.n	8004e92 <HAL_TIM_Base_Init+0x7a>
    return HAL_ERROR;
 8004efc:	2001      	movs	r0, #1
 8004efe:	e7e8      	b.n	8004ed2 <HAL_TIM_Base_Init+0xba>
 8004f00:	40012c00 	.word	0x40012c00
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40002000 	.word	0x40002000
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800
 8004f18:	fffffcff 	.word	0xfffffcff

08004f1c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004f1c:	213d      	movs	r1, #61	@ 0x3d
{
 8004f1e:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8004f20:	5c42      	ldrb	r2, [r0, r1]
{
 8004f22:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8004f24:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8004f26:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004f28:	2a01      	cmp	r2, #1
 8004f2a:	d10f      	bne.n	8004f4c <HAL_TIM_Base_Start+0x30>
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	3201      	adds	r2, #1
 8004f2e:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a0c      	ldr	r2, [pc, #48]	@ (8004f64 <HAL_TIM_Base_Start+0x48>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00a      	beq.n	8004f4e <HAL_TIM_Base_Start+0x32>
 8004f38:	4a0b      	ldr	r2, [pc, #44]	@ (8004f68 <HAL_TIM_Base_Start+0x4c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d007      	beq.n	8004f4e <HAL_TIM_Base_Start+0x32>
 8004f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004f6c <HAL_TIM_Base_Start+0x50>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_TIM_Base_Start+0x32>
    __HAL_TIM_ENABLE(htim);
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4322      	orrs	r2, r4
 8004f48:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004f4a:	2000      	movs	r0, #0
}
 8004f4c:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f4e:	2207      	movs	r2, #7
 8004f50:	6899      	ldr	r1, [r3, #8]
 8004f52:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f54:	2a06      	cmp	r2, #6
 8004f56:	d0f8      	beq.n	8004f4a <HAL_TIM_Base_Start+0x2e>
      __HAL_TIM_ENABLE(htim);
 8004f58:	2101      	movs	r1, #1
 8004f5a:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8004f5c:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	e7f3      	b.n	8004f4c <HAL_TIM_Base_Start+0x30>
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40014000 	.word	0x40014000

08004f70 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8004f70:	4770      	bx	lr
 8004f72:	46c0      	nop			@ (mov r8, r8)

08004f74 <HAL_TIM_PWM_Init>:
{
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004f78:	d100      	bne.n	8004f7c <HAL_TIM_PWM_Init+0x8>
 8004f7a:	e06d      	b.n	8005058 <HAL_TIM_PWM_Init+0xe4>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7c:	233d      	movs	r3, #61	@ 0x3d
 8004f7e:	5cc3      	ldrb	r3, [r0, r3]
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d020      	beq.n	8004fc8 <HAL_TIM_PWM_Init+0x54>
  htim->State = HAL_TIM_STATE_BUSY;
 8004f86:	233d      	movs	r3, #61	@ 0x3d
 8004f88:	2202      	movs	r2, #2
 8004f8a:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8c:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f8e:	4e33      	ldr	r6, [pc, #204]	@ (800505c <HAL_TIM_PWM_Init+0xe8>)
  tmpcr1 = TIMx->CR1;
 8004f90:	681a      	ldr	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8004f92:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f94:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f96:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f98:	42b3      	cmp	r3, r6
 8004f9a:	d01a      	beq.n	8004fd2 <HAL_TIM_PWM_Init+0x5e>
 8004f9c:	4e30      	ldr	r6, [pc, #192]	@ (8005060 <HAL_TIM_PWM_Init+0xec>)
 8004f9e:	42b3      	cmp	r3, r6
 8004fa0:	d046      	beq.n	8005030 <HAL_TIM_PWM_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa2:	4e30      	ldr	r6, [pc, #192]	@ (8005064 <HAL_TIM_PWM_Init+0xf0>)
 8004fa4:	42b3      	cmp	r3, r6
 8004fa6:	d047      	beq.n	8005038 <HAL_TIM_PWM_Init+0xc4>
 8004fa8:	4e2f      	ldr	r6, [pc, #188]	@ (8005068 <HAL_TIM_PWM_Init+0xf4>)
 8004faa:	42b3      	cmp	r3, r6
 8004fac:	d049      	beq.n	8005042 <HAL_TIM_PWM_Init+0xce>
 8004fae:	4e2f      	ldr	r6, [pc, #188]	@ (800506c <HAL_TIM_PWM_Init+0xf8>)
 8004fb0:	42b3      	cmp	r3, r6
 8004fb2:	d012      	beq.n	8004fda <HAL_TIM_PWM_Init+0x66>
 8004fb4:	4e2e      	ldr	r6, [pc, #184]	@ (8005070 <HAL_TIM_PWM_Init+0xfc>)
 8004fb6:	42b3      	cmp	r3, r6
 8004fb8:	d00f      	beq.n	8004fda <HAL_TIM_PWM_Init+0x66>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fba:	2680      	movs	r6, #128	@ 0x80
 8004fbc:	43b2      	bics	r2, r6
 8004fbe:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004fc0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fc4:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc6:	e014      	b.n	8004ff2 <HAL_TIM_PWM_Init+0x7e>
    htim->Lock = HAL_UNLOCKED;
 8004fc8:	333c      	adds	r3, #60	@ 0x3c
 8004fca:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8004fcc:	f7ff ffd0 	bl	8004f70 <HAL_TIM_PWM_MspInit>
 8004fd0:	e7d9      	b.n	8004f86 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd2:	2670      	movs	r6, #112	@ 0x70
 8004fd4:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004fd6:	68a6      	ldr	r6, [r4, #8]
 8004fd8:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fda:	4e26      	ldr	r6, [pc, #152]	@ (8005074 <HAL_TIM_PWM_Init+0x100>)
 8004fdc:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fde:	6926      	ldr	r6, [r4, #16]
 8004fe0:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe2:	2680      	movs	r6, #128	@ 0x80
 8004fe4:	43b2      	bics	r2, r6
 8004fe6:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004fe8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fea:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fec:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004fee:	6962      	ldr	r2, [r4, #20]
 8004ff0:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ff6:	6919      	ldr	r1, [r3, #16]
 8004ff8:	420a      	tst	r2, r1
 8004ffa:	d002      	beq.n	8005002 <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ffc:	6919      	ldr	r1, [r3, #16]
 8004ffe:	4391      	bics	r1, r2
 8005000:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005002:	2301      	movs	r3, #1
 8005004:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 8005006:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005008:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500a:	3a08      	subs	r2, #8
 800500c:	54a3      	strb	r3, [r4, r2]
 800500e:	3201      	adds	r2, #1
 8005010:	54a3      	strb	r3, [r4, r2]
 8005012:	3201      	adds	r2, #1
 8005014:	54a3      	strb	r3, [r4, r2]
 8005016:	3201      	adds	r2, #1
 8005018:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501a:	3201      	adds	r2, #1
 800501c:	54a3      	strb	r3, [r4, r2]
 800501e:	3201      	adds	r2, #1
 8005020:	54a3      	strb	r3, [r4, r2]
 8005022:	3201      	adds	r2, #1
 8005024:	54a3      	strb	r3, [r4, r2]
 8005026:	3201      	adds	r2, #1
 8005028:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800502a:	3a08      	subs	r2, #8
 800502c:	54a3      	strb	r3, [r4, r2]
}
 800502e:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005030:	2670      	movs	r6, #112	@ 0x70
 8005032:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8005034:	68a6      	ldr	r6, [r4, #8]
 8005036:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8005038:	4e0e      	ldr	r6, [pc, #56]	@ (8005074 <HAL_TIM_PWM_Init+0x100>)
 800503a:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800503c:	6926      	ldr	r6, [r4, #16]
 800503e:	4332      	orrs	r2, r6
 8005040:	e7bb      	b.n	8004fba <HAL_TIM_PWM_Init+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8005042:	4e0c      	ldr	r6, [pc, #48]	@ (8005074 <HAL_TIM_PWM_Init+0x100>)
 8005044:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005046:	6926      	ldr	r6, [r4, #16]
 8005048:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504a:	2680      	movs	r6, #128	@ 0x80
 800504c:	43b2      	bics	r2, r6
 800504e:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 8005050:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005052:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005054:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005056:	e7ca      	b.n	8004fee <HAL_TIM_PWM_Init+0x7a>
    return HAL_ERROR;
 8005058:	2001      	movs	r0, #1
 800505a:	e7e8      	b.n	800502e <HAL_TIM_PWM_Init+0xba>
 800505c:	40012c00 	.word	0x40012c00
 8005060:	40000400 	.word	0x40000400
 8005064:	40002000 	.word	0x40002000
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800
 8005074:	fffffcff 	.word	0xfffffcff

08005078 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8005078:	2900      	cmp	r1, #0
 800507a:	d120      	bne.n	80050be <HAL_TIM_PWM_Start+0x46>
 800507c:	233e      	movs	r3, #62	@ 0x3e
 800507e:	5cc2      	ldrb	r2, [r0, r3]
 8005080:	2a01      	cmp	r2, #1
 8005082:	d124      	bne.n	80050ce <HAL_TIM_PWM_Start+0x56>
 8005084:	2202      	movs	r2, #2
 8005086:	54c2      	strb	r2, [r0, r3]
 8005088:	221f      	movs	r2, #31
 800508a:	4011      	ands	r1, r2
 800508c:	3a1e      	subs	r2, #30
 800508e:	408a      	lsls	r2, r1
 8005090:	6803      	ldr	r3, [r0, #0]
 8005092:	6a19      	ldr	r1, [r3, #32]
 8005094:	4391      	bics	r1, r2
 8005096:	6219      	str	r1, [r3, #32]
 8005098:	6a19      	ldr	r1, [r3, #32]
 800509a:	430a      	orrs	r2, r1
 800509c:	621a      	str	r2, [r3, #32]
 800509e:	4a1d      	ldr	r2, [pc, #116]	@ (8005114 <HAL_TIM_PWM_Start+0x9c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d016      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x5a>
 80050a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005118 <HAL_TIM_PWM_Start+0xa0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_TIM_PWM_Start+0x5a>
 80050aa:	4a1c      	ldr	r2, [pc, #112]	@ (800511c <HAL_TIM_PWM_Start+0xa4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d025      	beq.n	80050fc <HAL_TIM_PWM_Start+0x84>
 80050b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005120 <HAL_TIM_PWM_Start+0xa8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d022      	beq.n	80050fc <HAL_TIM_PWM_Start+0x84>
 80050b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005124 <HAL_TIM_PWM_Start+0xac>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d114      	bne.n	80050e6 <HAL_TIM_PWM_Start+0x6e>
 80050bc:	e00e      	b.n	80050dc <HAL_TIM_PWM_Start+0x64>
 80050be:	2904      	cmp	r1, #4
 80050c0:	d017      	beq.n	80050f2 <HAL_TIM_PWM_Start+0x7a>
 80050c2:	2908      	cmp	r1, #8
 80050c4:	d020      	beq.n	8005108 <HAL_TIM_PWM_Start+0x90>
 80050c6:	2341      	movs	r3, #65	@ 0x41
 80050c8:	5cc2      	ldrb	r2, [r0, r3]
 80050ca:	2a01      	cmp	r2, #1
 80050cc:	d0da      	beq.n	8005084 <HAL_TIM_PWM_Start+0xc>
 80050ce:	2001      	movs	r0, #1
 80050d0:	e00e      	b.n	80050f0 <HAL_TIM_PWM_Start+0x78>
 80050d2:	2280      	movs	r2, #128	@ 0x80
 80050d4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80050d6:	0212      	lsls	r2, r2, #8
 80050d8:	430a      	orrs	r2, r1
 80050da:	645a      	str	r2, [r3, #68]	@ 0x44
 80050dc:	2207      	movs	r2, #7
 80050de:	6899      	ldr	r1, [r3, #8]
 80050e0:	400a      	ands	r2, r1
 80050e2:	2a06      	cmp	r2, #6
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_PWM_Start+0x76>
 80050e6:	2101      	movs	r1, #1
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	2000      	movs	r0, #0
 80050f0:	4770      	bx	lr
 80050f2:	233f      	movs	r3, #63	@ 0x3f
 80050f4:	5cc2      	ldrb	r2, [r0, r3]
 80050f6:	2a01      	cmp	r2, #1
 80050f8:	d0c4      	beq.n	8005084 <HAL_TIM_PWM_Start+0xc>
 80050fa:	e7e8      	b.n	80050ce <HAL_TIM_PWM_Start+0x56>
 80050fc:	2280      	movs	r2, #128	@ 0x80
 80050fe:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8005100:	0212      	lsls	r2, r2, #8
 8005102:	430a      	orrs	r2, r1
 8005104:	645a      	str	r2, [r3, #68]	@ 0x44
 8005106:	e7ee      	b.n	80050e6 <HAL_TIM_PWM_Start+0x6e>
 8005108:	2340      	movs	r3, #64	@ 0x40
 800510a:	5cc2      	ldrb	r2, [r0, r3]
 800510c:	2a01      	cmp	r2, #1
 800510e:	d0b9      	beq.n	8005084 <HAL_TIM_PWM_Start+0xc>
 8005110:	e7dd      	b.n	80050ce <HAL_TIM_PWM_Start+0x56>
 8005112:	46c0      	nop			@ (mov r8, r8)
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400
 8005120:	40014800 	.word	0x40014800
 8005124:	40000400 	.word	0x40000400

08005128 <HAL_TIM_PWM_ConfigChannel>:
{
 8005128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800512a:	233c      	movs	r3, #60	@ 0x3c
{
 800512c:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800512e:	5cc1      	ldrb	r1, [r0, r3]
{
 8005130:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8005132:	2901      	cmp	r1, #1
 8005134:	d100      	bne.n	8005138 <HAL_TIM_PWM_ConfigChannel+0x10>
 8005136:	e0de      	b.n	80052f6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8005138:	2101      	movs	r1, #1
 800513a:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 800513c:	2a08      	cmp	r2, #8
 800513e:	d100      	bne.n	8005142 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005140:	e09a      	b.n	8005278 <HAL_TIM_PWM_ConfigChannel+0x150>
 8005142:	d823      	bhi.n	800518c <HAL_TIM_PWM_ConfigChannel+0x64>
 8005144:	2a00      	cmp	r2, #0
 8005146:	d100      	bne.n	800514a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005148:	e083      	b.n	8005252 <HAL_TIM_PWM_ConfigChannel+0x12a>
 800514a:	2a04      	cmp	r2, #4
 800514c:	d158      	bne.n	8005200 <HAL_TIM_PWM_ConfigChannel+0xd8>

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800514e:	2110      	movs	r1, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005150:	6803      	ldr	r3, [r0, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005152:	4e6a      	ldr	r6, [pc, #424]	@ (80052fc <HAL_TIM_PWM_ConfigChannel+0x1d4>)
  tmpccer = TIMx->CCER;
 8005154:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005156:	6a1a      	ldr	r2, [r3, #32]
 8005158:	438a      	bics	r2, r1
 800515a:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800515c:	6859      	ldr	r1, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800515e:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005160:	4032      	ands	r2, r6

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005162:	682e      	ldr	r6, [r5, #0]
 8005164:	0236      	lsls	r6, r6, #8
 8005166:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005168:	2220      	movs	r2, #32
 800516a:	4390      	bics	r0, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800516c:	68aa      	ldr	r2, [r5, #8]
 800516e:	0112      	lsls	r2, r2, #4
 8005170:	4302      	orrs	r2, r0

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005172:	4863      	ldr	r0, [pc, #396]	@ (8005300 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 8005174:	4283      	cmp	r3, r0
 8005176:	d048      	beq.n	800520a <HAL_TIM_PWM_ConfigChannel+0xe2>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005178:	4862      	ldr	r0, [pc, #392]	@ (8005304 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 800517a:	4283      	cmp	r3, r0
 800517c:	d04d      	beq.n	800521a <HAL_TIM_PWM_ConfigChannel+0xf2>
 800517e:	4862      	ldr	r0, [pc, #392]	@ (8005308 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8005180:	4283      	cmp	r3, r0
 8005182:	d04a      	beq.n	800521a <HAL_TIM_PWM_ConfigChannel+0xf2>
 8005184:	4861      	ldr	r0, [pc, #388]	@ (800530c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8005186:	4283      	cmp	r3, r0
 8005188:	d14e      	bne.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x100>
 800518a:	e046      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0xf2>
  switch (Channel)
 800518c:	2a0c      	cmp	r2, #12
 800518e:	d137      	bne.n	8005200 <HAL_TIM_PWM_ConfigChannel+0xd8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005190:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005192:	485f      	ldr	r0, [pc, #380]	@ (8005310 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
  tmpccer = TIMx->CCER;
 8005194:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	4002      	ands	r2, r0
 800519a:	621a      	str	r2, [r3, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800519c:	4857      	ldr	r0, [pc, #348]	@ (80052fc <HAL_TIM_PWM_ConfigChannel+0x1d4>)
  tmpcr2 =  TIMx->CR2;
 800519e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80051a0:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051a2:	4002      	ands	r2, r0

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a4:	6828      	ldr	r0, [r5, #0]
 80051a6:	0200      	lsls	r0, r0, #8
 80051a8:	4310      	orrs	r0, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051aa:	4a5a      	ldr	r2, [pc, #360]	@ (8005314 <HAL_TIM_PWM_ConfigChannel+0x1ec>)
 80051ac:	4011      	ands	r1, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051ae:	68aa      	ldr	r2, [r5, #8]
 80051b0:	0312      	lsls	r2, r2, #12
 80051b2:	430a      	orrs	r2, r1

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b4:	4952      	ldr	r1, [pc, #328]	@ (8005300 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 80051b6:	428b      	cmp	r3, r1
 80051b8:	d008      	beq.n	80051cc <HAL_TIM_PWM_ConfigChannel+0xa4>
 80051ba:	4952      	ldr	r1, [pc, #328]	@ (8005304 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 80051bc:	428b      	cmp	r3, r1
 80051be:	d005      	beq.n	80051cc <HAL_TIM_PWM_ConfigChannel+0xa4>
 80051c0:	4951      	ldr	r1, [pc, #324]	@ (8005308 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 80051c2:	428b      	cmp	r3, r1
 80051c4:	d002      	beq.n	80051cc <HAL_TIM_PWM_ConfigChannel+0xa4>
 80051c6:	4951      	ldr	r1, [pc, #324]	@ (800530c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80051c8:	428b      	cmp	r3, r1
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_ConfigChannel+0xae>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051cc:	4952      	ldr	r1, [pc, #328]	@ (8005318 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
 80051ce:	4031      	ands	r1, r6

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051d0:	696e      	ldr	r6, [r5, #20]
 80051d2:	01b6      	lsls	r6, r6, #6
 80051d4:	430e      	orrs	r6, r1

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d6:	6869      	ldr	r1, [r5, #4]
  TIMx->CR2 = tmpcr2;
 80051d8:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80051da:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80051dc:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051de:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051e0:	2280      	movs	r2, #128	@ 0x80
 80051e2:	69d9      	ldr	r1, [r3, #28]
 80051e4:	0112      	lsls	r2, r2, #4
 80051e6:	430a      	orrs	r2, r1
 80051e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	494b      	ldr	r1, [pc, #300]	@ (800531c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
  HAL_StatusTypeDef status = HAL_OK;
 80051ee:	2000      	movs	r0, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051f0:	400a      	ands	r2, r1
 80051f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051f4:	692a      	ldr	r2, [r5, #16]
 80051f6:	69d9      	ldr	r1, [r3, #28]
 80051f8:	0212      	lsls	r2, r2, #8
 80051fa:	430a      	orrs	r2, r1
 80051fc:	61da      	str	r2, [r3, #28]
      break;
 80051fe:	e000      	b.n	8005202 <HAL_TIM_PWM_ConfigChannel+0xda>
  switch (Channel)
 8005200:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005202:	233c      	movs	r3, #60	@ 0x3c
 8005204:	2200      	movs	r2, #0
 8005206:	54e2      	strb	r2, [r4, r3]
}
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 800520a:	2080      	movs	r0, #128	@ 0x80
 800520c:	4382      	bics	r2, r0
 800520e:	0017      	movs	r7, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005210:	68ea      	ldr	r2, [r5, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8005212:	3840      	subs	r0, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005214:	0112      	lsls	r2, r2, #4
 8005216:	433a      	orrs	r2, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8005218:	4382      	bics	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800521a:	4841      	ldr	r0, [pc, #260]	@ (8005320 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800521c:	696f      	ldr	r7, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800521e:	4008      	ands	r0, r1
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005220:	69a9      	ldr	r1, [r5, #24]
 8005222:	4339      	orrs	r1, r7
 8005224:	0089      	lsls	r1, r1, #2
 8005226:	4301      	orrs	r1, r0
  TIMx->CR2 = tmpcr2;
 8005228:	6059      	str	r1, [r3, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800522a:	6869      	ldr	r1, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 800522c:	619e      	str	r6, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800522e:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8005230:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005232:	2280      	movs	r2, #128	@ 0x80
 8005234:	6999      	ldr	r1, [r3, #24]
 8005236:	0112      	lsls	r2, r2, #4
 8005238:	430a      	orrs	r2, r1
 800523a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800523c:	699a      	ldr	r2, [r3, #24]
 800523e:	4937      	ldr	r1, [pc, #220]	@ (800531c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
  HAL_StatusTypeDef status = HAL_OK;
 8005240:	2000      	movs	r0, #0
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005242:	400a      	ands	r2, r1
 8005244:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005246:	692a      	ldr	r2, [r5, #16]
 8005248:	6999      	ldr	r1, [r3, #24]
 800524a:	0212      	lsls	r2, r2, #8
 800524c:	430a      	orrs	r2, r1
 800524e:	619a      	str	r2, [r3, #24]
      break;
 8005250:	e7d7      	b.n	8005202 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005252:	6806      	ldr	r6, [r0, #0]
 8005254:	0029      	movs	r1, r5
 8005256:	0030      	movs	r0, r6
 8005258:	f7ff fda6 	bl	8004da8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800525c:	2208      	movs	r2, #8
 800525e:	69b3      	ldr	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005262:	4313      	orrs	r3, r2
 8005264:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005266:	69b3      	ldr	r3, [r6, #24]
 8005268:	3a04      	subs	r2, #4
 800526a:	4393      	bics	r3, r2
 800526c:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800526e:	69b3      	ldr	r3, [r6, #24]
 8005270:	692a      	ldr	r2, [r5, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	61b3      	str	r3, [r6, #24]
      break;
 8005276:	e7c4      	b.n	8005202 <HAL_TIM_PWM_ConfigChannel+0xda>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005278:	2673      	movs	r6, #115	@ 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800527a:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800527c:	4929      	ldr	r1, [pc, #164]	@ (8005324 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
  tmpccer = TIMx->CCER;
 800527e:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005280:	6a1a      	ldr	r2, [r3, #32]
 8005282:	400a      	ands	r2, r1
 8005284:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005286:	6859      	ldr	r1, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005288:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800528a:	43b2      	bics	r2, r6
  tmpccmrx |= OC_Config->OCMode;
 800528c:	682e      	ldr	r6, [r5, #0]
 800528e:	4316      	orrs	r6, r2
  tmpccer &= ~TIM_CCER_CC3P;
 8005290:	4a25      	ldr	r2, [pc, #148]	@ (8005328 <HAL_TIM_PWM_ConfigChannel+0x200>)
 8005292:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005294:	68aa      	ldr	r2, [r5, #8]
 8005296:	0212      	lsls	r2, r2, #8
 8005298:	4302      	orrs	r2, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800529a:	4819      	ldr	r0, [pc, #100]	@ (8005300 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 800529c:	4283      	cmp	r3, r0
 800529e:	d01b      	beq.n	80052d8 <HAL_TIM_PWM_ConfigChannel+0x1b0>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052a0:	4818      	ldr	r0, [pc, #96]	@ (8005304 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 80052a2:	4283      	cmp	r3, r0
 80052a4:	d01f      	beq.n	80052e6 <HAL_TIM_PWM_ConfigChannel+0x1be>
 80052a6:	4818      	ldr	r0, [pc, #96]	@ (8005308 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 80052a8:	4283      	cmp	r3, r0
 80052aa:	d01c      	beq.n	80052e6 <HAL_TIM_PWM_ConfigChannel+0x1be>
 80052ac:	4817      	ldr	r0, [pc, #92]	@ (800530c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 80052ae:	4283      	cmp	r3, r0
 80052b0:	d019      	beq.n	80052e6 <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 80052b2:	6059      	str	r1, [r3, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 80052b4:	6869      	ldr	r1, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 80052b6:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80052b8:	63d9      	str	r1, [r3, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ba:	2108      	movs	r1, #8
  TIMx->CCER = tmpccer;
 80052bc:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052be:	69da      	ldr	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80052c0:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052c2:	430a      	orrs	r2, r1
 80052c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052c6:	69da      	ldr	r2, [r3, #28]
 80052c8:	3904      	subs	r1, #4
 80052ca:	438a      	bics	r2, r1
 80052cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	6929      	ldr	r1, [r5, #16]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	61da      	str	r2, [r3, #28]
      break;
 80052d6:	e794      	b.n	8005202 <HAL_TIM_PWM_ConfigChannel+0xda>
    tmpccer &= ~TIM_CCER_CC3NP;
 80052d8:	4814      	ldr	r0, [pc, #80]	@ (800532c <HAL_TIM_PWM_ConfigChannel+0x204>)
 80052da:	4010      	ands	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052dc:	68ea      	ldr	r2, [r5, #12]
 80052de:	0212      	lsls	r2, r2, #8
 80052e0:	4302      	orrs	r2, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 80052e2:	480e      	ldr	r0, [pc, #56]	@ (800531c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80052e4:	4002      	ands	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052e6:	4812      	ldr	r0, [pc, #72]	@ (8005330 <HAL_TIM_PWM_ConfigChannel+0x208>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052e8:	696f      	ldr	r7, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052ea:	4008      	ands	r0, r1
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ec:	69a9      	ldr	r1, [r5, #24]
 80052ee:	4339      	orrs	r1, r7
 80052f0:	0109      	lsls	r1, r1, #4
 80052f2:	4301      	orrs	r1, r0
 80052f4:	e7dd      	b.n	80052b2 <HAL_TIM_PWM_ConfigChannel+0x18a>
  __HAL_LOCK(htim);
 80052f6:	2002      	movs	r0, #2
 80052f8:	e786      	b.n	8005208 <HAL_TIM_PWM_ConfigChannel+0xe0>
 80052fa:	46c0      	nop			@ (mov r8, r8)
 80052fc:	ffff8cff 	.word	0xffff8cff
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800
 8005310:	ffffefff 	.word	0xffffefff
 8005314:	ffffdfff 	.word	0xffffdfff
 8005318:	ffffbfff 	.word	0xffffbfff
 800531c:	fffffbff 	.word	0xfffffbff
 8005320:	fffff3ff 	.word	0xfffff3ff
 8005324:	fffffeff 	.word	0xfffffeff
 8005328:	fffffdff 	.word	0xfffffdff
 800532c:	fffff7ff 	.word	0xfffff7ff
 8005330:	ffffcfff 	.word	0xffffcfff

08005334 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005334:	233c      	movs	r3, #60	@ 0x3c
{
 8005336:	b570      	push	{r4, r5, r6, lr}
 8005338:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 800533a:	5cc0      	ldrb	r0, [r0, r3]
 800533c:	2801      	cmp	r0, #1
 800533e:	d100      	bne.n	8005342 <HAL_TIM_ConfigClockSource+0xe>
 8005340:	e073      	b.n	800542a <HAL_TIM_ConfigClockSource+0xf6>
 8005342:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005344:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8005346:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	3301      	adds	r3, #1
 800534a:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 800534c:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800534e:	4d51      	ldr	r5, [pc, #324]	@ (8005494 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8005350:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005352:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8005354:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005356:	680b      	ldr	r3, [r1, #0]
 8005358:	2b60      	cmp	r3, #96	@ 0x60
 800535a:	d100      	bne.n	800535e <HAL_TIM_ConfigClockSource+0x2a>
 800535c:	e067      	b.n	800542e <HAL_TIM_ConfigClockSource+0xfa>
 800535e:	d81d      	bhi.n	800539c <HAL_TIM_ConfigClockSource+0x68>
 8005360:	2b40      	cmp	r3, #64	@ 0x40
 8005362:	d100      	bne.n	8005366 <HAL_TIM_ConfigClockSource+0x32>
 8005364:	e07d      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x12e>
 8005366:	d93f      	bls.n	80053e8 <HAL_TIM_ConfigClockSource+0xb4>
 8005368:	2b50      	cmp	r3, #80	@ 0x50
 800536a:	d135      	bne.n	80053d8 <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 800536c:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800536e:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005370:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005372:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005374:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005376:	43a6      	bics	r6, r4
 8005378:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800537a:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800537c:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800537e:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005380:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005382:	240a      	movs	r4, #10
 8005384:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8005386:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005388:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800538a:	6201      	str	r1, [r0, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538c:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 800538e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005390:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005392:	3919      	subs	r1, #25
 8005394:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005396:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2000      	movs	r0, #0
 800539a:	e01e      	b.n	80053da <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 800539c:	2480      	movs	r4, #128	@ 0x80
 800539e:	0164      	lsls	r4, r4, #5
 80053a0:	42a3      	cmp	r3, r4
 80053a2:	d0f9      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x64>
 80053a4:	2480      	movs	r4, #128	@ 0x80
 80053a6:	01a4      	lsls	r4, r4, #6
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	d12b      	bne.n	8005404 <HAL_TIM_ConfigClockSource+0xd0>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ac:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ae:	4b3a      	ldr	r3, [pc, #232]	@ (8005498 <HAL_TIM_ConfigClockSource+0x164>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b2:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b4:	688b      	ldr	r3, [r1, #8]
 80053b6:	68c9      	ldr	r1, [r1, #12]
 80053b8:	432b      	orrs	r3, r5
 80053ba:	0209      	lsls	r1, r1, #8
 80053bc:	430b      	orrs	r3, r1
 80053be:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053c0:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053c2:	2380      	movs	r3, #128	@ 0x80
 80053c4:	6881      	ldr	r1, [r0, #8]
 80053c6:	01db      	lsls	r3, r3, #7
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80053cc:	2000      	movs	r0, #0
 80053ce:	e004      	b.n	80053da <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 80053d0:	2110      	movs	r1, #16
 80053d2:	001c      	movs	r4, r3
 80053d4:	438c      	bics	r4, r1
 80053d6:	d00c      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 80053d8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80053da:	233d      	movs	r3, #61	@ 0x3d
 80053dc:	2101      	movs	r1, #1
 80053de:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 80053e0:	2100      	movs	r1, #0
 80053e2:	3b01      	subs	r3, #1
 80053e4:	54d1      	strb	r1, [r2, r3]
}
 80053e6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d002      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0xbe>
 80053ec:	d9f0      	bls.n	80053d0 <HAL_TIM_ConfigClockSource+0x9c>
 80053ee:	2b30      	cmp	r3, #48	@ 0x30
 80053f0:	d1f2      	bne.n	80053d8 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr &= ~TIM_SMCR_TS;
 80053f2:	2470      	movs	r4, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80053f4:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80053f6:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053f8:	430b      	orrs	r3, r1
 80053fa:	2107      	movs	r1, #7
 80053fc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80053fe:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005400:	2000      	movs	r0, #0
 8005402:	e7ea      	b.n	80053da <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8005404:	2b70      	cmp	r3, #112	@ 0x70
 8005406:	d1e7      	bne.n	80053d8 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8005408:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800540a:	4b23      	ldr	r3, [pc, #140]	@ (8005498 <HAL_TIM_ConfigClockSource+0x164>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800540c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800540e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005410:	688b      	ldr	r3, [r1, #8]
 8005412:	68c9      	ldr	r1, [r1, #12]
 8005414:	432b      	orrs	r3, r5
 8005416:	0209      	lsls	r1, r1, #8
 8005418:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800541a:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800541c:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 800541e:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005420:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005422:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8005424:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005426:	2000      	movs	r0, #0
 8005428:	e7d7      	b.n	80053da <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 800542a:	2002      	movs	r0, #2
 800542c:	e7db      	b.n	80053e6 <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800542e:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8005430:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005432:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8005434:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005436:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 8005438:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800543a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800543c:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800543e:	4e17      	ldr	r6, [pc, #92]	@ (800549c <HAL_TIM_ConfigClockSource+0x168>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005440:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005442:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005444:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005446:	25a0      	movs	r5, #160	@ 0xa0
  TIMx->CCMR1 = tmpccmr1 ;
 8005448:	6181      	str	r1, [r0, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 800544a:	2170      	movs	r1, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800544c:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8005452:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005454:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005456:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005458:	3909      	subs	r1, #9
 800545a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800545c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2000      	movs	r0, #0
 8005460:	e7bb      	b.n	80053da <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8005462:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005464:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8005466:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005468:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800546a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546c:	43a6      	bics	r6, r4
 800546e:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005470:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8005472:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005474:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005476:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005478:	240a      	movs	r4, #10
 800547a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800547c:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800547e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005480:	6201      	str	r1, [r0, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005482:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8005484:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005486:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005488:	3929      	subs	r1, #41	@ 0x29
 800548a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800548c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800548e:	2000      	movs	r0, #0
 8005490:	e7a3      	b.n	80053da <HAL_TIM_ConfigClockSource+0xa6>
 8005492:	46c0      	nop			@ (mov r8, r8)
 8005494:	ffff0088 	.word	0xffff0088
 8005498:	ffff00ff 	.word	0xffff00ff
 800549c:	ffff0fff 	.word	0xffff0fff

080054a0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80054a0:	2900      	cmp	r1, #0
 80054a2:	d124      	bne.n	80054ee <HAL_TIMEx_PWMN_Start+0x4e>
 80054a4:	2342      	movs	r3, #66	@ 0x42
 80054a6:	5cc2      	ldrb	r2, [r0, r3]
 80054a8:	2a01      	cmp	r2, #1
 80054aa:	d128      	bne.n	80054fe <HAL_TIMEx_PWMN_Start+0x5e>
 80054ac:	2202      	movs	r2, #2
 80054ae:	54c2      	strb	r2, [r0, r3]
 80054b0:	220f      	movs	r2, #15
 80054b2:	4011      	ands	r1, r2
 80054b4:	3a0b      	subs	r2, #11
 80054b6:	408a      	lsls	r2, r1
 80054b8:	6803      	ldr	r3, [r0, #0]
 80054ba:	6a19      	ldr	r1, [r3, #32]
 80054bc:	4391      	bics	r1, r2
 80054be:	6219      	str	r1, [r3, #32]
 80054c0:	6a19      	ldr	r1, [r3, #32]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	621a      	str	r2, [r3, #32]
 80054c6:	2280      	movs	r2, #128	@ 0x80
 80054c8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80054ca:	0212      	lsls	r2, r2, #8
 80054cc:	430a      	orrs	r2, r1
 80054ce:	645a      	str	r2, [r3, #68]	@ 0x44
 80054d0:	4a14      	ldr	r2, [pc, #80]	@ (8005524 <HAL_TIMEx_PWMN_Start+0x84>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d015      	beq.n	8005502 <HAL_TIMEx_PWMN_Start+0x62>
 80054d6:	4a14      	ldr	r2, [pc, #80]	@ (8005528 <HAL_TIMEx_PWMN_Start+0x88>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d012      	beq.n	8005502 <HAL_TIMEx_PWMN_Start+0x62>
 80054dc:	4a13      	ldr	r2, [pc, #76]	@ (800552c <HAL_TIMEx_PWMN_Start+0x8c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00f      	beq.n	8005502 <HAL_TIMEx_PWMN_Start+0x62>
 80054e2:	2101      	movs	r1, #1
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	2000      	movs	r0, #0
 80054ec:	4770      	bx	lr
 80054ee:	2904      	cmp	r1, #4
 80054f0:	d00d      	beq.n	800550e <HAL_TIMEx_PWMN_Start+0x6e>
 80054f2:	2908      	cmp	r1, #8
 80054f4:	d010      	beq.n	8005518 <HAL_TIMEx_PWMN_Start+0x78>
 80054f6:	2345      	movs	r3, #69	@ 0x45
 80054f8:	5cc2      	ldrb	r2, [r0, r3]
 80054fa:	2a01      	cmp	r2, #1
 80054fc:	d0d6      	beq.n	80054ac <HAL_TIMEx_PWMN_Start+0xc>
 80054fe:	2001      	movs	r0, #1
 8005500:	e7f4      	b.n	80054ec <HAL_TIMEx_PWMN_Start+0x4c>
 8005502:	2207      	movs	r2, #7
 8005504:	6899      	ldr	r1, [r3, #8]
 8005506:	400a      	ands	r2, r1
 8005508:	2a06      	cmp	r2, #6
 800550a:	d1ea      	bne.n	80054e2 <HAL_TIMEx_PWMN_Start+0x42>
 800550c:	e7ed      	b.n	80054ea <HAL_TIMEx_PWMN_Start+0x4a>
 800550e:	2343      	movs	r3, #67	@ 0x43
 8005510:	5cc2      	ldrb	r2, [r0, r3]
 8005512:	2a01      	cmp	r2, #1
 8005514:	d0ca      	beq.n	80054ac <HAL_TIMEx_PWMN_Start+0xc>
 8005516:	e7f2      	b.n	80054fe <HAL_TIMEx_PWMN_Start+0x5e>
 8005518:	2344      	movs	r3, #68	@ 0x44
 800551a:	5cc2      	ldrb	r2, [r0, r3]
 800551c:	2a01      	cmp	r2, #1
 800551e:	d0c5      	beq.n	80054ac <HAL_TIMEx_PWMN_Start+0xc>
 8005520:	e7ed      	b.n	80054fe <HAL_TIMEx_PWMN_Start+0x5e>
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40000400 	.word	0x40000400
 800552c:	40014000 	.word	0x40014000

08005530 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005530:	233c      	movs	r3, #60	@ 0x3c
{
 8005532:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8005534:	5cc3      	ldrb	r3, [r0, r3]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d020      	beq.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x4c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553a:	233d      	movs	r3, #61	@ 0x3d
 800553c:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800553e:	2570      	movs	r5, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8005542:	6803      	ldr	r3, [r0, #0]
 8005544:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005546:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005548:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800554a:	680d      	ldr	r5, [r1, #0]
 800554c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800554e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005550:	4a0b      	ldr	r2, [pc, #44]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d005      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8005556:	4a0b      	ldr	r2, [pc, #44]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d002      	beq.n	8005562 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800555c:	4a0a      	ldr	r2, [pc, #40]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d104      	bne.n	800556c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005562:	2280      	movs	r2, #128	@ 0x80
 8005564:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005566:	684a      	ldr	r2, [r1, #4]
 8005568:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800556a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800556c:	233d      	movs	r3, #61	@ 0x3d
 800556e:	2201      	movs	r2, #1
 8005570:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8005572:	2200      	movs	r2, #0
 8005574:	3b01      	subs	r3, #1
 8005576:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005578:	2000      	movs	r0, #0
}
 800557a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800557c:	2002      	movs	r0, #2
 800557e:	e7fc      	b.n	800557a <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40000400 	.word	0x40000400
 8005588:	40014000 	.word	0x40014000

0800558c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800558c:	223c      	movs	r2, #60	@ 0x3c
{
 800558e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8005590:	5c83      	ldrb	r3, [r0, r2]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d01e      	beq.n	80055d4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005596:	68cb      	ldr	r3, [r1, #12]
 8005598:	4c0f      	ldr	r4, [pc, #60]	@ (80055d8 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 800559a:	4023      	ands	r3, r4
 800559c:	688c      	ldr	r4, [r1, #8]
 800559e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055a0:	4c0e      	ldr	r4, [pc, #56]	@ (80055dc <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 80055a2:	4023      	ands	r3, r4
 80055a4:	684c      	ldr	r4, [r1, #4]
 80055a6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055a8:	4c0d      	ldr	r4, [pc, #52]	@ (80055e0 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 80055aa:	4023      	ands	r3, r4
 80055ac:	680c      	ldr	r4, [r1, #0]
 80055ae:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055b0:	4c0c      	ldr	r4, [pc, #48]	@ (80055e4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 80055b2:	4023      	ands	r3, r4
 80055b4:	690c      	ldr	r4, [r1, #16]
 80055b6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055b8:	4c0b      	ldr	r4, [pc, #44]	@ (80055e8 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80055ba:	4023      	ands	r3, r4
 80055bc:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055be:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055c0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055c2:	4c0a      	ldr	r4, [pc, #40]	@ (80055ec <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80055c4:	4023      	ands	r3, r4
 80055c6:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055c8:	6801      	ldr	r1, [r0, #0]
 80055ca:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80055cc:	2300      	movs	r3, #0
 80055ce:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80055d0:	2000      	movs	r0, #0
}
 80055d2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80055d4:	2002      	movs	r0, #2
 80055d6:	e7fc      	b.n	80055d2 <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 80055d8:	fffffcff 	.word	0xfffffcff
 80055dc:	fffffbff 	.word	0xfffffbff
 80055e0:	fffff7ff 	.word	0xfffff7ff
 80055e4:	ffffefff 	.word	0xffffefff
 80055e8:	ffffdfff 	.word	0xffffdfff
 80055ec:	ffffbfff 	.word	0xffffbfff

080055f0 <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055f0:	2344      	movs	r3, #68	@ 0x44
 80055f2:	2200      	movs	r2, #0
 80055f4:	52c2      	strh	r2, [r0, r3]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80055f6:	4a02      	ldr	r2, [pc, #8]	@ (8005600 <USB_EnableGlobalInt+0x10>)
 80055f8:	3b04      	subs	r3, #4
 80055fa:	52c2      	strh	r2, [r0, r3]

  return HAL_OK;
}
 80055fc:	2000      	movs	r0, #0
 80055fe:	4770      	bx	lr
 8005600:	ffffbf80 	.word	0xffffbf80

08005604 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005604:	2240      	movs	r2, #64	@ 0x40
 8005606:	5a83      	ldrh	r3, [r0, r2]
 8005608:	4902      	ldr	r1, [pc, #8]	@ (8005614 <USB_DisableGlobalInt+0x10>)
 800560a:	400b      	ands	r3, r1
 800560c:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 800560e:	2000      	movs	r0, #0
 8005610:	4770      	bx	lr
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	0000407f 	.word	0x0000407f

08005618 <USB_DevInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005618:	2240      	movs	r2, #64	@ 0x40
 800561a:	2301      	movs	r3, #1
 800561c:	5283      	strh	r3, [r0, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	5283      	strh	r3, [r0, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005622:	3204      	adds	r2, #4
 8005624:	5283      	strh	r3, [r0, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005626:	320c      	adds	r2, #12
 8005628:	5283      	strh	r3, [r0, r2]

  return HAL_OK;
}
 800562a:	2000      	movs	r0, #0
{
 800562c:	b082      	sub	sp, #8
}
 800562e:	b002      	add	sp, #8
 8005630:	4770      	bx	lr
 8005632:	46c0      	nop			@ (mov r8, r8)

08005634 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005636:	46ce      	mov	lr, r9
 8005638:	4647      	mov	r7, r8
 800563a:	b580      	push	{r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800563c:	780d      	ldrb	r5, [r1, #0]
{
 800563e:	0004      	movs	r4, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005640:	00ab      	lsls	r3, r5, #2
 8005642:	18c3      	adds	r3, r0, r3
 8005644:	881a      	ldrh	r2, [r3, #0]
 8005646:	489d      	ldr	r0, [pc, #628]	@ (80058bc <USB_ActivateEndpoint+0x288>)

  /* initialize Endpoint */
  switch (ep->type)
 8005648:	78ce      	ldrb	r6, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800564a:	4002      	ands	r2, r0
  switch (ep->type)
 800564c:	2e02      	cmp	r6, #2
 800564e:	d100      	bne.n	8005652 <USB_ActivateEndpoint+0x1e>
 8005650:	e110      	b.n	8005874 <USB_ActivateEndpoint+0x240>
 8005652:	d856      	bhi.n	8005702 <USB_ActivateEndpoint+0xce>
 8005654:	2e00      	cmp	r6, #0
 8005656:	d100      	bne.n	800565a <USB_ActivateEndpoint+0x26>
 8005658:	e0ed      	b.n	8005836 <USB_ActivateEndpoint+0x202>
    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
      break;

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800565a:	2080      	movs	r0, #128	@ 0x80
 800565c:	00c0      	lsls	r0, r0, #3
 800565e:	4302      	orrs	r2, r0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005660:	4897      	ldr	r0, [pc, #604]	@ (80058c0 <USB_ActivateEndpoint+0x28c>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005662:	4f98      	ldr	r7, [pc, #608]	@ (80058c4 <USB_ActivateEndpoint+0x290>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005664:	4302      	orrs	r2, r0
 8005666:	b292      	uxth	r2, r2
 8005668:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800566a:	881a      	ldrh	r2, [r3, #0]
 800566c:	403a      	ands	r2, r7
 800566e:	432a      	orrs	r2, r5
 8005670:	4310      	orrs	r0, r2
 8005672:	b280      	uxth	r0, r0
 8005674:	8018      	strh	r0, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005676:	7b0a      	ldrb	r2, [r1, #12]
 8005678:	2000      	movs	r0, #0
 800567a:	2a00      	cmp	r2, #0
 800567c:	d047      	beq.n	800570e <USB_ActivateEndpoint+0xda>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800567e:	881a      	ldrh	r2, [r3, #0]
 8005680:	4f91      	ldr	r7, [pc, #580]	@ (80058c8 <USB_ActivateEndpoint+0x294>)
 8005682:	403a      	ands	r2, r7
 8005684:	4f91      	ldr	r7, [pc, #580]	@ (80058cc <USB_ActivateEndpoint+0x298>)
 8005686:	433a      	orrs	r2, r7
 8005688:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800568a:	2780      	movs	r7, #128	@ 0x80
 800568c:	2250      	movs	r2, #80	@ 0x50
 800568e:	00ff      	lsls	r7, r7, #3
 8005690:	46b8      	mov	r8, r7
 8005692:	4694      	mov	ip, r2
 8005694:	890f      	ldrh	r7, [r1, #8]
 8005696:	5aa2      	ldrh	r2, [r4, r2]
 8005698:	00ed      	lsls	r5, r5, #3
 800569a:	1965      	adds	r5, r4, r5
 800569c:	1952      	adds	r2, r2, r5
 800569e:	087f      	lsrs	r7, r7, #1
 80056a0:	4442      	add	r2, r8
 80056a2:	007f      	lsls	r7, r7, #1
 80056a4:	8017      	strh	r7, [r2, #0]
 80056a6:	4662      	mov	r2, ip
 80056a8:	5aa2      	ldrh	r2, [r4, r2]
 80056aa:	4c89      	ldr	r4, [pc, #548]	@ (80058d0 <USB_ActivateEndpoint+0x29c>)
 80056ac:	1952      	adds	r2, r2, r5
 80056ae:	46a4      	mov	ip, r4
 80056b0:	894c      	ldrh	r4, [r1, #10]
 80056b2:	4462      	add	r2, ip
 80056b4:	0864      	lsrs	r4, r4, #1
 80056b6:	0064      	lsls	r4, r4, #1
 80056b8:	8014      	strh	r4, [r2, #0]

    if (ep->is_in == 0U)
 80056ba:	784a      	ldrb	r2, [r1, #1]
 80056bc:	2a00      	cmp	r2, #0
 80056be:	d15f      	bne.n	8005780 <USB_ActivateEndpoint+0x14c>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056c0:	881a      	ldrh	r2, [r3, #0]
 80056c2:	0452      	lsls	r2, r2, #17
 80056c4:	d505      	bpl.n	80056d2 <USB_ActivateEndpoint+0x9e>
 80056c6:	881a      	ldrh	r2, [r3, #0]
 80056c8:	497e      	ldr	r1, [pc, #504]	@ (80058c4 <USB_ActivateEndpoint+0x290>)
 80056ca:	400a      	ands	r2, r1
 80056cc:	4981      	ldr	r1, [pc, #516]	@ (80058d4 <USB_ActivateEndpoint+0x2a0>)
 80056ce:	430a      	orrs	r2, r1
 80056d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056d2:	881a      	ldrh	r2, [r3, #0]
 80056d4:	0652      	lsls	r2, r2, #25
 80056d6:	d500      	bpl.n	80056da <USB_ActivateEndpoint+0xa6>
 80056d8:	e0b1      	b.n	800583e <USB_ActivateEndpoint+0x20a>

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056da:	8819      	ldrh	r1, [r3, #0]
 80056dc:	4a7e      	ldr	r2, [pc, #504]	@ (80058d8 <USB_ActivateEndpoint+0x2a4>)
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056de:	4c7f      	ldr	r4, [pc, #508]	@ (80058dc <USB_ActivateEndpoint+0x2a8>)
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80056e0:	4011      	ands	r1, r2
 80056e2:	22c0      	movs	r2, #192	@ 0xc0
 80056e4:	0192      	lsls	r2, r2, #6
 80056e6:	404a      	eors	r2, r1
 80056e8:	4975      	ldr	r1, [pc, #468]	@ (80058c0 <USB_ActivateEndpoint+0x28c>)
 80056ea:	430a      	orrs	r2, r1
 80056ec:	b292      	uxth	r2, r2
 80056ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056f0:	881a      	ldrh	r2, [r3, #0]
 80056f2:	4022      	ands	r2, r4
 80056f4:	4311      	orrs	r1, r2
 80056f6:	b289      	uxth	r1, r1
 80056f8:	8019      	strh	r1, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80056fa:	bcc0      	pop	{r6, r7}
 80056fc:	46b9      	mov	r9, r7
 80056fe:	46b0      	mov	r8, r6
 8005700:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (ep->type)
 8005702:	2e03      	cmp	r6, #3
 8005704:	d12c      	bne.n	8005760 <USB_ActivateEndpoint+0x12c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8005706:	20c0      	movs	r0, #192	@ 0xc0
 8005708:	00c0      	lsls	r0, r0, #3
 800570a:	4302      	orrs	r2, r0
      break;
 800570c:	e7a8      	b.n	8005660 <USB_ActivateEndpoint+0x2c>
  if (ep->doublebuffer == 0U)
 800570e:	2000      	movs	r0, #0
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005710:	88ca      	ldrh	r2, [r1, #6]
 8005712:	00ef      	lsls	r7, r5, #3
 8005714:	0852      	lsrs	r2, r2, #1
 8005716:	0052      	lsls	r2, r2, #1
 8005718:	4691      	mov	r9, r2
    if (ep->is_in != 0U)
 800571a:	784a      	ldrb	r2, [r1, #1]
 800571c:	19e7      	adds	r7, r4, r7
 800571e:	2a00      	cmp	r2, #0
 8005720:	d052      	beq.n	80057c8 <USB_ActivateEndpoint+0x194>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005722:	2280      	movs	r2, #128	@ 0x80
 8005724:	2150      	movs	r1, #80	@ 0x50
 8005726:	00d2      	lsls	r2, r2, #3
 8005728:	4694      	mov	ip, r2
 800572a:	464a      	mov	r2, r9
 800572c:	5a61      	ldrh	r1, [r4, r1]
 800572e:	19c9      	adds	r1, r1, r7
 8005730:	4461      	add	r1, ip
 8005732:	800a      	strh	r2, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005734:	881a      	ldrh	r2, [r3, #0]
 8005736:	0652      	lsls	r2, r2, #25
 8005738:	d505      	bpl.n	8005746 <USB_ActivateEndpoint+0x112>
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	4961      	ldr	r1, [pc, #388]	@ (80058c4 <USB_ActivateEndpoint+0x290>)
 800573e:	400a      	ands	r2, r1
 8005740:	4967      	ldr	r1, [pc, #412]	@ (80058e0 <USB_ActivateEndpoint+0x2ac>)
 8005742:	430a      	orrs	r2, r1
 8005744:	801a      	strh	r2, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8005746:	2e01      	cmp	r6, #1
 8005748:	d100      	bne.n	800574c <USB_ActivateEndpoint+0x118>
 800574a:	e08c      	b.n	8005866 <USB_ActivateEndpoint+0x232>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800574c:	8819      	ldrh	r1, [r3, #0]
 800574e:	4a63      	ldr	r2, [pc, #396]	@ (80058dc <USB_ActivateEndpoint+0x2a8>)
 8005750:	4011      	ands	r1, r2
 8005752:	2220      	movs	r2, #32
 8005754:	4051      	eors	r1, r2
 8005756:	4a5a      	ldr	r2, [pc, #360]	@ (80058c0 <USB_ActivateEndpoint+0x28c>)
 8005758:	430a      	orrs	r2, r1
 800575a:	b292      	uxth	r2, r2
 800575c:	801a      	strh	r2, [r3, #0]
 800575e:	e7cc      	b.n	80056fa <USB_ActivateEndpoint+0xc6>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005760:	4857      	ldr	r0, [pc, #348]	@ (80058c0 <USB_ActivateEndpoint+0x28c>)
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005762:	4f58      	ldr	r7, [pc, #352]	@ (80058c4 <USB_ActivateEndpoint+0x290>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005764:	4302      	orrs	r2, r0
 8005766:	b292      	uxth	r2, r2
 8005768:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800576a:	881a      	ldrh	r2, [r3, #0]
 800576c:	403a      	ands	r2, r7
 800576e:	432a      	orrs	r2, r5
 8005770:	4310      	orrs	r0, r2
 8005772:	b280      	uxth	r0, r0
 8005774:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
 8005776:	7b0a      	ldrb	r2, [r1, #12]
 8005778:	2001      	movs	r0, #1
 800577a:	2a00      	cmp	r2, #0
 800577c:	d0c8      	beq.n	8005710 <USB_ActivateEndpoint+0xdc>
 800577e:	e77e      	b.n	800567e <USB_ActivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005780:	881a      	ldrh	r2, [r3, #0]
 8005782:	0452      	lsls	r2, r2, #17
 8005784:	d505      	bpl.n	8005792 <USB_ActivateEndpoint+0x15e>
 8005786:	881a      	ldrh	r2, [r3, #0]
 8005788:	494e      	ldr	r1, [pc, #312]	@ (80058c4 <USB_ActivateEndpoint+0x290>)
 800578a:	400a      	ands	r2, r1
 800578c:	4951      	ldr	r1, [pc, #324]	@ (80058d4 <USB_ActivateEndpoint+0x2a0>)
 800578e:	430a      	orrs	r2, r1
 8005790:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005792:	881a      	ldrh	r2, [r3, #0]
 8005794:	0652      	lsls	r2, r2, #25
 8005796:	d505      	bpl.n	80057a4 <USB_ActivateEndpoint+0x170>
 8005798:	881a      	ldrh	r2, [r3, #0]
 800579a:	494a      	ldr	r1, [pc, #296]	@ (80058c4 <USB_ActivateEndpoint+0x290>)
 800579c:	400a      	ands	r2, r1
 800579e:	4950      	ldr	r1, [pc, #320]	@ (80058e0 <USB_ActivateEndpoint+0x2ac>)
 80057a0:	430a      	orrs	r2, r1
 80057a2:	801a      	strh	r2, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 80057a4:	2e01      	cmp	r6, #1
 80057a6:	d057      	beq.n	8005858 <USB_ActivateEndpoint+0x224>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057a8:	8819      	ldrh	r1, [r3, #0]
 80057aa:	4a4c      	ldr	r2, [pc, #304]	@ (80058dc <USB_ActivateEndpoint+0x2a8>)
 80057ac:	4011      	ands	r1, r2
 80057ae:	2220      	movs	r2, #32
 80057b0:	4051      	eors	r1, r2
 80057b2:	4a43      	ldr	r2, [pc, #268]	@ (80058c0 <USB_ActivateEndpoint+0x28c>)
 80057b4:	430a      	orrs	r2, r1
 80057b6:	b292      	uxth	r2, r2
 80057b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057ba:	881a      	ldrh	r2, [r3, #0]
 80057bc:	4946      	ldr	r1, [pc, #280]	@ (80058d8 <USB_ActivateEndpoint+0x2a4>)
 80057be:	400a      	ands	r2, r1
 80057c0:	4942      	ldr	r1, [pc, #264]	@ (80058cc <USB_ActivateEndpoint+0x298>)
 80057c2:	430a      	orrs	r2, r1
 80057c4:	801a      	strh	r2, [r3, #0]
  return ret;
 80057c6:	e798      	b.n	80056fa <USB_ActivateEndpoint+0xc6>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057c8:	2250      	movs	r2, #80	@ 0x50
 80057ca:	5aa6      	ldrh	r6, [r4, r2]
 80057cc:	4694      	mov	ip, r2
 80057ce:	4a40      	ldr	r2, [pc, #256]	@ (80058d0 <USB_ActivateEndpoint+0x29c>)
 80057d0:	19f6      	adds	r6, r6, r7
 80057d2:	4690      	mov	r8, r2
 80057d4:	464a      	mov	r2, r9
 80057d6:	4446      	add	r6, r8
 80057d8:	8032      	strh	r2, [r6, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80057da:	4662      	mov	r2, ip
 80057dc:	5aa2      	ldrh	r2, [r4, r2]
 80057de:	4c41      	ldr	r4, [pc, #260]	@ (80058e4 <USB_ActivateEndpoint+0x2b0>)
 80057e0:	19d2      	adds	r2, r2, r7
 80057e2:	46a4      	mov	ip, r4
 80057e4:	4462      	add	r2, ip
 80057e6:	8814      	ldrh	r4, [r2, #0]
 80057e8:	6909      	ldr	r1, [r1, #16]
 80057ea:	05a4      	lsls	r4, r4, #22
 80057ec:	0da4      	lsrs	r4, r4, #22
 80057ee:	8014      	strh	r4, [r2, #0]
 80057f0:	2900      	cmp	r1, #0
 80057f2:	d02b      	beq.n	800584c <USB_ActivateEndpoint+0x218>
 80057f4:	293e      	cmp	r1, #62	@ 0x3e
 80057f6:	d853      	bhi.n	80058a0 <USB_ActivateEndpoint+0x26c>
 80057f8:	2601      	movs	r6, #1
 80057fa:	084c      	lsrs	r4, r1, #1
 80057fc:	4031      	ands	r1, r6
 80057fe:	1864      	adds	r4, r4, r1
 8005800:	8811      	ldrh	r1, [r2, #0]
 8005802:	02a4      	lsls	r4, r4, #10
 8005804:	4321      	orrs	r1, r4
 8005806:	b289      	uxth	r1, r1
 8005808:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	0452      	lsls	r2, r2, #17
 800580e:	d505      	bpl.n	800581c <USB_ActivateEndpoint+0x1e8>
 8005810:	881a      	ldrh	r2, [r3, #0]
 8005812:	492c      	ldr	r1, [pc, #176]	@ (80058c4 <USB_ActivateEndpoint+0x290>)
 8005814:	400a      	ands	r2, r1
 8005816:	492f      	ldr	r1, [pc, #188]	@ (80058d4 <USB_ActivateEndpoint+0x2a0>)
 8005818:	430a      	orrs	r2, r1
 800581a:	801a      	strh	r2, [r3, #0]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800581c:	4a2e      	ldr	r2, [pc, #184]	@ (80058d8 <USB_ActivateEndpoint+0x2a4>)
 800581e:	8819      	ldrh	r1, [r3, #0]
 8005820:	4011      	ands	r1, r2
 8005822:	22c0      	movs	r2, #192	@ 0xc0
      if (ep->num == 0U)
 8005824:	2d00      	cmp	r5, #0
 8005826:	d000      	beq.n	800582a <USB_ActivateEndpoint+0x1f6>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005828:	2280      	movs	r2, #128	@ 0x80
 800582a:	0192      	lsls	r2, r2, #6
 800582c:	404a      	eors	r2, r1
 800582e:	4927      	ldr	r1, [pc, #156]	@ (80058cc <USB_ActivateEndpoint+0x298>)
 8005830:	430a      	orrs	r2, r1
 8005832:	801a      	strh	r2, [r3, #0]
 8005834:	e761      	b.n	80056fa <USB_ActivateEndpoint+0xc6>
      wEpRegVal |= USB_EP_CONTROL;
 8005836:	2080      	movs	r0, #128	@ 0x80
 8005838:	0080      	lsls	r0, r0, #2
 800583a:	4302      	orrs	r2, r0
      break;
 800583c:	e710      	b.n	8005660 <USB_ActivateEndpoint+0x2c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800583e:	881a      	ldrh	r2, [r3, #0]
 8005840:	4920      	ldr	r1, [pc, #128]	@ (80058c4 <USB_ActivateEndpoint+0x290>)
 8005842:	400a      	ands	r2, r1
 8005844:	4926      	ldr	r1, [pc, #152]	@ (80058e0 <USB_ActivateEndpoint+0x2ac>)
 8005846:	430a      	orrs	r2, r1
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	e746      	b.n	80056da <USB_ActivateEndpoint+0xa6>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800584c:	2480      	movs	r4, #128	@ 0x80
 800584e:	8811      	ldrh	r1, [r2, #0]
 8005850:	0224      	lsls	r4, r4, #8
 8005852:	4321      	orrs	r1, r4
 8005854:	8011      	strh	r1, [r2, #0]
 8005856:	e7d8      	b.n	800580a <USB_ActivateEndpoint+0x1d6>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005858:	881a      	ldrh	r2, [r3, #0]
 800585a:	4920      	ldr	r1, [pc, #128]	@ (80058dc <USB_ActivateEndpoint+0x2a8>)
 800585c:	400a      	ands	r2, r1
 800585e:	491b      	ldr	r1, [pc, #108]	@ (80058cc <USB_ActivateEndpoint+0x298>)
 8005860:	430a      	orrs	r2, r1
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e7a9      	b.n	80057ba <USB_ActivateEndpoint+0x186>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005866:	881a      	ldrh	r2, [r3, #0]
 8005868:	491c      	ldr	r1, [pc, #112]	@ (80058dc <USB_ActivateEndpoint+0x2a8>)
 800586a:	400a      	ands	r2, r1
 800586c:	4917      	ldr	r1, [pc, #92]	@ (80058cc <USB_ActivateEndpoint+0x298>)
 800586e:	430a      	orrs	r2, r1
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	e742      	b.n	80056fa <USB_ActivateEndpoint+0xc6>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005874:	4812      	ldr	r0, [pc, #72]	@ (80058c0 <USB_ActivateEndpoint+0x28c>)
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005876:	4f13      	ldr	r7, [pc, #76]	@ (80058c4 <USB_ActivateEndpoint+0x290>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005878:	4302      	orrs	r2, r0
 800587a:	b292      	uxth	r2, r2
 800587c:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800587e:	881a      	ldrh	r2, [r3, #0]
 8005880:	403a      	ands	r2, r7
 8005882:	432a      	orrs	r2, r5
 8005884:	4310      	orrs	r0, r2
 8005886:	b280      	uxth	r0, r0
 8005888:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
 800588a:	7b0a      	ldrb	r2, [r1, #12]
 800588c:	2a00      	cmp	r2, #0
 800588e:	d100      	bne.n	8005892 <USB_ActivateEndpoint+0x25e>
 8005890:	e73d      	b.n	800570e <USB_ActivateEndpoint+0xda>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005892:	881a      	ldrh	r2, [r3, #0]
 8005894:	4814      	ldr	r0, [pc, #80]	@ (80058e8 <USB_ActivateEndpoint+0x2b4>)
 8005896:	403a      	ands	r2, r7
 8005898:	4302      	orrs	r2, r0
 800589a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800589c:	2000      	movs	r0, #0
 800589e:	e6f4      	b.n	800568a <USB_ActivateEndpoint+0x56>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80058a0:	261f      	movs	r6, #31
 80058a2:	094c      	lsrs	r4, r1, #5
 80058a4:	4031      	ands	r1, r6
 80058a6:	424e      	negs	r6, r1
 80058a8:	4171      	adcs	r1, r6
 80058aa:	1a64      	subs	r4, r4, r1
 80058ac:	8811      	ldrh	r1, [r2, #0]
 80058ae:	02a4      	lsls	r4, r4, #10
 80058b0:	430c      	orrs	r4, r1
 80058b2:	490e      	ldr	r1, [pc, #56]	@ (80058ec <USB_ActivateEndpoint+0x2b8>)
 80058b4:	4321      	orrs	r1, r4
 80058b6:	b289      	uxth	r1, r1
 80058b8:	8011      	strh	r1, [r2, #0]
 80058ba:	e7a6      	b.n	800580a <USB_ActivateEndpoint+0x1d6>
 80058bc:	ffff898f 	.word	0xffff898f
 80058c0:	ffff8080 	.word	0xffff8080
 80058c4:	ffff8f8f 	.word	0xffff8f8f
 80058c8:	ffff8e8f 	.word	0xffff8e8f
 80058cc:	00008080 	.word	0x00008080
 80058d0:	00000404 	.word	0x00000404
 80058d4:	0000c080 	.word	0x0000c080
 80058d8:	ffffbf8f 	.word	0xffffbf8f
 80058dc:	ffff8fbf 	.word	0xffff8fbf
 80058e0:	000080c0 	.word	0x000080c0
 80058e4:	00000406 	.word	0x00000406
 80058e8:	00008180 	.word	0x00008180
 80058ec:	ffff8000 	.word	0xffff8000

080058f0 <USB_DeactivateEndpoint>:
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058f0:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 80058f2:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	18c0      	adds	r0, r0, r3
  if (ep->doublebuffer == 0U)
 80058f8:	7b0b      	ldrb	r3, [r1, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10d      	bne.n	800591a <USB_DeactivateEndpoint+0x2a>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058fe:	8803      	ldrh	r3, [r0, #0]
    if (ep->is_in != 0U)
 8005900:	2a00      	cmp	r2, #0
 8005902:	d057      	beq.n	80059b4 <USB_DeactivateEndpoint+0xc4>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005904:	065b      	lsls	r3, r3, #25
 8005906:	d500      	bpl.n	800590a <USB_DeactivateEndpoint+0x1a>
 8005908:	e063      	b.n	80059d2 <USB_DeactivateEndpoint+0xe2>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800590a:	8803      	ldrh	r3, [r0, #0]
 800590c:	4a34      	ldr	r2, [pc, #208]	@ (80059e0 <USB_DeactivateEndpoint+0xf0>)
 800590e:	4013      	ands	r3, r2
 8005910:	4a34      	ldr	r2, [pc, #208]	@ (80059e4 <USB_DeactivateEndpoint+0xf4>)
 8005912:	4313      	orrs	r3, r2
 8005914:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005916:	2000      	movs	r0, #0
 8005918:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800591a:	8803      	ldrh	r3, [r0, #0]
    if (ep->is_in == 0U)
 800591c:	2a00      	cmp	r2, #0
 800591e:	d124      	bne.n	800596a <USB_DeactivateEndpoint+0x7a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005920:	045b      	lsls	r3, r3, #17
 8005922:	d505      	bpl.n	8005930 <USB_DeactivateEndpoint+0x40>
 8005924:	8803      	ldrh	r3, [r0, #0]
 8005926:	4a30      	ldr	r2, [pc, #192]	@ (80059e8 <USB_DeactivateEndpoint+0xf8>)
 8005928:	4013      	ands	r3, r2
 800592a:	4a30      	ldr	r2, [pc, #192]	@ (80059ec <USB_DeactivateEndpoint+0xfc>)
 800592c:	4313      	orrs	r3, r2
 800592e:	8003      	strh	r3, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005930:	8803      	ldrh	r3, [r0, #0]
 8005932:	065b      	lsls	r3, r3, #25
 8005934:	d505      	bpl.n	8005942 <USB_DeactivateEndpoint+0x52>
 8005936:	8803      	ldrh	r3, [r0, #0]
 8005938:	4a2b      	ldr	r2, [pc, #172]	@ (80059e8 <USB_DeactivateEndpoint+0xf8>)
 800593a:	4013      	ands	r3, r2
 800593c:	4a2c      	ldr	r2, [pc, #176]	@ (80059f0 <USB_DeactivateEndpoint+0x100>)
 800593e:	4313      	orrs	r3, r2
 8005940:	8003      	strh	r3, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8005942:	8803      	ldrh	r3, [r0, #0]
 8005944:	4a28      	ldr	r2, [pc, #160]	@ (80059e8 <USB_DeactivateEndpoint+0xf8>)
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005946:	4926      	ldr	r1, [pc, #152]	@ (80059e0 <USB_DeactivateEndpoint+0xf0>)
      PCD_TX_DTOG(USBx, ep->num);
 8005948:	4013      	ands	r3, r2
 800594a:	4a29      	ldr	r2, [pc, #164]	@ (80059f0 <USB_DeactivateEndpoint+0x100>)
 800594c:	4313      	orrs	r3, r2
 800594e:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005950:	8803      	ldrh	r3, [r0, #0]
 8005952:	4a28      	ldr	r2, [pc, #160]	@ (80059f4 <USB_DeactivateEndpoint+0x104>)
 8005954:	4013      	ands	r3, r2
 8005956:	4a28      	ldr	r2, [pc, #160]	@ (80059f8 <USB_DeactivateEndpoint+0x108>)
 8005958:	4313      	orrs	r3, r2
 800595a:	b29b      	uxth	r3, r3
 800595c:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800595e:	8803      	ldrh	r3, [r0, #0]
 8005960:	400b      	ands	r3, r1
 8005962:	431a      	orrs	r2, r3
 8005964:	b292      	uxth	r2, r2
 8005966:	8002      	strh	r2, [r0, #0]
 8005968:	e7d5      	b.n	8005916 <USB_DeactivateEndpoint+0x26>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800596a:	045b      	lsls	r3, r3, #17
 800596c:	d505      	bpl.n	800597a <USB_DeactivateEndpoint+0x8a>
 800596e:	8803      	ldrh	r3, [r0, #0]
 8005970:	4a1d      	ldr	r2, [pc, #116]	@ (80059e8 <USB_DeactivateEndpoint+0xf8>)
 8005972:	4013      	ands	r3, r2
 8005974:	4a1d      	ldr	r2, [pc, #116]	@ (80059ec <USB_DeactivateEndpoint+0xfc>)
 8005976:	4313      	orrs	r3, r2
 8005978:	8003      	strh	r3, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800597a:	8803      	ldrh	r3, [r0, #0]
 800597c:	065b      	lsls	r3, r3, #25
 800597e:	d505      	bpl.n	800598c <USB_DeactivateEndpoint+0x9c>
 8005980:	8803      	ldrh	r3, [r0, #0]
 8005982:	4a19      	ldr	r2, [pc, #100]	@ (80059e8 <USB_DeactivateEndpoint+0xf8>)
 8005984:	4013      	ands	r3, r2
 8005986:	4a1a      	ldr	r2, [pc, #104]	@ (80059f0 <USB_DeactivateEndpoint+0x100>)
 8005988:	4313      	orrs	r3, r2
 800598a:	8003      	strh	r3, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800598c:	8803      	ldrh	r3, [r0, #0]
 800598e:	4a16      	ldr	r2, [pc, #88]	@ (80059e8 <USB_DeactivateEndpoint+0xf8>)
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005990:	4918      	ldr	r1, [pc, #96]	@ (80059f4 <USB_DeactivateEndpoint+0x104>)
      PCD_RX_DTOG(USBx, ep->num);
 8005992:	4013      	ands	r3, r2
 8005994:	4a15      	ldr	r2, [pc, #84]	@ (80059ec <USB_DeactivateEndpoint+0xfc>)
 8005996:	4313      	orrs	r3, r2
 8005998:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800599a:	8803      	ldrh	r3, [r0, #0]
 800599c:	4a10      	ldr	r2, [pc, #64]	@ (80059e0 <USB_DeactivateEndpoint+0xf0>)
 800599e:	4013      	ands	r3, r2
 80059a0:	4a15      	ldr	r2, [pc, #84]	@ (80059f8 <USB_DeactivateEndpoint+0x108>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059a8:	8803      	ldrh	r3, [r0, #0]
 80059aa:	400b      	ands	r3, r1
 80059ac:	431a      	orrs	r2, r3
 80059ae:	b292      	uxth	r2, r2
 80059b0:	8002      	strh	r2, [r0, #0]
 80059b2:	e7b0      	b.n	8005916 <USB_DeactivateEndpoint+0x26>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059b4:	045b      	lsls	r3, r3, #17
 80059b6:	d505      	bpl.n	80059c4 <USB_DeactivateEndpoint+0xd4>
 80059b8:	8803      	ldrh	r3, [r0, #0]
 80059ba:	4a0b      	ldr	r2, [pc, #44]	@ (80059e8 <USB_DeactivateEndpoint+0xf8>)
 80059bc:	4013      	ands	r3, r2
 80059be:	4a0b      	ldr	r2, [pc, #44]	@ (80059ec <USB_DeactivateEndpoint+0xfc>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80059c4:	8803      	ldrh	r3, [r0, #0]
 80059c6:	4a0b      	ldr	r2, [pc, #44]	@ (80059f4 <USB_DeactivateEndpoint+0x104>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	4a06      	ldr	r2, [pc, #24]	@ (80059e4 <USB_DeactivateEndpoint+0xf4>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	8003      	strh	r3, [r0, #0]
 80059d0:	e7a1      	b.n	8005916 <USB_DeactivateEndpoint+0x26>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059d2:	8803      	ldrh	r3, [r0, #0]
 80059d4:	4a04      	ldr	r2, [pc, #16]	@ (80059e8 <USB_DeactivateEndpoint+0xf8>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	4a05      	ldr	r2, [pc, #20]	@ (80059f0 <USB_DeactivateEndpoint+0x100>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	8003      	strh	r3, [r0, #0]
 80059de:	e794      	b.n	800590a <USB_DeactivateEndpoint+0x1a>
 80059e0:	ffff8fbf 	.word	0xffff8fbf
 80059e4:	00008080 	.word	0x00008080
 80059e8:	ffff8f8f 	.word	0xffff8f8f
 80059ec:	0000c080 	.word	0x0000c080
 80059f0:	000080c0 	.word	0x000080c0
 80059f4:	ffffbf8f 	.word	0xffffbf8f
 80059f8:	ffff8080 	.word	0xffff8080

080059fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80059fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fe:	4645      	mov	r5, r8
 8005a00:	46de      	mov	lr, fp
 8005a02:	4657      	mov	r7, sl
 8005a04:	464e      	mov	r6, r9
 8005a06:	b5e0      	push	{r5, r6, r7, lr}
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a08:	784b      	ldrb	r3, [r1, #1]
{
 8005a0a:	0002      	movs	r2, r0
    {
      len = ep->xfer_len;
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005a0c:	7b0d      	ldrb	r5, [r1, #12]
{
 8005a0e:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d100      	bne.n	8005a16 <USB_EPStartXfer+0x1a>
 8005a14:	e072      	b.n	8005afc <USB_EPStartXfer+0x100>

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	d04c      	beq.n	8005ab4 <USB_EPStartXfer+0xb8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005a1a:	78cc      	ldrb	r4, [r1, #3]
 8005a1c:	2c02      	cmp	r4, #2
 8005a1e:	d100      	bne.n	8005a22 <USB_EPStartXfer+0x26>
 8005a20:	e0e7      	b.n	8005bf2 <USB_EPStartXfer+0x1f6>
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
      }
      else
      {
        return HAL_ERROR;
 8005a22:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8005a24:	2c01      	cmp	r4, #1
 8005a26:	d13e      	bne.n	8005aa6 <USB_EPStartXfer+0xaa>
        if (ep->xfer_len > ep->maxpacket)
 8005a28:	698d      	ldr	r5, [r1, #24]
 8005a2a:	6908      	ldr	r0, [r1, #16]
          ep->xfer_len = 0U;
 8005a2c:	2400      	movs	r4, #0
        if (ep->xfer_len > ep->maxpacket)
 8005a2e:	4285      	cmp	r5, r0
 8005a30:	d901      	bls.n	8005a36 <USB_EPStartXfer+0x3a>
          ep->xfer_len -= len;
 8005a32:	1a2c      	subs	r4, r5, r0
 8005a34:	0005      	movs	r5, r0
 8005a36:	618c      	str	r4, [r1, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d127      	bne.n	8005a8c <USB_EPStartXfer+0x90>
 8005a3c:	2650      	movs	r6, #80	@ 0x50
 8005a3e:	4b95      	ldr	r3, [pc, #596]	@ (8005c94 <USB_EPStartXfer+0x298>)
 8005a40:	5b90      	ldrh	r0, [r2, r6]
 8005a42:	780c      	ldrb	r4, [r1, #0]
 8005a44:	18d3      	adds	r3, r2, r3
 8005a46:	181b      	adds	r3, r3, r0
 8005a48:	00e4      	lsls	r4, r4, #3
 8005a4a:	191b      	adds	r3, r3, r4
 8005a4c:	8818      	ldrh	r0, [r3, #0]
 8005a4e:	0580      	lsls	r0, r0, #22
 8005a50:	0d80      	lsrs	r0, r0, #22
 8005a52:	8018      	strh	r0, [r3, #0]
 8005a54:	4890      	ldr	r0, [pc, #576]	@ (8005c98 <USB_EPStartXfer+0x29c>)
 8005a56:	4680      	mov	r8, r0
 8005a58:	4490      	add	r8, r2
 8005a5a:	2d00      	cmp	r5, #0
 8005a5c:	d100      	bne.n	8005a60 <USB_EPStartXfer+0x64>
 8005a5e:	e207      	b.n	8005e70 <USB_EPStartXfer+0x474>
 8005a60:	2d3e      	cmp	r5, #62	@ 0x3e
 8005a62:	d900      	bls.n	8005a66 <USB_EPStartXfer+0x6a>
 8005a64:	e295      	b.n	8005f92 <USB_EPStartXfer+0x596>
 8005a66:	2001      	movs	r0, #1
 8005a68:	086f      	lsrs	r7, r5, #1
 8005a6a:	4005      	ands	r5, r0
 8005a6c:	197f      	adds	r7, r7, r5
 8005a6e:	02bf      	lsls	r7, r7, #10
 8005a70:	881d      	ldrh	r5, [r3, #0]
 8005a72:	b2bf      	uxth	r7, r7
 8005a74:	433d      	orrs	r5, r7
 8005a76:	801d      	strh	r5, [r3, #0]
 8005a78:	5b93      	ldrh	r3, [r2, r6]
 8005a7a:	4443      	add	r3, r8
 8005a7c:	191b      	adds	r3, r3, r4
 8005a7e:	8818      	ldrh	r0, [r3, #0]
 8005a80:	0580      	lsls	r0, r0, #22
 8005a82:	0d80      	lsrs	r0, r0, #22
 8005a84:	8018      	strh	r0, [r3, #0]
 8005a86:	8818      	ldrh	r0, [r3, #0]
 8005a88:	4307      	orrs	r7, r0
 8005a8a:	801f      	strh	r7, [r3, #0]
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005a8c:	780b      	ldrb	r3, [r1, #0]
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	18d2      	adds	r2, r2, r3
 8005a92:	8811      	ldrh	r1, [r2, #0]
 8005a94:	4b81      	ldr	r3, [pc, #516]	@ (8005c9c <USB_EPStartXfer+0x2a0>)
  }

  return HAL_OK;
 8005a96:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a98:	4019      	ands	r1, r3
 8005a9a:	23c0      	movs	r3, #192	@ 0xc0
 8005a9c:	019b      	lsls	r3, r3, #6
 8005a9e:	404b      	eors	r3, r1
 8005aa0:	497f      	ldr	r1, [pc, #508]	@ (8005ca0 <USB_EPStartXfer+0x2a4>)
 8005aa2:	430b      	orrs	r3, r1
 8005aa4:	8013      	strh	r3, [r2, #0]
}
 8005aa6:	b007      	add	sp, #28
 8005aa8:	bcf0      	pop	{r4, r5, r6, r7}
 8005aaa:	46bb      	mov	fp, r7
 8005aac:	46b2      	mov	sl, r6
 8005aae:	46a9      	mov	r9, r5
 8005ab0:	46a0      	mov	r8, r4
 8005ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (ep->xfer_len > ep->maxpacket)
 8005ab4:	698c      	ldr	r4, [r1, #24]
 8005ab6:	690b      	ldr	r3, [r1, #16]
        ep->xfer_len = 0U;
 8005ab8:	2000      	movs	r0, #0
      if (ep->xfer_len > ep->maxpacket)
 8005aba:	429c      	cmp	r4, r3
 8005abc:	d901      	bls.n	8005ac2 <USB_EPStartXfer+0xc6>
        ep->xfer_len -= len;
 8005abe:	1ae0      	subs	r0, r4, r3
 8005ac0:	001c      	movs	r4, r3
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ac2:	2350      	movs	r3, #80	@ 0x50
 8005ac4:	6188      	str	r0, [r1, #24]
 8005ac6:	5ad5      	ldrh	r5, [r2, r3]
 8005ac8:	4b73      	ldr	r3, [pc, #460]	@ (8005c98 <USB_EPStartXfer+0x29c>)
 8005aca:	7808      	ldrb	r0, [r1, #0]
 8005acc:	18d3      	adds	r3, r2, r3
 8005ace:	195b      	adds	r3, r3, r5
 8005ad0:	00c0      	lsls	r0, r0, #3
 8005ad2:	18c0      	adds	r0, r0, r3
 8005ad4:	8803      	ldrh	r3, [r0, #0]
 8005ad6:	059b      	lsls	r3, r3, #22
 8005ad8:	0d9b      	lsrs	r3, r3, #22
 8005ada:	8003      	strh	r3, [r0, #0]
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	d100      	bne.n	8005ae2 <USB_EPStartXfer+0xe6>
 8005ae0:	e081      	b.n	8005be6 <USB_EPStartXfer+0x1ea>
 8005ae2:	2c3e      	cmp	r4, #62	@ 0x3e
 8005ae4:	d900      	bls.n	8005ae8 <USB_EPStartXfer+0xec>
 8005ae6:	e0c6      	b.n	8005c76 <USB_EPStartXfer+0x27a>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	0865      	lsrs	r5, r4, #1
 8005aec:	4023      	ands	r3, r4
 8005aee:	18ed      	adds	r5, r5, r3
 8005af0:	8803      	ldrh	r3, [r0, #0]
 8005af2:	02ad      	lsls	r5, r5, #10
 8005af4:	432b      	orrs	r3, r5
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	8003      	strh	r3, [r0, #0]
 8005afa:	e7c7      	b.n	8005a8c <USB_EPStartXfer+0x90>
    if (ep->xfer_len > ep->maxpacket)
 8005afc:	690c      	ldr	r4, [r1, #16]
 8005afe:	6988      	ldr	r0, [r1, #24]
 8005b00:	42a0      	cmp	r0, r4
 8005b02:	d868      	bhi.n	8005bd6 <USB_EPStartXfer+0x1da>
    if (ep->doublebuffer == 0U)
 8005b04:	2680      	movs	r6, #128	@ 0x80
 8005b06:	00f6      	lsls	r6, r6, #3
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b08:	694b      	ldr	r3, [r1, #20]
 8005b0a:	1997      	adds	r7, r2, r6
    if (ep->doublebuffer == 0U)
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	d12f      	bne.n	8005b70 <USB_EPStartXfer+0x174>
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b10:	0404      	lsls	r4, r0, #16
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b12:	b286      	uxth	r6, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b14:	0c24      	lsrs	r4, r4, #16
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b16:	88c8      	ldrh	r0, [r1, #6]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b18:	3401      	adds	r4, #1
 8005b1a:	0864      	lsrs	r4, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005b1c:	19c0      	adds	r0, r0, r7

  for (count = n; count != 0U; count--)
 8005b1e:	2c00      	cmp	r4, #0
 8005b20:	d00f      	beq.n	8005b42 <USB_EPStartXfer+0x146>
 8005b22:	0064      	lsls	r4, r4, #1
 8005b24:	1ac5      	subs	r5, r0, r3
 8005b26:	191c      	adds	r4, r3, r4
 8005b28:	4694      	mov	ip, r2
 8005b2a:	002a      	movs	r2, r5
 8005b2c:	0025      	movs	r5, r4
 8005b2e:	7858      	ldrb	r0, [r3, #1]
 8005b30:	781c      	ldrb	r4, [r3, #0]
 8005b32:	0200      	lsls	r0, r0, #8
 8005b34:	189f      	adds	r7, r3, r2
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005b36:	4320      	orrs	r0, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
 8005b38:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005b3a:	8038      	strh	r0, [r7, #0]
  for (count = n; count != 0U; count--)
 8005b3c:	42ab      	cmp	r3, r5
 8005b3e:	d1f6      	bne.n	8005b2e <USB_EPStartXfer+0x132>
 8005b40:	4662      	mov	r2, ip
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b42:	2350      	movs	r3, #80	@ 0x50
 8005b44:	4853      	ldr	r0, [pc, #332]	@ (8005c94 <USB_EPStartXfer+0x298>)
 8005b46:	5ad4      	ldrh	r4, [r2, r3]
 8005b48:	780b      	ldrb	r3, [r1, #0]
 8005b4a:	1810      	adds	r0, r2, r0
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	1900      	adds	r0, r0, r4
 8005b50:	181b      	adds	r3, r3, r0
 8005b52:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b54:	780b      	ldrb	r3, [r1, #0]
  return HAL_OK;
 8005b56:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	18d3      	adds	r3, r2, r3
 8005b5c:	8819      	ldrh	r1, [r3, #0]
 8005b5e:	4a51      	ldr	r2, [pc, #324]	@ (8005ca4 <USB_EPStartXfer+0x2a8>)
 8005b60:	4011      	ands	r1, r2
 8005b62:	2230      	movs	r2, #48	@ 0x30
 8005b64:	4051      	eors	r1, r2
 8005b66:	4a50      	ldr	r2, [pc, #320]	@ (8005ca8 <USB_EPStartXfer+0x2ac>)
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	b292      	uxth	r2, r2
 8005b6c:	801a      	strh	r2, [r3, #0]
 8005b6e:	e79a      	b.n	8005aa6 <USB_EPStartXfer+0xaa>
        if (ep->xfer_len_db > ep->maxpacket)
 8005b70:	6a0d      	ldr	r5, [r1, #32]
 8005b72:	46ab      	mov	fp, r5
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b74:	780d      	ldrb	r5, [r1, #0]
 8005b76:	00ae      	lsls	r6, r5, #2
 8005b78:	46b4      	mov	ip, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b7a:	00ed      	lsls	r5, r5, #3
 8005b7c:	9501      	str	r5, [sp, #4]
      if (ep->type == EP_TYPE_BULK)
 8005b7e:	78ce      	ldrb	r6, [r1, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005b80:	4494      	add	ip, r2
      if (ep->type == EP_TYPE_BULK)
 8005b82:	2e02      	cmp	r6, #2
 8005b84:	d100      	bne.n	8005b88 <USB_EPStartXfer+0x18c>
 8005b86:	e099      	b.n	8005cbc <USB_EPStartXfer+0x2c0>
        ep->xfer_len_db -= len;
 8005b88:	465c      	mov	r4, fp
 8005b8a:	1a26      	subs	r6, r4, r0
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b8c:	4664      	mov	r4, ip
        ep->xfer_len_db -= len;
 8005b8e:	620e      	str	r6, [r1, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005b90:	b286      	uxth	r6, r0
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b92:	0400      	lsls	r0, r0, #16
 8005b94:	0c00      	lsrs	r0, r0, #16
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b96:	8824      	ldrh	r4, [r4, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005b98:	3001      	adds	r0, #1
 8005b9a:	0840      	lsrs	r0, r0, #1
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b9c:	0664      	lsls	r4, r4, #25
 8005b9e:	d400      	bmi.n	8005ba2 <USB_EPStartXfer+0x1a6>
 8005ba0:	e112      	b.n	8005dc8 <USB_EPStartXfer+0x3cc>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ba2:	2450      	movs	r4, #80	@ 0x50
 8005ba4:	5b14      	ldrh	r4, [r2, r4]
 8005ba6:	46a4      	mov	ip, r4
 8005ba8:	4c3b      	ldr	r4, [pc, #236]	@ (8005c98 <USB_EPStartXfer+0x29c>)
 8005baa:	1914      	adds	r4, r2, r4
 8005bac:	4464      	add	r4, ip
 8005bae:	46ac      	mov	ip, r5
 8005bb0:	4464      	add	r4, ip
 8005bb2:	8026      	strh	r6, [r4, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005bb4:	894d      	ldrh	r5, [r1, #10]
 8005bb6:	19ef      	adds	r7, r5, r7
  for (count = n; count != 0U; count--)
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d0cb      	beq.n	8005b54 <USB_EPStartXfer+0x158>
 8005bbc:	0044      	lsls	r4, r0, #1
 8005bbe:	191c      	adds	r4, r3, r4
 8005bc0:	1aff      	subs	r7, r7, r3
 8005bc2:	7858      	ldrb	r0, [r3, #1]
 8005bc4:	781e      	ldrb	r6, [r3, #0]
 8005bc6:	0200      	lsls	r0, r0, #8
 8005bc8:	19dd      	adds	r5, r3, r7
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005bca:	4330      	orrs	r0, r6
    pBuf++;
 8005bcc:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005bce:	8028      	strh	r0, [r5, #0]
  for (count = n; count != 0U; count--)
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	d1f6      	bne.n	8005bc2 <USB_EPStartXfer+0x1c6>
 8005bd4:	e7be      	b.n	8005b54 <USB_EPStartXfer+0x158>
 8005bd6:	2680      	movs	r6, #128	@ 0x80
 8005bd8:	00f6      	lsls	r6, r6, #3
 8005bda:	0020      	movs	r0, r4
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005bdc:	694b      	ldr	r3, [r1, #20]
 8005bde:	1997      	adds	r7, r2, r6
    if (ep->doublebuffer == 0U)
 8005be0:	2d00      	cmp	r5, #0
 8005be2:	d1c5      	bne.n	8005b70 <USB_EPStartXfer+0x174>
 8005be4:	e794      	b.n	8005b10 <USB_EPStartXfer+0x114>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005be6:	2480      	movs	r4, #128	@ 0x80
 8005be8:	8803      	ldrh	r3, [r0, #0]
 8005bea:	0224      	lsls	r4, r4, #8
 8005bec:	4323      	orrs	r3, r4
 8005bee:	8003      	strh	r3, [r0, #0]
 8005bf0:	e74c      	b.n	8005a8c <USB_EPStartXfer+0x90>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d129      	bne.n	8005c4a <USB_EPStartXfer+0x24e>
 8005bf6:	2650      	movs	r6, #80	@ 0x50
 8005bf8:	4b26      	ldr	r3, [pc, #152]	@ (8005c94 <USB_EPStartXfer+0x298>)
 8005bfa:	5b80      	ldrh	r0, [r0, r6]
 8005bfc:	780c      	ldrb	r4, [r1, #0]
 8005bfe:	18d3      	adds	r3, r2, r3
 8005c00:	181b      	adds	r3, r3, r0
 8005c02:	00e4      	lsls	r4, r4, #3
 8005c04:	191b      	adds	r3, r3, r4
 8005c06:	8818      	ldrh	r0, [r3, #0]
 8005c08:	690d      	ldr	r5, [r1, #16]
 8005c0a:	0580      	lsls	r0, r0, #22
 8005c0c:	0d80      	lsrs	r0, r0, #22
 8005c0e:	8018      	strh	r0, [r3, #0]
 8005c10:	4821      	ldr	r0, [pc, #132]	@ (8005c98 <USB_EPStartXfer+0x29c>)
 8005c12:	1810      	adds	r0, r2, r0
 8005c14:	2d00      	cmp	r5, #0
 8005c16:	d100      	bne.n	8005c1a <USB_EPStartXfer+0x21e>
 8005c18:	e119      	b.n	8005e4e <USB_EPStartXfer+0x452>
 8005c1a:	2d3e      	cmp	r5, #62	@ 0x3e
 8005c1c:	d900      	bls.n	8005c20 <USB_EPStartXfer+0x224>
 8005c1e:	e195      	b.n	8005f4c <USB_EPStartXfer+0x550>
 8005c20:	086f      	lsrs	r7, r5, #1
 8005c22:	46b8      	mov	r8, r7
 8005c24:	2701      	movs	r7, #1
 8005c26:	403d      	ands	r5, r7
 8005c28:	44a8      	add	r8, r5
 8005c2a:	4647      	mov	r7, r8
 8005c2c:	881d      	ldrh	r5, [r3, #0]
 8005c2e:	02bf      	lsls	r7, r7, #10
 8005c30:	b2bf      	uxth	r7, r7
 8005c32:	433d      	orrs	r5, r7
 8005c34:	801d      	strh	r5, [r3, #0]
 8005c36:	5b93      	ldrh	r3, [r2, r6]
 8005c38:	18c3      	adds	r3, r0, r3
 8005c3a:	191b      	adds	r3, r3, r4
 8005c3c:	8818      	ldrh	r0, [r3, #0]
 8005c3e:	0580      	lsls	r0, r0, #22
 8005c40:	0d80      	lsrs	r0, r0, #22
 8005c42:	8018      	strh	r0, [r3, #0]
 8005c44:	8818      	ldrh	r0, [r3, #0]
 8005c46:	4307      	orrs	r7, r0
 8005c48:	801f      	strh	r7, [r3, #0]
        if (ep->xfer_count != 0U)
 8005c4a:	69cb      	ldr	r3, [r1, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d100      	bne.n	8005c52 <USB_EPStartXfer+0x256>
 8005c50:	e71c      	b.n	8005a8c <USB_EPStartXfer+0x90>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c52:	780b      	ldrb	r3, [r1, #0]
 8005c54:	4d15      	ldr	r5, [pc, #84]	@ (8005cac <USB_EPStartXfer+0x2b0>)
 8005c56:	0098      	lsls	r0, r3, #2
 8005c58:	1810      	adds	r0, r2, r0
 8005c5a:	8804      	ldrh	r4, [r0, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c5c:	402c      	ands	r4, r5
 8005c5e:	42ac      	cmp	r4, r5
 8005c60:	d002      	beq.n	8005c68 <USB_EPStartXfer+0x26c>
 8005c62:	2c00      	cmp	r4, #0
 8005c64:	d000      	beq.n	8005c68 <USB_EPStartXfer+0x26c>
 8005c66:	e712      	b.n	8005a8e <USB_EPStartXfer+0x92>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005c68:	8803      	ldrh	r3, [r0, #0]
 8005c6a:	4c11      	ldr	r4, [pc, #68]	@ (8005cb0 <USB_EPStartXfer+0x2b4>)
 8005c6c:	4023      	ands	r3, r4
 8005c6e:	4c11      	ldr	r4, [pc, #68]	@ (8005cb4 <USB_EPStartXfer+0x2b8>)
 8005c70:	4323      	orrs	r3, r4
 8005c72:	8003      	strh	r3, [r0, #0]
 8005c74:	e70a      	b.n	8005a8c <USB_EPStartXfer+0x90>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005c76:	251f      	movs	r5, #31
 8005c78:	0963      	lsrs	r3, r4, #5
 8005c7a:	402c      	ands	r4, r5
 8005c7c:	4265      	negs	r5, r4
 8005c7e:	416c      	adcs	r4, r5
 8005c80:	1b1b      	subs	r3, r3, r4
 8005c82:	8804      	ldrh	r4, [r0, #0]
 8005c84:	029b      	lsls	r3, r3, #10
 8005c86:	431c      	orrs	r4, r3
 8005c88:	4b0b      	ldr	r3, [pc, #44]	@ (8005cb8 <USB_EPStartXfer+0x2bc>)
 8005c8a:	4323      	orrs	r3, r4
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	8003      	strh	r3, [r0, #0]
 8005c90:	e6fc      	b.n	8005a8c <USB_EPStartXfer+0x90>
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	00000402 	.word	0x00000402
 8005c98:	00000406 	.word	0x00000406
 8005c9c:	ffffbf8f 	.word	0xffffbf8f
 8005ca0:	00008080 	.word	0x00008080
 8005ca4:	ffff8fbf 	.word	0xffff8fbf
 8005ca8:	ffff8080 	.word	0xffff8080
 8005cac:	00004040 	.word	0x00004040
 8005cb0:	ffff8f8f 	.word	0xffff8f8f
 8005cb4:	000080c0 	.word	0x000080c0
 8005cb8:	ffff8000 	.word	0xffff8000
        if (ep->xfer_len_db > ep->maxpacket)
 8005cbc:	4ec4      	ldr	r6, [pc, #784]	@ (8005fd0 <USB_EPStartXfer+0x5d4>)
 8005cbe:	46b1      	mov	r9, r6
 8005cc0:	4491      	add	r9, r2
 8005cc2:	455c      	cmp	r4, fp
 8005cc4:	d300      	bcc.n	8005cc8 <USB_EPStartXfer+0x2cc>
 8005cc6:	e09a      	b.n	8005dfe <USB_EPStartXfer+0x402>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005cc8:	4665      	mov	r5, ip
 8005cca:	882d      	ldrh	r5, [r5, #0]
 8005ccc:	46a8      	mov	r8, r5
 8005cce:	4646      	mov	r6, r8
 8005cd0:	4dc0      	ldr	r5, [pc, #768]	@ (8005fd4 <USB_EPStartXfer+0x5d8>)
 8005cd2:	402e      	ands	r6, r5
 8005cd4:	4dc0      	ldr	r5, [pc, #768]	@ (8005fd8 <USB_EPStartXfer+0x5dc>)
 8005cd6:	432e      	orrs	r6, r5
 8005cd8:	4665      	mov	r5, ip
 8005cda:	802e      	strh	r6, [r5, #0]
          ep->xfer_len_db -= len;
 8005cdc:	465d      	mov	r5, fp
 8005cde:	1a2d      	subs	r5, r5, r0
 8005ce0:	46ab      	mov	fp, r5
 8005ce2:	620d      	str	r5, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005ce4:	4665      	mov	r5, ip
 8005ce6:	882e      	ldrh	r6, [r5, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ce8:	0405      	lsls	r5, r0, #16
 8005cea:	0c2d      	lsrs	r5, r5, #16
 8005cec:	46ac      	mov	ip, r5
 8005cee:	2501      	movs	r5, #1
 8005cf0:	46a8      	mov	r8, r5
 8005cf2:	44c4      	add	ip, r8
 8005cf4:	4665      	mov	r5, ip
 8005cf6:	086d      	lsrs	r5, r5, #1
 8005cf8:	46aa      	mov	sl, r5
 8005cfa:	4db8      	ldr	r5, [pc, #736]	@ (8005fdc <USB_EPStartXfer+0x5e0>)
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cfc:	9603      	str	r6, [sp, #12]
 8005cfe:	46ac      	mov	ip, r5
 8005d00:	4494      	add	ip, r2
 8005d02:	4665      	mov	r5, ip
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005d04:	b286      	uxth	r6, r0
 8005d06:	9602      	str	r6, [sp, #8]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005d08:	9e03      	ldr	r6, [sp, #12]
 8005d0a:	9504      	str	r5, [sp, #16]
 8005d0c:	0676      	lsls	r6, r6, #25
 8005d0e:	d400      	bmi.n	8005d12 <USB_EPStartXfer+0x316>
 8005d10:	e0bf      	b.n	8005e92 <USB_EPStartXfer+0x496>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d12:	2650      	movs	r6, #80	@ 0x50
 8005d14:	9d01      	ldr	r5, [sp, #4]
 8005d16:	5b96      	ldrh	r6, [r2, r6]
 8005d18:	4466      	add	r6, ip
 8005d1a:	46ac      	mov	ip, r5
 8005d1c:	b285      	uxth	r5, r0
 8005d1e:	4466      	add	r6, ip
 8005d20:	8035      	strh	r5, [r6, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d22:	894e      	ldrh	r6, [r1, #10]
  for (count = n; count != 0U; count--)
 8005d24:	4655      	mov	r5, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d26:	46b4      	mov	ip, r6
 8005d28:	44bc      	add	ip, r7
  for (count = n; count != 0U; count--)
 8005d2a:	2d00      	cmp	r5, #0
 8005d2c:	d022      	beq.n	8005d74 <USB_EPStartXfer+0x378>
 8005d2e:	006e      	lsls	r6, r5, #1
 8005d30:	4665      	mov	r5, ip
 8005d32:	46b0      	mov	r8, r6
 8005d34:	1aed      	subs	r5, r5, r3
 8005d36:	46ac      	mov	ip, r5
 8005d38:	9005      	str	r0, [sp, #20]
 8005d3a:	0010      	movs	r0, r2
 8005d3c:	4498      	add	r8, r3
 8005d3e:	9403      	str	r4, [sp, #12]
 8005d40:	465c      	mov	r4, fp
 8005d42:	4642      	mov	r2, r8
 8005d44:	468b      	mov	fp, r1
  uint8_t *pBuf = pbUsrBuf;
 8005d46:	001e      	movs	r6, r3
 8005d48:	4661      	mov	r1, ip
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	469c      	mov	ip, r3
 8005d4e:	9d01      	ldr	r5, [sp, #4]
 8005d50:	9404      	str	r4, [sp, #16]
 8005d52:	7870      	ldrb	r0, [r6, #1]
 8005d54:	7833      	ldrb	r3, [r6, #0]
 8005d56:	0200      	lsls	r0, r0, #8
 8005d58:	1874      	adds	r4, r6, r1
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005d5a:	4318      	orrs	r0, r3
    pBuf++;
 8005d5c:	3602      	adds	r6, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005d5e:	8020      	strh	r0, [r4, #0]
  for (count = n; count != 0U; count--)
 8005d60:	4296      	cmp	r6, r2
 8005d62:	d1f6      	bne.n	8005d52 <USB_EPStartXfer+0x356>
 8005d64:	9501      	str	r5, [sp, #4]
 8005d66:	9d04      	ldr	r5, [sp, #16]
 8005d68:	4659      	mov	r1, fp
 8005d6a:	4663      	mov	r3, ip
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	46ab      	mov	fp, r5
 8005d70:	9c03      	ldr	r4, [sp, #12]
 8005d72:	9805      	ldr	r0, [sp, #20]
              ep->xfer_len_db -= len;
 8005d74:	465d      	mov	r5, fp
            ep->xfer_buff += len;
 8005d76:	181b      	adds	r3, r3, r0
 8005d78:	614b      	str	r3, [r1, #20]
              ep->xfer_len_db -= len;
 8005d7a:	1a28      	subs	r0, r5, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8005d7c:	455c      	cmp	r4, fp
 8005d7e:	d307      	bcc.n	8005d90 <USB_EPStartXfer+0x394>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d80:	b2a8      	uxth	r0, r5
 8005d82:	9002      	str	r0, [sp, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d84:	0428      	lsls	r0, r5, #16
 8005d86:	0c00      	lsrs	r0, r0, #16
 8005d88:	3001      	adds	r0, #1
 8005d8a:	0840      	lsrs	r0, r0, #1
 8005d8c:	4682      	mov	sl, r0
              ep->xfer_len_db = 0U;
 8005d8e:	2000      	movs	r0, #0
 8005d90:	6208      	str	r0, [r1, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d92:	2050      	movs	r0, #80	@ 0x50
 8005d94:	9c01      	ldr	r4, [sp, #4]
 8005d96:	5a10      	ldrh	r0, [r2, r0]
 8005d98:	46a4      	mov	ip, r4
 8005d9a:	4448      	add	r0, r9
 8005d9c:	9c02      	ldr	r4, [sp, #8]
 8005d9e:	4460      	add	r0, ip
 8005da0:	8004      	strh	r4, [r0, #0]
  for (count = n; count != 0U; count--)
 8005da2:	4650      	mov	r0, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005da4:	890e      	ldrh	r6, [r1, #8]
 8005da6:	19f6      	adds	r6, r6, r7
  for (count = n; count != 0U; count--)
 8005da8:	2800      	cmp	r0, #0
 8005daa:	d100      	bne.n	8005dae <USB_EPStartXfer+0x3b2>
 8005dac:	e6d2      	b.n	8005b54 <USB_EPStartXfer+0x158>
 8005dae:	0047      	lsls	r7, r0, #1
 8005db0:	19df      	adds	r7, r3, r7
 8005db2:	1af6      	subs	r6, r6, r3
 8005db4:	7858      	ldrb	r0, [r3, #1]
 8005db6:	781d      	ldrb	r5, [r3, #0]
 8005db8:	0200      	lsls	r0, r0, #8
 8005dba:	199c      	adds	r4, r3, r6
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005dbc:	4328      	orrs	r0, r5
    pBuf++;
 8005dbe:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005dc0:	8020      	strh	r0, [r4, #0]
  for (count = n; count != 0U; count--)
 8005dc2:	42bb      	cmp	r3, r7
 8005dc4:	d1f6      	bne.n	8005db4 <USB_EPStartXfer+0x3b8>
 8005dc6:	e6c5      	b.n	8005b54 <USB_EPStartXfer+0x158>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005dc8:	2450      	movs	r4, #80	@ 0x50
 8005dca:	5b14      	ldrh	r4, [r2, r4]
 8005dcc:	46a4      	mov	ip, r4
 8005dce:	4c80      	ldr	r4, [pc, #512]	@ (8005fd0 <USB_EPStartXfer+0x5d4>)
 8005dd0:	1914      	adds	r4, r2, r4
 8005dd2:	4464      	add	r4, ip
 8005dd4:	46ac      	mov	ip, r5
 8005dd6:	4464      	add	r4, ip
 8005dd8:	8026      	strh	r6, [r4, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dda:	890d      	ldrh	r5, [r1, #8]
 8005ddc:	19ef      	adds	r7, r5, r7
  for (count = n; count != 0U; count--)
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d100      	bne.n	8005de4 <USB_EPStartXfer+0x3e8>
 8005de2:	e6b7      	b.n	8005b54 <USB_EPStartXfer+0x158>
 8005de4:	0044      	lsls	r4, r0, #1
 8005de6:	191c      	adds	r4, r3, r4
 8005de8:	1aff      	subs	r7, r7, r3
 8005dea:	7858      	ldrb	r0, [r3, #1]
 8005dec:	781e      	ldrb	r6, [r3, #0]
 8005dee:	0200      	lsls	r0, r0, #8
 8005df0:	19dd      	adds	r5, r3, r7
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005df2:	4330      	orrs	r0, r6
    pBuf++;
 8005df4:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005df6:	8028      	strh	r0, [r5, #0]
  for (count = n; count != 0U; count--)
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d1f6      	bne.n	8005dea <USB_EPStartXfer+0x3ee>
 8005dfc:	e6aa      	b.n	8005b54 <USB_EPStartXfer+0x158>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005dfe:	4660      	mov	r0, ip
 8005e00:	4c77      	ldr	r4, [pc, #476]	@ (8005fe0 <USB_EPStartXfer+0x5e4>)
 8005e02:	8800      	ldrh	r0, [r0, #0]
 8005e04:	4020      	ands	r0, r4
 8005e06:	4c77      	ldr	r4, [pc, #476]	@ (8005fe4 <USB_EPStartXfer+0x5e8>)
 8005e08:	4320      	orrs	r0, r4
 8005e0a:	4664      	mov	r4, ip
 8005e0c:	8020      	strh	r0, [r4, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e0e:	2050      	movs	r0, #80	@ 0x50
 8005e10:	9c01      	ldr	r4, [sp, #4]
 8005e12:	5a10      	ldrh	r0, [r2, r0]
 8005e14:	46a4      	mov	ip, r4
 8005e16:	465c      	mov	r4, fp
 8005e18:	4448      	add	r0, r9
 8005e1a:	4460      	add	r0, ip
 8005e1c:	b2a4      	uxth	r4, r4
 8005e1e:	8004      	strh	r4, [r0, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e20:	4658      	mov	r0, fp
 8005e22:	0404      	lsls	r4, r0, #16
 8005e24:	0c24      	lsrs	r4, r4, #16
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e26:	8908      	ldrh	r0, [r1, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e28:	3401      	adds	r4, #1
 8005e2a:	0864      	lsrs	r4, r4, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e2c:	19c7      	adds	r7, r0, r7
  for (count = n; count != 0U; count--)
 8005e2e:	2c00      	cmp	r4, #0
 8005e30:	d100      	bne.n	8005e34 <USB_EPStartXfer+0x438>
 8005e32:	e68f      	b.n	8005b54 <USB_EPStartXfer+0x158>
 8005e34:	0064      	lsls	r4, r4, #1
 8005e36:	191c      	adds	r4, r3, r4
 8005e38:	1aff      	subs	r7, r7, r3
 8005e3a:	7858      	ldrb	r0, [r3, #1]
 8005e3c:	781e      	ldrb	r6, [r3, #0]
 8005e3e:	0200      	lsls	r0, r0, #8
 8005e40:	19dd      	adds	r5, r3, r7
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005e42:	4330      	orrs	r0, r6
    pBuf++;
 8005e44:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005e46:	8028      	strh	r0, [r5, #0]
  for (count = n; count != 0U; count--)
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	d1f6      	bne.n	8005e3a <USB_EPStartXfer+0x43e>
 8005e4c:	e682      	b.n	8005b54 <USB_EPStartXfer+0x158>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e4e:	881f      	ldrh	r7, [r3, #0]
 8005e50:	4d65      	ldr	r5, [pc, #404]	@ (8005fe8 <USB_EPStartXfer+0x5ec>)
 8005e52:	432f      	orrs	r7, r5
 8005e54:	b2bf      	uxth	r7, r7
 8005e56:	801f      	strh	r7, [r3, #0]
 8005e58:	5b93      	ldrh	r3, [r2, r6]
 8005e5a:	18c3      	adds	r3, r0, r3
 8005e5c:	191b      	adds	r3, r3, r4
 8005e5e:	8818      	ldrh	r0, [r3, #0]
 8005e60:	0580      	lsls	r0, r0, #22
 8005e62:	0d80      	lsrs	r0, r0, #22
 8005e64:	8018      	strh	r0, [r3, #0]
 8005e66:	8818      	ldrh	r0, [r3, #0]
 8005e68:	4305      	orrs	r5, r0
 8005e6a:	b2ad      	uxth	r5, r5
 8005e6c:	801d      	strh	r5, [r3, #0]
 8005e6e:	e6ec      	b.n	8005c4a <USB_EPStartXfer+0x24e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e70:	881f      	ldrh	r7, [r3, #0]
 8005e72:	4d5d      	ldr	r5, [pc, #372]	@ (8005fe8 <USB_EPStartXfer+0x5ec>)
 8005e74:	432f      	orrs	r7, r5
 8005e76:	b2bf      	uxth	r7, r7
 8005e78:	801f      	strh	r7, [r3, #0]
 8005e7a:	5b93      	ldrh	r3, [r2, r6]
 8005e7c:	4443      	add	r3, r8
 8005e7e:	191b      	adds	r3, r3, r4
 8005e80:	8818      	ldrh	r0, [r3, #0]
 8005e82:	0580      	lsls	r0, r0, #22
 8005e84:	0d80      	lsrs	r0, r0, #22
 8005e86:	8018      	strh	r0, [r3, #0]
 8005e88:	8818      	ldrh	r0, [r3, #0]
 8005e8a:	4305      	orrs	r5, r0
 8005e8c:	b2ad      	uxth	r5, r5
 8005e8e:	801d      	strh	r5, [r3, #0]
 8005e90:	e5fc      	b.n	8005a8c <USB_EPStartXfer+0x90>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e92:	2650      	movs	r6, #80	@ 0x50
 8005e94:	9d01      	ldr	r5, [sp, #4]
 8005e96:	5b96      	ldrh	r6, [r2, r6]
 8005e98:	46ac      	mov	ip, r5
 8005e9a:	444e      	add	r6, r9
 8005e9c:	4466      	add	r6, ip
 8005e9e:	b285      	uxth	r5, r0
 8005ea0:	8035      	strh	r5, [r6, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ea2:	890e      	ldrh	r6, [r1, #8]
  for (count = n; count != 0U; count--)
 8005ea4:	4655      	mov	r5, sl
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ea6:	46b4      	mov	ip, r6
 8005ea8:	44bc      	add	ip, r7
  for (count = n; count != 0U; count--)
 8005eaa:	2d00      	cmp	r5, #0
 8005eac:	d022      	beq.n	8005ef4 <USB_EPStartXfer+0x4f8>
 8005eae:	006e      	lsls	r6, r5, #1
 8005eb0:	4665      	mov	r5, ip
 8005eb2:	46b0      	mov	r8, r6
 8005eb4:	1aed      	subs	r5, r5, r3
 8005eb6:	46ac      	mov	ip, r5
 8005eb8:	4498      	add	r8, r3
  uint8_t *pBuf = pbUsrBuf;
 8005eba:	001e      	movs	r6, r3
 8005ebc:	9403      	str	r4, [sp, #12]
 8005ebe:	465c      	mov	r4, fp
 8005ec0:	468b      	mov	fp, r1
 8005ec2:	4641      	mov	r1, r8
 8005ec4:	4698      	mov	r8, r3
 8005ec6:	4663      	mov	r3, ip
 8005ec8:	4691      	mov	r9, r2
 8005eca:	4684      	mov	ip, r0
 8005ecc:	0018      	movs	r0, r3
 8005ece:	9d01      	ldr	r5, [sp, #4]
 8005ed0:	9405      	str	r4, [sp, #20]
 8005ed2:	7874      	ldrb	r4, [r6, #1]
 8005ed4:	7832      	ldrb	r2, [r6, #0]
 8005ed6:	0224      	lsls	r4, r4, #8
 8005ed8:	1833      	adds	r3, r6, r0
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005eda:	4314      	orrs	r4, r2
    pBuf++;
 8005edc:	3602      	adds	r6, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005ede:	801c      	strh	r4, [r3, #0]
  for (count = n; count != 0U; count--)
 8005ee0:	428e      	cmp	r6, r1
 8005ee2:	d1f6      	bne.n	8005ed2 <USB_EPStartXfer+0x4d6>
 8005ee4:	9501      	str	r5, [sp, #4]
 8005ee6:	9d05      	ldr	r5, [sp, #20]
 8005ee8:	4659      	mov	r1, fp
 8005eea:	4660      	mov	r0, ip
 8005eec:	4643      	mov	r3, r8
 8005eee:	464a      	mov	r2, r9
 8005ef0:	46ab      	mov	fp, r5
 8005ef2:	9c03      	ldr	r4, [sp, #12]
              ep->xfer_len_db -= len;
 8005ef4:	465d      	mov	r5, fp
            ep->xfer_buff += len;
 8005ef6:	181b      	adds	r3, r3, r0
 8005ef8:	614b      	str	r3, [r1, #20]
              ep->xfer_len_db -= len;
 8005efa:	1a28      	subs	r0, r5, r0
            if (ep->xfer_len_db > ep->maxpacket)
 8005efc:	455c      	cmp	r4, fp
 8005efe:	d307      	bcc.n	8005f10 <USB_EPStartXfer+0x514>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f00:	b2a8      	uxth	r0, r5
 8005f02:	9002      	str	r0, [sp, #8]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005f04:	0428      	lsls	r0, r5, #16
 8005f06:	0c00      	lsrs	r0, r0, #16
 8005f08:	3001      	adds	r0, #1
 8005f0a:	0840      	lsrs	r0, r0, #1
 8005f0c:	4682      	mov	sl, r0
              ep->xfer_len_db = 0U;
 8005f0e:	2000      	movs	r0, #0
 8005f10:	6208      	str	r0, [r1, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f12:	9c04      	ldr	r4, [sp, #16]
 8005f14:	2050      	movs	r0, #80	@ 0x50
 8005f16:	46a4      	mov	ip, r4
 8005f18:	5a10      	ldrh	r0, [r2, r0]
 8005f1a:	9c01      	ldr	r4, [sp, #4]
 8005f1c:	4460      	add	r0, ip
 8005f1e:	46a4      	mov	ip, r4
 8005f20:	9c02      	ldr	r4, [sp, #8]
 8005f22:	4460      	add	r0, ip
 8005f24:	8004      	strh	r4, [r0, #0]
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f26:	8948      	ldrh	r0, [r1, #10]
 8005f28:	19c7      	adds	r7, r0, r7
  for (count = n; count != 0U; count--)
 8005f2a:	4650      	mov	r0, sl
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d100      	bne.n	8005f32 <USB_EPStartXfer+0x536>
 8005f30:	e610      	b.n	8005b54 <USB_EPStartXfer+0x158>
 8005f32:	0044      	lsls	r4, r0, #1
 8005f34:	191c      	adds	r4, r3, r4
 8005f36:	1aff      	subs	r7, r7, r3
 8005f38:	7858      	ldrb	r0, [r3, #1]
 8005f3a:	781e      	ldrb	r6, [r3, #0]
 8005f3c:	0200      	lsls	r0, r0, #8
 8005f3e:	19dd      	adds	r5, r3, r7
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005f40:	4330      	orrs	r0, r6
    pBuf++;
 8005f42:	3302      	adds	r3, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8005f44:	8028      	strh	r0, [r5, #0]
  for (count = n; count != 0U; count--)
 8005f46:	42a3      	cmp	r3, r4
 8005f48:	d1f6      	bne.n	8005f38 <USB_EPStartXfer+0x53c>
 8005f4a:	e603      	b.n	8005b54 <USB_EPStartXfer+0x158>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005f4c:	096f      	lsrs	r7, r5, #5
 8005f4e:	46bc      	mov	ip, r7
 8005f50:	271f      	movs	r7, #31
 8005f52:	403d      	ands	r5, r7
 8005f54:	426f      	negs	r7, r5
 8005f56:	417d      	adcs	r5, r7
 8005f58:	4667      	mov	r7, ip
 8005f5a:	1b7d      	subs	r5, r7, r5
 8005f5c:	02ad      	lsls	r5, r5, #10
 8005f5e:	881f      	ldrh	r7, [r3, #0]
 8005f60:	b2ad      	uxth	r5, r5
 8005f62:	432f      	orrs	r7, r5
 8005f64:	46b8      	mov	r8, r7
 8005f66:	46a9      	mov	r9, r5
 8005f68:	4645      	mov	r5, r8
 8005f6a:	4f1f      	ldr	r7, [pc, #124]	@ (8005fe8 <USB_EPStartXfer+0x5ec>)
 8005f6c:	433d      	orrs	r5, r7
 8005f6e:	46bc      	mov	ip, r7
 8005f70:	b2af      	uxth	r7, r5
 8005f72:	464d      	mov	r5, r9
 8005f74:	801f      	strh	r7, [r3, #0]
 8005f76:	5b93      	ldrh	r3, [r2, r6]
 8005f78:	18c0      	adds	r0, r0, r3
 8005f7a:	1900      	adds	r0, r0, r4
 8005f7c:	8803      	ldrh	r3, [r0, #0]
 8005f7e:	059b      	lsls	r3, r3, #22
 8005f80:	0d9b      	lsrs	r3, r3, #22
 8005f82:	8003      	strh	r3, [r0, #0]
 8005f84:	8803      	ldrh	r3, [r0, #0]
 8005f86:	431d      	orrs	r5, r3
 8005f88:	4663      	mov	r3, ip
 8005f8a:	431d      	orrs	r5, r3
 8005f8c:	b2ab      	uxth	r3, r5
 8005f8e:	8003      	strh	r3, [r0, #0]
 8005f90:	e65b      	b.n	8005c4a <USB_EPStartXfer+0x24e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005f92:	201f      	movs	r0, #31
 8005f94:	096f      	lsrs	r7, r5, #5
 8005f96:	4005      	ands	r5, r0
 8005f98:	0028      	movs	r0, r5
 8005f9a:	4245      	negs	r5, r0
 8005f9c:	4145      	adcs	r5, r0
 8005f9e:	4812      	ldr	r0, [pc, #72]	@ (8005fe8 <USB_EPStartXfer+0x5ec>)
 8005fa0:	1b7f      	subs	r7, r7, r5
 8005fa2:	4684      	mov	ip, r0
 8005fa4:	881d      	ldrh	r5, [r3, #0]
 8005fa6:	02bf      	lsls	r7, r7, #10
 8005fa8:	b2bf      	uxth	r7, r7
 8005faa:	433d      	orrs	r5, r7
 8005fac:	4305      	orrs	r5, r0
 8005fae:	b2ad      	uxth	r5, r5
 8005fb0:	801d      	strh	r5, [r3, #0]
 8005fb2:	5b93      	ldrh	r3, [r2, r6]
 8005fb4:	4443      	add	r3, r8
 8005fb6:	1918      	adds	r0, r3, r4
 8005fb8:	8803      	ldrh	r3, [r0, #0]
 8005fba:	059b      	lsls	r3, r3, #22
 8005fbc:	0d9b      	lsrs	r3, r3, #22
 8005fbe:	8003      	strh	r3, [r0, #0]
 8005fc0:	8803      	ldrh	r3, [r0, #0]
 8005fc2:	431f      	orrs	r7, r3
 8005fc4:	4663      	mov	r3, ip
 8005fc6:	431f      	orrs	r7, r3
 8005fc8:	b2bb      	uxth	r3, r7
 8005fca:	8003      	strh	r3, [r0, #0]
 8005fcc:	e55e      	b.n	8005a8c <USB_EPStartXfer+0x90>
 8005fce:	46c0      	nop			@ (mov r8, r8)
 8005fd0:	00000402 	.word	0x00000402
 8005fd4:	ffff8f8f 	.word	0xffff8f8f
 8005fd8:	00008180 	.word	0x00008180
 8005fdc:	00000406 	.word	0x00000406
 8005fe0:	ffff8e8f 	.word	0xffff8e8f
 8005fe4:	00008080 	.word	0x00008080
 8005fe8:	ffff8000 	.word	0xffff8000

08005fec <USB_EPSetStall>:
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005fec:	780b      	ldrb	r3, [r1, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8005ff2:	784b      	ldrb	r3, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ff4:	8802      	ldrh	r2, [r0, #0]
  if (ep->is_in != 0U)
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005ffa:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <USB_EPSetStall+0x34>)
 8005ffc:	401a      	ands	r2, r3
 8005ffe:	2310      	movs	r3, #16
 8006000:	405a      	eors	r2, r3
 8006002:	4b08      	ldr	r3, [pc, #32]	@ (8006024 <USB_EPSetStall+0x38>)
 8006004:	4313      	orrs	r3, r2
 8006006:	b29b      	uxth	r3, r3
 8006008:	8003      	strh	r3, [r0, #0]
}
 800600a:	2000      	movs	r0, #0
 800600c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800600e:	4b06      	ldr	r3, [pc, #24]	@ (8006028 <USB_EPSetStall+0x3c>)
 8006010:	401a      	ands	r2, r3
 8006012:	2380      	movs	r3, #128	@ 0x80
 8006014:	015b      	lsls	r3, r3, #5
 8006016:	4053      	eors	r3, r2
 8006018:	4a04      	ldr	r2, [pc, #16]	@ (800602c <USB_EPSetStall+0x40>)
 800601a:	4313      	orrs	r3, r2
 800601c:	8003      	strh	r3, [r0, #0]
 800601e:	e7f4      	b.n	800600a <USB_EPSetStall+0x1e>
 8006020:	ffff8fbf 	.word	0xffff8fbf
 8006024:	ffff8080 	.word	0xffff8080
 8006028:	ffffbf8f 	.word	0xffffbf8f
 800602c:	00008080 	.word	0x00008080

08006030 <USB_EPClearStall>:
  if (ep->doublebuffer == 0U)
 8006030:	7b0b      	ldrb	r3, [r1, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d11a      	bne.n	800606c <USB_EPClearStall+0x3c>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006036:	780b      	ldrb	r3, [r1, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	18c0      	adds	r0, r0, r3
    if (ep->is_in != 0U)
 800603c:	784b      	ldrb	r3, [r1, #1]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d016      	beq.n	8006070 <USB_EPClearStall+0x40>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006042:	8803      	ldrh	r3, [r0, #0]
 8006044:	065b      	lsls	r3, r3, #25
 8006046:	d505      	bpl.n	8006054 <USB_EPClearStall+0x24>
 8006048:	8803      	ldrh	r3, [r0, #0]
 800604a:	4a13      	ldr	r2, [pc, #76]	@ (8006098 <USB_EPClearStall+0x68>)
 800604c:	4013      	ands	r3, r2
 800604e:	4a13      	ldr	r2, [pc, #76]	@ (800609c <USB_EPClearStall+0x6c>)
 8006050:	4313      	orrs	r3, r2
 8006052:	8003      	strh	r3, [r0, #0]
      if (ep->type != EP_TYPE_ISOC)
 8006054:	78cb      	ldrb	r3, [r1, #3]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d008      	beq.n	800606c <USB_EPClearStall+0x3c>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800605a:	8802      	ldrh	r2, [r0, #0]
 800605c:	4b10      	ldr	r3, [pc, #64]	@ (80060a0 <USB_EPClearStall+0x70>)
 800605e:	401a      	ands	r2, r3
 8006060:	2320      	movs	r3, #32
 8006062:	405a      	eors	r2, r3
 8006064:	4b0f      	ldr	r3, [pc, #60]	@ (80060a4 <USB_EPClearStall+0x74>)
 8006066:	4313      	orrs	r3, r2
 8006068:	b29b      	uxth	r3, r3
 800606a:	8003      	strh	r3, [r0, #0]
}
 800606c:	2000      	movs	r0, #0
 800606e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006070:	8803      	ldrh	r3, [r0, #0]
 8006072:	045b      	lsls	r3, r3, #17
 8006074:	d505      	bpl.n	8006082 <USB_EPClearStall+0x52>
 8006076:	8803      	ldrh	r3, [r0, #0]
 8006078:	4a07      	ldr	r2, [pc, #28]	@ (8006098 <USB_EPClearStall+0x68>)
 800607a:	4013      	ands	r3, r2
 800607c:	4a0a      	ldr	r2, [pc, #40]	@ (80060a8 <USB_EPClearStall+0x78>)
 800607e:	4313      	orrs	r3, r2
 8006080:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006082:	8802      	ldrh	r2, [r0, #0]
 8006084:	4b09      	ldr	r3, [pc, #36]	@ (80060ac <USB_EPClearStall+0x7c>)
 8006086:	401a      	ands	r2, r3
 8006088:	23c0      	movs	r3, #192	@ 0xc0
 800608a:	019b      	lsls	r3, r3, #6
 800608c:	4053      	eors	r3, r2
 800608e:	4a08      	ldr	r2, [pc, #32]	@ (80060b0 <USB_EPClearStall+0x80>)
 8006090:	4313      	orrs	r3, r2
 8006092:	8003      	strh	r3, [r0, #0]
 8006094:	e7ea      	b.n	800606c <USB_EPClearStall+0x3c>
 8006096:	46c0      	nop			@ (mov r8, r8)
 8006098:	ffff8f8f 	.word	0xffff8f8f
 800609c:	000080c0 	.word	0x000080c0
 80060a0:	ffff8fbf 	.word	0xffff8fbf
 80060a4:	ffff8080 	.word	0xffff8080
 80060a8:	0000c080 	.word	0x0000c080
 80060ac:	ffffbf8f 	.word	0xffffbf8f
 80060b0:	00008080 	.word	0x00008080

080060b4 <USB_SetDevAddress>:
  if (address == 0U)
 80060b4:	2900      	cmp	r1, #0
 80060b6:	d102      	bne.n	80060be <USB_SetDevAddress+0xa>
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80060b8:	234c      	movs	r3, #76	@ 0x4c
 80060ba:	2280      	movs	r2, #128	@ 0x80
 80060bc:	52c2      	strh	r2, [r0, r3]
}
 80060be:	2000      	movs	r0, #0
 80060c0:	4770      	bx	lr
 80060c2:	46c0      	nop			@ (mov r8, r8)

080060c4 <USB_DevConnect>:
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80060c4:	2258      	movs	r2, #88	@ 0x58
 80060c6:	2180      	movs	r1, #128	@ 0x80
 80060c8:	5a83      	ldrh	r3, [r0, r2]
 80060ca:	0209      	lsls	r1, r1, #8
 80060cc:	430b      	orrs	r3, r1
 80060ce:	5283      	strh	r3, [r0, r2]
}
 80060d0:	2000      	movs	r0, #0
 80060d2:	4770      	bx	lr

080060d4 <USB_ReadInterrupts>:
  tmpreg = USBx->ISTR;
 80060d4:	2344      	movs	r3, #68	@ 0x44
 80060d6:	5ac0      	ldrh	r0, [r0, r3]
 80060d8:	b280      	uxth	r0, r0
}
 80060da:	4770      	bx	lr

080060dc <USB_WritePMA>:
{
 80060dc:	b530      	push	{r4, r5, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060de:	2480      	movs	r4, #128	@ 0x80
 80060e0:	00e4      	lsls	r4, r4, #3
 80060e2:	46a4      	mov	ip, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80060e4:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060e6:	4462      	add	r2, ip
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80060e8:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060ea:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USB_WritePMA+0x2c>
 80060f0:	005a      	lsls	r2, r3, #1
 80060f2:	188a      	adds	r2, r1, r2
 80060f4:	1a45      	subs	r5, r0, r1
 80060f6:	784b      	ldrb	r3, [r1, #1]
 80060f8:	780c      	ldrb	r4, [r1, #0]
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	1948      	adds	r0, r1, r5
    WrVal |= (uint16_t)pBuf[1] << 8;
 80060fe:	4323      	orrs	r3, r4
    pBuf++;
 8006100:	3102      	adds	r1, #2
    *pdwVal = (WrVal & 0xFFFFU);
 8006102:	8003      	strh	r3, [r0, #0]
  for (count = n; count != 0U; count--)
 8006104:	428a      	cmp	r2, r1
 8006106:	d1f6      	bne.n	80060f6 <USB_WritePMA+0x1a>
  }
}
 8006108:	bd30      	pop	{r4, r5, pc}
 800610a:	46c0      	nop			@ (mov r8, r8)

0800610c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800610c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800610e:	2480      	movs	r4, #128	@ 0x80
 8006110:	00e4      	lsls	r4, r4, #3
 8006112:	46a4      	mov	ip, r4
 8006114:	4462      	add	r2, ip
 8006116:	1880      	adds	r0, r0, r2
 8006118:	0002      	movs	r2, r0
  uint32_t n = (uint32_t)wNBytes >> 1;
 800611a:	085f      	lsrs	r7, r3, #1

  for (count = n; count != 0U; count--)
 800611c:	d00f      	beq.n	800613e <USB_ReadPMA+0x32>
  uint8_t *pBuf = pbUsrBuf;
 800611e:	000c      	movs	r4, r1
  for (count = n; count != 0U; count--)
 8006120:	003d      	movs	r5, r7
 8006122:	1a46      	subs	r6, r0, r1
 8006124:	19a2      	adds	r2, r4, r6
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006126:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 8006128:	3d01      	subs	r5, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 800612a:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800612c:	7022      	strb	r2, [r4, #0]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800612e:	0a12      	lsrs	r2, r2, #8
 8006130:	7062      	strb	r2, [r4, #1]
    pBuf++;
 8006132:	3402      	adds	r4, #2
  for (count = n; count != 0U; count--)
 8006134:	2d00      	cmp	r5, #0
 8006136:	d1f5      	bne.n	8006124 <USB_ReadPMA+0x18>
 8006138:	007f      	lsls	r7, r7, #1
    pdwVal++;
 800613a:	19c2      	adds	r2, r0, r7
    pBuf++;
 800613c:	19c9      	adds	r1, r1, r7
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800613e:	07db      	lsls	r3, r3, #31
 8006140:	d501      	bpl.n	8006146 <USB_ReadPMA+0x3a>
  {
    RdVal = *pdwVal;
 8006142:	8813      	ldrh	r3, [r2, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006144:	700b      	strb	r3, [r1, #0]
  }
}
 8006146:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006148 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006148:	23af      	movs	r3, #175	@ 0xaf
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	58c3      	ldr	r3, [r0, r3]
{
 800614e:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00e      	beq.n	8006172 <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006154:	22ae      	movs	r2, #174	@ 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006156:	2580      	movs	r5, #128	@ 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006158:	0092      	lsls	r2, r2, #2
 800615a:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800615c:	00ad      	lsls	r5, r5, #2
 800615e:	5d60      	ldrb	r0, [r4, r5]
 8006160:	28ff      	cmp	r0, #255	@ 0xff
 8006162:	d006      	beq.n	8006172 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006164:	4a04      	ldr	r2, [pc, #16]	@ (8006178 <USBD_CDC_EP0_RxReady+0x30>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	0021      	movs	r1, r4
 800616a:	5ca2      	ldrb	r2, [r4, r2]
 800616c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800616e:	23ff      	movs	r3, #255	@ 0xff
 8006170:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 8006172:	2000      	movs	r0, #0
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	46c0      	nop			@ (mov r8, r8)
 8006178:	00000201 	.word	0x00000201

0800617c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800617c:	2343      	movs	r3, #67	@ 0x43
 800617e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
 8006180:	4800      	ldr	r0, [pc, #0]	@ (8006184 <USBD_CDC_GetFSCfgDesc+0x8>)
}
 8006182:	4770      	bx	lr
 8006184:	20000064 	.word	0x20000064

08006188 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006188:	2343      	movs	r3, #67	@ 0x43
 800618a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
 800618c:	4800      	ldr	r0, [pc, #0]	@ (8006190 <USBD_CDC_GetHSCfgDesc+0x8>)
}
 800618e:	4770      	bx	lr
 8006190:	200000a8 	.word	0x200000a8

08006194 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006194:	2343      	movs	r3, #67	@ 0x43
 8006196:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006198:	4800      	ldr	r0, [pc, #0]	@ (800619c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
}
 800619a:	4770      	bx	lr
 800619c:	20000020 	.word	0x20000020

080061a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80061a0:	230a      	movs	r3, #10
 80061a2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80061a4:	4800      	ldr	r0, [pc, #0]	@ (80061a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 80061a6:	4770      	bx	lr
 80061a8:	20000124 	.word	0x20000124

080061ac <USBD_CDC_DataOut>:
{
 80061ac:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061ae:	26ae      	movs	r6, #174	@ 0xae
 80061b0:	00b6      	lsls	r6, r6, #2
{
 80061b2:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061b4:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061b6:	f001 f8a9 	bl	800730c <USBD_LL_GetRxDataSize>
 80061ba:	2383      	movs	r3, #131	@ 0x83
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 80061c0:	59a3      	ldr	r3, [r4, r6]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <USBD_CDC_DataOut+0x30>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061c6:	2383      	movs	r3, #131	@ 0x83
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	18e9      	adds	r1, r5, r3
 80061cc:	3b08      	subs	r3, #8
 80061ce:	58e8      	ldr	r0, [r5, r3]
 80061d0:	33b8      	adds	r3, #184	@ 0xb8
 80061d2:	58e3      	ldr	r3, [r4, r3]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	4798      	blx	r3
    return USBD_OK;
 80061d8:	2000      	movs	r0, #0
}
 80061da:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80061dc:	2002      	movs	r0, #2
 80061de:	e7fc      	b.n	80061da <USBD_CDC_DataOut+0x2e>

080061e0 <USBD_CDC_DataIn>:
{
 80061e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061e2:	23ae      	movs	r3, #174	@ 0xae
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	58c7      	ldr	r7, [r0, r3]
{
 80061e8:	0004      	movs	r4, r0
 80061ea:	000d      	movs	r5, r1
  if (pdev->pClassData != NULL)
 80061ec:	2f00      	cmp	r7, #0
 80061ee:	d01d      	beq.n	800622c <USBD_CDC_DataIn+0x4c>
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061f0:	3308      	adds	r3, #8
 80061f2:	58c2      	ldr	r2, [r0, r3]
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061f4:	008b      	lsls	r3, r1, #2
 80061f6:	185b      	adds	r3, r3, r1
 80061f8:	009e      	lsls	r6, r3, #2
 80061fa:	1986      	adds	r6, r0, r6
 80061fc:	69f0      	ldr	r0, [r6, #28]
 80061fe:	2800      	cmp	r0, #0
 8006200:	d006      	beq.n	8006210 <USBD_CDC_DataIn+0x30>
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	18d2      	adds	r2, r2, r3
 8006206:	6a11      	ldr	r1, [r2, #32]
 8006208:	f7fa f816 	bl	8000238 <__aeabi_uidivmod>
 800620c:	2900      	cmp	r1, #0
 800620e:	d005      	beq.n	800621c <USBD_CDC_DataIn+0x3c>
      hcdc->TxState = 0U;
 8006210:	2385      	movs	r3, #133	@ 0x85
 8006212:	2200      	movs	r2, #0
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	50fa      	str	r2, [r7, r3]
    return USBD_OK;
 8006218:	2000      	movs	r0, #0
}
 800621a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 800621c:	61f1      	str	r1, [r6, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800621e:	2300      	movs	r3, #0
 8006220:	2200      	movs	r2, #0
 8006222:	0029      	movs	r1, r5
 8006224:	0020      	movs	r0, r4
 8006226:	f001 f855 	bl	80072d4 <USBD_LL_Transmit>
 800622a:	e7f5      	b.n	8006218 <USBD_CDC_DataIn+0x38>
    return USBD_FAIL;
 800622c:	2002      	movs	r0, #2
 800622e:	e7f4      	b.n	800621a <USBD_CDC_DataIn+0x3a>

08006230 <USBD_CDC_Setup>:
{
 8006230:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006232:	23ae      	movs	r3, #174	@ 0xae
{
 8006234:	b083      	sub	sp, #12
  uint16_t status_info = 0U;
 8006236:	466a      	mov	r2, sp
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	58c6      	ldr	r6, [r0, r3]
  uint8_t ifalt = 0U;
 800623c:	466b      	mov	r3, sp
{
 800623e:	0005      	movs	r5, r0
  uint16_t status_info = 0U;
 8006240:	1d90      	adds	r0, r2, #6
 8006242:	2260      	movs	r2, #96	@ 0x60
{
 8006244:	000c      	movs	r4, r1
  uint8_t ifalt = 0U;
 8006246:	1d59      	adds	r1, r3, #5
 8006248:	2300      	movs	r3, #0
 800624a:	0017      	movs	r7, r2
 800624c:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 800624e:	8003      	strh	r3, [r0, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006250:	7823      	ldrb	r3, [r4, #0]
 8006252:	401f      	ands	r7, r3
 8006254:	421a      	tst	r2, r3
 8006256:	d015      	beq.n	8006284 <USBD_CDC_Setup+0x54>
 8006258:	2f20      	cmp	r7, #32
 800625a:	d11a      	bne.n	8006292 <USBD_CDC_Setup+0x62>
      if (req->wLength)
 800625c:	88e2      	ldrh	r2, [r4, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800625e:	7860      	ldrb	r0, [r4, #1]
      if (req->wLength)
 8006260:	2a00      	cmp	r2, #0
 8006262:	d01d      	beq.n	80062a0 <USBD_CDC_Setup+0x70>
        if (req->bmRequest & 0x80U)
 8006264:	b25b      	sxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	da41      	bge.n	80062ee <USBD_CDC_Setup+0xbe>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800626a:	23af      	movs	r3, #175	@ 0xaf
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	58eb      	ldr	r3, [r5, r3]
 8006270:	0031      	movs	r1, r6
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006276:	0031      	movs	r1, r6
 8006278:	0028      	movs	r0, r5
 800627a:	88e2      	ldrh	r2, [r4, #6]
 800627c:	f000 fd26 	bl	8006ccc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8006280:	2000      	movs	r0, #0
 8006282:	e00b      	b.n	800629c <USBD_CDC_Setup+0x6c>
      switch (req->bRequest)
 8006284:	7863      	ldrb	r3, [r4, #1]
 8006286:	2b0a      	cmp	r3, #10
 8006288:	d026      	beq.n	80062d8 <USBD_CDC_Setup+0xa8>
 800628a:	2b0b      	cmp	r3, #11
 800628c:	d01d      	beq.n	80062ca <USBD_CDC_Setup+0x9a>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00f      	beq.n	80062b2 <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8006292:	0028      	movs	r0, r5
 8006294:	0021      	movs	r1, r4
 8006296:	f000 fce7 	bl	8006c68 <USBD_CtlError>
            ret = USBD_FAIL;
 800629a:	2002      	movs	r0, #2
}
 800629c:	b003      	add	sp, #12
 800629e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062a0:	23af      	movs	r3, #175	@ 0xaf
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	58eb      	ldr	r3, [r5, r3]
 80062a6:	2200      	movs	r2, #0
 80062a8:	0021      	movs	r1, r4
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80062ae:	2000      	movs	r0, #0
 80062b0:	e7f4      	b.n	800629c <USBD_CDC_Setup+0x6c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b2:	23a7      	movs	r3, #167	@ 0xa7
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	5ceb      	ldrb	r3, [r5, r3]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d1ea      	bne.n	8006292 <USBD_CDC_Setup+0x62>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80062bc:	0001      	movs	r1, r0
 80062be:	2202      	movs	r2, #2
 80062c0:	0028      	movs	r0, r5
 80062c2:	f000 fd03 	bl	8006ccc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80062c6:	2000      	movs	r0, #0
 80062c8:	e7e8      	b.n	800629c <USBD_CDC_Setup+0x6c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062ca:	23a7      	movs	r3, #167	@ 0xa7
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	5ceb      	ldrb	r3, [r5, r3]
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d1de      	bne.n	8006292 <USBD_CDC_Setup+0x62>
  uint8_t ret = USBD_OK;
 80062d4:	2000      	movs	r0, #0
 80062d6:	e7e1      	b.n	800629c <USBD_CDC_Setup+0x6c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062d8:	23a7      	movs	r3, #167	@ 0xa7
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	5ceb      	ldrb	r3, [r5, r3]
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d1d7      	bne.n	8006292 <USBD_CDC_Setup+0x62>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80062e2:	2201      	movs	r2, #1
 80062e4:	0028      	movs	r0, r5
 80062e6:	f000 fcf1 	bl	8006ccc <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80062ea:	2000      	movs	r0, #0
 80062ec:	e7d6      	b.n	800629c <USBD_CDC_Setup+0x6c>
          hcdc->CmdOpCode = req->bRequest;
 80062ee:	2380      	movs	r3, #128	@ 0x80
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	54f0      	strb	r0, [r6, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80062f4:	4b03      	ldr	r3, [pc, #12]	@ (8006304 <USBD_CDC_Setup+0xd4>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062f6:	0031      	movs	r1, r6
 80062f8:	0028      	movs	r0, r5
          hcdc->CmdLength = (uint8_t)req->wLength;
 80062fa:	54f2      	strb	r2, [r6, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062fc:	f000 fcfc 	bl	8006cf8 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8006300:	2000      	movs	r0, #0
 8006302:	e7cb      	b.n	800629c <USBD_CDC_Setup+0x6c>
 8006304:	00000201 	.word	0x00000201

08006308 <USBD_CDC_DeInit>:
{
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800630c:	2600      	movs	r6, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800630e:	2181      	movs	r1, #129	@ 0x81
 8006310:	f000 ff92 	bl	8007238 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006314:	2101      	movs	r1, #1
 8006316:	0020      	movs	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006318:	62e6      	str	r6, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800631a:	f000 ff8d 	bl	8007238 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800631e:	23b6      	movs	r3, #182	@ 0xb6
  if (pdev->pClassData != NULL)
 8006320:	25ae      	movs	r5, #174	@ 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	50e6      	str	r6, [r4, r3]
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006326:	2182      	movs	r1, #130	@ 0x82
 8006328:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 800632a:	00ad      	lsls	r5, r5, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800632c:	f000 ff84 	bl	8007238 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8006330:	5963      	ldr	r3, [r4, r5]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006332:	6426      	str	r6, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006338:	23af      	movs	r3, #175	@ 0xaf
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	58e3      	ldr	r3, [r4, r3]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006342:	5960      	ldr	r0, [r4, r5]
 8006344:	f000 ffee 	bl	8007324 <USBD_static_free>
    pdev->pClassData = NULL;
 8006348:	5166      	str	r6, [r4, r5]
}
 800634a:	2000      	movs	r0, #0
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	46c0      	nop			@ (mov r8, r8)

08006350 <USBD_CDC_Init>:
{
 8006350:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006352:	7c03      	ldrb	r3, [r0, #16]
{
 8006354:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006356:	2b00      	cmp	r3, #0
 8006358:	d13a      	bne.n	80063d0 <USBD_CDC_Init+0x80>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800635a:	2380      	movs	r3, #128	@ 0x80
 800635c:	2202      	movs	r2, #2
 800635e:	2181      	movs	r1, #129	@ 0x81
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	f000 ff59 	bl	8007218 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006366:	2301      	movs	r3, #1
 8006368:	62e3      	str	r3, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800636a:	2380      	movs	r3, #128	@ 0x80
 800636c:	2202      	movs	r2, #2
 800636e:	2101      	movs	r1, #1
 8006370:	0020      	movs	r0, r4
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	f000 ff50 	bl	8007218 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006378:	23b6      	movs	r3, #182	@ 0xb6
 800637a:	2501      	movs	r5, #1
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	50e5      	str	r5, [r4, r3]
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006380:	3b65      	subs	r3, #101	@ 0x65
 8006382:	3bff      	subs	r3, #255	@ 0xff
 8006384:	2203      	movs	r2, #3
 8006386:	2182      	movs	r1, #130	@ 0x82
 8006388:	0020      	movs	r0, r4
 800638a:	f000 ff45 	bl	8007218 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800638e:	2087      	movs	r0, #135	@ 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006390:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006392:	0080      	lsls	r0, r0, #2
 8006394:	f000 ffc2 	bl	800731c <USBD_static_malloc>
 8006398:	23ae      	movs	r3, #174	@ 0xae
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	1e05      	subs	r5, r0, #0
 800639e:	50e0      	str	r0, [r4, r3]
  if (pdev->pClassData == NULL)
 80063a0:	d02e      	beq.n	8006400 <USBD_CDC_Init+0xb0>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063a2:	3304      	adds	r3, #4
 80063a4:	58e3      	ldr	r3, [r4, r3]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4798      	blx	r3
    hcdc->TxState = 0U;
 80063aa:	2285      	movs	r2, #133	@ 0x85
 80063ac:	2300      	movs	r3, #0
 80063ae:	0092      	lsls	r2, r2, #2
 80063b0:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 80063b2:	3204      	adds	r2, #4
 80063b4:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063b6:	7c23      	ldrb	r3, [r4, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d117      	bne.n	80063ec <USBD_CDC_Init+0x9c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063bc:	2381      	movs	r3, #129	@ 0x81
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	58ea      	ldr	r2, [r5, r3]
 80063c2:	2101      	movs	r1, #1
 80063c4:	0020      	movs	r0, r4
 80063c6:	3b04      	subs	r3, #4
 80063c8:	f000 ff92 	bl	80072f0 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80063cc:	2000      	movs	r0, #0
}
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063d0:	2340      	movs	r3, #64	@ 0x40
 80063d2:	2202      	movs	r2, #2
 80063d4:	2181      	movs	r1, #129	@ 0x81
 80063d6:	f000 ff1f 	bl	8007218 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063da:	2301      	movs	r3, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063dc:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063de:	62e3      	str	r3, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063e0:	2101      	movs	r1, #1
 80063e2:	0020      	movs	r0, r4
 80063e4:	333f      	adds	r3, #63	@ 0x3f
 80063e6:	f000 ff17 	bl	8007218 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063ea:	e7c5      	b.n	8006378 <USBD_CDC_Init+0x28>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063ec:	2381      	movs	r3, #129	@ 0x81
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	58ea      	ldr	r2, [r5, r3]
 80063f2:	3bc5      	subs	r3, #197	@ 0xc5
 80063f4:	2101      	movs	r1, #1
 80063f6:	0020      	movs	r0, r4
 80063f8:	3bff      	subs	r3, #255	@ 0xff
 80063fa:	f000 ff79 	bl	80072f0 <USBD_LL_PrepareReceive>
 80063fe:	e7e5      	b.n	80063cc <USBD_CDC_Init+0x7c>
    ret = 1U;
 8006400:	2001      	movs	r0, #1
 8006402:	e7e4      	b.n	80063ce <USBD_CDC_Init+0x7e>

08006404 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8006404:	2900      	cmp	r1, #0
 8006406:	d004      	beq.n	8006412 <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 8006408:	23af      	movs	r3, #175	@ 0xaf
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 800640e:	2000      	movs	r0, #0
  }

  return ret;
}
 8006410:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8006412:	2002      	movs	r0, #2
 8006414:	e7fc      	b.n	8006410 <USBD_CDC_RegisterInterface+0xc>
 8006416:	46c0      	nop			@ (mov r8, r8)

08006418 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006418:	23ae      	movs	r3, #174	@ 0xae
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 800641e:	2082      	movs	r0, #130	@ 0x82
 8006420:	0080      	lsls	r0, r0, #2
 8006422:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8006424:	2184      	movs	r1, #132	@ 0x84
 8006426:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 8006428:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 800642a:	505a      	str	r2, [r3, r1]
}
 800642c:	4770      	bx	lr
 800642e:	46c0      	nop			@ (mov r8, r8)

08006430 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8006430:	23ae      	movs	r3, #174	@ 0xae
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	58c2      	ldr	r2, [r0, r3]
 8006436:	3bb4      	subs	r3, #180	@ 0xb4

  return USBD_OK;
}
 8006438:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800643a:	50d1      	str	r1, [r2, r3]
}
 800643c:	4770      	bx	lr
 800643e:	46c0      	nop			@ (mov r8, r8)

08006440 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006440:	23ae      	movs	r3, #174	@ 0xae
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	58c2      	ldr	r2, [r0, r3]
{
 8006446:	b510      	push	{r4, lr}
 8006448:	0004      	movs	r4, r0

  if (pdev->pClassData != NULL)
 800644a:	2a00      	cmp	r2, #0
 800644c:	d014      	beq.n	8006478 <USBD_CDC_TransmitPacket+0x38>
  {
    if (hcdc->TxState == 0U)
 800644e:	3ba4      	subs	r3, #164	@ 0xa4
 8006450:	58d1      	ldr	r1, [r2, r3]

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8006452:	2001      	movs	r0, #1
    if (hcdc->TxState == 0U)
 8006454:	2900      	cmp	r1, #0
 8006456:	d000      	beq.n	800645a <USBD_CDC_TransmitPacket+0x1a>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006458:	bd10      	pop	{r4, pc}
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800645a:	2182      	movs	r1, #130	@ 0x82
      hcdc->TxState = 1U;
 800645c:	50d0      	str	r0, [r2, r3]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800645e:	3b04      	subs	r3, #4
 8006460:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006462:	0089      	lsls	r1, r1, #2
 8006464:	5852      	ldr	r2, [r2, r1]
 8006466:	3988      	subs	r1, #136	@ 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006468:	6323      	str	r3, [r4, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800646a:	0020      	movs	r0, r4
 800646c:	b29b      	uxth	r3, r3
 800646e:	39ff      	subs	r1, #255	@ 0xff
 8006470:	f000 ff30 	bl	80072d4 <USBD_LL_Transmit>
      return USBD_OK;
 8006474:	2000      	movs	r0, #0
 8006476:	e7ef      	b.n	8006458 <USBD_CDC_TransmitPacket+0x18>
    return USBD_FAIL;
 8006478:	2002      	movs	r0, #2
 800647a:	e7ed      	b.n	8006458 <USBD_CDC_TransmitPacket+0x18>

0800647c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800647c:	23ae      	movs	r3, #174	@ 0xae
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	58c3      	ldr	r3, [r0, r3]
{
 8006482:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006484:	2b00      	cmp	r3, #0
 8006486:	d011      	beq.n	80064ac <USBD_CDC_ReceivePacket+0x30>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006488:	2281      	movs	r2, #129	@ 0x81
 800648a:	0092      	lsls	r2, r2, #2
 800648c:	589a      	ldr	r2, [r3, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648e:	7c03      	ldrb	r3, [r0, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <USBD_CDC_ReceivePacket+0x26>
      USBD_LL_PrepareReceive(pdev,
 8006494:	2380      	movs	r3, #128	@ 0x80
 8006496:	2101      	movs	r1, #1
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	f000 ff29 	bl	80072f0 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800649e:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80064a0:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80064a2:	2340      	movs	r3, #64	@ 0x40
 80064a4:	2101      	movs	r1, #1
 80064a6:	f000 ff23 	bl	80072f0 <USBD_LL_PrepareReceive>
 80064aa:	e7f8      	b.n	800649e <USBD_CDC_ReceivePacket+0x22>
    return USBD_FAIL;
 80064ac:	2002      	movs	r0, #2
 80064ae:	e7f7      	b.n	80064a0 <USBD_CDC_ReceivePacket+0x24>

080064b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064b0:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d014      	beq.n	80064e0 <USBD_Init+0x30>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80064b6:	23ad      	movs	r3, #173	@ 0xad
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	58c4      	ldr	r4, [r0, r3]
 80064bc:	2c00      	cmp	r4, #0
 80064be:	d001      	beq.n	80064c4 <USBD_Init+0x14>
  {
    pdev->pClass = NULL;
 80064c0:	2400      	movs	r4, #0
 80064c2:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d002      	beq.n	80064ce <USBD_Init+0x1e>
  {
    pdev->pDesc = pdesc;
 80064c8:	23ac      	movs	r3, #172	@ 0xac
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064ce:	23a7      	movs	r3, #167	@ 0xa7
 80064d0:	2101      	movs	r1, #1
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 80064d6:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80064d8:	f000 fe4e 	bl	8007178 <USBD_LL_Init>

  return USBD_OK;
 80064dc:	2000      	movs	r0, #0
}
 80064de:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80064e0:	2002      	movs	r0, #2
 80064e2:	e7fc      	b.n	80064de <USBD_Init+0x2e>

080064e4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80064e4:	2900      	cmp	r1, #0
 80064e6:	d004      	beq.n	80064f2 <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064e8:	23ad      	movs	r3, #173	@ 0xad
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 80064ee:	2000      	movs	r0, #0
#endif
    status = USBD_FAIL;
  }

  return status;
}
 80064f0:	4770      	bx	lr
    status = USBD_FAIL;
 80064f2:	2002      	movs	r0, #2
 80064f4:	e7fc      	b.n	80064f0 <USBD_RegisterClass+0xc>
 80064f6:	46c0      	nop			@ (mov r8, r8)

080064f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80064f8:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064fa:	f000 fe7f 	bl	80071fc <USBD_LL_Start>

  return USBD_OK;
}
 80064fe:	2000      	movs	r0, #0
 8006500:	bd10      	pop	{r4, pc}
 8006502:	46c0      	nop			@ (mov r8, r8)

08006504 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006504:	23ad      	movs	r3, #173	@ 0xad
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	58c3      	ldr	r3, [r0, r3]
{
 800650a:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4798      	blx	r3
 8006514:	1e43      	subs	r3, r0, #1
 8006516:	4198      	sbcs	r0, r3
 8006518:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 800651a:	bd10      	pop	{r4, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800651c:	2002      	movs	r0, #2
 800651e:	e7fc      	b.n	800651a <USBD_SetClassConfig+0x16>

08006520 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006520:	23ad      	movs	r3, #173	@ 0xad
{
 8006522:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	58c3      	ldr	r3, [r0, r3]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4798      	blx	r3

  return USBD_OK;
}
 800652c:	2000      	movs	r0, #0
 800652e:	bd10      	pop	{r4, pc}

08006530 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006530:	23aa      	movs	r3, #170	@ 0xaa
 8006532:	009b      	lsls	r3, r3, #2
{
 8006534:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006536:	18c5      	adds	r5, r0, r3
{
 8006538:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800653a:	0028      	movs	r0, r5
 800653c:	f000 fb80 	bl	8006c40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006540:	23a5      	movs	r3, #165	@ 0xa5
 8006542:	2201      	movs	r2, #1
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006548:	4b11      	ldr	r3, [pc, #68]	@ (8006590 <USBD_LL_SetupStage+0x60>)
 800654a:	5ae2      	ldrh	r2, [r4, r3]
 800654c:	3b16      	subs	r3, #22
 800654e:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006550:	3310      	adds	r3, #16
 8006552:	5ce1      	ldrb	r1, [r4, r3]
 8006554:	231f      	movs	r3, #31
 8006556:	400b      	ands	r3, r1
 8006558:	2b01      	cmp	r3, #1
 800655a:	d00a      	beq.n	8006572 <USBD_LL_SetupStage+0x42>
 800655c:	2b02      	cmp	r3, #2
 800655e:	d012      	beq.n	8006586 <USBD_LL_SetupStage+0x56>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00b      	beq.n	800657c <USBD_LL_SetupStage+0x4c>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006564:	237f      	movs	r3, #127	@ 0x7f
 8006566:	0020      	movs	r0, r4
 8006568:	4399      	bics	r1, r3
 800656a:	f000 fe73 	bl	8007254 <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 800656e:	2000      	movs	r0, #0
 8006570:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8006572:	0029      	movs	r1, r5
 8006574:	0020      	movs	r0, r4
 8006576:	f000 fa8f 	bl	8006a98 <USBD_StdItfReq>
      break;
 800657a:	e7f8      	b.n	800656e <USBD_LL_SetupStage+0x3e>
      USBD_StdDevReq(pdev, &pdev->request);
 800657c:	0029      	movs	r1, r5
 800657e:	0020      	movs	r0, r4
 8006580:	f000 f916 	bl	80067b0 <USBD_StdDevReq>
      break;
 8006584:	e7f3      	b.n	800656e <USBD_LL_SetupStage+0x3e>
      USBD_StdEPReq(pdev, &pdev->request);
 8006586:	0029      	movs	r1, r5
 8006588:	0020      	movs	r0, r4
 800658a:	f000 fab3 	bl	8006af4 <USBD_StdEPReq>
      break;
 800658e:	e7ee      	b.n	800656e <USBD_LL_SetupStage+0x3e>
 8006590:	000002ae 	.word	0x000002ae

08006594 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006594:	b510      	push	{r4, lr}
 8006596:	0013      	movs	r3, r2
 8006598:	0004      	movs	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800659a:	2900      	cmp	r1, #0
 800659c:	d108      	bne.n	80065b0 <USBD_LL_DataOutStage+0x1c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800659e:	20a5      	movs	r0, #165	@ 0xa5
 80065a0:	0080      	lsls	r0, r0, #2
 80065a2:	5822      	ldr	r2, [r4, r0]
 80065a4:	2a03      	cmp	r2, #3
 80065a6:	d013      	beq.n	80065d0 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80065a8:	2a05      	cmp	r2, #5
 80065aa:	d023      	beq.n	80065f4 <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80065ac:	2000      	movs	r0, #0
 80065ae:	e00e      	b.n	80065ce <USBD_LL_DataOutStage+0x3a>
  else if ((pdev->pClass->DataOut != NULL) &&
 80065b0:	23ad      	movs	r3, #173	@ 0xad
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	58c3      	ldr	r3, [r0, r3]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <USBD_LL_DataOutStage+0x38>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065bc:	22a7      	movs	r2, #167	@ 0xa7
 80065be:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 80065c0:	5c82      	ldrb	r2, [r0, r2]
 80065c2:	2a03      	cmp	r2, #3
 80065c4:	d102      	bne.n	80065cc <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 80065c6:	4798      	blx	r3
  return USBD_OK;
 80065c8:	2000      	movs	r0, #0
 80065ca:	e000      	b.n	80065ce <USBD_LL_DataOutStage+0x3a>
    return USBD_FAIL;
 80065cc:	2002      	movs	r0, #2
}
 80065ce:	bd10      	pop	{r4, pc}
      if (pep->rem_length > pep->maxpacket)
 80065d0:	0020      	movs	r0, r4
 80065d2:	3055      	adds	r0, #85	@ 0x55
 80065d4:	30ff      	adds	r0, #255	@ 0xff
 80065d6:	68c1      	ldr	r1, [r0, #12]
 80065d8:	6902      	ldr	r2, [r0, #16]
 80065da:	4291      	cmp	r1, r2
 80065dc:	d911      	bls.n	8006602 <USBD_LL_DataOutStage+0x6e>
        pep->rem_length -= pep->maxpacket;
 80065de:	1a89      	subs	r1, r1, r2
 80065e0:	60c1      	str	r1, [r0, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80065e2:	428a      	cmp	r2, r1
 80065e4:	d81d      	bhi.n	8006622 <USBD_LL_DataOutStage+0x8e>
 80065e6:	b292      	uxth	r2, r2
 80065e8:	0019      	movs	r1, r3
 80065ea:	0020      	movs	r0, r4
 80065ec:	f000 fb96 	bl	8006d1c <USBD_CtlContinueRx>
  return USBD_OK;
 80065f0:	2000      	movs	r0, #0
 80065f2:	e7ec      	b.n	80065ce <USBD_LL_DataOutStage+0x3a>
        pdev->ep0_state = USBD_EP0_IDLE;
 80065f4:	5021      	str	r1, [r4, r0]
        USBD_LL_StallEP(pdev, 0U);
 80065f6:	2100      	movs	r1, #0
 80065f8:	0020      	movs	r0, r4
 80065fa:	f000 fe2b 	bl	8007254 <USBD_LL_StallEP>
  return USBD_OK;
 80065fe:	2000      	movs	r0, #0
 8006600:	e7e5      	b.n	80065ce <USBD_LL_DataOutStage+0x3a>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006602:	23ad      	movs	r3, #173	@ 0xad
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	58e3      	ldr	r3, [r4, r3]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d004      	beq.n	8006618 <USBD_LL_DataOutStage+0x84>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800660e:	22a7      	movs	r2, #167	@ 0xa7
 8006610:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006612:	5ca2      	ldrb	r2, [r4, r2]
 8006614:	2a03      	cmp	r2, #3
 8006616:	d006      	beq.n	8006626 <USBD_LL_DataOutStage+0x92>
        USBD_CtlSendStatus(pdev);
 8006618:	0020      	movs	r0, r4
 800661a:	f000 fb87 	bl	8006d2c <USBD_CtlSendStatus>
  return USBD_OK;
 800661e:	2000      	movs	r0, #0
 8006620:	e7d5      	b.n	80065ce <USBD_LL_DataOutStage+0x3a>
        USBD_CtlContinueRx(pdev, pdata,
 8006622:	b28a      	uxth	r2, r1
 8006624:	e7e0      	b.n	80065e8 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8006626:	0020      	movs	r0, r4
 8006628:	4798      	blx	r3
 800662a:	e7f5      	b.n	8006618 <USBD_LL_DataOutStage+0x84>

0800662c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800662c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800662e:	0004      	movs	r4, r0
 8006630:	0013      	movs	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006632:	2900      	cmp	r1, #0
 8006634:	d111      	bne.n	800665a <USBD_LL_DataInStage+0x2e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006636:	22a5      	movs	r2, #165	@ 0xa5
 8006638:	0092      	lsls	r2, r2, #2
 800663a:	5882      	ldr	r2, [r0, r2]
 800663c:	2a02      	cmp	r2, #2
 800663e:	d01e      	beq.n	800667e <USBD_LL_DataInStage+0x52>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006640:	2304      	movs	r3, #4
 8006642:	439a      	bics	r2, r3
 8006644:	d102      	bne.n	800664c <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006646:	2180      	movs	r1, #128	@ 0x80
 8006648:	f000 fe04 	bl	8007254 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800664c:	23a8      	movs	r3, #168	@ 0xa8
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	5ce2      	ldrb	r2, [r4, r3]
 8006652:	2a01      	cmp	r2, #1
 8006654:	d010      	beq.n	8006678 <USBD_LL_DataInStage+0x4c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006656:	2000      	movs	r0, #0
}
 8006658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 800665a:	23ad      	movs	r3, #173	@ 0xad
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	58c3      	ldr	r3, [r0, r3]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d006      	beq.n	8006674 <USBD_LL_DataInStage+0x48>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006666:	22a7      	movs	r2, #167	@ 0xa7
 8006668:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 800666a:	5c82      	ldrb	r2, [r0, r2]
 800666c:	2a03      	cmp	r2, #3
 800666e:	d101      	bne.n	8006674 <USBD_LL_DataInStage+0x48>
    pdev->pClass->DataIn(pdev, epnum);
 8006670:	4798      	blx	r3
 8006672:	e7f0      	b.n	8006656 <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 8006674:	2002      	movs	r0, #2
 8006676:	e7ef      	b.n	8006658 <USBD_LL_DataInStage+0x2c>
      pdev->dev_test_mode = 0U;
 8006678:	2200      	movs	r2, #0
 800667a:	54e2      	strb	r2, [r4, r3]
 800667c:	e7eb      	b.n	8006656 <USBD_LL_DataInStage+0x2a>
      if (pep->rem_length > pep->maxpacket)
 800667e:	6a02      	ldr	r2, [r0, #32]
 8006680:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 8006682:	42aa      	cmp	r2, r5
 8006684:	d827      	bhi.n	80066d6 <USBD_LL_DataInStage+0xaa>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006686:	69c7      	ldr	r7, [r0, #28]
 8006688:	0029      	movs	r1, r5
 800668a:	0038      	movs	r0, r7
 800668c:	f7f9 fdd4 	bl	8000238 <__aeabi_uidivmod>
 8006690:	1e0e      	subs	r6, r1, #0
 8006692:	d10d      	bne.n	80066b0 <USBD_LL_DataInStage+0x84>
 8006694:	42bd      	cmp	r5, r7
 8006696:	d80b      	bhi.n	80066b0 <USBD_LL_DataInStage+0x84>
            (pep->total_length < pdev->ep0_data_len))
 8006698:	25a6      	movs	r5, #166	@ 0xa6
 800669a:	00ad      	lsls	r5, r5, #2
            (pep->total_length >= pep->maxpacket) &&
 800669c:	5963      	ldr	r3, [r4, r5]
 800669e:	429f      	cmp	r7, r3
 80066a0:	d206      	bcs.n	80066b0 <USBD_LL_DataInStage+0x84>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066a2:	2200      	movs	r2, #0
 80066a4:	2100      	movs	r1, #0
 80066a6:	0020      	movs	r0, r4
 80066a8:	f000 fb1e 	bl	8006ce8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066ac:	5166      	str	r6, [r4, r5]
 80066ae:	e018      	b.n	80066e2 <USBD_LL_DataInStage+0xb6>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066b0:	23ad      	movs	r3, #173	@ 0xad
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	58e3      	ldr	r3, [r4, r3]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <USBD_LL_DataInStage+0x9a>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066bc:	22a7      	movs	r2, #167	@ 0xa7
 80066be:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066c0:	5ca2      	ldrb	r2, [r4, r2]
 80066c2:	2a03      	cmp	r2, #3
 80066c4:	d014      	beq.n	80066f0 <USBD_LL_DataInStage+0xc4>
          USBD_LL_StallEP(pdev, 0x80U);
 80066c6:	2180      	movs	r1, #128	@ 0x80
 80066c8:	0020      	movs	r0, r4
 80066ca:	f000 fdc3 	bl	8007254 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80066ce:	0020      	movs	r0, r4
 80066d0:	f000 fb38 	bl	8006d44 <USBD_CtlReceiveStatus>
 80066d4:	e7ba      	b.n	800664c <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 80066d6:	1b52      	subs	r2, r2, r5
 80066d8:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80066da:	0019      	movs	r1, r3
 80066dc:	b292      	uxth	r2, r2
 80066de:	f000 fb03 	bl	8006ce8 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066e2:	2300      	movs	r3, #0
 80066e4:	2200      	movs	r2, #0
 80066e6:	2100      	movs	r1, #0
 80066e8:	0020      	movs	r0, r4
 80066ea:	f000 fe01 	bl	80072f0 <USBD_LL_PrepareReceive>
 80066ee:	e7ad      	b.n	800664c <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 80066f0:	0020      	movs	r0, r4
 80066f2:	4798      	blx	r3
 80066f4:	e7e7      	b.n	80066c6 <USBD_LL_DataInStage+0x9a>
 80066f6:	46c0      	nop			@ (mov r8, r8)

080066f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066f8:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066fa:	2340      	movs	r3, #64	@ 0x40
 80066fc:	2200      	movs	r2, #0
 80066fe:	2100      	movs	r1, #0
{
 8006700:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006702:	f000 fd89 	bl	8007218 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006706:	23ac      	movs	r3, #172	@ 0xac
 8006708:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800670a:	2640      	movs	r6, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	50e5      	str	r5, [r4, r3]
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006710:	330c      	adds	r3, #12
 8006712:	50e6      	str	r6, [r4, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006714:	3b25      	subs	r3, #37	@ 0x25
 8006716:	2200      	movs	r2, #0
 8006718:	3bff      	subs	r3, #255	@ 0xff
 800671a:	2180      	movs	r1, #128	@ 0x80
 800671c:	0020      	movs	r0, r4
 800671e:	f000 fd7b 	bl	8007218 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006722:	23a7      	movs	r3, #167	@ 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 8006724:	22a5      	movs	r2, #165	@ 0xa5
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006726:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006728:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800672a:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 800672c:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800672e:	2300      	movs	r3, #0
 8006730:	0092      	lsls	r2, r2, #2
 8006732:	50a3      	str	r3, [r4, r2]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 8006734:	3210      	adds	r2, #16
  pdev->dev_config = 0U;
 8006736:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8006738:	50a3      	str	r3, [r4, r2]

  if (pdev->pClassData)
 800673a:	23ae      	movs	r3, #174	@ 0xae
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	58e3      	ldr	r3, [r4, r3]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d006      	beq.n	8006752 <USBD_LL_Reset+0x5a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006744:	23ad      	movs	r3, #173	@ 0xad
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	58e3      	ldr	r3, [r4, r3]
 800674a:	2100      	movs	r1, #0
 800674c:	0020      	movs	r0, r4
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006752:	2000      	movs	r0, #0
 8006754:	bd70      	pop	{r4, r5, r6, pc}
 8006756:	46c0      	nop			@ (mov r8, r8)

08006758 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006758:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800675a:	2000      	movs	r0, #0
 800675c:	4770      	bx	lr
 800675e:	46c0      	nop			@ (mov r8, r8)

08006760 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006760:	23a7      	movs	r3, #167	@ 0xa7
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	5cc1      	ldrb	r1, [r0, r3]
 8006766:	4a03      	ldr	r2, [pc, #12]	@ (8006774 <USBD_LL_Suspend+0x14>)
 8006768:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800676a:	2204      	movs	r2, #4
 800676c:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 800676e:	2000      	movs	r0, #0
 8006770:	4770      	bx	lr
 8006772:	46c0      	nop			@ (mov r8, r8)
 8006774:	0000029d 	.word	0x0000029d

08006778 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006778:	23a7      	movs	r3, #167	@ 0xa7
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	5cc2      	ldrb	r2, [r0, r3]
 800677e:	2a04      	cmp	r2, #4
 8006780:	d102      	bne.n	8006788 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006782:	4a02      	ldr	r2, [pc, #8]	@ (800678c <USBD_LL_Resume+0x14>)
 8006784:	5c82      	ldrb	r2, [r0, r2]
 8006786:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8006788:	2000      	movs	r0, #0
 800678a:	4770      	bx	lr
 800678c:	0000029d 	.word	0x0000029d

08006790 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006790:	23a7      	movs	r3, #167	@ 0xa7
{
 8006792:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	5cc3      	ldrb	r3, [r0, r3]
 8006798:	2b03      	cmp	r3, #3
 800679a:	d001      	beq.n	80067a0 <USBD_LL_SOF+0x10>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800679c:	2000      	movs	r0, #0
 800679e:	bd10      	pop	{r4, pc}
    if (pdev->pClass->SOF != NULL)
 80067a0:	23ad      	movs	r3, #173	@ 0xad
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	58c3      	ldr	r3, [r0, r3]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0f7      	beq.n	800679c <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 80067ac:	4798      	blx	r3
 80067ae:	e7f5      	b.n	800679c <USBD_LL_SOF+0xc>

080067b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80067b0:	2360      	movs	r3, #96	@ 0x60
 80067b2:	780a      	ldrb	r2, [r1, #0]
 80067b4:	b570      	push	{r4, r5, r6, lr}
 80067b6:	4013      	ands	r3, r2
 80067b8:	000d      	movs	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ba:	0019      	movs	r1, r3
 80067bc:	22c0      	movs	r2, #192	@ 0xc0
 80067be:	3920      	subs	r1, #32
{
 80067c0:	0004      	movs	r4, r0
 80067c2:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067c4:	4211      	tst	r1, r2
 80067c6:	d00c      	beq.n	80067e2 <USBD_StdDevReq+0x32>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d011      	beq.n	80067f0 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80067cc:	2180      	movs	r1, #128	@ 0x80
 80067ce:	0020      	movs	r0, r4
 80067d0:	f000 fd40 	bl	8007254 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80067d4:	2100      	movs	r1, #0
 80067d6:	0020      	movs	r0, r4
 80067d8:	f000 fd3c 	bl	8007254 <USBD_LL_StallEP>
}
 80067dc:	2000      	movs	r0, #0
 80067de:	b002      	add	sp, #8
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 80067e2:	23ad      	movs	r3, #173	@ 0xad
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	58c3      	ldr	r3, [r0, r3]
 80067e8:	0029      	movs	r1, r5
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	4798      	blx	r3
      break;
 80067ee:	e7f5      	b.n	80067dc <USBD_StdDevReq+0x2c>
      switch (req->bRequest)
 80067f0:	786b      	ldrb	r3, [r5, #1]
 80067f2:	2b09      	cmp	r3, #9
 80067f4:	d8ea      	bhi.n	80067cc <USBD_StdDevReq+0x1c>
 80067f6:	4aa3      	ldr	r2, [pc, #652]	@ (8006a84 <USBD_StdDevReq+0x2d4>)
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	58d3      	ldr	r3, [r2, r3]
 80067fc:	469f      	mov	pc, r3
  cfgidx = (uint8_t)(req->wValue);
 80067fe:	78ab      	ldrb	r3, [r5, #2]
 8006800:	4da1      	ldr	r5, [pc, #644]	@ (8006a88 <USBD_StdDevReq+0x2d8>)
 8006802:	702b      	strb	r3, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006804:	2b01      	cmp	r3, #1
 8006806:	d8e1      	bhi.n	80067cc <USBD_StdDevReq+0x1c>
    switch (pdev->dev_state)
 8006808:	21a7      	movs	r1, #167	@ 0xa7
 800680a:	0089      	lsls	r1, r1, #2
 800680c:	5c42      	ldrb	r2, [r0, r1]
 800680e:	2a02      	cmp	r2, #2
 8006810:	d100      	bne.n	8006814 <USBD_StdDevReq+0x64>
 8006812:	e119      	b.n	8006a48 <USBD_StdDevReq+0x298>
 8006814:	2a03      	cmp	r2, #3
 8006816:	d100      	bne.n	800681a <USBD_StdDevReq+0x6a>
 8006818:	e104      	b.n	8006a24 <USBD_StdDevReq+0x274>
  USBD_LL_StallEP(pdev, 0x80U);
 800681a:	2180      	movs	r1, #128	@ 0x80
 800681c:	f000 fd1a 	bl	8007254 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006820:	2100      	movs	r1, #0
 8006822:	0020      	movs	r0, r4
 8006824:	f000 fd16 	bl	8007254 <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006828:	0020      	movs	r0, r4
 800682a:	7829      	ldrb	r1, [r5, #0]
 800682c:	f7ff fe78 	bl	8006520 <USBD_ClrClassConfig>
        break;
 8006830:	e7d4      	b.n	80067dc <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8006832:	23a7      	movs	r3, #167	@ 0xa7
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	5cc3      	ldrb	r3, [r0, r3]
 8006838:	3b01      	subs	r3, #1
 800683a:	2b02      	cmp	r3, #2
 800683c:	d8c6      	bhi.n	80067cc <USBD_StdDevReq+0x1c>
      if (req->wLength != 0x2U)
 800683e:	88eb      	ldrh	r3, [r5, #6]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d1c3      	bne.n	80067cc <USBD_StdDevReq+0x1c>
      if (pdev->dev_remote_wakeup)
 8006844:	23a9      	movs	r3, #169	@ 0xa9
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	58c3      	ldr	r3, [r0, r3]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800684a:	0001      	movs	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800684c:	425a      	negs	r2, r3
 800684e:	4153      	adcs	r3, r2
 8006850:	2201      	movs	r2, #1
 8006852:	425b      	negs	r3, r3
 8006854:	4393      	bics	r3, r2
 8006856:	3303      	adds	r3, #3
 8006858:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800685a:	310c      	adds	r1, #12
 800685c:	3201      	adds	r2, #1
 800685e:	f000 fa35 	bl	8006ccc <USBD_CtlSendData>
      break;
 8006862:	e7bb      	b.n	80067dc <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8006864:	23a7      	movs	r3, #167	@ 0xa7
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	5cc3      	ldrb	r3, [r0, r3]
 800686a:	3b01      	subs	r3, #1
 800686c:	2b02      	cmp	r3, #2
 800686e:	d8ad      	bhi.n	80067cc <USBD_StdDevReq+0x1c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006870:	886b      	ldrh	r3, [r5, #2]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d1b2      	bne.n	80067dc <USBD_StdDevReq+0x2c>
        pdev->dev_remote_wakeup = 0U;
 8006876:	23a9      	movs	r3, #169	@ 0xa9
 8006878:	2200      	movs	r2, #0
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	50c2      	str	r2, [r0, r3]
        USBD_CtlSendStatus(pdev);
 800687e:	0020      	movs	r0, r4
 8006880:	f000 fa54 	bl	8006d2c <USBD_CtlSendStatus>
 8006884:	e7aa      	b.n	80067dc <USBD_StdDevReq+0x2c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006886:	886b      	ldrh	r3, [r5, #2]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d1a7      	bne.n	80067dc <USBD_StdDevReq+0x2c>
    pdev->dev_remote_wakeup = 1U;
 800688c:	22a9      	movs	r2, #169	@ 0xa9
 800688e:	0092      	lsls	r2, r2, #2
 8006890:	5083      	str	r3, [r0, r2]
    USBD_CtlSendStatus(pdev);
 8006892:	f000 fa4b 	bl	8006d2c <USBD_CtlSendStatus>
 8006896:	e7a1      	b.n	80067dc <USBD_StdDevReq+0x2c>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006898:	88ab      	ldrh	r3, [r5, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d000      	beq.n	80068a0 <USBD_StdDevReq+0xf0>
 800689e:	e795      	b.n	80067cc <USBD_StdDevReq+0x1c>
 80068a0:	88eb      	ldrh	r3, [r5, #6]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d000      	beq.n	80068a8 <USBD_StdDevReq+0xf8>
 80068a6:	e791      	b.n	80067cc <USBD_StdDevReq+0x1c>
 80068a8:	886d      	ldrh	r5, [r5, #2]
 80068aa:	2d7f      	cmp	r5, #127	@ 0x7f
 80068ac:	d900      	bls.n	80068b0 <USBD_StdDevReq+0x100>
 80068ae:	e78d      	b.n	80067cc <USBD_StdDevReq+0x1c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b0:	26a7      	movs	r6, #167	@ 0xa7
 80068b2:	00b6      	lsls	r6, r6, #2
 80068b4:	5d83      	ldrb	r3, [r0, r6]
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d100      	bne.n	80068bc <USBD_StdDevReq+0x10c>
 80068ba:	e787      	b.n	80067cc <USBD_StdDevReq+0x1c>
      pdev->dev_address = dev_addr;
 80068bc:	4b73      	ldr	r3, [pc, #460]	@ (8006a8c <USBD_StdDevReq+0x2dc>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068be:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80068c0:	54c1      	strb	r1, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068c2:	f000 fcf9 	bl	80072b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80068c6:	0020      	movs	r0, r4
 80068c8:	f000 fa30 	bl	8006d2c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	d100      	bne.n	80068d2 <USBD_StdDevReq+0x122>
 80068d0:	e0d4      	b.n	8006a7c <USBD_StdDevReq+0x2cc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068d2:	2302      	movs	r3, #2
 80068d4:	55a3      	strb	r3, [r4, r6]
 80068d6:	e781      	b.n	80067dc <USBD_StdDevReq+0x2c>
  uint16_t len = 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	466a      	mov	r2, sp
 80068dc:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 80068de:	886a      	ldrh	r2, [r5, #2]
 80068e0:	0a13      	lsrs	r3, r2, #8
 80068e2:	2b07      	cmp	r3, #7
 80068e4:	d900      	bls.n	80068e8 <USBD_StdDevReq+0x138>
 80068e6:	e771      	b.n	80067cc <USBD_StdDevReq+0x1c>
 80068e8:	4969      	ldr	r1, [pc, #420]	@ (8006a90 <USBD_StdDevReq+0x2e0>)
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	58cb      	ldr	r3, [r1, r3]
 80068ee:	469f      	mov	pc, r3
  if (req->wLength != 1U)
 80068f0:	88eb      	ldrh	r3, [r5, #6]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d000      	beq.n	80068f8 <USBD_StdDevReq+0x148>
 80068f6:	e769      	b.n	80067cc <USBD_StdDevReq+0x1c>
    switch (pdev->dev_state)
 80068f8:	23a7      	movs	r3, #167	@ 0xa7
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	5cc3      	ldrb	r3, [r0, r3]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d900      	bls.n	8006904 <USBD_StdDevReq+0x154>
 8006902:	e087      	b.n	8006a14 <USBD_StdDevReq+0x264>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d100      	bne.n	800690a <USBD_StdDevReq+0x15a>
 8006908:	e760      	b.n	80067cc <USBD_StdDevReq+0x1c>
        pdev->dev_default_config = 0U;
 800690a:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800690c:	0001      	movs	r1, r0
 800690e:	2201      	movs	r2, #1
        pdev->dev_default_config = 0U;
 8006910:	6083      	str	r3, [r0, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006912:	3108      	adds	r1, #8
 8006914:	f000 f9da 	bl	8006ccc <USBD_CtlSendData>
        break;
 8006918:	e760      	b.n	80067dc <USBD_StdDevReq+0x2c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800691a:	7c03      	ldrb	r3, [r0, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d000      	beq.n	8006922 <USBD_StdDevReq+0x172>
 8006920:	e754      	b.n	80067cc <USBD_StdDevReq+0x1c>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006922:	23ad      	movs	r3, #173	@ 0xad
 8006924:	466a      	mov	r2, sp
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	58c3      	ldr	r3, [r0, r3]
 800692a:	1d90      	adds	r0, r2, #6
 800692c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006930:	2307      	movs	r3, #7
 8006932:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 8006934:	466b      	mov	r3, sp
 8006936:	88da      	ldrh	r2, [r3, #6]
 8006938:	88eb      	ldrh	r3, [r5, #6]
 800693a:	2a00      	cmp	r2, #0
 800693c:	d00d      	beq.n	800695a <USBD_StdDevReq+0x1aa>
 800693e:	2b00      	cmp	r3, #0
 8006940:	d09d      	beq.n	800687e <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 8006942:	1c11      	adds	r1, r2, #0
 8006944:	429a      	cmp	r2, r3
 8006946:	d900      	bls.n	800694a <USBD_StdDevReq+0x19a>
 8006948:	1c19      	adds	r1, r3, #0
 800694a:	466b      	mov	r3, sp
 800694c:	b28a      	uxth	r2, r1
 800694e:	80d9      	strh	r1, [r3, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006950:	0001      	movs	r1, r0
 8006952:	0020      	movs	r0, r4
 8006954:	f000 f9ba 	bl	8006ccc <USBD_CtlSendData>
 8006958:	88eb      	ldrh	r3, [r5, #6]
    if (req->wLength == 0U)
 800695a:	2b00      	cmp	r3, #0
 800695c:	d000      	beq.n	8006960 <USBD_StdDevReq+0x1b0>
 800695e:	e73d      	b.n	80067dc <USBD_StdDevReq+0x2c>
 8006960:	e78d      	b.n	800687e <USBD_StdDevReq+0xce>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006962:	7c03      	ldrb	r3, [r0, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d000      	beq.n	800696a <USBD_StdDevReq+0x1ba>
 8006968:	e730      	b.n	80067cc <USBD_StdDevReq+0x1c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800696a:	23ad      	movs	r3, #173	@ 0xad
 800696c:	466a      	mov	r2, sp
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	58c3      	ldr	r3, [r0, r3]
 8006972:	1d90      	adds	r0, r2, #6
 8006974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006976:	4798      	blx	r3
  if (err != 0U)
 8006978:	e7dc      	b.n	8006934 <USBD_StdDevReq+0x184>
      switch ((uint8_t)(req->wValue))
 800697a:	b2d2      	uxtb	r2, r2
 800697c:	2a05      	cmp	r2, #5
 800697e:	d900      	bls.n	8006982 <USBD_StdDevReq+0x1d2>
 8006980:	e724      	b.n	80067cc <USBD_StdDevReq+0x1c>
 8006982:	4b44      	ldr	r3, [pc, #272]	@ (8006a94 <USBD_StdDevReq+0x2e4>)
 8006984:	0092      	lsls	r2, r2, #2
 8006986:	589b      	ldr	r3, [r3, r2]
 8006988:	469f      	mov	pc, r3
      pdev->pClass->Setup(pdev, req);
 800698a:	23ad      	movs	r3, #173	@ 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800698c:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	58c3      	ldr	r3, [r0, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006992:	2a00      	cmp	r2, #0
 8006994:	d166      	bne.n	8006a64 <USBD_StdDevReq+0x2b4>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006998:	466a      	mov	r2, sp
 800699a:	1d90      	adds	r0, r2, #6
 800699c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800699e:	2302      	movs	r3, #2
 80069a0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80069a2:	e7c7      	b.n	8006934 <USBD_StdDevReq+0x184>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069a4:	23ac      	movs	r3, #172	@ 0xac
 80069a6:	466a      	mov	r2, sp
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	58e3      	ldr	r3, [r4, r3]
 80069ac:	1d91      	adds	r1, r2, #6
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	7c00      	ldrb	r0, [r0, #16]
 80069b2:	4798      	blx	r3
  if (err != 0U)
 80069b4:	e7be      	b.n	8006934 <USBD_StdDevReq+0x184>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069b6:	23ac      	movs	r3, #172	@ 0xac
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	58c3      	ldr	r3, [r0, r3]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d100      	bne.n	80069c4 <USBD_StdDevReq+0x214>
 80069c2:	e703      	b.n	80067cc <USBD_StdDevReq+0x1c>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069c4:	466a      	mov	r2, sp
 80069c6:	7c20      	ldrb	r0, [r4, #16]
 80069c8:	1d91      	adds	r1, r2, #6
 80069ca:	4798      	blx	r3
  if (err != 0U)
 80069cc:	e7b2      	b.n	8006934 <USBD_StdDevReq+0x184>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069ce:	23ac      	movs	r3, #172	@ 0xac
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	58c3      	ldr	r3, [r0, r3]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f4      	bne.n	80069c4 <USBD_StdDevReq+0x214>
 80069da:	e6f7      	b.n	80067cc <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069dc:	23ac      	movs	r3, #172	@ 0xac
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	58c3      	ldr	r3, [r0, r3]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1ed      	bne.n	80069c4 <USBD_StdDevReq+0x214>
 80069e8:	e6f0      	b.n	80067cc <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069ea:	23ac      	movs	r3, #172	@ 0xac
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	58c3      	ldr	r3, [r0, r3]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e6      	bne.n	80069c4 <USBD_StdDevReq+0x214>
 80069f6:	e6e9      	b.n	80067cc <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069f8:	23ac      	movs	r3, #172	@ 0xac
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	58c3      	ldr	r3, [r0, r3]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1df      	bne.n	80069c4 <USBD_StdDevReq+0x214>
 8006a04:	e6e2      	b.n	80067cc <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a06:	23ac      	movs	r3, #172	@ 0xac
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	58c3      	ldr	r3, [r0, r3]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1d8      	bne.n	80069c4 <USBD_StdDevReq+0x214>
 8006a12:	e6db      	b.n	80067cc <USBD_StdDevReq+0x1c>
    switch (pdev->dev_state)
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d000      	beq.n	8006a1a <USBD_StdDevReq+0x26a>
 8006a18:	e6d8      	b.n	80067cc <USBD_StdDevReq+0x1c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	1d01      	adds	r1, r0, #4
 8006a1e:	f000 f955 	bl	8006ccc <USBD_CtlSendData>
        break;
 8006a22:	e6db      	b.n	80067dc <USBD_StdDevReq+0x2c>
        if (cfgidx == 0U)
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d01f      	beq.n	8006a68 <USBD_StdDevReq+0x2b8>
        else if (cfgidx != pdev->dev_config)
 8006a28:	6841      	ldr	r1, [r0, #4]
 8006a2a:	2901      	cmp	r1, #1
 8006a2c:	d100      	bne.n	8006a30 <USBD_StdDevReq+0x280>
 8006a2e:	e726      	b.n	800687e <USBD_StdDevReq+0xce>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a30:	b2c9      	uxtb	r1, r1
 8006a32:	f7ff fd75 	bl	8006520 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006a36:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a38:	0020      	movs	r0, r4
          pdev->dev_config = cfgidx;
 8006a3a:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a3c:	f7ff fd62 	bl	8006504 <USBD_SetClassConfig>
 8006a40:	2802      	cmp	r0, #2
 8006a42:	d000      	beq.n	8006a46 <USBD_StdDevReq+0x296>
 8006a44:	e71b      	b.n	800687e <USBD_StdDevReq+0xce>
 8006a46:	e6c1      	b.n	80067cc <USBD_StdDevReq+0x1c>
        if (cfgidx)
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d100      	bne.n	8006a4e <USBD_StdDevReq+0x29e>
 8006a4c:	e717      	b.n	800687e <USBD_StdDevReq+0xce>
          pdev->dev_config = cfgidx;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	6043      	str	r3, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a52:	3302      	adds	r3, #2
 8006a54:	5443      	strb	r3, [r0, r1]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006a56:	2101      	movs	r1, #1
 8006a58:	f7ff fd54 	bl	8006504 <USBD_SetClassConfig>
 8006a5c:	2802      	cmp	r0, #2
 8006a5e:	d000      	beq.n	8006a62 <USBD_StdDevReq+0x2b2>
 8006a60:	e70d      	b.n	800687e <USBD_StdDevReq+0xce>
 8006a62:	e6b3      	b.n	80067cc <USBD_StdDevReq+0x1c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a66:	e797      	b.n	8006998 <USBD_StdDevReq+0x1e8>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a68:	2202      	movs	r2, #2
 8006a6a:	5442      	strb	r2, [r0, r1]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a6c:	2100      	movs	r1, #0
          pdev->dev_config = cfgidx;
 8006a6e:	6043      	str	r3, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006a70:	f7ff fd56 	bl	8006520 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006a74:	0020      	movs	r0, r4
 8006a76:	f000 f959 	bl	8006d2c <USBD_CtlSendStatus>
 8006a7a:	e6af      	b.n	80067dc <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	55a3      	strb	r3, [r4, r6]
 8006a80:	e6ac      	b.n	80067dc <USBD_StdDevReq+0x2c>
 8006a82:	46c0      	nop			@ (mov r8, r8)
 8006a84:	08008a6c 	.word	0x08008a6c
 8006a88:	20000440 	.word	0x20000440
 8006a8c:	0000029e 	.word	0x0000029e
 8006a90:	08008a94 	.word	0x08008a94
 8006a94:	08008ab4 	.word	0x08008ab4

08006a98 <USBD_StdItfReq>:
{
 8006a98:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a9a:	780a      	ldrb	r2, [r1, #0]
{
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	0004      	movs	r4, r0
 8006aa2:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aa4:	0652      	lsls	r2, r2, #25
 8006aa6:	d50b      	bpl.n	8006ac0 <USBD_StdItfReq+0x28>
 8006aa8:	2b40      	cmp	r3, #64	@ 0x40
 8006aaa:	d009      	beq.n	8006ac0 <USBD_StdItfReq+0x28>
  USBD_LL_StallEP(pdev, 0x80U);
 8006aac:	2180      	movs	r1, #128	@ 0x80
 8006aae:	0020      	movs	r0, r4
 8006ab0:	f000 fbd0 	bl	8007254 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	0020      	movs	r0, r4
 8006ab8:	f000 fbcc 	bl	8007254 <USBD_LL_StallEP>
}
 8006abc:	2000      	movs	r0, #0
 8006abe:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8006ac0:	23a7      	movs	r3, #167	@ 0xa7
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	5ce3      	ldrb	r3, [r4, r3]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d8ef      	bhi.n	8006aac <USBD_StdItfReq+0x14>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006acc:	792b      	ldrb	r3, [r5, #4]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d8ec      	bhi.n	8006aac <USBD_StdItfReq+0x14>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ad2:	23ad      	movs	r3, #173	@ 0xad
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	58e3      	ldr	r3, [r4, r3]
 8006ad8:	0029      	movs	r1, r5
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	0020      	movs	r0, r4
 8006ade:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ae0:	88eb      	ldrh	r3, [r5, #6]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1ea      	bne.n	8006abc <USBD_StdItfReq+0x24>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d1e8      	bne.n	8006abc <USBD_StdItfReq+0x24>
              USBD_CtlSendStatus(pdev);
 8006aea:	0020      	movs	r0, r4
 8006aec:	f000 f91e 	bl	8006d2c <USBD_CtlSendStatus>
 8006af0:	e7e4      	b.n	8006abc <USBD_StdItfReq+0x24>
 8006af2:	46c0      	nop			@ (mov r8, r8)

08006af4 <USBD_StdEPReq>:
{
 8006af4:	2360      	movs	r3, #96	@ 0x60
 8006af6:	780a      	ldrb	r2, [r1, #0]
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4013      	ands	r3, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006afc:	001c      	movs	r4, r3
 8006afe:	22c0      	movs	r2, #192	@ 0xc0
 8006b00:	3c20      	subs	r4, #32
{
 8006b02:	0005      	movs	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8006b04:	8888      	ldrh	r0, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b06:	4214      	tst	r4, r2
 8006b08:	d00b      	beq.n	8006b22 <USBD_StdEPReq+0x2e>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d010      	beq.n	8006b30 <USBD_StdEPReq+0x3c>
  USBD_LL_StallEP(pdev, 0x80U);
 8006b0e:	2180      	movs	r1, #128	@ 0x80
 8006b10:	0028      	movs	r0, r5
 8006b12:	f000 fb9f 	bl	8007254 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006b16:	2100      	movs	r1, #0
 8006b18:	0028      	movs	r0, r5
 8006b1a:	f000 fb9b 	bl	8007254 <USBD_LL_StallEP>
}
 8006b1e:	2000      	movs	r0, #0
 8006b20:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8006b22:	23ad      	movs	r3, #173	@ 0xad
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	58eb      	ldr	r3, [r5, r3]
 8006b28:	0028      	movs	r0, r5
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	4798      	blx	r3
      break;
 8006b2e:	e7f6      	b.n	8006b1e <USBD_StdEPReq+0x2a>
      switch (req->bRequest)
 8006b30:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8006b32:	b2c2      	uxtb	r2, r0
      switch (req->bRequest)
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d043      	beq.n	8006bc0 <USBD_StdEPReq+0xcc>
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d02d      	beq.n	8006b98 <USBD_StdEPReq+0xa4>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e6      	bne.n	8006b0e <USBD_StdEPReq+0x1a>
          switch (pdev->dev_state)
 8006b40:	23a7      	movs	r3, #167	@ 0xa7
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	5ceb      	ldrb	r3, [r5, r3]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d056      	beq.n	8006bf8 <USBD_StdEPReq+0x104>
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d1df      	bne.n	8006b0e <USBD_StdEPReq+0x1a>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b4e:	210f      	movs	r1, #15
 8006b50:	4011      	ands	r1, r2
 8006b52:	008b      	lsls	r3, r1, #2
 8006b54:	185b      	adds	r3, r3, r1
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	18eb      	adds	r3, r5, r3
              if ((ep_addr & 0x80U) == 0x80U)
 8006b5a:	0600      	lsls	r0, r0, #24
 8006b5c:	d45d      	bmi.n	8006c1a <USBD_StdEPReq+0x126>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006b5e:	3359      	adds	r3, #89	@ 0x59
 8006b60:	33ff      	adds	r3, #255	@ 0xff
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d0d2      	beq.n	8006b0e <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b68:	237f      	movs	r3, #127	@ 0x7f
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	009c      	lsls	r4, r3, #2
 8006b6e:	18e4      	adds	r4, r4, r3
 8006b70:	00a4      	lsls	r4, r4, #2
 8006b72:	3455      	adds	r4, #85	@ 0x55
 8006b74:	34ff      	adds	r4, #255	@ 0xff
 8006b76:	192c      	adds	r4, r5, r4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d05a      	beq.n	8006c32 <USBD_StdEPReq+0x13e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006b7c:	0011      	movs	r1, r2
 8006b7e:	0028      	movs	r0, r5
 8006b80:	f000 fb84 	bl	800728c <USBD_LL_IsStallEP>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d054      	beq.n	8006c32 <USBD_StdEPReq+0x13e>
 8006b88:	2301      	movs	r3, #1
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	0021      	movs	r1, r4
 8006b8e:	0028      	movs	r0, r5
                pep->status = 0x0000U;
 8006b90:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b92:	f000 f89b 	bl	8006ccc <USBD_CtlSendData>
              break;
 8006b96:	e7c2      	b.n	8006b1e <USBD_StdEPReq+0x2a>
          switch (pdev->dev_state)
 8006b98:	23a7      	movs	r3, #167	@ 0xa7
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	5ceb      	ldrb	r3, [r5, r3]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d01e      	beq.n	8006be0 <USBD_StdEPReq+0xec>
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d1b3      	bne.n	8006b0e <USBD_StdEPReq+0x1a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ba6:	884b      	ldrh	r3, [r1, #2]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d115      	bne.n	8006bd8 <USBD_StdEPReq+0xe4>
                if ((ep_addr != 0x00U) &&
 8006bac:	0653      	lsls	r3, r2, #25
 8006bae:	d013      	beq.n	8006bd8 <USBD_StdEPReq+0xe4>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006bb0:	88cb      	ldrh	r3, [r1, #6]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d110      	bne.n	8006bd8 <USBD_StdEPReq+0xe4>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006bb6:	0011      	movs	r1, r2
 8006bb8:	0028      	movs	r0, r5
 8006bba:	f000 fb4b 	bl	8007254 <USBD_LL_StallEP>
 8006bbe:	e00b      	b.n	8006bd8 <USBD_StdEPReq+0xe4>
          switch (pdev->dev_state)
 8006bc0:	23a7      	movs	r3, #167	@ 0xa7
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	5ceb      	ldrb	r3, [r5, r3]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d00a      	beq.n	8006be0 <USBD_StdEPReq+0xec>
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d19f      	bne.n	8006b0e <USBD_StdEPReq+0x1a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bce:	884b      	ldrh	r3, [r1, #2]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1a4      	bne.n	8006b1e <USBD_StdEPReq+0x2a>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bd4:	0653      	lsls	r3, r2, #25
 8006bd6:	d12e      	bne.n	8006c36 <USBD_StdEPReq+0x142>
              USBD_CtlSendStatus(pdev);
 8006bd8:	0028      	movs	r0, r5
 8006bda:	f000 f8a7 	bl	8006d2c <USBD_CtlSendStatus>
              break;
 8006bde:	e79e      	b.n	8006b1e <USBD_StdEPReq+0x2a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006be0:	0653      	lsls	r3, r2, #25
 8006be2:	d100      	bne.n	8006be6 <USBD_StdEPReq+0xf2>
 8006be4:	e793      	b.n	8006b0e <USBD_StdEPReq+0x1a>
                USBD_LL_StallEP(pdev, ep_addr);
 8006be6:	0011      	movs	r1, r2
 8006be8:	0028      	movs	r0, r5
 8006bea:	f000 fb33 	bl	8007254 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bee:	2180      	movs	r1, #128	@ 0x80
 8006bf0:	0028      	movs	r0, r5
 8006bf2:	f000 fb2f 	bl	8007254 <USBD_LL_StallEP>
 8006bf6:	e792      	b.n	8006b1e <USBD_StdEPReq+0x2a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bf8:	0652      	lsls	r2, r2, #25
 8006bfa:	d000      	beq.n	8006bfe <USBD_StdEPReq+0x10a>
 8006bfc:	e787      	b.n	8006b0e <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bfe:	0029      	movs	r1, r5
 8006c00:	3155      	adds	r1, #85	@ 0x55
 8006c02:	31ff      	adds	r1, #255	@ 0xff
 8006c04:	0600      	lsls	r0, r0, #24
 8006c06:	d501      	bpl.n	8006c0c <USBD_StdEPReq+0x118>
 8006c08:	3941      	subs	r1, #65	@ 0x41
 8006c0a:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 8006c0c:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c0e:	2202      	movs	r2, #2
 8006c10:	0028      	movs	r0, r5
              pep->status = 0x0000U;
 8006c12:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c14:	f000 f85a 	bl	8006ccc <USBD_CtlSendData>
              break;
 8006c18:	e781      	b.n	8006b1e <USBD_StdEPReq+0x2a>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d100      	bne.n	8006c22 <USBD_StdEPReq+0x12e>
 8006c20:	e775      	b.n	8006b0e <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c22:	237f      	movs	r3, #127	@ 0x7f
 8006c24:	4013      	ands	r3, r2
 8006c26:	1c59      	adds	r1, r3, #1
 8006c28:	008c      	lsls	r4, r1, #2
 8006c2a:	1864      	adds	r4, r4, r1
 8006c2c:	00a4      	lsls	r4, r4, #2
 8006c2e:	192c      	adds	r4, r5, r4
 8006c30:	e7a2      	b.n	8006b78 <USBD_StdEPReq+0x84>
{
 8006c32:	2300      	movs	r3, #0
 8006c34:	e7a9      	b.n	8006b8a <USBD_StdEPReq+0x96>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c36:	0011      	movs	r1, r2
 8006c38:	0028      	movs	r0, r5
 8006c3a:	f000 fb19 	bl	8007270 <USBD_LL_ClearStallEP>
 8006c3e:	e7cb      	b.n	8006bd8 <USBD_StdEPReq+0xe4>

08006c40 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006c40:	780b      	ldrb	r3, [r1, #0]
 8006c42:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006c44:	784b      	ldrb	r3, [r1, #1]
 8006c46:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006c48:	78cb      	ldrb	r3, [r1, #3]
 8006c4a:	788a      	ldrb	r2, [r1, #2]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006c52:	794b      	ldrb	r3, [r1, #5]
 8006c54:	790a      	ldrb	r2, [r1, #4]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006c5c:	79cb      	ldrb	r3, [r1, #7]
 8006c5e:	798a      	ldrb	r2, [r1, #6]
 8006c60:	021b      	lsls	r3, r3, #8
 8006c62:	4313      	orrs	r3, r2
 8006c64:	80c3      	strh	r3, [r0, #6]
}
 8006c66:	4770      	bx	lr

08006c68 <USBD_CtlError>:
{
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006c6c:	2180      	movs	r1, #128	@ 0x80
 8006c6e:	f000 faf1 	bl	8007254 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006c72:	2100      	movs	r1, #0
 8006c74:	0020      	movs	r0, r4
 8006c76:	f000 faed 	bl	8007254 <USBD_LL_StallEP>
}
 8006c7a:	bd10      	pop	{r4, pc}

08006c7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	0004      	movs	r4, r0
 8006c80:	000d      	movs	r5, r1
 8006c82:	0016      	movs	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d01d      	beq.n	8006cc4 <USBD_GetString+0x48>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8006c88:	7803      	ldrb	r3, [r0, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01b      	beq.n	8006cc6 <USBD_GetString+0x4a>
 8006c8e:	3001      	adds	r0, #1
 8006c90:	f7f9 fa3a 	bl	8000108 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006c94:	3001      	adds	r0, #1
 8006c96:	b2c3      	uxtb	r3, r0
 8006c98:	3301      	adds	r3, #1
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ca0:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ca2:	702a      	strb	r2, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ca4:	706b      	strb	r3, [r5, #1]
    while (*desc != '\0')
 8006ca6:	7820      	ldrb	r0, [r4, #0]
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d00b      	beq.n	8006cc4 <USBD_GetString+0x48>
      unicode[idx++] =  0U;
 8006cac:	2100      	movs	r1, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006cae:	3b01      	subs	r3, #1
      unicode[idx++] = *desc++;
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	54e8      	strb	r0, [r5, r3]
 8006cb6:	3401      	adds	r4, #1
      unicode[idx++] =  0U;
 8006cb8:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8006cba:	7820      	ldrb	r0, [r4, #0]
      unicode[idx++] =  0U;
 8006cbc:	3302      	adds	r3, #2
 8006cbe:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d1f5      	bne.n	8006cb0 <USBD_GetString+0x34>
}
 8006cc4:	bd70      	pop	{r4, r5, r6, pc}
  while (*buf != '\0')
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e7e8      	b.n	8006c9e <USBD_GetString+0x22>

08006ccc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006ccc:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cce:	22a5      	movs	r2, #165	@ 0xa5
{
 8006cd0:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cd2:	2402      	movs	r4, #2
 8006cd4:	0092      	lsls	r2, r2, #2
 8006cd6:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cd8:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8006cda:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cdc:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8006cde:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ce0:	f000 faf8 	bl	80072d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	bd10      	pop	{r4, pc}

08006ce8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006ce8:	b510      	push	{r4, lr}
 8006cea:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cec:	000a      	movs	r2, r1
 8006cee:	2100      	movs	r1, #0
 8006cf0:	f000 faf0 	bl	80072d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	bd10      	pop	{r4, pc}

08006cf8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006cf8:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cfa:	22a5      	movs	r2, #165	@ 0xa5
{
 8006cfc:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cfe:	2403      	movs	r4, #3
 8006d00:	0092      	lsls	r2, r2, #2
 8006d02:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8006d04:	3a39      	subs	r2, #57	@ 0x39
 8006d06:	3aff      	subs	r2, #255	@ 0xff
 8006d08:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 8006d0a:	3204      	adds	r2, #4
 8006d0c:	5083      	str	r3, [r0, r2]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d0e:	000a      	movs	r2, r1
 8006d10:	2100      	movs	r1, #0
 8006d12:	f000 faed 	bl	80072f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006d16:	2000      	movs	r0, #0
 8006d18:	bd10      	pop	{r4, pc}
 8006d1a:	46c0      	nop			@ (mov r8, r8)

08006d1c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d20:	000a      	movs	r2, r1
 8006d22:	2100      	movs	r1, #0
 8006d24:	f000 fae4 	bl	80072f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006d28:	2000      	movs	r0, #0
 8006d2a:	bd10      	pop	{r4, pc}

08006d2c <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d2c:	23a5      	movs	r3, #165	@ 0xa5
 8006d2e:	2204      	movs	r2, #4
{
 8006d30:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d36:	2100      	movs	r1, #0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f000 faca 	bl	80072d4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006d40:	2000      	movs	r0, #0
 8006d42:	bd10      	pop	{r4, pc}

08006d44 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d44:	23a5      	movs	r3, #165	@ 0xa5
 8006d46:	2205      	movs	r2, #5
{
 8006d48:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d4e:	2100      	movs	r1, #0
 8006d50:	2300      	movs	r3, #0
 8006d52:	2200      	movs	r2, #0
 8006d54:	f000 facc 	bl	80072f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006d58:	2000      	movs	r0, #0
 8006d5a:	bd10      	pop	{r4, pc}

08006d5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d5e:	4c1a      	ldr	r4, [pc, #104]	@ (8006dc8 <MX_USB_DEVICE_Init+0x6c>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	0020      	movs	r0, r4
 8006d64:	4919      	ldr	r1, [pc, #100]	@ (8006dcc <MX_USB_DEVICE_Init+0x70>)
 8006d66:	f7ff fba3 	bl	80064b0 <USBD_Init>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d111      	bne.n	8006d92 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d6e:	0020      	movs	r0, r4
 8006d70:	4917      	ldr	r1, [pc, #92]	@ (8006dd0 <MX_USB_DEVICE_Init+0x74>)
 8006d72:	f7ff fbb7 	bl	80064e4 <USBD_RegisterClass>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d113      	bne.n	8006da2 <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d7a:	0020      	movs	r0, r4
 8006d7c:	4915      	ldr	r1, [pc, #84]	@ (8006dd4 <MX_USB_DEVICE_Init+0x78>)
 8006d7e:	f7ff fb41 	bl	8006404 <USBD_CDC_RegisterInterface>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	d115      	bne.n	8006db2 <MX_USB_DEVICE_Init+0x56>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d86:	0020      	movs	r0, r4
 8006d88:	f7ff fbb6 	bl	80064f8 <USBD_Start>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d117      	bne.n	8006dc0 <MX_USB_DEVICE_Init+0x64>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d90:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006d92:	f7fa f837 	bl	8000e04 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d96:	0020      	movs	r0, r4
 8006d98:	490d      	ldr	r1, [pc, #52]	@ (8006dd0 <MX_USB_DEVICE_Init+0x74>)
 8006d9a:	f7ff fba3 	bl	80064e4 <USBD_RegisterClass>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d0eb      	beq.n	8006d7a <MX_USB_DEVICE_Init+0x1e>
    Error_Handler();
 8006da2:	f7fa f82f 	bl	8000e04 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006da6:	0020      	movs	r0, r4
 8006da8:	490a      	ldr	r1, [pc, #40]	@ (8006dd4 <MX_USB_DEVICE_Init+0x78>)
 8006daa:	f7ff fb2b 	bl	8006404 <USBD_CDC_RegisterInterface>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d0e9      	beq.n	8006d86 <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 8006db2:	f7fa f827 	bl	8000e04 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006db6:	0020      	movs	r0, r4
 8006db8:	f7ff fb9e 	bl	80064f8 <USBD_Start>
 8006dbc:	2800      	cmp	r0, #0
 8006dbe:	d0e7      	beq.n	8006d90 <MX_USB_DEVICE_Init+0x34>
    Error_Handler();
 8006dc0:	f7fa f820 	bl	8000e04 <Error_Handler>
}
 8006dc4:	e7e4      	b.n	8006d90 <MX_USB_DEVICE_Init+0x34>
 8006dc6:	46c0      	nop			@ (mov r8, r8)
 8006dc8:	20000444 	.word	0x20000444
 8006dcc:	20000174 	.word	0x20000174
 8006dd0:	200000ec 	.word	0x200000ec
 8006dd4:	20000130 	.word	0x20000130

08006dd8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
  /* USER CODE END 4 */
}
 8006dd8:	2000      	movs	r0, #0
 8006dda:	4770      	bx	lr

08006ddc <CDC_Control_FS>:
			break;
	}

	return (USBD_OK);
  /* USER CODE END 5 */
}
 8006ddc:	2000      	movs	r0, #0
 8006dde:	4770      	bx	lr

08006de0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	000e      	movs	r6, r1
 8006de4:	0004      	movs	r4, r0
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006de6:	4d0f      	ldr	r5, [pc, #60]	@ (8006e24 <CDC_Receive_FS+0x44>)
 8006de8:	0001      	movs	r1, r0
 8006dea:	0028      	movs	r0, r5
 8006dec:	f7ff fb20 	bl	8006430 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006df0:	0028      	movs	r0, r5
 8006df2:	f7ff fb43 	bl	800647c <USBD_CDC_ReceivePacket>

	memset(buffer, '\0', 64);  // clear the buffer
 8006df6:	4d0c      	ldr	r5, [pc, #48]	@ (8006e28 <CDC_Receive_FS+0x48>)
 8006df8:	2240      	movs	r2, #64	@ 0x40
 8006dfa:	0028      	movs	r0, r5
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	f000 fc5f 	bl	80076c0 <memset>
	uint8_t len = (uint8_t) *Len;
	memcpy(buffer, Buf, len);  // copy the data to the buffer
 8006e02:	7836      	ldrb	r6, [r6, #0]
 8006e04:	0021      	movs	r1, r4
 8006e06:	0032      	movs	r2, r6
 8006e08:	0028      	movs	r0, r5
 8006e0a:	f000 fd44 	bl	8007896 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8006e0e:	0032      	movs	r2, r6
 8006e10:	2100      	movs	r1, #0
 8006e12:	0020      	movs	r0, r4
 8006e14:	f000 fc54 	bl	80076c0 <memset>
	commandRecieved = TRUE;
 8006e18:	2201      	movs	r2, #1
 8006e1a:	4b04      	ldr	r3, [pc, #16]	@ (8006e2c <CDC_Receive_FS+0x4c>)

	return (USBD_OK);
  /* USER CODE END 6 */
}
 8006e1c:	2000      	movs	r0, #0
	commandRecieved = TRUE;
 8006e1e:	701a      	strb	r2, [r3, #0]
}
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	20000444 	.word	0x20000444
 8006e28:	200003f8 	.word	0x200003f8
 8006e2c:	20000228 	.word	0x20000228

08006e30 <CDC_Init_FS>:
{
 8006e30:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e32:	4c06      	ldr	r4, [pc, #24]	@ (8006e4c <CDC_Init_FS+0x1c>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	0020      	movs	r0, r4
 8006e38:	4905      	ldr	r1, [pc, #20]	@ (8006e50 <CDC_Init_FS+0x20>)
 8006e3a:	f7ff faed 	bl	8006418 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e3e:	0020      	movs	r0, r4
 8006e40:	4904      	ldr	r1, [pc, #16]	@ (8006e54 <CDC_Init_FS+0x24>)
 8006e42:	f7ff faf5 	bl	8006430 <USBD_CDC_SetRxBuffer>
}
 8006e46:	2000      	movs	r0, #0
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	46c0      	nop			@ (mov r8, r8)
 8006e4c:	20000444 	.word	0x20000444
 8006e50:	20000708 	.word	0x20000708
 8006e54:	20000b08 	.word	0x20000b08

08006e58 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8006e58:	22ae      	movs	r2, #174	@ 0xae
{
 8006e5a:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8006e5c:	4c08      	ldr	r4, [pc, #32]	@ (8006e80 <CDC_Transmit_FS+0x28>)
 8006e5e:	0092      	lsls	r2, r2, #2
{
 8006e60:	0003      	movs	r3, r0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8006e62:	58a0      	ldr	r0, [r4, r2]
	if (hcdc->TxState != 0) {
 8006e64:	3aa4      	subs	r2, #164	@ 0xa4
 8006e66:	5882      	ldr	r2, [r0, r2]
		return USBD_BUSY;
 8006e68:	2001      	movs	r0, #1
	if (hcdc->TxState != 0) {
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	d107      	bne.n	8006e7e <CDC_Transmit_FS+0x26>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006e6e:	000a      	movs	r2, r1
 8006e70:	0020      	movs	r0, r4
 8006e72:	0019      	movs	r1, r3
 8006e74:	f7ff fad0 	bl	8006418 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006e78:	0020      	movs	r0, r4
 8006e7a:	f7ff fae1 	bl	8006440 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8006e7e:	bd10      	pop	{r4, pc}
 8006e80:	20000444 	.word	0x20000444

08006e84 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e84:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
 8006e86:	4801      	ldr	r0, [pc, #4]	@ (8006e8c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e88:	800b      	strh	r3, [r1, #0]
}
 8006e8a:	4770      	bx	lr
 8006e8c:	20000160 	.word	0x20000160

08006e90 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e90:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 8006e92:	4801      	ldr	r0, [pc, #4]	@ (8006e98 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006e94:	800b      	strh	r3, [r1, #0]
}
 8006e96:	4770      	bx	lr
 8006e98:	2000015c 	.word	0x2000015c

08006e9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e9c:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e9e:	4c04      	ldr	r4, [pc, #16]	@ (8006eb0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8006ea0:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ea2:	0021      	movs	r1, r4
 8006ea4:	4803      	ldr	r0, [pc, #12]	@ (8006eb4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006ea6:	f7ff fee9 	bl	8006c7c <USBD_GetString>
  return USBD_StrDesc;
}
 8006eaa:	0020      	movs	r0, r4
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	46c0      	nop			@ (mov r8, r8)
 8006eb0:	20000f08 	.word	0x20000f08
 8006eb4:	08008acc 	.word	0x08008acc

08006eb8 <USBD_FS_ProductStrDescriptor>:
{
 8006eb8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006eba:	4c04      	ldr	r4, [pc, #16]	@ (8006ecc <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006ebc:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ebe:	0021      	movs	r1, r4
 8006ec0:	4803      	ldr	r0, [pc, #12]	@ (8006ed0 <USBD_FS_ProductStrDescriptor+0x18>)
 8006ec2:	f7ff fedb 	bl	8006c7c <USBD_GetString>
}
 8006ec6:	0020      	movs	r0, r4
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	46c0      	nop			@ (mov r8, r8)
 8006ecc:	20000f08 	.word	0x20000f08
 8006ed0:	08008ae0 	.word	0x08008ae0

08006ed4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed4:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ed6:	4c04      	ldr	r4, [pc, #16]	@ (8006ee8 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8006ed8:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eda:	0021      	movs	r1, r4
 8006edc:	4803      	ldr	r0, [pc, #12]	@ (8006eec <USBD_FS_ConfigStrDescriptor+0x18>)
 8006ede:	f7ff fecd 	bl	8006c7c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006ee2:	0020      	movs	r0, r4
 8006ee4:	bd10      	pop	{r4, pc}
 8006ee6:	46c0      	nop			@ (mov r8, r8)
 8006ee8:	20000f08 	.word	0x20000f08
 8006eec:	08008af8 	.word	0x08008af8

08006ef0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ef0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ef2:	4c04      	ldr	r4, [pc, #16]	@ (8006f04 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006ef4:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ef6:	0021      	movs	r1, r4
 8006ef8:	4803      	ldr	r0, [pc, #12]	@ (8006f08 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006efa:	f7ff febf 	bl	8006c7c <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8006efe:	0020      	movs	r0, r4
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	46c0      	nop			@ (mov r8, r8)
 8006f04:	20000f08 	.word	0x20000f08
 8006f08:	08008b04 	.word	0x08008b04

08006f0c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006f0c:	231a      	movs	r3, #26
{
 8006f0e:	b530      	push	{r4, r5, lr}
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f10:	4a52      	ldr	r2, [pc, #328]	@ (800705c <USBD_FS_SerialStrDescriptor+0x150>)
  *length = USB_SIZ_STRING_SERIAL;
 8006f12:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f14:	4b52      	ldr	r3, [pc, #328]	@ (8007060 <USBD_FS_SerialStrDescriptor+0x154>)

  deviceserial0 += deviceserial2;
 8006f16:	6812      	ldr	r2, [r2, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f18:	681b      	ldr	r3, [r3, #0]
  deviceserial0 += deviceserial2;
 8006f1a:	189b      	adds	r3, r3, r2

  if (deviceserial0 != 0)
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <USBD_FS_SerialStrDescriptor+0x18>
 8006f20:	4850      	ldr	r0, [pc, #320]	@ (8007064 <USBD_FS_SerialStrDescriptor+0x158>)
}
 8006f22:	bd30      	pop	{r4, r5, pc}
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 8006f24:	0f19      	lsrs	r1, r3, #28
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f26:	000c      	movs	r4, r1
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f28:	4a4f      	ldr	r2, [pc, #316]	@ (8007068 <USBD_FS_SerialStrDescriptor+0x15c>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f2a:	0008      	movs	r0, r1
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f2c:	6812      	ldr	r2, [r2, #0]
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f2e:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f30:	2909      	cmp	r1, #9
 8006f32:	d900      	bls.n	8006f36 <USBD_FS_SerialStrDescriptor+0x2a>
 8006f34:	e086      	b.n	8007044 <USBD_FS_SerialStrDescriptor+0x138>
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006f36:	2100      	movs	r1, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f38:	484a      	ldr	r0, [pc, #296]	@ (8007064 <USBD_FS_SerialStrDescriptor+0x158>)
    pbuf[2 * idx + 1] = 0;
 8006f3a:	70c1      	strb	r1, [r0, #3]
    value = value << 4;
 8006f3c:	0119      	lsls	r1, r3, #4
    if (((value >> 28)) < 0xA)
 8006f3e:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f40:	7084      	strb	r4, [r0, #2]
 8006f42:	002c      	movs	r4, r5
 8006f44:	0029      	movs	r1, r5
 8006f46:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f48:	2d09      	cmp	r5, #9
 8006f4a:	d878      	bhi.n	800703e <USBD_FS_SerialStrDescriptor+0x132>
    pbuf[2 * idx + 1] = 0;
 8006f4c:	2100      	movs	r1, #0
 8006f4e:	7141      	strb	r1, [r0, #5]
    value = value << 4;
 8006f50:	0219      	lsls	r1, r3, #8
    if (((value >> 28)) < 0xA)
 8006f52:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f54:	7104      	strb	r4, [r0, #4]
 8006f56:	002c      	movs	r4, r5
 8006f58:	0029      	movs	r1, r5
 8006f5a:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f5c:	2d09      	cmp	r5, #9
 8006f5e:	d86b      	bhi.n	8007038 <USBD_FS_SerialStrDescriptor+0x12c>
    pbuf[2 * idx + 1] = 0;
 8006f60:	2100      	movs	r1, #0
 8006f62:	71c1      	strb	r1, [r0, #7]
    value = value << 4;
 8006f64:	0319      	lsls	r1, r3, #12
    if (((value >> 28)) < 0xA)
 8006f66:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f68:	7184      	strb	r4, [r0, #6]
 8006f6a:	002c      	movs	r4, r5
 8006f6c:	0029      	movs	r1, r5
 8006f6e:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f70:	2d09      	cmp	r5, #9
 8006f72:	d85e      	bhi.n	8007032 <USBD_FS_SerialStrDescriptor+0x126>
    pbuf[2 * idx + 1] = 0;
 8006f74:	2100      	movs	r1, #0
 8006f76:	7241      	strb	r1, [r0, #9]
    value = value << 4;
 8006f78:	0419      	lsls	r1, r3, #16
    if (((value >> 28)) < 0xA)
 8006f7a:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f7c:	7204      	strb	r4, [r0, #8]
 8006f7e:	002c      	movs	r4, r5
 8006f80:	0029      	movs	r1, r5
 8006f82:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f84:	2d09      	cmp	r5, #9
 8006f86:	d851      	bhi.n	800702c <USBD_FS_SerialStrDescriptor+0x120>
    pbuf[2 * idx + 1] = 0;
 8006f88:	2100      	movs	r1, #0
 8006f8a:	72c1      	strb	r1, [r0, #11]
    value = value << 4;
 8006f8c:	0519      	lsls	r1, r3, #20
    if (((value >> 28)) < 0xA)
 8006f8e:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f90:	7284      	strb	r4, [r0, #10]
 8006f92:	002c      	movs	r4, r5
 8006f94:	0029      	movs	r1, r5
 8006f96:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006f98:	2d09      	cmp	r5, #9
 8006f9a:	d844      	bhi.n	8007026 <USBD_FS_SerialStrDescriptor+0x11a>
    pbuf[2 * idx + 1] = 0;
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	7341      	strb	r1, [r0, #13]
    value = value << 4;
 8006fa0:	0619      	lsls	r1, r3, #24
    if (((value >> 28)) < 0xA)
 8006fa2:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fa4:	7304      	strb	r4, [r0, #12]
 8006fa6:	002c      	movs	r4, r5
 8006fa8:	0029      	movs	r1, r5
 8006faa:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006fac:	2d09      	cmp	r5, #9
 8006fae:	d837      	bhi.n	8007020 <USBD_FS_SerialStrDescriptor+0x114>
    pbuf[2 * idx + 1] = 0;
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	73c1      	strb	r1, [r0, #15]
    if (((value >> 28)) < 0xA)
 8006fb4:	310f      	adds	r1, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fb6:	7384      	strb	r4, [r0, #14]
    if (((value >> 28)) < 0xA)
 8006fb8:	000c      	movs	r4, r1
 8006fba:	401c      	ands	r4, r3
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fbc:	0023      	movs	r3, r4
 8006fbe:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 8006fc0:	2c09      	cmp	r4, #9
 8006fc2:	d800      	bhi.n	8006fc6 <USBD_FS_SerialStrDescriptor+0xba>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fc4:	3b07      	subs	r3, #7
 8006fc6:	7403      	strb	r3, [r0, #16]
    pbuf[2 * idx + 1] = 0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	7443      	strb	r3, [r0, #17]
    if (((value >> 28)) < 0xA)
 8006fcc:	0f13      	lsrs	r3, r2, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fce:	001c      	movs	r4, r3
 8006fd0:	0019      	movs	r1, r3
 8006fd2:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006fd4:	2b09      	cmp	r3, #9
 8006fd6:	d838      	bhi.n	800704a <USBD_FS_SerialStrDescriptor+0x13e>
    pbuf[2 * idx + 1] = 0;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	74c3      	strb	r3, [r0, #19]
    value = value << 4;
 8006fdc:	0113      	lsls	r3, r2, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fde:	7484      	strb	r4, [r0, #18]
    if (((value >> 28)) < 0xA)
 8006fe0:	0f1c      	lsrs	r4, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006fe2:	0021      	movs	r1, r4
 8006fe4:	0023      	movs	r3, r4
 8006fe6:	3130      	adds	r1, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006fe8:	2c09      	cmp	r4, #9
 8006fea:	d831      	bhi.n	8007050 <USBD_FS_SerialStrDescriptor+0x144>
    pbuf[2 * idx + 1] = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	7543      	strb	r3, [r0, #21]
    value = value << 4;
 8006ff0:	0213      	lsls	r3, r2, #8
    if (((value >> 28)) < 0xA)
 8006ff2:	0f1c      	lsrs	r4, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ff4:	7501      	strb	r1, [r0, #20]
 8006ff6:	0021      	movs	r1, r4
 8006ff8:	0023      	movs	r3, r4
 8006ffa:	3130      	adds	r1, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8006ffc:	2c09      	cmp	r4, #9
 8006ffe:	d82a      	bhi.n	8007056 <USBD_FS_SerialStrDescriptor+0x14a>
    pbuf[2 * idx + 1] = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	75c3      	strb	r3, [r0, #23]
    value = value << 4;
 8007004:	0313      	lsls	r3, r2, #12
      pbuf[2 * idx] = (value >> 28) + '0';
 8007006:	7581      	strb	r1, [r0, #22]
    if (((value >> 28)) < 0xA)
 8007008:	0f19      	lsrs	r1, r3, #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800700a:	000a      	movs	r2, r1
      pbuf[2 * idx] = (value >> 28) + '0';
 800700c:	000b      	movs	r3, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800700e:	3237      	adds	r2, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 8007010:	2909      	cmp	r1, #9
 8007012:	d801      	bhi.n	8007018 <USBD_FS_SerialStrDescriptor+0x10c>
      pbuf[2 * idx] = (value >> 28) + '0';
 8007014:	3330      	adds	r3, #48	@ 0x30
 8007016:	001a      	movs	r2, r3
    pbuf[2 * idx + 1] = 0;
 8007018:	2300      	movs	r3, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 800701a:	7602      	strb	r2, [r0, #24]
    pbuf[2 * idx + 1] = 0;
 800701c:	7643      	strb	r3, [r0, #25]
  return (uint8_t *) USBD_StringSerial;
 800701e:	e780      	b.n	8006f22 <USBD_FS_SerialStrDescriptor+0x16>
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007020:	3137      	adds	r1, #55	@ 0x37
 8007022:	000c      	movs	r4, r1
 8007024:	e7c4      	b.n	8006fb0 <USBD_FS_SerialStrDescriptor+0xa4>
 8007026:	3137      	adds	r1, #55	@ 0x37
 8007028:	000c      	movs	r4, r1
 800702a:	e7b7      	b.n	8006f9c <USBD_FS_SerialStrDescriptor+0x90>
 800702c:	3137      	adds	r1, #55	@ 0x37
 800702e:	000c      	movs	r4, r1
 8007030:	e7aa      	b.n	8006f88 <USBD_FS_SerialStrDescriptor+0x7c>
 8007032:	3137      	adds	r1, #55	@ 0x37
 8007034:	000c      	movs	r4, r1
 8007036:	e79d      	b.n	8006f74 <USBD_FS_SerialStrDescriptor+0x68>
 8007038:	3137      	adds	r1, #55	@ 0x37
 800703a:	000c      	movs	r4, r1
 800703c:	e790      	b.n	8006f60 <USBD_FS_SerialStrDescriptor+0x54>
 800703e:	3137      	adds	r1, #55	@ 0x37
 8007040:	000c      	movs	r4, r1
 8007042:	e783      	b.n	8006f4c <USBD_FS_SerialStrDescriptor+0x40>
 8007044:	3037      	adds	r0, #55	@ 0x37
 8007046:	0004      	movs	r4, r0
 8007048:	e775      	b.n	8006f36 <USBD_FS_SerialStrDescriptor+0x2a>
 800704a:	3137      	adds	r1, #55	@ 0x37
 800704c:	000c      	movs	r4, r1
 800704e:	e7c3      	b.n	8006fd8 <USBD_FS_SerialStrDescriptor+0xcc>
 8007050:	3337      	adds	r3, #55	@ 0x37
 8007052:	0019      	movs	r1, r3
 8007054:	e7ca      	b.n	8006fec <USBD_FS_SerialStrDescriptor+0xe0>
 8007056:	3337      	adds	r3, #55	@ 0x37
 8007058:	0019      	movs	r1, r3
 800705a:	e7d1      	b.n	8007000 <USBD_FS_SerialStrDescriptor+0xf4>
 800705c:	1ffff7b4 	.word	0x1ffff7b4
 8007060:	1ffff7ac 	.word	0x1ffff7ac
 8007064:	20000140 	.word	0x20000140
 8007068:	1ffff7b0 	.word	0x1ffff7b0

0800706c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800706c:	b500      	push	{lr}
  if(pcdHandle->Instance==USB)
 800706e:	4b0d      	ldr	r3, [pc, #52]	@ (80070a4 <HAL_PCD_MspInit+0x38>)
 8007070:	6802      	ldr	r2, [r0, #0]
{
 8007072:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 8007074:	429a      	cmp	r2, r3
 8007076:	d001      	beq.n	800707c <HAL_PCD_MspInit+0x10>
    HAL_NVIC_EnableIRQ(USB_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007078:	b003      	add	sp, #12
 800707a:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 800707c:	2180      	movs	r1, #128	@ 0x80
 800707e:	4b0a      	ldr	r3, [pc, #40]	@ (80070a8 <HAL_PCD_MspInit+0x3c>)
 8007080:	0409      	lsls	r1, r1, #16
 8007082:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007084:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 8007086:	430a      	orrs	r2, r1
 8007088:	61da      	str	r2, [r3, #28]
 800708a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800708c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800708e:	400b      	ands	r3, r1
 8007090:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007092:	2100      	movs	r1, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8007094:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007096:	f7fb fb2d 	bl	80026f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800709a:	201f      	movs	r0, #31
 800709c:	f7fb fb54 	bl	8002748 <HAL_NVIC_EnableIRQ>
}
 80070a0:	e7ea      	b.n	8007078 <HAL_PCD_MspInit+0xc>
 80070a2:	46c0      	nop			@ (mov r8, r8)
 80070a4:	40005c00 	.word	0x40005c00
 80070a8:	40021000 	.word	0x40021000

080070ac <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070ac:	23a6      	movs	r3, #166	@ 0xa6
{
 80070ae:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	18c1      	adds	r1, r0, r3
 80070b4:	3340      	adds	r3, #64	@ 0x40
 80070b6:	58c0      	ldr	r0, [r0, r3]
 80070b8:	f7ff fa3a 	bl	8006530 <USBD_LL_SetupStage>
}
 80070bc:	bd10      	pop	{r4, pc}
 80070be:	46c0      	nop			@ (mov r8, r8)

080070c0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070c0:	008b      	lsls	r3, r1, #2
 80070c2:	185b      	adds	r3, r3, r1
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	18c3      	adds	r3, r0, r3
 80070c8:	3365      	adds	r3, #101	@ 0x65
 80070ca:	33ff      	adds	r3, #255	@ 0xff
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	23b6      	movs	r3, #182	@ 0xb6
{
 80070d0:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	58c0      	ldr	r0, [r0, r3]
 80070d6:	f7ff fa5d 	bl	8006594 <USBD_LL_DataOutStage>
}
 80070da:	bd10      	pop	{r4, pc}

080070dc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070dc:	008b      	lsls	r3, r1, #2
 80070de:	185b      	adds	r3, r3, r1
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	18c3      	adds	r3, r0, r3
 80070e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070e6:	23b6      	movs	r3, #182	@ 0xb6
{
 80070e8:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	58c0      	ldr	r0, [r0, r3]
 80070ee:	f7ff fa9d 	bl	800662c <USBD_LL_DataInStage>
}
 80070f2:	bd10      	pop	{r4, pc}

080070f4 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070f4:	23b6      	movs	r3, #182	@ 0xb6
{
 80070f6:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	58c0      	ldr	r0, [r0, r3]
 80070fc:	f7ff fb48 	bl	8006790 <USBD_LL_SOF>
}
 8007100:	bd10      	pop	{r4, pc}
 8007102:	46c0      	nop			@ (mov r8, r8)

08007104 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007104:	b570      	push	{r4, r5, r6, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007106:	7943      	ldrb	r3, [r0, #5]
{
 8007108:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800710a:	2b02      	cmp	r3, #2
 800710c:	d001      	beq.n	8007112 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800710e:	f7f9 fe79 	bl	8000e04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007112:	25b6      	movs	r5, #182	@ 0xb6
 8007114:	00ad      	lsls	r5, r5, #2
 8007116:	2101      	movs	r1, #1
 8007118:	5960      	ldr	r0, [r4, r5]
 800711a:	f7ff fb1d 	bl	8006758 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800711e:	5960      	ldr	r0, [r4, r5]
 8007120:	f7ff faea 	bl	80066f8 <USBD_LL_Reset>
}
 8007124:	bd70      	pop	{r4, r5, r6, pc}
 8007126:	46c0      	nop			@ (mov r8, r8)

08007128 <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007128:	23b6      	movs	r3, #182	@ 0xb6
{
 800712a:	b510      	push	{r4, lr}
 800712c:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	58c0      	ldr	r0, [r0, r3]
 8007132:	f7ff fb15 	bl	8006760 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007136:	7a63      	ldrb	r3, [r4, #9]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800713c:	2106      	movs	r1, #6
 800713e:	4a02      	ldr	r2, [pc, #8]	@ (8007148 <HAL_PCD_SuspendCallback+0x20>)
 8007140:	6913      	ldr	r3, [r2, #16]
 8007142:	430b      	orrs	r3, r1
 8007144:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007146:	bd10      	pop	{r4, pc}
 8007148:	e000ed00 	.word	0xe000ed00

0800714c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800714c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800714e:	7a43      	ldrb	r3, [r0, #9]
{
 8007150:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8007152:	2b00      	cmp	r3, #0
 8007154:	d105      	bne.n	8007162 <HAL_PCD_ResumeCallback+0x16>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007156:	23b6      	movs	r3, #182	@ 0xb6
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	58e0      	ldr	r0, [r4, r3]
 800715c:	f7ff fb0c 	bl	8006778 <USBD_LL_Resume>
}
 8007160:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007162:	2106      	movs	r1, #6
 8007164:	4a03      	ldr	r2, [pc, #12]	@ (8007174 <HAL_PCD_ResumeCallback+0x28>)
 8007166:	6913      	ldr	r3, [r2, #16]
 8007168:	438b      	bics	r3, r1
 800716a:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 800716c:	f7f9 f9b8 	bl	80004e0 <SystemClock_Config>
}
 8007170:	e7f1      	b.n	8007156 <HAL_PCD_ResumeCallback+0xa>
 8007172:	46c0      	nop			@ (mov r8, r8)
 8007174:	e000ed00 	.word	0xe000ed00

08007178 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8007178:	23b6      	movs	r3, #182	@ 0xb6
{
 800717a:	b570      	push	{r4, r5, r6, lr}
 800717c:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 800717e:	481d      	ldr	r0, [pc, #116]	@ (80071f4 <USBD_LL_Init+0x7c>)
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 8007184:	3b18      	subs	r3, #24
 8007186:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 8007188:	4b1b      	ldr	r3, [pc, #108]	@ (80071f8 <USBD_LL_Init+0x80>)
 800718a:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800718c:	2382      	movs	r3, #130	@ 0x82
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007192:	2302      	movs	r3, #2
 8007194:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007196:	2300      	movs	r3, #0
 8007198:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800719a:	8143      	strh	r3, [r0, #10]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800719c:	f7fc fa36 	bl	800360c <HAL_PCD_Init>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d123      	bne.n	80071ec <USBD_LL_Init+0x74>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80071a4:	25b0      	movs	r5, #176	@ 0xb0
 80071a6:	00ad      	lsls	r5, r5, #2
 80071a8:	5960      	ldr	r0, [r4, r5]
 80071aa:	2318      	movs	r3, #24
 80071ac:	2200      	movs	r2, #0
 80071ae:	2100      	movs	r1, #0
 80071b0:	f7fd fa1c 	bl	80045ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80071b4:	5960      	ldr	r0, [r4, r5]
 80071b6:	2358      	movs	r3, #88	@ 0x58
 80071b8:	2200      	movs	r2, #0
 80071ba:	2180      	movs	r1, #128	@ 0x80
 80071bc:	f7fd fa16 	bl	80045ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80071c0:	5960      	ldr	r0, [r4, r5]
 80071c2:	23c0      	movs	r3, #192	@ 0xc0
 80071c4:	2200      	movs	r2, #0
 80071c6:	2181      	movs	r1, #129	@ 0x81
 80071c8:	f7fd fa10 	bl	80045ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80071cc:	2388      	movs	r3, #136	@ 0x88
 80071ce:	5960      	ldr	r0, [r4, r5]
 80071d0:	2200      	movs	r2, #0
 80071d2:	2101      	movs	r1, #1
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	f7fd fa09 	bl	80045ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80071da:	2380      	movs	r3, #128	@ 0x80
 80071dc:	5960      	ldr	r0, [r4, r5]
 80071de:	2200      	movs	r2, #0
 80071e0:	2182      	movs	r1, #130	@ 0x82
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	f7fd fa02 	bl	80045ec <HAL_PCDEx_PMAConfig>
}
 80071e8:	2000      	movs	r0, #0
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 80071ec:	f7f9 fe0a 	bl	8000e04 <Error_Handler>
 80071f0:	e7d8      	b.n	80071a4 <USBD_LL_Init+0x2c>
 80071f2:	46c0      	nop			@ (mov r8, r8)
 80071f4:	20001328 	.word	0x20001328
 80071f8:	40005c00 	.word	0x40005c00

080071fc <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 80071fc:	23b0      	movs	r3, #176	@ 0xb0
 80071fe:	009b      	lsls	r3, r3, #2
{
 8007200:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007202:	58c0      	ldr	r0, [r0, r3]
 8007204:	f7fc fb0e 	bl	8003824 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007208:	2800      	cmp	r0, #0
 800720a:	d003      	beq.n	8007214 <USBD_LL_Start+0x18>
 800720c:	3802      	subs	r0, #2
 800720e:	1e43      	subs	r3, r0, #1
 8007210:	4198      	sbcs	r0, r3
 8007212:	3001      	adds	r0, #1
}
 8007214:	bd10      	pop	{r4, pc}
 8007216:	46c0      	nop			@ (mov r8, r8)

08007218 <USBD_LL_OpenEP>:
{
 8007218:	b510      	push	{r4, lr}
 800721a:	0014      	movs	r4, r2
 800721c:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800721e:	23b0      	movs	r3, #176	@ 0xb0
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	58c0      	ldr	r0, [r0, r3]
 8007224:	0023      	movs	r3, r4
 8007226:	f7fd f8c7 	bl	80043b8 <HAL_PCD_EP_Open>
  switch (hal_status)
 800722a:	2800      	cmp	r0, #0
 800722c:	d003      	beq.n	8007236 <USBD_LL_OpenEP+0x1e>
 800722e:	3802      	subs	r0, #2
 8007230:	1e43      	subs	r3, r0, #1
 8007232:	4198      	sbcs	r0, r3
 8007234:	3001      	adds	r0, #1
}
 8007236:	bd10      	pop	{r4, pc}

08007238 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007238:	23b0      	movs	r3, #176	@ 0xb0
 800723a:	009b      	lsls	r3, r3, #2
{
 800723c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800723e:	58c0      	ldr	r0, [r0, r3]
 8007240:	f7fd f8ec 	bl	800441c <HAL_PCD_EP_Close>
  switch (hal_status)
 8007244:	2800      	cmp	r0, #0
 8007246:	d003      	beq.n	8007250 <USBD_LL_CloseEP+0x18>
 8007248:	3802      	subs	r0, #2
 800724a:	1e43      	subs	r3, r0, #1
 800724c:	4198      	sbcs	r0, r3
 800724e:	3001      	adds	r0, #1
}
 8007250:	bd10      	pop	{r4, pc}
 8007252:	46c0      	nop			@ (mov r8, r8)

08007254 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007254:	23b0      	movs	r3, #176	@ 0xb0
 8007256:	009b      	lsls	r3, r3, #2
{
 8007258:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800725a:	58c0      	ldr	r0, [r0, r3]
 800725c:	f7fd f950 	bl	8004500 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8007260:	2800      	cmp	r0, #0
 8007262:	d003      	beq.n	800726c <USBD_LL_StallEP+0x18>
 8007264:	3802      	subs	r0, #2
 8007266:	1e43      	subs	r3, r0, #1
 8007268:	4198      	sbcs	r0, r3
 800726a:	3001      	adds	r0, #1
}
 800726c:	bd10      	pop	{r4, pc}
 800726e:	46c0      	nop			@ (mov r8, r8)

08007270 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007270:	23b0      	movs	r3, #176	@ 0xb0
 8007272:	009b      	lsls	r3, r3, #2
{
 8007274:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007276:	58c0      	ldr	r0, [r0, r3]
 8007278:	f7fd f97e 	bl	8004578 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800727c:	2800      	cmp	r0, #0
 800727e:	d003      	beq.n	8007288 <USBD_LL_ClearStallEP+0x18>
 8007280:	3802      	subs	r0, #2
 8007282:	1e43      	subs	r3, r0, #1
 8007284:	4198      	sbcs	r0, r3
 8007286:	3001      	adds	r0, #1
}
 8007288:	bd10      	pop	{r4, pc}
 800728a:	46c0      	nop			@ (mov r8, r8)

0800728c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800728c:	23b0      	movs	r3, #176	@ 0xb0
  if((ep_addr & 0x80) == 0x80)
 800728e:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8007294:	2a00      	cmp	r2, #0
 8007296:	db07      	blt.n	80072a8 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007298:	008a      	lsls	r2, r1, #2
 800729a:	1852      	adds	r2, r2, r1
 800729c:	00d2      	lsls	r2, r2, #3
 800729e:	189b      	adds	r3, r3, r2
 80072a0:	3353      	adds	r3, #83	@ 0x53
 80072a2:	33ff      	adds	r3, #255	@ 0xff
 80072a4:	7818      	ldrb	r0, [r3, #0]
}
 80072a6:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80072a8:	227f      	movs	r2, #127	@ 0x7f
 80072aa:	4011      	ands	r1, r2
 80072ac:	008a      	lsls	r2, r1, #2
 80072ae:	1852      	adds	r2, r2, r1
 80072b0:	00d2      	lsls	r2, r2, #3
 80072b2:	189b      	adds	r3, r3, r2
 80072b4:	7c98      	ldrb	r0, [r3, #18]
 80072b6:	e7f6      	b.n	80072a6 <USBD_LL_IsStallEP+0x1a>

080072b8 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80072b8:	23b0      	movs	r3, #176	@ 0xb0
 80072ba:	009b      	lsls	r3, r3, #2
{
 80072bc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80072be:	58c0      	ldr	r0, [r0, r3]
 80072c0:	f7fd f866 	bl	8004390 <HAL_PCD_SetAddress>
  switch (hal_status)
 80072c4:	2800      	cmp	r0, #0
 80072c6:	d003      	beq.n	80072d0 <USBD_LL_SetUSBAddress+0x18>
 80072c8:	3802      	subs	r0, #2
 80072ca:	1e43      	subs	r3, r0, #1
 80072cc:	4198      	sbcs	r0, r3
 80072ce:	3001      	adds	r0, #1
}
 80072d0:	bd10      	pop	{r4, pc}
 80072d2:	46c0      	nop			@ (mov r8, r8)

080072d4 <USBD_LL_Transmit>:
{
 80072d4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80072d6:	24b0      	movs	r4, #176	@ 0xb0
 80072d8:	00a4      	lsls	r4, r4, #2
 80072da:	5900      	ldr	r0, [r0, r4]
 80072dc:	f7fd f8f6 	bl	80044cc <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d003      	beq.n	80072ec <USBD_LL_Transmit+0x18>
 80072e4:	3802      	subs	r0, #2
 80072e6:	1e43      	subs	r3, r0, #1
 80072e8:	4198      	sbcs	r0, r3
 80072ea:	3001      	adds	r0, #1
}
 80072ec:	bd10      	pop	{r4, pc}
 80072ee:	46c0      	nop			@ (mov r8, r8)

080072f0 <USBD_LL_PrepareReceive>:
{
 80072f0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80072f2:	24b0      	movs	r4, #176	@ 0xb0
 80072f4:	00a4      	lsls	r4, r4, #2
 80072f6:	5900      	ldr	r0, [r0, r4]
 80072f8:	f7fd f8c0 	bl	800447c <HAL_PCD_EP_Receive>
  switch (hal_status)
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d003      	beq.n	8007308 <USBD_LL_PrepareReceive+0x18>
 8007300:	3802      	subs	r0, #2
 8007302:	1e43      	subs	r3, r0, #1
 8007304:	4198      	sbcs	r0, r3
 8007306:	3001      	adds	r0, #1
}
 8007308:	bd10      	pop	{r4, pc}
 800730a:	46c0      	nop			@ (mov r8, r8)

0800730c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800730c:	23b0      	movs	r3, #176	@ 0xb0
{
 800730e:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	58c0      	ldr	r0, [r0, r3]
 8007314:	f7fd f8d0 	bl	80044b8 <HAL_PCD_EP_GetRxCount>
}
 8007318:	bd10      	pop	{r4, pc}
 800731a:	46c0      	nop			@ (mov r8, r8)

0800731c <USBD_static_malloc>:
  return mem;
 800731c:	4800      	ldr	r0, [pc, #0]	@ (8007320 <USBD_static_malloc+0x4>)
}
 800731e:	4770      	bx	lr
 8007320:	20001108 	.word	0x20001108

08007324 <USBD_static_free>:
}
 8007324:	4770      	bx	lr
 8007326:	46c0      	nop			@ (mov r8, r8)

08007328 <atoi>:
 8007328:	b510      	push	{r4, lr}
 800732a:	220a      	movs	r2, #10
 800732c:	2100      	movs	r1, #0
 800732e:	f000 f88b 	bl	8007448 <strtol>
 8007332:	bd10      	pop	{r4, pc}

08007334 <_strtol_l.constprop.0>:
 8007334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007336:	b085      	sub	sp, #20
 8007338:	0017      	movs	r7, r2
 800733a:	001e      	movs	r6, r3
 800733c:	9003      	str	r0, [sp, #12]
 800733e:	9101      	str	r1, [sp, #4]
 8007340:	2b24      	cmp	r3, #36	@ 0x24
 8007342:	d844      	bhi.n	80073ce <_strtol_l.constprop.0+0x9a>
 8007344:	000c      	movs	r4, r1
 8007346:	2b01      	cmp	r3, #1
 8007348:	d041      	beq.n	80073ce <_strtol_l.constprop.0+0x9a>
 800734a:	4b3d      	ldr	r3, [pc, #244]	@ (8007440 <_strtol_l.constprop.0+0x10c>)
 800734c:	2208      	movs	r2, #8
 800734e:	469c      	mov	ip, r3
 8007350:	0023      	movs	r3, r4
 8007352:	4661      	mov	r1, ip
 8007354:	781d      	ldrb	r5, [r3, #0]
 8007356:	3401      	adds	r4, #1
 8007358:	5d48      	ldrb	r0, [r1, r5]
 800735a:	0001      	movs	r1, r0
 800735c:	4011      	ands	r1, r2
 800735e:	4210      	tst	r0, r2
 8007360:	d1f6      	bne.n	8007350 <_strtol_l.constprop.0+0x1c>
 8007362:	2d2d      	cmp	r5, #45	@ 0x2d
 8007364:	d13a      	bne.n	80073dc <_strtol_l.constprop.0+0xa8>
 8007366:	7825      	ldrb	r5, [r4, #0]
 8007368:	1c9c      	adds	r4, r3, #2
 800736a:	2301      	movs	r3, #1
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	2210      	movs	r2, #16
 8007370:	0033      	movs	r3, r6
 8007372:	4393      	bics	r3, r2
 8007374:	d109      	bne.n	800738a <_strtol_l.constprop.0+0x56>
 8007376:	2d30      	cmp	r5, #48	@ 0x30
 8007378:	d136      	bne.n	80073e8 <_strtol_l.constprop.0+0xb4>
 800737a:	2120      	movs	r1, #32
 800737c:	7823      	ldrb	r3, [r4, #0]
 800737e:	438b      	bics	r3, r1
 8007380:	2b58      	cmp	r3, #88	@ 0x58
 8007382:	d131      	bne.n	80073e8 <_strtol_l.constprop.0+0xb4>
 8007384:	0016      	movs	r6, r2
 8007386:	7865      	ldrb	r5, [r4, #1]
 8007388:	3402      	adds	r4, #2
 800738a:	4a2e      	ldr	r2, [pc, #184]	@ (8007444 <_strtol_l.constprop.0+0x110>)
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	4694      	mov	ip, r2
 8007390:	4463      	add	r3, ip
 8007392:	0031      	movs	r1, r6
 8007394:	0018      	movs	r0, r3
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	f7f8 ff4e 	bl	8000238 <__aeabi_uidivmod>
 800739c:	2200      	movs	r2, #0
 800739e:	4684      	mov	ip, r0
 80073a0:	0010      	movs	r0, r2
 80073a2:	002b      	movs	r3, r5
 80073a4:	3b30      	subs	r3, #48	@ 0x30
 80073a6:	2b09      	cmp	r3, #9
 80073a8:	d825      	bhi.n	80073f6 <_strtol_l.constprop.0+0xc2>
 80073aa:	001d      	movs	r5, r3
 80073ac:	42ae      	cmp	r6, r5
 80073ae:	dd31      	ble.n	8007414 <_strtol_l.constprop.0+0xe0>
 80073b0:	1c53      	adds	r3, r2, #1
 80073b2:	d009      	beq.n	80073c8 <_strtol_l.constprop.0+0x94>
 80073b4:	2201      	movs	r2, #1
 80073b6:	4252      	negs	r2, r2
 80073b8:	4584      	cmp	ip, r0
 80073ba:	d305      	bcc.n	80073c8 <_strtol_l.constprop.0+0x94>
 80073bc:	d101      	bne.n	80073c2 <_strtol_l.constprop.0+0x8e>
 80073be:	42a9      	cmp	r1, r5
 80073c0:	db25      	blt.n	800740e <_strtol_l.constprop.0+0xda>
 80073c2:	2201      	movs	r2, #1
 80073c4:	4370      	muls	r0, r6
 80073c6:	1828      	adds	r0, r5, r0
 80073c8:	7825      	ldrb	r5, [r4, #0]
 80073ca:	3401      	adds	r4, #1
 80073cc:	e7e9      	b.n	80073a2 <_strtol_l.constprop.0+0x6e>
 80073ce:	f000 fa2d 	bl	800782c <__errno>
 80073d2:	2316      	movs	r3, #22
 80073d4:	6003      	str	r3, [r0, #0]
 80073d6:	2000      	movs	r0, #0
 80073d8:	b005      	add	sp, #20
 80073da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073dc:	9100      	str	r1, [sp, #0]
 80073de:	2d2b      	cmp	r5, #43	@ 0x2b
 80073e0:	d1c5      	bne.n	800736e <_strtol_l.constprop.0+0x3a>
 80073e2:	7825      	ldrb	r5, [r4, #0]
 80073e4:	1c9c      	adds	r4, r3, #2
 80073e6:	e7c2      	b.n	800736e <_strtol_l.constprop.0+0x3a>
 80073e8:	2e00      	cmp	r6, #0
 80073ea:	d1ce      	bne.n	800738a <_strtol_l.constprop.0+0x56>
 80073ec:	3608      	adds	r6, #8
 80073ee:	2d30      	cmp	r5, #48	@ 0x30
 80073f0:	d0cb      	beq.n	800738a <_strtol_l.constprop.0+0x56>
 80073f2:	3602      	adds	r6, #2
 80073f4:	e7c9      	b.n	800738a <_strtol_l.constprop.0+0x56>
 80073f6:	002b      	movs	r3, r5
 80073f8:	3b41      	subs	r3, #65	@ 0x41
 80073fa:	2b19      	cmp	r3, #25
 80073fc:	d801      	bhi.n	8007402 <_strtol_l.constprop.0+0xce>
 80073fe:	3d37      	subs	r5, #55	@ 0x37
 8007400:	e7d4      	b.n	80073ac <_strtol_l.constprop.0+0x78>
 8007402:	002b      	movs	r3, r5
 8007404:	3b61      	subs	r3, #97	@ 0x61
 8007406:	2b19      	cmp	r3, #25
 8007408:	d804      	bhi.n	8007414 <_strtol_l.constprop.0+0xe0>
 800740a:	3d57      	subs	r5, #87	@ 0x57
 800740c:	e7ce      	b.n	80073ac <_strtol_l.constprop.0+0x78>
 800740e:	2201      	movs	r2, #1
 8007410:	4252      	negs	r2, r2
 8007412:	e7d9      	b.n	80073c8 <_strtol_l.constprop.0+0x94>
 8007414:	1c53      	adds	r3, r2, #1
 8007416:	d108      	bne.n	800742a <_strtol_l.constprop.0+0xf6>
 8007418:	2322      	movs	r3, #34	@ 0x22
 800741a:	9a03      	ldr	r2, [sp, #12]
 800741c:	9802      	ldr	r0, [sp, #8]
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	2f00      	cmp	r7, #0
 8007422:	d0d9      	beq.n	80073d8 <_strtol_l.constprop.0+0xa4>
 8007424:	1e63      	subs	r3, r4, #1
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	e007      	b.n	800743a <_strtol_l.constprop.0+0x106>
 800742a:	9b00      	ldr	r3, [sp, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d000      	beq.n	8007432 <_strtol_l.constprop.0+0xfe>
 8007430:	4240      	negs	r0, r0
 8007432:	2f00      	cmp	r7, #0
 8007434:	d0d0      	beq.n	80073d8 <_strtol_l.constprop.0+0xa4>
 8007436:	2a00      	cmp	r2, #0
 8007438:	d1f4      	bne.n	8007424 <_strtol_l.constprop.0+0xf0>
 800743a:	9b01      	ldr	r3, [sp, #4]
 800743c:	603b      	str	r3, [r7, #0]
 800743e:	e7cb      	b.n	80073d8 <_strtol_l.constprop.0+0xa4>
 8007440:	08008b13 	.word	0x08008b13
 8007444:	7fffffff 	.word	0x7fffffff

08007448 <strtol>:
 8007448:	b510      	push	{r4, lr}
 800744a:	4c04      	ldr	r4, [pc, #16]	@ (800745c <strtol+0x14>)
 800744c:	0013      	movs	r3, r2
 800744e:	000a      	movs	r2, r1
 8007450:	0001      	movs	r1, r0
 8007452:	6820      	ldr	r0, [r4, #0]
 8007454:	f7ff ff6e 	bl	8007334 <_strtol_l.constprop.0>
 8007458:	bd10      	pop	{r4, pc}
 800745a:	46c0      	nop			@ (mov r8, r8)
 800745c:	2000019c 	.word	0x2000019c

08007460 <std>:
 8007460:	2300      	movs	r3, #0
 8007462:	b510      	push	{r4, lr}
 8007464:	0004      	movs	r4, r0
 8007466:	6003      	str	r3, [r0, #0]
 8007468:	6043      	str	r3, [r0, #4]
 800746a:	6083      	str	r3, [r0, #8]
 800746c:	8181      	strh	r1, [r0, #12]
 800746e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007470:	81c2      	strh	r2, [r0, #14]
 8007472:	6103      	str	r3, [r0, #16]
 8007474:	6143      	str	r3, [r0, #20]
 8007476:	6183      	str	r3, [r0, #24]
 8007478:	0019      	movs	r1, r3
 800747a:	2208      	movs	r2, #8
 800747c:	305c      	adds	r0, #92	@ 0x5c
 800747e:	f000 f91f 	bl	80076c0 <memset>
 8007482:	4b0b      	ldr	r3, [pc, #44]	@ (80074b0 <std+0x50>)
 8007484:	6224      	str	r4, [r4, #32]
 8007486:	6263      	str	r3, [r4, #36]	@ 0x24
 8007488:	4b0a      	ldr	r3, [pc, #40]	@ (80074b4 <std+0x54>)
 800748a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800748c:	4b0a      	ldr	r3, [pc, #40]	@ (80074b8 <std+0x58>)
 800748e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007490:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <std+0x5c>)
 8007492:	6323      	str	r3, [r4, #48]	@ 0x30
 8007494:	4b0a      	ldr	r3, [pc, #40]	@ (80074c0 <std+0x60>)
 8007496:	429c      	cmp	r4, r3
 8007498:	d005      	beq.n	80074a6 <std+0x46>
 800749a:	4b0a      	ldr	r3, [pc, #40]	@ (80074c4 <std+0x64>)
 800749c:	429c      	cmp	r4, r3
 800749e:	d002      	beq.n	80074a6 <std+0x46>
 80074a0:	4b09      	ldr	r3, [pc, #36]	@ (80074c8 <std+0x68>)
 80074a2:	429c      	cmp	r4, r3
 80074a4:	d103      	bne.n	80074ae <std+0x4e>
 80074a6:	0020      	movs	r0, r4
 80074a8:	3058      	adds	r0, #88	@ 0x58
 80074aa:	f000 f9e9 	bl	8007880 <__retarget_lock_init_recursive>
 80074ae:	bd10      	pop	{r4, pc}
 80074b0:	08007629 	.word	0x08007629
 80074b4:	08007651 	.word	0x08007651
 80074b8:	08007689 	.word	0x08007689
 80074bc:	080076b5 	.word	0x080076b5
 80074c0:	20001604 	.word	0x20001604
 80074c4:	2000166c 	.word	0x2000166c
 80074c8:	200016d4 	.word	0x200016d4

080074cc <stdio_exit_handler>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4a03      	ldr	r2, [pc, #12]	@ (80074dc <stdio_exit_handler+0x10>)
 80074d0:	4903      	ldr	r1, [pc, #12]	@ (80074e0 <stdio_exit_handler+0x14>)
 80074d2:	4804      	ldr	r0, [pc, #16]	@ (80074e4 <stdio_exit_handler+0x18>)
 80074d4:	f000 f86c 	bl	80075b0 <_fwalk_sglue>
 80074d8:	bd10      	pop	{r4, pc}
 80074da:	46c0      	nop			@ (mov r8, r8)
 80074dc:	20000190 	.word	0x20000190
 80074e0:	080081b5 	.word	0x080081b5
 80074e4:	200001a0 	.word	0x200001a0

080074e8 <cleanup_stdio>:
 80074e8:	6841      	ldr	r1, [r0, #4]
 80074ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007518 <cleanup_stdio+0x30>)
 80074ec:	b510      	push	{r4, lr}
 80074ee:	0004      	movs	r4, r0
 80074f0:	4299      	cmp	r1, r3
 80074f2:	d001      	beq.n	80074f8 <cleanup_stdio+0x10>
 80074f4:	f000 fe5e 	bl	80081b4 <_fflush_r>
 80074f8:	68a1      	ldr	r1, [r4, #8]
 80074fa:	4b08      	ldr	r3, [pc, #32]	@ (800751c <cleanup_stdio+0x34>)
 80074fc:	4299      	cmp	r1, r3
 80074fe:	d002      	beq.n	8007506 <cleanup_stdio+0x1e>
 8007500:	0020      	movs	r0, r4
 8007502:	f000 fe57 	bl	80081b4 <_fflush_r>
 8007506:	68e1      	ldr	r1, [r4, #12]
 8007508:	4b05      	ldr	r3, [pc, #20]	@ (8007520 <cleanup_stdio+0x38>)
 800750a:	4299      	cmp	r1, r3
 800750c:	d002      	beq.n	8007514 <cleanup_stdio+0x2c>
 800750e:	0020      	movs	r0, r4
 8007510:	f000 fe50 	bl	80081b4 <_fflush_r>
 8007514:	bd10      	pop	{r4, pc}
 8007516:	46c0      	nop			@ (mov r8, r8)
 8007518:	20001604 	.word	0x20001604
 800751c:	2000166c 	.word	0x2000166c
 8007520:	200016d4 	.word	0x200016d4

08007524 <global_stdio_init.part.0>:
 8007524:	b510      	push	{r4, lr}
 8007526:	4b09      	ldr	r3, [pc, #36]	@ (800754c <global_stdio_init.part.0+0x28>)
 8007528:	4a09      	ldr	r2, [pc, #36]	@ (8007550 <global_stdio_init.part.0+0x2c>)
 800752a:	2104      	movs	r1, #4
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	4809      	ldr	r0, [pc, #36]	@ (8007554 <global_stdio_init.part.0+0x30>)
 8007530:	2200      	movs	r2, #0
 8007532:	f7ff ff95 	bl	8007460 <std>
 8007536:	2201      	movs	r2, #1
 8007538:	2109      	movs	r1, #9
 800753a:	4807      	ldr	r0, [pc, #28]	@ (8007558 <global_stdio_init.part.0+0x34>)
 800753c:	f7ff ff90 	bl	8007460 <std>
 8007540:	2202      	movs	r2, #2
 8007542:	2112      	movs	r1, #18
 8007544:	4805      	ldr	r0, [pc, #20]	@ (800755c <global_stdio_init.part.0+0x38>)
 8007546:	f7ff ff8b 	bl	8007460 <std>
 800754a:	bd10      	pop	{r4, pc}
 800754c:	2000173c 	.word	0x2000173c
 8007550:	080074cd 	.word	0x080074cd
 8007554:	20001604 	.word	0x20001604
 8007558:	2000166c 	.word	0x2000166c
 800755c:	200016d4 	.word	0x200016d4

08007560 <__sfp_lock_acquire>:
 8007560:	b510      	push	{r4, lr}
 8007562:	4802      	ldr	r0, [pc, #8]	@ (800756c <__sfp_lock_acquire+0xc>)
 8007564:	f000 f98d 	bl	8007882 <__retarget_lock_acquire_recursive>
 8007568:	bd10      	pop	{r4, pc}
 800756a:	46c0      	nop			@ (mov r8, r8)
 800756c:	20001745 	.word	0x20001745

08007570 <__sfp_lock_release>:
 8007570:	b510      	push	{r4, lr}
 8007572:	4802      	ldr	r0, [pc, #8]	@ (800757c <__sfp_lock_release+0xc>)
 8007574:	f000 f986 	bl	8007884 <__retarget_lock_release_recursive>
 8007578:	bd10      	pop	{r4, pc}
 800757a:	46c0      	nop			@ (mov r8, r8)
 800757c:	20001745 	.word	0x20001745

08007580 <__sinit>:
 8007580:	b510      	push	{r4, lr}
 8007582:	0004      	movs	r4, r0
 8007584:	f7ff ffec 	bl	8007560 <__sfp_lock_acquire>
 8007588:	6a23      	ldr	r3, [r4, #32]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <__sinit+0x14>
 800758e:	f7ff ffef 	bl	8007570 <__sfp_lock_release>
 8007592:	bd10      	pop	{r4, pc}
 8007594:	4b04      	ldr	r3, [pc, #16]	@ (80075a8 <__sinit+0x28>)
 8007596:	6223      	str	r3, [r4, #32]
 8007598:	4b04      	ldr	r3, [pc, #16]	@ (80075ac <__sinit+0x2c>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1f6      	bne.n	800758e <__sinit+0xe>
 80075a0:	f7ff ffc0 	bl	8007524 <global_stdio_init.part.0>
 80075a4:	e7f3      	b.n	800758e <__sinit+0xe>
 80075a6:	46c0      	nop			@ (mov r8, r8)
 80075a8:	080074e9 	.word	0x080074e9
 80075ac:	2000173c 	.word	0x2000173c

080075b0 <_fwalk_sglue>:
 80075b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075b2:	0014      	movs	r4, r2
 80075b4:	2600      	movs	r6, #0
 80075b6:	9000      	str	r0, [sp, #0]
 80075b8:	9101      	str	r1, [sp, #4]
 80075ba:	68a5      	ldr	r5, [r4, #8]
 80075bc:	6867      	ldr	r7, [r4, #4]
 80075be:	3f01      	subs	r7, #1
 80075c0:	d504      	bpl.n	80075cc <_fwalk_sglue+0x1c>
 80075c2:	6824      	ldr	r4, [r4, #0]
 80075c4:	2c00      	cmp	r4, #0
 80075c6:	d1f8      	bne.n	80075ba <_fwalk_sglue+0xa>
 80075c8:	0030      	movs	r0, r6
 80075ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075cc:	89ab      	ldrh	r3, [r5, #12]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d908      	bls.n	80075e4 <_fwalk_sglue+0x34>
 80075d2:	220e      	movs	r2, #14
 80075d4:	5eab      	ldrsh	r3, [r5, r2]
 80075d6:	3301      	adds	r3, #1
 80075d8:	d004      	beq.n	80075e4 <_fwalk_sglue+0x34>
 80075da:	0029      	movs	r1, r5
 80075dc:	9800      	ldr	r0, [sp, #0]
 80075de:	9b01      	ldr	r3, [sp, #4]
 80075e0:	4798      	blx	r3
 80075e2:	4306      	orrs	r6, r0
 80075e4:	3568      	adds	r5, #104	@ 0x68
 80075e6:	e7ea      	b.n	80075be <_fwalk_sglue+0xe>

080075e8 <siprintf>:
 80075e8:	b40e      	push	{r1, r2, r3}
 80075ea:	b500      	push	{lr}
 80075ec:	490b      	ldr	r1, [pc, #44]	@ (800761c <siprintf+0x34>)
 80075ee:	b09c      	sub	sp, #112	@ 0x70
 80075f0:	ab1d      	add	r3, sp, #116	@ 0x74
 80075f2:	9002      	str	r0, [sp, #8]
 80075f4:	9006      	str	r0, [sp, #24]
 80075f6:	9107      	str	r1, [sp, #28]
 80075f8:	9104      	str	r1, [sp, #16]
 80075fa:	4809      	ldr	r0, [pc, #36]	@ (8007620 <siprintf+0x38>)
 80075fc:	4909      	ldr	r1, [pc, #36]	@ (8007624 <siprintf+0x3c>)
 80075fe:	cb04      	ldmia	r3!, {r2}
 8007600:	9105      	str	r1, [sp, #20]
 8007602:	6800      	ldr	r0, [r0, #0]
 8007604:	a902      	add	r1, sp, #8
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	f000 fad2 	bl	8007bb0 <_svfiprintf_r>
 800760c:	2200      	movs	r2, #0
 800760e:	9b02      	ldr	r3, [sp, #8]
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	b01c      	add	sp, #112	@ 0x70
 8007614:	bc08      	pop	{r3}
 8007616:	b003      	add	sp, #12
 8007618:	4718      	bx	r3
 800761a:	46c0      	nop			@ (mov r8, r8)
 800761c:	7fffffff 	.word	0x7fffffff
 8007620:	2000019c 	.word	0x2000019c
 8007624:	ffff0208 	.word	0xffff0208

08007628 <__sread>:
 8007628:	b570      	push	{r4, r5, r6, lr}
 800762a:	000c      	movs	r4, r1
 800762c:	250e      	movs	r5, #14
 800762e:	5f49      	ldrsh	r1, [r1, r5]
 8007630:	f000 f8d4 	bl	80077dc <_read_r>
 8007634:	2800      	cmp	r0, #0
 8007636:	db03      	blt.n	8007640 <__sread+0x18>
 8007638:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800763a:	181b      	adds	r3, r3, r0
 800763c:	6563      	str	r3, [r4, #84]	@ 0x54
 800763e:	bd70      	pop	{r4, r5, r6, pc}
 8007640:	89a3      	ldrh	r3, [r4, #12]
 8007642:	4a02      	ldr	r2, [pc, #8]	@ (800764c <__sread+0x24>)
 8007644:	4013      	ands	r3, r2
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	e7f9      	b.n	800763e <__sread+0x16>
 800764a:	46c0      	nop			@ (mov r8, r8)
 800764c:	ffffefff 	.word	0xffffefff

08007650 <__swrite>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	001f      	movs	r7, r3
 8007654:	898b      	ldrh	r3, [r1, #12]
 8007656:	0005      	movs	r5, r0
 8007658:	000c      	movs	r4, r1
 800765a:	0016      	movs	r6, r2
 800765c:	05db      	lsls	r3, r3, #23
 800765e:	d505      	bpl.n	800766c <__swrite+0x1c>
 8007660:	230e      	movs	r3, #14
 8007662:	5ec9      	ldrsh	r1, [r1, r3]
 8007664:	2200      	movs	r2, #0
 8007666:	2302      	movs	r3, #2
 8007668:	f000 f8a4 	bl	80077b4 <_lseek_r>
 800766c:	89a3      	ldrh	r3, [r4, #12]
 800766e:	4a05      	ldr	r2, [pc, #20]	@ (8007684 <__swrite+0x34>)
 8007670:	0028      	movs	r0, r5
 8007672:	4013      	ands	r3, r2
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	0032      	movs	r2, r6
 8007678:	230e      	movs	r3, #14
 800767a:	5ee1      	ldrsh	r1, [r4, r3]
 800767c:	003b      	movs	r3, r7
 800767e:	f000 f8c1 	bl	8007804 <_write_r>
 8007682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007684:	ffffefff 	.word	0xffffefff

08007688 <__sseek>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	000c      	movs	r4, r1
 800768c:	250e      	movs	r5, #14
 800768e:	5f49      	ldrsh	r1, [r1, r5]
 8007690:	f000 f890 	bl	80077b4 <_lseek_r>
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	1c42      	adds	r2, r0, #1
 8007698:	d103      	bne.n	80076a2 <__sseek+0x1a>
 800769a:	4a05      	ldr	r2, [pc, #20]	@ (80076b0 <__sseek+0x28>)
 800769c:	4013      	ands	r3, r2
 800769e:	81a3      	strh	r3, [r4, #12]
 80076a0:	bd70      	pop	{r4, r5, r6, pc}
 80076a2:	2280      	movs	r2, #128	@ 0x80
 80076a4:	0152      	lsls	r2, r2, #5
 80076a6:	4313      	orrs	r3, r2
 80076a8:	81a3      	strh	r3, [r4, #12]
 80076aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80076ac:	e7f8      	b.n	80076a0 <__sseek+0x18>
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	ffffefff 	.word	0xffffefff

080076b4 <__sclose>:
 80076b4:	b510      	push	{r4, lr}
 80076b6:	230e      	movs	r3, #14
 80076b8:	5ec9      	ldrsh	r1, [r1, r3]
 80076ba:	f000 f869 	bl	8007790 <_close_r>
 80076be:	bd10      	pop	{r4, pc}

080076c0 <memset>:
 80076c0:	0003      	movs	r3, r0
 80076c2:	1882      	adds	r2, r0, r2
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d100      	bne.n	80076ca <memset+0xa>
 80076c8:	4770      	bx	lr
 80076ca:	7019      	strb	r1, [r3, #0]
 80076cc:	3301      	adds	r3, #1
 80076ce:	e7f9      	b.n	80076c4 <memset+0x4>

080076d0 <strtok>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	4b16      	ldr	r3, [pc, #88]	@ (800772c <strtok+0x5c>)
 80076d4:	0005      	movs	r5, r0
 80076d6:	681f      	ldr	r7, [r3, #0]
 80076d8:	000e      	movs	r6, r1
 80076da:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80076dc:	2c00      	cmp	r4, #0
 80076de:	d11d      	bne.n	800771c <strtok+0x4c>
 80076e0:	2050      	movs	r0, #80	@ 0x50
 80076e2:	f000 f949 	bl	8007978 <malloc>
 80076e6:	1e02      	subs	r2, r0, #0
 80076e8:	6478      	str	r0, [r7, #68]	@ 0x44
 80076ea:	d104      	bne.n	80076f6 <strtok+0x26>
 80076ec:	215b      	movs	r1, #91	@ 0x5b
 80076ee:	4b10      	ldr	r3, [pc, #64]	@ (8007730 <strtok+0x60>)
 80076f0:	4810      	ldr	r0, [pc, #64]	@ (8007734 <strtok+0x64>)
 80076f2:	f000 f8d9 	bl	80078a8 <__assert_func>
 80076f6:	6004      	str	r4, [r0, #0]
 80076f8:	6044      	str	r4, [r0, #4]
 80076fa:	6084      	str	r4, [r0, #8]
 80076fc:	60c4      	str	r4, [r0, #12]
 80076fe:	6104      	str	r4, [r0, #16]
 8007700:	6144      	str	r4, [r0, #20]
 8007702:	6184      	str	r4, [r0, #24]
 8007704:	6284      	str	r4, [r0, #40]	@ 0x28
 8007706:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8007708:	6304      	str	r4, [r0, #48]	@ 0x30
 800770a:	6344      	str	r4, [r0, #52]	@ 0x34
 800770c:	6384      	str	r4, [r0, #56]	@ 0x38
 800770e:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8007710:	6404      	str	r4, [r0, #64]	@ 0x40
 8007712:	6444      	str	r4, [r0, #68]	@ 0x44
 8007714:	6484      	str	r4, [r0, #72]	@ 0x48
 8007716:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8007718:	7704      	strb	r4, [r0, #28]
 800771a:	6244      	str	r4, [r0, #36]	@ 0x24
 800771c:	0031      	movs	r1, r6
 800771e:	0028      	movs	r0, r5
 8007720:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007722:	2301      	movs	r3, #1
 8007724:	f000 f808 	bl	8007738 <__strtok_r>
 8007728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800772a:	46c0      	nop			@ (mov r8, r8)
 800772c:	2000019c 	.word	0x2000019c
 8007730:	08008c13 	.word	0x08008c13
 8007734:	08008c2a 	.word	0x08008c2a

08007738 <__strtok_r>:
 8007738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800773a:	1e04      	subs	r4, r0, #0
 800773c:	d102      	bne.n	8007744 <__strtok_r+0xc>
 800773e:	6814      	ldr	r4, [r2, #0]
 8007740:	2c00      	cmp	r4, #0
 8007742:	d009      	beq.n	8007758 <__strtok_r+0x20>
 8007744:	0020      	movs	r0, r4
 8007746:	000e      	movs	r6, r1
 8007748:	7805      	ldrb	r5, [r0, #0]
 800774a:	3401      	adds	r4, #1
 800774c:	7837      	ldrb	r7, [r6, #0]
 800774e:	2f00      	cmp	r7, #0
 8007750:	d104      	bne.n	800775c <__strtok_r+0x24>
 8007752:	2d00      	cmp	r5, #0
 8007754:	d10d      	bne.n	8007772 <__strtok_r+0x3a>
 8007756:	6015      	str	r5, [r2, #0]
 8007758:	2000      	movs	r0, #0
 800775a:	e006      	b.n	800776a <__strtok_r+0x32>
 800775c:	3601      	adds	r6, #1
 800775e:	42bd      	cmp	r5, r7
 8007760:	d1f4      	bne.n	800774c <__strtok_r+0x14>
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ee      	bne.n	8007744 <__strtok_r+0xc>
 8007766:	6014      	str	r4, [r2, #0]
 8007768:	7003      	strb	r3, [r0, #0]
 800776a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776c:	3301      	adds	r3, #1
 800776e:	2d00      	cmp	r5, #0
 8007770:	d102      	bne.n	8007778 <__strtok_r+0x40>
 8007772:	000b      	movs	r3, r1
 8007774:	7826      	ldrb	r6, [r4, #0]
 8007776:	3401      	adds	r4, #1
 8007778:	781d      	ldrb	r5, [r3, #0]
 800777a:	42ae      	cmp	r6, r5
 800777c:	d1f6      	bne.n	800776c <__strtok_r+0x34>
 800777e:	2300      	movs	r3, #0
 8007780:	001d      	movs	r5, r3
 8007782:	429e      	cmp	r6, r3
 8007784:	d002      	beq.n	800778c <__strtok_r+0x54>
 8007786:	0023      	movs	r3, r4
 8007788:	1e61      	subs	r1, r4, #1
 800778a:	700d      	strb	r5, [r1, #0]
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	e7ec      	b.n	800776a <__strtok_r+0x32>

08007790 <_close_r>:
 8007790:	2300      	movs	r3, #0
 8007792:	b570      	push	{r4, r5, r6, lr}
 8007794:	4d06      	ldr	r5, [pc, #24]	@ (80077b0 <_close_r+0x20>)
 8007796:	0004      	movs	r4, r0
 8007798:	0008      	movs	r0, r1
 800779a:	602b      	str	r3, [r5, #0]
 800779c:	f7fa fcb0 	bl	8002100 <_close>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d103      	bne.n	80077ac <_close_r+0x1c>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d000      	beq.n	80077ac <_close_r+0x1c>
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	bd70      	pop	{r4, r5, r6, pc}
 80077ae:	46c0      	nop			@ (mov r8, r8)
 80077b0:	20001740 	.word	0x20001740

080077b4 <_lseek_r>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	0004      	movs	r4, r0
 80077b8:	0008      	movs	r0, r1
 80077ba:	0011      	movs	r1, r2
 80077bc:	001a      	movs	r2, r3
 80077be:	2300      	movs	r3, #0
 80077c0:	4d05      	ldr	r5, [pc, #20]	@ (80077d8 <_lseek_r+0x24>)
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	f7fa fca8 	bl	8002118 <_lseek>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d103      	bne.n	80077d4 <_lseek_r+0x20>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d000      	beq.n	80077d4 <_lseek_r+0x20>
 80077d2:	6023      	str	r3, [r4, #0]
 80077d4:	bd70      	pop	{r4, r5, r6, pc}
 80077d6:	46c0      	nop			@ (mov r8, r8)
 80077d8:	20001740 	.word	0x20001740

080077dc <_read_r>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	0004      	movs	r4, r0
 80077e0:	0008      	movs	r0, r1
 80077e2:	0011      	movs	r1, r2
 80077e4:	001a      	movs	r2, r3
 80077e6:	2300      	movs	r3, #0
 80077e8:	4d05      	ldr	r5, [pc, #20]	@ (8007800 <_read_r+0x24>)
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	f7fa fc6c 	bl	80020c8 <_read>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d103      	bne.n	80077fc <_read_r+0x20>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d000      	beq.n	80077fc <_read_r+0x20>
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
 80077fe:	46c0      	nop			@ (mov r8, r8)
 8007800:	20001740 	.word	0x20001740

08007804 <_write_r>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	0004      	movs	r4, r0
 8007808:	0008      	movs	r0, r1
 800780a:	0011      	movs	r1, r2
 800780c:	001a      	movs	r2, r3
 800780e:	2300      	movs	r3, #0
 8007810:	4d05      	ldr	r5, [pc, #20]	@ (8007828 <_write_r+0x24>)
 8007812:	602b      	str	r3, [r5, #0]
 8007814:	f7fa fc66 	bl	80020e4 <_write>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d103      	bne.n	8007824 <_write_r+0x20>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d000      	beq.n	8007824 <_write_r+0x20>
 8007822:	6023      	str	r3, [r4, #0]
 8007824:	bd70      	pop	{r4, r5, r6, pc}
 8007826:	46c0      	nop			@ (mov r8, r8)
 8007828:	20001740 	.word	0x20001740

0800782c <__errno>:
 800782c:	4b01      	ldr	r3, [pc, #4]	@ (8007834 <__errno+0x8>)
 800782e:	6818      	ldr	r0, [r3, #0]
 8007830:	4770      	bx	lr
 8007832:	46c0      	nop			@ (mov r8, r8)
 8007834:	2000019c 	.word	0x2000019c

08007838 <__libc_init_array>:
 8007838:	b570      	push	{r4, r5, r6, lr}
 800783a:	2600      	movs	r6, #0
 800783c:	4c0c      	ldr	r4, [pc, #48]	@ (8007870 <__libc_init_array+0x38>)
 800783e:	4d0d      	ldr	r5, [pc, #52]	@ (8007874 <__libc_init_array+0x3c>)
 8007840:	1b64      	subs	r4, r4, r5
 8007842:	10a4      	asrs	r4, r4, #2
 8007844:	42a6      	cmp	r6, r4
 8007846:	d109      	bne.n	800785c <__libc_init_array+0x24>
 8007848:	2600      	movs	r6, #0
 800784a:	f001 f81b 	bl	8008884 <_init>
 800784e:	4c0a      	ldr	r4, [pc, #40]	@ (8007878 <__libc_init_array+0x40>)
 8007850:	4d0a      	ldr	r5, [pc, #40]	@ (800787c <__libc_init_array+0x44>)
 8007852:	1b64      	subs	r4, r4, r5
 8007854:	10a4      	asrs	r4, r4, #2
 8007856:	42a6      	cmp	r6, r4
 8007858:	d105      	bne.n	8007866 <__libc_init_array+0x2e>
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	00b3      	lsls	r3, r6, #2
 800785e:	58eb      	ldr	r3, [r5, r3]
 8007860:	4798      	blx	r3
 8007862:	3601      	adds	r6, #1
 8007864:	e7ee      	b.n	8007844 <__libc_init_array+0xc>
 8007866:	00b3      	lsls	r3, r6, #2
 8007868:	58eb      	ldr	r3, [r5, r3]
 800786a:	4798      	blx	r3
 800786c:	3601      	adds	r6, #1
 800786e:	e7f2      	b.n	8007856 <__libc_init_array+0x1e>
 8007870:	08008cf4 	.word	0x08008cf4
 8007874:	08008cf4 	.word	0x08008cf4
 8007878:	08008cf8 	.word	0x08008cf8
 800787c:	08008cf4 	.word	0x08008cf4

08007880 <__retarget_lock_init_recursive>:
 8007880:	4770      	bx	lr

08007882 <__retarget_lock_acquire_recursive>:
 8007882:	4770      	bx	lr

08007884 <__retarget_lock_release_recursive>:
 8007884:	4770      	bx	lr

08007886 <strcpy>:
 8007886:	0003      	movs	r3, r0
 8007888:	780a      	ldrb	r2, [r1, #0]
 800788a:	3101      	adds	r1, #1
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	3301      	adds	r3, #1
 8007890:	2a00      	cmp	r2, #0
 8007892:	d1f9      	bne.n	8007888 <strcpy+0x2>
 8007894:	4770      	bx	lr

08007896 <memcpy>:
 8007896:	2300      	movs	r3, #0
 8007898:	b510      	push	{r4, lr}
 800789a:	429a      	cmp	r2, r3
 800789c:	d100      	bne.n	80078a0 <memcpy+0xa>
 800789e:	bd10      	pop	{r4, pc}
 80078a0:	5ccc      	ldrb	r4, [r1, r3]
 80078a2:	54c4      	strb	r4, [r0, r3]
 80078a4:	3301      	adds	r3, #1
 80078a6:	e7f8      	b.n	800789a <memcpy+0x4>

080078a8 <__assert_func>:
 80078a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80078aa:	0014      	movs	r4, r2
 80078ac:	001a      	movs	r2, r3
 80078ae:	4b09      	ldr	r3, [pc, #36]	@ (80078d4 <__assert_func+0x2c>)
 80078b0:	0005      	movs	r5, r0
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	000e      	movs	r6, r1
 80078b6:	68d8      	ldr	r0, [r3, #12]
 80078b8:	4b07      	ldr	r3, [pc, #28]	@ (80078d8 <__assert_func+0x30>)
 80078ba:	2c00      	cmp	r4, #0
 80078bc:	d101      	bne.n	80078c2 <__assert_func+0x1a>
 80078be:	4b07      	ldr	r3, [pc, #28]	@ (80078dc <__assert_func+0x34>)
 80078c0:	001c      	movs	r4, r3
 80078c2:	4907      	ldr	r1, [pc, #28]	@ (80078e0 <__assert_func+0x38>)
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	9402      	str	r4, [sp, #8]
 80078c8:	002b      	movs	r3, r5
 80078ca:	9600      	str	r6, [sp, #0]
 80078cc:	f000 fc9e 	bl	800820c <fiprintf>
 80078d0:	f000 fcdd 	bl	800828e <abort>
 80078d4:	2000019c 	.word	0x2000019c
 80078d8:	08008c84 	.word	0x08008c84
 80078dc:	08008cbf 	.word	0x08008cbf
 80078e0:	08008c91 	.word	0x08008c91

080078e4 <_free_r>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	0005      	movs	r5, r0
 80078e8:	1e0c      	subs	r4, r1, #0
 80078ea:	d010      	beq.n	800790e <_free_r+0x2a>
 80078ec:	3c04      	subs	r4, #4
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	da00      	bge.n	80078f6 <_free_r+0x12>
 80078f4:	18e4      	adds	r4, r4, r3
 80078f6:	0028      	movs	r0, r5
 80078f8:	f000 f8ea 	bl	8007ad0 <__malloc_lock>
 80078fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007974 <_free_r+0x90>)
 80078fe:	6813      	ldr	r3, [r2, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d105      	bne.n	8007910 <_free_r+0x2c>
 8007904:	6063      	str	r3, [r4, #4]
 8007906:	6014      	str	r4, [r2, #0]
 8007908:	0028      	movs	r0, r5
 800790a:	f000 f8e9 	bl	8007ae0 <__malloc_unlock>
 800790e:	bd70      	pop	{r4, r5, r6, pc}
 8007910:	42a3      	cmp	r3, r4
 8007912:	d908      	bls.n	8007926 <_free_r+0x42>
 8007914:	6820      	ldr	r0, [r4, #0]
 8007916:	1821      	adds	r1, r4, r0
 8007918:	428b      	cmp	r3, r1
 800791a:	d1f3      	bne.n	8007904 <_free_r+0x20>
 800791c:	6819      	ldr	r1, [r3, #0]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	1809      	adds	r1, r1, r0
 8007922:	6021      	str	r1, [r4, #0]
 8007924:	e7ee      	b.n	8007904 <_free_r+0x20>
 8007926:	001a      	movs	r2, r3
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <_free_r+0x4e>
 800792e:	42a3      	cmp	r3, r4
 8007930:	d9f9      	bls.n	8007926 <_free_r+0x42>
 8007932:	6811      	ldr	r1, [r2, #0]
 8007934:	1850      	adds	r0, r2, r1
 8007936:	42a0      	cmp	r0, r4
 8007938:	d10b      	bne.n	8007952 <_free_r+0x6e>
 800793a:	6820      	ldr	r0, [r4, #0]
 800793c:	1809      	adds	r1, r1, r0
 800793e:	1850      	adds	r0, r2, r1
 8007940:	6011      	str	r1, [r2, #0]
 8007942:	4283      	cmp	r3, r0
 8007944:	d1e0      	bne.n	8007908 <_free_r+0x24>
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	1841      	adds	r1, r0, r1
 800794c:	6011      	str	r1, [r2, #0]
 800794e:	6053      	str	r3, [r2, #4]
 8007950:	e7da      	b.n	8007908 <_free_r+0x24>
 8007952:	42a0      	cmp	r0, r4
 8007954:	d902      	bls.n	800795c <_free_r+0x78>
 8007956:	230c      	movs	r3, #12
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	e7d5      	b.n	8007908 <_free_r+0x24>
 800795c:	6820      	ldr	r0, [r4, #0]
 800795e:	1821      	adds	r1, r4, r0
 8007960:	428b      	cmp	r3, r1
 8007962:	d103      	bne.n	800796c <_free_r+0x88>
 8007964:	6819      	ldr	r1, [r3, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	1809      	adds	r1, r1, r0
 800796a:	6021      	str	r1, [r4, #0]
 800796c:	6063      	str	r3, [r4, #4]
 800796e:	6054      	str	r4, [r2, #4]
 8007970:	e7ca      	b.n	8007908 <_free_r+0x24>
 8007972:	46c0      	nop			@ (mov r8, r8)
 8007974:	2000174c 	.word	0x2000174c

08007978 <malloc>:
 8007978:	b510      	push	{r4, lr}
 800797a:	4b03      	ldr	r3, [pc, #12]	@ (8007988 <malloc+0x10>)
 800797c:	0001      	movs	r1, r0
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	f000 f826 	bl	80079d0 <_malloc_r>
 8007984:	bd10      	pop	{r4, pc}
 8007986:	46c0      	nop			@ (mov r8, r8)
 8007988:	2000019c 	.word	0x2000019c

0800798c <sbrk_aligned>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4e0f      	ldr	r6, [pc, #60]	@ (80079cc <sbrk_aligned+0x40>)
 8007990:	000d      	movs	r5, r1
 8007992:	6831      	ldr	r1, [r6, #0]
 8007994:	0004      	movs	r4, r0
 8007996:	2900      	cmp	r1, #0
 8007998:	d102      	bne.n	80079a0 <sbrk_aligned+0x14>
 800799a:	f000 fc5b 	bl	8008254 <_sbrk_r>
 800799e:	6030      	str	r0, [r6, #0]
 80079a0:	0029      	movs	r1, r5
 80079a2:	0020      	movs	r0, r4
 80079a4:	f000 fc56 	bl	8008254 <_sbrk_r>
 80079a8:	1c43      	adds	r3, r0, #1
 80079aa:	d103      	bne.n	80079b4 <sbrk_aligned+0x28>
 80079ac:	2501      	movs	r5, #1
 80079ae:	426d      	negs	r5, r5
 80079b0:	0028      	movs	r0, r5
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	2303      	movs	r3, #3
 80079b6:	1cc5      	adds	r5, r0, #3
 80079b8:	439d      	bics	r5, r3
 80079ba:	42a8      	cmp	r0, r5
 80079bc:	d0f8      	beq.n	80079b0 <sbrk_aligned+0x24>
 80079be:	1a29      	subs	r1, r5, r0
 80079c0:	0020      	movs	r0, r4
 80079c2:	f000 fc47 	bl	8008254 <_sbrk_r>
 80079c6:	3001      	adds	r0, #1
 80079c8:	d1f2      	bne.n	80079b0 <sbrk_aligned+0x24>
 80079ca:	e7ef      	b.n	80079ac <sbrk_aligned+0x20>
 80079cc:	20001748 	.word	0x20001748

080079d0 <_malloc_r>:
 80079d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079d2:	2203      	movs	r2, #3
 80079d4:	1ccb      	adds	r3, r1, #3
 80079d6:	4393      	bics	r3, r2
 80079d8:	3308      	adds	r3, #8
 80079da:	0005      	movs	r5, r0
 80079dc:	001f      	movs	r7, r3
 80079de:	2b0c      	cmp	r3, #12
 80079e0:	d234      	bcs.n	8007a4c <_malloc_r+0x7c>
 80079e2:	270c      	movs	r7, #12
 80079e4:	42b9      	cmp	r1, r7
 80079e6:	d833      	bhi.n	8007a50 <_malloc_r+0x80>
 80079e8:	0028      	movs	r0, r5
 80079ea:	f000 f871 	bl	8007ad0 <__malloc_lock>
 80079ee:	4e37      	ldr	r6, [pc, #220]	@ (8007acc <_malloc_r+0xfc>)
 80079f0:	6833      	ldr	r3, [r6, #0]
 80079f2:	001c      	movs	r4, r3
 80079f4:	2c00      	cmp	r4, #0
 80079f6:	d12f      	bne.n	8007a58 <_malloc_r+0x88>
 80079f8:	0039      	movs	r1, r7
 80079fa:	0028      	movs	r0, r5
 80079fc:	f7ff ffc6 	bl	800798c <sbrk_aligned>
 8007a00:	0004      	movs	r4, r0
 8007a02:	1c43      	adds	r3, r0, #1
 8007a04:	d15f      	bne.n	8007ac6 <_malloc_r+0xf6>
 8007a06:	6834      	ldr	r4, [r6, #0]
 8007a08:	9400      	str	r4, [sp, #0]
 8007a0a:	9b00      	ldr	r3, [sp, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d14a      	bne.n	8007aa6 <_malloc_r+0xd6>
 8007a10:	2c00      	cmp	r4, #0
 8007a12:	d052      	beq.n	8007aba <_malloc_r+0xea>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	0028      	movs	r0, r5
 8007a18:	18e3      	adds	r3, r4, r3
 8007a1a:	9900      	ldr	r1, [sp, #0]
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	f000 fc19 	bl	8008254 <_sbrk_r>
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	4283      	cmp	r3, r0
 8007a26:	d148      	bne.n	8007aba <_malloc_r+0xea>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	0028      	movs	r0, r5
 8007a2c:	1aff      	subs	r7, r7, r3
 8007a2e:	0039      	movs	r1, r7
 8007a30:	f7ff ffac 	bl	800798c <sbrk_aligned>
 8007a34:	3001      	adds	r0, #1
 8007a36:	d040      	beq.n	8007aba <_malloc_r+0xea>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	19db      	adds	r3, r3, r7
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	6833      	ldr	r3, [r6, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	d133      	bne.n	8007aae <_malloc_r+0xde>
 8007a46:	9b00      	ldr	r3, [sp, #0]
 8007a48:	6033      	str	r3, [r6, #0]
 8007a4a:	e019      	b.n	8007a80 <_malloc_r+0xb0>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	dac9      	bge.n	80079e4 <_malloc_r+0x14>
 8007a50:	230c      	movs	r3, #12
 8007a52:	602b      	str	r3, [r5, #0]
 8007a54:	2000      	movs	r0, #0
 8007a56:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a58:	6821      	ldr	r1, [r4, #0]
 8007a5a:	1bc9      	subs	r1, r1, r7
 8007a5c:	d420      	bmi.n	8007aa0 <_malloc_r+0xd0>
 8007a5e:	290b      	cmp	r1, #11
 8007a60:	d90a      	bls.n	8007a78 <_malloc_r+0xa8>
 8007a62:	19e2      	adds	r2, r4, r7
 8007a64:	6027      	str	r7, [r4, #0]
 8007a66:	42a3      	cmp	r3, r4
 8007a68:	d104      	bne.n	8007a74 <_malloc_r+0xa4>
 8007a6a:	6032      	str	r2, [r6, #0]
 8007a6c:	6863      	ldr	r3, [r4, #4]
 8007a6e:	6011      	str	r1, [r2, #0]
 8007a70:	6053      	str	r3, [r2, #4]
 8007a72:	e005      	b.n	8007a80 <_malloc_r+0xb0>
 8007a74:	605a      	str	r2, [r3, #4]
 8007a76:	e7f9      	b.n	8007a6c <_malloc_r+0x9c>
 8007a78:	6862      	ldr	r2, [r4, #4]
 8007a7a:	42a3      	cmp	r3, r4
 8007a7c:	d10e      	bne.n	8007a9c <_malloc_r+0xcc>
 8007a7e:	6032      	str	r2, [r6, #0]
 8007a80:	0028      	movs	r0, r5
 8007a82:	f000 f82d 	bl	8007ae0 <__malloc_unlock>
 8007a86:	0020      	movs	r0, r4
 8007a88:	2207      	movs	r2, #7
 8007a8a:	300b      	adds	r0, #11
 8007a8c:	1d23      	adds	r3, r4, #4
 8007a8e:	4390      	bics	r0, r2
 8007a90:	1ac2      	subs	r2, r0, r3
 8007a92:	4298      	cmp	r0, r3
 8007a94:	d0df      	beq.n	8007a56 <_malloc_r+0x86>
 8007a96:	1a1b      	subs	r3, r3, r0
 8007a98:	50a3      	str	r3, [r4, r2]
 8007a9a:	e7dc      	b.n	8007a56 <_malloc_r+0x86>
 8007a9c:	605a      	str	r2, [r3, #4]
 8007a9e:	e7ef      	b.n	8007a80 <_malloc_r+0xb0>
 8007aa0:	0023      	movs	r3, r4
 8007aa2:	6864      	ldr	r4, [r4, #4]
 8007aa4:	e7a6      	b.n	80079f4 <_malloc_r+0x24>
 8007aa6:	9c00      	ldr	r4, [sp, #0]
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	e7ad      	b.n	8007a0a <_malloc_r+0x3a>
 8007aae:	001a      	movs	r2, r3
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	42a3      	cmp	r3, r4
 8007ab4:	d1fb      	bne.n	8007aae <_malloc_r+0xde>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e7da      	b.n	8007a70 <_malloc_r+0xa0>
 8007aba:	230c      	movs	r3, #12
 8007abc:	0028      	movs	r0, r5
 8007abe:	602b      	str	r3, [r5, #0]
 8007ac0:	f000 f80e 	bl	8007ae0 <__malloc_unlock>
 8007ac4:	e7c6      	b.n	8007a54 <_malloc_r+0x84>
 8007ac6:	6007      	str	r7, [r0, #0]
 8007ac8:	e7da      	b.n	8007a80 <_malloc_r+0xb0>
 8007aca:	46c0      	nop			@ (mov r8, r8)
 8007acc:	2000174c 	.word	0x2000174c

08007ad0 <__malloc_lock>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4802      	ldr	r0, [pc, #8]	@ (8007adc <__malloc_lock+0xc>)
 8007ad4:	f7ff fed5 	bl	8007882 <__retarget_lock_acquire_recursive>
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	46c0      	nop			@ (mov r8, r8)
 8007adc:	20001744 	.word	0x20001744

08007ae0 <__malloc_unlock>:
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	4802      	ldr	r0, [pc, #8]	@ (8007aec <__malloc_unlock+0xc>)
 8007ae4:	f7ff fece 	bl	8007884 <__retarget_lock_release_recursive>
 8007ae8:	bd10      	pop	{r4, pc}
 8007aea:	46c0      	nop			@ (mov r8, r8)
 8007aec:	20001744 	.word	0x20001744

08007af0 <__ssputs_r>:
 8007af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007af2:	688e      	ldr	r6, [r1, #8]
 8007af4:	b085      	sub	sp, #20
 8007af6:	001f      	movs	r7, r3
 8007af8:	000c      	movs	r4, r1
 8007afa:	680b      	ldr	r3, [r1, #0]
 8007afc:	9002      	str	r0, [sp, #8]
 8007afe:	9203      	str	r2, [sp, #12]
 8007b00:	42be      	cmp	r6, r7
 8007b02:	d830      	bhi.n	8007b66 <__ssputs_r+0x76>
 8007b04:	210c      	movs	r1, #12
 8007b06:	5e62      	ldrsh	r2, [r4, r1]
 8007b08:	2190      	movs	r1, #144	@ 0x90
 8007b0a:	00c9      	lsls	r1, r1, #3
 8007b0c:	420a      	tst	r2, r1
 8007b0e:	d028      	beq.n	8007b62 <__ssputs_r+0x72>
 8007b10:	2003      	movs	r0, #3
 8007b12:	6921      	ldr	r1, [r4, #16]
 8007b14:	1a5b      	subs	r3, r3, r1
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	6963      	ldr	r3, [r4, #20]
 8007b1a:	4343      	muls	r3, r0
 8007b1c:	9801      	ldr	r0, [sp, #4]
 8007b1e:	0fdd      	lsrs	r5, r3, #31
 8007b20:	18ed      	adds	r5, r5, r3
 8007b22:	1c7b      	adds	r3, r7, #1
 8007b24:	181b      	adds	r3, r3, r0
 8007b26:	106d      	asrs	r5, r5, #1
 8007b28:	42ab      	cmp	r3, r5
 8007b2a:	d900      	bls.n	8007b2e <__ssputs_r+0x3e>
 8007b2c:	001d      	movs	r5, r3
 8007b2e:	0552      	lsls	r2, r2, #21
 8007b30:	d528      	bpl.n	8007b84 <__ssputs_r+0x94>
 8007b32:	0029      	movs	r1, r5
 8007b34:	9802      	ldr	r0, [sp, #8]
 8007b36:	f7ff ff4b 	bl	80079d0 <_malloc_r>
 8007b3a:	1e06      	subs	r6, r0, #0
 8007b3c:	d02c      	beq.n	8007b98 <__ssputs_r+0xa8>
 8007b3e:	9a01      	ldr	r2, [sp, #4]
 8007b40:	6921      	ldr	r1, [r4, #16]
 8007b42:	f7ff fea8 	bl	8007896 <memcpy>
 8007b46:	89a2      	ldrh	r2, [r4, #12]
 8007b48:	4b18      	ldr	r3, [pc, #96]	@ (8007bac <__ssputs_r+0xbc>)
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	2380      	movs	r3, #128	@ 0x80
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	81a3      	strh	r3, [r4, #12]
 8007b52:	9b01      	ldr	r3, [sp, #4]
 8007b54:	6126      	str	r6, [r4, #16]
 8007b56:	18f6      	adds	r6, r6, r3
 8007b58:	6026      	str	r6, [r4, #0]
 8007b5a:	003e      	movs	r6, r7
 8007b5c:	6165      	str	r5, [r4, #20]
 8007b5e:	1aed      	subs	r5, r5, r3
 8007b60:	60a5      	str	r5, [r4, #8]
 8007b62:	42be      	cmp	r6, r7
 8007b64:	d900      	bls.n	8007b68 <__ssputs_r+0x78>
 8007b66:	003e      	movs	r6, r7
 8007b68:	0032      	movs	r2, r6
 8007b6a:	9903      	ldr	r1, [sp, #12]
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	f000 fb5d 	bl	800822c <memmove>
 8007b72:	2000      	movs	r0, #0
 8007b74:	68a3      	ldr	r3, [r4, #8]
 8007b76:	1b9b      	subs	r3, r3, r6
 8007b78:	60a3      	str	r3, [r4, #8]
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	199b      	adds	r3, r3, r6
 8007b7e:	6023      	str	r3, [r4, #0]
 8007b80:	b005      	add	sp, #20
 8007b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b84:	002a      	movs	r2, r5
 8007b86:	9802      	ldr	r0, [sp, #8]
 8007b88:	f000 fb88 	bl	800829c <_realloc_r>
 8007b8c:	1e06      	subs	r6, r0, #0
 8007b8e:	d1e0      	bne.n	8007b52 <__ssputs_r+0x62>
 8007b90:	6921      	ldr	r1, [r4, #16]
 8007b92:	9802      	ldr	r0, [sp, #8]
 8007b94:	f7ff fea6 	bl	80078e4 <_free_r>
 8007b98:	230c      	movs	r3, #12
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	9a02      	ldr	r2, [sp, #8]
 8007b9e:	4240      	negs	r0, r0
 8007ba0:	6013      	str	r3, [r2, #0]
 8007ba2:	89a2      	ldrh	r2, [r4, #12]
 8007ba4:	3334      	adds	r3, #52	@ 0x34
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	81a3      	strh	r3, [r4, #12]
 8007baa:	e7e9      	b.n	8007b80 <__ssputs_r+0x90>
 8007bac:	fffffb7f 	.word	0xfffffb7f

08007bb0 <_svfiprintf_r>:
 8007bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bb2:	b0a1      	sub	sp, #132	@ 0x84
 8007bb4:	9003      	str	r0, [sp, #12]
 8007bb6:	001d      	movs	r5, r3
 8007bb8:	898b      	ldrh	r3, [r1, #12]
 8007bba:	000f      	movs	r7, r1
 8007bbc:	0016      	movs	r6, r2
 8007bbe:	061b      	lsls	r3, r3, #24
 8007bc0:	d511      	bpl.n	8007be6 <_svfiprintf_r+0x36>
 8007bc2:	690b      	ldr	r3, [r1, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10e      	bne.n	8007be6 <_svfiprintf_r+0x36>
 8007bc8:	2140      	movs	r1, #64	@ 0x40
 8007bca:	f7ff ff01 	bl	80079d0 <_malloc_r>
 8007bce:	6038      	str	r0, [r7, #0]
 8007bd0:	6138      	str	r0, [r7, #16]
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	d105      	bne.n	8007be2 <_svfiprintf_r+0x32>
 8007bd6:	230c      	movs	r3, #12
 8007bd8:	9a03      	ldr	r2, [sp, #12]
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	2001      	movs	r0, #1
 8007bde:	4240      	negs	r0, r0
 8007be0:	e0cf      	b.n	8007d82 <_svfiprintf_r+0x1d2>
 8007be2:	2340      	movs	r3, #64	@ 0x40
 8007be4:	617b      	str	r3, [r7, #20]
 8007be6:	2300      	movs	r3, #0
 8007be8:	ac08      	add	r4, sp, #32
 8007bea:	6163      	str	r3, [r4, #20]
 8007bec:	3320      	adds	r3, #32
 8007bee:	7663      	strb	r3, [r4, #25]
 8007bf0:	3310      	adds	r3, #16
 8007bf2:	76a3      	strb	r3, [r4, #26]
 8007bf4:	9507      	str	r5, [sp, #28]
 8007bf6:	0035      	movs	r5, r6
 8007bf8:	782b      	ldrb	r3, [r5, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <_svfiprintf_r+0x52>
 8007bfe:	2b25      	cmp	r3, #37	@ 0x25
 8007c00:	d148      	bne.n	8007c94 <_svfiprintf_r+0xe4>
 8007c02:	1bab      	subs	r3, r5, r6
 8007c04:	9305      	str	r3, [sp, #20]
 8007c06:	42b5      	cmp	r5, r6
 8007c08:	d00b      	beq.n	8007c22 <_svfiprintf_r+0x72>
 8007c0a:	0032      	movs	r2, r6
 8007c0c:	0039      	movs	r1, r7
 8007c0e:	9803      	ldr	r0, [sp, #12]
 8007c10:	f7ff ff6e 	bl	8007af0 <__ssputs_r>
 8007c14:	3001      	adds	r0, #1
 8007c16:	d100      	bne.n	8007c1a <_svfiprintf_r+0x6a>
 8007c18:	e0ae      	b.n	8007d78 <_svfiprintf_r+0x1c8>
 8007c1a:	6963      	ldr	r3, [r4, #20]
 8007c1c:	9a05      	ldr	r2, [sp, #20]
 8007c1e:	189b      	adds	r3, r3, r2
 8007c20:	6163      	str	r3, [r4, #20]
 8007c22:	782b      	ldrb	r3, [r5, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d100      	bne.n	8007c2a <_svfiprintf_r+0x7a>
 8007c28:	e0a6      	b.n	8007d78 <_svfiprintf_r+0x1c8>
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4252      	negs	r2, r2
 8007c30:	6062      	str	r2, [r4, #4]
 8007c32:	a904      	add	r1, sp, #16
 8007c34:	3254      	adds	r2, #84	@ 0x54
 8007c36:	1852      	adds	r2, r2, r1
 8007c38:	1c6e      	adds	r6, r5, #1
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	60e3      	str	r3, [r4, #12]
 8007c3e:	60a3      	str	r3, [r4, #8]
 8007c40:	7013      	strb	r3, [r2, #0]
 8007c42:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007c44:	4b54      	ldr	r3, [pc, #336]	@ (8007d98 <_svfiprintf_r+0x1e8>)
 8007c46:	2205      	movs	r2, #5
 8007c48:	0018      	movs	r0, r3
 8007c4a:	7831      	ldrb	r1, [r6, #0]
 8007c4c:	9305      	str	r3, [sp, #20]
 8007c4e:	f000 fb13 	bl	8008278 <memchr>
 8007c52:	1c75      	adds	r5, r6, #1
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d11f      	bne.n	8007c98 <_svfiprintf_r+0xe8>
 8007c58:	6822      	ldr	r2, [r4, #0]
 8007c5a:	06d3      	lsls	r3, r2, #27
 8007c5c:	d504      	bpl.n	8007c68 <_svfiprintf_r+0xb8>
 8007c5e:	2353      	movs	r3, #83	@ 0x53
 8007c60:	a904      	add	r1, sp, #16
 8007c62:	185b      	adds	r3, r3, r1
 8007c64:	2120      	movs	r1, #32
 8007c66:	7019      	strb	r1, [r3, #0]
 8007c68:	0713      	lsls	r3, r2, #28
 8007c6a:	d504      	bpl.n	8007c76 <_svfiprintf_r+0xc6>
 8007c6c:	2353      	movs	r3, #83	@ 0x53
 8007c6e:	a904      	add	r1, sp, #16
 8007c70:	185b      	adds	r3, r3, r1
 8007c72:	212b      	movs	r1, #43	@ 0x2b
 8007c74:	7019      	strb	r1, [r3, #0]
 8007c76:	7833      	ldrb	r3, [r6, #0]
 8007c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c7a:	d016      	beq.n	8007caa <_svfiprintf_r+0xfa>
 8007c7c:	0035      	movs	r5, r6
 8007c7e:	2100      	movs	r1, #0
 8007c80:	200a      	movs	r0, #10
 8007c82:	68e3      	ldr	r3, [r4, #12]
 8007c84:	782a      	ldrb	r2, [r5, #0]
 8007c86:	1c6e      	adds	r6, r5, #1
 8007c88:	3a30      	subs	r2, #48	@ 0x30
 8007c8a:	2a09      	cmp	r2, #9
 8007c8c:	d950      	bls.n	8007d30 <_svfiprintf_r+0x180>
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d111      	bne.n	8007cb6 <_svfiprintf_r+0x106>
 8007c92:	e017      	b.n	8007cc4 <_svfiprintf_r+0x114>
 8007c94:	3501      	adds	r5, #1
 8007c96:	e7af      	b.n	8007bf8 <_svfiprintf_r+0x48>
 8007c98:	9b05      	ldr	r3, [sp, #20]
 8007c9a:	6822      	ldr	r2, [r4, #0]
 8007c9c:	1ac0      	subs	r0, r0, r3
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4083      	lsls	r3, r0
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	002e      	movs	r6, r5
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	e7cc      	b.n	8007c44 <_svfiprintf_r+0x94>
 8007caa:	9b07      	ldr	r3, [sp, #28]
 8007cac:	1d19      	adds	r1, r3, #4
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	9107      	str	r1, [sp, #28]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	db01      	blt.n	8007cba <_svfiprintf_r+0x10a>
 8007cb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cb8:	e004      	b.n	8007cc4 <_svfiprintf_r+0x114>
 8007cba:	425b      	negs	r3, r3
 8007cbc:	60e3      	str	r3, [r4, #12]
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	6023      	str	r3, [r4, #0]
 8007cc4:	782b      	ldrb	r3, [r5, #0]
 8007cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cc8:	d10c      	bne.n	8007ce4 <_svfiprintf_r+0x134>
 8007cca:	786b      	ldrb	r3, [r5, #1]
 8007ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cce:	d134      	bne.n	8007d3a <_svfiprintf_r+0x18a>
 8007cd0:	9b07      	ldr	r3, [sp, #28]
 8007cd2:	3502      	adds	r5, #2
 8007cd4:	1d1a      	adds	r2, r3, #4
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	9207      	str	r2, [sp, #28]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	da01      	bge.n	8007ce2 <_svfiprintf_r+0x132>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	425b      	negs	r3, r3
 8007ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ce4:	4e2d      	ldr	r6, [pc, #180]	@ (8007d9c <_svfiprintf_r+0x1ec>)
 8007ce6:	2203      	movs	r2, #3
 8007ce8:	0030      	movs	r0, r6
 8007cea:	7829      	ldrb	r1, [r5, #0]
 8007cec:	f000 fac4 	bl	8008278 <memchr>
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d006      	beq.n	8007d02 <_svfiprintf_r+0x152>
 8007cf4:	2340      	movs	r3, #64	@ 0x40
 8007cf6:	1b80      	subs	r0, r0, r6
 8007cf8:	4083      	lsls	r3, r0
 8007cfa:	6822      	ldr	r2, [r4, #0]
 8007cfc:	3501      	adds	r5, #1
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	7829      	ldrb	r1, [r5, #0]
 8007d04:	2206      	movs	r2, #6
 8007d06:	4826      	ldr	r0, [pc, #152]	@ (8007da0 <_svfiprintf_r+0x1f0>)
 8007d08:	1c6e      	adds	r6, r5, #1
 8007d0a:	7621      	strb	r1, [r4, #24]
 8007d0c:	f000 fab4 	bl	8008278 <memchr>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d038      	beq.n	8007d86 <_svfiprintf_r+0x1d6>
 8007d14:	4b23      	ldr	r3, [pc, #140]	@ (8007da4 <_svfiprintf_r+0x1f4>)
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d122      	bne.n	8007d60 <_svfiprintf_r+0x1b0>
 8007d1a:	2207      	movs	r2, #7
 8007d1c:	9b07      	ldr	r3, [sp, #28]
 8007d1e:	3307      	adds	r3, #7
 8007d20:	4393      	bics	r3, r2
 8007d22:	3308      	adds	r3, #8
 8007d24:	9307      	str	r3, [sp, #28]
 8007d26:	6963      	ldr	r3, [r4, #20]
 8007d28:	9a04      	ldr	r2, [sp, #16]
 8007d2a:	189b      	adds	r3, r3, r2
 8007d2c:	6163      	str	r3, [r4, #20]
 8007d2e:	e762      	b.n	8007bf6 <_svfiprintf_r+0x46>
 8007d30:	4343      	muls	r3, r0
 8007d32:	0035      	movs	r5, r6
 8007d34:	2101      	movs	r1, #1
 8007d36:	189b      	adds	r3, r3, r2
 8007d38:	e7a4      	b.n	8007c84 <_svfiprintf_r+0xd4>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	200a      	movs	r0, #10
 8007d3e:	0019      	movs	r1, r3
 8007d40:	3501      	adds	r5, #1
 8007d42:	6063      	str	r3, [r4, #4]
 8007d44:	782a      	ldrb	r2, [r5, #0]
 8007d46:	1c6e      	adds	r6, r5, #1
 8007d48:	3a30      	subs	r2, #48	@ 0x30
 8007d4a:	2a09      	cmp	r2, #9
 8007d4c:	d903      	bls.n	8007d56 <_svfiprintf_r+0x1a6>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0c8      	beq.n	8007ce4 <_svfiprintf_r+0x134>
 8007d52:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d54:	e7c6      	b.n	8007ce4 <_svfiprintf_r+0x134>
 8007d56:	4341      	muls	r1, r0
 8007d58:	0035      	movs	r5, r6
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	1889      	adds	r1, r1, r2
 8007d5e:	e7f1      	b.n	8007d44 <_svfiprintf_r+0x194>
 8007d60:	aa07      	add	r2, sp, #28
 8007d62:	9200      	str	r2, [sp, #0]
 8007d64:	0021      	movs	r1, r4
 8007d66:	003a      	movs	r2, r7
 8007d68:	4b0f      	ldr	r3, [pc, #60]	@ (8007da8 <_svfiprintf_r+0x1f8>)
 8007d6a:	9803      	ldr	r0, [sp, #12]
 8007d6c:	e000      	b.n	8007d70 <_svfiprintf_r+0x1c0>
 8007d6e:	bf00      	nop
 8007d70:	9004      	str	r0, [sp, #16]
 8007d72:	9b04      	ldr	r3, [sp, #16]
 8007d74:	3301      	adds	r3, #1
 8007d76:	d1d6      	bne.n	8007d26 <_svfiprintf_r+0x176>
 8007d78:	89bb      	ldrh	r3, [r7, #12]
 8007d7a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007d7c:	065b      	lsls	r3, r3, #25
 8007d7e:	d500      	bpl.n	8007d82 <_svfiprintf_r+0x1d2>
 8007d80:	e72c      	b.n	8007bdc <_svfiprintf_r+0x2c>
 8007d82:	b021      	add	sp, #132	@ 0x84
 8007d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d86:	aa07      	add	r2, sp, #28
 8007d88:	9200      	str	r2, [sp, #0]
 8007d8a:	0021      	movs	r1, r4
 8007d8c:	003a      	movs	r2, r7
 8007d8e:	4b06      	ldr	r3, [pc, #24]	@ (8007da8 <_svfiprintf_r+0x1f8>)
 8007d90:	9803      	ldr	r0, [sp, #12]
 8007d92:	f000 f87b 	bl	8007e8c <_printf_i>
 8007d96:	e7eb      	b.n	8007d70 <_svfiprintf_r+0x1c0>
 8007d98:	08008cc0 	.word	0x08008cc0
 8007d9c:	08008cc6 	.word	0x08008cc6
 8007da0:	08008cca 	.word	0x08008cca
 8007da4:	00000000 	.word	0x00000000
 8007da8:	08007af1 	.word	0x08007af1

08007dac <_printf_common>:
 8007dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dae:	0016      	movs	r6, r2
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	688a      	ldr	r2, [r1, #8]
 8007db4:	690b      	ldr	r3, [r1, #16]
 8007db6:	000c      	movs	r4, r1
 8007db8:	9000      	str	r0, [sp, #0]
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	da00      	bge.n	8007dc0 <_printf_common+0x14>
 8007dbe:	0013      	movs	r3, r2
 8007dc0:	0022      	movs	r2, r4
 8007dc2:	6033      	str	r3, [r6, #0]
 8007dc4:	3243      	adds	r2, #67	@ 0x43
 8007dc6:	7812      	ldrb	r2, [r2, #0]
 8007dc8:	2a00      	cmp	r2, #0
 8007dca:	d001      	beq.n	8007dd0 <_printf_common+0x24>
 8007dcc:	3301      	adds	r3, #1
 8007dce:	6033      	str	r3, [r6, #0]
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	069b      	lsls	r3, r3, #26
 8007dd4:	d502      	bpl.n	8007ddc <_printf_common+0x30>
 8007dd6:	6833      	ldr	r3, [r6, #0]
 8007dd8:	3302      	adds	r3, #2
 8007dda:	6033      	str	r3, [r6, #0]
 8007ddc:	6822      	ldr	r2, [r4, #0]
 8007dde:	2306      	movs	r3, #6
 8007de0:	0015      	movs	r5, r2
 8007de2:	401d      	ands	r5, r3
 8007de4:	421a      	tst	r2, r3
 8007de6:	d027      	beq.n	8007e38 <_printf_common+0x8c>
 8007de8:	0023      	movs	r3, r4
 8007dea:	3343      	adds	r3, #67	@ 0x43
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	1e5a      	subs	r2, r3, #1
 8007df0:	4193      	sbcs	r3, r2
 8007df2:	6822      	ldr	r2, [r4, #0]
 8007df4:	0692      	lsls	r2, r2, #26
 8007df6:	d430      	bmi.n	8007e5a <_printf_common+0xae>
 8007df8:	0022      	movs	r2, r4
 8007dfa:	9901      	ldr	r1, [sp, #4]
 8007dfc:	9800      	ldr	r0, [sp, #0]
 8007dfe:	9d08      	ldr	r5, [sp, #32]
 8007e00:	3243      	adds	r2, #67	@ 0x43
 8007e02:	47a8      	blx	r5
 8007e04:	3001      	adds	r0, #1
 8007e06:	d025      	beq.n	8007e54 <_printf_common+0xa8>
 8007e08:	2206      	movs	r2, #6
 8007e0a:	6823      	ldr	r3, [r4, #0]
 8007e0c:	2500      	movs	r5, #0
 8007e0e:	4013      	ands	r3, r2
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d105      	bne.n	8007e20 <_printf_common+0x74>
 8007e14:	6833      	ldr	r3, [r6, #0]
 8007e16:	68e5      	ldr	r5, [r4, #12]
 8007e18:	1aed      	subs	r5, r5, r3
 8007e1a:	43eb      	mvns	r3, r5
 8007e1c:	17db      	asrs	r3, r3, #31
 8007e1e:	401d      	ands	r5, r3
 8007e20:	68a3      	ldr	r3, [r4, #8]
 8007e22:	6922      	ldr	r2, [r4, #16]
 8007e24:	4293      	cmp	r3, r2
 8007e26:	dd01      	ble.n	8007e2c <_printf_common+0x80>
 8007e28:	1a9b      	subs	r3, r3, r2
 8007e2a:	18ed      	adds	r5, r5, r3
 8007e2c:	2600      	movs	r6, #0
 8007e2e:	42b5      	cmp	r5, r6
 8007e30:	d120      	bne.n	8007e74 <_printf_common+0xc8>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e010      	b.n	8007e58 <_printf_common+0xac>
 8007e36:	3501      	adds	r5, #1
 8007e38:	68e3      	ldr	r3, [r4, #12]
 8007e3a:	6832      	ldr	r2, [r6, #0]
 8007e3c:	1a9b      	subs	r3, r3, r2
 8007e3e:	42ab      	cmp	r3, r5
 8007e40:	ddd2      	ble.n	8007de8 <_printf_common+0x3c>
 8007e42:	0022      	movs	r2, r4
 8007e44:	2301      	movs	r3, #1
 8007e46:	9901      	ldr	r1, [sp, #4]
 8007e48:	9800      	ldr	r0, [sp, #0]
 8007e4a:	9f08      	ldr	r7, [sp, #32]
 8007e4c:	3219      	adds	r2, #25
 8007e4e:	47b8      	blx	r7
 8007e50:	3001      	adds	r0, #1
 8007e52:	d1f0      	bne.n	8007e36 <_printf_common+0x8a>
 8007e54:	2001      	movs	r0, #1
 8007e56:	4240      	negs	r0, r0
 8007e58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e5a:	2030      	movs	r0, #48	@ 0x30
 8007e5c:	18e1      	adds	r1, r4, r3
 8007e5e:	3143      	adds	r1, #67	@ 0x43
 8007e60:	7008      	strb	r0, [r1, #0]
 8007e62:	0021      	movs	r1, r4
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	3145      	adds	r1, #69	@ 0x45
 8007e68:	7809      	ldrb	r1, [r1, #0]
 8007e6a:	18a2      	adds	r2, r4, r2
 8007e6c:	3243      	adds	r2, #67	@ 0x43
 8007e6e:	3302      	adds	r3, #2
 8007e70:	7011      	strb	r1, [r2, #0]
 8007e72:	e7c1      	b.n	8007df8 <_printf_common+0x4c>
 8007e74:	0022      	movs	r2, r4
 8007e76:	2301      	movs	r3, #1
 8007e78:	9901      	ldr	r1, [sp, #4]
 8007e7a:	9800      	ldr	r0, [sp, #0]
 8007e7c:	9f08      	ldr	r7, [sp, #32]
 8007e7e:	321a      	adds	r2, #26
 8007e80:	47b8      	blx	r7
 8007e82:	3001      	adds	r0, #1
 8007e84:	d0e6      	beq.n	8007e54 <_printf_common+0xa8>
 8007e86:	3601      	adds	r6, #1
 8007e88:	e7d1      	b.n	8007e2e <_printf_common+0x82>
	...

08007e8c <_printf_i>:
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	b08b      	sub	sp, #44	@ 0x2c
 8007e90:	9206      	str	r2, [sp, #24]
 8007e92:	000a      	movs	r2, r1
 8007e94:	3243      	adds	r2, #67	@ 0x43
 8007e96:	9307      	str	r3, [sp, #28]
 8007e98:	9005      	str	r0, [sp, #20]
 8007e9a:	9203      	str	r2, [sp, #12]
 8007e9c:	7e0a      	ldrb	r2, [r1, #24]
 8007e9e:	000c      	movs	r4, r1
 8007ea0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ea2:	2a78      	cmp	r2, #120	@ 0x78
 8007ea4:	d809      	bhi.n	8007eba <_printf_i+0x2e>
 8007ea6:	2a62      	cmp	r2, #98	@ 0x62
 8007ea8:	d80b      	bhi.n	8007ec2 <_printf_i+0x36>
 8007eaa:	2a00      	cmp	r2, #0
 8007eac:	d100      	bne.n	8007eb0 <_printf_i+0x24>
 8007eae:	e0bc      	b.n	800802a <_printf_i+0x19e>
 8007eb0:	497b      	ldr	r1, [pc, #492]	@ (80080a0 <_printf_i+0x214>)
 8007eb2:	9104      	str	r1, [sp, #16]
 8007eb4:	2a58      	cmp	r2, #88	@ 0x58
 8007eb6:	d100      	bne.n	8007eba <_printf_i+0x2e>
 8007eb8:	e090      	b.n	8007fdc <_printf_i+0x150>
 8007eba:	0025      	movs	r5, r4
 8007ebc:	3542      	adds	r5, #66	@ 0x42
 8007ebe:	702a      	strb	r2, [r5, #0]
 8007ec0:	e022      	b.n	8007f08 <_printf_i+0x7c>
 8007ec2:	0010      	movs	r0, r2
 8007ec4:	3863      	subs	r0, #99	@ 0x63
 8007ec6:	2815      	cmp	r0, #21
 8007ec8:	d8f7      	bhi.n	8007eba <_printf_i+0x2e>
 8007eca:	f7f8 f925 	bl	8000118 <__gnu_thumb1_case_shi>
 8007ece:	0016      	.short	0x0016
 8007ed0:	fff6001f 	.word	0xfff6001f
 8007ed4:	fff6fff6 	.word	0xfff6fff6
 8007ed8:	001ffff6 	.word	0x001ffff6
 8007edc:	fff6fff6 	.word	0xfff6fff6
 8007ee0:	fff6fff6 	.word	0xfff6fff6
 8007ee4:	003600a1 	.word	0x003600a1
 8007ee8:	fff60080 	.word	0xfff60080
 8007eec:	00b2fff6 	.word	0x00b2fff6
 8007ef0:	0036fff6 	.word	0x0036fff6
 8007ef4:	fff6fff6 	.word	0xfff6fff6
 8007ef8:	0084      	.short	0x0084
 8007efa:	0025      	movs	r5, r4
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	3542      	adds	r5, #66	@ 0x42
 8007f00:	1d11      	adds	r1, r2, #4
 8007f02:	6019      	str	r1, [r3, #0]
 8007f04:	6813      	ldr	r3, [r2, #0]
 8007f06:	702b      	strb	r3, [r5, #0]
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e0a0      	b.n	800804e <_printf_i+0x1c2>
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	6809      	ldr	r1, [r1, #0]
 8007f10:	1d02      	adds	r2, r0, #4
 8007f12:	060d      	lsls	r5, r1, #24
 8007f14:	d50b      	bpl.n	8007f2e <_printf_i+0xa2>
 8007f16:	6806      	ldr	r6, [r0, #0]
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	2e00      	cmp	r6, #0
 8007f1c:	da03      	bge.n	8007f26 <_printf_i+0x9a>
 8007f1e:	232d      	movs	r3, #45	@ 0x2d
 8007f20:	9a03      	ldr	r2, [sp, #12]
 8007f22:	4276      	negs	r6, r6
 8007f24:	7013      	strb	r3, [r2, #0]
 8007f26:	4b5e      	ldr	r3, [pc, #376]	@ (80080a0 <_printf_i+0x214>)
 8007f28:	270a      	movs	r7, #10
 8007f2a:	9304      	str	r3, [sp, #16]
 8007f2c:	e018      	b.n	8007f60 <_printf_i+0xd4>
 8007f2e:	6806      	ldr	r6, [r0, #0]
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	0649      	lsls	r1, r1, #25
 8007f34:	d5f1      	bpl.n	8007f1a <_printf_i+0x8e>
 8007f36:	b236      	sxth	r6, r6
 8007f38:	e7ef      	b.n	8007f1a <_printf_i+0x8e>
 8007f3a:	6808      	ldr	r0, [r1, #0]
 8007f3c:	6819      	ldr	r1, [r3, #0]
 8007f3e:	c940      	ldmia	r1!, {r6}
 8007f40:	0605      	lsls	r5, r0, #24
 8007f42:	d402      	bmi.n	8007f4a <_printf_i+0xbe>
 8007f44:	0640      	lsls	r0, r0, #25
 8007f46:	d500      	bpl.n	8007f4a <_printf_i+0xbe>
 8007f48:	b2b6      	uxth	r6, r6
 8007f4a:	6019      	str	r1, [r3, #0]
 8007f4c:	4b54      	ldr	r3, [pc, #336]	@ (80080a0 <_printf_i+0x214>)
 8007f4e:	270a      	movs	r7, #10
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	2a6f      	cmp	r2, #111	@ 0x6f
 8007f54:	d100      	bne.n	8007f58 <_printf_i+0xcc>
 8007f56:	3f02      	subs	r7, #2
 8007f58:	0023      	movs	r3, r4
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	3343      	adds	r3, #67	@ 0x43
 8007f5e:	701a      	strb	r2, [r3, #0]
 8007f60:	6863      	ldr	r3, [r4, #4]
 8007f62:	60a3      	str	r3, [r4, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	db03      	blt.n	8007f70 <_printf_i+0xe4>
 8007f68:	2104      	movs	r1, #4
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	438a      	bics	r2, r1
 8007f6e:	6022      	str	r2, [r4, #0]
 8007f70:	2e00      	cmp	r6, #0
 8007f72:	d102      	bne.n	8007f7a <_printf_i+0xee>
 8007f74:	9d03      	ldr	r5, [sp, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00c      	beq.n	8007f94 <_printf_i+0x108>
 8007f7a:	9d03      	ldr	r5, [sp, #12]
 8007f7c:	0030      	movs	r0, r6
 8007f7e:	0039      	movs	r1, r7
 8007f80:	f7f8 f95a 	bl	8000238 <__aeabi_uidivmod>
 8007f84:	9b04      	ldr	r3, [sp, #16]
 8007f86:	3d01      	subs	r5, #1
 8007f88:	5c5b      	ldrb	r3, [r3, r1]
 8007f8a:	702b      	strb	r3, [r5, #0]
 8007f8c:	0033      	movs	r3, r6
 8007f8e:	0006      	movs	r6, r0
 8007f90:	429f      	cmp	r7, r3
 8007f92:	d9f3      	bls.n	8007f7c <_printf_i+0xf0>
 8007f94:	2f08      	cmp	r7, #8
 8007f96:	d109      	bne.n	8007fac <_printf_i+0x120>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	07db      	lsls	r3, r3, #31
 8007f9c:	d506      	bpl.n	8007fac <_printf_i+0x120>
 8007f9e:	6862      	ldr	r2, [r4, #4]
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	dc02      	bgt.n	8007fac <_printf_i+0x120>
 8007fa6:	2330      	movs	r3, #48	@ 0x30
 8007fa8:	3d01      	subs	r5, #1
 8007faa:	702b      	strb	r3, [r5, #0]
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	1b5b      	subs	r3, r3, r5
 8007fb0:	6123      	str	r3, [r4, #16]
 8007fb2:	9b07      	ldr	r3, [sp, #28]
 8007fb4:	0021      	movs	r1, r4
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	9805      	ldr	r0, [sp, #20]
 8007fba:	9b06      	ldr	r3, [sp, #24]
 8007fbc:	aa09      	add	r2, sp, #36	@ 0x24
 8007fbe:	f7ff fef5 	bl	8007dac <_printf_common>
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	d148      	bne.n	8008058 <_printf_i+0x1cc>
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	4240      	negs	r0, r0
 8007fca:	b00b      	add	sp, #44	@ 0x2c
 8007fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fce:	2220      	movs	r2, #32
 8007fd0:	6809      	ldr	r1, [r1, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	6022      	str	r2, [r4, #0]
 8007fd6:	2278      	movs	r2, #120	@ 0x78
 8007fd8:	4932      	ldr	r1, [pc, #200]	@ (80080a4 <_printf_i+0x218>)
 8007fda:	9104      	str	r1, [sp, #16]
 8007fdc:	0021      	movs	r1, r4
 8007fde:	3145      	adds	r1, #69	@ 0x45
 8007fe0:	700a      	strb	r2, [r1, #0]
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	6822      	ldr	r2, [r4, #0]
 8007fe6:	c940      	ldmia	r1!, {r6}
 8007fe8:	0610      	lsls	r0, r2, #24
 8007fea:	d402      	bmi.n	8007ff2 <_printf_i+0x166>
 8007fec:	0650      	lsls	r0, r2, #25
 8007fee:	d500      	bpl.n	8007ff2 <_printf_i+0x166>
 8007ff0:	b2b6      	uxth	r6, r6
 8007ff2:	6019      	str	r1, [r3, #0]
 8007ff4:	07d3      	lsls	r3, r2, #31
 8007ff6:	d502      	bpl.n	8007ffe <_printf_i+0x172>
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	6023      	str	r3, [r4, #0]
 8007ffe:	2e00      	cmp	r6, #0
 8008000:	d001      	beq.n	8008006 <_printf_i+0x17a>
 8008002:	2710      	movs	r7, #16
 8008004:	e7a8      	b.n	8007f58 <_printf_i+0xcc>
 8008006:	2220      	movs	r2, #32
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	4393      	bics	r3, r2
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	e7f8      	b.n	8008002 <_printf_i+0x176>
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	680d      	ldr	r5, [r1, #0]
 8008014:	1d10      	adds	r0, r2, #4
 8008016:	6949      	ldr	r1, [r1, #20]
 8008018:	6018      	str	r0, [r3, #0]
 800801a:	6813      	ldr	r3, [r2, #0]
 800801c:	062e      	lsls	r6, r5, #24
 800801e:	d501      	bpl.n	8008024 <_printf_i+0x198>
 8008020:	6019      	str	r1, [r3, #0]
 8008022:	e002      	b.n	800802a <_printf_i+0x19e>
 8008024:	066d      	lsls	r5, r5, #25
 8008026:	d5fb      	bpl.n	8008020 <_printf_i+0x194>
 8008028:	8019      	strh	r1, [r3, #0]
 800802a:	2300      	movs	r3, #0
 800802c:	9d03      	ldr	r5, [sp, #12]
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	e7bf      	b.n	8007fb2 <_printf_i+0x126>
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	1d11      	adds	r1, r2, #4
 8008036:	6019      	str	r1, [r3, #0]
 8008038:	6815      	ldr	r5, [r2, #0]
 800803a:	2100      	movs	r1, #0
 800803c:	0028      	movs	r0, r5
 800803e:	6862      	ldr	r2, [r4, #4]
 8008040:	f000 f91a 	bl	8008278 <memchr>
 8008044:	2800      	cmp	r0, #0
 8008046:	d001      	beq.n	800804c <_printf_i+0x1c0>
 8008048:	1b40      	subs	r0, r0, r5
 800804a:	6060      	str	r0, [r4, #4]
 800804c:	6863      	ldr	r3, [r4, #4]
 800804e:	6123      	str	r3, [r4, #16]
 8008050:	2300      	movs	r3, #0
 8008052:	9a03      	ldr	r2, [sp, #12]
 8008054:	7013      	strb	r3, [r2, #0]
 8008056:	e7ac      	b.n	8007fb2 <_printf_i+0x126>
 8008058:	002a      	movs	r2, r5
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	9906      	ldr	r1, [sp, #24]
 800805e:	9805      	ldr	r0, [sp, #20]
 8008060:	9d07      	ldr	r5, [sp, #28]
 8008062:	47a8      	blx	r5
 8008064:	3001      	adds	r0, #1
 8008066:	d0ae      	beq.n	8007fc6 <_printf_i+0x13a>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	079b      	lsls	r3, r3, #30
 800806c:	d415      	bmi.n	800809a <_printf_i+0x20e>
 800806e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008070:	68e0      	ldr	r0, [r4, #12]
 8008072:	4298      	cmp	r0, r3
 8008074:	daa9      	bge.n	8007fca <_printf_i+0x13e>
 8008076:	0018      	movs	r0, r3
 8008078:	e7a7      	b.n	8007fca <_printf_i+0x13e>
 800807a:	0022      	movs	r2, r4
 800807c:	2301      	movs	r3, #1
 800807e:	9906      	ldr	r1, [sp, #24]
 8008080:	9805      	ldr	r0, [sp, #20]
 8008082:	9e07      	ldr	r6, [sp, #28]
 8008084:	3219      	adds	r2, #25
 8008086:	47b0      	blx	r6
 8008088:	3001      	adds	r0, #1
 800808a:	d09c      	beq.n	8007fc6 <_printf_i+0x13a>
 800808c:	3501      	adds	r5, #1
 800808e:	68e3      	ldr	r3, [r4, #12]
 8008090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008092:	1a9b      	subs	r3, r3, r2
 8008094:	42ab      	cmp	r3, r5
 8008096:	dcf0      	bgt.n	800807a <_printf_i+0x1ee>
 8008098:	e7e9      	b.n	800806e <_printf_i+0x1e2>
 800809a:	2500      	movs	r5, #0
 800809c:	e7f7      	b.n	800808e <_printf_i+0x202>
 800809e:	46c0      	nop			@ (mov r8, r8)
 80080a0:	08008cd1 	.word	0x08008cd1
 80080a4:	08008ce2 	.word	0x08008ce2

080080a8 <__sflush_r>:
 80080a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080aa:	220c      	movs	r2, #12
 80080ac:	5e8b      	ldrsh	r3, [r1, r2]
 80080ae:	0005      	movs	r5, r0
 80080b0:	000c      	movs	r4, r1
 80080b2:	071a      	lsls	r2, r3, #28
 80080b4:	d456      	bmi.n	8008164 <__sflush_r+0xbc>
 80080b6:	684a      	ldr	r2, [r1, #4]
 80080b8:	2a00      	cmp	r2, #0
 80080ba:	dc02      	bgt.n	80080c2 <__sflush_r+0x1a>
 80080bc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80080be:	2a00      	cmp	r2, #0
 80080c0:	dd4e      	ble.n	8008160 <__sflush_r+0xb8>
 80080c2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80080c4:	2f00      	cmp	r7, #0
 80080c6:	d04b      	beq.n	8008160 <__sflush_r+0xb8>
 80080c8:	2200      	movs	r2, #0
 80080ca:	2080      	movs	r0, #128	@ 0x80
 80080cc:	682e      	ldr	r6, [r5, #0]
 80080ce:	602a      	str	r2, [r5, #0]
 80080d0:	001a      	movs	r2, r3
 80080d2:	0140      	lsls	r0, r0, #5
 80080d4:	6a21      	ldr	r1, [r4, #32]
 80080d6:	4002      	ands	r2, r0
 80080d8:	4203      	tst	r3, r0
 80080da:	d033      	beq.n	8008144 <__sflush_r+0x9c>
 80080dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	075b      	lsls	r3, r3, #29
 80080e2:	d506      	bpl.n	80080f2 <__sflush_r+0x4a>
 80080e4:	6863      	ldr	r3, [r4, #4]
 80080e6:	1ad2      	subs	r2, r2, r3
 80080e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <__sflush_r+0x4a>
 80080ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080f0:	1ad2      	subs	r2, r2, r3
 80080f2:	2300      	movs	r3, #0
 80080f4:	0028      	movs	r0, r5
 80080f6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80080f8:	6a21      	ldr	r1, [r4, #32]
 80080fa:	47b8      	blx	r7
 80080fc:	89a2      	ldrh	r2, [r4, #12]
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	d106      	bne.n	8008110 <__sflush_r+0x68>
 8008102:	6829      	ldr	r1, [r5, #0]
 8008104:	291d      	cmp	r1, #29
 8008106:	d846      	bhi.n	8008196 <__sflush_r+0xee>
 8008108:	4b29      	ldr	r3, [pc, #164]	@ (80081b0 <__sflush_r+0x108>)
 800810a:	410b      	asrs	r3, r1
 800810c:	07db      	lsls	r3, r3, #31
 800810e:	d442      	bmi.n	8008196 <__sflush_r+0xee>
 8008110:	2300      	movs	r3, #0
 8008112:	6063      	str	r3, [r4, #4]
 8008114:	6923      	ldr	r3, [r4, #16]
 8008116:	6023      	str	r3, [r4, #0]
 8008118:	04d2      	lsls	r2, r2, #19
 800811a:	d505      	bpl.n	8008128 <__sflush_r+0x80>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <__sflush_r+0x7e>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d100      	bne.n	8008128 <__sflush_r+0x80>
 8008126:	6560      	str	r0, [r4, #84]	@ 0x54
 8008128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800812a:	602e      	str	r6, [r5, #0]
 800812c:	2900      	cmp	r1, #0
 800812e:	d017      	beq.n	8008160 <__sflush_r+0xb8>
 8008130:	0023      	movs	r3, r4
 8008132:	3344      	adds	r3, #68	@ 0x44
 8008134:	4299      	cmp	r1, r3
 8008136:	d002      	beq.n	800813e <__sflush_r+0x96>
 8008138:	0028      	movs	r0, r5
 800813a:	f7ff fbd3 	bl	80078e4 <_free_r>
 800813e:	2300      	movs	r3, #0
 8008140:	6363      	str	r3, [r4, #52]	@ 0x34
 8008142:	e00d      	b.n	8008160 <__sflush_r+0xb8>
 8008144:	2301      	movs	r3, #1
 8008146:	0028      	movs	r0, r5
 8008148:	47b8      	blx	r7
 800814a:	0002      	movs	r2, r0
 800814c:	1c43      	adds	r3, r0, #1
 800814e:	d1c6      	bne.n	80080de <__sflush_r+0x36>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0c3      	beq.n	80080de <__sflush_r+0x36>
 8008156:	2b1d      	cmp	r3, #29
 8008158:	d001      	beq.n	800815e <__sflush_r+0xb6>
 800815a:	2b16      	cmp	r3, #22
 800815c:	d11a      	bne.n	8008194 <__sflush_r+0xec>
 800815e:	602e      	str	r6, [r5, #0]
 8008160:	2000      	movs	r0, #0
 8008162:	e01e      	b.n	80081a2 <__sflush_r+0xfa>
 8008164:	690e      	ldr	r6, [r1, #16]
 8008166:	2e00      	cmp	r6, #0
 8008168:	d0fa      	beq.n	8008160 <__sflush_r+0xb8>
 800816a:	680f      	ldr	r7, [r1, #0]
 800816c:	600e      	str	r6, [r1, #0]
 800816e:	1bba      	subs	r2, r7, r6
 8008170:	9201      	str	r2, [sp, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	079b      	lsls	r3, r3, #30
 8008176:	d100      	bne.n	800817a <__sflush_r+0xd2>
 8008178:	694a      	ldr	r2, [r1, #20]
 800817a:	60a2      	str	r2, [r4, #8]
 800817c:	9b01      	ldr	r3, [sp, #4]
 800817e:	2b00      	cmp	r3, #0
 8008180:	ddee      	ble.n	8008160 <__sflush_r+0xb8>
 8008182:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008184:	0032      	movs	r2, r6
 8008186:	001f      	movs	r7, r3
 8008188:	0028      	movs	r0, r5
 800818a:	9b01      	ldr	r3, [sp, #4]
 800818c:	6a21      	ldr	r1, [r4, #32]
 800818e:	47b8      	blx	r7
 8008190:	2800      	cmp	r0, #0
 8008192:	dc07      	bgt.n	80081a4 <__sflush_r+0xfc>
 8008194:	89a2      	ldrh	r2, [r4, #12]
 8008196:	2340      	movs	r3, #64	@ 0x40
 8008198:	2001      	movs	r0, #1
 800819a:	4313      	orrs	r3, r2
 800819c:	b21b      	sxth	r3, r3
 800819e:	81a3      	strh	r3, [r4, #12]
 80081a0:	4240      	negs	r0, r0
 80081a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081a4:	9b01      	ldr	r3, [sp, #4]
 80081a6:	1836      	adds	r6, r6, r0
 80081a8:	1a1b      	subs	r3, r3, r0
 80081aa:	9301      	str	r3, [sp, #4]
 80081ac:	e7e6      	b.n	800817c <__sflush_r+0xd4>
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	dfbffffe 	.word	0xdfbffffe

080081b4 <_fflush_r>:
 80081b4:	690b      	ldr	r3, [r1, #16]
 80081b6:	b570      	push	{r4, r5, r6, lr}
 80081b8:	0005      	movs	r5, r0
 80081ba:	000c      	movs	r4, r1
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <_fflush_r+0x12>
 80081c0:	2500      	movs	r5, #0
 80081c2:	0028      	movs	r0, r5
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d004      	beq.n	80081d4 <_fflush_r+0x20>
 80081ca:	6a03      	ldr	r3, [r0, #32]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <_fflush_r+0x20>
 80081d0:	f7ff f9d6 	bl	8007580 <__sinit>
 80081d4:	220c      	movs	r2, #12
 80081d6:	5ea3      	ldrsh	r3, [r4, r2]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d0f1      	beq.n	80081c0 <_fflush_r+0xc>
 80081dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081de:	07d2      	lsls	r2, r2, #31
 80081e0:	d404      	bmi.n	80081ec <_fflush_r+0x38>
 80081e2:	059b      	lsls	r3, r3, #22
 80081e4:	d402      	bmi.n	80081ec <_fflush_r+0x38>
 80081e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081e8:	f7ff fb4b 	bl	8007882 <__retarget_lock_acquire_recursive>
 80081ec:	0028      	movs	r0, r5
 80081ee:	0021      	movs	r1, r4
 80081f0:	f7ff ff5a 	bl	80080a8 <__sflush_r>
 80081f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081f6:	0005      	movs	r5, r0
 80081f8:	07db      	lsls	r3, r3, #31
 80081fa:	d4e2      	bmi.n	80081c2 <_fflush_r+0xe>
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	059b      	lsls	r3, r3, #22
 8008200:	d4df      	bmi.n	80081c2 <_fflush_r+0xe>
 8008202:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008204:	f7ff fb3e 	bl	8007884 <__retarget_lock_release_recursive>
 8008208:	e7db      	b.n	80081c2 <_fflush_r+0xe>
	...

0800820c <fiprintf>:
 800820c:	b40e      	push	{r1, r2, r3}
 800820e:	b517      	push	{r0, r1, r2, r4, lr}
 8008210:	4c05      	ldr	r4, [pc, #20]	@ (8008228 <fiprintf+0x1c>)
 8008212:	ab05      	add	r3, sp, #20
 8008214:	cb04      	ldmia	r3!, {r2}
 8008216:	0001      	movs	r1, r0
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	f000 f894 	bl	8008348 <_vfiprintf_r>
 8008220:	bc1e      	pop	{r1, r2, r3, r4}
 8008222:	bc08      	pop	{r3}
 8008224:	b003      	add	sp, #12
 8008226:	4718      	bx	r3
 8008228:	2000019c 	.word	0x2000019c

0800822c <memmove>:
 800822c:	b510      	push	{r4, lr}
 800822e:	4288      	cmp	r0, r1
 8008230:	d806      	bhi.n	8008240 <memmove+0x14>
 8008232:	2300      	movs	r3, #0
 8008234:	429a      	cmp	r2, r3
 8008236:	d008      	beq.n	800824a <memmove+0x1e>
 8008238:	5ccc      	ldrb	r4, [r1, r3]
 800823a:	54c4      	strb	r4, [r0, r3]
 800823c:	3301      	adds	r3, #1
 800823e:	e7f9      	b.n	8008234 <memmove+0x8>
 8008240:	188b      	adds	r3, r1, r2
 8008242:	4298      	cmp	r0, r3
 8008244:	d2f5      	bcs.n	8008232 <memmove+0x6>
 8008246:	3a01      	subs	r2, #1
 8008248:	d200      	bcs.n	800824c <memmove+0x20>
 800824a:	bd10      	pop	{r4, pc}
 800824c:	5c8b      	ldrb	r3, [r1, r2]
 800824e:	5483      	strb	r3, [r0, r2]
 8008250:	e7f9      	b.n	8008246 <memmove+0x1a>
	...

08008254 <_sbrk_r>:
 8008254:	2300      	movs	r3, #0
 8008256:	b570      	push	{r4, r5, r6, lr}
 8008258:	4d06      	ldr	r5, [pc, #24]	@ (8008274 <_sbrk_r+0x20>)
 800825a:	0004      	movs	r4, r0
 800825c:	0008      	movs	r0, r1
 800825e:	602b      	str	r3, [r5, #0]
 8008260:	f7f9 ff5c 	bl	800211c <_sbrk>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d103      	bne.n	8008270 <_sbrk_r+0x1c>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d000      	beq.n	8008270 <_sbrk_r+0x1c>
 800826e:	6023      	str	r3, [r4, #0]
 8008270:	bd70      	pop	{r4, r5, r6, pc}
 8008272:	46c0      	nop			@ (mov r8, r8)
 8008274:	20001740 	.word	0x20001740

08008278 <memchr>:
 8008278:	b2c9      	uxtb	r1, r1
 800827a:	1882      	adds	r2, r0, r2
 800827c:	4290      	cmp	r0, r2
 800827e:	d101      	bne.n	8008284 <memchr+0xc>
 8008280:	2000      	movs	r0, #0
 8008282:	4770      	bx	lr
 8008284:	7803      	ldrb	r3, [r0, #0]
 8008286:	428b      	cmp	r3, r1
 8008288:	d0fb      	beq.n	8008282 <memchr+0xa>
 800828a:	3001      	adds	r0, #1
 800828c:	e7f6      	b.n	800827c <memchr+0x4>

0800828e <abort>:
 800828e:	2006      	movs	r0, #6
 8008290:	b510      	push	{r4, lr}
 8008292:	f000 fa3f 	bl	8008714 <raise>
 8008296:	2001      	movs	r0, #1
 8008298:	f7f9 ff10 	bl	80020bc <_exit>

0800829c <_realloc_r>:
 800829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800829e:	0006      	movs	r6, r0
 80082a0:	000c      	movs	r4, r1
 80082a2:	0015      	movs	r5, r2
 80082a4:	2900      	cmp	r1, #0
 80082a6:	d105      	bne.n	80082b4 <_realloc_r+0x18>
 80082a8:	0011      	movs	r1, r2
 80082aa:	f7ff fb91 	bl	80079d0 <_malloc_r>
 80082ae:	0004      	movs	r4, r0
 80082b0:	0020      	movs	r0, r4
 80082b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80082b4:	2a00      	cmp	r2, #0
 80082b6:	d103      	bne.n	80082c0 <_realloc_r+0x24>
 80082b8:	f7ff fb14 	bl	80078e4 <_free_r>
 80082bc:	2400      	movs	r4, #0
 80082be:	e7f7      	b.n	80082b0 <_realloc_r+0x14>
 80082c0:	f000 fa48 	bl	8008754 <_malloc_usable_size_r>
 80082c4:	0007      	movs	r7, r0
 80082c6:	4285      	cmp	r5, r0
 80082c8:	d802      	bhi.n	80082d0 <_realloc_r+0x34>
 80082ca:	0843      	lsrs	r3, r0, #1
 80082cc:	42ab      	cmp	r3, r5
 80082ce:	d3ef      	bcc.n	80082b0 <_realloc_r+0x14>
 80082d0:	0029      	movs	r1, r5
 80082d2:	0030      	movs	r0, r6
 80082d4:	f7ff fb7c 	bl	80079d0 <_malloc_r>
 80082d8:	9001      	str	r0, [sp, #4]
 80082da:	2800      	cmp	r0, #0
 80082dc:	d0ee      	beq.n	80082bc <_realloc_r+0x20>
 80082de:	002a      	movs	r2, r5
 80082e0:	42bd      	cmp	r5, r7
 80082e2:	d900      	bls.n	80082e6 <_realloc_r+0x4a>
 80082e4:	003a      	movs	r2, r7
 80082e6:	0021      	movs	r1, r4
 80082e8:	9801      	ldr	r0, [sp, #4]
 80082ea:	f7ff fad4 	bl	8007896 <memcpy>
 80082ee:	0021      	movs	r1, r4
 80082f0:	0030      	movs	r0, r6
 80082f2:	f7ff faf7 	bl	80078e4 <_free_r>
 80082f6:	9c01      	ldr	r4, [sp, #4]
 80082f8:	e7da      	b.n	80082b0 <_realloc_r+0x14>

080082fa <__sfputc_r>:
 80082fa:	6893      	ldr	r3, [r2, #8]
 80082fc:	b510      	push	{r4, lr}
 80082fe:	3b01      	subs	r3, #1
 8008300:	6093      	str	r3, [r2, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	da04      	bge.n	8008310 <__sfputc_r+0x16>
 8008306:	6994      	ldr	r4, [r2, #24]
 8008308:	42a3      	cmp	r3, r4
 800830a:	db07      	blt.n	800831c <__sfputc_r+0x22>
 800830c:	290a      	cmp	r1, #10
 800830e:	d005      	beq.n	800831c <__sfputc_r+0x22>
 8008310:	6813      	ldr	r3, [r2, #0]
 8008312:	1c58      	adds	r0, r3, #1
 8008314:	6010      	str	r0, [r2, #0]
 8008316:	7019      	strb	r1, [r3, #0]
 8008318:	0008      	movs	r0, r1
 800831a:	bd10      	pop	{r4, pc}
 800831c:	f000 f930 	bl	8008580 <__swbuf_r>
 8008320:	0001      	movs	r1, r0
 8008322:	e7f9      	b.n	8008318 <__sfputc_r+0x1e>

08008324 <__sfputs_r>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	0006      	movs	r6, r0
 8008328:	000f      	movs	r7, r1
 800832a:	0014      	movs	r4, r2
 800832c:	18d5      	adds	r5, r2, r3
 800832e:	42ac      	cmp	r4, r5
 8008330:	d101      	bne.n	8008336 <__sfputs_r+0x12>
 8008332:	2000      	movs	r0, #0
 8008334:	e007      	b.n	8008346 <__sfputs_r+0x22>
 8008336:	7821      	ldrb	r1, [r4, #0]
 8008338:	003a      	movs	r2, r7
 800833a:	0030      	movs	r0, r6
 800833c:	f7ff ffdd 	bl	80082fa <__sfputc_r>
 8008340:	3401      	adds	r4, #1
 8008342:	1c43      	adds	r3, r0, #1
 8008344:	d1f3      	bne.n	800832e <__sfputs_r+0xa>
 8008346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008348 <_vfiprintf_r>:
 8008348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834a:	b0a1      	sub	sp, #132	@ 0x84
 800834c:	000f      	movs	r7, r1
 800834e:	0015      	movs	r5, r2
 8008350:	001e      	movs	r6, r3
 8008352:	9003      	str	r0, [sp, #12]
 8008354:	2800      	cmp	r0, #0
 8008356:	d004      	beq.n	8008362 <_vfiprintf_r+0x1a>
 8008358:	6a03      	ldr	r3, [r0, #32]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <_vfiprintf_r+0x1a>
 800835e:	f7ff f90f 	bl	8007580 <__sinit>
 8008362:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008364:	07db      	lsls	r3, r3, #31
 8008366:	d405      	bmi.n	8008374 <_vfiprintf_r+0x2c>
 8008368:	89bb      	ldrh	r3, [r7, #12]
 800836a:	059b      	lsls	r3, r3, #22
 800836c:	d402      	bmi.n	8008374 <_vfiprintf_r+0x2c>
 800836e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008370:	f7ff fa87 	bl	8007882 <__retarget_lock_acquire_recursive>
 8008374:	89bb      	ldrh	r3, [r7, #12]
 8008376:	071b      	lsls	r3, r3, #28
 8008378:	d502      	bpl.n	8008380 <_vfiprintf_r+0x38>
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d113      	bne.n	80083a8 <_vfiprintf_r+0x60>
 8008380:	0039      	movs	r1, r7
 8008382:	9803      	ldr	r0, [sp, #12]
 8008384:	f000 f93e 	bl	8008604 <__swsetup_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	d00d      	beq.n	80083a8 <_vfiprintf_r+0x60>
 800838c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800838e:	07db      	lsls	r3, r3, #31
 8008390:	d503      	bpl.n	800839a <_vfiprintf_r+0x52>
 8008392:	2001      	movs	r0, #1
 8008394:	4240      	negs	r0, r0
 8008396:	b021      	add	sp, #132	@ 0x84
 8008398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839a:	89bb      	ldrh	r3, [r7, #12]
 800839c:	059b      	lsls	r3, r3, #22
 800839e:	d4f8      	bmi.n	8008392 <_vfiprintf_r+0x4a>
 80083a0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80083a2:	f7ff fa6f 	bl	8007884 <__retarget_lock_release_recursive>
 80083a6:	e7f4      	b.n	8008392 <_vfiprintf_r+0x4a>
 80083a8:	2300      	movs	r3, #0
 80083aa:	ac08      	add	r4, sp, #32
 80083ac:	6163      	str	r3, [r4, #20]
 80083ae:	3320      	adds	r3, #32
 80083b0:	7663      	strb	r3, [r4, #25]
 80083b2:	3310      	adds	r3, #16
 80083b4:	76a3      	strb	r3, [r4, #26]
 80083b6:	9607      	str	r6, [sp, #28]
 80083b8:	002e      	movs	r6, r5
 80083ba:	7833      	ldrb	r3, [r6, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <_vfiprintf_r+0x7c>
 80083c0:	2b25      	cmp	r3, #37	@ 0x25
 80083c2:	d148      	bne.n	8008456 <_vfiprintf_r+0x10e>
 80083c4:	1b73      	subs	r3, r6, r5
 80083c6:	9305      	str	r3, [sp, #20]
 80083c8:	42ae      	cmp	r6, r5
 80083ca:	d00b      	beq.n	80083e4 <_vfiprintf_r+0x9c>
 80083cc:	002a      	movs	r2, r5
 80083ce:	0039      	movs	r1, r7
 80083d0:	9803      	ldr	r0, [sp, #12]
 80083d2:	f7ff ffa7 	bl	8008324 <__sfputs_r>
 80083d6:	3001      	adds	r0, #1
 80083d8:	d100      	bne.n	80083dc <_vfiprintf_r+0x94>
 80083da:	e0ae      	b.n	800853a <_vfiprintf_r+0x1f2>
 80083dc:	6963      	ldr	r3, [r4, #20]
 80083de:	9a05      	ldr	r2, [sp, #20]
 80083e0:	189b      	adds	r3, r3, r2
 80083e2:	6163      	str	r3, [r4, #20]
 80083e4:	7833      	ldrb	r3, [r6, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d100      	bne.n	80083ec <_vfiprintf_r+0xa4>
 80083ea:	e0a6      	b.n	800853a <_vfiprintf_r+0x1f2>
 80083ec:	2201      	movs	r2, #1
 80083ee:	2300      	movs	r3, #0
 80083f0:	4252      	negs	r2, r2
 80083f2:	6062      	str	r2, [r4, #4]
 80083f4:	a904      	add	r1, sp, #16
 80083f6:	3254      	adds	r2, #84	@ 0x54
 80083f8:	1852      	adds	r2, r2, r1
 80083fa:	1c75      	adds	r5, r6, #1
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	60e3      	str	r3, [r4, #12]
 8008400:	60a3      	str	r3, [r4, #8]
 8008402:	7013      	strb	r3, [r2, #0]
 8008404:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008406:	4b59      	ldr	r3, [pc, #356]	@ (800856c <_vfiprintf_r+0x224>)
 8008408:	2205      	movs	r2, #5
 800840a:	0018      	movs	r0, r3
 800840c:	7829      	ldrb	r1, [r5, #0]
 800840e:	9305      	str	r3, [sp, #20]
 8008410:	f7ff ff32 	bl	8008278 <memchr>
 8008414:	1c6e      	adds	r6, r5, #1
 8008416:	2800      	cmp	r0, #0
 8008418:	d11f      	bne.n	800845a <_vfiprintf_r+0x112>
 800841a:	6822      	ldr	r2, [r4, #0]
 800841c:	06d3      	lsls	r3, r2, #27
 800841e:	d504      	bpl.n	800842a <_vfiprintf_r+0xe2>
 8008420:	2353      	movs	r3, #83	@ 0x53
 8008422:	a904      	add	r1, sp, #16
 8008424:	185b      	adds	r3, r3, r1
 8008426:	2120      	movs	r1, #32
 8008428:	7019      	strb	r1, [r3, #0]
 800842a:	0713      	lsls	r3, r2, #28
 800842c:	d504      	bpl.n	8008438 <_vfiprintf_r+0xf0>
 800842e:	2353      	movs	r3, #83	@ 0x53
 8008430:	a904      	add	r1, sp, #16
 8008432:	185b      	adds	r3, r3, r1
 8008434:	212b      	movs	r1, #43	@ 0x2b
 8008436:	7019      	strb	r1, [r3, #0]
 8008438:	782b      	ldrb	r3, [r5, #0]
 800843a:	2b2a      	cmp	r3, #42	@ 0x2a
 800843c:	d016      	beq.n	800846c <_vfiprintf_r+0x124>
 800843e:	002e      	movs	r6, r5
 8008440:	2100      	movs	r1, #0
 8008442:	200a      	movs	r0, #10
 8008444:	68e3      	ldr	r3, [r4, #12]
 8008446:	7832      	ldrb	r2, [r6, #0]
 8008448:	1c75      	adds	r5, r6, #1
 800844a:	3a30      	subs	r2, #48	@ 0x30
 800844c:	2a09      	cmp	r2, #9
 800844e:	d950      	bls.n	80084f2 <_vfiprintf_r+0x1aa>
 8008450:	2900      	cmp	r1, #0
 8008452:	d111      	bne.n	8008478 <_vfiprintf_r+0x130>
 8008454:	e017      	b.n	8008486 <_vfiprintf_r+0x13e>
 8008456:	3601      	adds	r6, #1
 8008458:	e7af      	b.n	80083ba <_vfiprintf_r+0x72>
 800845a:	9b05      	ldr	r3, [sp, #20]
 800845c:	6822      	ldr	r2, [r4, #0]
 800845e:	1ac0      	subs	r0, r0, r3
 8008460:	2301      	movs	r3, #1
 8008462:	4083      	lsls	r3, r0
 8008464:	4313      	orrs	r3, r2
 8008466:	0035      	movs	r5, r6
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	e7cc      	b.n	8008406 <_vfiprintf_r+0xbe>
 800846c:	9b07      	ldr	r3, [sp, #28]
 800846e:	1d19      	adds	r1, r3, #4
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	9107      	str	r1, [sp, #28]
 8008474:	2b00      	cmp	r3, #0
 8008476:	db01      	blt.n	800847c <_vfiprintf_r+0x134>
 8008478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800847a:	e004      	b.n	8008486 <_vfiprintf_r+0x13e>
 800847c:	425b      	negs	r3, r3
 800847e:	60e3      	str	r3, [r4, #12]
 8008480:	2302      	movs	r3, #2
 8008482:	4313      	orrs	r3, r2
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	7833      	ldrb	r3, [r6, #0]
 8008488:	2b2e      	cmp	r3, #46	@ 0x2e
 800848a:	d10c      	bne.n	80084a6 <_vfiprintf_r+0x15e>
 800848c:	7873      	ldrb	r3, [r6, #1]
 800848e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008490:	d134      	bne.n	80084fc <_vfiprintf_r+0x1b4>
 8008492:	9b07      	ldr	r3, [sp, #28]
 8008494:	3602      	adds	r6, #2
 8008496:	1d1a      	adds	r2, r3, #4
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	9207      	str	r2, [sp, #28]
 800849c:	2b00      	cmp	r3, #0
 800849e:	da01      	bge.n	80084a4 <_vfiprintf_r+0x15c>
 80084a0:	2301      	movs	r3, #1
 80084a2:	425b      	negs	r3, r3
 80084a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084a6:	4d32      	ldr	r5, [pc, #200]	@ (8008570 <_vfiprintf_r+0x228>)
 80084a8:	2203      	movs	r2, #3
 80084aa:	0028      	movs	r0, r5
 80084ac:	7831      	ldrb	r1, [r6, #0]
 80084ae:	f7ff fee3 	bl	8008278 <memchr>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d006      	beq.n	80084c4 <_vfiprintf_r+0x17c>
 80084b6:	2340      	movs	r3, #64	@ 0x40
 80084b8:	1b40      	subs	r0, r0, r5
 80084ba:	4083      	lsls	r3, r0
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	3601      	adds	r6, #1
 80084c0:	4313      	orrs	r3, r2
 80084c2:	6023      	str	r3, [r4, #0]
 80084c4:	7831      	ldrb	r1, [r6, #0]
 80084c6:	2206      	movs	r2, #6
 80084c8:	482a      	ldr	r0, [pc, #168]	@ (8008574 <_vfiprintf_r+0x22c>)
 80084ca:	1c75      	adds	r5, r6, #1
 80084cc:	7621      	strb	r1, [r4, #24]
 80084ce:	f7ff fed3 	bl	8008278 <memchr>
 80084d2:	2800      	cmp	r0, #0
 80084d4:	d040      	beq.n	8008558 <_vfiprintf_r+0x210>
 80084d6:	4b28      	ldr	r3, [pc, #160]	@ (8008578 <_vfiprintf_r+0x230>)
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d122      	bne.n	8008522 <_vfiprintf_r+0x1da>
 80084dc:	2207      	movs	r2, #7
 80084de:	9b07      	ldr	r3, [sp, #28]
 80084e0:	3307      	adds	r3, #7
 80084e2:	4393      	bics	r3, r2
 80084e4:	3308      	adds	r3, #8
 80084e6:	9307      	str	r3, [sp, #28]
 80084e8:	6963      	ldr	r3, [r4, #20]
 80084ea:	9a04      	ldr	r2, [sp, #16]
 80084ec:	189b      	adds	r3, r3, r2
 80084ee:	6163      	str	r3, [r4, #20]
 80084f0:	e762      	b.n	80083b8 <_vfiprintf_r+0x70>
 80084f2:	4343      	muls	r3, r0
 80084f4:	002e      	movs	r6, r5
 80084f6:	2101      	movs	r1, #1
 80084f8:	189b      	adds	r3, r3, r2
 80084fa:	e7a4      	b.n	8008446 <_vfiprintf_r+0xfe>
 80084fc:	2300      	movs	r3, #0
 80084fe:	200a      	movs	r0, #10
 8008500:	0019      	movs	r1, r3
 8008502:	3601      	adds	r6, #1
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	7832      	ldrb	r2, [r6, #0]
 8008508:	1c75      	adds	r5, r6, #1
 800850a:	3a30      	subs	r2, #48	@ 0x30
 800850c:	2a09      	cmp	r2, #9
 800850e:	d903      	bls.n	8008518 <_vfiprintf_r+0x1d0>
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0c8      	beq.n	80084a6 <_vfiprintf_r+0x15e>
 8008514:	9109      	str	r1, [sp, #36]	@ 0x24
 8008516:	e7c6      	b.n	80084a6 <_vfiprintf_r+0x15e>
 8008518:	4341      	muls	r1, r0
 800851a:	002e      	movs	r6, r5
 800851c:	2301      	movs	r3, #1
 800851e:	1889      	adds	r1, r1, r2
 8008520:	e7f1      	b.n	8008506 <_vfiprintf_r+0x1be>
 8008522:	aa07      	add	r2, sp, #28
 8008524:	9200      	str	r2, [sp, #0]
 8008526:	0021      	movs	r1, r4
 8008528:	003a      	movs	r2, r7
 800852a:	4b14      	ldr	r3, [pc, #80]	@ (800857c <_vfiprintf_r+0x234>)
 800852c:	9803      	ldr	r0, [sp, #12]
 800852e:	e000      	b.n	8008532 <_vfiprintf_r+0x1ea>
 8008530:	bf00      	nop
 8008532:	9004      	str	r0, [sp, #16]
 8008534:	9b04      	ldr	r3, [sp, #16]
 8008536:	3301      	adds	r3, #1
 8008538:	d1d6      	bne.n	80084e8 <_vfiprintf_r+0x1a0>
 800853a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800853c:	07db      	lsls	r3, r3, #31
 800853e:	d405      	bmi.n	800854c <_vfiprintf_r+0x204>
 8008540:	89bb      	ldrh	r3, [r7, #12]
 8008542:	059b      	lsls	r3, r3, #22
 8008544:	d402      	bmi.n	800854c <_vfiprintf_r+0x204>
 8008546:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008548:	f7ff f99c 	bl	8007884 <__retarget_lock_release_recursive>
 800854c:	89bb      	ldrh	r3, [r7, #12]
 800854e:	065b      	lsls	r3, r3, #25
 8008550:	d500      	bpl.n	8008554 <_vfiprintf_r+0x20c>
 8008552:	e71e      	b.n	8008392 <_vfiprintf_r+0x4a>
 8008554:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008556:	e71e      	b.n	8008396 <_vfiprintf_r+0x4e>
 8008558:	aa07      	add	r2, sp, #28
 800855a:	9200      	str	r2, [sp, #0]
 800855c:	0021      	movs	r1, r4
 800855e:	003a      	movs	r2, r7
 8008560:	4b06      	ldr	r3, [pc, #24]	@ (800857c <_vfiprintf_r+0x234>)
 8008562:	9803      	ldr	r0, [sp, #12]
 8008564:	f7ff fc92 	bl	8007e8c <_printf_i>
 8008568:	e7e3      	b.n	8008532 <_vfiprintf_r+0x1ea>
 800856a:	46c0      	nop			@ (mov r8, r8)
 800856c:	08008cc0 	.word	0x08008cc0
 8008570:	08008cc6 	.word	0x08008cc6
 8008574:	08008cca 	.word	0x08008cca
 8008578:	00000000 	.word	0x00000000
 800857c:	08008325 	.word	0x08008325

08008580 <__swbuf_r>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	0006      	movs	r6, r0
 8008584:	000d      	movs	r5, r1
 8008586:	0014      	movs	r4, r2
 8008588:	2800      	cmp	r0, #0
 800858a:	d004      	beq.n	8008596 <__swbuf_r+0x16>
 800858c:	6a03      	ldr	r3, [r0, #32]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <__swbuf_r+0x16>
 8008592:	f7fe fff5 	bl	8007580 <__sinit>
 8008596:	69a3      	ldr	r3, [r4, #24]
 8008598:	60a3      	str	r3, [r4, #8]
 800859a:	89a3      	ldrh	r3, [r4, #12]
 800859c:	071b      	lsls	r3, r3, #28
 800859e:	d502      	bpl.n	80085a6 <__swbuf_r+0x26>
 80085a0:	6923      	ldr	r3, [r4, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d109      	bne.n	80085ba <__swbuf_r+0x3a>
 80085a6:	0021      	movs	r1, r4
 80085a8:	0030      	movs	r0, r6
 80085aa:	f000 f82b 	bl	8008604 <__swsetup_r>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d003      	beq.n	80085ba <__swbuf_r+0x3a>
 80085b2:	2501      	movs	r5, #1
 80085b4:	426d      	negs	r5, r5
 80085b6:	0028      	movs	r0, r5
 80085b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	b2ef      	uxtb	r7, r5
 80085c0:	1ac0      	subs	r0, r0, r3
 80085c2:	6963      	ldr	r3, [r4, #20]
 80085c4:	b2ed      	uxtb	r5, r5
 80085c6:	4283      	cmp	r3, r0
 80085c8:	dc05      	bgt.n	80085d6 <__swbuf_r+0x56>
 80085ca:	0021      	movs	r1, r4
 80085cc:	0030      	movs	r0, r6
 80085ce:	f7ff fdf1 	bl	80081b4 <_fflush_r>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	d1ed      	bne.n	80085b2 <__swbuf_r+0x32>
 80085d6:	68a3      	ldr	r3, [r4, #8]
 80085d8:	3001      	adds	r0, #1
 80085da:	3b01      	subs	r3, #1
 80085dc:	60a3      	str	r3, [r4, #8]
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	1c5a      	adds	r2, r3, #1
 80085e2:	6022      	str	r2, [r4, #0]
 80085e4:	701f      	strb	r7, [r3, #0]
 80085e6:	6963      	ldr	r3, [r4, #20]
 80085e8:	4283      	cmp	r3, r0
 80085ea:	d004      	beq.n	80085f6 <__swbuf_r+0x76>
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	07db      	lsls	r3, r3, #31
 80085f0:	d5e1      	bpl.n	80085b6 <__swbuf_r+0x36>
 80085f2:	2d0a      	cmp	r5, #10
 80085f4:	d1df      	bne.n	80085b6 <__swbuf_r+0x36>
 80085f6:	0021      	movs	r1, r4
 80085f8:	0030      	movs	r0, r6
 80085fa:	f7ff fddb 	bl	80081b4 <_fflush_r>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d0d9      	beq.n	80085b6 <__swbuf_r+0x36>
 8008602:	e7d6      	b.n	80085b2 <__swbuf_r+0x32>

08008604 <__swsetup_r>:
 8008604:	4b2d      	ldr	r3, [pc, #180]	@ (80086bc <__swsetup_r+0xb8>)
 8008606:	b570      	push	{r4, r5, r6, lr}
 8008608:	0005      	movs	r5, r0
 800860a:	6818      	ldr	r0, [r3, #0]
 800860c:	000c      	movs	r4, r1
 800860e:	2800      	cmp	r0, #0
 8008610:	d004      	beq.n	800861c <__swsetup_r+0x18>
 8008612:	6a03      	ldr	r3, [r0, #32]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <__swsetup_r+0x18>
 8008618:	f7fe ffb2 	bl	8007580 <__sinit>
 800861c:	230c      	movs	r3, #12
 800861e:	5ee2      	ldrsh	r2, [r4, r3]
 8008620:	0713      	lsls	r3, r2, #28
 8008622:	d423      	bmi.n	800866c <__swsetup_r+0x68>
 8008624:	06d3      	lsls	r3, r2, #27
 8008626:	d407      	bmi.n	8008638 <__swsetup_r+0x34>
 8008628:	2309      	movs	r3, #9
 800862a:	602b      	str	r3, [r5, #0]
 800862c:	2340      	movs	r3, #64	@ 0x40
 800862e:	2001      	movs	r0, #1
 8008630:	4313      	orrs	r3, r2
 8008632:	81a3      	strh	r3, [r4, #12]
 8008634:	4240      	negs	r0, r0
 8008636:	e03a      	b.n	80086ae <__swsetup_r+0xaa>
 8008638:	0752      	lsls	r2, r2, #29
 800863a:	d513      	bpl.n	8008664 <__swsetup_r+0x60>
 800863c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800863e:	2900      	cmp	r1, #0
 8008640:	d008      	beq.n	8008654 <__swsetup_r+0x50>
 8008642:	0023      	movs	r3, r4
 8008644:	3344      	adds	r3, #68	@ 0x44
 8008646:	4299      	cmp	r1, r3
 8008648:	d002      	beq.n	8008650 <__swsetup_r+0x4c>
 800864a:	0028      	movs	r0, r5
 800864c:	f7ff f94a 	bl	80078e4 <_free_r>
 8008650:	2300      	movs	r3, #0
 8008652:	6363      	str	r3, [r4, #52]	@ 0x34
 8008654:	2224      	movs	r2, #36	@ 0x24
 8008656:	89a3      	ldrh	r3, [r4, #12]
 8008658:	4393      	bics	r3, r2
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	2300      	movs	r3, #0
 800865e:	6063      	str	r3, [r4, #4]
 8008660:	6923      	ldr	r3, [r4, #16]
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	2308      	movs	r3, #8
 8008666:	89a2      	ldrh	r2, [r4, #12]
 8008668:	4313      	orrs	r3, r2
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	6923      	ldr	r3, [r4, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10b      	bne.n	800868a <__swsetup_r+0x86>
 8008672:	21a0      	movs	r1, #160	@ 0xa0
 8008674:	2280      	movs	r2, #128	@ 0x80
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	0089      	lsls	r1, r1, #2
 800867a:	0092      	lsls	r2, r2, #2
 800867c:	400b      	ands	r3, r1
 800867e:	4293      	cmp	r3, r2
 8008680:	d003      	beq.n	800868a <__swsetup_r+0x86>
 8008682:	0021      	movs	r1, r4
 8008684:	0028      	movs	r0, r5
 8008686:	f000 f897 	bl	80087b8 <__smakebuf_r>
 800868a:	230c      	movs	r3, #12
 800868c:	5ee2      	ldrsh	r2, [r4, r3]
 800868e:	2101      	movs	r1, #1
 8008690:	0013      	movs	r3, r2
 8008692:	400b      	ands	r3, r1
 8008694:	420a      	tst	r2, r1
 8008696:	d00b      	beq.n	80086b0 <__swsetup_r+0xac>
 8008698:	2300      	movs	r3, #0
 800869a:	60a3      	str	r3, [r4, #8]
 800869c:	6963      	ldr	r3, [r4, #20]
 800869e:	425b      	negs	r3, r3
 80086a0:	61a3      	str	r3, [r4, #24]
 80086a2:	2000      	movs	r0, #0
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	4283      	cmp	r3, r0
 80086a8:	d101      	bne.n	80086ae <__swsetup_r+0xaa>
 80086aa:	0613      	lsls	r3, r2, #24
 80086ac:	d4be      	bmi.n	800862c <__swsetup_r+0x28>
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	0791      	lsls	r1, r2, #30
 80086b2:	d400      	bmi.n	80086b6 <__swsetup_r+0xb2>
 80086b4:	6963      	ldr	r3, [r4, #20]
 80086b6:	60a3      	str	r3, [r4, #8]
 80086b8:	e7f3      	b.n	80086a2 <__swsetup_r+0x9e>
 80086ba:	46c0      	nop			@ (mov r8, r8)
 80086bc:	2000019c 	.word	0x2000019c

080086c0 <_raise_r>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	0004      	movs	r4, r0
 80086c4:	000d      	movs	r5, r1
 80086c6:	291f      	cmp	r1, #31
 80086c8:	d904      	bls.n	80086d4 <_raise_r+0x14>
 80086ca:	2316      	movs	r3, #22
 80086cc:	6003      	str	r3, [r0, #0]
 80086ce:	2001      	movs	r0, #1
 80086d0:	4240      	negs	r0, r0
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d004      	beq.n	80086e4 <_raise_r+0x24>
 80086da:	008a      	lsls	r2, r1, #2
 80086dc:	189b      	adds	r3, r3, r2
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	2a00      	cmp	r2, #0
 80086e2:	d108      	bne.n	80086f6 <_raise_r+0x36>
 80086e4:	0020      	movs	r0, r4
 80086e6:	f000 f831 	bl	800874c <_getpid_r>
 80086ea:	002a      	movs	r2, r5
 80086ec:	0001      	movs	r1, r0
 80086ee:	0020      	movs	r0, r4
 80086f0:	f000 f81a 	bl	8008728 <_kill_r>
 80086f4:	e7ed      	b.n	80086d2 <_raise_r+0x12>
 80086f6:	2a01      	cmp	r2, #1
 80086f8:	d009      	beq.n	800870e <_raise_r+0x4e>
 80086fa:	1c51      	adds	r1, r2, #1
 80086fc:	d103      	bne.n	8008706 <_raise_r+0x46>
 80086fe:	2316      	movs	r3, #22
 8008700:	6003      	str	r3, [r0, #0]
 8008702:	2001      	movs	r0, #1
 8008704:	e7e5      	b.n	80086d2 <_raise_r+0x12>
 8008706:	2100      	movs	r1, #0
 8008708:	0028      	movs	r0, r5
 800870a:	6019      	str	r1, [r3, #0]
 800870c:	4790      	blx	r2
 800870e:	2000      	movs	r0, #0
 8008710:	e7df      	b.n	80086d2 <_raise_r+0x12>
	...

08008714 <raise>:
 8008714:	b510      	push	{r4, lr}
 8008716:	4b03      	ldr	r3, [pc, #12]	@ (8008724 <raise+0x10>)
 8008718:	0001      	movs	r1, r0
 800871a:	6818      	ldr	r0, [r3, #0]
 800871c:	f7ff ffd0 	bl	80086c0 <_raise_r>
 8008720:	bd10      	pop	{r4, pc}
 8008722:	46c0      	nop			@ (mov r8, r8)
 8008724:	2000019c 	.word	0x2000019c

08008728 <_kill_r>:
 8008728:	2300      	movs	r3, #0
 800872a:	b570      	push	{r4, r5, r6, lr}
 800872c:	4d06      	ldr	r5, [pc, #24]	@ (8008748 <_kill_r+0x20>)
 800872e:	0004      	movs	r4, r0
 8008730:	0008      	movs	r0, r1
 8008732:	0011      	movs	r1, r2
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	f7f9 fcb9 	bl	80020ac <_kill>
 800873a:	1c43      	adds	r3, r0, #1
 800873c:	d103      	bne.n	8008746 <_kill_r+0x1e>
 800873e:	682b      	ldr	r3, [r5, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d000      	beq.n	8008746 <_kill_r+0x1e>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd70      	pop	{r4, r5, r6, pc}
 8008748:	20001740 	.word	0x20001740

0800874c <_getpid_r>:
 800874c:	b510      	push	{r4, lr}
 800874e:	f7f9 fcab 	bl	80020a8 <_getpid>
 8008752:	bd10      	pop	{r4, pc}

08008754 <_malloc_usable_size_r>:
 8008754:	1f0b      	subs	r3, r1, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	1f18      	subs	r0, r3, #4
 800875a:	2b00      	cmp	r3, #0
 800875c:	da01      	bge.n	8008762 <_malloc_usable_size_r+0xe>
 800875e:	580b      	ldr	r3, [r1, r0]
 8008760:	18c0      	adds	r0, r0, r3
 8008762:	4770      	bx	lr

08008764 <__swhatbuf_r>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	000e      	movs	r6, r1
 8008768:	001d      	movs	r5, r3
 800876a:	230e      	movs	r3, #14
 800876c:	5ec9      	ldrsh	r1, [r1, r3]
 800876e:	0014      	movs	r4, r2
 8008770:	b096      	sub	sp, #88	@ 0x58
 8008772:	2900      	cmp	r1, #0
 8008774:	da0c      	bge.n	8008790 <__swhatbuf_r+0x2c>
 8008776:	89b2      	ldrh	r2, [r6, #12]
 8008778:	2380      	movs	r3, #128	@ 0x80
 800877a:	0011      	movs	r1, r2
 800877c:	4019      	ands	r1, r3
 800877e:	421a      	tst	r2, r3
 8008780:	d114      	bne.n	80087ac <__swhatbuf_r+0x48>
 8008782:	2380      	movs	r3, #128	@ 0x80
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	2000      	movs	r0, #0
 8008788:	6029      	str	r1, [r5, #0]
 800878a:	6023      	str	r3, [r4, #0]
 800878c:	b016      	add	sp, #88	@ 0x58
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	466a      	mov	r2, sp
 8008792:	f000 f853 	bl	800883c <_fstat_r>
 8008796:	2800      	cmp	r0, #0
 8008798:	dbed      	blt.n	8008776 <__swhatbuf_r+0x12>
 800879a:	23f0      	movs	r3, #240	@ 0xf0
 800879c:	9901      	ldr	r1, [sp, #4]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	4019      	ands	r1, r3
 80087a2:	4b04      	ldr	r3, [pc, #16]	@ (80087b4 <__swhatbuf_r+0x50>)
 80087a4:	18c9      	adds	r1, r1, r3
 80087a6:	424b      	negs	r3, r1
 80087a8:	4159      	adcs	r1, r3
 80087aa:	e7ea      	b.n	8008782 <__swhatbuf_r+0x1e>
 80087ac:	2100      	movs	r1, #0
 80087ae:	2340      	movs	r3, #64	@ 0x40
 80087b0:	e7e9      	b.n	8008786 <__swhatbuf_r+0x22>
 80087b2:	46c0      	nop			@ (mov r8, r8)
 80087b4:	ffffe000 	.word	0xffffe000

080087b8 <__smakebuf_r>:
 80087b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ba:	2602      	movs	r6, #2
 80087bc:	898b      	ldrh	r3, [r1, #12]
 80087be:	0005      	movs	r5, r0
 80087c0:	000c      	movs	r4, r1
 80087c2:	b085      	sub	sp, #20
 80087c4:	4233      	tst	r3, r6
 80087c6:	d007      	beq.n	80087d8 <__smakebuf_r+0x20>
 80087c8:	0023      	movs	r3, r4
 80087ca:	3347      	adds	r3, #71	@ 0x47
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	2301      	movs	r3, #1
 80087d2:	6163      	str	r3, [r4, #20]
 80087d4:	b005      	add	sp, #20
 80087d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d8:	ab03      	add	r3, sp, #12
 80087da:	aa02      	add	r2, sp, #8
 80087dc:	f7ff ffc2 	bl	8008764 <__swhatbuf_r>
 80087e0:	9f02      	ldr	r7, [sp, #8]
 80087e2:	9001      	str	r0, [sp, #4]
 80087e4:	0039      	movs	r1, r7
 80087e6:	0028      	movs	r0, r5
 80087e8:	f7ff f8f2 	bl	80079d0 <_malloc_r>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d108      	bne.n	8008802 <__smakebuf_r+0x4a>
 80087f0:	220c      	movs	r2, #12
 80087f2:	5ea3      	ldrsh	r3, [r4, r2]
 80087f4:	059a      	lsls	r2, r3, #22
 80087f6:	d4ed      	bmi.n	80087d4 <__smakebuf_r+0x1c>
 80087f8:	2203      	movs	r2, #3
 80087fa:	4393      	bics	r3, r2
 80087fc:	431e      	orrs	r6, r3
 80087fe:	81a6      	strh	r6, [r4, #12]
 8008800:	e7e2      	b.n	80087c8 <__smakebuf_r+0x10>
 8008802:	2380      	movs	r3, #128	@ 0x80
 8008804:	89a2      	ldrh	r2, [r4, #12]
 8008806:	6020      	str	r0, [r4, #0]
 8008808:	4313      	orrs	r3, r2
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	6120      	str	r0, [r4, #16]
 8008810:	6167      	str	r7, [r4, #20]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00c      	beq.n	8008830 <__smakebuf_r+0x78>
 8008816:	0028      	movs	r0, r5
 8008818:	230e      	movs	r3, #14
 800881a:	5ee1      	ldrsh	r1, [r4, r3]
 800881c:	f000 f820 	bl	8008860 <_isatty_r>
 8008820:	2800      	cmp	r0, #0
 8008822:	d005      	beq.n	8008830 <__smakebuf_r+0x78>
 8008824:	2303      	movs	r3, #3
 8008826:	89a2      	ldrh	r2, [r4, #12]
 8008828:	439a      	bics	r2, r3
 800882a:	3b02      	subs	r3, #2
 800882c:	4313      	orrs	r3, r2
 800882e:	81a3      	strh	r3, [r4, #12]
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	9a01      	ldr	r2, [sp, #4]
 8008834:	4313      	orrs	r3, r2
 8008836:	81a3      	strh	r3, [r4, #12]
 8008838:	e7cc      	b.n	80087d4 <__smakebuf_r+0x1c>
	...

0800883c <_fstat_r>:
 800883c:	2300      	movs	r3, #0
 800883e:	b570      	push	{r4, r5, r6, lr}
 8008840:	4d06      	ldr	r5, [pc, #24]	@ (800885c <_fstat_r+0x20>)
 8008842:	0004      	movs	r4, r0
 8008844:	0008      	movs	r0, r1
 8008846:	0011      	movs	r1, r2
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	f7f9 fc5d 	bl	8002108 <_fstat>
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	d103      	bne.n	800885a <_fstat_r+0x1e>
 8008852:	682b      	ldr	r3, [r5, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d000      	beq.n	800885a <_fstat_r+0x1e>
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	20001740 	.word	0x20001740

08008860 <_isatty_r>:
 8008860:	2300      	movs	r3, #0
 8008862:	b570      	push	{r4, r5, r6, lr}
 8008864:	4d06      	ldr	r5, [pc, #24]	@ (8008880 <_isatty_r+0x20>)
 8008866:	0004      	movs	r4, r0
 8008868:	0008      	movs	r0, r1
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	f7f9 fc52 	bl	8002114 <_isatty>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d103      	bne.n	800887c <_isatty_r+0x1c>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d000      	beq.n	800887c <_isatty_r+0x1c>
 800887a:	6023      	str	r3, [r4, #0]
 800887c:	bd70      	pop	{r4, r5, r6, pc}
 800887e:	46c0      	nop			@ (mov r8, r8)
 8008880:	20001740 	.word	0x20001740

08008884 <_init>:
 8008884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008886:	46c0      	nop			@ (mov r8, r8)
 8008888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888a:	bc08      	pop	{r3}
 800888c:	469e      	mov	lr, r3
 800888e:	4770      	bx	lr

08008890 <_fini>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	46c0      	nop			@ (mov r8, r8)
 8008894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008896:	bc08      	pop	{r3}
 8008898:	469e      	mov	lr, r3
 800889a:	4770      	bx	lr
