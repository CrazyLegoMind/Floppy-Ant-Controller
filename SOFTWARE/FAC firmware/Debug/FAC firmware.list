
FAC firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a04  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08008ac4  08008ac4  00009ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f68  08008f68  0000a1ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008f68  08008f68  0000a1ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008f68  08008f68  0000a1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f68  08008f68  00009f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f6c  08008f6c  00009f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08008f70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001564  200001ec  0800915c  0000a1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001750  0800915c  0000a750  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000248b4  00000000  00000000  0000a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000583c  00000000  00000000  0002eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000138b3  00000000  00000000  00034304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00047bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000021b2  00000000  00000000  00048fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020aa0  00000000  00000000  0004b182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005c4e  00000000  00000000  0006bc22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00071870  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b4  00000000  00000000  000718b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00075a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008aac 	.word	0x08008aac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	08008aac 	.word	0x08008aac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <initBattery>:
 8000418:	b510      	push	{r4, lr}
 800041a:	4c07      	ldr	r4, [pc, #28]	@ (8000438 <initBattery+0x20>)
 800041c:	0020      	movs	r0, r4
 800041e:	f002 f8c7 	bl	80025b0 <HAL_ADC_Init>
 8000422:	0020      	movs	r0, r4
 8000424:	f002 f968 	bl	80026f8 <HAL_ADC_Start>
 8000428:	0020      	movs	r0, r4
 800042a:	f002 f9b1 	bl	8002790 <HAL_ADC_GetValue>
 800042e:	0020      	movs	r0, r4
 8000430:	f002 f98e 	bl	8002750 <HAL_ADC_Stop>
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	200003a4 	.word	0x200003a4

0800043c <getBatteryConfiguration>:
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	4d16      	ldr	r5, [pc, #88]	@ (8000498 <getBatteryConfiguration+0x5c>)
 8000440:	0028      	movs	r0, r5
 8000442:	f002 f959 	bl	80026f8 <HAL_ADC_Start>
 8000446:	0028      	movs	r0, r5
 8000448:	f002 f9a2 	bl	8002790 <HAL_ADC_GetValue>
 800044c:	0004      	movs	r4, r0
 800044e:	0028      	movs	r0, r5
 8000450:	f002 f97e 	bl	8002750 <HAL_ADC_Stop>
 8000454:	21fa      	movs	r1, #250	@ 0xfa
 8000456:	0423      	lsls	r3, r4, #16
 8000458:	0c1a      	lsrs	r2, r3, #16
 800045a:	0b9b      	lsrs	r3, r3, #14
 800045c:	189b      	adds	r3, r3, r2
 800045e:	015b      	lsls	r3, r3, #5
 8000460:	189b      	adds	r3, r3, r2
 8000462:	0118      	lsls	r0, r3, #4
 8000464:	1ac0      	subs	r0, r0, r3
 8000466:	0089      	lsls	r1, r1, #2
 8000468:	f7ff fe60 	bl	800012c <__udivsi3>
 800046c:	22e1      	movs	r2, #225	@ 0xe1
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <getBatteryConfiguration+0x60>)
 8000470:	b280      	uxth	r0, r0
 8000472:	18c3      	adds	r3, r0, r3
 8000474:	b29b      	uxth	r3, r3
 8000476:	00d2      	lsls	r2, r2, #3
 8000478:	4293      	cmp	r3, r2
 800047a:	d90a      	bls.n	8000492 <getBatteryConfiguration+0x56>
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <getBatteryConfiguration+0x64>)
 800047e:	22c8      	movs	r2, #200	@ 0xc8
 8000480:	469c      	mov	ip, r3
 8000482:	4460      	add	r0, ip
 8000484:	b283      	uxth	r3, r0
 8000486:	2000      	movs	r0, #0
 8000488:	0112      	lsls	r2, r2, #4
 800048a:	429a      	cmp	r2, r3
 800048c:	4140      	adcs	r0, r0
 800048e:	0040      	lsls	r0, r0, #1
 8000490:	bd70      	pop	{r4, r5, r6, pc}
 8000492:	2001      	movs	r0, #1
 8000494:	e7fc      	b.n	8000490 <getBatteryConfiguration+0x54>
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	200003a4 	.word	0x200003a4
 800049c:	fffff63c 	.word	0xfffff63c
 80004a0:	ffffeb4c 	.word	0xffffeb4c

080004a4 <getBattVoltage>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	4d0d      	ldr	r5, [pc, #52]	@ (80004dc <getBattVoltage+0x38>)
 80004a8:	0028      	movs	r0, r5
 80004aa:	f002 f925 	bl	80026f8 <HAL_ADC_Start>
 80004ae:	0028      	movs	r0, r5
 80004b0:	f002 f96e 	bl	8002790 <HAL_ADC_GetValue>
 80004b4:	0004      	movs	r4, r0
 80004b6:	0028      	movs	r0, r5
 80004b8:	f002 f94a 	bl	8002750 <HAL_ADC_Stop>
 80004bc:	21fa      	movs	r1, #250	@ 0xfa
 80004be:	0423      	lsls	r3, r4, #16
 80004c0:	0c1a      	lsrs	r2, r3, #16
 80004c2:	0b9b      	lsrs	r3, r3, #14
 80004c4:	189b      	adds	r3, r3, r2
 80004c6:	015b      	lsls	r3, r3, #5
 80004c8:	189b      	adds	r3, r3, r2
 80004ca:	0118      	lsls	r0, r3, #4
 80004cc:	1ac0      	subs	r0, r0, r3
 80004ce:	0089      	lsls	r1, r1, #2
 80004d0:	f7ff fe2c 	bl	800012c <__udivsi3>
 80004d4:	3064      	adds	r0, #100	@ 0x64
 80004d6:	b280      	uxth	r0, r0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	200003a4 	.word	0x200003a4

080004e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004e0:	b510      	push	{r4, lr}
 80004e2:	b096      	sub	sp, #88	@ 0x58
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004e4:	2228      	movs	r2, #40	@ 0x28
 80004e6:	2100      	movs	r1, #0
 80004e8:	a80c      	add	r0, sp, #48	@ 0x30
 80004ea:	f007 f9fd 	bl	80078e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004ee:	2210      	movs	r2, #16
 80004f0:	2100      	movs	r1, #0
 80004f2:	a801      	add	r0, sp, #4
 80004f4:	f007 f9f8 	bl	80078e8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80004f8:	2214      	movs	r2, #20
 80004fa:	2100      	movs	r1, #0
 80004fc:	a805      	add	r0, sp, #20
 80004fe:	f007 f9f3 	bl	80078e8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSI14 | RCC_OSCILLATORTYPE_HSE;
 8000502:	2213      	movs	r2, #19
 8000504:	2301      	movs	r3, #1
 8000506:	920a      	str	r2, [sp, #40]	@ 0x28
 8000508:	930b      	str	r3, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050a:	2301      	movs	r3, #1
 800050c:	930d      	str	r3, [sp, #52]	@ 0x34
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800050e:	930f      	str	r3, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	2202      	movs	r2, #2
 8000514:	025b      	lsls	r3, r3, #9
 8000516:	9212      	str	r2, [sp, #72]	@ 0x48
 8000518:	9313      	str	r3, [sp, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800051a:	2380      	movs	r3, #128	@ 0x80
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800051c:	2410      	movs	r4, #16
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800051e:	035b      	lsls	r3, r3, #13
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000520:	a80a      	add	r0, sp, #40	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000522:	940e      	str	r4, [sp, #56]	@ 0x38
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000524:	9410      	str	r4, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000526:	9314      	str	r3, [sp, #80]	@ 0x50
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000528:	f004 f966 	bl	80047f8 <HAL_RCC_OscConfig>
 800052c:	2800      	cmp	r0, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000532:	e7fe      	b.n	8000532 <SystemClock_Config+0x52>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000534:	2307      	movs	r3, #7
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000538:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053a:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053c:	3b05      	subs	r3, #5
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800053e:	2101      	movs	r1, #1
 8000540:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000542:	9302      	str	r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000544:	f004 fbbc 	bl	8004cc0 <HAL_RCC_ClockConfig>
 8000548:	2800      	cmp	r0, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x70>
 800054c:	b672      	cpsid	i
	while (1) {
 800054e:	e7fe      	b.n	800054e <SystemClock_Config+0x6e>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_I2C1;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <SystemClock_Config+0x8c>)
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000552:	9008      	str	r0, [sp, #32]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_I2C1;
 8000554:	9305      	str	r3, [sp, #20]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000556:	2380      	movs	r3, #128	@ 0x80
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000558:	a805      	add	r0, sp, #20
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800055a:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800055c:	f004 fc56 	bl	8004e0c <HAL_RCCEx_PeriphCLKConfig>
 8000560:	2800      	cmp	r0, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x88>
 8000564:	b672      	cpsid	i
	while (1) {
 8000566:	e7fe      	b.n	8000566 <SystemClock_Config+0x86>
}
 8000568:	b016      	add	sp, #88	@ 0x58
 800056a:	bd10      	pop	{r4, pc}
 800056c:	00020020 	.word	0x00020020

08000570 <main>:
int main(void) {
 8000570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000572:	46de      	mov	lr, fp
 8000574:	4645      	mov	r5, r8
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	b5e0      	push	{r5, r6, r7, lr}
 800057c:	b0b3      	sub	sp, #204	@ 0xcc
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800057e:	ac2a      	add	r4, sp, #168	@ 0xa8
	HAL_Init();
 8000580:	f001 ff12 	bl	80023a8 <HAL_Init>
	SystemClock_Config();
 8000584:	f7ff ffac 	bl	80004e0 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000588:	2214      	movs	r2, #20
 800058a:	2100      	movs	r1, #0
 800058c:	0020      	movs	r0, r4
 800058e:	f007 f9ab 	bl	80078e8 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2180      	movs	r1, #128	@ 0x80
 8000594:	4bcf      	ldr	r3, [pc, #828]	@ (80008d4 <main+0x364>)
 8000596:	0309      	lsls	r1, r1, #12
 8000598:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 800059a:	2580      	movs	r5, #128	@ 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800059c:	430a      	orrs	r2, r1
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin,
 80005a2:	27fc      	movs	r7, #252	@ 0xfc
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005a4:	400a      	ands	r2, r1
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005a6:	2180      	movs	r1, #128	@ 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80005aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	03c9      	lsls	r1, r1, #15
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005b6:	022d      	lsls	r5, r5, #8
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005b8:	400a      	ands	r2, r1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2180      	movs	r1, #128	@ 0x80
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80005be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	0289      	lsls	r1, r1, #10
 80005c4:	430a      	orrs	r2, r1
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	695a      	ldr	r2, [r3, #20]
	HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin,
 80005ca:	023f      	lsls	r7, r7, #8
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	400a      	ands	r2, r1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	2180      	movs	r1, #128	@ 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	921b      	str	r2, [sp, #108]	@ 0x6c
 80005d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005d4:	695a      	ldr	r2, [r3, #20]
 80005d6:	02c9      	lsls	r1, r1, #11
 80005d8:	430a      	orrs	r2, r1
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005de:	2200      	movs	r2, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005e0:	400b      	ands	r3, r1
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005e2:	48bd      	ldr	r0, [pc, #756]	@ (80008d8 <main+0x368>)
 80005e4:	0029      	movs	r1, r5
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	931c      	str	r3, [sp, #112]	@ 0x70
 80005e8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 80005ea:	f002 faad 	bl	8002b48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin,
 80005ee:	2200      	movs	r2, #0
 80005f0:	0039      	movs	r1, r7
 80005f2:	48ba      	ldr	r0, [pc, #744]	@ (80008dc <main+0x36c>)
 80005f4:	f002 faa8 	bl	8002b48 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2600      	movs	r6, #0
	GPIO_InitStruct.Pin = U_LED_Pin;
 80005fa:	952a      	str	r5, [sp, #168]	@ 0xa8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2501      	movs	r5, #1
	HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 80005fe:	0021      	movs	r1, r4
 8000600:	48b5      	ldr	r0, [pc, #724]	@ (80008d8 <main+0x368>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	6065      	str	r5, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	60a6      	str	r6, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	60e6      	str	r6, [r4, #12]
	HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 8000608:	f002 f996 	bl	8002938 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800060c:	23c4      	movs	r3, #196	@ 0xc4
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 800060e:	0021      	movs	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000610:	039b      	lsls	r3, r3, #14
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 8000612:	48b2      	ldr	r0, [pc, #712]	@ (80008dc <main+0x36c>)
	GPIO_InitStruct.Pin = CH1_Pin;
 8000614:	952a      	str	r5, [sp, #168]	@ 0xa8
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000616:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000618:	60a5      	str	r5, [r4, #8]
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 800061a:	f002 f98d 	bl	8002938 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CH2_Pin | CH3_Pin | CH4_Pin;
 800061e:	230e      	movs	r3, #14
 8000620:	932a      	str	r3, [sp, #168]	@ 0xa8
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000622:	2384      	movs	r3, #132	@ 0x84
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000624:	0021      	movs	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000626:	039b      	lsls	r3, r3, #14
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	48ac      	ldr	r0, [pc, #688]	@ (80008dc <main+0x36c>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062a:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062c:	60a5      	str	r5, [r4, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	f002 f983 	bl	8002938 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	0021      	movs	r1, r4
 8000634:	48a9      	ldr	r0, [pc, #676]	@ (80008dc <main+0x36c>)
	GPIO_InitStruct.Pin = SLEEPN_M3_Pin | DIR_M3_Pin | SLEEPN_M2_Pin | DIR_M2_Pin | SLEEPN_M1_Pin | DIR_M1_Pin;
 8000636:	972a      	str	r7, [sp, #168]	@ 0xa8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	6065      	str	r5, [r4, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	60a6      	str	r6, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	60e6      	str	r6, [r4, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800063e:	f002 f97b 	bl	8002938 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	2005      	movs	r0, #5
 8000648:	f002 f926 	bl	8002898 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800064c:	2005      	movs	r0, #5
 800064e:	f002 f94d 	bl	80028ec <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	2006      	movs	r0, #6
 8000658:	f002 f91e 	bl	8002898 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800065c:	2006      	movs	r0, #6
 800065e:	f002 f945 	bl	80028ec <HAL_NVIC_EnableIRQ>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000662:	221c      	movs	r2, #28
 8000664:	2100      	movs	r1, #0
 8000666:	a823      	add	r0, sp, #140	@ 0x8c
 8000668:	f007 f93e 	bl	80078e8 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800066c:	2220      	movs	r2, #32
 800066e:	2100      	movs	r1, #0
 8000670:	0020      	movs	r0, r4
 8000672:	f007 f939 	bl	80078e8 <memset>
	htim16.Instance = TIM16;
 8000676:	4d9a      	ldr	r5, [pc, #616]	@ (80008e0 <main+0x370>)
 8000678:	4b9a      	ldr	r3, [pc, #616]	@ (80008e4 <main+0x374>)
	htim16.Init.Period = 10000 - 1;
 800067a:	4f9b      	ldr	r7, [pc, #620]	@ (80008e8 <main+0x378>)
	htim16.Instance = TIM16;
 800067c:	602b      	str	r3, [r5, #0]
	htim16.Init.Prescaler = 24 - 1;
 800067e:	2317      	movs	r3, #23
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000680:	0028      	movs	r0, r5
	htim16.Init.Prescaler = 24 - 1;
 8000682:	4698      	mov	r8, r3
 8000684:	606b      	str	r3, [r5, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	60ae      	str	r6, [r5, #8]
	htim16.Init.Period = 10000 - 1;
 8000688:	60ef      	str	r7, [r5, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800068a:	612e      	str	r6, [r5, #16]
	htim16.Init.RepetitionCounter = 0;
 800068c:	616e      	str	r6, [r5, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068e:	61ae      	str	r6, [r5, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000690:	f004 fc94 	bl	8004fbc <HAL_TIM_Base_Init>
 8000694:	2800      	cmp	r0, #0
 8000696:	d001      	beq.n	800069c <main+0x12c>
 8000698:	b672      	cpsid	i
	while (1) {
 800069a:	e7fe      	b.n	800069a <main+0x12a>
	if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 800069c:	0028      	movs	r0, r5
 800069e:	f004 fd3b 	bl	8005118 <HAL_TIM_PWM_Init>
 80006a2:	1e02      	subs	r2, r0, #0
 80006a4:	d001      	beq.n	80006aa <main+0x13a>
 80006a6:	b672      	cpsid	i
	while (1) {
 80006a8:	e7fe      	b.n	80006a8 <main+0x138>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006aa:	2360      	movs	r3, #96	@ 0x60
	sConfigOC.Pulse = 0;
 80006ac:	9024      	str	r0, [sp, #144]	@ 0x90
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ae:	9025      	str	r0, [sp, #148]	@ 0x94
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006b0:	9026      	str	r0, [sp, #152]	@ 0x98
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b2:	9027      	str	r0, [sp, #156]	@ 0x9c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b4:	9028      	str	r0, [sp, #160]	@ 0xa0
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006b6:	9029      	str	r0, [sp, #164]	@ 0xa4
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80006b8:	a923      	add	r1, sp, #140	@ 0x8c
 80006ba:	0028      	movs	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	469b      	mov	fp, r3
 80006be:	9323      	str	r3, [sp, #140]	@ 0x8c
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80006c0:	f004 fe04 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 80006c4:	2800      	cmp	r0, #0
 80006c6:	d001      	beq.n	80006cc <main+0x15c>
 80006c8:	b672      	cpsid	i
	while (1) {
 80006ca:	e7fe      	b.n	80006ca <main+0x15a>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006cc:	2380      	movs	r3, #128	@ 0x80
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ce:	902a      	str	r0, [sp, #168]	@ 0xa8
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006d0:	019b      	lsls	r3, r3, #6
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d2:	6060      	str	r0, [r4, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d4:	60a0      	str	r0, [r4, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80006d6:	60e0      	str	r0, [r4, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006d8:	6120      	str	r0, [r4, #16]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006da:	61e0      	str	r0, [r4, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK) {
 80006dc:	0021      	movs	r1, r4
 80006de:	0028      	movs	r0, r5
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e0:	469a      	mov	sl, r3
 80006e2:	6163      	str	r3, [r4, #20]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK) {
 80006e4:	f005 f866 	bl	80057b4 <HAL_TIMEx_ConfigBreakDeadTime>
 80006e8:	4681      	mov	r9, r0
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d001      	beq.n	80006f2 <main+0x182>
 80006ee:	b672      	cpsid	i
	while (1) {
 80006f0:	e7fe      	b.n	80006f0 <main+0x180>
	HAL_TIM_MspPostInit(&htim16);
 80006f2:	0028      	movs	r0, r5
 80006f4:	f001 fd30 	bl	8002158 <HAL_TIM_MspPostInit>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80006f8:	221c      	movs	r2, #28
 80006fa:	4649      	mov	r1, r9
 80006fc:	a823      	add	r0, sp, #140	@ 0x8c
 80006fe:	f007 f8f3 	bl	80078e8 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000702:	2220      	movs	r2, #32
 8000704:	4649      	mov	r1, r9
 8000706:	0020      	movs	r0, r4
 8000708:	f007 f8ee 	bl	80078e8 <memset>
	htim17.Instance = TIM17;
 800070c:	4e77      	ldr	r6, [pc, #476]	@ (80008ec <main+0x37c>)
 800070e:	4b78      	ldr	r3, [pc, #480]	@ (80008f0 <main+0x380>)
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000710:	0030      	movs	r0, r6
	htim17.Instance = TIM17;
 8000712:	6033      	str	r3, [r6, #0]
	htim17.Init.Prescaler = 24 - 1;
 8000714:	4643      	mov	r3, r8
 8000716:	6073      	str	r3, [r6, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000718:	464b      	mov	r3, r9
	htim17.Init.Period = 10000 - 1;
 800071a:	60f7      	str	r7, [r6, #12]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071c:	60b3      	str	r3, [r6, #8]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071e:	6133      	str	r3, [r6, #16]
	htim17.Init.RepetitionCounter = 0;
 8000720:	6173      	str	r3, [r6, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000722:	61b3      	str	r3, [r6, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8000724:	f004 fc4a 	bl	8004fbc <HAL_TIM_Base_Init>
 8000728:	2800      	cmp	r0, #0
 800072a:	d001      	beq.n	8000730 <main+0x1c0>
 800072c:	b672      	cpsid	i
	while (1) {
 800072e:	e7fe      	b.n	800072e <main+0x1be>
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 8000730:	0030      	movs	r0, r6
 8000732:	f004 fcf1 	bl	8005118 <HAL_TIM_PWM_Init>
 8000736:	1e02      	subs	r2, r0, #0
 8000738:	d001      	beq.n	800073e <main+0x1ce>
 800073a:	b672      	cpsid	i
	while (1) {
 800073c:	e7fe      	b.n	800073c <main+0x1cc>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800073e:	465b      	mov	r3, fp
	sConfigOC.Pulse = 0;
 8000740:	9024      	str	r0, [sp, #144]	@ 0x90
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000742:	9025      	str	r0, [sp, #148]	@ 0x94
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000744:	9026      	str	r0, [sp, #152]	@ 0x98
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000746:	9027      	str	r0, [sp, #156]	@ 0x9c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000748:	9028      	str	r0, [sp, #160]	@ 0xa0
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800074a:	9029      	str	r0, [sp, #164]	@ 0xa4
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800074c:	a923      	add	r1, sp, #140	@ 0x8c
 800074e:	0030      	movs	r0, r6
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000750:	9323      	str	r3, [sp, #140]	@ 0x8c
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000752:	f004 fdbb 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 8000756:	2800      	cmp	r0, #0
 8000758:	d001      	beq.n	800075e <main+0x1ee>
 800075a:	b672      	cpsid	i
	while (1) {
 800075c:	e7fe      	b.n	800075c <main+0x1ec>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800075e:	4653      	mov	r3, sl
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000760:	902a      	str	r0, [sp, #168]	@ 0xa8
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
 8000762:	0021      	movs	r1, r4
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000764:	6060      	str	r0, [r4, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000766:	60a0      	str	r0, [r4, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000768:	60e0      	str	r0, [r4, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800076a:	6120      	str	r0, [r4, #16]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800076c:	61e0      	str	r0, [r4, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
 800076e:	0030      	movs	r0, r6
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000770:	6163      	str	r3, [r4, #20]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK) {
 8000772:	f005 f81f 	bl	80057b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000776:	4680      	mov	r8, r0
 8000778:	2800      	cmp	r0, #0
 800077a:	d001      	beq.n	8000780 <main+0x210>
 800077c:	b672      	cpsid	i
	while (1) {
 800077e:	e7fe      	b.n	800077e <main+0x20e>
	HAL_TIM_MspPostInit(&htim17);
 8000780:	0030      	movs	r0, r6
 8000782:	f001 fce9 	bl	8002158 <HAL_TIM_MspPostInit>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000786:	2210      	movs	r2, #16
 8000788:	4641      	mov	r1, r8
 800078a:	a81f      	add	r0, sp, #124	@ 0x7c
 800078c:	f007 f8ac 	bl	80078e8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000790:	2208      	movs	r2, #8
 8000792:	4641      	mov	r1, r8
 8000794:	a81d      	add	r0, sp, #116	@ 0x74
 8000796:	f007 f8a7 	bl	80078e8 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800079a:	221c      	movs	r2, #28
 800079c:	4641      	mov	r1, r8
 800079e:	a823      	add	r0, sp, #140	@ 0x8c
 80007a0:	f007 f8a2 	bl	80078e8 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80007a4:	2220      	movs	r2, #32
 80007a6:	4641      	mov	r1, r8
 80007a8:	0020      	movs	r0, r4
 80007aa:	f007 f89d 	bl	80078e8 <memset>
	htim1.Instance = TIM1;
 80007ae:	4f51      	ldr	r7, [pc, #324]	@ (80008f4 <main+0x384>)
 80007b0:	4b51      	ldr	r3, [pc, #324]	@ (80008f8 <main+0x388>)
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80007b2:	0038      	movs	r0, r7
	htim1.Instance = TIM1;
 80007b4:	603b      	str	r3, [r7, #0]
	htim1.Init.Prescaler = 480 - 1;
 80007b6:	23e0      	movs	r3, #224	@ 0xe0
 80007b8:	33ff      	adds	r3, #255	@ 0xff
 80007ba:	607b      	str	r3, [r7, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4643      	mov	r3, r8
 80007be:	60bb      	str	r3, [r7, #8]
	htim1.Init.Period = 100 - 1;
 80007c0:	2363      	movs	r3, #99	@ 0x63
 80007c2:	60fb      	str	r3, [r7, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c4:	4643      	mov	r3, r8
 80007c6:	613b      	str	r3, [r7, #16]
	htim1.Init.RepetitionCounter = 0;
 80007c8:	617b      	str	r3, [r7, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80007cc:	f004 fbf6 	bl	8004fbc <HAL_TIM_Base_Init>
 80007d0:	2800      	cmp	r0, #0
 80007d2:	d001      	beq.n	80007d8 <main+0x268>
 80007d4:	b672      	cpsid	i
	while (1) {
 80007d6:	e7fe      	b.n	80007d6 <main+0x266>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d8:	2380      	movs	r3, #128	@ 0x80
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007da:	0038      	movs	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007dc:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007de:	a91f      	add	r1, sp, #124	@ 0x7c
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	931f      	str	r3, [sp, #124]	@ 0x7c
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80007e2:	f004 fe79 	bl	80054d8 <HAL_TIM_ConfigClockSource>
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d001      	beq.n	80007ee <main+0x27e>
 80007ea:	b672      	cpsid	i
	while (1) {
 80007ec:	e7fe      	b.n	80007ec <main+0x27c>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80007ee:	0038      	movs	r0, r7
 80007f0:	f004 fc92 	bl	8005118 <HAL_TIM_PWM_Init>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d001      	beq.n	80007fc <main+0x28c>
 80007f8:	b672      	cpsid	i
	while (1) {
 80007fa:	e7fe      	b.n	80007fa <main+0x28a>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fc:	901d      	str	r0, [sp, #116]	@ 0x74
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fe:	901e      	str	r0, [sp, #120]	@ 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000800:	a91d      	add	r1, sp, #116	@ 0x74
 8000802:	0038      	movs	r0, r7
 8000804:	f004 ffa8 	bl	8005758 <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	1e02      	subs	r2, r0, #0
 800080a:	d001      	beq.n	8000810 <main+0x2a0>
 800080c:	b672      	cpsid	i
	while (1) {
 800080e:	e7fe      	b.n	800080e <main+0x29e>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000810:	2360      	movs	r3, #96	@ 0x60
	sConfigOC.Pulse = 0;
 8000812:	9024      	str	r0, [sp, #144]	@ 0x90
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000814:	9025      	str	r0, [sp, #148]	@ 0x94
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000816:	9026      	str	r0, [sp, #152]	@ 0x98
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000818:	9027      	str	r0, [sp, #156]	@ 0x9c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800081a:	9028      	str	r0, [sp, #160]	@ 0xa0
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800081c:	9029      	str	r0, [sp, #164]	@ 0xa4
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800081e:	a923      	add	r1, sp, #140	@ 0x8c
 8000820:	0038      	movs	r0, r7
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000822:	9323      	str	r3, [sp, #140]	@ 0x8c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000824:	f004 fd52 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 8000828:	2800      	cmp	r0, #0
 800082a:	d001      	beq.n	8000830 <main+0x2c0>
 800082c:	b672      	cpsid	i
	while (1) {
 800082e:	e7fe      	b.n	800082e <main+0x2be>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000830:	2204      	movs	r2, #4
 8000832:	0038      	movs	r0, r7
 8000834:	a923      	add	r1, sp, #140	@ 0x8c
 8000836:	f004 fd49 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 800083a:	2800      	cmp	r0, #0
 800083c:	d001      	beq.n	8000842 <main+0x2d2>
 800083e:	b672      	cpsid	i
	while (1) {
 8000840:	e7fe      	b.n	8000840 <main+0x2d0>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000842:	2208      	movs	r2, #8
 8000844:	0038      	movs	r0, r7
 8000846:	a923      	add	r1, sp, #140	@ 0x8c
 8000848:	f004 fd40 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 800084c:	2800      	cmp	r0, #0
 800084e:	d001      	beq.n	8000854 <main+0x2e4>
 8000850:	b672      	cpsid	i
	while (1) {
 8000852:	e7fe      	b.n	8000852 <main+0x2e2>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000854:	2380      	movs	r3, #128	@ 0x80
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000856:	902a      	str	r0, [sp, #168]	@ 0xa8
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000858:	019b      	lsls	r3, r3, #6
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800085a:	6060      	str	r0, [r4, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085c:	60a0      	str	r0, [r4, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800085e:	60e0      	str	r0, [r4, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000860:	6120      	str	r0, [r4, #16]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000862:	61e0      	str	r0, [r4, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000864:	0021      	movs	r1, r4
 8000866:	0038      	movs	r0, r7
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000868:	6163      	str	r3, [r4, #20]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 800086a:	f004 ffa3 	bl	80057b4 <HAL_TIMEx_ConfigBreakDeadTime>
 800086e:	4681      	mov	r9, r0
 8000870:	2800      	cmp	r0, #0
 8000872:	d001      	beq.n	8000878 <main+0x308>
 8000874:	b672      	cpsid	i
	while (1) {
 8000876:	e7fe      	b.n	8000876 <main+0x306>
	HAL_TIM_MspPostInit(&htim1);
 8000878:	0038      	movs	r0, r7
 800087a:	f001 fc6d 	bl	8002158 <HAL_TIM_MspPostInit>
	hi2c1.Instance = I2C1;
 800087e:	4b1f      	ldr	r3, [pc, #124]	@ (80008fc <main+0x38c>)
 8000880:	4698      	mov	r8, r3
 8000882:	4642      	mov	r2, r8
 8000884:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <main+0x390>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000886:	4640      	mov	r0, r8
	hi2c1.Instance = I2C1;
 8000888:	6013      	str	r3, [r2, #0]
	hi2c1.Init.Timing = 0x00201D2B;
 800088a:	4b1e      	ldr	r3, [pc, #120]	@ (8000904 <main+0x394>)
 800088c:	6053      	str	r3, [r2, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800088e:	4643      	mov	r3, r8
 8000890:	464a      	mov	r2, r9
 8000892:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000894:	2301      	movs	r3, #1
 8000896:	469a      	mov	sl, r3
 8000898:	4643      	mov	r3, r8
 800089a:	4652      	mov	r2, sl
 800089c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089e:	464a      	mov	r2, r9
 80008a0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80008a2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80008aa:	f002 fcd7 	bl	800325c <HAL_I2C_Init>
 80008ae:	1e01      	subs	r1, r0, #0
 80008b0:	d001      	beq.n	80008b6 <main+0x346>
 80008b2:	b672      	cpsid	i
	while (1) {
 80008b4:	e7fe      	b.n	80008b4 <main+0x344>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80008b6:	4640      	mov	r0, r8
 80008b8:	f002 ff26 	bl	8003708 <HAL_I2CEx_ConfigAnalogFilter>
 80008bc:	1e01      	subs	r1, r0, #0
 80008be:	d001      	beq.n	80008c4 <main+0x354>
 80008c0:	b672      	cpsid	i
	while (1) {
 80008c2:	e7fe      	b.n	80008c2 <main+0x352>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80008c4:	4640      	mov	r0, r8
 80008c6:	f002 ff45 	bl	8003754 <HAL_I2CEx_ConfigDigitalFilter>
 80008ca:	4681      	mov	r9, r0
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d01b      	beq.n	8000908 <main+0x398>
 80008d0:	b672      	cpsid	i
	while (1) {
 80008d2:	e7fe      	b.n	80008d2 <main+0x362>
 80008d4:	40021000 	.word	0x40021000
 80008d8:	48000800 	.word	0x48000800
 80008dc:	48000400 	.word	0x48000400
 80008e0:	20000278 	.word	0x20000278
 80008e4:	40014400 	.word	0x40014400
 80008e8:	0000270f 	.word	0x0000270f
 80008ec:	20000230 	.word	0x20000230
 80008f0:	40014800 	.word	0x40014800
 80008f4:	20000308 	.word	0x20000308
 80008f8:	40012c00 	.word	0x40012c00
 80008fc:	20000350 	.word	0x20000350
 8000900:	40005400 	.word	0x40005400
 8000904:	00201d2b 	.word	0x00201d2b
	MX_USB_DEVICE_Init();
 8000908:	f006 fb3c 	bl	8006f84 <MX_USB_DEVICE_Init>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800090c:	220c      	movs	r2, #12
 800090e:	4649      	mov	r1, r9
 8000910:	0020      	movs	r0, r4
 8000912:	f006 ffe9 	bl	80078e8 <memset>
	hadc.Instance = ADC1;
 8000916:	4bd7      	ldr	r3, [pc, #860]	@ (8000c74 <main+0x704>)
	hadc.Init.DMAContinuousRequests = DISABLE;
 8000918:	4649      	mov	r1, r9
	hadc.Instance = ADC1;
 800091a:	4698      	mov	r8, r3
 800091c:	4642      	mov	r2, r8
 800091e:	4bd6      	ldr	r3, [pc, #856]	@ (8000c78 <main+0x708>)
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000920:	4640      	mov	r0, r8
	hadc.Instance = ADC1;
 8000922:	6013      	str	r3, [r2, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000924:	4643      	mov	r3, r8
 8000926:	464a      	mov	r2, r9
 8000928:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800092a:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800092c:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800092e:	4652      	mov	r2, sl
 8000930:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000932:	4642      	mov	r2, r8
 8000934:	2304      	movs	r3, #4
 8000936:	6153      	str	r3, [r2, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000938:	2380      	movs	r3, #128	@ 0x80
 800093a:	045b      	lsls	r3, r3, #17
 800093c:	6193      	str	r3, [r2, #24]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800093e:	23c2      	movs	r3, #194	@ 0xc2
 8000940:	33ff      	adds	r3, #255	@ 0xff
 8000942:	61d3      	str	r3, [r2, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000944:	4643      	mov	r3, r8
 8000946:	464a      	mov	r2, r9
 8000948:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = DISABLE;
 800094a:	2324      	movs	r3, #36	@ 0x24
 800094c:	4642      	mov	r2, r8
 800094e:	54d1      	strb	r1, [r2, r3]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000950:	4643      	mov	r3, r8
 8000952:	4652      	mov	r2, sl
 8000954:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000956:	f001 fe2b 	bl	80025b0 <HAL_ADC_Init>
 800095a:	2800      	cmp	r0, #0
 800095c:	d001      	beq.n	8000962 <main+0x3f2>
 800095e:	b672      	cpsid	i
	while (1) {
 8000960:	e7fe      	b.n	8000960 <main+0x3f0>
	sConfig.Channel = ADC_CHANNEL_0;
 8000962:	2300      	movs	r3, #0
 8000964:	932a      	str	r3, [sp, #168]	@ 0xa8
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000966:	2380      	movs	r3, #128	@ 0x80
 8000968:	015b      	lsls	r3, r3, #5
 800096a:	6063      	str	r3, [r4, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800096c:	2380      	movs	r3, #128	@ 0x80
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800096e:	0021      	movs	r1, r4
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000970:	055b      	lsls	r3, r3, #21
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000972:	4640      	mov	r0, r8
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000974:	60a3      	str	r3, [r4, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000976:	f001 ff0f 	bl	8002798 <HAL_ADC_ConfigChannel>
 800097a:	2800      	cmp	r0, #0
 800097c:	d001      	beq.n	8000982 <main+0x412>
 800097e:	b672      	cpsid	i
	while (1) {
 8000980:	e7fe      	b.n	8000980 <main+0x410>
	htim6.Instance = TIM6;
 8000982:	4bbe      	ldr	r3, [pc, #760]	@ (8000c7c <main+0x70c>)
 8000984:	4699      	mov	r9, r3
 8000986:	464a      	mov	r2, r9
 8000988:	4bbd      	ldr	r3, [pc, #756]	@ (8000c80 <main+0x710>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	6090      	str	r0, [r2, #8]
	htim6.Instance = TIM6;
 800098c:	6013      	str	r3, [r2, #0]
	htim6.Init.Prescaler = 48 - 1;
 800098e:	232f      	movs	r3, #47	@ 0x2f
 8000990:	6053      	str	r3, [r2, #4]
	htim6.Init.Period = 65535;
 8000992:	4bbc      	ldr	r3, [pc, #752]	@ (8000c84 <main+0x714>)
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	6190      	str	r0, [r2, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000996:	4648      	mov	r0, r9
	htim6.Init.Period = 65535;
 8000998:	60d3      	str	r3, [r2, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800099a:	f004 fb0f 	bl	8004fbc <HAL_TIM_Base_Init>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d001      	beq.n	80009a6 <main+0x436>
 80009a2:	b672      	cpsid	i
	while (1) {
 80009a4:	e7fe      	b.n	80009a4 <main+0x434>
	initReciever(&htim6);
 80009a6:	4648      	mov	r0, r9
 80009a8:	f000 fc36 	bl	8001218 <initReciever>
	initMotors(&htim1);
 80009ac:	0038      	movs	r0, r7
 80009ae:	f000 fa17 	bl	8000de0 <initMotors>
	initBattery(&hadc);
 80009b2:	4640      	mov	r0, r8
 80009b4:	f7ff fd30 	bl	8000418 <initBattery>
	batteryConfiguration = getBatteryConfiguration();
 80009b8:	f7ff fd40 	bl	800043c <getBatteryConfiguration>
 80009bc:	4bb2      	ldr	r3, [pc, #712]	@ (8000c88 <main+0x718>)
 80009be:	7018      	strb	r0, [r3, #0]
	uint8_t isFirstWrite = read_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS);
 80009c0:	2064      	movs	r0, #100	@ 0x64
	batteryConfiguration = getBatteryConfiguration();
 80009c2:	9309      	str	r3, [sp, #36]	@ 0x24
	uint8_t isFirstWrite = read_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS);
 80009c4:	f000 fef6 	bl	80017b4 <read_byte_eeprom>
	if (isFirstWrite) {	// if is the first time the value is 255 (value of the memory empty)
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d100      	bne.n	80009ce <main+0x45e>
 80009cc:	e1f2      	b.n	8000db4 <main+0x844>
			HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 80009ce:	2380      	movs	r3, #128	@ 0x80
 80009d0:	021b      	lsls	r3, r3, #8
 80009d2:	4699      	mov	r9, r3
			HAL_Delay(100);
 80009d4:	2364      	movs	r3, #100	@ 0x64
 80009d6:	270a      	movs	r7, #10
 80009d8:	4698      	mov	r8, r3
			HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 80009da:	4649      	mov	r1, r9
 80009dc:	48ab      	ldr	r0, [pc, #684]	@ (8000c8c <main+0x71c>)
 80009de:	f002 f8b9 	bl	8002b54 <HAL_GPIO_TogglePin>
		for (int i = 0; i < 10; i++) {
 80009e2:	3f01      	subs	r7, #1
			HAL_Delay(100);
 80009e4:	4640      	mov	r0, r8
 80009e6:	f001 fd01 	bl	80023ec <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 80009ea:	2f00      	cmp	r7, #0
 80009ec:	d1f5      	bne.n	80009da <main+0x46a>
		storeSettingsToEeprom();	// write the default settings
 80009ee:	f000 fd5d 	bl	80014ac <storeSettingsToEeprom>
		write_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS, isFirstWrite);
 80009f2:	0039      	movs	r1, r7
 80009f4:	2064      	movs	r0, #100	@ 0x64
 80009f6:	f000 fef3 	bl	80017e0 <write_byte_eeprom>
	disableMotor(M1);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 fbb0 	bl	8001160 <disableMotor>
	disableMotor(M2);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f000 fbad 	bl	8001160 <disableMotor>
	disableMotor(M3);
 8000a06:	2002      	movs	r0, #2
 8000a08:	f000 fbaa 	bl	8001160 <disableMotor>
	uint32_t timeLowBattery = 0;
 8000a0c:	2300      	movs	r3, #0
	uint32_t time1 = 0;
 8000a0e:	001f      	movs	r7, r3
	uint32_t timeLimitBattery = 0;
 8000a10:	9307      	str	r3, [sp, #28]
	uint32_t time3 = 0;
 8000a12:	9306      	str	r3, [sp, #24]
	uint32_t time2 = 0;
 8000a14:	9305      	str	r3, [sp, #20]
 8000a16:	4b9e      	ldr	r3, [pc, #632]	@ (8000c90 <main+0x720>)
			if (HAL_GetTick() - time1 >= 2000 && limit == FALSE) {
 8000a18:	46a9      	mov	r9, r5
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	4b9d      	ldr	r3, [pc, #628]	@ (8000c94 <main+0x724>)
 8000a1e:	9314      	str	r3, [sp, #80]	@ 0x50
 8000a20:	4b9d      	ldr	r3, [pc, #628]	@ (8000c98 <main+0x728>)
 8000a22:	9315      	str	r3, [sp, #84]	@ 0x54
 8000a24:	4b9d      	ldr	r3, [pc, #628]	@ (8000c9c <main+0x72c>)
 8000a26:	9303      	str	r3, [sp, #12]
 8000a28:	4b9d      	ldr	r3, [pc, #628]	@ (8000ca0 <main+0x730>)
 8000a2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a2c:	4b9d      	ldr	r3, [pc, #628]	@ (8000ca4 <main+0x734>)
 8000a2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a30:	4b9d      	ldr	r3, [pc, #628]	@ (8000ca8 <main+0x738>)
 8000a32:	930c      	str	r3, [sp, #48]	@ 0x30
 8000a34:	4b9d      	ldr	r3, [pc, #628]	@ (8000cac <main+0x73c>)
 8000a36:	469b      	mov	fp, r3
 8000a38:	4b9d      	ldr	r3, [pc, #628]	@ (8000cb0 <main+0x740>)
 8000a3a:	9316      	str	r3, [sp, #88]	@ 0x58
 8000a3c:	4b9d      	ldr	r3, [pc, #628]	@ (8000cb4 <main+0x744>)
 8000a3e:	930d      	str	r3, [sp, #52]	@ 0x34
 8000a40:	4b9d      	ldr	r3, [pc, #628]	@ (8000cb8 <main+0x748>)
 8000a42:	9304      	str	r3, [sp, #16]
 8000a44:	4b9d      	ldr	r3, [pc, #628]	@ (8000cbc <main+0x74c>)
 8000a46:	4698      	mov	r8, r3
 8000a48:	4b9d      	ldr	r3, [pc, #628]	@ (8000cc0 <main+0x750>)
 8000a4a:	4645      	mov	r5, r8
 8000a4c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8000a4e:	4b9d      	ldr	r3, [pc, #628]	@ (8000cc4 <main+0x754>)
 8000a50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a52:	4b9d      	ldr	r3, [pc, #628]	@ (8000cc8 <main+0x758>)
 8000a54:	9301      	str	r3, [sp, #4]
 8000a56:	4b9d      	ldr	r3, [pc, #628]	@ (8000ccc <main+0x75c>)
 8000a58:	9310      	str	r3, [sp, #64]	@ 0x40
 8000a5a:	4b9d      	ldr	r3, [pc, #628]	@ (8000cd0 <main+0x760>)
 8000a5c:	970e      	str	r7, [sp, #56]	@ 0x38
 8000a5e:	9311      	str	r3, [sp, #68]	@ 0x44
 8000a60:	4b9c      	ldr	r3, [pc, #624]	@ (8000cd4 <main+0x764>)
 8000a62:	9308      	str	r3, [sp, #32]
 8000a64:	4b9c      	ldr	r3, [pc, #624]	@ (8000cd8 <main+0x768>)
 8000a66:	469a      	mov	sl, r3
 8000a68:	46d0      	mov	r8, sl
 8000a6a:	46b2      	mov	sl, r6
 8000a6c:	4b9b      	ldr	r3, [pc, #620]	@ (8000cdc <main+0x76c>)
 8000a6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8000a70:	4b9b      	ldr	r3, [pc, #620]	@ (8000ce0 <main+0x770>)
 8000a72:	9313      	str	r3, [sp, #76]	@ 0x4c
		if (!cutoff) {	// if the robot is not in cutoff
 8000a74:	9b02      	ldr	r3, [sp, #8]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d000      	beq.n	8000a7e <main+0x50e>
 8000a7c:	e175      	b.n	8000d6a <main+0x7fa>
			if (!noDisarm) {
 8000a7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8000a80:	781e      	ldrb	r6, [r3, #0]
 8000a82:	2e00      	cmp	r6, #0
 8000a84:	d100      	bne.n	8000a88 <main+0x518>
 8000a86:	e148      	b.n	8000d1a <main+0x7aa>
					armed = TRUE;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	9a03      	ldr	r2, [sp, #12]
 8000a8c:	7013      	strb	r3, [r2, #0]
				enableMotor(M1);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fb86 	bl	80011a0 <enableMotor>
				enableMotor(M2);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f000 fb83 	bl	80011a0 <enableMotor>
				enableMotor(M3);
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f000 fb80 	bl	80011a0 <enableMotor>
				setServoIsEnable(TRUE, &htim17); // start servo 1 HV
 8000aa0:	4651      	mov	r1, sl
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f000 fc9a 	bl	80013dc <setServoIsEnable>
				setServoIsEnable(TRUE, &htim16); // start servo 2
 8000aa8:	4649      	mov	r1, r9
 8000aaa:	2001      	movs	r0, #1
 8000aac:	f000 fc96 	bl	80013dc <setServoIsEnable>
				if (tankMixIsON) {	// calculate and use the tank mix only if it's enabled
 8000ab0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8000ab2:	781e      	ldrb	r6, [r3, #0]
 8000ab4:	2e00      	cmp	r6, #0
 8000ab6:	d100      	bne.n	8000aba <main+0x54a>
 8000ab8:	e116      	b.n	8000ce8 <main+0x778>
					tank = tankMix(getChannelValuePercentage(stChannel), getChannelValuePercentage(thChannel));
 8000aba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000abc:	7818      	ldrb	r0, [r3, #0]
 8000abe:	f000 fb8f 	bl	80011e0 <getChannelValuePercentage>
 8000ac2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000ac4:	0006      	movs	r6, r0
 8000ac6:	7818      	ldrb	r0, [r3, #0]
 8000ac8:	f000 fb8a 	bl	80011e0 <getChannelValuePercentage>
 8000acc:	0001      	movs	r1, r0
 8000ace:	0030      	movs	r0, r6
 8000ad0:	f000 fc16 	bl	8001300 <tankMix>
 8000ad4:	465b      	mov	r3, fp
 8000ad6:	8018      	strh	r0, [r3, #0]
					setTankMotor(tank);
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	f000 f993 	bl	8000e04 <setTankMotor>
					if (weaponDoubleDirection) {
 8000ade:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d100      	bne.n	8000ae8 <main+0x578>
 8000ae6:	e0b4      	b.n	8000c52 <main+0x6e2>
						setMotorSpeedBidirectional(mWeapon, getChannelValuePercentage(wpChannel));
 8000ae8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000aea:	781e      	ldrb	r6, [r3, #0]
 8000aec:	9b04      	ldr	r3, [sp, #16]
 8000aee:	7818      	ldrb	r0, [r3, #0]
 8000af0:	f000 fb76 	bl	80011e0 <getChannelValuePercentage>
 8000af4:	b241      	sxtb	r1, r0
 8000af6:	0030      	movs	r0, r6
 8000af8:	f000 fa2c 	bl	8000f54 <setMotorSpeedBidirectional>
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000afc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8000afe:	7818      	ldrb	r0, [r3, #0]
				if (limit == TRUE) { // !!ASUME THAT S1 IS CONNECTED TO THE WEAPON ESC
 8000b00:	782b      	ldrb	r3, [r5, #0]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d100      	bne.n	8000b08 <main+0x598>
 8000b06:	e09a      	b.n	8000c3e <main+0x6ce>
					setServoAngle(S1, getChannelValuePercentage(s1Channel));	// servo 1 attached to channel s1Channel
 8000b08:	f000 fb6a 	bl	80011e0 <getChannelValuePercentage>
 8000b0c:	0001      	movs	r1, r0
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 fc20 	bl	8001354 <setServoAngle>
				setServoAngle(S2, getChannelValuePercentage(s2Channel));
 8000b14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8000b16:	7818      	ldrb	r0, [r3, #0]
 8000b18:	f000 fb62 	bl	80011e0 <getChannelValuePercentage>
 8000b1c:	0001      	movs	r1, r0
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f000 fc18 	bl	8001354 <setServoAngle>
			if (HAL_GetTick() - time2 >= 200) {
 8000b24:	f001 fc5c 	bl	80023e0 <HAL_GetTick>
 8000b28:	9b05      	ldr	r3, [sp, #20]
 8000b2a:	1ac0      	subs	r0, r0, r3
 8000b2c:	28c7      	cmp	r0, #199	@ 0xc7
 8000b2e:	d83a      	bhi.n	8000ba6 <main+0x636>
			if (HAL_GetTick() - time1 >= 2000 && limit == FALSE) {
 8000b30:	f001 fc56 	bl	80023e0 <HAL_GetTick>
 8000b34:	23fa      	movs	r3, #250	@ 0xfa
 8000b36:	1bc0      	subs	r0, r0, r7
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d30a      	bcc.n	8000b54 <main+0x5e4>
 8000b3e:	782b      	ldrb	r3, [r5, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d107      	bne.n	8000b54 <main+0x5e4>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000b44:	2180      	movs	r1, #128	@ 0x80
 8000b46:	4851      	ldr	r0, [pc, #324]	@ (8000c8c <main+0x71c>)
 8000b48:	0209      	lsls	r1, r1, #8
 8000b4a:	f002 f803 	bl	8002b54 <HAL_GPIO_TogglePin>
				time1 = HAL_GetTick();
 8000b4e:	f001 fc47 	bl	80023e0 <HAL_GetTick>
 8000b52:	0007      	movs	r7, r0
			if (HAL_GetTick() - time3 >= 350 && limit == TRUE) {
 8000b54:	f001 fc44 	bl	80023e0 <HAL_GetTick>
 8000b58:	9b06      	ldr	r3, [sp, #24]
 8000b5a:	1ac0      	subs	r0, r0, r3
 8000b5c:	23af      	movs	r3, #175	@ 0xaf
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	4298      	cmp	r0, r3
 8000b62:	d30a      	bcc.n	8000b7a <main+0x60a>
 8000b64:	782b      	ldrb	r3, [r5, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d107      	bne.n	8000b7a <main+0x60a>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000b6a:	2180      	movs	r1, #128	@ 0x80
 8000b6c:	4847      	ldr	r0, [pc, #284]	@ (8000c8c <main+0x71c>)
 8000b6e:	0209      	lsls	r1, r1, #8
 8000b70:	f001 fff0 	bl	8002b54 <HAL_GPIO_TogglePin>
				time3 = HAL_GetTick();
 8000b74:	f001 fc34 	bl	80023e0 <HAL_GetTick>
 8000b78:	9006      	str	r0, [sp, #24]
		if (commandRecieved) {	// recieved a command from the USB
 8000b7a:	9b08      	ldr	r3, [sp, #32]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d100      	bne.n	8000b84 <main+0x614>
 8000b82:	e777      	b.n	8000a74 <main+0x504>
			if (modifySettingsWithCommand()) {
 8000b84:	f000 ff9a 	bl	8001abc <modifySettingsWithCommand>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d027      	beq.n	8000bdc <main+0x66c>
				uint8_t s[] = "\nOK\n";
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	681b      	ldr	r3, [r3, #0]
				serialPrintString(s);
 8000b90:	0020      	movs	r0, r4
				uint8_t s[] = "\nOK\n";
 8000b92:	6023      	str	r3, [r4, #0]
 8000b94:	4643      	mov	r3, r8
 8000b96:	791b      	ldrb	r3, [r3, #4]
 8000b98:	7123      	strb	r3, [r4, #4]
				serialPrintString(s);
 8000b9a:	f000 fc7d 	bl	8001498 <serialPrintString>
			commandRecieved = FALSE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9a08      	ldr	r2, [sp, #32]
 8000ba2:	7013      	strb	r3, [r2, #0]
 8000ba4:	e766      	b.n	8000a74 <main+0x504>
				batteryVoltage = getBattVoltage();
 8000ba6:	f7ff fc7d 	bl	80004a4 <getBattVoltage>
 8000baa:	9b01      	ldr	r3, [sp, #4]
 8000bac:	8018      	strh	r0, [r3, #0]
				if (HAL_GetTick() - timeLimitBattery >= CUTOFF_BATTERY_TIMEOUT * 1000) {
 8000bae:	f001 fc17 	bl	80023e0 <HAL_GetTick>
 8000bb2:	9b07      	ldr	r3, [sp, #28]
 8000bb4:	1ac0      	subs	r0, r0, r3
 8000bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ce4 <main+0x774>)
 8000bb8:	4298      	cmp	r0, r3
 8000bba:	d92d      	bls.n	8000c18 <main+0x6a8>
					limit = TRUE;	// activate limit state (weapon speed limited)
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	702b      	strb	r3, [r5, #0]
				if (HAL_GetTick() - timeLowBattery >= CUTOFF_BATTERY_TIMEOUT * 1000) {
 8000bc0:	f001 fc0e 	bl	80023e0 <HAL_GetTick>
 8000bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8000bc6:	1ac0      	subs	r0, r0, r3
 8000bc8:	4b46      	ldr	r3, [pc, #280]	@ (8000ce4 <main+0x774>)
 8000bca:	4298      	cmp	r0, r3
 8000bcc:	d910      	bls.n	8000bf0 <main+0x680>
					cutoff = TRUE;	// activate cutoff state (robot disarmed)
 8000bce:	2301      	movs	r3, #1
 8000bd0:	9a02      	ldr	r2, [sp, #8]
 8000bd2:	7013      	strb	r3, [r2, #0]
				time2 = HAL_GetTick();
 8000bd4:	f001 fc04 	bl	80023e0 <HAL_GetTick>
 8000bd8:	9005      	str	r0, [sp, #20]
 8000bda:	e7a9      	b.n	8000b30 <main+0x5c0>
				uint8_t s[] = "\nWHAT??\n";
 8000bdc:	0023      	movs	r3, r4
 8000bde:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8000be0:	ca03      	ldmia	r2!, {r0, r1}
 8000be2:	c303      	stmia	r3!, {r0, r1}
 8000be4:	7812      	ldrb	r2, [r2, #0]
				serialPrintString(s);
 8000be6:	0020      	movs	r0, r4
				uint8_t s[] = "\nWHAT??\n";
 8000be8:	701a      	strb	r2, [r3, #0]
				serialPrintString(s);
 8000bea:	f000 fc55 	bl	8001498 <serialPrintString>
 8000bee:	e7d6      	b.n	8000b9e <main+0x62e>
				if (batteryVoltage >= cutOffVoltage * 100 * batteryConfiguration && !cutoff)
 8000bf0:	9b01      	ldr	r3, [sp, #4]
 8000bf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000bf4:	8819      	ldrh	r1, [r3, #0]
 8000bf6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8000bf8:	7812      	ldrb	r2, [r2, #0]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	435a      	muls	r2, r3
 8000bfe:	2364      	movs	r3, #100	@ 0x64
 8000c00:	4353      	muls	r3, r2
 8000c02:	4299      	cmp	r1, r3
 8000c04:	dbe6      	blt.n	8000bd4 <main+0x664>
 8000c06:	9b02      	ldr	r3, [sp, #8]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1e2      	bne.n	8000bd4 <main+0x664>
					timeLowBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8000c0e:	f001 fbe7 	bl	80023e0 <HAL_GetTick>
 8000c12:	300a      	adds	r0, #10
 8000c14:	900e      	str	r0, [sp, #56]	@ 0x38
 8000c16:	e7dd      	b.n	8000bd4 <main+0x664>
				if (batteryVoltage >= limitVoltage * 100 * batteryConfiguration && !limit)
 8000c18:	9b01      	ldr	r3, [sp, #4]
 8000c1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c1c:	8819      	ldrh	r1, [r3, #0]
 8000c1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	435a      	muls	r2, r3
 8000c26:	2364      	movs	r3, #100	@ 0x64
 8000c28:	4353      	muls	r3, r2
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	dbc8      	blt.n	8000bc0 <main+0x650>
 8000c2e:	782b      	ldrb	r3, [r5, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1c5      	bne.n	8000bc0 <main+0x650>
					timeLimitBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8000c34:	f001 fbd4 	bl	80023e0 <HAL_GetTick>
 8000c38:	300a      	adds	r0, #10
 8000c3a:	9007      	str	r0, [sp, #28]
 8000c3c:	e7c0      	b.n	8000bc0 <main+0x650>
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000c3e:	f000 facf 	bl	80011e0 <getChannelValuePercentage>
					if (limit == TRUE) s1 = s1 / 2;
 8000c42:	782b      	ldrb	r3, [r5, #0]
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 8000c44:	0001      	movs	r1, r0
					if (limit == TRUE) s1 = s1 / 2;
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d000      	beq.n	8000c4c <main+0x6dc>
 8000c4a:	e760      	b.n	8000b0e <main+0x59e>
 8000c4c:	0841      	lsrs	r1, r0, #1
 8000c4e:	b2c9      	uxtb	r1, r1
					setServoAngle(S1, s1); // servo 1 attached to channel s1Channel
 8000c50:	e75d      	b.n	8000b0e <main+0x59e>
						uint8_t wp = getChannelValuePercentage(wpChannel);
 8000c52:	9b04      	ldr	r3, [sp, #16]
 8000c54:	7818      	ldrb	r0, [r3, #0]
 8000c56:	f000 fac3 	bl	80011e0 <getChannelValuePercentage>
						if (limit == TRUE) wp = wp / 2;	// valid only in the unidirectional mode  !!FOR DC MOTOR ONLY!!
 8000c5a:	782b      	ldrb	r3, [r5, #0]
						uint8_t wp = getChannelValuePercentage(wpChannel);
 8000c5c:	0001      	movs	r1, r0
						if (limit == TRUE) wp = wp / 2;	// valid only in the unidirectional mode  !!FOR DC MOTOR ONLY!!
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d101      	bne.n	8000c66 <main+0x6f6>
 8000c62:	0841      	lsrs	r1, r0, #1
 8000c64:	b2c9      	uxtb	r1, r1
						setMotorSpeedUnidirectional(mWeapon, wp);
 8000c66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000c68:	b249      	sxtb	r1, r1
 8000c6a:	7818      	ldrb	r0, [r3, #0]
 8000c6c:	f000 f9c4 	bl	8000ff8 <setMotorSpeedUnidirectional>
 8000c70:	e744      	b.n	8000afc <main+0x58c>
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	200003a4 	.word	0x200003a4
 8000c78:	40012400 	.word	0x40012400
 8000c7c:	200002c0 	.word	0x200002c0
 8000c80:	40001000 	.word	0x40001000
 8000c84:	0000ffff 	.word	0x0000ffff
 8000c88:	20000222 	.word	0x20000222
 8000c8c:	48000800 	.word	0x48000800
 8000c90:	20000224 	.word	0x20000224
 8000c94:	20000006 	.word	0x20000006
 8000c98:	2000000c 	.word	0x2000000c
 8000c9c:	20000221 	.word	0x20000221
 8000ca0:	2000021d 	.word	0x2000021d
 8000ca4:	20000010 	.word	0x20000010
 8000ca8:	20000011 	.word	0x20000011
 8000cac:	2000022c 	.word	0x2000022c
 8000cb0:	2000021c 	.word	0x2000021c
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	2000000f 	.word	0x2000000f
 8000cbc:	20000223 	.word	0x20000223
 8000cc0:	2000000e 	.word	0x2000000e
 8000cc4:	2000000d 	.word	0x2000000d
 8000cc8:	20000226 	.word	0x20000226
 8000ccc:	20000005 	.word	0x20000005
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	20000228 	.word	0x20000228
 8000cd8:	08008b14 	.word	0x08008b14
 8000cdc:	08008b1c 	.word	0x08008b1c
 8000ce0:	20000007 	.word	0x20000007
 8000ce4:	0000270f 	.word	0x0000270f
					setMotorSpeedBidirectional(M1, getChannelValuePercentage(thChannel));
 8000ce8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000cea:	7818      	ldrb	r0, [r3, #0]
 8000cec:	f000 fa78 	bl	80011e0 <getChannelValuePercentage>
 8000cf0:	b241      	sxtb	r1, r0
 8000cf2:	0030      	movs	r0, r6
 8000cf4:	f000 f92e 	bl	8000f54 <setMotorSpeedBidirectional>
					setMotorSpeedBidirectional(M2, getChannelValuePercentage(stChannel));
 8000cf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000cfa:	7818      	ldrb	r0, [r3, #0]
 8000cfc:	f000 fa70 	bl	80011e0 <getChannelValuePercentage>
 8000d00:	b241      	sxtb	r1, r0
 8000d02:	2001      	movs	r0, #1
 8000d04:	f000 f926 	bl	8000f54 <setMotorSpeedBidirectional>
					setMotorSpeedBidirectional(M3, getChannelValuePercentage(wpChannel));
 8000d08:	9b04      	ldr	r3, [sp, #16]
 8000d0a:	7818      	ldrb	r0, [r3, #0]
 8000d0c:	f000 fa68 	bl	80011e0 <getChannelValuePercentage>
 8000d10:	b241      	sxtb	r1, r0
 8000d12:	2002      	movs	r0, #2
 8000d14:	f000 f91e 	bl	8000f54 <setMotorSpeedBidirectional>
 8000d18:	e6f0      	b.n	8000afc <main+0x58c>
				if (getChannelValuePercentage(armChannel) > 75)
 8000d1a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8000d1c:	7818      	ldrb	r0, [r3, #0]
 8000d1e:	f000 fa5f 	bl	80011e0 <getChannelValuePercentage>
 8000d22:	284b      	cmp	r0, #75	@ 0x4b
 8000d24:	d900      	bls.n	8000d28 <main+0x7b8>
 8000d26:	e6af      	b.n	8000a88 <main+0x518>
				makeSound(mLeft, 50);
 8000d28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
					armed = FALSE;
 8000d2a:	9b03      	ldr	r3, [sp, #12]
				makeSound(mLeft, 50);
 8000d2c:	7810      	ldrb	r0, [r2, #0]
 8000d2e:	2132      	movs	r1, #50	@ 0x32
					armed = FALSE;
 8000d30:	701e      	strb	r6, [r3, #0]
				makeSound(mLeft, 50);
 8000d32:	f000 f9b7 	bl	80010a4 <makeSound>
				HAL_Delay(50);
 8000d36:	2032      	movs	r0, #50	@ 0x32
 8000d38:	f001 fb58 	bl	80023ec <HAL_Delay>
			if (armed) {	// if armed do...
 8000d3c:	9b03      	ldr	r3, [sp, #12]
 8000d3e:	781e      	ldrb	r6, [r3, #0]
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d000      	beq.n	8000d46 <main+0x7d6>
 8000d44:	e6a3      	b.n	8000a8e <main+0x51e>
				disableMotor(M1);
 8000d46:	0030      	movs	r0, r6
 8000d48:	f000 fa0a 	bl	8001160 <disableMotor>
				disableMotor(M2);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 fa07 	bl	8001160 <disableMotor>
				disableMotor(M3);
 8000d52:	2002      	movs	r0, #2
 8000d54:	f000 fa04 	bl	8001160 <disableMotor>
				setServoIsEnable(FALSE, &htim17); // stop servo 1 HV
 8000d58:	4651      	mov	r1, sl
 8000d5a:	0030      	movs	r0, r6
 8000d5c:	f000 fb3e 	bl	80013dc <setServoIsEnable>
				setServoIsEnable(FALSE, &htim16); // stop servo 2
 8000d60:	4649      	mov	r1, r9
 8000d62:	0030      	movs	r0, r6
 8000d64:	f000 fb3a 	bl	80013dc <setServoIsEnable>
 8000d68:	e6dc      	b.n	8000b24 <main+0x5b4>
			disableMotor(M1);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f9f8 	bl	8001160 <disableMotor>
			disableMotor(M2);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 f9f5 	bl	8001160 <disableMotor>
			disableMotor(M3);
 8000d76:	2002      	movs	r0, #2
 8000d78:	f000 f9f2 	bl	8001160 <disableMotor>
			setServoAngle(S1, 0);	// servo 1 attached to channel s1Channel
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	0008      	movs	r0, r1
 8000d80:	f000 fae8 	bl	8001354 <setServoAngle>
			setServoAngle(S2, 0);
 8000d84:	2100      	movs	r1, #0
 8000d86:	2001      	movs	r0, #1
 8000d88:	f000 fae4 	bl	8001354 <setServoAngle>
			if (HAL_GetTick() - time1 >= 100) {
 8000d8c:	f001 fb28 	bl	80023e0 <HAL_GetTick>
 8000d90:	1bc0      	subs	r0, r0, r7
 8000d92:	2863      	cmp	r0, #99	@ 0x63
 8000d94:	d800      	bhi.n	8000d98 <main+0x828>
 8000d96:	e6f0      	b.n	8000b7a <main+0x60a>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8000d98:	2180      	movs	r1, #128	@ 0x80
 8000d9a:	4808      	ldr	r0, [pc, #32]	@ (8000dbc <main+0x84c>)
 8000d9c:	0209      	lsls	r1, r1, #8
 8000d9e:	f001 fed9 	bl	8002b54 <HAL_GPIO_TogglePin>
				makeSound(mLeft, 100);	// beep while in cutoff mode
 8000da2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000da4:	2164      	movs	r1, #100	@ 0x64
 8000da6:	7818      	ldrb	r0, [r3, #0]
 8000da8:	f000 f97c 	bl	80010a4 <makeSound>
				time1 = HAL_GetTick();
 8000dac:	f001 fb18 	bl	80023e0 <HAL_GetTick>
 8000db0:	0007      	movs	r7, r0
 8000db2:	e6e2      	b.n	8000b7a <main+0x60a>
		loadSettingsFromEeprom();	// load the settings from the eeprom memory
 8000db4:	f000 fcfa 	bl	80017ac <loadSettingsFromEeprom>
 8000db8:	e61f      	b.n	80009fa <main+0x48a>
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	48000800 	.word	0x48000800

08000dc0 <map>:
int16_t map(int16_t x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max) {
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	001d      	movs	r5, r3
 8000dc4:	ab04      	add	r3, sp, #16
 8000dc6:	2400      	movs	r4, #0
 8000dc8:	5f1c      	ldrsh	r4, [r3, r4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000dca:	1a43      	subs	r3, r0, r1
 8000dcc:	1b60      	subs	r0, r4, r5
 8000dce:	4358      	muls	r0, r3
 8000dd0:	1a51      	subs	r1, r2, r1
 8000dd2:	f7ff fa35 	bl	8000240 <__divsi3>
 8000dd6:	1940      	adds	r0, r0, r5
 8000dd8:	b200      	sxth	r0, r0
}
 8000dda:	bd70      	pop	{r4, r5, r6, pc}

08000ddc <Error_Handler>:
 8000ddc:	b672      	cpsid	i
	while (1) {
 8000dde:	e7fe      	b.n	8000dde <Error_Handler+0x2>

08000de0 <initMotors>:

extern uint8_t m1Rev;
extern uint8_t m2Rev;
extern uint8_t m3Rev;

void initMotors(TIM_HandleTypeDef *htim) {
 8000de0:	b510      	push	{r4, lr}
 8000de2:	0004      	movs	r4, r0
	HAL_TIM_PWM_Init(htim);
 8000de4:	f004 f998 	bl	8005118 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8000de8:	2100      	movs	r1, #0
 8000dea:	0020      	movs	r0, r4
 8000dec:	f004 fa16 	bl	800521c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8000df0:	2104      	movs	r1, #4
 8000df2:	0020      	movs	r0, r4
 8000df4:	f004 fa12 	bl	800521c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8000df8:	2108      	movs	r1, #8
 8000dfa:	0020      	movs	r0, r4
 8000dfc:	f004 fa0e 	bl	800521c <HAL_TIM_PWM_Start>
}
 8000e00:	bd10      	pop	{r4, pc}
 8000e02:	46c0      	nop			@ (mov r8, r8)

08000e04 <setTankMotor>:

void setTankMotor(TankMotors t) {
 8000e04:	b530      	push	{r4, r5, lr}
 8000e06:	b083      	sub	sp, #12
	// set the speed of the motors
	setMotorSpeedBidirectional(mLeft, t.speedL);
 8000e08:	4b4b      	ldr	r3, [pc, #300]	@ (8000f38 <setTankMotor+0x134>)
void setTankMotor(TankMotors t) {
 8000e0a:	ac01      	add	r4, sp, #4
 8000e0c:	8020      	strh	r0, [r4, #0]
	setMotorSpeedBidirectional(mLeft, t.speedL);
 8000e0e:	b2c0      	uxtb	r0, r0
 8000e10:	781b      	ldrb	r3, [r3, #0]
 *  max -3, min +3
 *	change the deadzone value according your needs
 */
uint8_t calculateSpeedWithDeadZoneDouble(uint8_t speed) {
	uint8_t returnValue = speed;
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8000e12:	2809      	cmp	r0, #9
 8000e14:	d929      	bls.n	8000e6a <setTankMotor+0x66>
	if (speed > 100 - DEADZONE) returnValue = 100;	// upper deadzone
 8000e16:	285a      	cmp	r0, #90	@ 0x5a
 8000e18:	d900      	bls.n	8000e1c <setTankMotor+0x18>
 8000e1a:	e089      	b.n	8000f30 <setTankMotor+0x12c>
	speed = (speed - 50) * 2;
 8000e1c:	3832      	subs	r0, #50	@ 0x32
 8000e1e:	0042      	lsls	r2, r0, #1
 8000e20:	b252      	sxtb	r2, r2
	uint8_t sp = abs(speed);
 8000e22:	17d1      	asrs	r1, r2, #31
 8000e24:	1855      	adds	r5, r2, r1
	if (speed >= 0)
 8000e26:	43d2      	mvns	r2, r2
	uint8_t sp = abs(speed);
 8000e28:	404d      	eors	r5, r1
 8000e2a:	b2ed      	uxtb	r5, r5
	if (speed >= 0)
 8000e2c:	0fd2      	lsrs	r2, r2, #31
	switch (motorN) {
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d11f      	bne.n	8000e72 <setTankMotor+0x6e>
			isRev = m2Rev;
 8000e32:	4b42      	ldr	r3, [pc, #264]	@ (8000f3c <setTankMotor+0x138>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <setTankMotor+0x3a>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	405a      	eors	r2, r3
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000e3e:	2180      	movs	r1, #128	@ 0x80
 8000e40:	483f      	ldr	r0, [pc, #252]	@ (8000f40 <setTankMotor+0x13c>)
 8000e42:	0189      	lsls	r1, r1, #6
 8000e44:	f001 fe80 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000e48:	4b3e      	ldr	r3, [pc, #248]	@ (8000f44 <setTankMotor+0x140>)
 8000e4a:	639d      	str	r5, [r3, #56]	@ 0x38
	setMotorSpeedBidirectional(mRight, t.speedR);
 8000e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f48 <setTankMotor+0x144>)
 8000e4e:	7819      	ldrb	r1, [r3, #0]
 8000e50:	7863      	ldrb	r3, [r4, #1]
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8000e52:	2b09      	cmp	r3, #9
 8000e54:	d816      	bhi.n	8000e84 <setTankMotor+0x80>
	uint8_t sp = abs(speed);
 8000e56:	2464      	movs	r4, #100	@ 0x64
		dir = FALSE;
 8000e58:	2200      	movs	r2, #0
	switch (motorN) {
 8000e5a:	2901      	cmp	r1, #1
 8000e5c:	d01f      	beq.n	8000e9e <setTankMotor+0x9a>
 8000e5e:	2902      	cmp	r1, #2
 8000e60:	d055      	beq.n	8000f0e <setTankMotor+0x10a>
 8000e62:	2900      	cmp	r1, #0
 8000e64:	d045      	beq.n	8000ef2 <setTankMotor+0xee>
}
 8000e66:	b003      	add	sp, #12
 8000e68:	bd30      	pop	{r4, r5, pc}
	uint8_t sp = abs(speed);
 8000e6a:	2564      	movs	r5, #100	@ 0x64
		dir = FALSE;
 8000e6c:	2200      	movs	r2, #0
	switch (motorN) {
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d0df      	beq.n	8000e32 <setTankMotor+0x2e>
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d02f      	beq.n	8000ed6 <setTankMotor+0xd2>
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01f      	beq.n	8000eba <setTankMotor+0xb6>
	setMotorSpeedBidirectional(mRight, t.speedR);
 8000e7a:	4b33      	ldr	r3, [pc, #204]	@ (8000f48 <setTankMotor+0x144>)
 8000e7c:	7819      	ldrb	r1, [r3, #0]
 8000e7e:	7863      	ldrb	r3, [r4, #1]
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8000e80:	2b09      	cmp	r3, #9
 8000e82:	d9e8      	bls.n	8000e56 <setTankMotor+0x52>
	if (speed > 100 - DEADZONE) returnValue = 100;	// upper deadzone
 8000e84:	2b5a      	cmp	r3, #90	@ 0x5a
 8000e86:	d850      	bhi.n	8000f2a <setTankMotor+0x126>
	speed = (speed - 50) * 2;
 8000e88:	3b32      	subs	r3, #50	@ 0x32
 8000e8a:	005a      	lsls	r2, r3, #1
 8000e8c:	b252      	sxtb	r2, r2
	uint8_t sp = abs(speed);
 8000e8e:	17d3      	asrs	r3, r2, #31
 8000e90:	18d4      	adds	r4, r2, r3
	if (speed >= 0)
 8000e92:	43d2      	mvns	r2, r2
	uint8_t sp = abs(speed);
 8000e94:	405c      	eors	r4, r3
 8000e96:	b2e4      	uxtb	r4, r4
	if (speed >= 0)
 8000e98:	0fd2      	lsrs	r2, r2, #31
	switch (motorN) {
 8000e9a:	2901      	cmp	r1, #1
 8000e9c:	d1df      	bne.n	8000e5e <setTankMotor+0x5a>
			isRev = m2Rev;
 8000e9e:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <setTankMotor+0x138>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <setTankMotor+0xa6>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	405a      	eors	r2, r3
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000eaa:	2180      	movs	r1, #128	@ 0x80
 8000eac:	4824      	ldr	r0, [pc, #144]	@ (8000f40 <setTankMotor+0x13c>)
 8000eae:	0189      	lsls	r1, r1, #6
 8000eb0:	f001 fe4a 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000eb4:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <setTankMotor+0x140>)
 8000eb6:	639c      	str	r4, [r3, #56]	@ 0x38
			break;
 8000eb8:	e7d5      	b.n	8000e66 <setTankMotor+0x62>
			isRev = m1Rev;
 8000eba:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <setTankMotor+0x148>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <setTankMotor+0xc2>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	405a      	eors	r2, r3
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000ec6:	2180      	movs	r1, #128	@ 0x80
 8000ec8:	481d      	ldr	r0, [pc, #116]	@ (8000f40 <setTankMotor+0x13c>)
 8000eca:	0209      	lsls	r1, r1, #8
 8000ecc:	f001 fe3c 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <setTankMotor+0x140>)
 8000ed2:	635d      	str	r5, [r3, #52]	@ 0x34
			break;
 8000ed4:	e7d1      	b.n	8000e7a <setTankMotor+0x76>
			isRev = m3Rev;
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <setTankMotor+0x14c>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <setTankMotor+0xde>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	405a      	eors	r2, r3
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8000ee2:	2180      	movs	r1, #128	@ 0x80
 8000ee4:	4816      	ldr	r0, [pc, #88]	@ (8000f40 <setTankMotor+0x13c>)
 8000ee6:	0109      	lsls	r1, r1, #4
 8000ee8:	f001 fe2e 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <setTankMotor+0x140>)
 8000eee:	63dd      	str	r5, [r3, #60]	@ 0x3c
			break;
 8000ef0:	e7c3      	b.n	8000e7a <setTankMotor+0x76>
			isRev = m1Rev;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <setTankMotor+0x148>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <setTankMotor+0xfa>
 8000efa:	2301      	movs	r3, #1
 8000efc:	405a      	eors	r2, r3
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000efe:	2180      	movs	r1, #128	@ 0x80
 8000f00:	480f      	ldr	r0, [pc, #60]	@ (8000f40 <setTankMotor+0x13c>)
 8000f02:	0209      	lsls	r1, r1, #8
 8000f04:	f001 fe20 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <setTankMotor+0x140>)
 8000f0a:	635c      	str	r4, [r3, #52]	@ 0x34
			break;
 8000f0c:	e7ab      	b.n	8000e66 <setTankMotor+0x62>
			isRev = m3Rev;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <setTankMotor+0x14c>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <setTankMotor+0x116>
 8000f16:	2301      	movs	r3, #1
 8000f18:	405a      	eors	r2, r3
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8000f1a:	2180      	movs	r1, #128	@ 0x80
 8000f1c:	4808      	ldr	r0, [pc, #32]	@ (8000f40 <setTankMotor+0x13c>)
 8000f1e:	0109      	lsls	r1, r1, #4
 8000f20:	f001 fe12 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <setTankMotor+0x140>)
 8000f26:	63dc      	str	r4, [r3, #60]	@ 0x3c
}
 8000f28:	e79d      	b.n	8000e66 <setTankMotor+0x62>
	uint8_t sp = abs(speed);
 8000f2a:	2464      	movs	r4, #100	@ 0x64
		dir = TRUE;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	e794      	b.n	8000e5a <setTankMotor+0x56>
	uint8_t sp = abs(speed);
 8000f30:	2564      	movs	r5, #100	@ 0x64
		dir = TRUE;
 8000f32:	2201      	movs	r2, #1
 8000f34:	e79b      	b.n	8000e6e <setTankMotor+0x6a>
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	2000021d 	.word	0x2000021d
 8000f3c:	2000000a 	.word	0x2000000a
 8000f40:	48000400 	.word	0x48000400
 8000f44:	40012c00 	.word	0x40012c00
 8000f48:	20000009 	.word	0x20000009
 8000f4c:	2000000b 	.word	0x2000000b
 8000f50:	20000220 	.word	0x20000220

08000f54 <setMotorSpeedBidirectional>:
	speed = calculateSpeedWithDeadZoneDouble(speed);
 8000f54:	b2c9      	uxtb	r1, r1
void setMotorSpeedBidirectional(uint8_t motorN, int8_t speed) {
 8000f56:	b510      	push	{r4, lr}
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8000f58:	2909      	cmp	r1, #9
 8000f5a:	d91a      	bls.n	8000f92 <setMotorSpeedBidirectional+0x3e>
	if (speed > 100 - DEADZONE) returnValue = 100;	// upper deadzone
 8000f5c:	295a      	cmp	r1, #90	@ 0x5a
 8000f5e:	d83d      	bhi.n	8000fdc <setMotorSpeedBidirectional+0x88>
	speed = (speed - 50) * 2;
 8000f60:	3932      	subs	r1, #50	@ 0x32
 8000f62:	004a      	lsls	r2, r1, #1
 8000f64:	b252      	sxtb	r2, r2
	uint8_t sp = abs(speed);
 8000f66:	17d3      	asrs	r3, r2, #31
 8000f68:	18d4      	adds	r4, r2, r3
	if (speed >= 0)
 8000f6a:	43d2      	mvns	r2, r2
	uint8_t sp = abs(speed);
 8000f6c:	405c      	eors	r4, r3
 8000f6e:	b2e4      	uxtb	r4, r4
	if (speed >= 0)
 8000f70:	0fd2      	lsrs	r2, r2, #31
	switch (motorN) {
 8000f72:	2801      	cmp	r0, #1
 8000f74:	d111      	bne.n	8000f9a <setMotorSpeedBidirectional+0x46>
			isRev = m2Rev;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <setMotorSpeedBidirectional+0x90>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <setMotorSpeedBidirectional+0x2e>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	405a      	eors	r2, r3
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8000f82:	2180      	movs	r1, #128	@ 0x80
 8000f84:	4818      	ldr	r0, [pc, #96]	@ (8000fe8 <setMotorSpeedBidirectional+0x94>)
 8000f86:	0189      	lsls	r1, r1, #6
 8000f88:	f001 fdde 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <setMotorSpeedBidirectional+0x98>)
 8000f8e:	639c      	str	r4, [r3, #56]	@ 0x38
			break;
 8000f90:	e007      	b.n	8000fa2 <setMotorSpeedBidirectional+0x4e>
	uint8_t sp = abs(speed);
 8000f92:	2464      	movs	r4, #100	@ 0x64
		dir = FALSE;
 8000f94:	2200      	movs	r2, #0
	switch (motorN) {
 8000f96:	2801      	cmp	r0, #1
 8000f98:	d0ed      	beq.n	8000f76 <setMotorSpeedBidirectional+0x22>
 8000f9a:	2802      	cmp	r0, #2
 8000f9c:	d010      	beq.n	8000fc0 <setMotorSpeedBidirectional+0x6c>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	d000      	beq.n	8000fa4 <setMotorSpeedBidirectional+0x50>
}
 8000fa2:	bd10      	pop	{r4, pc}
			isRev = m1Rev;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <setMotorSpeedBidirectional+0x9c>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <setMotorSpeedBidirectional+0x5c>
 8000fac:	2301      	movs	r3, #1
 8000fae:	405a      	eors	r2, r3
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 8000fb0:	2180      	movs	r1, #128	@ 0x80
 8000fb2:	480d      	ldr	r0, [pc, #52]	@ (8000fe8 <setMotorSpeedBidirectional+0x94>)
 8000fb4:	0209      	lsls	r1, r1, #8
 8000fb6:	f001 fdc7 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <setMotorSpeedBidirectional+0x98>)
 8000fbc:	635c      	str	r4, [r3, #52]	@ 0x34
			break;
 8000fbe:	e7f0      	b.n	8000fa2 <setMotorSpeedBidirectional+0x4e>
			isRev = m3Rev;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <setMotorSpeedBidirectional+0xa0>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <setMotorSpeedBidirectional+0x78>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	405a      	eors	r2, r3
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <setMotorSpeedBidirectional+0x94>)
 8000fd0:	0109      	lsls	r1, r1, #4
 8000fd2:	f001 fdb9 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8000fd6:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <setMotorSpeedBidirectional+0x98>)
 8000fd8:	63dc      	str	r4, [r3, #60]	@ 0x3c
}
 8000fda:	e7e2      	b.n	8000fa2 <setMotorSpeedBidirectional+0x4e>
	uint8_t sp = abs(speed);
 8000fdc:	2464      	movs	r4, #100	@ 0x64
		dir = TRUE;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	e7d9      	b.n	8000f96 <setMotorSpeedBidirectional+0x42>
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	2000000a 	.word	0x2000000a
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	40012c00 	.word	0x40012c00
 8000ff0:	2000000b 	.word	0x2000000b
 8000ff4:	20000220 	.word	0x20000220

08000ff8 <setMotorSpeedUnidirectional>:
void setMotorSpeedUnidirectional(uint8_t motorN, int8_t speed) {
 8000ff8:	b510      	push	{r4, lr}
	uint8_t sp = calculateSpeedWithDeadZoneSingle(speed);
 8000ffa:	b2cc      	uxtb	r4, r1
	if (speed > (50 - DEADZONE) && speed < (50 + DEADZONE)) returnValue = 50;	// central deadzone
 8000ffc:	0023      	movs	r3, r4
 8000ffe:	3b29      	subs	r3, #41	@ 0x29
 8001000:	2b12      	cmp	r3, #18
 8001002:	d915      	bls.n	8001030 <setMotorSpeedUnidirectional+0x38>
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8001004:	2c09      	cmp	r4, #9
 8001006:	d81d      	bhi.n	8001044 <setMotorSpeedUnidirectional+0x4c>
	uint8_t dir = m1Rev;
 8001008:	4b1c      	ldr	r3, [pc, #112]	@ (800107c <setMotorSpeedUnidirectional+0x84>)
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 800100a:	2400      	movs	r4, #0
	uint8_t dir = m1Rev;
 800100c:	781a      	ldrb	r2, [r3, #0]
	switch (motorN) {
 800100e:	2801      	cmp	r0, #1
 8001010:	d113      	bne.n	800103a <setMotorSpeedUnidirectional+0x42>
			isRev = m2Rev;
 8001012:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <setMotorSpeedUnidirectional+0x88>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d002      	beq.n	8001020 <setMotorSpeedUnidirectional+0x28>
 800101a:	4253      	negs	r3, r2
 800101c:	415a      	adcs	r2, r3
 800101e:	b2d2      	uxtb	r2, r2
			HAL_GPIO_WritePin(DIR_M2_GPIO_Port, DIR_M2_Pin, dir);
 8001020:	2180      	movs	r1, #128	@ 0x80
 8001022:	4818      	ldr	r0, [pc, #96]	@ (8001084 <setMotorSpeedUnidirectional+0x8c>)
 8001024:	0189      	lsls	r1, r1, #6
 8001026:	f001 fd8f 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR2 = sp;
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <setMotorSpeedUnidirectional+0x90>)
 800102c:	639c      	str	r4, [r3, #56]	@ 0x38
			break;
 800102e:	e008      	b.n	8001042 <setMotorSpeedUnidirectional+0x4a>
	if (speed > (50 - DEADZONE) && speed < (50 + DEADZONE)) returnValue = 50;	// central deadzone
 8001030:	2432      	movs	r4, #50	@ 0x32
	uint8_t dir = m1Rev;
 8001032:	4b12      	ldr	r3, [pc, #72]	@ (800107c <setMotorSpeedUnidirectional+0x84>)
 8001034:	781a      	ldrb	r2, [r3, #0]
	switch (motorN) {
 8001036:	2801      	cmp	r0, #1
 8001038:	d0eb      	beq.n	8001012 <setMotorSpeedUnidirectional+0x1a>
 800103a:	2802      	cmp	r0, #2
 800103c:	d00f      	beq.n	800105e <setMotorSpeedUnidirectional+0x66>
 800103e:	2800      	cmp	r0, #0
 8001040:	d004      	beq.n	800104c <setMotorSpeedUnidirectional+0x54>
}
 8001042:	bd10      	pop	{r4, pc}
	if (speed > 100 - DEADZONE) returnValue = 100;	// upper deadzone
 8001044:	2c5a      	cmp	r4, #90	@ 0x5a
 8001046:	d9f4      	bls.n	8001032 <setMotorSpeedUnidirectional+0x3a>
 8001048:	2464      	movs	r4, #100	@ 0x64
 800104a:	e7f2      	b.n	8001032 <setMotorSpeedUnidirectional+0x3a>
			HAL_GPIO_WritePin(DIR_M1_GPIO_Port, DIR_M1_Pin, dir);
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	2200      	movs	r2, #0
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <setMotorSpeedUnidirectional+0x8c>)
 8001052:	0209      	lsls	r1, r1, #8
 8001054:	f001 fd78 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR1 = sp;
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <setMotorSpeedUnidirectional+0x90>)
 800105a:	635c      	str	r4, [r3, #52]	@ 0x34
			break;
 800105c:	e7f1      	b.n	8001042 <setMotorSpeedUnidirectional+0x4a>
			isRev = m3Rev;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <setMotorSpeedUnidirectional+0x94>)
	if (getMotorRev(motorN)) dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <setMotorSpeedUnidirectional+0x74>
 8001066:	4253      	negs	r3, r2
 8001068:	415a      	adcs	r2, r3
 800106a:	b2d2      	uxtb	r2, r2
			HAL_GPIO_WritePin(DIR_M3_GPIO_Port, DIR_M3_Pin, dir);
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	4805      	ldr	r0, [pc, #20]	@ (8001084 <setMotorSpeedUnidirectional+0x8c>)
 8001070:	0109      	lsls	r1, r1, #4
 8001072:	f001 fd69 	bl	8002b48 <HAL_GPIO_WritePin>
			TIM1->CCR3 = sp;
 8001076:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <setMotorSpeedUnidirectional+0x90>)
 8001078:	63dc      	str	r4, [r3, #60]	@ 0x3c
}
 800107a:	e7e2      	b.n	8001042 <setMotorSpeedUnidirectional+0x4a>
 800107c:	2000000b 	.word	0x2000000b
 8001080:	2000000a 	.word	0x2000000a
 8001084:	48000400 	.word	0x48000400
 8001088:	40012c00 	.word	0x40012c00
 800108c:	20000220 	.word	0x20000220

08001090 <calculateSpeedWithDeadZoneDouble>:
uint8_t calculateSpeedWithDeadZoneDouble(uint8_t speed) {
 8001090:	0003      	movs	r3, r0
	if (speed < DEADZONE) returnValue = 0;	// lower deadzone
 8001092:	2000      	movs	r0, #0
 8001094:	2b09      	cmp	r3, #9
 8001096:	d902      	bls.n	800109e <calculateSpeedWithDeadZoneDouble+0xe>
	if (speed > 100 - DEADZONE) returnValue = 100;	// upper deadzone
 8001098:	0018      	movs	r0, r3
 800109a:	2b5a      	cmp	r3, #90	@ 0x5a
 800109c:	d800      	bhi.n	80010a0 <calculateSpeedWithDeadZoneDouble+0x10>
	return returnValue;
}
 800109e:	4770      	bx	lr
	if (speed > 100 - DEADZONE) returnValue = 100;	// upper deadzone
 80010a0:	2064      	movs	r0, #100	@ 0x64
 80010a2:	e7fc      	b.n	800109e <calculateSpeedWithDeadZoneDouble+0xe>

080010a4 <makeSound>:
/*	This is a blocking function that causes the motors to beep,
 *  keeping the duration as short as possible.
 * @duration:
 *
 */
void makeSound(uint8_t motorN, uint8_t duration) {
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	0004      	movs	r4, r0
 80010a8:	000d      	movs	r5, r1
	uint32_t time = HAL_GetTick();
 80010aa:	f001 f999 	bl	80023e0 <HAL_GetTick>
 80010ae:	0006      	movs	r6, r0
			break;
	}
}

void enableMotor(uint8_t motorN) {
	switch (motorN) {
 80010b0:	2c01      	cmp	r4, #1
 80010b2:	d026      	beq.n	8001102 <makeSound+0x5e>
 80010b4:	2c02      	cmp	r4, #2
 80010b6:	d047      	beq.n	8001148 <makeSound+0xa4>
 80010b8:	2c00      	cmp	r4, #0
 80010ba:	d03e      	beq.n	800113a <makeSound+0x96>
				TIM1->CCR2 = 2;
 80010bc:	2702      	movs	r7, #2
	while (HAL_GetTick() <= time + duration) {
 80010be:	19ad      	adds	r5, r5, r6
				TIM1->CCR2 = 2;
 80010c0:	4e25      	ldr	r6, [pc, #148]	@ (8001158 <makeSound+0xb4>)
	while (HAL_GetTick() <= time + duration) {
 80010c2:	f001 f98d 	bl	80023e0 <HAL_GetTick>
 80010c6:	42a8      	cmp	r0, r5
 80010c8:	d808      	bhi.n	80010dc <makeSound+0x38>
		switch (motorN) {
 80010ca:	2c01      	cmp	r4, #1
 80010cc:	d017      	beq.n	80010fe <makeSound+0x5a>
 80010ce:	2c02      	cmp	r4, #2
 80010d0:	d10b      	bne.n	80010ea <makeSound+0x46>
				TIM1->CCR3 = 2;
 80010d2:	63f4      	str	r4, [r6, #60]	@ 0x3c
	while (HAL_GetTick() <= time + duration) {
 80010d4:	f001 f984 	bl	80023e0 <HAL_GetTick>
 80010d8:	42a8      	cmp	r0, r5
 80010da:	d9f6      	bls.n	80010ca <makeSound+0x26>
	switch (motorN) {
 80010dc:	2c01      	cmp	r4, #1
 80010de:	d025      	beq.n	800112c <makeSound+0x88>
 80010e0:	2c02      	cmp	r4, #2
 80010e2:	d01c      	beq.n	800111e <makeSound+0x7a>
 80010e4:	2c00      	cmp	r4, #0
 80010e6:	d013      	beq.n	8001110 <makeSound+0x6c>
}
 80010e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (motorN) {
 80010ea:	2c00      	cmp	r4, #0
 80010ec:	d005      	beq.n	80010fa <makeSound+0x56>
	while (HAL_GetTick() <= time + duration) {
 80010ee:	f001 f977 	bl	80023e0 <HAL_GetTick>
 80010f2:	42a8      	cmp	r0, r5
 80010f4:	d8f2      	bhi.n	80010dc <makeSound+0x38>
		switch (motorN) {
 80010f6:	2c00      	cmp	r4, #0
 80010f8:	d1f9      	bne.n	80010ee <makeSound+0x4a>
				TIM1->CCR1 = 2;
 80010fa:	6377      	str	r7, [r6, #52]	@ 0x34
				break;
 80010fc:	e7e1      	b.n	80010c2 <makeSound+0x1e>
				TIM1->CCR2 = 2;
 80010fe:	63b7      	str	r7, [r6, #56]	@ 0x38
				break;
 8001100:	e7df      	b.n	80010c2 <makeSound+0x1e>
		case M1:
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
			break;
		case M2:
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	2201      	movs	r2, #1
 8001106:	4815      	ldr	r0, [pc, #84]	@ (800115c <makeSound+0xb8>)
 8001108:	0149      	lsls	r1, r1, #5
 800110a:	f001 fd1d 	bl	8002b48 <HAL_GPIO_WritePin>
			break;
 800110e:	e7d5      	b.n	80010bc <makeSound+0x18>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, FALSE);
 8001110:	2180      	movs	r1, #128	@ 0x80
 8001112:	2200      	movs	r2, #0
 8001114:	4811      	ldr	r0, [pc, #68]	@ (800115c <makeSound+0xb8>)
 8001116:	01c9      	lsls	r1, r1, #7
 8001118:	f001 fd16 	bl	8002b48 <HAL_GPIO_WritePin>
}
 800111c:	e7e4      	b.n	80010e8 <makeSound+0x44>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 800111e:	2180      	movs	r1, #128	@ 0x80
 8001120:	2200      	movs	r2, #0
 8001122:	480e      	ldr	r0, [pc, #56]	@ (800115c <makeSound+0xb8>)
 8001124:	00c9      	lsls	r1, r1, #3
 8001126:	f001 fd0f 	bl	8002b48 <HAL_GPIO_WritePin>
}
 800112a:	e7dd      	b.n	80010e8 <makeSound+0x44>
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
 800112c:	2180      	movs	r1, #128	@ 0x80
 800112e:	2200      	movs	r2, #0
 8001130:	480a      	ldr	r0, [pc, #40]	@ (800115c <makeSound+0xb8>)
 8001132:	0149      	lsls	r1, r1, #5
 8001134:	f001 fd08 	bl	8002b48 <HAL_GPIO_WritePin>
			break;
 8001138:	e7d6      	b.n	80010e8 <makeSound+0x44>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	2201      	movs	r2, #1
 800113e:	4807      	ldr	r0, [pc, #28]	@ (800115c <makeSound+0xb8>)
 8001140:	01c9      	lsls	r1, r1, #7
 8001142:	f001 fd01 	bl	8002b48 <HAL_GPIO_WritePin>
		case M3:
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
			break;
	}
}
 8001146:	e7b9      	b.n	80010bc <makeSound+0x18>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	2201      	movs	r2, #1
 800114c:	4803      	ldr	r0, [pc, #12]	@ (800115c <makeSound+0xb8>)
 800114e:	00c9      	lsls	r1, r1, #3
 8001150:	f001 fcfa 	bl	8002b48 <HAL_GPIO_WritePin>
			break;
 8001154:	e7b2      	b.n	80010bc <makeSound+0x18>
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	40012c00 	.word	0x40012c00
 800115c:	48000400 	.word	0x48000400

08001160 <disableMotor>:
void disableMotor(uint8_t motorN) {
 8001160:	b510      	push	{r4, lr}
	switch (motorN) {
 8001162:	2801      	cmp	r0, #1
 8001164:	d004      	beq.n	8001170 <disableMotor+0x10>
 8001166:	2802      	cmp	r0, #2
 8001168:	d010      	beq.n	800118c <disableMotor+0x2c>
 800116a:	2800      	cmp	r0, #0
 800116c:	d007      	beq.n	800117e <disableMotor+0x1e>
}
 800116e:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
 8001170:	2180      	movs	r1, #128	@ 0x80
 8001172:	2200      	movs	r2, #0
 8001174:	4809      	ldr	r0, [pc, #36]	@ (800119c <disableMotor+0x3c>)
 8001176:	0149      	lsls	r1, r1, #5
 8001178:	f001 fce6 	bl	8002b48 <HAL_GPIO_WritePin>
			break;
 800117c:	e7f7      	b.n	800116e <disableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, FALSE);
 800117e:	2180      	movs	r1, #128	@ 0x80
 8001180:	2200      	movs	r2, #0
 8001182:	4806      	ldr	r0, [pc, #24]	@ (800119c <disableMotor+0x3c>)
 8001184:	01c9      	lsls	r1, r1, #7
 8001186:	f001 fcdf 	bl	8002b48 <HAL_GPIO_WritePin>
}
 800118a:	e7f0      	b.n	800116e <disableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 800118c:	2180      	movs	r1, #128	@ 0x80
 800118e:	2200      	movs	r2, #0
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <disableMotor+0x3c>)
 8001192:	00c9      	lsls	r1, r1, #3
 8001194:	f001 fcd8 	bl	8002b48 <HAL_GPIO_WritePin>
}
 8001198:	e7e9      	b.n	800116e <disableMotor+0xe>
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	48000400 	.word	0x48000400

080011a0 <enableMotor>:
void enableMotor(uint8_t motorN) {
 80011a0:	b510      	push	{r4, lr}
	switch (motorN) {
 80011a2:	2801      	cmp	r0, #1
 80011a4:	d004      	beq.n	80011b0 <enableMotor+0x10>
 80011a6:	2802      	cmp	r0, #2
 80011a8:	d010      	beq.n	80011cc <enableMotor+0x2c>
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d007      	beq.n	80011be <enableMotor+0x1e>
}
 80011ae:	bd10      	pop	{r4, pc}
			HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
 80011b0:	2180      	movs	r1, #128	@ 0x80
 80011b2:	2201      	movs	r2, #1
 80011b4:	4809      	ldr	r0, [pc, #36]	@ (80011dc <enableMotor+0x3c>)
 80011b6:	0149      	lsls	r1, r1, #5
 80011b8:	f001 fcc6 	bl	8002b48 <HAL_GPIO_WritePin>
			break;
 80011bc:	e7f7      	b.n	80011ae <enableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
 80011be:	2180      	movs	r1, #128	@ 0x80
 80011c0:	2201      	movs	r2, #1
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <enableMotor+0x3c>)
 80011c4:	01c9      	lsls	r1, r1, #7
 80011c6:	f001 fcbf 	bl	8002b48 <HAL_GPIO_WritePin>
}
 80011ca:	e7f0      	b.n	80011ae <enableMotor+0xe>
			HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 80011cc:	2180      	movs	r1, #128	@ 0x80
 80011ce:	2201      	movs	r2, #1
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <enableMotor+0x3c>)
 80011d2:	00c9      	lsls	r1, r1, #3
 80011d4:	f001 fcb8 	bl	8002b48 <HAL_GPIO_WritePin>
}
 80011d8:	e7e9      	b.n	80011ae <enableMotor+0xe>
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	48000400 	.word	0x48000400

080011e0 <getChannelValuePercentage>:
//		}
//	}
//}

uint8_t getChannelValuePercentage(uint8_t channelNumber) {
	int temp = (reciever_channels[channelNumber] - 1000) / 10;
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <getChannelValuePercentage+0x28>)
 80011e2:	0040      	lsls	r0, r0, #1
 80011e4:	5ac3      	ldrh	r3, [r0, r3]
	if (temp > 100) temp = 100;
 80011e6:	4a09      	ldr	r2, [pc, #36]	@ (800120c <getChannelValuePercentage+0x2c>)
 80011e8:	2064      	movs	r0, #100	@ 0x64
uint8_t getChannelValuePercentage(uint8_t channelNumber) {
 80011ea:	b510      	push	{r4, lr}
	if (temp > 100) temp = 100;
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d803      	bhi.n	80011f8 <getChannelValuePercentage+0x18>
	if (temp < 0) temp = 0;
 80011f0:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <getChannelValuePercentage+0x30>)
 80011f2:	2000      	movs	r0, #0
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d800      	bhi.n	80011fa <getChannelValuePercentage+0x1a>
	return temp;
}
 80011f8:	bd10      	pop	{r4, pc}
	int temp = (reciever_channels[channelNumber] - 1000) / 10;
 80011fa:	4a06      	ldr	r2, [pc, #24]	@ (8001214 <getChannelValuePercentage+0x34>)
 80011fc:	210a      	movs	r1, #10
 80011fe:	1898      	adds	r0, r3, r2
 8001200:	f7ff f81e 	bl	8000240 <__divsi3>
	return temp;
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	e7f7      	b.n	80011f8 <getChannelValuePercentage+0x18>
 8001208:	200003e4 	.word	0x200003e4
 800120c:	000007d9 	.word	0x000007d9
 8001210:	000003de 	.word	0x000003de
 8001214:	fffffc18 	.word	0xfffffc18

08001218 <initReciever>:

//void initRecieverPPM(TIM_HandleTypeDef *htim) {
//	HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_3);
//}

void initReciever(TIM_HandleTypeDef *htim) {
 8001218:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(htim);
 800121a:	f003 ff51 	bl	80050c0 <HAL_TIM_Base_Start>
}
 800121e:	bd10      	pop	{r4, pc}

08001220 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (recieverIsPWM) {
 8001220:	4b30      	ldr	r3, [pc, #192]	@ (80012e4 <HAL_GPIO_EXTI_Callback+0xc4>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001222:	b570      	push	{r4, r5, r6, lr}
	if (recieverIsPWM) {
 8001224:	681b      	ldr	r3, [r3, #0]
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001226:	0004      	movs	r4, r0
	if (recieverIsPWM) {
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00e      	beq.n	800124a <HAL_GPIO_EXTI_Callback+0x2a>
		// channel 1
		if (GPIO_Pin == CH1_Pin) {
 800122c:	2801      	cmp	r0, #1
 800122e:	d02b      	beq.n	8001288 <HAL_GPIO_EXTI_Callback+0x68>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[1] = usWidth;
			}
		}
		// channel 2 (only falling, because it starts with ch1)
		if (GPIO_Pin == CH2_Pin) {
 8001230:	2802      	cmp	r0, #2
 8001232:	d043      	beq.n	80012bc <HAL_GPIO_EXTI_Callback+0x9c>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
			reciever_channels[2] = usWidth;
		}
		// channel 3 (only falling, because it starts with ch1)
		if (GPIO_Pin == CH3_Pin) {
 8001234:	2804      	cmp	r0, #4
 8001236:	d136      	bne.n	80012a6 <HAL_GPIO_EXTI_Callback+0x86>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001238:	4b2b      	ldr	r3, [pc, #172]	@ (80012e8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800123a:	4a2c      	ldr	r2, [pc, #176]	@ (80012ec <HAL_GPIO_EXTI_Callback+0xcc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001240:	b29b      	uxth	r3, r3
 8001242:	8013      	strh	r3, [r2, #0]
			reciever_channels[3] = usWidth;
 8001244:	4a2a      	ldr	r2, [pc, #168]	@ (80012f0 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001246:	80d3      	strh	r3, [r2, #6]
					}
				}
			}
		}
	}
}
 8001248:	bd70      	pop	{r4, r5, r6, pc}
		if (GPIO_Pin == CH1_Pin) {
 800124a:	2801      	cmp	r0, #1
 800124c:	d1fc      	bne.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 0) {
 800124e:	2101      	movs	r1, #1
 8001250:	4828      	ldr	r0, [pc, #160]	@ (80012f4 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001252:	f001 fc73 	bl	8002b3c <HAL_GPIO_ReadPin>
 8001256:	2800      	cmp	r0, #0
 8001258:	d1f6      	bne.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 800125a:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <HAL_GPIO_EXTI_Callback+0xc8>)
 800125c:	4923      	ldr	r1, [pc, #140]	@ (80012ec <HAL_GPIO_EXTI_Callback+0xcc>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	6a53      	ldr	r3, [r2, #36]	@ 0x24
				__HAL_TIM_SET_COUNTER(&htim6, 0);  // reset the counter
 8001262:	6250      	str	r0, [r2, #36]	@ 0x24
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 8001264:	4a24      	ldr	r2, [pc, #144]	@ (80012f8 <HAL_GPIO_EXTI_Callback+0xd8>)
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001266:	b29b      	uxth	r3, r3
 8001268:	800b      	strh	r3, [r1, #0]
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 800126a:	4293      	cmp	r3, r2
 800126c:	d82f      	bhi.n	80012ce <HAL_GPIO_EXTI_Callback+0xae>
					if (channelToRead != 0) {
 800126e:	4923      	ldr	r1, [pc, #140]	@ (80012fc <HAL_GPIO_EXTI_Callback+0xdc>)
 8001270:	780a      	ldrb	r2, [r1, #0]
 8001272:	2a00      	cmp	r2, #0
 8001274:	d0e8      	beq.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 8001276:	0055      	lsls	r5, r2, #1
 8001278:	4c1d      	ldr	r4, [pc, #116]	@ (80012f0 <HAL_GPIO_EXTI_Callback+0xd0>)
						channelToRead++;
 800127a:	3201      	adds	r2, #1
 800127c:	b2d2      	uxtb	r2, r2
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 800127e:	532b      	strh	r3, [r5, r4]
						if (channelToRead > NUMBER_OF_PPM_CHANNEL) {
 8001280:	2a08      	cmp	r2, #8
 8001282:	d82c      	bhi.n	80012de <HAL_GPIO_EXTI_Callback+0xbe>
						channelToRead++;
 8001284:	700a      	strb	r2, [r1, #0]
 8001286:	e7df      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 1) {
 8001288:	2101      	movs	r1, #1
 800128a:	481a      	ldr	r0, [pc, #104]	@ (80012f4 <HAL_GPIO_EXTI_Callback+0xd4>)
 800128c:	f001 fc56 	bl	8002b3c <HAL_GPIO_ReadPin>
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_GPIO_EXTI_Callback+0xc8>)
 8001292:	681b      	ldr	r3, [r3, #0]
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 1) {
 8001294:	2801      	cmp	r0, #1
 8001296:	d01f      	beq.n	80012d8 <HAL_GPIO_EXTI_Callback+0xb8>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129a:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <HAL_GPIO_EXTI_Callback+0xcc>)
 800129c:	b29b      	uxth	r3, r3
 800129e:	8013      	strh	r3, [r2, #0]
				reciever_channels[1] = usWidth;
 80012a0:	4a13      	ldr	r2, [pc, #76]	@ (80012f0 <HAL_GPIO_EXTI_Callback+0xd0>)
 80012a2:	8053      	strh	r3, [r2, #2]
		if (GPIO_Pin == CH4_Pin) {
 80012a4:	e7d0      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
 80012a6:	2808      	cmp	r0, #8
 80012a8:	d1ce      	bne.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80012ac:	4a0f      	ldr	r2, [pc, #60]	@ (80012ec <HAL_GPIO_EXTI_Callback+0xcc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	8013      	strh	r3, [r2, #0]
			reciever_channels[4] = usWidth;
 80012b6:	4a0e      	ldr	r2, [pc, #56]	@ (80012f0 <HAL_GPIO_EXTI_Callback+0xd0>)
 80012b8:	8113      	strh	r3, [r2, #8]
 80012ba:	e7c5      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
			usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80012be:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <HAL_GPIO_EXTI_Callback+0xcc>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	8013      	strh	r3, [r2, #0]
			reciever_channels[2] = usWidth;
 80012c8:	4a09      	ldr	r2, [pc, #36]	@ (80012f0 <HAL_GPIO_EXTI_Callback+0xd0>)
 80012ca:	8093      	strh	r3, [r2, #4]
		if (GPIO_Pin == CH4_Pin) {
 80012cc:	e7bc      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
					reciever_channels[0] = usWidth;	// store the separation pulse width
 80012ce:	4a08      	ldr	r2, [pc, #32]	@ (80012f0 <HAL_GPIO_EXTI_Callback+0xd0>)
 80012d0:	8013      	strh	r3, [r2, #0]
					channelToRead = 1;	// next channel is ch1
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_GPIO_EXTI_Callback+0xdc>)
 80012d4:	701c      	strb	r4, [r3, #0]
 80012d6:	e7b7      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 80012d8:	2200      	movs	r2, #0
 80012da:	625a      	str	r2, [r3, #36]	@ 0x24
		if (GPIO_Pin == CH4_Pin) {
 80012dc:	e7b4      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
							channelToRead = 0;
 80012de:	7008      	strb	r0, [r1, #0]
}
 80012e0:	e7b2      	b.n	8001248 <HAL_GPIO_EXTI_Callback+0x28>
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	20000000 	.word	0x20000000
 80012e8:	200002c0 	.word	0x200002c0
 80012ec:	200003f6 	.word	0x200003f6
 80012f0:	200003e4 	.word	0x200003e4
 80012f4:	48000400 	.word	0x48000400
 80012f8:	00001194 	.word	0x00001194
 80012fc:	20000012 	.word	0x20000012

08001300 <tankMix>:

TankMotors tankMix(uint8_t STchannel, uint8_t THchannel) {
 8001300:	b510      	push	{r4, lr}
	TankMotors t;
	int8_t st = (STchannel - 50) * 2;
	int8_t th = (THchannel - 50) * 2;
 8001302:	3932      	subs	r1, #50	@ 0x32
	int8_t st = (STchannel - 50) * 2;
 8001304:	3832      	subs	r0, #50	@ 0x32
	int8_t th = (THchannel - 50) * 2;
 8001306:	0049      	lsls	r1, r1, #1
	int8_t st = (STchannel - 50) * 2;
 8001308:	0040      	lsls	r0, r0, #1
	int16_t ml = th + st;	// mixing
 800130a:	b249      	sxtb	r1, r1
 800130c:	b240      	sxtb	r0, r0
TankMotors tankMix(uint8_t STchannel, uint8_t THchannel) {
 800130e:	b082      	sub	sp, #8
	int16_t ml = th + st;	// mixing
 8001310:	180c      	adds	r4, r1, r0
	if (ml < -100) ml = -100;
	if (mr > 100) mr = 100;
	if (mr < -100) mr = -100;
	t.speedL = (ml + 100) / 2;	// keep value inside 0 and 100
	t.speedR = (mr + 100) / 2;
	return t;
 8001312:	aa01      	add	r2, sp, #4
	if (ml < -100) ml = -100;
 8001314:	1c23      	adds	r3, r4, #0
 8001316:	3464      	adds	r4, #100	@ 0x64
 8001318:	da01      	bge.n	800131e <tankMix+0x1e>
 800131a:	2364      	movs	r3, #100	@ 0x64
 800131c:	425b      	negs	r3, r3
	t.speedL = (ml + 100) / 2;	// keep value inside 0 and 100
 800131e:	b21c      	sxth	r4, r3
 8001320:	2c64      	cmp	r4, #100	@ 0x64
 8001322:	dd00      	ble.n	8001326 <tankMix+0x26>
 8001324:	2364      	movs	r3, #100	@ 0x64
 8001326:	3364      	adds	r3, #100	@ 0x64
 8001328:	b21b      	sxth	r3, r3
 800132a:	105b      	asrs	r3, r3, #1
	int16_t mr = th - st;	// mixing
 800132c:	1a09      	subs	r1, r1, r0
	return t;
 800132e:	7013      	strb	r3, [r2, #0]
	if (mr < -100) mr = -100;
 8001330:	1c08      	adds	r0, r1, #0
 8001332:	3164      	adds	r1, #100	@ 0x64
 8001334:	da02      	bge.n	800133c <tankMix+0x3c>
 8001336:	2364      	movs	r3, #100	@ 0x64
 8001338:	425b      	negs	r3, r3
 800133a:	1c18      	adds	r0, r3, #0
	t.speedR = (mr + 100) / 2;
 800133c:	b203      	sxth	r3, r0
 800133e:	2b64      	cmp	r3, #100	@ 0x64
 8001340:	dd00      	ble.n	8001344 <tankMix+0x44>
 8001342:	2064      	movs	r0, #100	@ 0x64
 8001344:	3064      	adds	r0, #100	@ 0x64
 8001346:	05c3      	lsls	r3, r0, #23
	return t;
 8001348:	0e1b      	lsrs	r3, r3, #24
 800134a:	7810      	ldrb	r0, [r2, #0]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	4318      	orrs	r0, r3
}
 8001350:	b002      	add	sp, #8
 8001352:	bd10      	pop	{r4, pc}

08001354 <setServoAngle>:
 * P(us) = P * 1'000'000
 * factor = 10000/P(us)
 * if factor < 1 divide by the new factor
 * new factor = 1/factor
 */
void setServoAngle(uint8_t servoN, uint8_t percentage) {
 8001354:	b510      	push	{r4, lr}
 8001356:	0004      	movs	r4, r0
 8001358:	b082      	sub	sp, #8
 800135a:	0008      	movs	r0, r1
	const uint8_t factor = 2;
	uint16_t temp = calculateSpeedWithDeadZoneDouble(percentage);
 800135c:	f7ff fe98 	bl	8001090 <calculateSpeedWithDeadZoneDouble>
 8001360:	1c03      	adds	r3, r0, #0
 8001362:	2864      	cmp	r0, #100	@ 0x64
 8001364:	d900      	bls.n	8001368 <setServoAngle+0x14>
 8001366:	2364      	movs	r3, #100	@ 0x64
 8001368:	b29b      	uxth	r3, r3
	switch (servoN) {
 800136a:	2c00      	cmp	r4, #0
 800136c:	d018      	beq.n	80013a0 <setServoAngle+0x4c>
 800136e:	2c01      	cmp	r4, #1
 8001370:	d114      	bne.n	800139c <setServoAngle+0x48>
			isRev = s2Rev;
 8001372:	4a16      	ldr	r2, [pc, #88]	@ (80013cc <setServoAngle+0x78>)
	if (temp > 100) temp = 100;
	if (temp < 0) temp = 0;

	if (getServoRev(servoN)) temp = 100 - temp;	// take in count if the servo must be reversed or not
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	2a00      	cmp	r2, #0
 8001378:	d002      	beq.n	8001380 <setServoAngle+0x2c>
 800137a:	2264      	movs	r2, #100	@ 0x64
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	b29b      	uxth	r3, r3
		case S1:
			temp = map(temp, 0, 100, S1_MIN_TIME_PWM, S1_MAX_TIME_PWM);
			TIM16->CCR1 = temp * factor;
			break;
		case S2:
			temp = map(temp, 0, 100, S2_MIN_TIME_PWM, S2_MAX_TIME_PWM);
 8001380:	b218      	sxth	r0, r3
 8001382:	2396      	movs	r3, #150	@ 0x96
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2388      	movs	r3, #136	@ 0x88
 800138a:	2264      	movs	r2, #100	@ 0x64
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	2100      	movs	r1, #0
 8001390:	f7ff fd16 	bl	8000dc0 <map>
			TIM17->CCR1 = temp * factor;
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <setServoAngle+0x7c>)
 8001396:	b280      	uxth	r0, r0
 8001398:	0040      	lsls	r0, r0, #1
 800139a:	6358      	str	r0, [r3, #52]	@ 0x34
			break;
	}
}
 800139c:	b002      	add	sp, #8
 800139e:	bd10      	pop	{r4, pc}
			isRev = s1Rev;
 80013a0:	4a0c      	ldr	r2, [pc, #48]	@ (80013d4 <setServoAngle+0x80>)
	if (getServoRev(servoN)) temp = 100 - temp;	// take in count if the servo must be reversed or not
 80013a2:	7812      	ldrb	r2, [r2, #0]
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	d002      	beq.n	80013ae <setServoAngle+0x5a>
 80013a8:	2264      	movs	r2, #100	@ 0x64
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b29b      	uxth	r3, r3
			temp = map(temp, 0, 100, S1_MIN_TIME_PWM, S1_MAX_TIME_PWM);
 80013ae:	b218      	sxth	r0, r3
 80013b0:	23fa      	movs	r3, #250	@ 0xfa
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	23fa      	movs	r3, #250	@ 0xfa
 80013b8:	2264      	movs	r2, #100	@ 0x64
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	2100      	movs	r1, #0
 80013be:	f7ff fcff 	bl	8000dc0 <map>
			TIM16->CCR1 = temp * factor;
 80013c2:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <setServoAngle+0x84>)
 80013c4:	b280      	uxth	r0, r0
 80013c6:	0040      	lsls	r0, r0, #1
 80013c8:	6358      	str	r0, [r3, #52]	@ 0x34
			break;
 80013ca:	e7e7      	b.n	800139c <setServoAngle+0x48>
 80013cc:	2000021e 	.word	0x2000021e
 80013d0:	40014800 	.word	0x40014800
 80013d4:	2000021f 	.word	0x2000021f
 80013d8:	40014400 	.word	0x40014400

080013dc <setServoIsEnable>:

void setServoIsEnable(uint8_t state, TIM_HandleTypeDef *htim){
 80013dc:	0003      	movs	r3, r0
 80013de:	b510      	push	{r4, lr}
 80013e0:	0008      	movs	r0, r1
	if(state == TRUE){	// turn of the pwm generation
		HAL_TIMEx_PWMN_Start(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 80013e2:	2100      	movs	r1, #0
	if(state == TRUE){	// turn of the pwm generation
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d002      	beq.n	80013ee <setServoIsEnable+0x12>
	}else{
		HAL_TIMEx_PWMN_Stop(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 80013e8:	f004 f974 	bl	80056d4 <HAL_TIMEx_PWMN_Stop>
	}
}
 80013ec:	bd10      	pop	{r4, pc}
		HAL_TIMEx_PWMN_Start(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 80013ee:	f004 f929 	bl	8005644 <HAL_TIMEx_PWMN_Start>
 80013f2:	e7fb      	b.n	80013ec <setServoIsEnable+0x10>

080013f4 <decodeCommand>:

	sprintf(recievedString, "%s, %s", c.type, c.value);
	return isOK;
}

Command decodeCommand(char *buffer) {
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	0005      	movs	r5, r0
	Command c;
	// make a copy of the buffer and use it because strtok is destructive
	char temp[strlen(buffer)];
 80013fc:	0008      	movs	r0, r1
Command decodeCommand(char *buffer) {
 80013fe:	000e      	movs	r6, r1
	char temp[strlen(buffer)];
 8001400:	f7fe fe82 	bl	8000108 <strlen>
 8001404:	4669      	mov	r1, sp
 8001406:	1dc3      	adds	r3, r0, #7
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1acb      	subs	r3, r1, r3
 800140e:	469d      	mov	sp, r3
 8001410:	0002      	movs	r2, r0
 8001412:	466c      	mov	r4, sp
	strcpy(temp, buffer);
 8001414:	3201      	adds	r2, #1
 8001416:	0031      	movs	r1, r6
 8001418:	4668      	mov	r0, sp
 800141a:	f006 fb50 	bl	8007abe <memcpy>
	return c;
}

void remove_all_chars(char *str, char c) {
	char *pr = str, *pw = str;
	while (*pr) {
 800141e:	7823      	ldrb	r3, [r4, #0]
 8001420:	466a      	mov	r2, sp
 8001422:	2b00      	cmp	r3, #0
 8001424:	d009      	beq.n	800143a <decodeCommand+0x46>
 8001426:	4669      	mov	r1, sp
		*pw = *pr++;
 8001428:	7013      	strb	r3, [r2, #0]
		pw += (*pw != c);
 800142a:	3b20      	subs	r3, #32
 800142c:	1e58      	subs	r0, r3, #1
 800142e:	4183      	sbcs	r3, r0
		*pw = *pr++;
 8001430:	3101      	adds	r1, #1
		pw += (*pw != c);
 8001432:	18d2      	adds	r2, r2, r3
	while (*pr) {
 8001434:	780b      	ldrb	r3, [r1, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f6      	bne.n	8001428 <decodeCommand+0x34>
	}
	*pw = '\0';
 800143a:	2300      	movs	r3, #0
 800143c:	7013      	strb	r3, [r2, #0]
	while (*pr) {
 800143e:	7823      	ldrb	r3, [r4, #0]
 8001440:	0022      	movs	r2, r4
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <decodeCommand+0x66>
 8001446:	0021      	movs	r1, r4
		*pw = *pr++;
 8001448:	7013      	strb	r3, [r2, #0]
		pw += (*pw != c);
 800144a:	3b0a      	subs	r3, #10
 800144c:	1e58      	subs	r0, r3, #1
 800144e:	4183      	sbcs	r3, r0
		*pw = *pr++;
 8001450:	3101      	adds	r1, #1
		pw += (*pw != c);
 8001452:	18d2      	adds	r2, r2, r3
	while (*pr) {
 8001454:	780b      	ldrb	r3, [r1, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f6      	bne.n	8001448 <decodeCommand+0x54>
	*pw = '\0';
 800145a:	2300      	movs	r3, #0
	char *token = strtok(temp, COMMAND_TYPE_SEPARATOR);
 800145c:	4e0d      	ldr	r6, [pc, #52]	@ (8001494 <decodeCommand+0xa0>)
	*pw = '\0';
 800145e:	7013      	strb	r3, [r2, #0]
	char *token = strtok(temp, COMMAND_TYPE_SEPARATOR);
 8001460:	0031      	movs	r1, r6
 8001462:	0020      	movs	r0, r4
 8001464:	f006 fa48 	bl	80078f8 <strtok>
 8001468:	0001      	movs	r1, r0
	strcpy(c.type, token);
 800146a:	1d38      	adds	r0, r7, #4
 800146c:	f006 fb1f 	bl	8007aae <strcpy>
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 8001470:	0031      	movs	r1, r6
 8001472:	2000      	movs	r0, #0
 8001474:	f006 fa40 	bl	80078f8 <strtok>
	strcpy(c.value, token);
 8001478:	230e      	movs	r3, #14
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 800147a:	0001      	movs	r1, r0
	strcpy(c.value, token);
 800147c:	18f8      	adds	r0, r7, r3
 800147e:	f006 fb16 	bl	8007aae <strcpy>
	return c;
 8001482:	2214      	movs	r2, #20
 8001484:	0028      	movs	r0, r5
 8001486:	1d39      	adds	r1, r7, #4
 8001488:	f006 fb19 	bl	8007abe <memcpy>
}
 800148c:	0028      	movs	r0, r5
 800148e:	46bd      	mov	sp, r7
 8001490:	b007      	add	sp, #28
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	08008b28 	.word	0x08008b28

08001498 <serialPrintString>:
}

void serialPrintString(uint8_t *s) {
 8001498:	b510      	push	{r4, lr}
 800149a:	0004      	movs	r4, r0
	CDC_Transmit_FS(s, strlen(s));
 800149c:	f7fe fe34 	bl	8000108 <strlen>
 80014a0:	b281      	uxth	r1, r0
 80014a2:	0020      	movs	r0, r4
 80014a4:	f005 fdec 	bl	8007080 <CDC_Transmit_FS>
}
 80014a8:	bd10      	pop	{r4, pc}
 80014aa:	46c0      	nop			@ (mov r8, r8)

080014ac <storeSettingsToEeprom>:

void storeSettingsToEeprom() {
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ae:	46ce      	mov	lr, r9
 80014b0:	4647      	mov	r7, r8
 80014b2:	b580      	push	{r7, lr}
	dataToStore[0] = thChannel;
	dataToStore[1] = stChannel;
	dataToStore[2] = wpChannel;
	dataToStore[3] = s1Channel;
	dataToStore[4] = s2Channel;
	dataToStore[5] = armChannel;
 80014b4:	4a48      	ldr	r2, [pc, #288]	@ (80015d8 <storeSettingsToEeprom+0x12c>)
	dataToStore[4] = s2Channel;
 80014b6:	4b49      	ldr	r3, [pc, #292]	@ (80015dc <storeSettingsToEeprom+0x130>)
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	0212      	lsls	r2, r2, #8

	dataToStore[6] = m1Rev;
 80014be:	4948      	ldr	r1, [pc, #288]	@ (80015e0 <storeSettingsToEeprom+0x134>)
 80014c0:	4313      	orrs	r3, r2
	dataToStore[7] = m2Rev;
 80014c2:	4a48      	ldr	r2, [pc, #288]	@ (80015e4 <storeSettingsToEeprom+0x138>)
 80014c4:	7809      	ldrb	r1, [r1, #0]
 80014c6:	7812      	ldrb	r2, [r2, #0]
 80014c8:	0409      	lsls	r1, r1, #16
 80014ca:	0612      	lsls	r2, r2, #24
 80014cc:	430b      	orrs	r3, r1
void storeSettingsToEeprom() {
 80014ce:	b08b      	sub	sp, #44	@ 0x2c
 80014d0:	4313      	orrs	r3, r2
	dataToStore[0] = thChannel;
 80014d2:	9306      	str	r3, [sp, #24]
	dataToStore[8] = m3Rev;
 80014d4:	4b44      	ldr	r3, [pc, #272]	@ (80015e8 <storeSettingsToEeprom+0x13c>)
 80014d6:	ad05      	add	r5, sp, #20
 80014d8:	781b      	ldrb	r3, [r3, #0]
	dataToStore[1] = stChannel;
 80014da:	4944      	ldr	r1, [pc, #272]	@ (80015ec <storeSettingsToEeprom+0x140>)
	dataToStore[8] = m3Rev;
 80014dc:	722b      	strb	r3, [r5, #8]
	dataToStore[9] = s1Rev;
 80014de:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <storeSettingsToEeprom+0x144>)
	dataToStore[0] = thChannel;
 80014e0:	4a44      	ldr	r2, [pc, #272]	@ (80015f4 <storeSettingsToEeprom+0x148>)
	dataToStore[9] = s1Rev;
 80014e2:	781b      	ldrb	r3, [r3, #0]
	dataToStore[0] = thChannel;
 80014e4:	7809      	ldrb	r1, [r1, #0]
 80014e6:	7812      	ldrb	r2, [r2, #0]
	dataToStore[9] = s1Rev;
 80014e8:	726b      	strb	r3, [r5, #9]
	dataToStore[10] = s2Rev;
 80014ea:	4b43      	ldr	r3, [pc, #268]	@ (80015f8 <storeSettingsToEeprom+0x14c>)
	dataToStore[0] = thChannel;
 80014ec:	0209      	lsls	r1, r1, #8
	dataToStore[2] = wpChannel;
 80014ee:	4c43      	ldr	r4, [pc, #268]	@ (80015fc <storeSettingsToEeprom+0x150>)
	dataToStore[10] = s2Rev;
 80014f0:	781b      	ldrb	r3, [r3, #0]
	dataToStore[0] = thChannel;
 80014f2:	430a      	orrs	r2, r1
	dataToStore[3] = s1Channel;
 80014f4:	4942      	ldr	r1, [pc, #264]	@ (8001600 <storeSettingsToEeprom+0x154>)
	dataToStore[0] = thChannel;
 80014f6:	7824      	ldrb	r4, [r4, #0]
 80014f8:	7809      	ldrb	r1, [r1, #0]
	dataToStore[10] = s2Rev;
 80014fa:	72ab      	strb	r3, [r5, #10]

	switch (mLeft) {	// mLeft is code 0
 80014fc:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <storeSettingsToEeprom+0x158>)
	dataToStore[0] = thChannel;
 80014fe:	0424      	lsls	r4, r4, #16
 8001500:	0609      	lsls	r1, r1, #24
 8001502:	4322      	orrs	r2, r4
	switch (mLeft) {	// mLeft is code 0
 8001504:	781b      	ldrb	r3, [r3, #0]
	dataToStore[0] = thChannel;
 8001506:	430a      	orrs	r2, r1
 8001508:	2000      	movs	r0, #0
 800150a:	9205      	str	r2, [sp, #20]
	switch (mLeft) {	// mLeft is code 0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d046      	beq.n	800159e <storeSettingsToEeprom+0xf2>
 8001510:	2b02      	cmp	r3, #2
 8001512:	d05e      	beq.n	80015d2 <storeSettingsToEeprom+0x126>
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05a      	beq.n	80015ce <storeSettingsToEeprom+0x122>
		case M3:
			dataToStore[13] = 0;
			break;
	}

	switch (mRight) {	// mRight is code 1
 8001518:	4b3b      	ldr	r3, [pc, #236]	@ (8001608 <storeSettingsToEeprom+0x15c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d043      	beq.n	80015a8 <storeSettingsToEeprom+0xfc>
 8001520:	2b02      	cmp	r3, #2
 8001522:	d051      	beq.n	80015c8 <storeSettingsToEeprom+0x11c>
 8001524:	2b00      	cmp	r3, #0
 8001526:	d04c      	beq.n	80015c2 <storeSettingsToEeprom+0x116>
		case M3:
			dataToStore[13] = 1;
			break;
	}

	switch (mWeapon) {	// mWeapon is code 2
 8001528:	4b38      	ldr	r3, [pc, #224]	@ (800160c <storeSettingsToEeprom+0x160>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d040      	beq.n	80015b2 <storeSettingsToEeprom+0x106>
 8001530:	2b02      	cmp	r3, #2
 8001532:	d044      	beq.n	80015be <storeSettingsToEeprom+0x112>
 8001534:	2b00      	cmp	r3, #0
 8001536:	d03f      	beq.n	80015b8 <storeSettingsToEeprom+0x10c>
			break;
		case M3:
			dataToStore[13] = 2;
			break;
	}
	dataToStore[14] = weaponDoubleDirection;
 8001538:	4b35      	ldr	r3, [pc, #212]	@ (8001610 <storeSettingsToEeprom+0x164>)
 800153a:	2613      	movs	r6, #19
 800153c:	781b      	ldrb	r3, [r3, #0]
	dataToStore[16] = noDisarm;
	dataToStore[17] = limitVoltage;
	dataToStore[18] = cutOffVoltage;
	dataToStore[19] = recieverIsPWM;
	// write to memory
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800153e:	2400      	movs	r4, #0
	dataToStore[14] = weaponDoubleDirection;
 8001540:	73ab      	strb	r3, [r5, #14]
	dataToStore[15] = tankMixIsON;
 8001542:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <storeSettingsToEeprom+0x168>)
	return data;
}

void write_byte_eeprom(uint8_t address, uint8_t value) {
	uint8_t data = value;
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001544:	2701      	movs	r7, #1
	dataToStore[15] = tankMixIsON;
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	446e      	add	r6, sp
 800154a:	73eb      	strb	r3, [r5, #15]
	dataToStore[16] = noDisarm;
 800154c:	4b32      	ldr	r3, [pc, #200]	@ (8001618 <storeSettingsToEeprom+0x16c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	742b      	strb	r3, [r5, #16]
	dataToStore[17] = limitVoltage;
 8001552:	4b32      	ldr	r3, [pc, #200]	@ (800161c <storeSettingsToEeprom+0x170>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	746b      	strb	r3, [r5, #17]
	dataToStore[18] = cutOffVoltage;
 8001558:	4b31      	ldr	r3, [pc, #196]	@ (8001620 <storeSettingsToEeprom+0x174>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	74ab      	strb	r3, [r5, #18]
	dataToStore[19] = recieverIsPWM;
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <storeSettingsToEeprom+0x178>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	74eb      	strb	r3, [r5, #19]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001564:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <storeSettingsToEeprom+0x17c>)
 8001566:	4699      	mov	r9, r3
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001568:	23fa      	movs	r3, #250	@ 0xfa
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4698      	mov	r8, r3
	uint8_t data = value;
 800156e:	782b      	ldrb	r3, [r5, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001570:	b2a2      	uxth	r2, r4
	uint8_t data = value;
 8001572:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001574:	4643      	mov	r3, r8
 8001576:	21a0      	movs	r1, #160	@ 0xa0
 8001578:	9302      	str	r3, [sp, #8]
 800157a:	4648      	mov	r0, r9
 800157c:	2301      	movs	r3, #1
 800157e:	9701      	str	r7, [sp, #4]
 8001580:	9600      	str	r6, [sp, #0]
 8001582:	f001 fecb 	bl	800331c <HAL_I2C_Mem_Write>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001586:	3401      	adds	r4, #1
	HAL_Delay(10);
 8001588:	200a      	movs	r0, #10
 800158a:	f000 ff2f 	bl	80023ec <HAL_Delay>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800158e:	3501      	adds	r5, #1
 8001590:	2c14      	cmp	r4, #20
 8001592:	d1ec      	bne.n	800156e <storeSettingsToEeprom+0xc2>
}
 8001594:	b00b      	add	sp, #44	@ 0x2c
 8001596:	bcc0      	pop	{r6, r7}
 8001598:	46b9      	mov	r9, r7
 800159a:	46b0      	mov	r8, r6
 800159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (mRight) {	// mRight is code 1
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <storeSettingsToEeprom+0x15c>)
			dataToStore[12] = 0;
 80015a0:	7328      	strb	r0, [r5, #12]
	switch (mRight) {	// mRight is code 1
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d1bb      	bne.n	8001520 <storeSettingsToEeprom+0x74>
			dataToStore[12] = 1;
 80015a8:	732b      	strb	r3, [r5, #12]
	switch (mWeapon) {	// mWeapon is code 2
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <storeSettingsToEeprom+0x160>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d1be      	bne.n	8001530 <storeSettingsToEeprom+0x84>
			dataToStore[12] = 2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	732b      	strb	r3, [r5, #12]
			break;
 80015b6:	e7bf      	b.n	8001538 <storeSettingsToEeprom+0x8c>
			dataToStore[11] = 2;
 80015b8:	3302      	adds	r3, #2
 80015ba:	72eb      	strb	r3, [r5, #11]
			break;
 80015bc:	e7bc      	b.n	8001538 <storeSettingsToEeprom+0x8c>
			dataToStore[13] = 2;
 80015be:	736b      	strb	r3, [r5, #13]
			break;
 80015c0:	e7ba      	b.n	8001538 <storeSettingsToEeprom+0x8c>
			dataToStore[11] = 1;
 80015c2:	3301      	adds	r3, #1
 80015c4:	72eb      	strb	r3, [r5, #11]
			break;
 80015c6:	e7af      	b.n	8001528 <storeSettingsToEeprom+0x7c>
			dataToStore[13] = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	736b      	strb	r3, [r5, #13]
			break;
 80015cc:	e7ac      	b.n	8001528 <storeSettingsToEeprom+0x7c>
			dataToStore[11] = 0;
 80015ce:	72eb      	strb	r3, [r5, #11]
			break;
 80015d0:	e7a2      	b.n	8001518 <storeSettingsToEeprom+0x6c>
			dataToStore[13] = 0;
 80015d2:	7368      	strb	r0, [r5, #13]
			break;
 80015d4:	e7a0      	b.n	8001518 <storeSettingsToEeprom+0x6c>
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	2000000d 	.word	0x2000000d
 80015e0:	2000000b 	.word	0x2000000b
 80015e4:	2000000a 	.word	0x2000000a
 80015e8:	20000220 	.word	0x20000220
 80015ec:	20000010 	.word	0x20000010
 80015f0:	2000021f 	.word	0x2000021f
 80015f4:	20000011 	.word	0x20000011
 80015f8:	2000021e 	.word	0x2000021e
 80015fc:	2000000f 	.word	0x2000000f
 8001600:	2000000e 	.word	0x2000000e
 8001604:	2000021d 	.word	0x2000021d
 8001608:	20000009 	.word	0x20000009
 800160c:	20000008 	.word	0x20000008
 8001610:	2000021c 	.word	0x2000021c
 8001614:	20000007 	.word	0x20000007
 8001618:	20000006 	.word	0x20000006
 800161c:	20000005 	.word	0x20000005
 8001620:	20000004 	.word	0x20000004
 8001624:	20000000 	.word	0x20000000
 8001628:	20000350 	.word	0x20000350

0800162c <readSettingsFromEeprom>:
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800162c:	4b4a      	ldr	r3, [pc, #296]	@ (8001758 <readSettingsFromEeprom+0x12c>)
void readSettingsFromEeprom() {
 800162e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001630:	46d6      	mov	lr, sl
 8001632:	469a      	mov	sl, r3
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8001634:	23fa      	movs	r3, #250	@ 0xfa
void readSettingsFromEeprom() {
 8001636:	464f      	mov	r7, r9
 8001638:	4646      	mov	r6, r8
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4699      	mov	r9, r3
 800163e:	2301      	movs	r3, #1
void readSettingsFromEeprom() {
 8001640:	b5c0      	push	{r6, r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	2613      	movs	r6, #19
 8001646:	af05      	add	r7, sp, #20
 8001648:	003d      	movs	r5, r7
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800164a:	2400      	movs	r4, #0
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800164c:	4698      	mov	r8, r3
 800164e:	446e      	add	r6, sp
 8001650:	464b      	mov	r3, r9
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	4643      	mov	r3, r8
 8001656:	b2a2      	uxth	r2, r4
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	21a0      	movs	r1, #160	@ 0xa0
 800165c:	2301      	movs	r3, #1
 800165e:	4650      	mov	r0, sl
 8001660:	9600      	str	r6, [sp, #0]
 8001662:	f001 ff53 	bl	800350c <HAL_I2C_Mem_Read>
	return data;
 8001666:	7833      	ldrb	r3, [r6, #0]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8001668:	3401      	adds	r4, #1
		dataRead[i] = read_byte_eeprom(i);
 800166a:	702b      	strb	r3, [r5, #0]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800166c:	3501      	adds	r5, #1
 800166e:	2c14      	cmp	r4, #20
 8001670:	d1ee      	bne.n	8001650 <readSettingsFromEeprom+0x24>
	thChannel = dataRead[0];
 8001672:	4b3a      	ldr	r3, [pc, #232]	@ (800175c <readSettingsFromEeprom+0x130>)
 8001674:	783a      	ldrb	r2, [r7, #0]
 8001676:	701a      	strb	r2, [r3, #0]
	stChannel = dataRead[1];
 8001678:	787a      	ldrb	r2, [r7, #1]
 800167a:	4b39      	ldr	r3, [pc, #228]	@ (8001760 <readSettingsFromEeprom+0x134>)
 800167c:	701a      	strb	r2, [r3, #0]
	wpChannel = dataRead[2];
 800167e:	78ba      	ldrb	r2, [r7, #2]
 8001680:	4b38      	ldr	r3, [pc, #224]	@ (8001764 <readSettingsFromEeprom+0x138>)
 8001682:	701a      	strb	r2, [r3, #0]
	s1Channel = dataRead[3];
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	4b38      	ldr	r3, [pc, #224]	@ (8001768 <readSettingsFromEeprom+0x13c>)
 8001688:	701a      	strb	r2, [r3, #0]
	s2Channel = dataRead[4];
 800168a:	793a      	ldrb	r2, [r7, #4]
 800168c:	4b37      	ldr	r3, [pc, #220]	@ (800176c <readSettingsFromEeprom+0x140>)
 800168e:	701a      	strb	r2, [r3, #0]
	armChannel = dataRead[5];
 8001690:	797a      	ldrb	r2, [r7, #5]
 8001692:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <readSettingsFromEeprom+0x144>)
 8001694:	701a      	strb	r2, [r3, #0]
	m1Rev = dataRead[6];
 8001696:	79ba      	ldrb	r2, [r7, #6]
 8001698:	4b36      	ldr	r3, [pc, #216]	@ (8001774 <readSettingsFromEeprom+0x148>)
 800169a:	701a      	strb	r2, [r3, #0]
	m2Rev = dataRead[7];
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	4b36      	ldr	r3, [pc, #216]	@ (8001778 <readSettingsFromEeprom+0x14c>)
 80016a0:	701a      	strb	r2, [r3, #0]
	m3Rev = dataRead[8];
 80016a2:	7a3a      	ldrb	r2, [r7, #8]
 80016a4:	4b35      	ldr	r3, [pc, #212]	@ (800177c <readSettingsFromEeprom+0x150>)
 80016a6:	701a      	strb	r2, [r3, #0]
	s1Rev = dataRead[9];
 80016a8:	7a7a      	ldrb	r2, [r7, #9]
 80016aa:	4b35      	ldr	r3, [pc, #212]	@ (8001780 <readSettingsFromEeprom+0x154>)
 80016ac:	701a      	strb	r2, [r3, #0]
	s2Rev = dataRead[10];
 80016ae:	7aba      	ldrb	r2, [r7, #10]
 80016b0:	4b34      	ldr	r3, [pc, #208]	@ (8001784 <readSettingsFromEeprom+0x158>)
 80016b2:	701a      	strb	r2, [r3, #0]
	switch (dataRead[11]) {	// control M1 at which motor is assigned
 80016b4:	7afb      	ldrb	r3, [r7, #11]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d029      	beq.n	800170e <readSettingsFromEeprom+0xe2>
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d048      	beq.n	8001750 <readSettingsFromEeprom+0x124>
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d043      	beq.n	800174a <readSettingsFromEeprom+0x11e>
	switch (dataRead[12]) {	// control M2 at which motor is assigned
 80016c2:	7b3b      	ldrb	r3, [r7, #12]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d028      	beq.n	800171a <readSettingsFromEeprom+0xee>
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d03a      	beq.n	8001742 <readSettingsFromEeprom+0x116>
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d034      	beq.n	800173a <readSettingsFromEeprom+0x10e>
	switch (dataRead[13]) {	// control M3 at which motor is assigned
 80016d0:	7b7b      	ldrb	r3, [r7, #13]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d026      	beq.n	8001724 <readSettingsFromEeprom+0xf8>
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d02c      	beq.n	8001734 <readSettingsFromEeprom+0x108>
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d026      	beq.n	800172c <readSettingsFromEeprom+0x100>
	weaponDoubleDirection = dataRead[14];
 80016de:	7bba      	ldrb	r2, [r7, #14]
 80016e0:	4b29      	ldr	r3, [pc, #164]	@ (8001788 <readSettingsFromEeprom+0x15c>)
 80016e2:	701a      	strb	r2, [r3, #0]
	tankMixIsON = dataRead[15];
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	4b29      	ldr	r3, [pc, #164]	@ (800178c <readSettingsFromEeprom+0x160>)
 80016e8:	701a      	strb	r2, [r3, #0]
	noDisarm = dataRead[16];
 80016ea:	7c3a      	ldrb	r2, [r7, #16]
 80016ec:	4b28      	ldr	r3, [pc, #160]	@ (8001790 <readSettingsFromEeprom+0x164>)
 80016ee:	701a      	strb	r2, [r3, #0]
	limitVoltage = dataRead[17];
 80016f0:	7c7a      	ldrb	r2, [r7, #17]
 80016f2:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <readSettingsFromEeprom+0x168>)
 80016f4:	701a      	strb	r2, [r3, #0]
	cutOffVoltage = dataRead[18];
 80016f6:	7cba      	ldrb	r2, [r7, #18]
 80016f8:	4b27      	ldr	r3, [pc, #156]	@ (8001798 <readSettingsFromEeprom+0x16c>)
 80016fa:	701a      	strb	r2, [r3, #0]
	recieverIsPWM = dataRead[19];
 80016fc:	7cfa      	ldrb	r2, [r7, #19]
 80016fe:	4b27      	ldr	r3, [pc, #156]	@ (800179c <readSettingsFromEeprom+0x170>)
 8001700:	701a      	strb	r2, [r3, #0]
}
 8001702:	b00a      	add	sp, #40	@ 0x28
 8001704:	bce0      	pop	{r5, r6, r7}
 8001706:	46ba      	mov	sl, r7
 8001708:	46b1      	mov	r9, r6
 800170a:	46a8      	mov	r8, r5
 800170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			mRight = M1;
 800170e:	2200      	movs	r2, #0
 8001710:	4b23      	ldr	r3, [pc, #140]	@ (80017a0 <readSettingsFromEeprom+0x174>)
 8001712:	701a      	strb	r2, [r3, #0]
	switch (dataRead[12]) {	// control M2 at which motor is assigned
 8001714:	7b3b      	ldrb	r3, [r7, #12]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d1d6      	bne.n	80016c8 <readSettingsFromEeprom+0x9c>
			mRight = M2;
 800171a:	4a21      	ldr	r2, [pc, #132]	@ (80017a0 <readSettingsFromEeprom+0x174>)
 800171c:	7013      	strb	r3, [r2, #0]
	switch (dataRead[13]) {	// control M3 at which motor is assigned
 800171e:	7b7b      	ldrb	r3, [r7, #13]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d1d8      	bne.n	80016d6 <readSettingsFromEeprom+0xaa>
			mRight = M3;
 8001724:	2202      	movs	r2, #2
 8001726:	4b1e      	ldr	r3, [pc, #120]	@ (80017a0 <readSettingsFromEeprom+0x174>)
 8001728:	701a      	strb	r2, [r3, #0]
			break;
 800172a:	e7d8      	b.n	80016de <readSettingsFromEeprom+0xb2>
			mLeft = M3;
 800172c:	2202      	movs	r2, #2
 800172e:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <readSettingsFromEeprom+0x178>)
 8001730:	701a      	strb	r2, [r3, #0]
			break;
 8001732:	e7d4      	b.n	80016de <readSettingsFromEeprom+0xb2>
			mWeapon = M3;
 8001734:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <readSettingsFromEeprom+0x17c>)
 8001736:	7013      	strb	r3, [r2, #0]
			break;
 8001738:	e7d1      	b.n	80016de <readSettingsFromEeprom+0xb2>
			mLeft = M2;
 800173a:	2201      	movs	r2, #1
 800173c:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <readSettingsFromEeprom+0x178>)
 800173e:	701a      	strb	r2, [r3, #0]
			break;
 8001740:	e7c6      	b.n	80016d0 <readSettingsFromEeprom+0xa4>
			mWeapon = M2;
 8001742:	2201      	movs	r2, #1
 8001744:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <readSettingsFromEeprom+0x17c>)
 8001746:	701a      	strb	r2, [r3, #0]
			break;
 8001748:	e7c2      	b.n	80016d0 <readSettingsFromEeprom+0xa4>
			mLeft = M1;
 800174a:	4a16      	ldr	r2, [pc, #88]	@ (80017a4 <readSettingsFromEeprom+0x178>)
 800174c:	7013      	strb	r3, [r2, #0]
			break;
 800174e:	e7b8      	b.n	80016c2 <readSettingsFromEeprom+0x96>
			mWeapon = M1;
 8001750:	2200      	movs	r2, #0
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <readSettingsFromEeprom+0x17c>)
 8001754:	701a      	strb	r2, [r3, #0]
			break;
 8001756:	e7b4      	b.n	80016c2 <readSettingsFromEeprom+0x96>
 8001758:	20000350 	.word	0x20000350
 800175c:	20000011 	.word	0x20000011
 8001760:	20000010 	.word	0x20000010
 8001764:	2000000f 	.word	0x2000000f
 8001768:	2000000e 	.word	0x2000000e
 800176c:	2000000d 	.word	0x2000000d
 8001770:	2000000c 	.word	0x2000000c
 8001774:	2000000b 	.word	0x2000000b
 8001778:	2000000a 	.word	0x2000000a
 800177c:	20000220 	.word	0x20000220
 8001780:	2000021f 	.word	0x2000021f
 8001784:	2000021e 	.word	0x2000021e
 8001788:	2000021c 	.word	0x2000021c
 800178c:	20000007 	.word	0x20000007
 8001790:	20000006 	.word	0x20000006
 8001794:	20000005 	.word	0x20000005
 8001798:	20000004 	.word	0x20000004
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000009 	.word	0x20000009
 80017a4:	2000021d 	.word	0x2000021d
 80017a8:	20000008 	.word	0x20000008

080017ac <loadSettingsFromEeprom>:
void loadSettingsFromEeprom() {
 80017ac:	b510      	push	{r4, lr}
	readSettingsFromEeprom();
 80017ae:	f7ff ff3d 	bl	800162c <readSettingsFromEeprom>
}
 80017b2:	bd10      	pop	{r4, pc}

080017b4 <read_byte_eeprom>:
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80017b4:	23fa      	movs	r3, #250	@ 0xfa
uint8_t read_byte_eeprom(uint8_t address) {
 80017b6:	b530      	push	{r4, r5, lr}
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80017b8:	009b      	lsls	r3, r3, #2
uint8_t read_byte_eeprom(uint8_t address) {
 80017ba:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80017bc:	2517      	movs	r5, #23
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	4c06      	ldr	r4, [pc, #24]	@ (80017dc <read_byte_eeprom+0x28>)
 80017c4:	446d      	add	r5, sp
uint8_t read_byte_eeprom(uint8_t address) {
 80017c6:	0002      	movs	r2, r0
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80017c8:	21a0      	movs	r1, #160	@ 0xa0
 80017ca:	0020      	movs	r0, r4
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	9500      	str	r5, [sp, #0]
 80017d0:	f001 fe9c 	bl	800350c <HAL_I2C_Mem_Read>
	return data;
 80017d4:	7828      	ldrb	r0, [r5, #0]
}
 80017d6:	b007      	add	sp, #28
 80017d8:	bd30      	pop	{r4, r5, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	20000350 	.word	0x20000350

080017e0 <write_byte_eeprom>:
	uint8_t data = value;
 80017e0:	2317      	movs	r3, #23
void write_byte_eeprom(uint8_t address, uint8_t value) {
 80017e2:	b510      	push	{r4, lr}
 80017e4:	b086      	sub	sp, #24
	uint8_t data = value;
 80017e6:	446b      	add	r3, sp
 80017e8:	7019      	strb	r1, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80017ea:	21fa      	movs	r1, #250	@ 0xfa
 80017ec:	0089      	lsls	r1, r1, #2
 80017ee:	9102      	str	r1, [sp, #8]
 80017f0:	2101      	movs	r1, #1
 80017f2:	4c07      	ldr	r4, [pc, #28]	@ (8001810 <write_byte_eeprom+0x30>)
void write_byte_eeprom(uint8_t address, uint8_t value) {
 80017f4:	0002      	movs	r2, r0
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80017f6:	9101      	str	r1, [sp, #4]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	319f      	adds	r1, #159	@ 0x9f
 80017fc:	2301      	movs	r3, #1
 80017fe:	0020      	movs	r0, r4
 8001800:	f001 fd8c 	bl	800331c <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8001804:	200a      	movs	r0, #10
 8001806:	f000 fdf1 	bl	80023ec <HAL_Delay>
}
 800180a:	b006      	add	sp, #24
 800180c:	bd10      	pop	{r4, pc}
 800180e:	46c0      	nop			@ (mov r8, r8)
 8001810:	20000350 	.word	0x20000350

08001814 <serialPrintStatus>:

void serialPrintStatus() {
 8001814:	b570      	push	{r4, r5, r6, lr}
 8001816:	b088      	sub	sp, #32
	uint8_t string[30];
	// print voltage
	sprintf(string, "VBATT > %d\n", getBattVoltage());
 8001818:	466c      	mov	r4, sp
 800181a:	f7fe fe43 	bl	80004a4 <getBattVoltage>
 800181e:	4938      	ldr	r1, [pc, #224]	@ (8001900 <serialPrintStatus+0xec>)
 8001820:	0002      	movs	r2, r0
 8001822:	0020      	movs	r0, r4
 8001824:	f005 fff4 	bl	8007810 <siprintf>
	CDC_Transmit_FS(s, strlen(s));
 8001828:	0020      	movs	r0, r4
 800182a:	f7fe fc6d 	bl	8000108 <strlen>
 800182e:	b281      	uxth	r1, r0
 8001830:	0020      	movs	r0, r4
 8001832:	f005 fc25 	bl	8007080 <CDC_Transmit_FS>
	serialPrintString(string);
	HAL_Delay(1);
 8001836:	2001      	movs	r0, #1
 8001838:	f000 fdd8 	bl	80023ec <HAL_Delay>
	// which battery detected
	sprintf(string, "BATT > %d\n", batteryConfiguration);
 800183c:	4b31      	ldr	r3, [pc, #196]	@ (8001904 <serialPrintStatus+0xf0>)
 800183e:	4932      	ldr	r1, [pc, #200]	@ (8001908 <serialPrintStatus+0xf4>)
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	0020      	movs	r0, r4
 8001844:	f005 ffe4 	bl	8007810 <siprintf>
	CDC_Transmit_FS(s, strlen(s));
 8001848:	0020      	movs	r0, r4
 800184a:	f7fe fc5d 	bl	8000108 <strlen>
 800184e:	b281      	uxth	r1, r0
 8001850:	0020      	movs	r0, r4
 8001852:	f005 fc15 	bl	8007080 <CDC_Transmit_FS>
	serialPrintString(string);
	HAL_Delay(1);
 8001856:	2001      	movs	r0, #1
 8001858:	f000 fdc8 	bl	80023ec <HAL_Delay>
	// print RX channels
	if (recieverIsPWM) {	// print only four channel
 800185c:	4b2b      	ldr	r3, [pc, #172]	@ (800190c <serialPrintStatus+0xf8>)
		for (int i = 1; i < 5; i++) {
 800185e:	2501      	movs	r5, #1
	if (recieverIsPWM) {	// print only four channel
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4e2b      	ldr	r6, [pc, #172]	@ (8001910 <serialPrintStatus+0xfc>)
 8001864:	2b00      	cmp	r3, #0
 8001866:	d02b      	beq.n	80018c0 <serialPrintStatus+0xac>
			sprintf(string, "CH%d > %d\n", i, getChannelValuePercentage(i));
 8001868:	b2e8      	uxtb	r0, r5
 800186a:	f7ff fcb9 	bl	80011e0 <getChannelValuePercentage>
 800186e:	002a      	movs	r2, r5
 8001870:	0003      	movs	r3, r0
 8001872:	0031      	movs	r1, r6
 8001874:	0020      	movs	r0, r4
 8001876:	f005 ffcb 	bl	8007810 <siprintf>
	CDC_Transmit_FS(s, strlen(s));
 800187a:	0020      	movs	r0, r4
 800187c:	f7fe fc44 	bl	8000108 <strlen>
 8001880:	b281      	uxth	r1, r0
 8001882:	0020      	movs	r0, r4
 8001884:	f005 fbfc 	bl	8007080 <CDC_Transmit_FS>
		for (int i = 1; i < 5; i++) {
 8001888:	3501      	adds	r5, #1
			serialPrintString(string);
			HAL_Delay(2);
 800188a:	2002      	movs	r0, #2
 800188c:	f000 fdae 	bl	80023ec <HAL_Delay>
		for (int i = 1; i < 5; i++) {
 8001890:	2d05      	cmp	r5, #5
 8001892:	d1e9      	bne.n	8001868 <serialPrintStatus+0x54>
			serialPrintString(string);
			HAL_Delay(2);
		}
	}
	// print armed
	if (armed) {
 8001894:	4b1f      	ldr	r3, [pc, #124]	@ (8001914 <serialPrintStatus+0x100>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d028      	beq.n	80018ee <serialPrintStatus+0xda>
		sprintf(string, "ARMED > TRUE\n");
 800189c:	0022      	movs	r2, r4
 800189e:	4b1e      	ldr	r3, [pc, #120]	@ (8001918 <serialPrintStatus+0x104>)
 80018a0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80018a2:	c223      	stmia	r2!, {r0, r1, r5}
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	8013      	strh	r3, [r2, #0]
	CDC_Transmit_FS(s, strlen(s));
 80018a8:	0020      	movs	r0, r4
 80018aa:	f7fe fc2d 	bl	8000108 <strlen>
 80018ae:	b281      	uxth	r1, r0
 80018b0:	0020      	movs	r0, r4
 80018b2:	f005 fbe5 	bl	8007080 <CDC_Transmit_FS>
		serialPrintString(string);
		HAL_Delay(1);
	} else {
		sprintf(string, "ARMED > FALSE\n");
		serialPrintString(string);
		HAL_Delay(1);
 80018b6:	2001      	movs	r0, #1
 80018b8:	f000 fd98 	bl	80023ec <HAL_Delay>
	}
}
 80018bc:	b008      	add	sp, #32
 80018be:	bd70      	pop	{r4, r5, r6, pc}
			sprintf(string, "CH%d > %d\n", i, getChannelValuePercentage(i));
 80018c0:	b2e8      	uxtb	r0, r5
 80018c2:	f7ff fc8d 	bl	80011e0 <getChannelValuePercentage>
 80018c6:	002a      	movs	r2, r5
 80018c8:	0003      	movs	r3, r0
 80018ca:	0031      	movs	r1, r6
 80018cc:	0020      	movs	r0, r4
 80018ce:	f005 ff9f 	bl	8007810 <siprintf>
	CDC_Transmit_FS(s, strlen(s));
 80018d2:	0020      	movs	r0, r4
 80018d4:	f7fe fc18 	bl	8000108 <strlen>
 80018d8:	b281      	uxth	r1, r0
 80018da:	0020      	movs	r0, r4
 80018dc:	f005 fbd0 	bl	8007080 <CDC_Transmit_FS>
		for (int i = 1; i < 9; i++) {
 80018e0:	3501      	adds	r5, #1
			HAL_Delay(2);
 80018e2:	2002      	movs	r0, #2
 80018e4:	f000 fd82 	bl	80023ec <HAL_Delay>
		for (int i = 1; i < 9; i++) {
 80018e8:	2d09      	cmp	r5, #9
 80018ea:	d1e9      	bne.n	80018c0 <serialPrintStatus+0xac>
 80018ec:	e7d2      	b.n	8001894 <serialPrintStatus+0x80>
		sprintf(string, "ARMED > FALSE\n");
 80018ee:	0022      	movs	r2, r4
 80018f0:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <serialPrintStatus+0x108>)
 80018f2:	cb23      	ldmia	r3!, {r0, r1, r5}
 80018f4:	c223      	stmia	r2!, {r0, r1, r5}
 80018f6:	8819      	ldrh	r1, [r3, #0]
 80018f8:	8011      	strh	r1, [r2, #0]
 80018fa:	789b      	ldrb	r3, [r3, #2]
 80018fc:	7093      	strb	r3, [r2, #2]
 80018fe:	e7d3      	b.n	80018a8 <serialPrintStatus+0x94>
 8001900:	08008b2c 	.word	0x08008b2c
 8001904:	20000222 	.word	0x20000222
 8001908:	08008b38 	.word	0x08008b38
 800190c:	20000000 	.word	0x20000000
 8001910:	08008b44 	.word	0x08008b44
 8001914:	20000221 	.word	0x20000221
 8001918:	08008b50 	.word	0x08008b50
 800191c:	08008b60 	.word	0x08008b60

08001920 <serialPrintSettings>:

void serialPrintSettings() {
 8001920:	b5f0      	push	{r4, r5, r6, r7, lr}
	dataRead[0] = thChannel;
	dataRead[1] = stChannel;
	dataRead[2] = wpChannel;
	dataRead[3] = s1Channel;
	dataRead[4] = s2Channel;
	dataRead[5] = armChannel;
 8001922:	4a4e      	ldr	r2, [pc, #312]	@ (8001a5c <serialPrintSettings+0x13c>)
	dataRead[4] = s2Channel;
 8001924:	4b4e      	ldr	r3, [pc, #312]	@ (8001a60 <serialPrintSettings+0x140>)
 8001926:	7812      	ldrb	r2, [r2, #0]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	0212      	lsls	r2, r2, #8

	dataRead[6] = m1Rev;
 800192c:	494d      	ldr	r1, [pc, #308]	@ (8001a64 <serialPrintSettings+0x144>)
 800192e:	4313      	orrs	r3, r2
	dataRead[7] = m2Rev;
 8001930:	4a4d      	ldr	r2, [pc, #308]	@ (8001a68 <serialPrintSettings+0x148>)
 8001932:	7809      	ldrb	r1, [r1, #0]
 8001934:	7812      	ldrb	r2, [r2, #0]
 8001936:	0409      	lsls	r1, r1, #16
 8001938:	0612      	lsls	r2, r2, #24
 800193a:	430b      	orrs	r3, r1
	dataRead[1] = stChannel;
 800193c:	494b      	ldr	r1, [pc, #300]	@ (8001a6c <serialPrintSettings+0x14c>)
 800193e:	4313      	orrs	r3, r2
	dataRead[2] = wpChannel;
 8001940:	4c4b      	ldr	r4, [pc, #300]	@ (8001a70 <serialPrintSettings+0x150>)
	dataRead[0] = thChannel;
 8001942:	4a4c      	ldr	r2, [pc, #304]	@ (8001a74 <serialPrintSettings+0x154>)
void serialPrintSettings() {
 8001944:	b0a5      	sub	sp, #148	@ 0x94
	dataRead[0] = thChannel;
 8001946:	7809      	ldrb	r1, [r1, #0]
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	7824      	ldrb	r4, [r4, #0]
 800194c:	9304      	str	r3, [sp, #16]
	dataRead[8] = m3Rev;
 800194e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a78 <serialPrintSettings+0x158>)
	dataRead[0] = thChannel;
 8001950:	0209      	lsls	r1, r1, #8
	dataRead[8] = m3Rev;
 8001952:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 8001954:	0424      	lsls	r4, r4, #16
 8001956:	430a      	orrs	r2, r1
 8001958:	4322      	orrs	r2, r4
	dataRead[8] = m3Rev;
 800195a:	ac03      	add	r4, sp, #12
 800195c:	7223      	strb	r3, [r4, #8]
	dataRead[9] = s1Rev;
 800195e:	4b47      	ldr	r3, [pc, #284]	@ (8001a7c <serialPrintSettings+0x15c>)
	dataRead[3] = s1Channel;
 8001960:	4947      	ldr	r1, [pc, #284]	@ (8001a80 <serialPrintSettings+0x160>)
	dataRead[9] = s1Rev;
 8001962:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 8001964:	7809      	ldrb	r1, [r1, #0]
	dataRead[9] = s1Rev;
 8001966:	7263      	strb	r3, [r4, #9]
	dataRead[10] = s2Rev;
 8001968:	4b46      	ldr	r3, [pc, #280]	@ (8001a84 <serialPrintSettings+0x164>)
	dataRead[0] = thChannel;
 800196a:	0609      	lsls	r1, r1, #24
	dataRead[10] = s2Rev;
 800196c:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 800196e:	430a      	orrs	r2, r1
	dataRead[10] = s2Rev;
 8001970:	72a3      	strb	r3, [r4, #10]

	switch (mLeft) {	// mleft is code 0
 8001972:	4b45      	ldr	r3, [pc, #276]	@ (8001a88 <serialPrintSettings+0x168>)
 8001974:	2000      	movs	r0, #0
 8001976:	781b      	ldrb	r3, [r3, #0]
	dataRead[0] = thChannel;
 8001978:	9203      	str	r2, [sp, #12]
	switch (mLeft) {	// mleft is code 0
 800197a:	2b01      	cmp	r3, #1
 800197c:	d051      	beq.n	8001a22 <serialPrintSettings+0x102>
 800197e:	2b02      	cmp	r3, #2
 8001980:	d069      	beq.n	8001a56 <serialPrintSettings+0x136>
 8001982:	2b00      	cmp	r3, #0
 8001984:	d065      	beq.n	8001a52 <serialPrintSettings+0x132>
		case M3:
			dataRead[13] = 0;
			break;
	}

	switch (mRight) {	// mright is code 1
 8001986:	4b41      	ldr	r3, [pc, #260]	@ (8001a8c <serialPrintSettings+0x16c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d04e      	beq.n	8001a2c <serialPrintSettings+0x10c>
 800198e:	2b02      	cmp	r3, #2
 8001990:	d05c      	beq.n	8001a4c <serialPrintSettings+0x12c>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d057      	beq.n	8001a46 <serialPrintSettings+0x126>
		case M3:
			dataRead[13] = 1;
			break;
	}

	switch (mWeapon) {	// mweapon is code 2
 8001996:	4b3e      	ldr	r3, [pc, #248]	@ (8001a90 <serialPrintSettings+0x170>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d04b      	beq.n	8001a36 <serialPrintSettings+0x116>
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d04f      	beq.n	8001a42 <serialPrintSettings+0x122>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d04a      	beq.n	8001a3c <serialPrintSettings+0x11c>
		case M3:
			dataRead[13] = 2;
			break;
	}

	dataRead[14] = weaponDoubleDirection;
 80019a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001a94 <serialPrintSettings+0x174>)
	dataRead[16] = noDisarm;
	dataRead[17] = limitVoltage;
	dataRead[18] = cutOffVoltage;
	dataRead[19] = recieverIsPWM;

	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80019a8:	493b      	ldr	r1, [pc, #236]	@ (8001a98 <serialPrintSettings+0x178>)
	dataRead[14] = weaponDoubleDirection;
 80019aa:	781b      	ldrb	r3, [r3, #0]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80019ac:	2250      	movs	r2, #80	@ 0x50
	dataRead[14] = weaponDoubleDirection;
 80019ae:	73a3      	strb	r3, [r4, #14]
	dataRead[15] = tankMixIsON;
 80019b0:	4b3a      	ldr	r3, [pc, #232]	@ (8001a9c <serialPrintSettings+0x17c>)
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80019b2:	a810      	add	r0, sp, #64	@ 0x40
	dataRead[15] = tankMixIsON;
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	af24      	add	r7, sp, #144	@ 0x90
 80019b8:	73e3      	strb	r3, [r4, #15]
	dataRead[16] = noDisarm;
 80019ba:	4b39      	ldr	r3, [pc, #228]	@ (8001aa0 <serialPrintSettings+0x180>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	7423      	strb	r3, [r4, #16]
	dataRead[17] = limitVoltage;
 80019c0:	4b38      	ldr	r3, [pc, #224]	@ (8001aa4 <serialPrintSettings+0x184>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	7463      	strb	r3, [r4, #17]
	dataRead[18] = cutOffVoltage;
 80019c6:	4b38      	ldr	r3, [pc, #224]	@ (8001aa8 <serialPrintSettings+0x188>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	74a3      	strb	r3, [r4, #18]
	dataRead[19] = recieverIsPWM;
 80019cc:	4b37      	ldr	r3, [pc, #220]	@ (8001aac <serialPrintSettings+0x18c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	74e3      	strb	r3, [r4, #19]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 80019d2:	f006 f874 	bl	8007abe <memcpy>
			(const uint8_t*) COMMAND_M1ASS, (const uint8_t*) COMMAND_M2ASS, (const uint8_t*) COMMAND_M3ASS,
			(const uint8_t*) COMMAND_WPDD, (const uint8_t*) COMMAND_TANKON, (const uint8_t*) COMMAND_NODISARM,
			(const uint8_t*) COMMAND_LIMITVOLTAGE, (const uint8_t*) COMMAND_CUTOFFVOLTAGE,
			(const uint8_t*) COMMAND_RXPWMMODE };

	uint8_t c[] = "\nSETTINGS:\n";
 80019d6:	4668      	mov	r0, sp
 80019d8:	0002      	movs	r2, r0
 80019da:	4b35      	ldr	r3, [pc, #212]	@ (8001ab0 <serialPrintSettings+0x190>)
 80019dc:	cb62      	ldmia	r3!, {r1, r5, r6}
 80019de:	c262      	stmia	r2!, {r1, r5, r6}
	CDC_Transmit_FS(s, strlen(s));
 80019e0:	210b      	movs	r1, #11
 80019e2:	f005 fb4d 	bl	8007080 <CDC_Transmit_FS>
	serialPrintString(c);
	HAL_Delay(0);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 fd00 	bl	80023ec <HAL_Delay>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 80019ec:	4e31      	ldr	r6, [pc, #196]	@ (8001ab4 <serialPrintSettings+0x194>)
 80019ee:	ad10      	add	r5, sp, #64	@ 0x40
		uint8_t string[30];
		sprintf(string, "%s > %d\n", commands[i], dataRead[i]);
 80019f0:	7823      	ldrb	r3, [r4, #0]
 80019f2:	cd04      	ldmia	r5!, {r2}
 80019f4:	0031      	movs	r1, r6
 80019f6:	a808      	add	r0, sp, #32
 80019f8:	f005 ff0a 	bl	8007810 <siprintf>
	CDC_Transmit_FS(s, strlen(s));
 80019fc:	a808      	add	r0, sp, #32
 80019fe:	f7fe fb83 	bl	8000108 <strlen>
 8001a02:	b281      	uxth	r1, r0
 8001a04:	a808      	add	r0, sp, #32
 8001a06:	f005 fb3b 	bl	8007080 <CDC_Transmit_FS>
		serialPrintString(string);
		HAL_Delay(10);
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f000 fcee 	bl	80023ec <HAL_Delay>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 8001a10:	3401      	adds	r4, #1
 8001a12:	42bd      	cmp	r5, r7
 8001a14:	d1ec      	bne.n	80019f0 <serialPrintSettings+0xd0>
	CDC_Transmit_FS(s, strlen(s));
 8001a16:	2151      	movs	r1, #81	@ 0x51
 8001a18:	4827      	ldr	r0, [pc, #156]	@ (8001ab8 <serialPrintSettings+0x198>)
 8001a1a:	f005 fb31 	bl	8007080 <CDC_Transmit_FS>
	}
	serialPrintString("\nwrite COMAND > VALUE (e.g. TH2CH>3)\nthan SAVE>1 to store all settings on EEPROM\n");
}
 8001a1e:	b025      	add	sp, #148	@ 0x94
 8001a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (mRight) {	// mright is code 1
 8001a22:	4b1a      	ldr	r3, [pc, #104]	@ (8001a8c <serialPrintSettings+0x16c>)
			dataRead[12] = 0;
 8001a24:	7320      	strb	r0, [r4, #12]
	switch (mRight) {	// mright is code 1
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d1b0      	bne.n	800198e <serialPrintSettings+0x6e>
			dataRead[12] = 1;
 8001a2c:	7323      	strb	r3, [r4, #12]
	switch (mWeapon) {	// mweapon is code 2
 8001a2e:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <serialPrintSettings+0x170>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d1b3      	bne.n	800199e <serialPrintSettings+0x7e>
			dataRead[12] = 2;
 8001a36:	2302      	movs	r3, #2
 8001a38:	7323      	strb	r3, [r4, #12]
			break;
 8001a3a:	e7b4      	b.n	80019a6 <serialPrintSettings+0x86>
			dataRead[11] = 2;
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	72e3      	strb	r3, [r4, #11]
			break;
 8001a40:	e7b1      	b.n	80019a6 <serialPrintSettings+0x86>
			dataRead[13] = 2;
 8001a42:	7363      	strb	r3, [r4, #13]
			break;
 8001a44:	e7af      	b.n	80019a6 <serialPrintSettings+0x86>
			dataRead[11] = 1;
 8001a46:	3301      	adds	r3, #1
 8001a48:	72e3      	strb	r3, [r4, #11]
			break;
 8001a4a:	e7a4      	b.n	8001996 <serialPrintSettings+0x76>
			dataRead[13] = 1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	7363      	strb	r3, [r4, #13]
			break;
 8001a50:	e7a1      	b.n	8001996 <serialPrintSettings+0x76>
			dataRead[11] = 0;
 8001a52:	72e3      	strb	r3, [r4, #11]
			break;
 8001a54:	e797      	b.n	8001986 <serialPrintSettings+0x66>
			dataRead[13] = 0;
 8001a56:	7360      	strb	r0, [r4, #13]
			break;
 8001a58:	e795      	b.n	8001986 <serialPrintSettings+0x66>
 8001a5a:	46c0      	nop			@ (mov r8, r8)
 8001a5c:	2000000c 	.word	0x2000000c
 8001a60:	2000000d 	.word	0x2000000d
 8001a64:	2000000b 	.word	0x2000000b
 8001a68:	2000000a 	.word	0x2000000a
 8001a6c:	20000010 	.word	0x20000010
 8001a70:	2000000f 	.word	0x2000000f
 8001a74:	20000011 	.word	0x20000011
 8001a78:	20000220 	.word	0x20000220
 8001a7c:	2000021f 	.word	0x2000021f
 8001a80:	2000000e 	.word	0x2000000e
 8001a84:	2000021e 	.word	0x2000021e
 8001a88:	2000021d 	.word	0x2000021d
 8001a8c:	20000009 	.word	0x20000009
 8001a90:	20000008 	.word	0x20000008
 8001a94:	2000021c 	.word	0x2000021c
 8001a98:	08008ac4 	.word	0x08008ac4
 8001a9c:	20000007 	.word	0x20000007
 8001aa0:	20000006 	.word	0x20000006
 8001aa4:	20000005 	.word	0x20000005
 8001aa8:	20000004 	.word	0x20000004
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	08008bd0 	.word	0x08008bd0
 8001ab4:	08008b70 	.word	0x08008b70
 8001ab8:	08008b7c 	.word	0x08008b7c

08001abc <modifySettingsWithCommand>:
int modifySettingsWithCommand() {
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	b086      	sub	sp, #24
	Command c = decodeCommand(buffer);
 8001ac0:	ad01      	add	r5, sp, #4
 8001ac2:	0028      	movs	r0, r5
 8001ac4:	49c1      	ldr	r1, [pc, #772]	@ (8001dcc <modifySettingsWithCommand+0x310>)
 8001ac6:	f7ff fc95 	bl	80013f4 <decodeCommand>
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 8001aca:	4ac1      	ldr	r2, [pc, #772]	@ (8001dd0 <modifySettingsWithCommand+0x314>)
 8001acc:	9b01      	ldr	r3, [sp, #4]
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d100      	bne.n	8001ad4 <modifySettingsWithCommand+0x18>
 8001ad2:	e071      	b.n	8001bb8 <modifySettingsWithCommand+0xfc>
 8001ad4:	240e      	movs	r4, #14
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 8001ad6:	4abf      	ldr	r2, [pc, #764]	@ (8001dd4 <modifySettingsWithCommand+0x318>)
 8001ad8:	2600      	movs	r6, #0
 8001ada:	446c      	add	r4, sp
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <modifySettingsWithCommand+0x26>
 8001ae0:	e07b      	b.n	8001bda <modifySettingsWithCommand+0x11e>
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 8001ae2:	4abd      	ldr	r2, [pc, #756]	@ (8001dd8 <modifySettingsWithCommand+0x31c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d100      	bne.n	8001aea <modifySettingsWithCommand+0x2e>
 8001ae8:	e086      	b.n	8001bf8 <modifySettingsWithCommand+0x13c>
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 8001aea:	4abc      	ldr	r2, [pc, #752]	@ (8001ddc <modifySettingsWithCommand+0x320>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d100      	bne.n	8001af2 <modifySettingsWithCommand+0x36>
 8001af0:	e091      	b.n	8001c16 <modifySettingsWithCommand+0x15a>
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 8001af2:	4abb      	ldr	r2, [pc, #748]	@ (8001de0 <modifySettingsWithCommand+0x324>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d100      	bne.n	8001afa <modifySettingsWithCommand+0x3e>
 8001af8:	e09c      	b.n	8001c34 <modifySettingsWithCommand+0x178>
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001afa:	4bba      	ldr	r3, [pc, #744]	@ (8001de4 <modifySettingsWithCommand+0x328>)
 8001afc:	9a01      	ldr	r2, [sp, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d100      	bne.n	8001b04 <modifySettingsWithCommand+0x48>
 8001b02:	e0a6      	b.n	8001c52 <modifySettingsWithCommand+0x196>
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001b04:	4ab8      	ldr	r2, [pc, #736]	@ (8001de8 <modifySettingsWithCommand+0x32c>)
 8001b06:	9b01      	ldr	r3, [sp, #4]
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <modifySettingsWithCommand+0x52>
 8001b0c:	e0b5      	b.n	8001c7a <modifySettingsWithCommand+0x1be>
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 8001b0e:	4ab7      	ldr	r2, [pc, #732]	@ (8001dec <modifySettingsWithCommand+0x330>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d100      	bne.n	8001b16 <modifySettingsWithCommand+0x5a>
 8001b14:	e0c0      	b.n	8001c98 <modifySettingsWithCommand+0x1dc>
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 8001b16:	4ab6      	ldr	r2, [pc, #728]	@ (8001df0 <modifySettingsWithCommand+0x334>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d100      	bne.n	8001b1e <modifySettingsWithCommand+0x62>
 8001b1c:	e0cb      	b.n	8001cb6 <modifySettingsWithCommand+0x1fa>
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 8001b1e:	4ab5      	ldr	r2, [pc, #724]	@ (8001df4 <modifySettingsWithCommand+0x338>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d100      	bne.n	8001b26 <modifySettingsWithCommand+0x6a>
 8001b24:	e0d6      	b.n	8001cd4 <modifySettingsWithCommand+0x218>
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 8001b26:	4ab4      	ldr	r2, [pc, #720]	@ (8001df8 <modifySettingsWithCommand+0x33c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d100      	bne.n	8001b2e <modifySettingsWithCommand+0x72>
 8001b2c:	e0e1      	b.n	8001cf2 <modifySettingsWithCommand+0x236>
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 8001b2e:	4ab3      	ldr	r2, [pc, #716]	@ (8001dfc <modifySettingsWithCommand+0x340>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d100      	bne.n	8001b36 <modifySettingsWithCommand+0x7a>
 8001b34:	e0ec      	b.n	8001d10 <modifySettingsWithCommand+0x254>
	if (strcmp(c.type, COMMAND_M2ASS) == 0) {
 8001b36:	4ab2      	ldr	r2, [pc, #712]	@ (8001e00 <modifySettingsWithCommand+0x344>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d100      	bne.n	8001b3e <modifySettingsWithCommand+0x82>
 8001b3c:	e1e7      	b.n	8001f0e <modifySettingsWithCommand+0x452>
	if (strcmp(c.type, COMMAND_M3ASS) == 0) {
 8001b3e:	4ab1      	ldr	r2, [pc, #708]	@ (8001e04 <modifySettingsWithCommand+0x348>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d100      	bne.n	8001b46 <modifySettingsWithCommand+0x8a>
 8001b44:	e1c9      	b.n	8001eda <modifySettingsWithCommand+0x41e>
	if (strcmp(c.type, COMMAND_WPDD) == 0) {
 8001b46:	4ab0      	ldr	r2, [pc, #704]	@ (8001e08 <modifySettingsWithCommand+0x34c>)
 8001b48:	9901      	ldr	r1, [sp, #4]
 8001b4a:	4291      	cmp	r1, r2
 8001b4c:	d100      	bne.n	8001b50 <modifySettingsWithCommand+0x94>
 8001b4e:	e1b8      	b.n	8001ec2 <modifySettingsWithCommand+0x406>
	if (strcmp(c.type, COMMAND_TANKON) == 0) {
 8001b50:	4aae      	ldr	r2, [pc, #696]	@ (8001e0c <modifySettingsWithCommand+0x350>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d100      	bne.n	8001b58 <modifySettingsWithCommand+0x9c>
 8001b56:	e1a9      	b.n	8001eac <modifySettingsWithCommand+0x3f0>
	if (strcmp(c.type, COMMAND_NODISARM) == 0) {
 8001b58:	4bad      	ldr	r3, [pc, #692]	@ (8001e10 <modifySettingsWithCommand+0x354>)
 8001b5a:	9a01      	ldr	r2, [sp, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d100      	bne.n	8001b62 <modifySettingsWithCommand+0xa6>
 8001b60:	e194      	b.n	8001e8c <modifySettingsWithCommand+0x3d0>
	if (strcmp(c.type, COMMAND_LIMITVOLTAGE) == 0) {
 8001b62:	4bac      	ldr	r3, [pc, #688]	@ (8001e14 <modifySettingsWithCommand+0x358>)
 8001b64:	9a01      	ldr	r2, [sp, #4]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d100      	bne.n	8001b6c <modifySettingsWithCommand+0xb0>
 8001b6a:	e123      	b.n	8001db4 <modifySettingsWithCommand+0x2f8>
	if (strcmp(c.type, COMMAND_CUTOFFVOLTAGE) == 0) {
 8001b6c:	4baa      	ldr	r3, [pc, #680]	@ (8001e18 <modifySettingsWithCommand+0x35c>)
 8001b6e:	9a01      	ldr	r2, [sp, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d100      	bne.n	8001b76 <modifySettingsWithCommand+0xba>
 8001b74:	e112      	b.n	8001d9c <modifySettingsWithCommand+0x2e0>
	if (strcmp(c.type, COMMAND_RXPWMMODE) == 0) {
 8001b76:	4ba9      	ldr	r3, [pc, #676]	@ (8001e1c <modifySettingsWithCommand+0x360>)
 8001b78:	9a01      	ldr	r2, [sp, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d100      	bne.n	8001b80 <modifySettingsWithCommand+0xc4>
 8001b7e:	e102      	b.n	8001d86 <modifySettingsWithCommand+0x2ca>
	if (strcmp(c.type, COMMAND_SAVE) == 0) {
 8001b80:	4aa7      	ldr	r2, [pc, #668]	@ (8001e20 <modifySettingsWithCommand+0x364>)
 8001b82:	9b01      	ldr	r3, [sp, #4]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d100      	bne.n	8001b8a <modifySettingsWithCommand+0xce>
 8001b88:	e0f4      	b.n	8001d74 <modifySettingsWithCommand+0x2b8>
	if (strcmp(c.type, COMMAND_READ) == 0) {
 8001b8a:	4aa6      	ldr	r2, [pc, #664]	@ (8001e24 <modifySettingsWithCommand+0x368>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d100      	bne.n	8001b92 <modifySettingsWithCommand+0xd6>
 8001b90:	e0e6      	b.n	8001d60 <modifySettingsWithCommand+0x2a4>
	if (strcmp(c.type, COMMAND_CONNECTED) == 0) {
 8001b92:	4ba5      	ldr	r3, [pc, #660]	@ (8001e28 <modifySettingsWithCommand+0x36c>)
 8001b94:	9a01      	ldr	r2, [sp, #4]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d100      	bne.n	8001b9c <modifySettingsWithCommand+0xe0>
 8001b9a:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_STATUS) == 0) {
 8001b9c:	4ba3      	ldr	r3, [pc, #652]	@ (8001e2c <modifySettingsWithCommand+0x370>)
 8001b9e:	9a01      	ldr	r2, [sp, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d100      	bne.n	8001ba6 <modifySettingsWithCommand+0xea>
 8001ba4:	e0cf      	b.n	8001d46 <modifySettingsWithCommand+0x28a>
	sprintf(recievedString, "%s, %s", c.type, c.value);
 8001ba6:	0023      	movs	r3, r4
 8001ba8:	002a      	movs	r2, r5
 8001baa:	49a1      	ldr	r1, [pc, #644]	@ (8001e30 <modifySettingsWithCommand+0x374>)
 8001bac:	48a1      	ldr	r0, [pc, #644]	@ (8001e34 <modifySettingsWithCommand+0x378>)
 8001bae:	f005 fe2f 	bl	8007810 <siprintf>
}
 8001bb2:	0030      	movs	r0, r6
 8001bb4:	b006      	add	sp, #24
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 8001bb8:	88aa      	ldrh	r2, [r5, #4]
 8001bba:	2a48      	cmp	r2, #72	@ 0x48
 8001bbc:	d000      	beq.n	8001bc0 <modifySettingsWithCommand+0x104>
 8001bbe:	e789      	b.n	8001ad4 <modifySettingsWithCommand+0x18>
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 8001bc0:	240e      	movs	r4, #14
 8001bc2:	446c      	add	r4, sp
 8001bc4:	0020      	movs	r0, r4
 8001bc6:	f005 fcc3 	bl	8007550 <atoi>
 8001bca:	4b9b      	ldr	r3, [pc, #620]	@ (8001e38 <modifySettingsWithCommand+0x37c>)
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 8001bcc:	4a81      	ldr	r2, [pc, #516]	@ (8001dd4 <modifySettingsWithCommand+0x318>)
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 8001bce:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001bd0:	9b01      	ldr	r3, [sp, #4]
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 8001bd2:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d000      	beq.n	8001bda <modifySettingsWithCommand+0x11e>
 8001bd8:	e783      	b.n	8001ae2 <modifySettingsWithCommand+0x26>
 8001bda:	88aa      	ldrh	r2, [r5, #4]
 8001bdc:	2a48      	cmp	r2, #72	@ 0x48
 8001bde:	d000      	beq.n	8001be2 <modifySettingsWithCommand+0x126>
 8001be0:	e77f      	b.n	8001ae2 <modifySettingsWithCommand+0x26>
		stChannel = atoi(c.value);
 8001be2:	0020      	movs	r0, r4
 8001be4:	f005 fcb4 	bl	8007550 <atoi>
 8001be8:	4b94      	ldr	r3, [pc, #592]	@ (8001e3c <modifySettingsWithCommand+0x380>)
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 8001bea:	4a7b      	ldr	r2, [pc, #492]	@ (8001dd8 <modifySettingsWithCommand+0x31c>)
		stChannel = atoi(c.value);
 8001bec:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001bee:	9b01      	ldr	r3, [sp, #4]
		stChannel = atoi(c.value);
 8001bf0:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d000      	beq.n	8001bf8 <modifySettingsWithCommand+0x13c>
 8001bf6:	e778      	b.n	8001aea <modifySettingsWithCommand+0x2e>
 8001bf8:	88aa      	ldrh	r2, [r5, #4]
 8001bfa:	2a48      	cmp	r2, #72	@ 0x48
 8001bfc:	d000      	beq.n	8001c00 <modifySettingsWithCommand+0x144>
 8001bfe:	e774      	b.n	8001aea <modifySettingsWithCommand+0x2e>
		wpChannel = atoi(c.value);
 8001c00:	0020      	movs	r0, r4
 8001c02:	f005 fca5 	bl	8007550 <atoi>
 8001c06:	4b8e      	ldr	r3, [pc, #568]	@ (8001e40 <modifySettingsWithCommand+0x384>)
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 8001c08:	4a74      	ldr	r2, [pc, #464]	@ (8001ddc <modifySettingsWithCommand+0x320>)
		wpChannel = atoi(c.value);
 8001c0a:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001c0c:	9b01      	ldr	r3, [sp, #4]
		wpChannel = atoi(c.value);
 8001c0e:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d000      	beq.n	8001c16 <modifySettingsWithCommand+0x15a>
 8001c14:	e76d      	b.n	8001af2 <modifySettingsWithCommand+0x36>
 8001c16:	88aa      	ldrh	r2, [r5, #4]
 8001c18:	2a48      	cmp	r2, #72	@ 0x48
 8001c1a:	d000      	beq.n	8001c1e <modifySettingsWithCommand+0x162>
 8001c1c:	e769      	b.n	8001af2 <modifySettingsWithCommand+0x36>
		s1Channel = atoi(c.value);
 8001c1e:	0020      	movs	r0, r4
 8001c20:	f005 fc96 	bl	8007550 <atoi>
 8001c24:	4b87      	ldr	r3, [pc, #540]	@ (8001e44 <modifySettingsWithCommand+0x388>)
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 8001c26:	4a6e      	ldr	r2, [pc, #440]	@ (8001de0 <modifySettingsWithCommand+0x324>)
		s1Channel = atoi(c.value);
 8001c28:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001c2a:	9b01      	ldr	r3, [sp, #4]
		s1Channel = atoi(c.value);
 8001c2c:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d000      	beq.n	8001c34 <modifySettingsWithCommand+0x178>
 8001c32:	e762      	b.n	8001afa <modifySettingsWithCommand+0x3e>
 8001c34:	88ab      	ldrh	r3, [r5, #4]
 8001c36:	2b48      	cmp	r3, #72	@ 0x48
 8001c38:	d000      	beq.n	8001c3c <modifySettingsWithCommand+0x180>
 8001c3a:	e75e      	b.n	8001afa <modifySettingsWithCommand+0x3e>
		s2Channel = atoi(c.value);
 8001c3c:	0020      	movs	r0, r4
 8001c3e:	f005 fc87 	bl	8007550 <atoi>
 8001c42:	4b81      	ldr	r3, [pc, #516]	@ (8001e48 <modifySettingsWithCommand+0x38c>)
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001c44:	9a01      	ldr	r2, [sp, #4]
		s2Channel = atoi(c.value);
 8001c46:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001c48:	4b66      	ldr	r3, [pc, #408]	@ (8001de4 <modifySettingsWithCommand+0x328>)
		s2Channel = atoi(c.value);
 8001c4a:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d000      	beq.n	8001c52 <modifySettingsWithCommand+0x196>
 8001c50:	e758      	b.n	8001b04 <modifySettingsWithCommand+0x48>
 8001c52:	4b7e      	ldr	r3, [pc, #504]	@ (8001e4c <modifySettingsWithCommand+0x390>)
 8001c54:	88aa      	ldrh	r2, [r5, #4]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d000      	beq.n	8001c5c <modifySettingsWithCommand+0x1a0>
 8001c5a:	e753      	b.n	8001b04 <modifySettingsWithCommand+0x48>
 8001c5c:	79ab      	ldrb	r3, [r5, #6]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d000      	beq.n	8001c64 <modifySettingsWithCommand+0x1a8>
 8001c62:	e74f      	b.n	8001b04 <modifySettingsWithCommand+0x48>
		armChannel = atoi(c.value);
 8001c64:	0020      	movs	r0, r4
 8001c66:	f005 fc73 	bl	8007550 <atoi>
 8001c6a:	4b79      	ldr	r3, [pc, #484]	@ (8001e50 <modifySettingsWithCommand+0x394>)
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001c6c:	4a5e      	ldr	r2, [pc, #376]	@ (8001de8 <modifySettingsWithCommand+0x32c>)
		armChannel = atoi(c.value);
 8001c6e:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001c70:	9b01      	ldr	r3, [sp, #4]
		armChannel = atoi(c.value);
 8001c72:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d000      	beq.n	8001c7a <modifySettingsWithCommand+0x1be>
 8001c78:	e749      	b.n	8001b0e <modifySettingsWithCommand+0x52>
 8001c7a:	88aa      	ldrh	r2, [r5, #4]
 8001c7c:	2a56      	cmp	r2, #86	@ 0x56
 8001c7e:	d000      	beq.n	8001c82 <modifySettingsWithCommand+0x1c6>
 8001c80:	e745      	b.n	8001b0e <modifySettingsWithCommand+0x52>
		m1Rev = atoi(c.value);
 8001c82:	0020      	movs	r0, r4
 8001c84:	f005 fc64 	bl	8007550 <atoi>
 8001c88:	4b72      	ldr	r3, [pc, #456]	@ (8001e54 <modifySettingsWithCommand+0x398>)
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 8001c8a:	4a58      	ldr	r2, [pc, #352]	@ (8001dec <modifySettingsWithCommand+0x330>)
		m1Rev = atoi(c.value);
 8001c8c:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001c8e:	9b01      	ldr	r3, [sp, #4]
		m1Rev = atoi(c.value);
 8001c90:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d000      	beq.n	8001c98 <modifySettingsWithCommand+0x1dc>
 8001c96:	e73e      	b.n	8001b16 <modifySettingsWithCommand+0x5a>
 8001c98:	88aa      	ldrh	r2, [r5, #4]
 8001c9a:	2a56      	cmp	r2, #86	@ 0x56
 8001c9c:	d000      	beq.n	8001ca0 <modifySettingsWithCommand+0x1e4>
 8001c9e:	e73a      	b.n	8001b16 <modifySettingsWithCommand+0x5a>
		m2Rev = atoi(c.value);
 8001ca0:	0020      	movs	r0, r4
 8001ca2:	f005 fc55 	bl	8007550 <atoi>
 8001ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8001e58 <modifySettingsWithCommand+0x39c>)
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 8001ca8:	4a51      	ldr	r2, [pc, #324]	@ (8001df0 <modifySettingsWithCommand+0x334>)
		m2Rev = atoi(c.value);
 8001caa:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001cac:	9b01      	ldr	r3, [sp, #4]
		m2Rev = atoi(c.value);
 8001cae:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d000      	beq.n	8001cb6 <modifySettingsWithCommand+0x1fa>
 8001cb4:	e733      	b.n	8001b1e <modifySettingsWithCommand+0x62>
 8001cb6:	88aa      	ldrh	r2, [r5, #4]
 8001cb8:	2a56      	cmp	r2, #86	@ 0x56
 8001cba:	d000      	beq.n	8001cbe <modifySettingsWithCommand+0x202>
 8001cbc:	e72f      	b.n	8001b1e <modifySettingsWithCommand+0x62>
		m3Rev = atoi(c.value);
 8001cbe:	0020      	movs	r0, r4
 8001cc0:	f005 fc46 	bl	8007550 <atoi>
 8001cc4:	4b65      	ldr	r3, [pc, #404]	@ (8001e5c <modifySettingsWithCommand+0x3a0>)
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 8001cc6:	4a4b      	ldr	r2, [pc, #300]	@ (8001df4 <modifySettingsWithCommand+0x338>)
		m3Rev = atoi(c.value);
 8001cc8:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001cca:	9b01      	ldr	r3, [sp, #4]
		m3Rev = atoi(c.value);
 8001ccc:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d000      	beq.n	8001cd4 <modifySettingsWithCommand+0x218>
 8001cd2:	e728      	b.n	8001b26 <modifySettingsWithCommand+0x6a>
 8001cd4:	88aa      	ldrh	r2, [r5, #4]
 8001cd6:	2a56      	cmp	r2, #86	@ 0x56
 8001cd8:	d000      	beq.n	8001cdc <modifySettingsWithCommand+0x220>
 8001cda:	e724      	b.n	8001b26 <modifySettingsWithCommand+0x6a>
		s1Rev = atoi(c.value);
 8001cdc:	0020      	movs	r0, r4
 8001cde:	f005 fc37 	bl	8007550 <atoi>
 8001ce2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e60 <modifySettingsWithCommand+0x3a4>)
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 8001ce4:	4a44      	ldr	r2, [pc, #272]	@ (8001df8 <modifySettingsWithCommand+0x33c>)
		s1Rev = atoi(c.value);
 8001ce6:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001ce8:	9b01      	ldr	r3, [sp, #4]
		s1Rev = atoi(c.value);
 8001cea:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d000      	beq.n	8001cf2 <modifySettingsWithCommand+0x236>
 8001cf0:	e71d      	b.n	8001b2e <modifySettingsWithCommand+0x72>
 8001cf2:	88aa      	ldrh	r2, [r5, #4]
 8001cf4:	2a56      	cmp	r2, #86	@ 0x56
 8001cf6:	d000      	beq.n	8001cfa <modifySettingsWithCommand+0x23e>
 8001cf8:	e719      	b.n	8001b2e <modifySettingsWithCommand+0x72>
		s2Rev = atoi(c.value);
 8001cfa:	0020      	movs	r0, r4
 8001cfc:	f005 fc28 	bl	8007550 <atoi>
 8001d00:	4b58      	ldr	r3, [pc, #352]	@ (8001e64 <modifySettingsWithCommand+0x3a8>)
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 8001d02:	4a3e      	ldr	r2, [pc, #248]	@ (8001dfc <modifySettingsWithCommand+0x340>)
		s2Rev = atoi(c.value);
 8001d04:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001d06:	9b01      	ldr	r3, [sp, #4]
		s2Rev = atoi(c.value);
 8001d08:	2601      	movs	r6, #1
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d000      	beq.n	8001d10 <modifySettingsWithCommand+0x254>
 8001d0e:	e712      	b.n	8001b36 <modifySettingsWithCommand+0x7a>
 8001d10:	88aa      	ldrh	r2, [r5, #4]
 8001d12:	2a53      	cmp	r2, #83	@ 0x53
 8001d14:	d000      	beq.n	8001d18 <modifySettingsWithCommand+0x25c>
 8001d16:	e70e      	b.n	8001b36 <modifySettingsWithCommand+0x7a>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001d18:	4a53      	ldr	r2, [pc, #332]	@ (8001e68 <modifySettingsWithCommand+0x3ac>)
 8001d1a:	8821      	ldrh	r1, [r4, #0]
 8001d1c:	4291      	cmp	r1, r2
 8001d1e:	d100      	bne.n	8001d22 <modifySettingsWithCommand+0x266>
 8001d20:	e127      	b.n	8001f72 <modifySettingsWithCommand+0x4b6>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001d22:	4a52      	ldr	r2, [pc, #328]	@ (8001e6c <modifySettingsWithCommand+0x3b0>)
 8001d24:	8821      	ldrh	r1, [r4, #0]
 8001d26:	4291      	cmp	r1, r2
 8001d28:	d100      	bne.n	8001d2c <modifySettingsWithCommand+0x270>
 8001d2a:	e11a      	b.n	8001f62 <modifySettingsWithCommand+0x4a6>
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001d2c:	4a50      	ldr	r2, [pc, #320]	@ (8001e70 <modifySettingsWithCommand+0x3b4>)
 8001d2e:	8821      	ldrh	r1, [r4, #0]
 8001d30:	4291      	cmp	r1, r2
 8001d32:	d000      	beq.n	8001d36 <modifySettingsWithCommand+0x27a>
 8001d34:	e6ff      	b.n	8001b36 <modifySettingsWithCommand+0x7a>
 8001d36:	78a2      	ldrb	r2, [r4, #2]
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	d000      	beq.n	8001d3e <modifySettingsWithCommand+0x282>
 8001d3c:	e6fb      	b.n	8001b36 <modifySettingsWithCommand+0x7a>
			mWeapon = M1;
 8001d3e:	494d      	ldr	r1, [pc, #308]	@ (8001e74 <modifySettingsWithCommand+0x3b8>)
 8001d40:	2601      	movs	r6, #1
 8001d42:	700a      	strb	r2, [r1, #0]
			isOK = TRUE;
 8001d44:	e6f7      	b.n	8001b36 <modifySettingsWithCommand+0x7a>
	if (strcmp(c.type, COMMAND_STATUS) == 0) {
 8001d46:	4b4c      	ldr	r3, [pc, #304]	@ (8001e78 <modifySettingsWithCommand+0x3bc>)
 8001d48:	88aa      	ldrh	r2, [r5, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d000      	beq.n	8001d50 <modifySettingsWithCommand+0x294>
 8001d4e:	e72a      	b.n	8001ba6 <modifySettingsWithCommand+0xea>
 8001d50:	79ab      	ldrb	r3, [r5, #6]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d000      	beq.n	8001d58 <modifySettingsWithCommand+0x29c>
 8001d56:	e726      	b.n	8001ba6 <modifySettingsWithCommand+0xea>
		serialPrintStatus();
 8001d58:	f7ff fd5c 	bl	8001814 <serialPrintStatus>
 8001d5c:	2601      	movs	r6, #1
 8001d5e:	e722      	b.n	8001ba6 <modifySettingsWithCommand+0xea>
	if (strcmp(c.type, COMMAND_READ) == 0) {
 8001d60:	792b      	ldrb	r3, [r5, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d000      	beq.n	8001d68 <modifySettingsWithCommand+0x2ac>
 8001d66:	e714      	b.n	8001b92 <modifySettingsWithCommand+0xd6>
		readSettingsFromEeprom();
 8001d68:	f7ff fc60 	bl	800162c <readSettingsFromEeprom>
		serialPrintSettings();
 8001d6c:	2601      	movs	r6, #1
 8001d6e:	f7ff fdd7 	bl	8001920 <serialPrintSettings>
		isOK = TRUE;
 8001d72:	e70e      	b.n	8001b92 <modifySettingsWithCommand+0xd6>
	if (strcmp(c.type, COMMAND_SAVE) == 0) {
 8001d74:	792a      	ldrb	r2, [r5, #4]
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d000      	beq.n	8001d7c <modifySettingsWithCommand+0x2c0>
 8001d7a:	e706      	b.n	8001b8a <modifySettingsWithCommand+0xce>
		storeSettingsToEeprom();
 8001d7c:	f7ff fb96 	bl	80014ac <storeSettingsToEeprom>
 8001d80:	2601      	movs	r6, #1
 8001d82:	9b01      	ldr	r3, [sp, #4]
 8001d84:	e701      	b.n	8001b8a <modifySettingsWithCommand+0xce>
	if (strcmp(c.type, COMMAND_RXPWMMODE) == 0) {
 8001d86:	88ab      	ldrh	r3, [r5, #4]
 8001d88:	2b4d      	cmp	r3, #77	@ 0x4d
 8001d8a:	d000      	beq.n	8001d8e <modifySettingsWithCommand+0x2d2>
 8001d8c:	e6f8      	b.n	8001b80 <modifySettingsWithCommand+0xc4>
		recieverIsPWM = atoi(c.value);
 8001d8e:	0020      	movs	r0, r4
 8001d90:	f005 fbde 	bl	8007550 <atoi>
 8001d94:	4b39      	ldr	r3, [pc, #228]	@ (8001e7c <modifySettingsWithCommand+0x3c0>)
 8001d96:	2601      	movs	r6, #1
 8001d98:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001d9a:	e6f1      	b.n	8001b80 <modifySettingsWithCommand+0xc4>
	if (strcmp(c.type, COMMAND_CUTOFFVOLTAGE) == 0) {
 8001d9c:	4b38      	ldr	r3, [pc, #224]	@ (8001e80 <modifySettingsWithCommand+0x3c4>)
 8001d9e:	686a      	ldr	r2, [r5, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d000      	beq.n	8001da6 <modifySettingsWithCommand+0x2ea>
 8001da4:	e6e7      	b.n	8001b76 <modifySettingsWithCommand+0xba>
		cutOffVoltage = atoi(c.value);
 8001da6:	0020      	movs	r0, r4
 8001da8:	f005 fbd2 	bl	8007550 <atoi>
 8001dac:	4b35      	ldr	r3, [pc, #212]	@ (8001e84 <modifySettingsWithCommand+0x3c8>)
 8001dae:	2601      	movs	r6, #1
 8001db0:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001db2:	e6e0      	b.n	8001b76 <modifySettingsWithCommand+0xba>
	if (strcmp(c.type, COMMAND_LIMITVOLTAGE) == 0) {
 8001db4:	792b      	ldrb	r3, [r5, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d000      	beq.n	8001dbc <modifySettingsWithCommand+0x300>
 8001dba:	e6d7      	b.n	8001b6c <modifySettingsWithCommand+0xb0>
		limitVoltage = atoi(c.value);
 8001dbc:	0020      	movs	r0, r4
 8001dbe:	f005 fbc7 	bl	8007550 <atoi>
 8001dc2:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <modifySettingsWithCommand+0x3cc>)
 8001dc4:	2601      	movs	r6, #1
 8001dc6:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001dc8:	e6d0      	b.n	8001b6c <modifySettingsWithCommand+0xb0>
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	200003f8 	.word	0x200003f8
 8001dd0:	43324854 	.word	0x43324854
 8001dd4:	43325453 	.word	0x43325453
 8001dd8:	43325057 	.word	0x43325057
 8001ddc:	43323153 	.word	0x43323153
 8001de0:	43323253 	.word	0x43323253
 8001de4:	324d5241 	.word	0x324d5241
 8001de8:	4552314d 	.word	0x4552314d
 8001dec:	4552324d 	.word	0x4552324d
 8001df0:	4552334d 	.word	0x4552334d
 8001df4:	45523153 	.word	0x45523153
 8001df8:	45523253 	.word	0x45523253
 8001dfc:	5341314d 	.word	0x5341314d
 8001e00:	5341324d 	.word	0x5341324d
 8001e04:	5341334d 	.word	0x5341334d
 8001e08:	44445057 	.word	0x44445057
 8001e0c:	4f4b4e54 	.word	0x4f4b4e54
 8001e10:	49444f4e 	.word	0x49444f4e
 8001e14:	4d494c56 	.word	0x4d494c56
 8001e18:	54554356 	.word	0x54554356
 8001e1c:	57505852 	.word	0x57505852
 8001e20:	45564153 	.word	0x45564153
 8001e24:	44414552 	.word	0x44414552
 8001e28:	004e4f43 	.word	0x004e4f43
 8001e2c:	54415453 	.word	0x54415453
 8001e30:	08008ca8 	.word	0x08008ca8
 8001e34:	20000208 	.word	0x20000208
 8001e38:	20000011 	.word	0x20000011
 8001e3c:	20000010 	.word	0x20000010
 8001e40:	2000000f 	.word	0x2000000f
 8001e44:	2000000e 	.word	0x2000000e
 8001e48:	2000000d 	.word	0x2000000d
 8001e4c:	00004843 	.word	0x00004843
 8001e50:	2000000c 	.word	0x2000000c
 8001e54:	2000000b 	.word	0x2000000b
 8001e58:	2000000a 	.word	0x2000000a
 8001e5c:	20000220 	.word	0x20000220
 8001e60:	2000021f 	.word	0x2000021f
 8001e64:	2000021e 	.word	0x2000021e
 8001e68:	00004c4d 	.word	0x00004c4d
 8001e6c:	0000524d 	.word	0x0000524d
 8001e70:	00005057 	.word	0x00005057
 8001e74:	20000008 	.word	0x20000008
 8001e78:	00005355 	.word	0x00005355
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	0046464f 	.word	0x0046464f
 8001e84:	20000004 	.word	0x20000004
 8001e88:	20000005 	.word	0x20000005
	if (strcmp(c.type, COMMAND_NODISARM) == 0) {
 8001e8c:	4b45      	ldr	r3, [pc, #276]	@ (8001fa4 <modifySettingsWithCommand+0x4e8>)
 8001e8e:	686a      	ldr	r2, [r5, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d000      	beq.n	8001e96 <modifySettingsWithCommand+0x3da>
 8001e94:	e665      	b.n	8001b62 <modifySettingsWithCommand+0xa6>
 8001e96:	7a2b      	ldrb	r3, [r5, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d000      	beq.n	8001e9e <modifySettingsWithCommand+0x3e2>
 8001e9c:	e661      	b.n	8001b62 <modifySettingsWithCommand+0xa6>
		noDisarm = atoi(c.value);
 8001e9e:	0020      	movs	r0, r4
 8001ea0:	f005 fb56 	bl	8007550 <atoi>
 8001ea4:	4b40      	ldr	r3, [pc, #256]	@ (8001fa8 <modifySettingsWithCommand+0x4ec>)
 8001ea6:	2601      	movs	r6, #1
 8001ea8:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001eaa:	e65a      	b.n	8001b62 <modifySettingsWithCommand+0xa6>
	if (strcmp(c.type, COMMAND_TANKON) == 0) {
 8001eac:	88ab      	ldrh	r3, [r5, #4]
 8001eae:	2b4e      	cmp	r3, #78	@ 0x4e
 8001eb0:	d000      	beq.n	8001eb4 <modifySettingsWithCommand+0x3f8>
 8001eb2:	e651      	b.n	8001b58 <modifySettingsWithCommand+0x9c>
		tankMixIsON = atoi(c.value);
 8001eb4:	0020      	movs	r0, r4
 8001eb6:	f005 fb4b 	bl	8007550 <atoi>
 8001eba:	4b3c      	ldr	r3, [pc, #240]	@ (8001fac <modifySettingsWithCommand+0x4f0>)
 8001ebc:	2601      	movs	r6, #1
 8001ebe:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001ec0:	e64a      	b.n	8001b58 <modifySettingsWithCommand+0x9c>
	if (strcmp(c.type, COMMAND_WPDD) == 0) {
 8001ec2:	792a      	ldrb	r2, [r5, #4]
 8001ec4:	2a00      	cmp	r2, #0
 8001ec6:	d000      	beq.n	8001eca <modifySettingsWithCommand+0x40e>
 8001ec8:	e642      	b.n	8001b50 <modifySettingsWithCommand+0x94>
		weaponDoubleDirection = atoi(c.value);
 8001eca:	0020      	movs	r0, r4
 8001ecc:	f005 fb40 	bl	8007550 <atoi>
 8001ed0:	4b37      	ldr	r3, [pc, #220]	@ (8001fb0 <modifySettingsWithCommand+0x4f4>)
 8001ed2:	2601      	movs	r6, #1
 8001ed4:	7018      	strb	r0, [r3, #0]
		isOK = TRUE;
 8001ed6:	9b01      	ldr	r3, [sp, #4]
 8001ed8:	e63a      	b.n	8001b50 <modifySettingsWithCommand+0x94>
	if (strcmp(c.type, COMMAND_M3ASS) == 0) {
 8001eda:	88aa      	ldrh	r2, [r5, #4]
 8001edc:	2a53      	cmp	r2, #83	@ 0x53
 8001ede:	d000      	beq.n	8001ee2 <modifySettingsWithCommand+0x426>
 8001ee0:	e631      	b.n	8001b46 <modifySettingsWithCommand+0x8a>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001ee2:	4a34      	ldr	r2, [pc, #208]	@ (8001fb4 <modifySettingsWithCommand+0x4f8>)
 8001ee4:	8821      	ldrh	r1, [r4, #0]
 8001ee6:	4291      	cmp	r1, r2
 8001ee8:	d033      	beq.n	8001f52 <modifySettingsWithCommand+0x496>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001eea:	4a33      	ldr	r2, [pc, #204]	@ (8001fb8 <modifySettingsWithCommand+0x4fc>)
 8001eec:	8821      	ldrh	r1, [r4, #0]
 8001eee:	4291      	cmp	r1, r2
 8001ef0:	d027      	beq.n	8001f42 <modifySettingsWithCommand+0x486>
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001ef2:	4a32      	ldr	r2, [pc, #200]	@ (8001fbc <modifySettingsWithCommand+0x500>)
 8001ef4:	8821      	ldrh	r1, [r4, #0]
 8001ef6:	4291      	cmp	r1, r2
 8001ef8:	d000      	beq.n	8001efc <modifySettingsWithCommand+0x440>
 8001efa:	e624      	b.n	8001b46 <modifySettingsWithCommand+0x8a>
 8001efc:	78a2      	ldrb	r2, [r4, #2]
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	d000      	beq.n	8001f04 <modifySettingsWithCommand+0x448>
 8001f02:	e620      	b.n	8001b46 <modifySettingsWithCommand+0x8a>
			mWeapon = M3;
 8001f04:	2102      	movs	r1, #2
 8001f06:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc0 <modifySettingsWithCommand+0x504>)
 8001f08:	2601      	movs	r6, #1
 8001f0a:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001f0c:	e61b      	b.n	8001b46 <modifySettingsWithCommand+0x8a>
	if (strcmp(c.type, COMMAND_M2ASS) == 0) {
 8001f0e:	88aa      	ldrh	r2, [r5, #4]
 8001f10:	2a53      	cmp	r2, #83	@ 0x53
 8001f12:	d000      	beq.n	8001f16 <modifySettingsWithCommand+0x45a>
 8001f14:	e613      	b.n	8001b3e <modifySettingsWithCommand+0x82>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001f16:	4a27      	ldr	r2, [pc, #156]	@ (8001fb4 <modifySettingsWithCommand+0x4f8>)
 8001f18:	8821      	ldrh	r1, [r4, #0]
 8001f1a:	4291      	cmp	r1, r2
 8001f1c:	d039      	beq.n	8001f92 <modifySettingsWithCommand+0x4d6>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001f1e:	4a26      	ldr	r2, [pc, #152]	@ (8001fb8 <modifySettingsWithCommand+0x4fc>)
 8001f20:	8821      	ldrh	r1, [r4, #0]
 8001f22:	4291      	cmp	r1, r2
 8001f24:	d02d      	beq.n	8001f82 <modifySettingsWithCommand+0x4c6>
		if (strcmp(c.value, VALUE_WP) == 0) {
 8001f26:	4a25      	ldr	r2, [pc, #148]	@ (8001fbc <modifySettingsWithCommand+0x500>)
 8001f28:	8821      	ldrh	r1, [r4, #0]
 8001f2a:	4291      	cmp	r1, r2
 8001f2c:	d000      	beq.n	8001f30 <modifySettingsWithCommand+0x474>
 8001f2e:	e606      	b.n	8001b3e <modifySettingsWithCommand+0x82>
 8001f30:	78a2      	ldrb	r2, [r4, #2]
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	d000      	beq.n	8001f38 <modifySettingsWithCommand+0x47c>
 8001f36:	e602      	b.n	8001b3e <modifySettingsWithCommand+0x82>
			mWeapon = M2;
 8001f38:	2101      	movs	r1, #1
 8001f3a:	4a21      	ldr	r2, [pc, #132]	@ (8001fc0 <modifySettingsWithCommand+0x504>)
 8001f3c:	2601      	movs	r6, #1
 8001f3e:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001f40:	e5fd      	b.n	8001b3e <modifySettingsWithCommand+0x82>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001f42:	78a2      	ldrb	r2, [r4, #2]
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d1d4      	bne.n	8001ef2 <modifySettingsWithCommand+0x436>
			mRight = M3;
 8001f48:	2102      	movs	r1, #2
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc4 <modifySettingsWithCommand+0x508>)
 8001f4c:	2601      	movs	r6, #1
 8001f4e:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001f50:	e7cf      	b.n	8001ef2 <modifySettingsWithCommand+0x436>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001f52:	78a2      	ldrb	r2, [r4, #2]
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	d1c8      	bne.n	8001eea <modifySettingsWithCommand+0x42e>
			mLeft = M3;
 8001f58:	2102      	movs	r1, #2
 8001f5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc8 <modifySettingsWithCommand+0x50c>)
 8001f5c:	2601      	movs	r6, #1
 8001f5e:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001f60:	e7c3      	b.n	8001eea <modifySettingsWithCommand+0x42e>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001f62:	78a2      	ldrb	r2, [r4, #2]
 8001f64:	2a00      	cmp	r2, #0
 8001f66:	d000      	beq.n	8001f6a <modifySettingsWithCommand+0x4ae>
 8001f68:	e6e0      	b.n	8001d2c <modifySettingsWithCommand+0x270>
			mRight = M1;
 8001f6a:	4916      	ldr	r1, [pc, #88]	@ (8001fc4 <modifySettingsWithCommand+0x508>)
 8001f6c:	2601      	movs	r6, #1
 8001f6e:	700a      	strb	r2, [r1, #0]
			isOK = TRUE;
 8001f70:	e6dc      	b.n	8001d2c <modifySettingsWithCommand+0x270>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001f72:	78a2      	ldrb	r2, [r4, #2]
 8001f74:	2a00      	cmp	r2, #0
 8001f76:	d000      	beq.n	8001f7a <modifySettingsWithCommand+0x4be>
 8001f78:	e6d3      	b.n	8001d22 <modifySettingsWithCommand+0x266>
			mLeft = M1;
 8001f7a:	4913      	ldr	r1, [pc, #76]	@ (8001fc8 <modifySettingsWithCommand+0x50c>)
 8001f7c:	2601      	movs	r6, #1
 8001f7e:	700a      	strb	r2, [r1, #0]
			isOK = TRUE;
 8001f80:	e6cf      	b.n	8001d22 <modifySettingsWithCommand+0x266>
		if (strcmp(c.value, VALUE_MR) == 0) {
 8001f82:	78a2      	ldrb	r2, [r4, #2]
 8001f84:	2a00      	cmp	r2, #0
 8001f86:	d1ce      	bne.n	8001f26 <modifySettingsWithCommand+0x46a>
			mRight = M2;
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc4 <modifySettingsWithCommand+0x508>)
 8001f8c:	2601      	movs	r6, #1
 8001f8e:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001f90:	e7c9      	b.n	8001f26 <modifySettingsWithCommand+0x46a>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8001f92:	78a2      	ldrb	r2, [r4, #2]
 8001f94:	2a00      	cmp	r2, #0
 8001f96:	d1c2      	bne.n	8001f1e <modifySettingsWithCommand+0x462>
			mLeft = M2;
 8001f98:	2101      	movs	r1, #1
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc8 <modifySettingsWithCommand+0x50c>)
 8001f9c:	2601      	movs	r6, #1
 8001f9e:	7011      	strb	r1, [r2, #0]
			isOK = TRUE;
 8001fa0:	e7bd      	b.n	8001f1e <modifySettingsWithCommand+0x462>
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	4d524153 	.word	0x4d524153
 8001fa8:	20000006 	.word	0x20000006
 8001fac:	20000007 	.word	0x20000007
 8001fb0:	2000021c 	.word	0x2000021c
 8001fb4:	00004c4d 	.word	0x00004c4d
 8001fb8:	0000524d 	.word	0x0000524d
 8001fbc:	00005057 	.word	0x00005057
 8001fc0:	20000008 	.word	0x20000008
 8001fc4:	20000009 	.word	0x20000009
 8001fc8:	2000021d 	.word	0x2000021d

08001fcc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <HAL_MspInit+0x2c>)
{
 8001fd0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	6999      	ldr	r1, [r3, #24]
 8001fd4:	4311      	orrs	r1, r2
 8001fd6:	6199      	str	r1, [r3, #24]
 8001fd8:	6999      	ldr	r1, [r3, #24]
 8001fda:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fdc:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	9200      	str	r2, [sp, #0]
 8001fe0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	0549      	lsls	r1, r1, #21
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	61da      	str	r2, [r3, #28]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	400b      	ands	r3, r1
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff2:	b002      	add	sp, #8
 8001ff4:	4770      	bx	lr
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	0004      	movs	r4, r0
 8002000:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	2214      	movs	r2, #20
 8002004:	2100      	movs	r1, #0
 8002006:	a802      	add	r0, sp, #8
 8002008:	f005 fc6e 	bl	80078e8 <memset>
  if(hadc->Instance==ADC1)
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_ADC_MspInit+0x58>)
 800200e:	6822      	ldr	r2, [r4, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_ADC_MspInit+0x1c>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002014:	b008      	add	sp, #32
 8002016:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002018:	2180      	movs	r1, #128	@ 0x80
 800201a:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <HAL_ADC_MspInit+0x5c>)
 800201c:	0089      	lsls	r1, r1, #2
 800201e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002022:	430a      	orrs	r2, r1
 8002024:	619a      	str	r2, [r3, #24]
 8002026:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 800202a:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 800202e:	9200      	str	r2, [sp, #0]
 8002030:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	695a      	ldr	r2, [r3, #20]
 8002034:	0289      	lsls	r1, r1, #10
 8002036:	430a      	orrs	r2, r1
 8002038:	615a      	str	r2, [r3, #20]
 800203a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 800203c:	2207      	movs	r2, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	400b      	ands	r3, r1
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8002044:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8002048:	9202      	str	r2, [sp, #8]
 800204a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f000 fc74 	bl	8002938 <HAL_GPIO_Init>
}
 8002050:	e7e0      	b.n	8002014 <HAL_ADC_MspInit+0x18>
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	40012400 	.word	0x40012400
 8002058:	40021000 	.word	0x40021000

0800205c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800205c:	b510      	push	{r4, lr}
 800205e:	0004      	movs	r4, r0
 8002060:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002062:	2214      	movs	r2, #20
 8002064:	2100      	movs	r1, #0
 8002066:	a802      	add	r0, sp, #8
 8002068:	f005 fc3e 	bl	80078e8 <memset>
  if(hi2c->Instance==I2C1)
 800206c:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <HAL_I2C_MspInit+0x64>)
 800206e:	6822      	ldr	r2, [r4, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002074:	b008      	add	sp, #32
 8002076:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002078:	2280      	movs	r2, #128	@ 0x80
 800207a:	4c12      	ldr	r4, [pc, #72]	@ (80020c4 <HAL_I2C_MspInit+0x68>)
 800207c:	02d2      	lsls	r2, r2, #11
 800207e:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002080:	4811      	ldr	r0, [pc, #68]	@ (80020c8 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	4313      	orrs	r3, r2
 8002084:	6163      	str	r3, [r4, #20]
 8002086:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002088:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	4013      	ands	r3, r2
 800208c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800208e:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002090:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002092:	2312      	movs	r3, #18
 8002094:	0092      	lsls	r2, r2, #2
 8002096:	9202      	str	r2, [sp, #8]
 8002098:	9303      	str	r3, [sp, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	2303      	movs	r3, #3
 800209e:	9204      	str	r2, [sp, #16]
 80020a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f000 fc47 	bl	8002938 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020aa:	2280      	movs	r2, #128	@ 0x80
 80020ac:	69e3      	ldr	r3, [r4, #28]
 80020ae:	0392      	lsls	r2, r2, #14
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61e3      	str	r3, [r4, #28]
 80020b4:	69e3      	ldr	r3, [r4, #28]
 80020b6:	4013      	ands	r3, r2
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	9b01      	ldr	r3, [sp, #4]
}
 80020bc:	e7da      	b.n	8002074 <HAL_I2C_MspInit+0x18>
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	40005400 	.word	0x40005400
 80020c4:	40021000 	.word	0x40021000
 80020c8:	48000400 	.word	0x48000400

080020cc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80020cc:	6803      	ldr	r3, [r0, #0]
 80020ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002144 <HAL_TIM_Base_MspInit+0x78>)
{
 80020d0:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d014      	beq.n	8002100 <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80020d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002148 <HAL_TIM_Base_MspInit+0x7c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d007      	beq.n	80020ec <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 80020dc:	4a1b      	ldr	r2, [pc, #108]	@ (800214c <HAL_TIM_Base_MspInit+0x80>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d019      	beq.n	8002116 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 80020e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002150 <HAL_TIM_Base_MspInit+0x84>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d021      	beq.n	800212c <HAL_TIM_Base_MspInit+0x60>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80020e8:	b004      	add	sp, #16
 80020ea:	4770      	bx	lr
    __HAL_RCC_TIM6_CLK_ENABLE();
 80020ec:	2310      	movs	r3, #16
 80020ee:	4a19      	ldr	r2, [pc, #100]	@ (8002154 <HAL_TIM_Base_MspInit+0x88>)
 80020f0:	69d1      	ldr	r1, [r2, #28]
 80020f2:	4319      	orrs	r1, r3
 80020f4:	61d1      	str	r1, [r2, #28]
 80020f6:	69d2      	ldr	r2, [r2, #28]
 80020f8:	4013      	ands	r3, r2
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	9b01      	ldr	r3, [sp, #4]
 80020fe:	e7f3      	b.n	80020e8 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002100:	2180      	movs	r1, #128	@ 0x80
 8002102:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <HAL_TIM_Base_MspInit+0x88>)
 8002104:	0109      	lsls	r1, r1, #4
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	430a      	orrs	r2, r1
 800210a:	619a      	str	r2, [r3, #24]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	400b      	ands	r3, r1
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	9b00      	ldr	r3, [sp, #0]
 8002114:	e7e8      	b.n	80020e8 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <HAL_TIM_Base_MspInit+0x88>)
 800211a:	0289      	lsls	r1, r1, #10
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	430a      	orrs	r2, r1
 8002120:	619a      	str	r2, [r3, #24]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	400b      	ands	r3, r1
 8002126:	9302      	str	r3, [sp, #8]
 8002128:	9b02      	ldr	r3, [sp, #8]
 800212a:	e7dd      	b.n	80020e8 <HAL_TIM_Base_MspInit+0x1c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800212c:	2180      	movs	r1, #128	@ 0x80
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <HAL_TIM_Base_MspInit+0x88>)
 8002130:	02c9      	lsls	r1, r1, #11
 8002132:	699a      	ldr	r2, [r3, #24]
 8002134:	430a      	orrs	r2, r1
 8002136:	619a      	str	r2, [r3, #24]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	400b      	ands	r3, r1
 800213c:	9303      	str	r3, [sp, #12]
 800213e:	9b03      	ldr	r3, [sp, #12]
}
 8002140:	e7d2      	b.n	80020e8 <HAL_TIM_Base_MspInit+0x1c>
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	40012c00 	.word	0x40012c00
 8002148:	40001000 	.word	0x40001000
 800214c:	40014400 	.word	0x40014400
 8002150:	40014800 	.word	0x40014800
 8002154:	40021000 	.word	0x40021000

08002158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002158:	b510      	push	{r4, lr}
 800215a:	0004      	movs	r4, r0
 800215c:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215e:	2214      	movs	r2, #20
 8002160:	2100      	movs	r1, #0
 8002162:	a804      	add	r0, sp, #16
 8002164:	f005 fbc0 	bl	80078e8 <memset>
  if(htim->Instance==TIM1)
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	4a21      	ldr	r2, [pc, #132]	@ (80021f0 <HAL_TIM_MspPostInit+0x98>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d007      	beq.n	8002180 <HAL_TIM_MspPostInit+0x28>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM16)
 8002170:	4a20      	ldr	r2, [pc, #128]	@ (80021f4 <HAL_TIM_MspPostInit+0x9c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01b      	beq.n	80021ae <HAL_TIM_MspPostInit+0x56>

  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }
  else if(htim->Instance==TIM17)
 8002176:	4a20      	ldr	r2, [pc, #128]	@ (80021f8 <HAL_TIM_MspPostInit+0xa0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d02d      	beq.n	80021d8 <HAL_TIM_MspPostInit+0x80>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800217c:	b00a      	add	sp, #40	@ 0x28
 800217e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002180:	2180      	movs	r1, #128	@ 0x80
 8002182:	4b1e      	ldr	r3, [pc, #120]	@ (80021fc <HAL_TIM_MspPostInit+0xa4>)
 8002184:	0289      	lsls	r1, r1, #10
 8002186:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002188:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	430a      	orrs	r2, r1
 800218c:	615a      	str	r2, [r3, #20]
 800218e:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin|PWM_M3_Pin;
 8002190:	22e0      	movs	r2, #224	@ 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	400b      	ands	r3, r1
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = PWM_M1_Pin|PWM_M2_Pin|PWM_M3_Pin;
 8002198:	2302      	movs	r3, #2
 800219a:	00d2      	lsls	r2, r2, #3
 800219c:	9204      	str	r2, [sp, #16]
 800219e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80021a0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a2:	a904      	add	r1, sp, #16
 80021a4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80021a6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f000 fbc6 	bl	8002938 <HAL_GPIO_Init>
 80021ac:	e7e6      	b.n	800217c <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	2180      	movs	r1, #128	@ 0x80
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_TIM_MspPostInit+0xa4>)
 80021b2:	02c9      	lsls	r1, r1, #11
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	615a      	str	r2, [r3, #20]
    GPIO_InitStruct.Pin = SERVO1_HV_Pin;
 80021ba:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	400b      	ands	r3, r1
 80021c0:	9302      	str	r3, [sp, #8]
 80021c2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 80021c4:	2302      	movs	r3, #2
 80021c6:	9204      	str	r2, [sp, #16]
 80021c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80021ca:	2302      	movs	r3, #2
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 80021cc:	480c      	ldr	r0, [pc, #48]	@ (8002200 <HAL_TIM_MspPostInit+0xa8>)
 80021ce:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80021d0:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f000 fbb1 	bl	8002938 <HAL_GPIO_Init>
}
 80021d6:	e7d1      	b.n	800217c <HAL_TIM_MspPostInit+0x24>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d8:	2180      	movs	r1, #128	@ 0x80
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <HAL_TIM_MspPostInit+0xa4>)
 80021dc:	02c9      	lsls	r1, r1, #11
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	615a      	str	r2, [r3, #20]
 80021e4:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 80021e6:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e8:	400b      	ands	r3, r1
 80021ea:	9303      	str	r3, [sp, #12]
 80021ec:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ee:	e7e9      	b.n	80021c4 <HAL_TIM_MspPostInit+0x6c>
 80021f0:	40012c00 	.word	0x40012c00
 80021f4:	40014400 	.word	0x40014400
 80021f8:	40014800 	.word	0x40014800
 80021fc:	40021000 	.word	0x40021000
 8002200:	48000400 	.word	0x48000400

08002204 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002204:	e7fe      	b.n	8002204 <NMI_Handler>
 8002206:	46c0      	nop			@ (mov r8, r8)

08002208 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <HardFault_Handler>
 800220a:	46c0      	nop			@ (mov r8, r8)

0800220c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800220c:	4770      	bx	lr
 800220e:	46c0      	nop			@ (mov r8, r8)

08002210 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002210:	4770      	bx	lr
 8002212:	46c0      	nop			@ (mov r8, r8)

08002214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002214:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002216:	f000 f8d7 	bl	80023c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800221a:	bd10      	pop	{r4, pc}

0800221c <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800221c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH1_Pin);
 800221e:	2001      	movs	r0, #1
 8002220:	f000 fca0 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH2_Pin);
 8002224:	2002      	movs	r0, #2
 8002226:	f000 fc9d 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800222a:	bd10      	pop	{r4, pc}

0800222c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800222c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH3_Pin);
 800222e:	2004      	movs	r0, #4
 8002230:	f000 fc98 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH4_Pin);
 8002234:	2008      	movs	r0, #8
 8002236:	f000 fc95 	bl	8002b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800223a:	bd10      	pop	{r4, pc}

0800223c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800223c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800223e:	4802      	ldr	r0, [pc, #8]	@ (8002248 <USB_IRQHandler+0xc>)
 8002240:	f001 fbd8 	bl	80039f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002244:	bd10      	pop	{r4, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	20001328 	.word	0x20001328

0800224c <_getpid>:
 800224c:	2001      	movs	r0, #1
 800224e:	4770      	bx	lr

08002250 <_kill>:
 8002250:	b510      	push	{r4, lr}
 8002252:	f005 fbff 	bl	8007a54 <__errno>
 8002256:	2316      	movs	r3, #22
 8002258:	6003      	str	r3, [r0, #0]
 800225a:	2001      	movs	r0, #1
 800225c:	4240      	negs	r0, r0
 800225e:	bd10      	pop	{r4, pc}

08002260 <_exit>:
 8002260:	b510      	push	{r4, lr}
 8002262:	f005 fbf7 	bl	8007a54 <__errno>
 8002266:	2316      	movs	r3, #22
 8002268:	6003      	str	r3, [r0, #0]
 800226a:	e7fe      	b.n	800226a <_exit+0xa>

0800226c <_read>:
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	1e16      	subs	r6, r2, #0
 8002270:	dd07      	ble.n	8002282 <_read+0x16>
 8002272:	000c      	movs	r4, r1
 8002274:	188d      	adds	r5, r1, r2
 8002276:	e000      	b.n	800227a <_read+0xe>
 8002278:	bf00      	nop
 800227a:	7020      	strb	r0, [r4, #0]
 800227c:	3401      	adds	r4, #1
 800227e:	42ac      	cmp	r4, r5
 8002280:	d1f9      	bne.n	8002276 <_read+0xa>
 8002282:	0030      	movs	r0, r6
 8002284:	bd70      	pop	{r4, r5, r6, pc}
 8002286:	46c0      	nop			@ (mov r8, r8)

08002288 <_write>:
 8002288:	b570      	push	{r4, r5, r6, lr}
 800228a:	1e16      	subs	r6, r2, #0
 800228c:	dd07      	ble.n	800229e <_write+0x16>
 800228e:	000c      	movs	r4, r1
 8002290:	188d      	adds	r5, r1, r2
 8002292:	7820      	ldrb	r0, [r4, #0]
 8002294:	3401      	adds	r4, #1
 8002296:	e000      	b.n	800229a <_write+0x12>
 8002298:	bf00      	nop
 800229a:	42ac      	cmp	r4, r5
 800229c:	d1f9      	bne.n	8002292 <_write+0xa>
 800229e:	0030      	movs	r0, r6
 80022a0:	bd70      	pop	{r4, r5, r6, pc}
 80022a2:	46c0      	nop			@ (mov r8, r8)

080022a4 <_close>:
 80022a4:	2001      	movs	r0, #1
 80022a6:	4240      	negs	r0, r0
 80022a8:	4770      	bx	lr
 80022aa:	46c0      	nop			@ (mov r8, r8)

080022ac <_fstat>:
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	019b      	lsls	r3, r3, #6
 80022b0:	2000      	movs	r0, #0
 80022b2:	604b      	str	r3, [r1, #4]
 80022b4:	4770      	bx	lr
 80022b6:	46c0      	nop			@ (mov r8, r8)

080022b8 <_isatty>:
 80022b8:	2001      	movs	r0, #1
 80022ba:	4770      	bx	lr

080022bc <_lseek>:
 80022bc:	2000      	movs	r0, #0
 80022be:	4770      	bx	lr

080022c0 <_sbrk>:
 80022c0:	490c      	ldr	r1, [pc, #48]	@ (80022f4 <_sbrk+0x34>)
 80022c2:	4a0d      	ldr	r2, [pc, #52]	@ (80022f8 <_sbrk+0x38>)
 80022c4:	0003      	movs	r3, r0
 80022c6:	1a52      	subs	r2, r2, r1
 80022c8:	490c      	ldr	r1, [pc, #48]	@ (80022fc <_sbrk+0x3c>)
 80022ca:	b510      	push	{r4, lr}
 80022cc:	6808      	ldr	r0, [r1, #0]
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d004      	beq.n	80022dc <_sbrk+0x1c>
 80022d2:	18c3      	adds	r3, r0, r3
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d806      	bhi.n	80022e6 <_sbrk+0x26>
 80022d8:	600b      	str	r3, [r1, #0]
 80022da:	bd10      	pop	{r4, pc}
 80022dc:	4808      	ldr	r0, [pc, #32]	@ (8002300 <_sbrk+0x40>)
 80022de:	18c3      	adds	r3, r0, r3
 80022e0:	6008      	str	r0, [r1, #0]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d9f8      	bls.n	80022d8 <_sbrk+0x18>
 80022e6:	f005 fbb5 	bl	8007a54 <__errno>
 80022ea:	230c      	movs	r3, #12
 80022ec:	6003      	str	r3, [r0, #0]
 80022ee:	2001      	movs	r0, #1
 80022f0:	4240      	negs	r0, r0
 80022f2:	e7f2      	b.n	80022da <_sbrk+0x1a>
 80022f4:	00000400 	.word	0x00000400
 80022f8:	20004000 	.word	0x20004000
 80022fc:	20000438 	.word	0x20000438
 8002300:	20001750 	.word	0x20001750

08002304 <SystemInit>:
 8002304:	4770      	bx	lr
 8002306:	46c0      	nop			@ (mov r8, r8)

08002308 <Reset_Handler>:
 8002308:	480d      	ldr	r0, [pc, #52]	@ (8002340 <LoopForever+0x2>)
 800230a:	4685      	mov	sp, r0
 800230c:	f7ff fffa 	bl	8002304 <SystemInit>
 8002310:	480c      	ldr	r0, [pc, #48]	@ (8002344 <LoopForever+0x6>)
 8002312:	490d      	ldr	r1, [pc, #52]	@ (8002348 <LoopForever+0xa>)
 8002314:	4a0d      	ldr	r2, [pc, #52]	@ (800234c <LoopForever+0xe>)
 8002316:	2300      	movs	r3, #0
 8002318:	e002      	b.n	8002320 <LoopCopyDataInit>

0800231a <CopyDataInit>:
 800231a:	58d4      	ldr	r4, [r2, r3]
 800231c:	50c4      	str	r4, [r0, r3]
 800231e:	3304      	adds	r3, #4

08002320 <LoopCopyDataInit>:
 8002320:	18c4      	adds	r4, r0, r3
 8002322:	428c      	cmp	r4, r1
 8002324:	d3f9      	bcc.n	800231a <CopyDataInit>
 8002326:	4a0a      	ldr	r2, [pc, #40]	@ (8002350 <LoopForever+0x12>)
 8002328:	4c0a      	ldr	r4, [pc, #40]	@ (8002354 <LoopForever+0x16>)
 800232a:	2300      	movs	r3, #0
 800232c:	e001      	b.n	8002332 <LoopFillZerobss>

0800232e <FillZerobss>:
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	3204      	adds	r2, #4

08002332 <LoopFillZerobss>:
 8002332:	42a2      	cmp	r2, r4
 8002334:	d3fb      	bcc.n	800232e <FillZerobss>
 8002336:	f005 fb93 	bl	8007a60 <__libc_init_array>
 800233a:	f7fe f919 	bl	8000570 <main>

0800233e <LoopForever>:
 800233e:	e7fe      	b.n	800233e <LoopForever>
 8002340:	20004000 	.word	0x20004000
 8002344:	20000000 	.word	0x20000000
 8002348:	200001ec 	.word	0x200001ec
 800234c:	08008f70 	.word	0x08008f70
 8002350:	200001ec 	.word	0x200001ec
 8002354:	20001750 	.word	0x20001750

08002358 <ADC1_IRQHandler>:
 8002358:	e7fe      	b.n	8002358 <ADC1_IRQHandler>
	...

0800235c <HAL_InitTick>:
 800235c:	b570      	push	{r4, r5, r6, lr}
 800235e:	0004      	movs	r4, r0
 8002360:	20fa      	movs	r0, #250	@ 0xfa
 8002362:	4b0e      	ldr	r3, [pc, #56]	@ (800239c <HAL_InitTick+0x40>)
 8002364:	0080      	lsls	r0, r0, #2
 8002366:	7819      	ldrb	r1, [r3, #0]
 8002368:	f7fd fee0 	bl	800012c <__udivsi3>
 800236c:	4d0c      	ldr	r5, [pc, #48]	@ (80023a0 <HAL_InitTick+0x44>)
 800236e:	0001      	movs	r1, r0
 8002370:	6828      	ldr	r0, [r5, #0]
 8002372:	f7fd fedb 	bl	800012c <__udivsi3>
 8002376:	f000 fac5 	bl	8002904 <HAL_SYSTICK_Config>
 800237a:	2800      	cmp	r0, #0
 800237c:	d10c      	bne.n	8002398 <HAL_InitTick+0x3c>
 800237e:	3001      	adds	r0, #1
 8002380:	2c03      	cmp	r4, #3
 8002382:	d900      	bls.n	8002386 <HAL_InitTick+0x2a>
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	3802      	subs	r0, #2
 8002388:	2200      	movs	r2, #0
 800238a:	0021      	movs	r1, r4
 800238c:	f000 fa84 	bl	8002898 <HAL_NVIC_SetPriority>
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <HAL_InitTick+0x48>)
 8002392:	2000      	movs	r0, #0
 8002394:	601c      	str	r4, [r3, #0]
 8002396:	e7f5      	b.n	8002384 <HAL_InitTick+0x28>
 8002398:	2001      	movs	r0, #1
 800239a:	e7f3      	b.n	8002384 <HAL_InitTick+0x28>
 800239c:	20000018 	.word	0x20000018
 80023a0:	20000014 	.word	0x20000014
 80023a4:	2000001c 	.word	0x2000001c

080023a8 <HAL_Init>:
 80023a8:	2110      	movs	r1, #16
 80023aa:	4a06      	ldr	r2, [pc, #24]	@ (80023c4 <HAL_Init+0x1c>)
 80023ac:	b510      	push	{r4, lr}
 80023ae:	6813      	ldr	r3, [r2, #0]
 80023b0:	2003      	movs	r0, #3
 80023b2:	430b      	orrs	r3, r1
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	f7ff ffd1 	bl	800235c <HAL_InitTick>
 80023ba:	f7ff fe07 	bl	8001fcc <HAL_MspInit>
 80023be:	2000      	movs	r0, #0
 80023c0:	bd10      	pop	{r4, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	40022000 	.word	0x40022000

080023c8 <HAL_IncTick>:
 80023c8:	4a03      	ldr	r2, [pc, #12]	@ (80023d8 <HAL_IncTick+0x10>)
 80023ca:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <HAL_IncTick+0x14>)
 80023cc:	6811      	ldr	r1, [r2, #0]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	185b      	adds	r3, r3, r1
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	4770      	bx	lr
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	2000043c 	.word	0x2000043c
 80023dc:	20000018 	.word	0x20000018

080023e0 <HAL_GetTick>:
 80023e0:	4b01      	ldr	r3, [pc, #4]	@ (80023e8 <HAL_GetTick+0x8>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	4770      	bx	lr
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	2000043c 	.word	0x2000043c

080023ec <HAL_Delay>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	0004      	movs	r4, r0
 80023f0:	f7ff fff6 	bl	80023e0 <HAL_GetTick>
 80023f4:	0005      	movs	r5, r0
 80023f6:	1c63      	adds	r3, r4, #1
 80023f8:	d002      	beq.n	8002400 <HAL_Delay+0x14>
 80023fa:	4b04      	ldr	r3, [pc, #16]	@ (800240c <HAL_Delay+0x20>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	18e4      	adds	r4, r4, r3
 8002400:	f7ff ffee 	bl	80023e0 <HAL_GetTick>
 8002404:	1b40      	subs	r0, r0, r5
 8002406:	42a0      	cmp	r0, r4
 8002408:	d3fa      	bcc.n	8002400 <HAL_Delay+0x14>
 800240a:	bd70      	pop	{r4, r5, r6, pc}
 800240c:	20000018 	.word	0x20000018

08002410 <ADC_Disable>:
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	2303      	movs	r3, #3
 8002414:	6802      	ldr	r2, [r0, #0]
 8002416:	0004      	movs	r4, r0
 8002418:	6891      	ldr	r1, [r2, #8]
 800241a:	400b      	ands	r3, r1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d001      	beq.n	8002424 <ADC_Disable+0x14>
 8002420:	2000      	movs	r0, #0
 8002422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002424:	6811      	ldr	r1, [r2, #0]
 8002426:	420b      	tst	r3, r1
 8002428:	d00e      	beq.n	8002448 <ADC_Disable+0x38>
 800242a:	2705      	movs	r7, #5
 800242c:	6893      	ldr	r3, [r2, #8]
 800242e:	401f      	ands	r7, r3
 8002430:	2f01      	cmp	r7, #1
 8002432:	d00d      	beq.n	8002450 <ADC_Disable+0x40>
 8002434:	2210      	movs	r2, #16
 8002436:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002438:	2001      	movs	r0, #1
 800243a:	4313      	orrs	r3, r2
 800243c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800243e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002440:	3a0f      	subs	r2, #15
 8002442:	4313      	orrs	r3, r2
 8002444:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002446:	e7ec      	b.n	8002422 <ADC_Disable+0x12>
 8002448:	68d3      	ldr	r3, [r2, #12]
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	d5e8      	bpl.n	8002420 <ADC_Disable+0x10>
 800244e:	e7ec      	b.n	800242a <ADC_Disable+0x1a>
 8002450:	2102      	movs	r1, #2
 8002452:	6893      	ldr	r3, [r2, #8]
 8002454:	2501      	movs	r5, #1
 8002456:	430b      	orrs	r3, r1
 8002458:	6093      	str	r3, [r2, #8]
 800245a:	2303      	movs	r3, #3
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	f7ff ffbf 	bl	80023e0 <HAL_GetTick>
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	0006      	movs	r6, r0
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	421f      	tst	r7, r3
 800246a:	d0d9      	beq.n	8002420 <ADC_Disable+0x10>
 800246c:	f7ff ffb8 	bl	80023e0 <HAL_GetTick>
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	1b80      	subs	r0, r0, r6
 8002474:	2802      	cmp	r0, #2
 8002476:	d902      	bls.n	800247e <ADC_Disable+0x6e>
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	4215      	tst	r5, r2
 800247c:	d103      	bne.n	8002486 <ADC_Disable+0x76>
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	421d      	tst	r5, r3
 8002482:	d1f3      	bne.n	800246c <ADC_Disable+0x5c>
 8002484:	e7cc      	b.n	8002420 <ADC_Disable+0x10>
 8002486:	2210      	movs	r2, #16
 8002488:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800248a:	2001      	movs	r0, #1
 800248c:	4313      	orrs	r3, r2
 800248e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002490:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002492:	432b      	orrs	r3, r5
 8002494:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002496:	e7c4      	b.n	8002422 <ADC_Disable+0x12>

08002498 <ADC_ConversionStop>:
 8002498:	2204      	movs	r2, #4
 800249a:	6803      	ldr	r3, [r0, #0]
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	6899      	ldr	r1, [r3, #8]
 80024a0:	0004      	movs	r4, r0
 80024a2:	420a      	tst	r2, r1
 80024a4:	d01d      	beq.n	80024e2 <ADC_ConversionStop+0x4a>
 80024a6:	6899      	ldr	r1, [r3, #8]
 80024a8:	420a      	tst	r2, r1
 80024aa:	d006      	beq.n	80024ba <ADC_ConversionStop+0x22>
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	0792      	lsls	r2, r2, #30
 80024b0:	d403      	bmi.n	80024ba <ADC_ConversionStop+0x22>
 80024b2:	2110      	movs	r1, #16
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]
 80024ba:	f7ff ff91 	bl	80023e0 <HAL_GetTick>
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	0006      	movs	r6, r0
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	075b      	lsls	r3, r3, #29
 80024c6:	d50c      	bpl.n	80024e2 <ADC_ConversionStop+0x4a>
 80024c8:	2504      	movs	r5, #4
 80024ca:	f7ff ff89 	bl	80023e0 <HAL_GetTick>
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	1b80      	subs	r0, r0, r6
 80024d2:	2802      	cmp	r0, #2
 80024d4:	d902      	bls.n	80024dc <ADC_ConversionStop+0x44>
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	4215      	tst	r5, r2
 80024da:	d104      	bne.n	80024e6 <ADC_ConversionStop+0x4e>
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	421d      	tst	r5, r3
 80024e0:	d1f3      	bne.n	80024ca <ADC_ConversionStop+0x32>
 80024e2:	2000      	movs	r0, #0
 80024e4:	bd70      	pop	{r4, r5, r6, pc}
 80024e6:	2210      	movs	r2, #16
 80024e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80024ea:	2001      	movs	r0, #1
 80024ec:	4313      	orrs	r3, r2
 80024ee:	63a3      	str	r3, [r4, #56]	@ 0x38
 80024f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80024f2:	3a0f      	subs	r2, #15
 80024f4:	4313      	orrs	r3, r2
 80024f6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80024f8:	e7f4      	b.n	80024e4 <ADC_ConversionStop+0x4c>
 80024fa:	46c0      	nop			@ (mov r8, r8)

080024fc <ADC_Enable.constprop.0>:
 80024fc:	2300      	movs	r3, #0
 80024fe:	b570      	push	{r4, r5, r6, lr}
 8002500:	6802      	ldr	r2, [r0, #0]
 8002502:	b082      	sub	sp, #8
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	6891      	ldr	r1, [r2, #8]
 8002508:	3303      	adds	r3, #3
 800250a:	0004      	movs	r4, r0
 800250c:	400b      	ands	r3, r1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d037      	beq.n	8002582 <ADC_Enable.constprop.0+0x86>
 8002512:	6891      	ldr	r1, [r2, #8]
 8002514:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <ADC_Enable.constprop.0+0xa8>)
 8002516:	4219      	tst	r1, r3
 8002518:	d129      	bne.n	800256e <ADC_Enable.constprop.0+0x72>
 800251a:	2101      	movs	r1, #1
 800251c:	6893      	ldr	r3, [r2, #8]
 800251e:	430b      	orrs	r3, r1
 8002520:	6093      	str	r3, [r2, #8]
 8002522:	4b21      	ldr	r3, [pc, #132]	@ (80025a8 <ADC_Enable.constprop.0+0xac>)
 8002524:	4921      	ldr	r1, [pc, #132]	@ (80025ac <ADC_Enable.constprop.0+0xb0>)
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	f7fd fe00 	bl	800012c <__udivsi3>
 800252c:	9001      	str	r0, [sp, #4]
 800252e:	9b01      	ldr	r3, [sp, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <ADC_Enable.constprop.0+0x44>
 8002534:	9b01      	ldr	r3, [sp, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	9b01      	ldr	r3, [sp, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f9      	bne.n	8002534 <ADC_Enable.constprop.0+0x38>
 8002540:	f7ff ff4e 	bl	80023e0 <HAL_GetTick>
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	0006      	movs	r6, r0
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2501      	movs	r5, #1
 800254c:	07db      	lsls	r3, r3, #31
 800254e:	d40b      	bmi.n	8002568 <ADC_Enable.constprop.0+0x6c>
 8002550:	f7ff ff46 	bl	80023e0 <HAL_GetTick>
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	1b80      	subs	r0, r0, r6
 8002558:	2802      	cmp	r0, #2
 800255a:	d902      	bls.n	8002562 <ADC_Enable.constprop.0+0x66>
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4215      	tst	r5, r2
 8002560:	d016      	beq.n	8002590 <ADC_Enable.constprop.0+0x94>
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	421d      	tst	r5, r3
 8002566:	d0f3      	beq.n	8002550 <ADC_Enable.constprop.0+0x54>
 8002568:	2000      	movs	r0, #0
 800256a:	b002      	add	sp, #8
 800256c:	bd70      	pop	{r4, r5, r6, pc}
 800256e:	2210      	movs	r2, #16
 8002570:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002572:	2001      	movs	r0, #1
 8002574:	4313      	orrs	r3, r2
 8002576:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002578:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800257a:	3a0f      	subs	r2, #15
 800257c:	4313      	orrs	r3, r2
 800257e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002580:	e7f3      	b.n	800256a <ADC_Enable.constprop.0+0x6e>
 8002582:	6811      	ldr	r1, [r2, #0]
 8002584:	420b      	tst	r3, r1
 8002586:	d1ef      	bne.n	8002568 <ADC_Enable.constprop.0+0x6c>
 8002588:	68d3      	ldr	r3, [r2, #12]
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	d4ec      	bmi.n	8002568 <ADC_Enable.constprop.0+0x6c>
 800258e:	e7c0      	b.n	8002512 <ADC_Enable.constprop.0+0x16>
 8002590:	2210      	movs	r2, #16
 8002592:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002594:	2001      	movs	r0, #1
 8002596:	4313      	orrs	r3, r2
 8002598:	63a3      	str	r3, [r4, #56]	@ 0x38
 800259a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800259c:	432b      	orrs	r3, r5
 800259e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80025a0:	e7e3      	b.n	800256a <ADC_Enable.constprop.0+0x6e>
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	80000017 	.word	0x80000017
 80025a8:	20000014 	.word	0x20000014
 80025ac:	000f4240 	.word	0x000f4240

080025b0 <HAL_ADC_Init>:
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	1e04      	subs	r4, r0, #0
 80025b4:	d064      	beq.n	8002680 <HAL_ADC_Init+0xd0>
 80025b6:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d068      	beq.n	800268e <HAL_ADC_Init+0xde>
 80025bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025be:	06db      	lsls	r3, r3, #27
 80025c0:	d460      	bmi.n	8002684 <HAL_ADC_Init+0xd4>
 80025c2:	6822      	ldr	r2, [r4, #0]
 80025c4:	6893      	ldr	r3, [r2, #8]
 80025c6:	075b      	lsls	r3, r3, #29
 80025c8:	d45c      	bmi.n	8002684 <HAL_ADC_Init+0xd4>
 80025ca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025cc:	4947      	ldr	r1, [pc, #284]	@ (80026ec <HAL_ADC_Init+0x13c>)
 80025ce:	400b      	ands	r3, r1
 80025d0:	3106      	adds	r1, #6
 80025d2:	31ff      	adds	r1, #255	@ 0xff
 80025d4:	430b      	orrs	r3, r1
 80025d6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80025d8:	2303      	movs	r3, #3
 80025da:	6891      	ldr	r1, [r2, #8]
 80025dc:	400b      	ands	r3, r1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d05b      	beq.n	800269a <HAL_ADC_Init+0xea>
 80025e2:	2118      	movs	r1, #24
 80025e4:	68d3      	ldr	r3, [r2, #12]
 80025e6:	438b      	bics	r3, r1
 80025e8:	68a1      	ldr	r1, [r4, #8]
 80025ea:	430b      	orrs	r3, r1
 80025ec:	60d3      	str	r3, [r2, #12]
 80025ee:	6913      	ldr	r3, [r2, #16]
 80025f0:	6861      	ldr	r1, [r4, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	430b      	orrs	r3, r1
 80025f8:	6113      	str	r3, [r2, #16]
 80025fa:	68d3      	ldr	r3, [r2, #12]
 80025fc:	493c      	ldr	r1, [pc, #240]	@ (80026f0 <HAL_ADC_Init+0x140>)
 80025fe:	400b      	ands	r3, r1
 8002600:	60d3      	str	r3, [r2, #12]
 8002602:	7e23      	ldrb	r3, [r4, #24]
 8002604:	7e61      	ldrb	r1, [r4, #25]
 8002606:	039b      	lsls	r3, r3, #14
 8002608:	03c9      	lsls	r1, r1, #15
 800260a:	430b      	orrs	r3, r1
 800260c:	7ea0      	ldrb	r0, [r4, #26]
 800260e:	68e1      	ldr	r1, [r4, #12]
 8002610:	430b      	orrs	r3, r1
 8002612:	0341      	lsls	r1, r0, #13
 8002614:	430b      	orrs	r3, r1
 8002616:	2124      	movs	r1, #36	@ 0x24
 8002618:	5c61      	ldrb	r1, [r4, r1]
 800261a:	0049      	lsls	r1, r1, #1
 800261c:	430b      	orrs	r3, r1
 800261e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002620:	3901      	subs	r1, #1
 8002622:	1e4d      	subs	r5, r1, #1
 8002624:	41a9      	sbcs	r1, r5
 8002626:	0309      	lsls	r1, r1, #12
 8002628:	430b      	orrs	r3, r1
 800262a:	6921      	ldr	r1, [r4, #16]
 800262c:	3902      	subs	r1, #2
 800262e:	424d      	negs	r5, r1
 8002630:	4169      	adcs	r1, r5
 8002632:	0089      	lsls	r1, r1, #2
 8002634:	430b      	orrs	r3, r1
 8002636:	7ee1      	ldrb	r1, [r4, #27]
 8002638:	2901      	cmp	r1, #1
 800263a:	d03e      	beq.n	80026ba <HAL_ADC_Init+0x10a>
 800263c:	20c2      	movs	r0, #194	@ 0xc2
 800263e:	69e1      	ldr	r1, [r4, #28]
 8002640:	30ff      	adds	r0, #255	@ 0xff
 8002642:	4281      	cmp	r1, r0
 8002644:	d002      	beq.n	800264c <HAL_ADC_Init+0x9c>
 8002646:	6a20      	ldr	r0, [r4, #32]
 8002648:	4301      	orrs	r1, r0
 800264a:	430b      	orrs	r3, r1
 800264c:	68d1      	ldr	r1, [r2, #12]
 800264e:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8002650:	4319      	orrs	r1, r3
 8002652:	60d1      	str	r1, [r2, #12]
 8002654:	2180      	movs	r1, #128	@ 0x80
 8002656:	0549      	lsls	r1, r1, #21
 8002658:	428d      	cmp	r5, r1
 800265a:	d025      	beq.n	80026a8 <HAL_ADC_Init+0xf8>
 800265c:	1e69      	subs	r1, r5, #1
 800265e:	2906      	cmp	r1, #6
 8002660:	d922      	bls.n	80026a8 <HAL_ADC_Init+0xf8>
 8002662:	68d2      	ldr	r2, [r2, #12]
 8002664:	4923      	ldr	r1, [pc, #140]	@ (80026f4 <HAL_ADC_Init+0x144>)
 8002666:	400a      	ands	r2, r1
 8002668:	429a      	cmp	r2, r3
 800266a:	d02c      	beq.n	80026c6 <HAL_ADC_Init+0x116>
 800266c:	2212      	movs	r2, #18
 800266e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002670:	4393      	bics	r3, r2
 8002672:	3a02      	subs	r2, #2
 8002674:	4313      	orrs	r3, r2
 8002676:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002678:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800267a:	3a0f      	subs	r2, #15
 800267c:	4313      	orrs	r3, r2
 800267e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002680:	2001      	movs	r0, #1
 8002682:	bd70      	pop	{r4, r5, r6, pc}
 8002684:	2210      	movs	r2, #16
 8002686:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002688:	4313      	orrs	r3, r2
 800268a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800268c:	e7f8      	b.n	8002680 <HAL_ADC_Init+0xd0>
 800268e:	2234      	movs	r2, #52	@ 0x34
 8002690:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8002692:	5483      	strb	r3, [r0, r2]
 8002694:	f7ff fcb2 	bl	8001ffc <HAL_ADC_MspInit>
 8002698:	e790      	b.n	80025bc <HAL_ADC_Init+0xc>
 800269a:	6811      	ldr	r1, [r2, #0]
 800269c:	420b      	tst	r3, r1
 800269e:	d1ac      	bne.n	80025fa <HAL_ADC_Init+0x4a>
 80026a0:	68d3      	ldr	r3, [r2, #12]
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	d4a9      	bmi.n	80025fa <HAL_ADC_Init+0x4a>
 80026a6:	e79c      	b.n	80025e2 <HAL_ADC_Init+0x32>
 80026a8:	2107      	movs	r1, #7
 80026aa:	6950      	ldr	r0, [r2, #20]
 80026ac:	4388      	bics	r0, r1
 80026ae:	6150      	str	r0, [r2, #20]
 80026b0:	6950      	ldr	r0, [r2, #20]
 80026b2:	4029      	ands	r1, r5
 80026b4:	4301      	orrs	r1, r0
 80026b6:	6151      	str	r1, [r2, #20]
 80026b8:	e7d3      	b.n	8002662 <HAL_ADC_Init+0xb2>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d10d      	bne.n	80026da <HAL_ADC_Init+0x12a>
 80026be:	2180      	movs	r1, #128	@ 0x80
 80026c0:	0249      	lsls	r1, r1, #9
 80026c2:	430b      	orrs	r3, r1
 80026c4:	e7ba      	b.n	800263c <HAL_ADC_Init+0x8c>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2203      	movs	r2, #3
 80026ca:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80026cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80026ce:	2000      	movs	r0, #0
 80026d0:	4393      	bics	r3, r2
 80026d2:	3a02      	subs	r2, #2
 80026d4:	4313      	orrs	r3, r2
 80026d6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80026d8:	e7d3      	b.n	8002682 <HAL_ADC_Init+0xd2>
 80026da:	2520      	movs	r5, #32
 80026dc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80026de:	4328      	orrs	r0, r5
 80026e0:	63a0      	str	r0, [r4, #56]	@ 0x38
 80026e2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80026e4:	4301      	orrs	r1, r0
 80026e6:	63e1      	str	r1, [r4, #60]	@ 0x3c
 80026e8:	e7a8      	b.n	800263c <HAL_ADC_Init+0x8c>
 80026ea:	46c0      	nop			@ (mov r8, r8)
 80026ec:	fffffefd 	.word	0xfffffefd
 80026f0:	fffe0219 	.word	0xfffe0219
 80026f4:	833fffe7 	.word	0x833fffe7

080026f8 <HAL_ADC_Start>:
 80026f8:	6803      	ldr	r3, [r0, #0]
 80026fa:	b510      	push	{r4, lr}
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	0004      	movs	r4, r0
 8002700:	0752      	lsls	r2, r2, #29
 8002702:	d421      	bmi.n	8002748 <HAL_ADC_Start+0x50>
 8002704:	2234      	movs	r2, #52	@ 0x34
 8002706:	5c81      	ldrb	r1, [r0, r2]
 8002708:	2901      	cmp	r1, #1
 800270a:	d01d      	beq.n	8002748 <HAL_ADC_Start+0x50>
 800270c:	2101      	movs	r1, #1
 800270e:	5481      	strb	r1, [r0, r2]
 8002710:	7e42      	ldrb	r2, [r0, #25]
 8002712:	2a01      	cmp	r2, #1
 8002714:	d112      	bne.n	800273c <HAL_ADC_Start+0x44>
 8002716:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8002718:	4a0c      	ldr	r2, [pc, #48]	@ (800274c <HAL_ADC_Start+0x54>)
 800271a:	2000      	movs	r0, #0
 800271c:	4011      	ands	r1, r2
 800271e:	2280      	movs	r2, #128	@ 0x80
 8002720:	0052      	lsls	r2, r2, #1
 8002722:	430a      	orrs	r2, r1
 8002724:	63a2      	str	r2, [r4, #56]	@ 0x38
 8002726:	2134      	movs	r1, #52	@ 0x34
 8002728:	2200      	movs	r2, #0
 800272a:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800272c:	5462      	strb	r2, [r4, r1]
 800272e:	321c      	adds	r2, #28
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	3930      	subs	r1, #48	@ 0x30
 8002736:	430a      	orrs	r2, r1
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	bd10      	pop	{r4, pc}
 800273c:	f7ff fede 	bl	80024fc <ADC_Enable.constprop.0>
 8002740:	2800      	cmp	r0, #0
 8002742:	d1fa      	bne.n	800273a <HAL_ADC_Start+0x42>
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	e7e6      	b.n	8002716 <HAL_ADC_Start+0x1e>
 8002748:	2002      	movs	r0, #2
 800274a:	e7f6      	b.n	800273a <HAL_ADC_Start+0x42>
 800274c:	fffff0fe 	.word	0xfffff0fe

08002750 <HAL_ADC_Stop>:
 8002750:	2334      	movs	r3, #52	@ 0x34
 8002752:	b570      	push	{r4, r5, r6, lr}
 8002754:	5cc2      	ldrb	r2, [r0, r3]
 8002756:	0004      	movs	r4, r0
 8002758:	2a01      	cmp	r2, #1
 800275a:	d014      	beq.n	8002786 <HAL_ADC_Stop+0x36>
 800275c:	2501      	movs	r5, #1
 800275e:	54c5      	strb	r5, [r0, r3]
 8002760:	f7ff fe9a 	bl	8002498 <ADC_ConversionStop>
 8002764:	2800      	cmp	r0, #0
 8002766:	d003      	beq.n	8002770 <HAL_ADC_Stop+0x20>
 8002768:	2334      	movs	r3, #52	@ 0x34
 800276a:	2200      	movs	r2, #0
 800276c:	54e2      	strb	r2, [r4, r3]
 800276e:	bd70      	pop	{r4, r5, r6, pc}
 8002770:	0020      	movs	r0, r4
 8002772:	f7ff fe4d 	bl	8002410 <ADC_Disable>
 8002776:	2800      	cmp	r0, #0
 8002778:	d1f6      	bne.n	8002768 <HAL_ADC_Stop+0x18>
 800277a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800277c:	4a03      	ldr	r2, [pc, #12]	@ (800278c <HAL_ADC_Stop+0x3c>)
 800277e:	4013      	ands	r3, r2
 8002780:	432b      	orrs	r3, r5
 8002782:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002784:	e7f0      	b.n	8002768 <HAL_ADC_Stop+0x18>
 8002786:	2002      	movs	r0, #2
 8002788:	e7f1      	b.n	800276e <HAL_ADC_Stop+0x1e>
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	fffffefe 	.word	0xfffffefe

08002790 <HAL_ADC_GetValue>:
 8002790:	6803      	ldr	r3, [r0, #0]
 8002792:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8002794:	4770      	bx	lr
 8002796:	46c0      	nop			@ (mov r8, r8)

08002798 <HAL_ADC_ConfigChannel>:
 8002798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279a:	46c6      	mov	lr, r8
 800279c:	2300      	movs	r3, #0
 800279e:	2234      	movs	r2, #52	@ 0x34
 80027a0:	b500      	push	{lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	5c83      	ldrb	r3, [r0, r2]
 80027a8:	0004      	movs	r4, r0
 80027aa:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d050      	beq.n	8002852 <HAL_ADC_ConfigChannel+0xba>
 80027b0:	2301      	movs	r3, #1
 80027b2:	5483      	strb	r3, [r0, r2]
 80027b4:	6802      	ldr	r2, [r0, #0]
 80027b6:	6890      	ldr	r0, [r2, #8]
 80027b8:	0740      	lsls	r0, r0, #29
 80027ba:	d50b      	bpl.n	80027d4 <HAL_ADC_ConfigChannel+0x3c>
 80027bc:	2220      	movs	r2, #32
 80027be:	2001      	movs	r0, #1
 80027c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80027c2:	4313      	orrs	r3, r2
 80027c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80027c6:	2334      	movs	r3, #52	@ 0x34
 80027c8:	2200      	movs	r2, #0
 80027ca:	54e2      	strb	r2, [r4, r3]
 80027cc:	b002      	add	sp, #8
 80027ce:	bc80      	pop	{r7}
 80027d0:	46b8      	mov	r8, r7
 80027d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027d4:	6808      	ldr	r0, [r1, #0]
 80027d6:	4f2b      	ldr	r7, [pc, #172]	@ (8002884 <HAL_ADC_ConfigChannel+0xec>)
 80027d8:	0006      	movs	r6, r0
 80027da:	46b8      	mov	r8, r7
 80027dc:	684f      	ldr	r7, [r1, #4]
 80027de:	4083      	lsls	r3, r0
 80027e0:	3e10      	subs	r6, #16
 80027e2:	4547      	cmp	r7, r8
 80027e4:	d024      	beq.n	8002830 <HAL_ADC_ConfigChannel+0x98>
 80027e6:	6a97      	ldr	r7, [r2, #40]	@ 0x28
 80027e8:	433b      	orrs	r3, r7
 80027ea:	6293      	str	r3, [r2, #40]	@ 0x28
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	055b      	lsls	r3, r3, #21
 80027f0:	429d      	cmp	r5, r3
 80027f2:	d00f      	beq.n	8002814 <HAL_ADC_ConfigChannel+0x7c>
 80027f4:	3d01      	subs	r5, #1
 80027f6:	2d06      	cmp	r5, #6
 80027f8:	d90c      	bls.n	8002814 <HAL_ADC_ConfigChannel+0x7c>
 80027fa:	2307      	movs	r3, #7
 80027fc:	688d      	ldr	r5, [r1, #8]
 80027fe:	6951      	ldr	r1, [r2, #20]
 8002800:	4019      	ands	r1, r3
 8002802:	428d      	cmp	r5, r1
 8002804:	d006      	beq.n	8002814 <HAL_ADC_ConfigChannel+0x7c>
 8002806:	6951      	ldr	r1, [r2, #20]
 8002808:	4399      	bics	r1, r3
 800280a:	6151      	str	r1, [r2, #20]
 800280c:	6951      	ldr	r1, [r2, #20]
 800280e:	402b      	ands	r3, r5
 8002810:	430b      	orrs	r3, r1
 8002812:	6153      	str	r3, [r2, #20]
 8002814:	2e01      	cmp	r6, #1
 8002816:	d901      	bls.n	800281c <HAL_ADC_ConfigChannel+0x84>
 8002818:	2000      	movs	r0, #0
 800281a:	e7d4      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x2e>
 800281c:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_ADC_ConfigChannel+0xf0>)
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	6819      	ldr	r1, [r3, #0]
 8002822:	2810      	cmp	r0, #16
 8002824:	d017      	beq.n	8002856 <HAL_ADC_ConfigChannel+0xbe>
 8002826:	03d2      	lsls	r2, r2, #15
 8002828:	430a      	orrs	r2, r1
 800282a:	2000      	movs	r0, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e7ca      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x2e>
 8002830:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002832:	4399      	bics	r1, r3
 8002834:	6291      	str	r1, [r2, #40]	@ 0x28
 8002836:	2e01      	cmp	r6, #1
 8002838:	d8ee      	bhi.n	8002818 <HAL_ADC_ConfigChannel+0x80>
 800283a:	1e71      	subs	r1, r6, #1
 800283c:	418e      	sbcs	r6, r1
 800283e:	4913      	ldr	r1, [pc, #76]	@ (800288c <HAL_ADC_ConfigChannel+0xf4>)
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_ADC_ConfigChannel+0xf0>)
 8002842:	468c      	mov	ip, r1
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	05b6      	lsls	r6, r6, #22
 8002848:	4466      	add	r6, ip
 800284a:	4016      	ands	r6, r2
 800284c:	2000      	movs	r0, #0
 800284e:	601e      	str	r6, [r3, #0]
 8002850:	e7b9      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x2e>
 8002852:	2002      	movs	r0, #2
 8002854:	e7ba      	b.n	80027cc <HAL_ADC_ConfigChannel+0x34>
 8002856:	0412      	lsls	r2, r2, #16
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <HAL_ADC_ConfigChannel+0xf8>)
 800285e:	490d      	ldr	r1, [pc, #52]	@ (8002894 <HAL_ADC_ConfigChannel+0xfc>)
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	f7fd fc63 	bl	800012c <__udivsi3>
 8002866:	0083      	lsls	r3, r0, #2
 8002868:	181b      	adds	r3, r3, r0
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	9b01      	ldr	r3, [sp, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0d1      	beq.n	8002818 <HAL_ADC_ConfigChannel+0x80>
 8002874:	9b01      	ldr	r3, [sp, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	9b01      	ldr	r3, [sp, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f9      	bne.n	8002874 <HAL_ADC_ConfigChannel+0xdc>
 8002880:	2000      	movs	r0, #0
 8002882:	e7a0      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x2e>
 8002884:	00001001 	.word	0x00001001
 8002888:	40012708 	.word	0x40012708
 800288c:	ff7fffff 	.word	0xff7fffff
 8002890:	20000014 	.word	0x20000014
 8002894:	000f4240 	.word	0x000f4240

08002898 <HAL_NVIC_SetPriority>:
 8002898:	22ff      	movs	r2, #255	@ 0xff
 800289a:	2303      	movs	r3, #3
 800289c:	b510      	push	{r4, lr}
 800289e:	0014      	movs	r4, r2
 80028a0:	4003      	ands	r3, r0
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	409c      	lsls	r4, r3
 80028a6:	0189      	lsls	r1, r1, #6
 80028a8:	400a      	ands	r2, r1
 80028aa:	43e4      	mvns	r4, r4
 80028ac:	409a      	lsls	r2, r3
 80028ae:	2800      	cmp	r0, #0
 80028b0:	db0b      	blt.n	80028ca <HAL_NVIC_SetPriority+0x32>
 80028b2:	4b0c      	ldr	r3, [pc, #48]	@ (80028e4 <HAL_NVIC_SetPriority+0x4c>)
 80028b4:	21c0      	movs	r1, #192	@ 0xc0
 80028b6:	469c      	mov	ip, r3
 80028b8:	0880      	lsrs	r0, r0, #2
 80028ba:	0080      	lsls	r0, r0, #2
 80028bc:	4460      	add	r0, ip
 80028be:	0089      	lsls	r1, r1, #2
 80028c0:	5843      	ldr	r3, [r0, r1]
 80028c2:	4023      	ands	r3, r4
 80028c4:	4313      	orrs	r3, r2
 80028c6:	5043      	str	r3, [r0, r1]
 80028c8:	bd10      	pop	{r4, pc}
 80028ca:	230f      	movs	r3, #15
 80028cc:	4906      	ldr	r1, [pc, #24]	@ (80028e8 <HAL_NVIC_SetPriority+0x50>)
 80028ce:	4003      	ands	r3, r0
 80028d0:	468c      	mov	ip, r1
 80028d2:	3b08      	subs	r3, #8
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4463      	add	r3, ip
 80028da:	69d9      	ldr	r1, [r3, #28]
 80028dc:	400c      	ands	r4, r1
 80028de:	4314      	orrs	r4, r2
 80028e0:	61dc      	str	r4, [r3, #28]
 80028e2:	e7f1      	b.n	80028c8 <HAL_NVIC_SetPriority+0x30>
 80028e4:	e000e100 	.word	0xe000e100
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <HAL_NVIC_EnableIRQ>:
 80028ec:	2800      	cmp	r0, #0
 80028ee:	db05      	blt.n	80028fc <HAL_NVIC_EnableIRQ+0x10>
 80028f0:	221f      	movs	r2, #31
 80028f2:	2301      	movs	r3, #1
 80028f4:	4002      	ands	r2, r0
 80028f6:	4093      	lsls	r3, r2
 80028f8:	4a01      	ldr	r2, [pc, #4]	@ (8002900 <HAL_NVIC_EnableIRQ+0x14>)
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	4770      	bx	lr
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	e000e100 	.word	0xe000e100

08002904 <HAL_SYSTICK_Config>:
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	1e43      	subs	r3, r0, #1
 8002908:	0452      	lsls	r2, r2, #17
 800290a:	2001      	movs	r0, #1
 800290c:	4293      	cmp	r3, r2
 800290e:	d20e      	bcs.n	800292e <HAL_SYSTICK_Config+0x2a>
 8002910:	21c0      	movs	r1, #192	@ 0xc0
 8002912:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <HAL_SYSTICK_Config+0x2c>)
 8002914:	4807      	ldr	r0, [pc, #28]	@ (8002934 <HAL_SYSTICK_Config+0x30>)
 8002916:	6053      	str	r3, [r2, #4]
 8002918:	6a03      	ldr	r3, [r0, #32]
 800291a:	0609      	lsls	r1, r1, #24
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	430b      	orrs	r3, r1
 8002922:	6203      	str	r3, [r0, #32]
 8002924:	2300      	movs	r3, #0
 8002926:	2000      	movs	r0, #0
 8002928:	6093      	str	r3, [r2, #8]
 800292a:	3307      	adds	r3, #7
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	4770      	bx	lr
 8002930:	e000e010 	.word	0xe000e010
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <HAL_GPIO_Init>:
 8002938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293a:	46de      	mov	lr, fp
 800293c:	4657      	mov	r7, sl
 800293e:	464e      	mov	r6, r9
 8002940:	4645      	mov	r5, r8
 8002942:	b5e0      	push	{r5, r6, r7, lr}
 8002944:	680c      	ldr	r4, [r1, #0]
 8002946:	2300      	movs	r3, #0
 8002948:	b087      	sub	sp, #28
 800294a:	2c00      	cmp	r4, #0
 800294c:	d072      	beq.n	8002a34 <HAL_GPIO_Init+0xfc>
 800294e:	4a75      	ldr	r2, [pc, #468]	@ (8002b24 <HAL_GPIO_Init+0x1ec>)
 8002950:	4e75      	ldr	r6, [pc, #468]	@ (8002b28 <HAL_GPIO_Init+0x1f0>)
 8002952:	4693      	mov	fp, r2
 8002954:	9102      	str	r1, [sp, #8]
 8002956:	2201      	movs	r2, #1
 8002958:	409a      	lsls	r2, r3
 800295a:	4694      	mov	ip, r2
 800295c:	4022      	ands	r2, r4
 800295e:	9200      	str	r2, [sp, #0]
 8002960:	4662      	mov	r2, ip
 8002962:	4214      	tst	r4, r2
 8002964:	d062      	beq.n	8002a2c <HAL_GPIO_Init+0xf4>
 8002966:	9902      	ldr	r1, [sp, #8]
 8002968:	005d      	lsls	r5, r3, #1
 800296a:	684a      	ldr	r2, [r1, #4]
 800296c:	4692      	mov	sl, r2
 800296e:	2203      	movs	r2, #3
 8002970:	4651      	mov	r1, sl
 8002972:	400a      	ands	r2, r1
 8002974:	2103      	movs	r1, #3
 8002976:	40a9      	lsls	r1, r5
 8002978:	43c9      	mvns	r1, r1
 800297a:	1e57      	subs	r7, r2, #1
 800297c:	9101      	str	r1, [sp, #4]
 800297e:	2f01      	cmp	r7, #1
 8002980:	d95f      	bls.n	8002a42 <HAL_GPIO_Init+0x10a>
 8002982:	2a03      	cmp	r2, #3
 8002984:	d000      	beq.n	8002988 <HAL_GPIO_Init+0x50>
 8002986:	e0b3      	b.n	8002af0 <HAL_GPIO_Init+0x1b8>
 8002988:	40aa      	lsls	r2, r5
 800298a:	6807      	ldr	r7, [r0, #0]
 800298c:	9901      	ldr	r1, [sp, #4]
 800298e:	4039      	ands	r1, r7
 8002990:	430a      	orrs	r2, r1
 8002992:	21c0      	movs	r1, #192	@ 0xc0
 8002994:	6002      	str	r2, [r0, #0]
 8002996:	4652      	mov	r2, sl
 8002998:	0289      	lsls	r1, r1, #10
 800299a:	420a      	tst	r2, r1
 800299c:	d046      	beq.n	8002a2c <HAL_GPIO_Init+0xf4>
 800299e:	465a      	mov	r2, fp
 80029a0:	2101      	movs	r1, #1
 80029a2:	465d      	mov	r5, fp
 80029a4:	6992      	ldr	r2, [r2, #24]
 80029a6:	270f      	movs	r7, #15
 80029a8:	430a      	orrs	r2, r1
 80029aa:	61aa      	str	r2, [r5, #24]
 80029ac:	69aa      	ldr	r2, [r5, #24]
 80029ae:	2503      	movs	r5, #3
 80029b0:	400a      	ands	r2, r1
 80029b2:	495e      	ldr	r1, [pc, #376]	@ (8002b2c <HAL_GPIO_Init+0x1f4>)
 80029b4:	401d      	ands	r5, r3
 80029b6:	468c      	mov	ip, r1
 80029b8:	00ad      	lsls	r5, r5, #2
 80029ba:	40af      	lsls	r7, r5
 80029bc:	9205      	str	r2, [sp, #20]
 80029be:	9a05      	ldr	r2, [sp, #20]
 80029c0:	089a      	lsrs	r2, r3, #2
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4462      	add	r2, ip
 80029c6:	6891      	ldr	r1, [r2, #8]
 80029c8:	43b9      	bics	r1, r7
 80029ca:	2790      	movs	r7, #144	@ 0x90
 80029cc:	05ff      	lsls	r7, r7, #23
 80029ce:	42b8      	cmp	r0, r7
 80029d0:	d00e      	beq.n	80029f0 <HAL_GPIO_Init+0xb8>
 80029d2:	4f57      	ldr	r7, [pc, #348]	@ (8002b30 <HAL_GPIO_Init+0x1f8>)
 80029d4:	42b8      	cmp	r0, r7
 80029d6:	d100      	bne.n	80029da <HAL_GPIO_Init+0xa2>
 80029d8:	e09b      	b.n	8002b12 <HAL_GPIO_Init+0x1da>
 80029da:	4f56      	ldr	r7, [pc, #344]	@ (8002b34 <HAL_GPIO_Init+0x1fc>)
 80029dc:	42b8      	cmp	r0, r7
 80029de:	d100      	bne.n	80029e2 <HAL_GPIO_Init+0xaa>
 80029e0:	e09b      	b.n	8002b1a <HAL_GPIO_Init+0x1e2>
 80029e2:	4f55      	ldr	r7, [pc, #340]	@ (8002b38 <HAL_GPIO_Init+0x200>)
 80029e4:	42b8      	cmp	r0, r7
 80029e6:	d100      	bne.n	80029ea <HAL_GPIO_Init+0xb2>
 80029e8:	e08f      	b.n	8002b0a <HAL_GPIO_Init+0x1d2>
 80029ea:	2705      	movs	r7, #5
 80029ec:	40af      	lsls	r7, r5
 80029ee:	4339      	orrs	r1, r7
 80029f0:	2780      	movs	r7, #128	@ 0x80
 80029f2:	4655      	mov	r5, sl
 80029f4:	6091      	str	r1, [r2, #8]
 80029f6:	9900      	ldr	r1, [sp, #0]
 80029f8:	037f      	lsls	r7, r7, #13
 80029fa:	43c9      	mvns	r1, r1
 80029fc:	68b2      	ldr	r2, [r6, #8]
 80029fe:	423d      	tst	r5, r7
 8002a00:	d000      	beq.n	8002a04 <HAL_GPIO_Init+0xcc>
 8002a02:	e072      	b.n	8002aea <HAL_GPIO_Init+0x1b2>
 8002a04:	400a      	ands	r2, r1
 8002a06:	4655      	mov	r5, sl
 8002a08:	60b2      	str	r2, [r6, #8]
 8002a0a:	68f2      	ldr	r2, [r6, #12]
 8002a0c:	02ad      	lsls	r5, r5, #10
 8002a0e:	d469      	bmi.n	8002ae4 <HAL_GPIO_Init+0x1ac>
 8002a10:	400a      	ands	r2, r1
 8002a12:	4655      	mov	r5, sl
 8002a14:	60f2      	str	r2, [r6, #12]
 8002a16:	6872      	ldr	r2, [r6, #4]
 8002a18:	03ad      	lsls	r5, r5, #14
 8002a1a:	d460      	bmi.n	8002ade <HAL_GPIO_Init+0x1a6>
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	4655      	mov	r5, sl
 8002a20:	6072      	str	r2, [r6, #4]
 8002a22:	6832      	ldr	r2, [r6, #0]
 8002a24:	03ed      	lsls	r5, r5, #15
 8002a26:	d455      	bmi.n	8002ad4 <HAL_GPIO_Init+0x19c>
 8002a28:	400a      	ands	r2, r1
 8002a2a:	6032      	str	r2, [r6, #0]
 8002a2c:	0022      	movs	r2, r4
 8002a2e:	3301      	adds	r3, #1
 8002a30:	40da      	lsrs	r2, r3
 8002a32:	d190      	bne.n	8002956 <HAL_GPIO_Init+0x1e>
 8002a34:	b007      	add	sp, #28
 8002a36:	bcf0      	pop	{r4, r5, r6, r7}
 8002a38:	46bb      	mov	fp, r7
 8002a3a:	46b2      	mov	sl, r6
 8002a3c:	46a9      	mov	r9, r5
 8002a3e:	46a0      	mov	r8, r4
 8002a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a42:	6881      	ldr	r1, [r0, #8]
 8002a44:	000f      	movs	r7, r1
 8002a46:	9901      	ldr	r1, [sp, #4]
 8002a48:	400f      	ands	r7, r1
 8002a4a:	46b9      	mov	r9, r7
 8002a4c:	9f02      	ldr	r7, [sp, #8]
 8002a4e:	68f9      	ldr	r1, [r7, #12]
 8002a50:	000f      	movs	r7, r1
 8002a52:	40af      	lsls	r7, r5
 8002a54:	46b8      	mov	r8, r7
 8002a56:	464f      	mov	r7, r9
 8002a58:	4641      	mov	r1, r8
 8002a5a:	430f      	orrs	r7, r1
 8002a5c:	6087      	str	r7, [r0, #8]
 8002a5e:	6841      	ldr	r1, [r0, #4]
 8002a60:	000f      	movs	r7, r1
 8002a62:	4661      	mov	r1, ip
 8002a64:	438f      	bics	r7, r1
 8002a66:	4651      	mov	r1, sl
 8002a68:	0909      	lsrs	r1, r1, #4
 8002a6a:	46b8      	mov	r8, r7
 8002a6c:	000f      	movs	r7, r1
 8002a6e:	2101      	movs	r1, #1
 8002a70:	400f      	ands	r7, r1
 8002a72:	409f      	lsls	r7, r3
 8002a74:	46bc      	mov	ip, r7
 8002a76:	4647      	mov	r7, r8
 8002a78:	4661      	mov	r1, ip
 8002a7a:	430f      	orrs	r7, r1
 8002a7c:	6047      	str	r7, [r0, #4]
 8002a7e:	68c1      	ldr	r1, [r0, #12]
 8002a80:	000f      	movs	r7, r1
 8002a82:	9901      	ldr	r1, [sp, #4]
 8002a84:	400f      	ands	r7, r1
 8002a86:	9902      	ldr	r1, [sp, #8]
 8002a88:	46b8      	mov	r8, r7
 8002a8a:	6889      	ldr	r1, [r1, #8]
 8002a8c:	000f      	movs	r7, r1
 8002a8e:	40af      	lsls	r7, r5
 8002a90:	46bc      	mov	ip, r7
 8002a92:	4647      	mov	r7, r8
 8002a94:	4661      	mov	r1, ip
 8002a96:	430f      	orrs	r7, r1
 8002a98:	60c7      	str	r7, [r0, #12]
 8002a9a:	2a02      	cmp	r2, #2
 8002a9c:	d000      	beq.n	8002aa0 <HAL_GPIO_Init+0x168>
 8002a9e:	e773      	b.n	8002988 <HAL_GPIO_Init+0x50>
 8002aa0:	08d9      	lsrs	r1, r3, #3
 8002aa2:	0089      	lsls	r1, r1, #2
 8002aa4:	468c      	mov	ip, r1
 8002aa6:	4484      	add	ip, r0
 8002aa8:	4661      	mov	r1, ip
 8002aaa:	6a0f      	ldr	r7, [r1, #32]
 8002aac:	2107      	movs	r1, #7
 8002aae:	4019      	ands	r1, r3
 8002ab0:	0089      	lsls	r1, r1, #2
 8002ab2:	4688      	mov	r8, r1
 8002ab4:	9703      	str	r7, [sp, #12]
 8002ab6:	210f      	movs	r1, #15
 8002ab8:	4647      	mov	r7, r8
 8002aba:	40b9      	lsls	r1, r7
 8002abc:	9f03      	ldr	r7, [sp, #12]
 8002abe:	438f      	bics	r7, r1
 8002ac0:	9703      	str	r7, [sp, #12]
 8002ac2:	4647      	mov	r7, r8
 8002ac4:	9902      	ldr	r1, [sp, #8]
 8002ac6:	6909      	ldr	r1, [r1, #16]
 8002ac8:	40b9      	lsls	r1, r7
 8002aca:	9f03      	ldr	r7, [sp, #12]
 8002acc:	430f      	orrs	r7, r1
 8002ace:	4661      	mov	r1, ip
 8002ad0:	620f      	str	r7, [r1, #32]
 8002ad2:	e759      	b.n	8002988 <HAL_GPIO_Init+0x50>
 8002ad4:	9900      	ldr	r1, [sp, #0]
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	000a      	movs	r2, r1
 8002ada:	6032      	str	r2, [r6, #0]
 8002adc:	e7a6      	b.n	8002a2c <HAL_GPIO_Init+0xf4>
 8002ade:	9d00      	ldr	r5, [sp, #0]
 8002ae0:	432a      	orrs	r2, r5
 8002ae2:	e79c      	b.n	8002a1e <HAL_GPIO_Init+0xe6>
 8002ae4:	9d00      	ldr	r5, [sp, #0]
 8002ae6:	432a      	orrs	r2, r5
 8002ae8:	e793      	b.n	8002a12 <HAL_GPIO_Init+0xda>
 8002aea:	9d00      	ldr	r5, [sp, #0]
 8002aec:	432a      	orrs	r2, r5
 8002aee:	e78a      	b.n	8002a06 <HAL_GPIO_Init+0xce>
 8002af0:	000f      	movs	r7, r1
 8002af2:	68c1      	ldr	r1, [r0, #12]
 8002af4:	4039      	ands	r1, r7
 8002af6:	4688      	mov	r8, r1
 8002af8:	9902      	ldr	r1, [sp, #8]
 8002afa:	6889      	ldr	r1, [r1, #8]
 8002afc:	40a9      	lsls	r1, r5
 8002afe:	468c      	mov	ip, r1
 8002b00:	4641      	mov	r1, r8
 8002b02:	4667      	mov	r7, ip
 8002b04:	4339      	orrs	r1, r7
 8002b06:	60c1      	str	r1, [r0, #12]
 8002b08:	e73e      	b.n	8002988 <HAL_GPIO_Init+0x50>
 8002b0a:	2703      	movs	r7, #3
 8002b0c:	40af      	lsls	r7, r5
 8002b0e:	4339      	orrs	r1, r7
 8002b10:	e76e      	b.n	80029f0 <HAL_GPIO_Init+0xb8>
 8002b12:	2701      	movs	r7, #1
 8002b14:	40af      	lsls	r7, r5
 8002b16:	4339      	orrs	r1, r7
 8002b18:	e76a      	b.n	80029f0 <HAL_GPIO_Init+0xb8>
 8002b1a:	2702      	movs	r7, #2
 8002b1c:	40af      	lsls	r7, r5
 8002b1e:	4339      	orrs	r1, r7
 8002b20:	e766      	b.n	80029f0 <HAL_GPIO_Init+0xb8>
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40010400 	.word	0x40010400
 8002b2c:	40010000 	.word	0x40010000
 8002b30:	48000400 	.word	0x48000400
 8002b34:	48000800 	.word	0x48000800
 8002b38:	48000c00 	.word	0x48000c00

08002b3c <HAL_GPIO_ReadPin>:
 8002b3c:	6900      	ldr	r0, [r0, #16]
 8002b3e:	4008      	ands	r0, r1
 8002b40:	1e43      	subs	r3, r0, #1
 8002b42:	4198      	sbcs	r0, r3
 8002b44:	b2c0      	uxtb	r0, r0
 8002b46:	4770      	bx	lr

08002b48 <HAL_GPIO_WritePin>:
 8002b48:	2a00      	cmp	r2, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_GPIO_WritePin+0x8>
 8002b4c:	6181      	str	r1, [r0, #24]
 8002b4e:	4770      	bx	lr
 8002b50:	6281      	str	r1, [r0, #40]	@ 0x28
 8002b52:	e7fc      	b.n	8002b4e <HAL_GPIO_WritePin+0x6>

08002b54 <HAL_GPIO_TogglePin>:
 8002b54:	6942      	ldr	r2, [r0, #20]
 8002b56:	0013      	movs	r3, r2
 8002b58:	400b      	ands	r3, r1
 8002b5a:	041b      	lsls	r3, r3, #16
 8002b5c:	4391      	bics	r1, r2
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	6183      	str	r3, [r0, #24]
 8002b62:	4770      	bx	lr

08002b64 <HAL_GPIO_EXTI_IRQHandler>:
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002b66:	b510      	push	{r4, lr}
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	4210      	tst	r0, r2
 8002b6c:	d100      	bne.n	8002b70 <HAL_GPIO_EXTI_IRQHandler+0xc>
 8002b6e:	bd10      	pop	{r4, pc}
 8002b70:	6158      	str	r0, [r3, #20]
 8002b72:	f7fe fb55 	bl	8001220 <HAL_GPIO_EXTI_Callback>
 8002b76:	e7fa      	b.n	8002b6e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002b78:	40010400 	.word	0x40010400

08002b7c <I2C_WaitOnFlagUntilTimeout.constprop.0>:
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	4657      	mov	r7, sl
 8002b80:	4645      	mov	r5, r8
 8002b82:	46de      	mov	lr, fp
 8002b84:	464e      	mov	r6, r9
 8002b86:	b5e0      	push	{r5, r6, r7, lr}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	9101      	str	r1, [sp, #4]
 8002b8c:	2110      	movs	r1, #16
 8002b8e:	6803      	ldr	r3, [r0, #0]
 8002b90:	4688      	mov	r8, r1
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	3132      	adds	r1, #50	@ 0x32
 8002b96:	0004      	movs	r4, r0
 8002b98:	468a      	mov	sl, r1
 8002b9a:	0412      	lsls	r2, r2, #16
 8002b9c:	d400      	bmi.n	8002ba0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x24>
 8002b9e:	e096      	b.n	8002cce <I2C_WaitOnFlagUntilTimeout.constprop.0+0x152>
 8002ba0:	4642      	mov	r2, r8
 8002ba2:	4640      	mov	r0, r8
 8002ba4:	6999      	ldr	r1, [r3, #24]
 8002ba6:	2500      	movs	r5, #0
 8002ba8:	400a      	ands	r2, r1
 8002baa:	4208      	tst	r0, r1
 8002bac:	d041      	beq.n	8002c32 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xb6>
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4693      	mov	fp, r2
 8002bb2:	2280      	movs	r2, #128	@ 0x80
 8002bb4:	0212      	lsls	r2, r2, #8
 8002bb6:	2700      	movs	r7, #0
 8002bb8:	4691      	mov	r9, r2
 8002bba:	9e01      	ldr	r6, [sp, #4]
 8002bbc:	61d8      	str	r0, [r3, #28]
 8002bbe:	3520      	adds	r5, #32
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	4215      	tst	r5, r2
 8002bc4:	d12d      	bne.n	8002c22 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xa6>
 8002bc6:	2f00      	cmp	r7, #0
 8002bc8:	d12e      	bne.n	8002c28 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xac>
 8002bca:	f7ff fc09 	bl	80023e0 <HAL_GetTick>
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	1b80      	subs	r0, r0, r6
 8002bd2:	2819      	cmp	r0, #25
 8002bd4:	d9f4      	bls.n	8002bc0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x44>
 8002bd6:	4652      	mov	r2, sl
 8002bd8:	6858      	ldr	r0, [r3, #4]
 8002bda:	5ca2      	ldrb	r2, [r4, r2]
 8002bdc:	6999      	ldr	r1, [r3, #24]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	4694      	mov	ip, r2
 8002be2:	464a      	mov	r2, r9
 8002be4:	4211      	tst	r1, r2
 8002be6:	d00d      	beq.n	8002c04 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
 8002be8:	2180      	movs	r1, #128	@ 0x80
 8002bea:	01c9      	lsls	r1, r1, #7
 8002bec:	4208      	tst	r0, r1
 8002bee:	d109      	bne.n	8002c04 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
 8002bf0:	4662      	mov	r2, ip
 8002bf2:	2a20      	cmp	r2, #32
 8002bf4:	d006      	beq.n	8002c04 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	4311      	orrs	r1, r2
 8002bfa:	6059      	str	r1, [r3, #4]
 8002bfc:	f7ff fbf0 	bl	80023e0 <HAL_GetTick>
 8002c00:	0006      	movs	r6, r0
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	699a      	ldr	r2, [r3, #24]
 8002c06:	4215      	tst	r5, r2
 8002c08:	d1da      	bne.n	8002bc0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x44>
 8002c0a:	f7ff fbe9 	bl	80023e0 <HAL_GetTick>
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	1b80      	subs	r0, r0, r6
 8002c12:	2819      	cmp	r0, #25
 8002c14:	d9f6      	bls.n	8002c04 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x88>
 8002c16:	2220      	movs	r2, #32
 8002c18:	4693      	mov	fp, r2
 8002c1a:	699a      	ldr	r2, [r3, #24]
 8002c1c:	2701      	movs	r7, #1
 8002c1e:	4215      	tst	r5, r2
 8002c20:	d0d1      	beq.n	8002bc6 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x4a>
 8002c22:	2f00      	cmp	r7, #0
 8002c24:	d100      	bne.n	8002c28 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xac>
 8002c26:	61dd      	str	r5, [r3, #28]
 8002c28:	2204      	movs	r2, #4
 8002c2a:	4659      	mov	r1, fp
 8002c2c:	4311      	orrs	r1, r2
 8002c2e:	000a      	movs	r2, r1
 8002c30:	2501      	movs	r5, #1
 8002c32:	2080      	movs	r0, #128	@ 0x80
 8002c34:	6999      	ldr	r1, [r3, #24]
 8002c36:	0040      	lsls	r0, r0, #1
 8002c38:	4201      	tst	r1, r0
 8002c3a:	d034      	beq.n	8002ca6 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x12a>
 8002c3c:	2501      	movs	r5, #1
 8002c3e:	61d8      	str	r0, [r3, #28]
 8002c40:	432a      	orrs	r2, r5
 8002c42:	0548      	lsls	r0, r1, #21
 8002c44:	d504      	bpl.n	8002c50 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd4>
 8002c46:	2008      	movs	r0, #8
 8002c48:	4302      	orrs	r2, r0
 8002c4a:	2080      	movs	r0, #128	@ 0x80
 8002c4c:	00c0      	lsls	r0, r0, #3
 8002c4e:	61d8      	str	r0, [r3, #28]
 8002c50:	0589      	lsls	r1, r1, #22
 8002c52:	d504      	bpl.n	8002c5e <I2C_WaitOnFlagUntilTimeout.constprop.0+0xe2>
 8002c54:	2102      	movs	r1, #2
 8002c56:	430a      	orrs	r2, r1
 8002c58:	31ff      	adds	r1, #255	@ 0xff
 8002c5a:	31ff      	adds	r1, #255	@ 0xff
 8002c5c:	61d9      	str	r1, [r3, #28]
 8002c5e:	6999      	ldr	r1, [r3, #24]
 8002c60:	0789      	lsls	r1, r1, #30
 8002c62:	d501      	bpl.n	8002c68 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xec>
 8002c64:	2100      	movs	r1, #0
 8002c66:	6299      	str	r1, [r3, #40]	@ 0x28
 8002c68:	2101      	movs	r1, #1
 8002c6a:	6998      	ldr	r0, [r3, #24]
 8002c6c:	4201      	tst	r1, r0
 8002c6e:	d102      	bne.n	8002c76 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xfa>
 8002c70:	6998      	ldr	r0, [r3, #24]
 8002c72:	4301      	orrs	r1, r0
 8002c74:	6199      	str	r1, [r3, #24]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	481a      	ldr	r0, [pc, #104]	@ (8002ce4 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x168>)
 8002c7a:	4001      	ands	r1, r0
 8002c7c:	6059      	str	r1, [r3, #4]
 8002c7e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002c80:	4313      	orrs	r3, r2
 8002c82:	6463      	str	r3, [r4, #68]	@ 0x44
 8002c84:	2220      	movs	r2, #32
 8002c86:	2341      	movs	r3, #65	@ 0x41
 8002c88:	54e2      	strb	r2, [r4, r3]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	54e2      	strb	r2, [r4, r3]
 8002c90:	2340      	movs	r3, #64	@ 0x40
 8002c92:	2200      	movs	r2, #0
 8002c94:	2001      	movs	r0, #1
 8002c96:	54e2      	strb	r2, [r4, r3]
 8002c98:	b003      	add	sp, #12
 8002c9a:	bcf0      	pop	{r4, r5, r6, r7}
 8002c9c:	46bb      	mov	fp, r7
 8002c9e:	46b2      	mov	sl, r6
 8002ca0:	46a9      	mov	r9, r5
 8002ca2:	46a0      	mov	r8, r4
 8002ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca6:	0548      	lsls	r0, r1, #21
 8002ca8:	d4cd      	bmi.n	8002c46 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xca>
 8002caa:	0589      	lsls	r1, r1, #22
 8002cac:	d4d2      	bmi.n	8002c54 <I2C_WaitOnFlagUntilTimeout.constprop.0+0xd8>
 8002cae:	2d00      	cmp	r5, #0
 8002cb0:	d1d5      	bne.n	8002c5e <I2C_WaitOnFlagUntilTimeout.constprop.0+0xe2>
 8002cb2:	f7ff fb95 	bl	80023e0 <HAL_GetTick>
 8002cb6:	9b01      	ldr	r3, [sp, #4]
 8002cb8:	1ac0      	subs	r0, r0, r3
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	2819      	cmp	r0, #25
 8002cbe:	d902      	bls.n	8002cc6 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x14a>
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	0412      	lsls	r2, r2, #16
 8002cc4:	d405      	bmi.n	8002cd2 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x156>
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	0412      	lsls	r2, r2, #16
 8002cca:	d500      	bpl.n	8002cce <I2C_WaitOnFlagUntilTimeout.constprop.0+0x152>
 8002ccc:	e768      	b.n	8002ba0 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x24>
 8002cce:	2000      	movs	r0, #0
 8002cd0:	e7e2      	b.n	8002c98 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x11c>
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	6463      	str	r3, [r4, #68]	@ 0x44
 8002cda:	2341      	movs	r3, #65	@ 0x41
 8002cdc:	54e2      	strb	r2, [r4, r3]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	54e5      	strb	r5, [r4, r3]
 8002ce2:	e7d5      	b.n	8002c90 <I2C_WaitOnFlagUntilTimeout.constprop.0+0x114>
 8002ce4:	fe00e800 	.word	0xfe00e800

08002ce8 <I2C_WaitOnTXISFlagUntilTimeout>:
 8002ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cea:	4657      	mov	r7, sl
 8002cec:	464e      	mov	r6, r9
 8002cee:	46de      	mov	lr, fp
 8002cf0:	4645      	mov	r5, r8
 8002cf2:	2410      	movs	r4, #16
 8002cf4:	b5e0      	push	{r5, r6, r7, lr}
 8002cf6:	0006      	movs	r6, r0
 8002cf8:	000f      	movs	r7, r1
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	6803      	ldr	r3, [r0, #0]
 8002cfe:	9201      	str	r2, [sp, #4]
 8002d00:	2502      	movs	r5, #2
 8002d02:	46b3      	mov	fp, r6
 8002d04:	002a      	movs	r2, r5
 8002d06:	6999      	ldr	r1, [r3, #24]
 8002d08:	400a      	ands	r2, r1
 8002d0a:	420d      	tst	r5, r1
 8002d0c:	d000      	beq.n	8002d10 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 8002d0e:	e072      	b.n	8002df6 <I2C_WaitOnTXISFlagUntilTimeout+0x10e>
 8002d10:	0021      	movs	r1, r4
 8002d12:	6998      	ldr	r0, [r3, #24]
 8002d14:	2600      	movs	r6, #0
 8002d16:	4001      	ands	r1, r0
 8002d18:	4204      	tst	r4, r0
 8002d1a:	d00b      	beq.n	8002d34 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
 8002d1c:	61dc      	str	r4, [r3, #28]
 8002d1e:	1c79      	adds	r1, r7, #1
 8002d20:	d16d      	bne.n	8002dfe <I2C_WaitOnTXISFlagUntilTimeout+0x116>
 8002d22:	2020      	movs	r0, #32
 8002d24:	6999      	ldr	r1, [r3, #24]
 8002d26:	4208      	tst	r0, r1
 8002d28:	d0fc      	beq.n	8002d24 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 8002d2a:	2120      	movs	r1, #32
 8002d2c:	61d9      	str	r1, [r3, #28]
 8002d2e:	2104      	movs	r1, #4
 8002d30:	2601      	movs	r6, #1
 8002d32:	4311      	orrs	r1, r2
 8002d34:	2080      	movs	r0, #128	@ 0x80
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	0040      	lsls	r0, r0, #1
 8002d3a:	4202      	tst	r2, r0
 8002d3c:	d035      	beq.n	8002daa <I2C_WaitOnTXISFlagUntilTimeout+0xc2>
 8002d3e:	2401      	movs	r4, #1
 8002d40:	465e      	mov	r6, fp
 8002d42:	4321      	orrs	r1, r4
 8002d44:	61d8      	str	r0, [r3, #28]
 8002d46:	0550      	lsls	r0, r2, #21
 8002d48:	d504      	bpl.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
 8002d4a:	2008      	movs	r0, #8
 8002d4c:	4301      	orrs	r1, r0
 8002d4e:	2080      	movs	r0, #128	@ 0x80
 8002d50:	00c0      	lsls	r0, r0, #3
 8002d52:	61d8      	str	r0, [r3, #28]
 8002d54:	0592      	lsls	r2, r2, #22
 8002d56:	d504      	bpl.n	8002d62 <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
 8002d58:	2202      	movs	r2, #2
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	32ff      	adds	r2, #255	@ 0xff
 8002d5e:	32ff      	adds	r2, #255	@ 0xff
 8002d60:	61da      	str	r2, [r3, #28]
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	0792      	lsls	r2, r2, #30
 8002d66:	d501      	bpl.n	8002d6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
 8002d68:	2200      	movs	r2, #0
 8002d6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	6998      	ldr	r0, [r3, #24]
 8002d70:	4202      	tst	r2, r0
 8002d72:	d102      	bne.n	8002d7a <I2C_WaitOnTXISFlagUntilTimeout+0x92>
 8002d74:	6998      	ldr	r0, [r3, #24]
 8002d76:	4302      	orrs	r2, r0
 8002d78:	619a      	str	r2, [r3, #24]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	4851      	ldr	r0, [pc, #324]	@ (8002ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x1dc>)
 8002d7e:	4002      	ands	r2, r0
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8002d84:	2220      	movs	r2, #32
 8002d86:	430b      	orrs	r3, r1
 8002d88:	6473      	str	r3, [r6, #68]	@ 0x44
 8002d8a:	2341      	movs	r3, #65	@ 0x41
 8002d8c:	54f2      	strb	r2, [r6, r3]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	3301      	adds	r3, #1
 8002d92:	54f2      	strb	r2, [r6, r3]
 8002d94:	2340      	movs	r3, #64	@ 0x40
 8002d96:	2200      	movs	r2, #0
 8002d98:	2001      	movs	r0, #1
 8002d9a:	54f2      	strb	r2, [r6, r3]
 8002d9c:	b003      	add	sp, #12
 8002d9e:	bcf0      	pop	{r4, r5, r6, r7}
 8002da0:	46bb      	mov	fp, r7
 8002da2:	46b2      	mov	sl, r6
 8002da4:	46a9      	mov	r9, r5
 8002da6:	46a0      	mov	r8, r4
 8002da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002daa:	0550      	lsls	r0, r2, #21
 8002dac:	d501      	bpl.n	8002db2 <I2C_WaitOnTXISFlagUntilTimeout+0xca>
 8002dae:	465e      	mov	r6, fp
 8002db0:	e7cb      	b.n	8002d4a <I2C_WaitOnTXISFlagUntilTimeout+0x62>
 8002db2:	0592      	lsls	r2, r2, #22
 8002db4:	d501      	bpl.n	8002dba <I2C_WaitOnTXISFlagUntilTimeout+0xd2>
 8002db6:	465e      	mov	r6, fp
 8002db8:	e7ce      	b.n	8002d58 <I2C_WaitOnTXISFlagUntilTimeout+0x70>
 8002dba:	2e00      	cmp	r6, #0
 8002dbc:	d11d      	bne.n	8002dfa <I2C_WaitOnTXISFlagUntilTimeout+0x112>
 8002dbe:	1c7a      	adds	r2, r7, #1
 8002dc0:	d0a0      	beq.n	8002d04 <I2C_WaitOnTXISFlagUntilTimeout+0x1c>
 8002dc2:	f7ff fb0d 	bl	80023e0 <HAL_GetTick>
 8002dc6:	465e      	mov	r6, fp
 8002dc8:	9b01      	ldr	r3, [sp, #4]
 8002dca:	1ac0      	subs	r0, r0, r3
 8002dcc:	6833      	ldr	r3, [r6, #0]
 8002dce:	42b8      	cmp	r0, r7
 8002dd0:	d801      	bhi.n	8002dd6 <I2C_WaitOnTXISFlagUntilTimeout+0xee>
 8002dd2:	2f00      	cmp	r7, #0
 8002dd4:	d194      	bne.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	0008      	movs	r0, r1
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	4010      	ands	r0, r2
 8002dde:	4211      	tst	r1, r2
 8002de0:	d000      	beq.n	8002de4 <I2C_WaitOnTXISFlagUntilTimeout+0xfc>
 8002de2:	e78d      	b.n	8002d00 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
 8002de4:	2220      	movs	r2, #32
 8002de6:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8002de8:	4313      	orrs	r3, r2
 8002dea:	6473      	str	r3, [r6, #68]	@ 0x44
 8002dec:	2341      	movs	r3, #65	@ 0x41
 8002dee:	54f2      	strb	r2, [r6, r3]
 8002df0:	3301      	adds	r3, #1
 8002df2:	54f0      	strb	r0, [r6, r3]
 8002df4:	e7ce      	b.n	8002d94 <I2C_WaitOnTXISFlagUntilTimeout+0xac>
 8002df6:	2000      	movs	r0, #0
 8002df8:	e7d0      	b.n	8002d9c <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
 8002dfa:	465e      	mov	r6, fp
 8002dfc:	e7b1      	b.n	8002d62 <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
 8002dfe:	9901      	ldr	r1, [sp, #4]
 8002e00:	9200      	str	r2, [sp, #0]
 8002e02:	4688      	mov	r8, r1
 8002e04:	2100      	movs	r1, #0
 8002e06:	003a      	movs	r2, r7
 8002e08:	4689      	mov	r9, r1
 8002e0a:	3142      	adds	r1, #66	@ 0x42
 8002e0c:	465f      	mov	r7, fp
 8002e0e:	2620      	movs	r6, #32
 8002e10:	468a      	mov	sl, r1
 8002e12:	4693      	mov	fp, r2
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	4216      	tst	r6, r2
 8002e18:	d10f      	bne.n	8002e3a <I2C_WaitOnTXISFlagUntilTimeout+0x152>
 8002e1a:	464a      	mov	r2, r9
 8002e1c:	2a00      	cmp	r2, #0
 8002e1e:	d14b      	bne.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x1d0>
 8002e20:	f7ff fade 	bl	80023e0 <HAL_GetTick>
 8002e24:	4643      	mov	r3, r8
 8002e26:	1ac0      	subs	r0, r0, r3
 8002e28:	4583      	cmp	fp, r0
 8002e2a:	d30f      	bcc.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x164>
 8002e2c:	465b      	mov	r3, fp
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x164>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	4216      	tst	r6, r2
 8002e38:	d0ef      	beq.n	8002e1a <I2C_WaitOnTXISFlagUntilTimeout+0x132>
 8002e3a:	4659      	mov	r1, fp
 8002e3c:	46bb      	mov	fp, r7
 8002e3e:	000f      	movs	r7, r1
 8002e40:	4649      	mov	r1, r9
 8002e42:	9a00      	ldr	r2, [sp, #0]
 8002e44:	2900      	cmp	r1, #0
 8002e46:	d100      	bne.n	8002e4a <I2C_WaitOnTXISFlagUntilTimeout+0x162>
 8002e48:	e76f      	b.n	8002d2a <I2C_WaitOnTXISFlagUntilTimeout+0x42>
 8002e4a:	e770      	b.n	8002d2e <I2C_WaitOnTXISFlagUntilTimeout+0x46>
 8002e4c:	4652      	mov	r2, sl
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6858      	ldr	r0, [r3, #4]
 8002e52:	5cba      	ldrb	r2, [r7, r2]
 8002e54:	6999      	ldr	r1, [r3, #24]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	4694      	mov	ip, r2
 8002e5a:	2280      	movs	r2, #128	@ 0x80
 8002e5c:	0212      	lsls	r2, r2, #8
 8002e5e:	4211      	tst	r1, r2
 8002e60:	d01e      	beq.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
 8002e62:	2180      	movs	r1, #128	@ 0x80
 8002e64:	01c9      	lsls	r1, r1, #7
 8002e66:	4208      	tst	r0, r1
 8002e68:	d11a      	bne.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
 8002e6a:	4662      	mov	r2, ip
 8002e6c:	2a20      	cmp	r2, #32
 8002e6e:	d017      	beq.n	8002ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x1b8>
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4311      	orrs	r1, r2
 8002e74:	6059      	str	r1, [r3, #4]
 8002e76:	f7ff fab3 	bl	80023e0 <HAL_GetTick>
 8002e7a:	003a      	movs	r2, r7
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	4690      	mov	r8, r2
 8002e80:	0007      	movs	r7, r0
 8002e82:	e006      	b.n	8002e92 <I2C_WaitOnTXISFlagUntilTimeout+0x1aa>
 8002e84:	f7ff faac 	bl	80023e0 <HAL_GetTick>
 8002e88:	4643      	mov	r3, r8
 8002e8a:	1bc0      	subs	r0, r0, r7
 8002e8c:	2819      	cmp	r0, #25
 8002e8e:	d80b      	bhi.n	8002ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x1c0>
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	4216      	tst	r6, r2
 8002e96:	d0f5      	beq.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x19c>
 8002e98:	4642      	mov	r2, r8
 8002e9a:	46b8      	mov	r8, r7
 8002e9c:	0017      	movs	r7, r2
 8002e9e:	e7b9      	b.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x12c>
 8002ea0:	003a      	movs	r2, r7
 8002ea2:	4647      	mov	r7, r8
 8002ea4:	4690      	mov	r8, r2
 8002ea6:	e7f4      	b.n	8002e92 <I2C_WaitOnTXISFlagUntilTimeout+0x1aa>
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	9200      	str	r2, [sp, #0]
 8002eac:	3a1f      	subs	r2, #31
 8002eae:	46b8      	mov	r8, r7
 8002eb0:	4691      	mov	r9, r2
 8002eb2:	001f      	movs	r7, r3
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	e7ad      	b.n	8002e14 <I2C_WaitOnTXISFlagUntilTimeout+0x12c>
 8002eb8:	4659      	mov	r1, fp
 8002eba:	9a00      	ldr	r2, [sp, #0]
 8002ebc:	46bb      	mov	fp, r7
 8002ebe:	000f      	movs	r7, r1
 8002ec0:	e735      	b.n	8002d2e <I2C_WaitOnTXISFlagUntilTimeout+0x46>
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	fe00e800 	.word	0xfe00e800

08002ec8 <I2C_WaitOnFlagUntilTimeout>:
 8002ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eca:	4657      	mov	r7, sl
 8002ecc:	46de      	mov	lr, fp
 8002ece:	4645      	mov	r5, r8
 8002ed0:	464e      	mov	r6, r9
 8002ed2:	2410      	movs	r4, #16
 8002ed4:	b5e0      	push	{r5, r6, r7, lr}
 8002ed6:	4692      	mov	sl, r2
 8002ed8:	0007      	movs	r7, r0
 8002eda:	000d      	movs	r5, r1
 8002edc:	469b      	mov	fp, r3
 8002ede:	6803      	ldr	r3, [r0, #0]
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	4651      	mov	r1, sl
 8002ee6:	4691      	mov	r9, r2
 8002ee8:	46ba      	mov	sl, r7
 8002eea:	465f      	mov	r7, fp
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	402a      	ands	r2, r5
 8002ef0:	1b52      	subs	r2, r2, r5
 8002ef2:	4250      	negs	r0, r2
 8002ef4:	4142      	adcs	r2, r0
 8002ef6:	428a      	cmp	r2, r1
 8002ef8:	d000      	beq.n	8002efc <I2C_WaitOnFlagUntilTimeout+0x34>
 8002efa:	e080      	b.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0x136>
 8002efc:	0022      	movs	r2, r4
 8002efe:	6998      	ldr	r0, [r3, #24]
 8002f00:	4002      	ands	r2, r0
 8002f02:	4694      	mov	ip, r2
 8002f04:	2200      	movs	r2, #0
 8002f06:	4204      	tst	r4, r0
 8002f08:	d00e      	beq.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0x60>
 8002f0a:	61dc      	str	r4, [r3, #28]
 8002f0c:	1c7a      	adds	r2, r7, #1
 8002f0e:	d000      	beq.n	8002f12 <I2C_WaitOnFlagUntilTimeout+0x4a>
 8002f10:	e07c      	b.n	800300c <I2C_WaitOnFlagUntilTimeout+0x144>
 8002f12:	2020      	movs	r0, #32
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	4210      	tst	r0, r2
 8002f18:	d0fc      	beq.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0x4c>
 8002f1a:	2600      	movs	r6, #0
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	61da      	str	r2, [r3, #28]
 8002f20:	464a      	mov	r2, r9
 8002f22:	4332      	orrs	r2, r6
 8002f24:	4694      	mov	ip, r2
 8002f26:	2201      	movs	r2, #1
 8002f28:	2080      	movs	r0, #128	@ 0x80
 8002f2a:	699e      	ldr	r6, [r3, #24]
 8002f2c:	0040      	lsls	r0, r0, #1
 8002f2e:	4206      	tst	r6, r0
 8002f30:	d037      	beq.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0xda>
 8002f32:	4662      	mov	r2, ip
 8002f34:	2401      	movs	r4, #1
 8002f36:	0031      	movs	r1, r6
 8002f38:	4657      	mov	r7, sl
 8002f3a:	4322      	orrs	r2, r4
 8002f3c:	61d8      	str	r0, [r3, #28]
 8002f3e:	0570      	lsls	r0, r6, #21
 8002f40:	d504      	bpl.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f42:	2008      	movs	r0, #8
 8002f44:	4302      	orrs	r2, r0
 8002f46:	2080      	movs	r0, #128	@ 0x80
 8002f48:	00c0      	lsls	r0, r0, #3
 8002f4a:	61d8      	str	r0, [r3, #28]
 8002f4c:	0589      	lsls	r1, r1, #22
 8002f4e:	d504      	bpl.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x92>
 8002f50:	2102      	movs	r1, #2
 8002f52:	430a      	orrs	r2, r1
 8002f54:	31ff      	adds	r1, #255	@ 0xff
 8002f56:	31ff      	adds	r1, #255	@ 0xff
 8002f58:	61d9      	str	r1, [r3, #28]
 8002f5a:	6999      	ldr	r1, [r3, #24]
 8002f5c:	0789      	lsls	r1, r1, #30
 8002f5e:	d501      	bpl.n	8002f64 <I2C_WaitOnFlagUntilTimeout+0x9c>
 8002f60:	2100      	movs	r1, #0
 8002f62:	6299      	str	r1, [r3, #40]	@ 0x28
 8002f64:	2101      	movs	r1, #1
 8002f66:	6998      	ldr	r0, [r3, #24]
 8002f68:	4201      	tst	r1, r0
 8002f6a:	d102      	bne.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0xaa>
 8002f6c:	6998      	ldr	r0, [r3, #24]
 8002f6e:	4301      	orrs	r1, r0
 8002f70:	6199      	str	r1, [r3, #24]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	484f      	ldr	r0, [pc, #316]	@ (80030b4 <I2C_WaitOnFlagUntilTimeout+0x1ec>)
 8002f76:	4001      	ands	r1, r0
 8002f78:	6059      	str	r1, [r3, #4]
 8002f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f80:	2220      	movs	r2, #32
 8002f82:	2341      	movs	r3, #65	@ 0x41
 8002f84:	54fa      	strb	r2, [r7, r3]
 8002f86:	2200      	movs	r2, #0
 8002f88:	3301      	adds	r3, #1
 8002f8a:	54fa      	strb	r2, [r7, r3]
 8002f8c:	2340      	movs	r3, #64	@ 0x40
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2001      	movs	r0, #1
 8002f92:	54fa      	strb	r2, [r7, r3]
 8002f94:	b003      	add	sp, #12
 8002f96:	bcf0      	pop	{r4, r5, r6, r7}
 8002f98:	46bb      	mov	fp, r7
 8002f9a:	46b2      	mov	sl, r6
 8002f9c:	46a9      	mov	r9, r5
 8002f9e:	46a0      	mov	r8, r4
 8002fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa2:	0570      	lsls	r0, r6, #21
 8002fa4:	d503      	bpl.n	8002fae <I2C_WaitOnFlagUntilTimeout+0xe6>
 8002fa6:	4662      	mov	r2, ip
 8002fa8:	0031      	movs	r1, r6
 8002faa:	4657      	mov	r7, sl
 8002fac:	e7c9      	b.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x7a>
 8002fae:	05b6      	lsls	r6, r6, #22
 8002fb0:	d502      	bpl.n	8002fb8 <I2C_WaitOnFlagUntilTimeout+0xf0>
 8002fb2:	4662      	mov	r2, ip
 8002fb4:	4657      	mov	r7, sl
 8002fb6:	e7cb      	b.n	8002f50 <I2C_WaitOnFlagUntilTimeout+0x88>
 8002fb8:	2a00      	cmp	r2, #0
 8002fba:	d124      	bne.n	8003006 <I2C_WaitOnFlagUntilTimeout+0x13e>
 8002fbc:	1c7a      	adds	r2, r7, #1
 8002fbe:	d095      	beq.n	8002eec <I2C_WaitOnFlagUntilTimeout+0x24>
 8002fc0:	46bb      	mov	fp, r7
 8002fc2:	4657      	mov	r7, sl
 8002fc4:	468a      	mov	sl, r1
 8002fc6:	f7ff fa0b 	bl	80023e0 <HAL_GetTick>
 8002fca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002fcc:	1ac0      	subs	r0, r0, r3
 8002fce:	4558      	cmp	r0, fp
 8002fd0:	d802      	bhi.n	8002fd8 <I2C_WaitOnFlagUntilTimeout+0x110>
 8002fd2:	465b      	mov	r3, fp
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d114      	bne.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x13a>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	402a      	ands	r2, r5
 8002fde:	1b52      	subs	r2, r2, r5
 8002fe0:	4251      	negs	r1, r2
 8002fe2:	414a      	adcs	r2, r1
 8002fe4:	4552      	cmp	r2, sl
 8002fe6:	d000      	beq.n	8002fea <I2C_WaitOnFlagUntilTimeout+0x122>
 8002fe8:	e77b      	b.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8002fea:	2220      	movs	r2, #32
 8002fec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ff2:	2341      	movs	r3, #65	@ 0x41
 8002ff4:	54fa      	strb	r2, [r7, r3]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	54fa      	strb	r2, [r7, r3]
 8002ffc:	e7c6      	b.n	8002f8c <I2C_WaitOnFlagUntilTimeout+0xc4>
 8002ffe:	2000      	movs	r0, #0
 8003000:	e7c8      	b.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0xcc>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	e76d      	b.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8003006:	4662      	mov	r2, ip
 8003008:	4657      	mov	r7, sl
 800300a:	e7a6      	b.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x92>
 800300c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800300e:	2600      	movs	r6, #0
 8003010:	4693      	mov	fp, r2
 8003012:	2200      	movs	r2, #0
 8003014:	9200      	str	r2, [sp, #0]
 8003016:	3220      	adds	r2, #32
 8003018:	4690      	mov	r8, r2
 800301a:	002a      	movs	r2, r5
 800301c:	4655      	mov	r5, sl
 800301e:	46b2      	mov	sl, r6
 8003020:	465e      	mov	r6, fp
 8003022:	4693      	mov	fp, r2
 8003024:	9101      	str	r1, [sp, #4]
 8003026:	4641      	mov	r1, r8
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	4211      	tst	r1, r2
 800302c:	d134      	bne.n	8003098 <I2C_WaitOnFlagUntilTimeout+0x1d0>
 800302e:	9a00      	ldr	r2, [sp, #0]
 8003030:	2a00      	cmp	r2, #0
 8003032:	d13a      	bne.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x1e2>
 8003034:	f7ff f9d4 	bl	80023e0 <HAL_GetTick>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	1b80      	subs	r0, r0, r6
 800303c:	4287      	cmp	r7, r0
 800303e:	d301      	bcc.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x17c>
 8003040:	2f00      	cmp	r7, #0
 8003042:	d1f0      	bne.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x15e>
 8003044:	2242      	movs	r2, #66	@ 0x42
 8003046:	6858      	ldr	r0, [r3, #4]
 8003048:	5caa      	ldrb	r2, [r5, r2]
 800304a:	6999      	ldr	r1, [r3, #24]
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	4694      	mov	ip, r2
 8003050:	2280      	movs	r2, #128	@ 0x80
 8003052:	0212      	lsls	r2, r2, #8
 8003054:	4211      	tst	r1, r2
 8003056:	d00d      	beq.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x1ac>
 8003058:	2180      	movs	r1, #128	@ 0x80
 800305a:	01c9      	lsls	r1, r1, #7
 800305c:	4208      	tst	r0, r1
 800305e:	d109      	bne.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x1ac>
 8003060:	4662      	mov	r2, ip
 8003062:	2a20      	cmp	r2, #32
 8003064:	d006      	beq.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x1ac>
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4311      	orrs	r1, r2
 800306a:	6059      	str	r1, [r3, #4]
 800306c:	f7ff f9b8 	bl	80023e0 <HAL_GetTick>
 8003070:	0006      	movs	r6, r0
 8003072:	682b      	ldr	r3, [r5, #0]
 8003074:	4641      	mov	r1, r8
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	4211      	tst	r1, r2
 800307a:	d1d4      	bne.n	8003026 <I2C_WaitOnFlagUntilTimeout+0x15e>
 800307c:	f7ff f9b0 	bl	80023e0 <HAL_GetTick>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	1b80      	subs	r0, r0, r6
 8003084:	2819      	cmp	r0, #25
 8003086:	d9f5      	bls.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x1ac>
 8003088:	2220      	movs	r2, #32
 800308a:	4641      	mov	r1, r8
 800308c:	4692      	mov	sl, r2
 800308e:	3a1f      	subs	r2, #31
 8003090:	9200      	str	r2, [sp, #0]
 8003092:	699a      	ldr	r2, [r3, #24]
 8003094:	4211      	tst	r1, r2
 8003096:	d0ca      	beq.n	800302e <I2C_WaitOnFlagUntilTimeout+0x166>
 8003098:	9a00      	ldr	r2, [sp, #0]
 800309a:	4656      	mov	r6, sl
 800309c:	9901      	ldr	r1, [sp, #4]
 800309e:	46aa      	mov	sl, r5
 80030a0:	465d      	mov	r5, fp
 80030a2:	2a00      	cmp	r2, #0
 80030a4:	d100      	bne.n	80030a8 <I2C_WaitOnFlagUntilTimeout+0x1e0>
 80030a6:	e739      	b.n	8002f1c <I2C_WaitOnFlagUntilTimeout+0x54>
 80030a8:	e73a      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x58>
 80030aa:	4656      	mov	r6, sl
 80030ac:	9901      	ldr	r1, [sp, #4]
 80030ae:	46aa      	mov	sl, r5
 80030b0:	465d      	mov	r5, fp
 80030b2:	e735      	b.n	8002f20 <I2C_WaitOnFlagUntilTimeout+0x58>
 80030b4:	fe00e800 	.word	0xfe00e800

080030b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
 80030b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ba:	46de      	mov	lr, fp
 80030bc:	4657      	mov	r7, sl
 80030be:	464e      	mov	r6, r9
 80030c0:	4645      	mov	r5, r8
 80030c2:	b5e0      	push	{r5, r6, r7, lr}
 80030c4:	000d      	movs	r5, r1
 80030c6:	2104      	movs	r1, #4
 80030c8:	6803      	ldr	r3, [r0, #0]
 80030ca:	4692      	mov	sl, r2
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	0004      	movs	r4, r0
 80030d0:	2610      	movs	r6, #16
 80030d2:	468b      	mov	fp, r1
 80030d4:	b083      	sub	sp, #12
 80030d6:	0692      	lsls	r2, r2, #26
 80030d8:	d464      	bmi.n	80031a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xec>
 80030da:	0032      	movs	r2, r6
 80030dc:	6999      	ldr	r1, [r3, #24]
 80030de:	2700      	movs	r7, #0
 80030e0:	400a      	ands	r2, r1
 80030e2:	420e      	tst	r6, r1
 80030e4:	d00c      	beq.n	8003100 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 80030e6:	61de      	str	r6, [r3, #28]
 80030e8:	1c6a      	adds	r2, r5, #1
 80030ea:	d165      	bne.n	80031b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x100>
 80030ec:	2120      	movs	r1, #32
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	4211      	tst	r1, r2
 80030f2:	d0fc      	beq.n	80030ee <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
 80030f4:	2200      	movs	r2, #0
 80030f6:	2120      	movs	r1, #32
 80030f8:	61d9      	str	r1, [r3, #28]
 80030fa:	4659      	mov	r1, fp
 80030fc:	2701      	movs	r7, #1
 80030fe:	430a      	orrs	r2, r1
 8003100:	2080      	movs	r0, #128	@ 0x80
 8003102:	6999      	ldr	r1, [r3, #24]
 8003104:	0040      	lsls	r0, r0, #1
 8003106:	4201      	tst	r1, r0
 8003108:	d034      	beq.n	8003174 <I2C_WaitOnSTOPFlagUntilTimeout+0xbc>
 800310a:	2501      	movs	r5, #1
 800310c:	61d8      	str	r0, [r3, #28]
 800310e:	432a      	orrs	r2, r5
 8003110:	0548      	lsls	r0, r1, #21
 8003112:	d504      	bpl.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
 8003114:	2008      	movs	r0, #8
 8003116:	4302      	orrs	r2, r0
 8003118:	2080      	movs	r0, #128	@ 0x80
 800311a:	00c0      	lsls	r0, r0, #3
 800311c:	61d8      	str	r0, [r3, #28]
 800311e:	0589      	lsls	r1, r1, #22
 8003120:	d504      	bpl.n	800312c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
 8003122:	2102      	movs	r1, #2
 8003124:	430a      	orrs	r2, r1
 8003126:	31ff      	adds	r1, #255	@ 0xff
 8003128:	31ff      	adds	r1, #255	@ 0xff
 800312a:	61d9      	str	r1, [r3, #28]
 800312c:	6999      	ldr	r1, [r3, #24]
 800312e:	0789      	lsls	r1, r1, #30
 8003130:	d501      	bpl.n	8003136 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8003132:	2100      	movs	r1, #0
 8003134:	6299      	str	r1, [r3, #40]	@ 0x28
 8003136:	2101      	movs	r1, #1
 8003138:	6998      	ldr	r0, [r3, #24]
 800313a:	4201      	tst	r1, r0
 800313c:	d102      	bne.n	8003144 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
 800313e:	6998      	ldr	r0, [r3, #24]
 8003140:	4301      	orrs	r1, r0
 8003142:	6199      	str	r1, [r3, #24]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	4844      	ldr	r0, [pc, #272]	@ (8003258 <I2C_WaitOnSTOPFlagUntilTimeout+0x1a0>)
 8003148:	4001      	ands	r1, r0
 800314a:	6059      	str	r1, [r3, #4]
 800314c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800314e:	4313      	orrs	r3, r2
 8003150:	6463      	str	r3, [r4, #68]	@ 0x44
 8003152:	2220      	movs	r2, #32
 8003154:	2341      	movs	r3, #65	@ 0x41
 8003156:	54e2      	strb	r2, [r4, r3]
 8003158:	2200      	movs	r2, #0
 800315a:	3301      	adds	r3, #1
 800315c:	54e2      	strb	r2, [r4, r3]
 800315e:	2340      	movs	r3, #64	@ 0x40
 8003160:	2200      	movs	r2, #0
 8003162:	2001      	movs	r0, #1
 8003164:	54e2      	strb	r2, [r4, r3]
 8003166:	b003      	add	sp, #12
 8003168:	bcf0      	pop	{r4, r5, r6, r7}
 800316a:	46bb      	mov	fp, r7
 800316c:	46b2      	mov	sl, r6
 800316e:	46a9      	mov	r9, r5
 8003170:	46a0      	mov	r8, r4
 8003172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003174:	0548      	lsls	r0, r1, #21
 8003176:	d4cd      	bmi.n	8003114 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
 8003178:	0589      	lsls	r1, r1, #22
 800317a:	d4d2      	bmi.n	8003122 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
 800317c:	2f00      	cmp	r7, #0
 800317e:	d1d5      	bne.n	800312c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
 8003180:	f7ff f92e 	bl	80023e0 <HAL_GetTick>
 8003184:	4653      	mov	r3, sl
 8003186:	1ac0      	subs	r0, r0, r3
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	42a8      	cmp	r0, r5
 800318c:	d801      	bhi.n	8003192 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
 800318e:	2d00      	cmp	r5, #0
 8003190:	d105      	bne.n	800319e <I2C_WaitOnSTOPFlagUntilTimeout+0xe6>
 8003192:	2220      	movs	r2, #32
 8003194:	0010      	movs	r0, r2
 8003196:	6999      	ldr	r1, [r3, #24]
 8003198:	4008      	ands	r0, r1
 800319a:	420a      	tst	r2, r1
 800319c:	d004      	beq.n	80031a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	0692      	lsls	r2, r2, #26
 80031a2:	d59a      	bpl.n	80030da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 80031a4:	2000      	movs	r0, #0
 80031a6:	e7de      	b.n	8003166 <I2C_WaitOnSTOPFlagUntilTimeout+0xae>
 80031a8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80031aa:	4313      	orrs	r3, r2
 80031ac:	6463      	str	r3, [r4, #68]	@ 0x44
 80031ae:	2341      	movs	r3, #65	@ 0x41
 80031b0:	54e2      	strb	r2, [r4, r3]
 80031b2:	3301      	adds	r3, #1
 80031b4:	54e0      	strb	r0, [r4, r3]
 80031b6:	e7d2      	b.n	800315e <I2C_WaitOnSTOPFlagUntilTimeout+0xa6>
 80031b8:	0028      	movs	r0, r5
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	4655      	mov	r5, sl
 80031c0:	4689      	mov	r9, r1
 80031c2:	2720      	movs	r7, #32
 80031c4:	4692      	mov	sl, r2
 80031c6:	4680      	mov	r8, r0
 80031c8:	9501      	str	r5, [sp, #4]
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	4217      	tst	r7, r2
 80031ce:	d10e      	bne.n	80031ee <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
 80031d0:	464a      	mov	r2, r9
 80031d2:	2a00      	cmp	r2, #0
 80031d4:	d13b      	bne.n	800324e <I2C_WaitOnSTOPFlagUntilTimeout+0x196>
 80031d6:	f7ff f903 	bl	80023e0 <HAL_GetTick>
 80031da:	1b40      	subs	r0, r0, r5
 80031dc:	4580      	cmp	r8, r0
 80031de:	d30f      	bcc.n	8003200 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
 80031e0:	4643      	mov	r3, r8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	4217      	tst	r7, r2
 80031ec:	d0f0      	beq.n	80031d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x118>
 80031ee:	9901      	ldr	r1, [sp, #4]
 80031f0:	4652      	mov	r2, sl
 80031f2:	468a      	mov	sl, r1
 80031f4:	4649      	mov	r1, r9
 80031f6:	4645      	mov	r5, r8
 80031f8:	2900      	cmp	r1, #0
 80031fa:	d100      	bne.n	80031fe <I2C_WaitOnSTOPFlagUntilTimeout+0x146>
 80031fc:	e77b      	b.n	80030f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
 80031fe:	e77c      	b.n	80030fa <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8003200:	2242      	movs	r2, #66	@ 0x42
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	6858      	ldr	r0, [r3, #4]
 8003206:	5ca2      	ldrb	r2, [r4, r2]
 8003208:	6999      	ldr	r1, [r3, #24]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	4694      	mov	ip, r2
 800320e:	2280      	movs	r2, #128	@ 0x80
 8003210:	0212      	lsls	r2, r2, #8
 8003212:	4211      	tst	r1, r2
 8003214:	d00d      	beq.n	8003232 <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
 8003216:	2180      	movs	r1, #128	@ 0x80
 8003218:	01c9      	lsls	r1, r1, #7
 800321a:	4208      	tst	r0, r1
 800321c:	d109      	bne.n	8003232 <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
 800321e:	4662      	mov	r2, ip
 8003220:	2a20      	cmp	r2, #32
 8003222:	d006      	beq.n	8003232 <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4311      	orrs	r1, r2
 8003228:	6059      	str	r1, [r3, #4]
 800322a:	f7ff f8d9 	bl	80023e0 <HAL_GetTick>
 800322e:	0005      	movs	r5, r0
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	699a      	ldr	r2, [r3, #24]
 8003234:	4217      	tst	r7, r2
 8003236:	d1c8      	bne.n	80031ca <I2C_WaitOnSTOPFlagUntilTimeout+0x112>
 8003238:	f7ff f8d2 	bl	80023e0 <HAL_GetTick>
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	1b40      	subs	r0, r0, r5
 8003240:	2819      	cmp	r0, #25
 8003242:	d9f6      	bls.n	8003232 <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
 8003244:	2220      	movs	r2, #32
 8003246:	4692      	mov	sl, r2
 8003248:	3a1f      	subs	r2, #31
 800324a:	4691      	mov	r9, r2
 800324c:	e7bd      	b.n	80031ca <I2C_WaitOnSTOPFlagUntilTimeout+0x112>
 800324e:	9901      	ldr	r1, [sp, #4]
 8003250:	4652      	mov	r2, sl
 8003252:	4645      	mov	r5, r8
 8003254:	468a      	mov	sl, r1
 8003256:	e750      	b.n	80030fa <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8003258:	fe00e800 	.word	0xfe00e800

0800325c <HAL_I2C_Init>:
 800325c:	b510      	push	{r4, lr}
 800325e:	1e04      	subs	r4, r0, #0
 8003260:	d052      	beq.n	8003308 <HAL_I2C_Init+0xac>
 8003262:	2341      	movs	r3, #65	@ 0x41
 8003264:	5cc3      	ldrb	r3, [r0, r3]
 8003266:	b2da      	uxtb	r2, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	d048      	beq.n	80032fe <HAL_I2C_Init+0xa2>
 800326c:	2341      	movs	r3, #65	@ 0x41
 800326e:	2224      	movs	r2, #36	@ 0x24
 8003270:	2101      	movs	r1, #1
 8003272:	54e2      	strb	r2, [r4, r3]
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	68a0      	ldr	r0, [r4, #8]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	438a      	bics	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	4923      	ldr	r1, [pc, #140]	@ (800330c <HAL_I2C_Init+0xb0>)
 8003280:	6862      	ldr	r2, [r4, #4]
 8003282:	400a      	ands	r2, r1
 8003284:	611a      	str	r2, [r3, #16]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	4921      	ldr	r1, [pc, #132]	@ (8003310 <HAL_I2C_Init+0xb4>)
 800328a:	400a      	ands	r2, r1
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	68e2      	ldr	r2, [r4, #12]
 8003290:	2a01      	cmp	r2, #1
 8003292:	d00b      	beq.n	80032ac <HAL_I2C_Init+0x50>
 8003294:	2184      	movs	r1, #132	@ 0x84
 8003296:	0209      	lsls	r1, r1, #8
 8003298:	4301      	orrs	r1, r0
 800329a:	6099      	str	r1, [r3, #8]
 800329c:	2a02      	cmp	r2, #2
 800329e:	d109      	bne.n	80032b4 <HAL_I2C_Init+0x58>
 80032a0:	2280      	movs	r2, #128	@ 0x80
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	e007      	b.n	80032bc <HAL_I2C_Init+0x60>
 80032ac:	2280      	movs	r2, #128	@ 0x80
 80032ae:	0212      	lsls	r2, r2, #8
 80032b0:	4302      	orrs	r2, r0
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4917      	ldr	r1, [pc, #92]	@ (8003314 <HAL_I2C_Init+0xb8>)
 80032b8:	400a      	ands	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	4a16      	ldr	r2, [pc, #88]	@ (8003318 <HAL_I2C_Init+0xbc>)
 80032c0:	2000      	movs	r0, #0
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	4911      	ldr	r1, [pc, #68]	@ (8003310 <HAL_I2C_Init+0xb4>)
 80032ca:	400a      	ands	r2, r1
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	6961      	ldr	r1, [r4, #20]
 80032d0:	6922      	ldr	r2, [r4, #16]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	69a1      	ldr	r1, [r4, #24]
 80032d6:	0209      	lsls	r1, r1, #8
 80032d8:	430a      	orrs	r2, r1
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	6a21      	ldr	r1, [r4, #32]
 80032de:	69e2      	ldr	r2, [r4, #28]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	2101      	movs	r1, #1
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	2241      	movs	r2, #65	@ 0x41
 80032f0:	311f      	adds	r1, #31
 80032f2:	6463      	str	r3, [r4, #68]	@ 0x44
 80032f4:	54a1      	strb	r1, [r4, r2]
 80032f6:	3201      	adds	r2, #1
 80032f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80032fa:	54a3      	strb	r3, [r4, r2]
 80032fc:	bd10      	pop	{r4, pc}
 80032fe:	3340      	adds	r3, #64	@ 0x40
 8003300:	54c2      	strb	r2, [r0, r3]
 8003302:	f7fe feab 	bl	800205c <HAL_I2C_MspInit>
 8003306:	e7b1      	b.n	800326c <HAL_I2C_Init+0x10>
 8003308:	2001      	movs	r0, #1
 800330a:	e7f7      	b.n	80032fc <HAL_I2C_Init+0xa0>
 800330c:	f0ffffff 	.word	0xf0ffffff
 8003310:	ffff7fff 	.word	0xffff7fff
 8003314:	fffff7ff 	.word	0xfffff7ff
 8003318:	02008000 	.word	0x02008000

0800331c <HAL_I2C_Mem_Write>:
 800331c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800331e:	4657      	mov	r7, sl
 8003320:	464e      	mov	r6, r9
 8003322:	46de      	mov	lr, fp
 8003324:	4645      	mov	r5, r8
 8003326:	b5e0      	push	{r5, r6, r7, lr}
 8003328:	b083      	sub	sp, #12
 800332a:	001f      	movs	r7, r3
 800332c:	ab0c      	add	r3, sp, #48	@ 0x30
 800332e:	0016      	movs	r6, r2
 8003330:	cb04      	ldmia	r3!, {r2}
 8003332:	0004      	movs	r4, r0
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	000d      	movs	r5, r1
 8003338:	469b      	mov	fp, r3
 800333a:	2341      	movs	r3, #65	@ 0x41
 800333c:	4699      	mov	r9, r3
 800333e:	5cc3      	ldrb	r3, [r0, r3]
 8003340:	4692      	mov	sl, r2
 8003342:	2b20      	cmp	r3, #32
 8003344:	d11f      	bne.n	8003386 <HAL_I2C_Mem_Write+0x6a>
 8003346:	2a00      	cmp	r2, #0
 8003348:	d019      	beq.n	800337e <HAL_I2C_Mem_Write+0x62>
 800334a:	465b      	mov	r3, fp
 800334c:	2b00      	cmp	r3, #0
 800334e:	d016      	beq.n	800337e <HAL_I2C_Mem_Write+0x62>
 8003350:	2240      	movs	r2, #64	@ 0x40
 8003352:	5c83      	ldrb	r3, [r0, r2]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d016      	beq.n	8003386 <HAL_I2C_Mem_Write+0x6a>
 8003358:	2301      	movs	r3, #1
 800335a:	5483      	strb	r3, [r0, r2]
 800335c:	f7ff f840 	bl	80023e0 <HAL_GetTick>
 8003360:	4680      	mov	r8, r0
 8003362:	0001      	movs	r1, r0
 8003364:	0020      	movs	r0, r4
 8003366:	f7ff fc09 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 800336a:	2800      	cmp	r0, #0
 800336c:	d00d      	beq.n	800338a <HAL_I2C_Mem_Write+0x6e>
 800336e:	2001      	movs	r0, #1
 8003370:	b003      	add	sp, #12
 8003372:	bcf0      	pop	{r4, r5, r6, r7}
 8003374:	46bb      	mov	fp, r7
 8003376:	46b2      	mov	sl, r6
 8003378:	46a9      	mov	r9, r5
 800337a:	46a0      	mov	r8, r4
 800337c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	6463      	str	r3, [r4, #68]	@ 0x44
 8003384:	e7f3      	b.n	800336e <HAL_I2C_Mem_Write+0x52>
 8003386:	2002      	movs	r0, #2
 8003388:	e7f2      	b.n	8003370 <HAL_I2C_Mem_Write+0x54>
 800338a:	2321      	movs	r3, #33	@ 0x21
 800338c:	464a      	mov	r2, r9
 800338e:	54a3      	strb	r3, [r4, r2]
 8003390:	2240      	movs	r2, #64	@ 0x40
 8003392:	3321      	adds	r3, #33	@ 0x21
 8003394:	54e2      	strb	r2, [r4, r3]
 8003396:	4653      	mov	r3, sl
 8003398:	6263      	str	r3, [r4, #36]	@ 0x24
 800339a:	465b      	mov	r3, fp
 800339c:	6821      	ldr	r1, [r4, #0]
 800339e:	6460      	str	r0, [r4, #68]	@ 0x44
 80033a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80033a2:	684a      	ldr	r2, [r1, #4]
 80033a4:	6360      	str	r0, [r4, #52]	@ 0x34
 80033a6:	4854      	ldr	r0, [pc, #336]	@ (80034f8 <HAL_I2C_Mem_Write+0x1dc>)
 80033a8:	b2fb      	uxtb	r3, r7
 80033aa:	4002      	ands	r2, r0
 80033ac:	05ad      	lsls	r5, r5, #22
 80033ae:	041b      	lsls	r3, r3, #16
 80033b0:	4313      	orrs	r3, r2
 80033b2:	0dad      	lsrs	r5, r5, #22
 80033b4:	4a51      	ldr	r2, [pc, #324]	@ (80034fc <HAL_I2C_Mem_Write+0x1e0>)
 80033b6:	432b      	orrs	r3, r5
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
 80033bc:	4642      	mov	r2, r8
 80033be:	0020      	movs	r0, r4
 80033c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80033c2:	f7ff fc91 	bl	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d157      	bne.n	800347a <HAL_I2C_Mem_Write+0x15e>
 80033ca:	6823      	ldr	r3, [r4, #0]
 80033cc:	2f01      	cmp	r7, #1
 80033ce:	d162      	bne.n	8003496 <HAL_I2C_Mem_Write+0x17a>
 80033d0:	b2f6      	uxtb	r6, r6
 80033d2:	629e      	str	r6, [r3, #40]	@ 0x28
 80033d4:	4643      	mov	r3, r8
 80033d6:	2200      	movs	r2, #0
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2180      	movs	r1, #128	@ 0x80
 80033dc:	0020      	movs	r0, r4
 80033de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80033e0:	f7ff fd72 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d148      	bne.n	800347a <HAL_I2C_Mem_Write+0x15e>
 80033e8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80033ea:	6822      	ldr	r2, [r4, #0]
 80033ec:	2bff      	cmp	r3, #255	@ 0xff
 80033ee:	d848      	bhi.n	8003482 <HAL_I2C_Mem_Write+0x166>
 80033f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80033f2:	4843      	ldr	r0, [pc, #268]	@ (8003500 <HAL_I2C_Mem_Write+0x1e4>)
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	6851      	ldr	r1, [r2, #4]
 80033f8:	8523      	strh	r3, [r4, #40]	@ 0x28
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	041b      	lsls	r3, r3, #16
 80033fe:	4001      	ands	r1, r0
 8003400:	432b      	orrs	r3, r5
 8003402:	430b      	orrs	r3, r1
 8003404:	2180      	movs	r1, #128	@ 0x80
 8003406:	0489      	lsls	r1, r1, #18
 8003408:	430b      	orrs	r3, r1
 800340a:	6053      	str	r3, [r2, #4]
 800340c:	e002      	b.n	8003414 <HAL_I2C_Mem_Write+0xf8>
 800340e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003410:	2b00      	cmp	r3, #0
 8003412:	d05a      	beq.n	80034ca <HAL_I2C_Mem_Write+0x1ae>
 8003414:	4642      	mov	r2, r8
 8003416:	0020      	movs	r0, r4
 8003418:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800341a:	f7ff fc65 	bl	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 800341e:	2800      	cmp	r0, #0
 8003420:	d1a5      	bne.n	800336e <HAL_I2C_Mem_Write+0x52>
 8003422:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003424:	6822      	ldr	r2, [r4, #0]
 8003426:	7819      	ldrb	r1, [r3, #0]
 8003428:	3301      	adds	r3, #1
 800342a:	6291      	str	r1, [r2, #40]	@ 0x28
 800342c:	6263      	str	r3, [r4, #36]	@ 0x24
 800342e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003430:	3b01      	subs	r3, #1
 8003432:	b29b      	uxth	r3, r3
 8003434:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003436:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003438:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800343a:	3b01      	subs	r3, #1
 800343c:	b29b      	uxth	r3, r3
 800343e:	8523      	strh	r3, [r4, #40]	@ 0x28
 8003440:	2a00      	cmp	r2, #0
 8003442:	d0e4      	beq.n	800340e <HAL_I2C_Mem_Write+0xf2>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e2      	bne.n	800340e <HAL_I2C_Mem_Write+0xf2>
 8003448:	4643      	mov	r3, r8
 800344a:	2200      	movs	r2, #0
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2180      	movs	r1, #128	@ 0x80
 8003450:	0020      	movs	r0, r4
 8003452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003454:	f7ff fd38 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8003458:	2800      	cmp	r0, #0
 800345a:	d000      	beq.n	800345e <HAL_I2C_Mem_Write+0x142>
 800345c:	e787      	b.n	800336e <HAL_I2C_Mem_Write+0x52>
 800345e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003460:	6822      	ldr	r2, [r4, #0]
 8003462:	2bff      	cmp	r3, #255	@ 0xff
 8003464:	d922      	bls.n	80034ac <HAL_I2C_Mem_Write+0x190>
 8003466:	23ff      	movs	r3, #255	@ 0xff
 8003468:	4925      	ldr	r1, [pc, #148]	@ (8003500 <HAL_I2C_Mem_Write+0x1e4>)
 800346a:	8523      	strh	r3, [r4, #40]	@ 0x28
 800346c:	6853      	ldr	r3, [r2, #4]
 800346e:	400b      	ands	r3, r1
 8003470:	4924      	ldr	r1, [pc, #144]	@ (8003504 <HAL_I2C_Mem_Write+0x1e8>)
 8003472:	432b      	orrs	r3, r5
 8003474:	430b      	orrs	r3, r1
 8003476:	6053      	str	r3, [r2, #4]
 8003478:	e7c9      	b.n	800340e <HAL_I2C_Mem_Write+0xf2>
 800347a:	2340      	movs	r3, #64	@ 0x40
 800347c:	2200      	movs	r2, #0
 800347e:	54e2      	strb	r2, [r4, r3]
 8003480:	e775      	b.n	800336e <HAL_I2C_Mem_Write+0x52>
 8003482:	23ff      	movs	r3, #255	@ 0xff
 8003484:	491e      	ldr	r1, [pc, #120]	@ (8003500 <HAL_I2C_Mem_Write+0x1e4>)
 8003486:	8523      	strh	r3, [r4, #40]	@ 0x28
 8003488:	6853      	ldr	r3, [r2, #4]
 800348a:	400b      	ands	r3, r1
 800348c:	491d      	ldr	r1, [pc, #116]	@ (8003504 <HAL_I2C_Mem_Write+0x1e8>)
 800348e:	432b      	orrs	r3, r5
 8003490:	430b      	orrs	r3, r1
 8003492:	6053      	str	r3, [r2, #4]
 8003494:	e7be      	b.n	8003414 <HAL_I2C_Mem_Write+0xf8>
 8003496:	0a32      	lsrs	r2, r6, #8
 8003498:	629a      	str	r2, [r3, #40]	@ 0x28
 800349a:	0020      	movs	r0, r4
 800349c:	4642      	mov	r2, r8
 800349e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80034a0:	f7ff fc22 	bl	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d1e8      	bne.n	800347a <HAL_I2C_Mem_Write+0x15e>
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	e791      	b.n	80033d0 <HAL_I2C_Mem_Write+0xb4>
 80034ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80034ae:	4814      	ldr	r0, [pc, #80]	@ (8003500 <HAL_I2C_Mem_Write+0x1e4>)
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	6851      	ldr	r1, [r2, #4]
 80034b4:	8523      	strh	r3, [r4, #40]	@ 0x28
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	041b      	lsls	r3, r3, #16
 80034ba:	4001      	ands	r1, r0
 80034bc:	432b      	orrs	r3, r5
 80034be:	430b      	orrs	r3, r1
 80034c0:	2180      	movs	r1, #128	@ 0x80
 80034c2:	0489      	lsls	r1, r1, #18
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6053      	str	r3, [r2, #4]
 80034c8:	e7a1      	b.n	800340e <HAL_I2C_Mem_Write+0xf2>
 80034ca:	4642      	mov	r2, r8
 80034cc:	0020      	movs	r0, r4
 80034ce:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80034d0:	f7ff fdf2 	bl	80030b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d000      	beq.n	80034da <HAL_I2C_Mem_Write+0x1be>
 80034d8:	e749      	b.n	800336e <HAL_I2C_Mem_Write+0x52>
 80034da:	2120      	movs	r1, #32
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	4d0a      	ldr	r5, [pc, #40]	@ (8003508 <HAL_I2C_Mem_Write+0x1ec>)
 80034e0:	61d9      	str	r1, [r3, #28]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	402a      	ands	r2, r5
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	2341      	movs	r3, #65	@ 0x41
 80034ea:	54e1      	strb	r1, [r4, r3]
 80034ec:	3301      	adds	r3, #1
 80034ee:	54e0      	strb	r0, [r4, r3]
 80034f0:	3b02      	subs	r3, #2
 80034f2:	54e0      	strb	r0, [r4, r3]
 80034f4:	e73c      	b.n	8003370 <HAL_I2C_Mem_Write+0x54>
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	fc009800 	.word	0xfc009800
 80034fc:	01002000 	.word	0x01002000
 8003500:	fc009c00 	.word	0xfc009c00
 8003504:	01ff0000 	.word	0x01ff0000
 8003508:	fe00e800 	.word	0xfe00e800

0800350c <HAL_I2C_Mem_Read>:
 800350c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350e:	4657      	mov	r7, sl
 8003510:	464e      	mov	r6, r9
 8003512:	46de      	mov	lr, fp
 8003514:	4645      	mov	r5, r8
 8003516:	b5e0      	push	{r5, r6, r7, lr}
 8003518:	b083      	sub	sp, #12
 800351a:	001f      	movs	r7, r3
 800351c:	ab0c      	add	r3, sp, #48	@ 0x30
 800351e:	0016      	movs	r6, r2
 8003520:	cb04      	ldmia	r3!, {r2}
 8003522:	0004      	movs	r4, r0
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	000d      	movs	r5, r1
 8003528:	469b      	mov	fp, r3
 800352a:	2341      	movs	r3, #65	@ 0x41
 800352c:	4699      	mov	r9, r3
 800352e:	5cc3      	ldrb	r3, [r0, r3]
 8003530:	4692      	mov	sl, r2
 8003532:	2b20      	cmp	r3, #32
 8003534:	d11f      	bne.n	8003576 <HAL_I2C_Mem_Read+0x6a>
 8003536:	2a00      	cmp	r2, #0
 8003538:	d019      	beq.n	800356e <HAL_I2C_Mem_Read+0x62>
 800353a:	465b      	mov	r3, fp
 800353c:	2b00      	cmp	r3, #0
 800353e:	d016      	beq.n	800356e <HAL_I2C_Mem_Read+0x62>
 8003540:	2240      	movs	r2, #64	@ 0x40
 8003542:	5c83      	ldrb	r3, [r0, r2]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d016      	beq.n	8003576 <HAL_I2C_Mem_Read+0x6a>
 8003548:	2301      	movs	r3, #1
 800354a:	5483      	strb	r3, [r0, r2]
 800354c:	f7fe ff48 	bl	80023e0 <HAL_GetTick>
 8003550:	4680      	mov	r8, r0
 8003552:	0001      	movs	r1, r0
 8003554:	0020      	movs	r0, r4
 8003556:	f7ff fb11 	bl	8002b7c <I2C_WaitOnFlagUntilTimeout.constprop.0>
 800355a:	2800      	cmp	r0, #0
 800355c:	d00d      	beq.n	800357a <HAL_I2C_Mem_Read+0x6e>
 800355e:	2001      	movs	r0, #1
 8003560:	b003      	add	sp, #12
 8003562:	bcf0      	pop	{r4, r5, r6, r7}
 8003564:	46bb      	mov	fp, r7
 8003566:	46b2      	mov	sl, r6
 8003568:	46a9      	mov	r9, r5
 800356a:	46a0      	mov	r8, r4
 800356c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800356e:	2380      	movs	r3, #128	@ 0x80
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	6463      	str	r3, [r4, #68]	@ 0x44
 8003574:	e7f3      	b.n	800355e <HAL_I2C_Mem_Read+0x52>
 8003576:	2002      	movs	r0, #2
 8003578:	e7f2      	b.n	8003560 <HAL_I2C_Mem_Read+0x54>
 800357a:	2322      	movs	r3, #34	@ 0x22
 800357c:	464a      	mov	r2, r9
 800357e:	54a3      	strb	r3, [r4, r2]
 8003580:	2240      	movs	r2, #64	@ 0x40
 8003582:	3320      	adds	r3, #32
 8003584:	54e2      	strb	r2, [r4, r3]
 8003586:	4653      	mov	r3, sl
 8003588:	6263      	str	r3, [r4, #36]	@ 0x24
 800358a:	465b      	mov	r3, fp
 800358c:	6821      	ldr	r1, [r4, #0]
 800358e:	6460      	str	r0, [r4, #68]	@ 0x44
 8003590:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003592:	684a      	ldr	r2, [r1, #4]
 8003594:	6360      	str	r0, [r4, #52]	@ 0x34
 8003596:	4856      	ldr	r0, [pc, #344]	@ (80036f0 <HAL_I2C_Mem_Read+0x1e4>)
 8003598:	b2fb      	uxtb	r3, r7
 800359a:	4002      	ands	r2, r0
 800359c:	041b      	lsls	r3, r3, #16
 800359e:	4313      	orrs	r3, r2
 80035a0:	2280      	movs	r2, #128	@ 0x80
 80035a2:	05ad      	lsls	r5, r5, #22
 80035a4:	0dad      	lsrs	r5, r5, #22
 80035a6:	0192      	lsls	r2, r2, #6
 80035a8:	432b      	orrs	r3, r5
 80035aa:	4313      	orrs	r3, r2
 80035ac:	604b      	str	r3, [r1, #4]
 80035ae:	4642      	mov	r2, r8
 80035b0:	0020      	movs	r0, r4
 80035b2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80035b4:	f7ff fb98 	bl	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 80035b8:	2800      	cmp	r0, #0
 80035ba:	d15a      	bne.n	8003672 <HAL_I2C_Mem_Read+0x166>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	2f01      	cmp	r7, #1
 80035c0:	d165      	bne.n	800368e <HAL_I2C_Mem_Read+0x182>
 80035c2:	b2f6      	uxtb	r6, r6
 80035c4:	629e      	str	r6, [r3, #40]	@ 0x28
 80035c6:	4643      	mov	r3, r8
 80035c8:	2200      	movs	r2, #0
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2140      	movs	r1, #64	@ 0x40
 80035ce:	0020      	movs	r0, r4
 80035d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80035d2:	f7ff fc79 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d14b      	bne.n	8003672 <HAL_I2C_Mem_Read+0x166>
 80035da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80035dc:	6822      	ldr	r2, [r4, #0]
 80035de:	2bff      	cmp	r3, #255	@ 0xff
 80035e0:	d84b      	bhi.n	800367a <HAL_I2C_Mem_Read+0x16e>
 80035e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80035e4:	4842      	ldr	r0, [pc, #264]	@ (80036f0 <HAL_I2C_Mem_Read+0x1e4>)
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	6851      	ldr	r1, [r2, #4]
 80035ea:	8523      	strh	r3, [r4, #40]	@ 0x28
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	4001      	ands	r1, r0
 80035f2:	432b      	orrs	r3, r5
 80035f4:	430b      	orrs	r3, r1
 80035f6:	493f      	ldr	r1, [pc, #252]	@ (80036f4 <HAL_I2C_Mem_Read+0x1e8>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6053      	str	r3, [r2, #4]
 80035fc:	e002      	b.n	8003604 <HAL_I2C_Mem_Read+0xf8>
 80035fe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003600:	2b00      	cmp	r3, #0
 8003602:	d05e      	beq.n	80036c2 <HAL_I2C_Mem_Read+0x1b6>
 8003604:	4643      	mov	r3, r8
 8003606:	2200      	movs	r2, #0
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	2104      	movs	r1, #4
 800360c:	0020      	movs	r0, r4
 800360e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003610:	f7ff fc5a 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8003614:	2800      	cmp	r0, #0
 8003616:	d1a2      	bne.n	800355e <HAL_I2C_Mem_Read+0x52>
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800361c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003622:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003624:	3a01      	subs	r2, #1
 8003626:	3301      	adds	r3, #1
 8003628:	b292      	uxth	r2, r2
 800362a:	6263      	str	r3, [r4, #36]	@ 0x24
 800362c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800362e:	8562      	strh	r2, [r4, #42]	@ 0x2a
 8003630:	3b01      	subs	r3, #1
 8003632:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	8523      	strh	r3, [r4, #40]	@ 0x28
 8003638:	2a00      	cmp	r2, #0
 800363a:	d0e0      	beq.n	80035fe <HAL_I2C_Mem_Read+0xf2>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1de      	bne.n	80035fe <HAL_I2C_Mem_Read+0xf2>
 8003640:	4643      	mov	r3, r8
 8003642:	2200      	movs	r2, #0
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2180      	movs	r1, #128	@ 0x80
 8003648:	0020      	movs	r0, r4
 800364a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800364c:	f7ff fc3c 	bl	8002ec8 <I2C_WaitOnFlagUntilTimeout>
 8003650:	2800      	cmp	r0, #0
 8003652:	d000      	beq.n	8003656 <HAL_I2C_Mem_Read+0x14a>
 8003654:	e783      	b.n	800355e <HAL_I2C_Mem_Read+0x52>
 8003656:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	2bff      	cmp	r3, #255	@ 0xff
 800365c:	d922      	bls.n	80036a4 <HAL_I2C_Mem_Read+0x198>
 800365e:	2301      	movs	r3, #1
 8003660:	4925      	ldr	r1, [pc, #148]	@ (80036f8 <HAL_I2C_Mem_Read+0x1ec>)
 8003662:	8523      	strh	r3, [r4, #40]	@ 0x28
 8003664:	6853      	ldr	r3, [r2, #4]
 8003666:	400b      	ands	r3, r1
 8003668:	4924      	ldr	r1, [pc, #144]	@ (80036fc <HAL_I2C_Mem_Read+0x1f0>)
 800366a:	432b      	orrs	r3, r5
 800366c:	430b      	orrs	r3, r1
 800366e:	6053      	str	r3, [r2, #4]
 8003670:	e7c5      	b.n	80035fe <HAL_I2C_Mem_Read+0xf2>
 8003672:	2340      	movs	r3, #64	@ 0x40
 8003674:	2200      	movs	r2, #0
 8003676:	54e2      	strb	r2, [r4, r3]
 8003678:	e771      	b.n	800355e <HAL_I2C_Mem_Read+0x52>
 800367a:	2301      	movs	r3, #1
 800367c:	491c      	ldr	r1, [pc, #112]	@ (80036f0 <HAL_I2C_Mem_Read+0x1e4>)
 800367e:	8523      	strh	r3, [r4, #40]	@ 0x28
 8003680:	6853      	ldr	r3, [r2, #4]
 8003682:	400b      	ands	r3, r1
 8003684:	491e      	ldr	r1, [pc, #120]	@ (8003700 <HAL_I2C_Mem_Read+0x1f4>)
 8003686:	432b      	orrs	r3, r5
 8003688:	430b      	orrs	r3, r1
 800368a:	6053      	str	r3, [r2, #4]
 800368c:	e7ba      	b.n	8003604 <HAL_I2C_Mem_Read+0xf8>
 800368e:	0a32      	lsrs	r2, r6, #8
 8003690:	629a      	str	r2, [r3, #40]	@ 0x28
 8003692:	0020      	movs	r0, r4
 8003694:	4642      	mov	r2, r8
 8003696:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003698:	f7ff fb26 	bl	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 800369c:	2800      	cmp	r0, #0
 800369e:	d1e8      	bne.n	8003672 <HAL_I2C_Mem_Read+0x166>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	e78e      	b.n	80035c2 <HAL_I2C_Mem_Read+0xb6>
 80036a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80036a6:	4814      	ldr	r0, [pc, #80]	@ (80036f8 <HAL_I2C_Mem_Read+0x1ec>)
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	6851      	ldr	r1, [r2, #4]
 80036ac:	8523      	strh	r3, [r4, #40]	@ 0x28
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	041b      	lsls	r3, r3, #16
 80036b2:	4001      	ands	r1, r0
 80036b4:	432b      	orrs	r3, r5
 80036b6:	430b      	orrs	r3, r1
 80036b8:	2180      	movs	r1, #128	@ 0x80
 80036ba:	0489      	lsls	r1, r1, #18
 80036bc:	430b      	orrs	r3, r1
 80036be:	6053      	str	r3, [r2, #4]
 80036c0:	e79d      	b.n	80035fe <HAL_I2C_Mem_Read+0xf2>
 80036c2:	4642      	mov	r2, r8
 80036c4:	0020      	movs	r0, r4
 80036c6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80036c8:	f7ff fcf6 	bl	80030b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d000      	beq.n	80036d2 <HAL_I2C_Mem_Read+0x1c6>
 80036d0:	e745      	b.n	800355e <HAL_I2C_Mem_Read+0x52>
 80036d2:	2120      	movs	r1, #32
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	4d0b      	ldr	r5, [pc, #44]	@ (8003704 <HAL_I2C_Mem_Read+0x1f8>)
 80036d8:	61d9      	str	r1, [r3, #28]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	402a      	ands	r2, r5
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	2341      	movs	r3, #65	@ 0x41
 80036e2:	54e1      	strb	r1, [r4, r3]
 80036e4:	3301      	adds	r3, #1
 80036e6:	54e0      	strb	r0, [r4, r3]
 80036e8:	3b02      	subs	r3, #2
 80036ea:	54e0      	strb	r0, [r4, r3]
 80036ec:	e738      	b.n	8003560 <HAL_I2C_Mem_Read+0x54>
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	fc009800 	.word	0xfc009800
 80036f4:	02002400 	.word	0x02002400
 80036f8:	fc009c00 	.word	0xfc009c00
 80036fc:	01010000 	.word	0x01010000
 8003700:	01012400 	.word	0x01012400
 8003704:	fe00e800 	.word	0xfe00e800

08003708 <HAL_I2CEx_ConfigAnalogFilter>:
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370a:	2441      	movs	r4, #65	@ 0x41
 800370c:	5d03      	ldrb	r3, [r0, r4]
 800370e:	468c      	mov	ip, r1
 8003710:	b2dd      	uxtb	r5, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	d11a      	bne.n	800374c <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8003716:	2640      	movs	r6, #64	@ 0x40
 8003718:	5d83      	ldrb	r3, [r0, r6]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d016      	beq.n	800374c <HAL_I2CEx_ConfigAnalogFilter+0x44>
 800371e:	2324      	movs	r3, #36	@ 0x24
 8003720:	2701      	movs	r7, #1
 8003722:	5503      	strb	r3, [r0, r4]
 8003724:	6803      	ldr	r3, [r0, #0]
 8003726:	490a      	ldr	r1, [pc, #40]	@ (8003750 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	43ba      	bics	r2, r7
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	400a      	ands	r2, r1
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	4662      	mov	r2, ip
 8003736:	6819      	ldr	r1, [r3, #0]
 8003738:	4311      	orrs	r1, r2
 800373a:	6019      	str	r1, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	433a      	orrs	r2, r7
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	2300      	movs	r3, #0
 8003744:	5505      	strb	r5, [r0, r4]
 8003746:	5583      	strb	r3, [r0, r6]
 8003748:	2000      	movs	r0, #0
 800374a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800374c:	2002      	movs	r0, #2
 800374e:	e7fc      	b.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x42>
 8003750:	ffffefff 	.word	0xffffefff

08003754 <HAL_I2CEx_ConfigDigitalFilter>:
 8003754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003756:	46ce      	mov	lr, r9
 8003758:	4647      	mov	r7, r8
 800375a:	2441      	movs	r4, #65	@ 0x41
 800375c:	b580      	push	{r7, lr}
 800375e:	5d03      	ldrb	r3, [r0, r4]
 8003760:	b2dd      	uxtb	r5, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	d11f      	bne.n	80037a6 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 8003766:	2640      	movs	r6, #64	@ 0x40
 8003768:	5d83      	ldrb	r3, [r0, r6]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d01b      	beq.n	80037a6 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 800376e:	2324      	movs	r3, #36	@ 0x24
 8003770:	2701      	movs	r7, #1
 8003772:	5503      	strb	r3, [r0, r4]
 8003774:	6802      	ldr	r2, [r0, #0]
 8003776:	46b9      	mov	r9, r7
 8003778:	6813      	ldr	r3, [r2, #0]
 800377a:	0209      	lsls	r1, r1, #8
 800377c:	43bb      	bics	r3, r7
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	6813      	ldr	r3, [r2, #0]
 8003782:	4698      	mov	r8, r3
 8003784:	4647      	mov	r7, r8
 8003786:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <HAL_I2CEx_ConfigDigitalFilter+0x58>)
 8003788:	401f      	ands	r7, r3
 800378a:	4339      	orrs	r1, r7
 800378c:	6011      	str	r1, [r2, #0]
 800378e:	4649      	mov	r1, r9
 8003790:	6813      	ldr	r3, [r2, #0]
 8003792:	430b      	orrs	r3, r1
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	2300      	movs	r3, #0
 8003798:	5505      	strb	r5, [r0, r4]
 800379a:	5583      	strb	r3, [r0, r6]
 800379c:	2000      	movs	r0, #0
 800379e:	bcc0      	pop	{r6, r7}
 80037a0:	46b9      	mov	r9, r7
 80037a2:	46b0      	mov	r8, r6
 80037a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037a6:	2002      	movs	r0, #2
 80037a8:	e7f9      	b.n	800379e <HAL_I2CEx_ConfigDigitalFilter+0x4a>
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	fffff0ff 	.word	0xfffff0ff

080037b0 <HAL_PCD_Init>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	1e04      	subs	r4, r0, #0
 80037b4:	d100      	bne.n	80037b8 <HAL_PCD_Init+0x8>
 80037b6:	e0f6      	b.n	80039a6 <HAL_PCD_Init+0x1f6>
 80037b8:	4b7f      	ldr	r3, [pc, #508]	@ (80039b8 <HAL_PCD_Init+0x208>)
 80037ba:	5cc3      	ldrb	r3, [r0, r3]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d100      	bne.n	80037c4 <HAL_PCD_Init+0x14>
 80037c2:	e0e6      	b.n	8003992 <HAL_PCD_Init+0x1e2>
 80037c4:	2203      	movs	r2, #3
 80037c6:	4b7c      	ldr	r3, [pc, #496]	@ (80039b8 <HAL_PCD_Init+0x208>)
 80037c8:	54e2      	strb	r2, [r4, r3]
 80037ca:	6820      	ldr	r0, [r4, #0]
 80037cc:	f002 f82e 	bl	800582c <USB_DisableGlobalInt>
 80037d0:	7922      	ldrb	r2, [r4, #4]
 80037d2:	2a00      	cmp	r2, #0
 80037d4:	d100      	bne.n	80037d8 <HAL_PCD_Init+0x28>
 80037d6:	e0cd      	b.n	8003974 <HAL_PCD_Init+0x1c4>
 80037d8:	2180      	movs	r1, #128	@ 0x80
 80037da:	2300      	movs	r3, #0
 80037dc:	0049      	lsls	r1, r1, #1
 80037de:	8221      	strh	r1, [r4, #16]
 80037e0:	74e3      	strb	r3, [r4, #19]
 80037e2:	6223      	str	r3, [r4, #32]
 80037e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80037e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037e8:	2a01      	cmp	r2, #1
 80037ea:	d100      	bne.n	80037ee <HAL_PCD_Init+0x3e>
 80037ec:	e0dd      	b.n	80039aa <HAL_PCD_Init+0x1fa>
 80037ee:	2002      	movs	r0, #2
 80037f0:	30ff      	adds	r0, #255	@ 0xff
 80037f2:	8720      	strh	r0, [r4, #56]	@ 0x38
 80037f4:	38c6      	subs	r0, #198	@ 0xc6
 80037f6:	5423      	strb	r3, [r4, r0]
 80037f8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80037fa:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80037fc:	6523      	str	r3, [r4, #80]	@ 0x50
 80037fe:	2a02      	cmp	r2, #2
 8003800:	d04c      	beq.n	800389c <HAL_PCD_Init+0xec>
 8003802:	2581      	movs	r5, #129	@ 0x81
 8003804:	3025      	adds	r0, #37	@ 0x25
 8003806:	006d      	lsls	r5, r5, #1
 8003808:	5225      	strh	r5, [r4, r0]
 800380a:	3003      	adds	r0, #3
 800380c:	5423      	strb	r3, [r4, r0]
 800380e:	6723      	str	r3, [r4, #112]	@ 0x70
 8003810:	6763      	str	r3, [r4, #116]	@ 0x74
 8003812:	67a3      	str	r3, [r4, #120]	@ 0x78
 8003814:	2a03      	cmp	r2, #3
 8003816:	d041      	beq.n	800389c <HAL_PCD_Init+0xec>
 8003818:	2004      	movs	r0, #4
 800381a:	3d7a      	subs	r5, #122	@ 0x7a
 800381c:	30ff      	adds	r0, #255	@ 0xff
 800381e:	5360      	strh	r0, [r4, r5]
 8003820:	3503      	adds	r5, #3
 8003822:	5563      	strb	r3, [r4, r5]
 8003824:	350d      	adds	r5, #13
 8003826:	5163      	str	r3, [r4, r5]
 8003828:	3504      	adds	r5, #4
 800382a:	5163      	str	r3, [r4, r5]
 800382c:	3504      	adds	r5, #4
 800382e:	5163      	str	r3, [r4, r5]
 8003830:	2a04      	cmp	r2, #4
 8003832:	d033      	beq.n	800389c <HAL_PCD_Init+0xec>
 8003834:	2682      	movs	r6, #130	@ 0x82
 8003836:	3510      	adds	r5, #16
 8003838:	0076      	lsls	r6, r6, #1
 800383a:	5366      	strh	r6, [r4, r5]
 800383c:	3503      	adds	r5, #3
 800383e:	5563      	strb	r3, [r4, r5]
 8003840:	350d      	adds	r5, #13
 8003842:	5163      	str	r3, [r4, r5]
 8003844:	3504      	adds	r5, #4
 8003846:	5163      	str	r3, [r4, r5]
 8003848:	3504      	adds	r5, #4
 800384a:	5163      	str	r3, [r4, r5]
 800384c:	2a05      	cmp	r2, #5
 800384e:	d025      	beq.n	800389c <HAL_PCD_Init+0xec>
 8003850:	2606      	movs	r6, #6
 8003852:	3510      	adds	r5, #16
 8003854:	36ff      	adds	r6, #255	@ 0xff
 8003856:	5366      	strh	r6, [r4, r5]
 8003858:	3503      	adds	r5, #3
 800385a:	5563      	strb	r3, [r4, r5]
 800385c:	350d      	adds	r5, #13
 800385e:	5163      	str	r3, [r4, r5]
 8003860:	3504      	adds	r5, #4
 8003862:	5163      	str	r3, [r4, r5]
 8003864:	3504      	adds	r5, #4
 8003866:	5163      	str	r3, [r4, r5]
 8003868:	2a06      	cmp	r2, #6
 800386a:	d017      	beq.n	800389c <HAL_PCD_Init+0xec>
 800386c:	3516      	adds	r5, #22
 800386e:	5265      	strh	r5, [r4, r1]
 8003870:	3110      	adds	r1, #16
 8003872:	5423      	strb	r3, [r4, r0]
 8003874:	5063      	str	r3, [r4, r1]
 8003876:	3104      	adds	r1, #4
 8003878:	5063      	str	r3, [r4, r1]
 800387a:	3104      	adds	r1, #4
 800387c:	5063      	str	r3, [r4, r1]
 800387e:	2a07      	cmp	r2, #7
 8003880:	d00c      	beq.n	800389c <HAL_PCD_Init+0xec>
 8003882:	2008      	movs	r0, #8
 8003884:	3110      	adds	r1, #16
 8003886:	30ff      	adds	r0, #255	@ 0xff
 8003888:	5260      	strh	r0, [r4, r1]
 800388a:	212c      	movs	r1, #44	@ 0x2c
 800388c:	31ff      	adds	r1, #255	@ 0xff
 800388e:	5463      	strb	r3, [r4, r1]
 8003890:	310d      	adds	r1, #13
 8003892:	5063      	str	r3, [r4, r1]
 8003894:	3104      	adds	r1, #4
 8003896:	5063      	str	r3, [r4, r1]
 8003898:	3104      	adds	r1, #4
 800389a:	5063      	str	r3, [r4, r1]
 800389c:	20a8      	movs	r0, #168	@ 0xa8
 800389e:	2300      	movs	r3, #0
 80038a0:	0040      	lsls	r0, r0, #1
 80038a2:	5223      	strh	r3, [r4, r0]
 80038a4:	2054      	movs	r0, #84	@ 0x54
 80038a6:	2100      	movs	r1, #0
 80038a8:	2501      	movs	r5, #1
 80038aa:	30ff      	adds	r0, #255	@ 0xff
 80038ac:	5421      	strb	r1, [r4, r0]
 80038ae:	300d      	adds	r0, #13
 80038b0:	5023      	str	r3, [r4, r0]
 80038b2:	3004      	adds	r0, #4
 80038b4:	5023      	str	r3, [r4, r0]
 80038b6:	3004      	adds	r0, #4
 80038b8:	5023      	str	r3, [r4, r0]
 80038ba:	3010      	adds	r0, #16
 80038bc:	5225      	strh	r5, [r4, r0]
 80038be:	207c      	movs	r0, #124	@ 0x7c
 80038c0:	30ff      	adds	r0, #255	@ 0xff
 80038c2:	5421      	strb	r1, [r4, r0]
 80038c4:	300d      	adds	r0, #13
 80038c6:	5023      	str	r3, [r4, r0]
 80038c8:	3004      	adds	r0, #4
 80038ca:	5023      	str	r3, [r4, r0]
 80038cc:	3004      	adds	r0, #4
 80038ce:	5023      	str	r3, [r4, r0]
 80038d0:	2a02      	cmp	r2, #2
 80038d2:	d04f      	beq.n	8003974 <HAL_PCD_Init+0x1c4>
 80038d4:	3010      	adds	r0, #16
 80038d6:	3501      	adds	r5, #1
 80038d8:	5225      	strh	r5, [r4, r0]
 80038da:	20a4      	movs	r0, #164	@ 0xa4
 80038dc:	30ff      	adds	r0, #255	@ 0xff
 80038de:	5421      	strb	r1, [r4, r0]
 80038e0:	300d      	adds	r0, #13
 80038e2:	5023      	str	r3, [r4, r0]
 80038e4:	3004      	adds	r0, #4
 80038e6:	5023      	str	r3, [r4, r0]
 80038e8:	3004      	adds	r0, #4
 80038ea:	5023      	str	r3, [r4, r0]
 80038ec:	2a03      	cmp	r2, #3
 80038ee:	d041      	beq.n	8003974 <HAL_PCD_Init+0x1c4>
 80038f0:	3010      	adds	r0, #16
 80038f2:	3501      	adds	r5, #1
 80038f4:	5225      	strh	r5, [r4, r0]
 80038f6:	20cc      	movs	r0, #204	@ 0xcc
 80038f8:	30ff      	adds	r0, #255	@ 0xff
 80038fa:	5421      	strb	r1, [r4, r0]
 80038fc:	300d      	adds	r0, #13
 80038fe:	5023      	str	r3, [r4, r0]
 8003900:	3004      	adds	r0, #4
 8003902:	5023      	str	r3, [r4, r0]
 8003904:	3004      	adds	r0, #4
 8003906:	5023      	str	r3, [r4, r0]
 8003908:	2a04      	cmp	r2, #4
 800390a:	d033      	beq.n	8003974 <HAL_PCD_Init+0x1c4>
 800390c:	3010      	adds	r0, #16
 800390e:	3501      	adds	r5, #1
 8003910:	5225      	strh	r5, [r4, r0]
 8003912:	20f4      	movs	r0, #244	@ 0xf4
 8003914:	30ff      	adds	r0, #255	@ 0xff
 8003916:	5421      	strb	r1, [r4, r0]
 8003918:	300d      	adds	r0, #13
 800391a:	5023      	str	r3, [r4, r0]
 800391c:	3004      	adds	r0, #4
 800391e:	5023      	str	r3, [r4, r0]
 8003920:	3004      	adds	r0, #4
 8003922:	5023      	str	r3, [r4, r0]
 8003924:	2a05      	cmp	r2, #5
 8003926:	d025      	beq.n	8003974 <HAL_PCD_Init+0x1c4>
 8003928:	3010      	adds	r0, #16
 800392a:	3501      	adds	r5, #1
 800392c:	5225      	strh	r5, [r4, r0]
 800392e:	4823      	ldr	r0, [pc, #140]	@ (80039bc <HAL_PCD_Init+0x20c>)
 8003930:	5421      	strb	r1, [r4, r0]
 8003932:	300d      	adds	r0, #13
 8003934:	5023      	str	r3, [r4, r0]
 8003936:	3004      	adds	r0, #4
 8003938:	5023      	str	r3, [r4, r0]
 800393a:	3004      	adds	r0, #4
 800393c:	5023      	str	r3, [r4, r0]
 800393e:	2a06      	cmp	r2, #6
 8003940:	d018      	beq.n	8003974 <HAL_PCD_Init+0x1c4>
 8003942:	3010      	adds	r0, #16
 8003944:	3501      	adds	r5, #1
 8003946:	5225      	strh	r5, [r4, r0]
 8003948:	481d      	ldr	r0, [pc, #116]	@ (80039c0 <HAL_PCD_Init+0x210>)
 800394a:	5421      	strb	r1, [r4, r0]
 800394c:	300d      	adds	r0, #13
 800394e:	5023      	str	r3, [r4, r0]
 8003950:	3004      	adds	r0, #4
 8003952:	5023      	str	r3, [r4, r0]
 8003954:	3004      	adds	r0, #4
 8003956:	5023      	str	r3, [r4, r0]
 8003958:	2a07      	cmp	r2, #7
 800395a:	d00b      	beq.n	8003974 <HAL_PCD_Init+0x1c4>
 800395c:	229a      	movs	r2, #154	@ 0x9a
 800395e:	2007      	movs	r0, #7
 8003960:	0092      	lsls	r2, r2, #2
 8003962:	52a0      	strh	r0, [r4, r2]
 8003964:	4a17      	ldr	r2, [pc, #92]	@ (80039c4 <HAL_PCD_Init+0x214>)
 8003966:	54a1      	strb	r1, [r4, r2]
 8003968:	320d      	adds	r2, #13
 800396a:	50a3      	str	r3, [r4, r2]
 800396c:	3204      	adds	r2, #4
 800396e:	50a3      	str	r3, [r4, r2]
 8003970:	3204      	adds	r2, #4
 8003972:	50a3      	str	r3, [r4, r2]
 8003974:	68a2      	ldr	r2, [r4, #8]
 8003976:	6820      	ldr	r0, [r4, #0]
 8003978:	6861      	ldr	r1, [r4, #4]
 800397a:	f001 ff61 	bl	8005840 <USB_DevInit>
 800397e:	2300      	movs	r3, #0
 8003980:	2201      	movs	r2, #1
 8003982:	7323      	strb	r3, [r4, #12]
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <HAL_PCD_Init+0x208>)
 8003986:	54e2      	strb	r2, [r4, r3]
 8003988:	7aa3      	ldrb	r3, [r4, #10]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d007      	beq.n	800399e <HAL_PCD_Init+0x1ee>
 800398e:	2000      	movs	r0, #0
 8003990:	bd70      	pop	{r4, r5, r6, pc}
 8003992:	23a4      	movs	r3, #164	@ 0xa4
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	54c2      	strb	r2, [r0, r3]
 8003998:	f003 fc7c 	bl	8007294 <HAL_PCD_MspInit>
 800399c:	e712      	b.n	80037c4 <HAL_PCD_Init+0x14>
 800399e:	0020      	movs	r0, r4
 80039a0:	f000 ff14 	bl	80047cc <HAL_PCDEx_ActivateLPM>
 80039a4:	e7f3      	b.n	800398e <HAL_PCD_Init+0x1de>
 80039a6:	2001      	movs	r0, #1
 80039a8:	e7f2      	b.n	8003990 <HAL_PCD_Init+0x1e0>
 80039aa:	22a8      	movs	r2, #168	@ 0xa8
 80039ac:	0052      	lsls	r2, r2, #1
 80039ae:	52a3      	strh	r3, [r4, r2]
 80039b0:	2254      	movs	r2, #84	@ 0x54
 80039b2:	2100      	movs	r1, #0
 80039b4:	32ff      	adds	r2, #255	@ 0xff
 80039b6:	e7d6      	b.n	8003966 <HAL_PCD_Init+0x1b6>
 80039b8:	00000291 	.word	0x00000291
 80039bc:	0000021b 	.word	0x0000021b
 80039c0:	00000243 	.word	0x00000243
 80039c4:	0000026b 	.word	0x0000026b

080039c8 <HAL_PCD_Start>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	25a4      	movs	r5, #164	@ 0xa4
 80039cc:	00ad      	lsls	r5, r5, #2
 80039ce:	5d43      	ldrb	r3, [r0, r5]
 80039d0:	0004      	movs	r4, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d00b      	beq.n	80039ee <HAL_PCD_Start+0x26>
 80039d6:	2301      	movs	r3, #1
 80039d8:	5543      	strb	r3, [r0, r5]
 80039da:	6800      	ldr	r0, [r0, #0]
 80039dc:	f001 ff1c 	bl	8005818 <USB_EnableGlobalInt>
 80039e0:	6820      	ldr	r0, [r4, #0]
 80039e2:	f002 fc83 	bl	80062ec <USB_DevConnect>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2000      	movs	r0, #0
 80039ea:	5563      	strb	r3, [r4, r5]
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
 80039ee:	2002      	movs	r0, #2
 80039f0:	e7fc      	b.n	80039ec <HAL_PCD_Start+0x24>
 80039f2:	46c0      	nop			@ (mov r8, r8)

080039f4 <HAL_PCD_IRQHandler>:
 80039f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f6:	46de      	mov	lr, fp
 80039f8:	464e      	mov	r6, r9
 80039fa:	4657      	mov	r7, sl
 80039fc:	4645      	mov	r5, r8
 80039fe:	b5e0      	push	{r5, r6, r7, lr}
 8003a00:	0004      	movs	r4, r0
 8003a02:	b085      	sub	sp, #20
 8003a04:	6800      	ldr	r0, [r0, #0]
 8003a06:	f002 fc79 	bl	80062fc <USB_ReadInterrupts>
 8003a0a:	2380      	movs	r3, #128	@ 0x80
 8003a0c:	0006      	movs	r6, r0
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	401e      	ands	r6, r3
 8003a12:	4218      	tst	r0, r3
 8003a14:	d12f      	bne.n	8003a76 <HAL_PCD_IRQHandler+0x82>
 8003a16:	0543      	lsls	r3, r0, #21
 8003a18:	d500      	bpl.n	8003a1c <HAL_PCD_IRQHandler+0x28>
 8003a1a:	e17c      	b.n	8003d16 <HAL_PCD_IRQHandler+0x322>
 8003a1c:	0443      	lsls	r3, r0, #17
 8003a1e:	d41d      	bmi.n	8003a5c <HAL_PCD_IRQHandler+0x68>
 8003a20:	2380      	movs	r3, #128	@ 0x80
 8003a22:	0005      	movs	r5, r0
 8003a24:	019b      	lsls	r3, r3, #6
 8003a26:	401d      	ands	r5, r3
 8003a28:	4218      	tst	r0, r3
 8003a2a:	d000      	beq.n	8003a2e <HAL_PCD_IRQHandler+0x3a>
 8003a2c:	e1f1      	b.n	8003e12 <HAL_PCD_IRQHandler+0x41e>
 8003a2e:	04c3      	lsls	r3, r0, #19
 8003a30:	d500      	bpl.n	8003a34 <HAL_PCD_IRQHandler+0x40>
 8003a32:	e08c      	b.n	8003b4e <HAL_PCD_IRQHandler+0x15a>
 8003a34:	0503      	lsls	r3, r0, #20
 8003a36:	d500      	bpl.n	8003a3a <HAL_PCD_IRQHandler+0x46>
 8003a38:	e31e      	b.n	8004078 <HAL_PCD_IRQHandler+0x684>
 8003a3a:	2380      	movs	r3, #128	@ 0x80
 8003a3c:	4203      	tst	r3, r0
 8003a3e:	d000      	beq.n	8003a42 <HAL_PCD_IRQHandler+0x4e>
 8003a40:	e2f8      	b.n	8004034 <HAL_PCD_IRQHandler+0x640>
 8003a42:	0583      	lsls	r3, r0, #22
 8003a44:	d501      	bpl.n	8003a4a <HAL_PCD_IRQHandler+0x56>
 8003a46:	f000 fc0c 	bl	8004262 <HAL_PCD_IRQHandler+0x86e>
 8003a4a:	05c0      	lsls	r0, r0, #23
 8003a4c:	d50c      	bpl.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 8003a4e:	2244      	movs	r2, #68	@ 0x44
 8003a50:	6821      	ldr	r1, [r4, #0]
 8003a52:	48bd      	ldr	r0, [pc, #756]	@ (8003d48 <HAL_PCD_IRQHandler+0x354>)
 8003a54:	5a8b      	ldrh	r3, [r1, r2]
 8003a56:	4003      	ands	r3, r0
 8003a58:	528b      	strh	r3, [r1, r2]
 8003a5a:	e005      	b.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 8003a5c:	2244      	movs	r2, #68	@ 0x44
 8003a5e:	6821      	ldr	r1, [r4, #0]
 8003a60:	48ba      	ldr	r0, [pc, #744]	@ (8003d4c <HAL_PCD_IRQHandler+0x358>)
 8003a62:	5a8b      	ldrh	r3, [r1, r2]
 8003a64:	4003      	ands	r3, r0
 8003a66:	528b      	strh	r3, [r1, r2]
 8003a68:	b005      	add	sp, #20
 8003a6a:	bcf0      	pop	{r4, r5, r6, r7}
 8003a6c:	46bb      	mov	fp, r7
 8003a6e:	46b2      	mov	sl, r6
 8003a70:	46a9      	mov	r9, r5
 8003a72:	46a0      	mov	r8, r4
 8003a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a76:	2344      	movs	r3, #68	@ 0x44
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	5ac3      	ldrh	r3, [r0, r3]
 8003a7c:	b21b      	sxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	daf2      	bge.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 8003a82:	2344      	movs	r3, #68	@ 0x44
 8003a84:	469b      	mov	fp, r3
 8003a86:	3b35      	subs	r3, #53	@ 0x35
 8003a88:	469a      	mov	sl, r3
 8003a8a:	e010      	b.n	8003aae <HAL_PCD_IRQHandler+0xba>
 8003a8c:	8803      	ldrh	r3, [r0, #0]
 8003a8e:	06d2      	lsls	r2, r2, #27
 8003a90:	d400      	bmi.n	8003a94 <HAL_PCD_IRQHandler+0xa0>
 8003a92:	e0c1      	b.n	8003c18 <HAL_PCD_IRQHandler+0x224>
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	051b      	lsls	r3, r3, #20
 8003a98:	d500      	bpl.n	8003a9c <HAL_PCD_IRQHandler+0xa8>
 8003a9a:	e0e7      	b.n	8003c6c <HAL_PCD_IRQHandler+0x278>
 8003a9c:	b212      	sxth	r2, r2
 8003a9e:	2a00      	cmp	r2, #0
 8003aa0:	da00      	bge.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003aa2:	e167      	b.n	8003d74 <HAL_PCD_IRQHandler+0x380>
 8003aa4:	465b      	mov	r3, fp
 8003aa6:	5ac3      	ldrh	r3, [r0, r3]
 8003aa8:	b21b      	sxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	dadc      	bge.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 8003aae:	465b      	mov	r3, fp
 8003ab0:	4655      	mov	r5, sl
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	5ac3      	ldrh	r3, [r0, r3]
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	401d      	ands	r5, r3
 8003aba:	4219      	tst	r1, r3
 8003abc:	d0e6      	beq.n	8003a8c <HAL_PCD_IRQHandler+0x98>
 8003abe:	00ae      	lsls	r6, r5, #2
 8003ac0:	1982      	adds	r2, r0, r6
 8003ac2:	8813      	ldrh	r3, [r2, #0]
 8003ac4:	9600      	str	r6, [sp, #0]
 8003ac6:	b29f      	uxth	r7, r3
 8003ac8:	b21b      	sxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	db59      	blt.n	8003b82 <HAL_PCD_IRQHandler+0x18e>
 8003ace:	2380      	movs	r3, #128	@ 0x80
 8003ad0:	423b      	tst	r3, r7
 8003ad2:	d0e7      	beq.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003ad4:	9e00      	ldr	r6, [sp, #0]
 8003ad6:	499e      	ldr	r1, [pc, #632]	@ (8003d50 <HAL_PCD_IRQHandler+0x35c>)
 8003ad8:	1982      	adds	r2, r0, r6
 8003ada:	8813      	ldrh	r3, [r2, #0]
 8003adc:	400b      	ands	r3, r1
 8003ade:	499d      	ldr	r1, [pc, #628]	@ (8003d54 <HAL_PCD_IRQHandler+0x360>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	468c      	mov	ip, r1
 8003ae4:	1971      	adds	r1, r6, r5
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	00c9      	lsls	r1, r1, #3
 8003aea:	8013      	strh	r3, [r2, #0]
 8003aec:	1862      	adds	r2, r4, r1
 8003aee:	7cd3      	ldrb	r3, [r2, #19]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d100      	bne.n	8003af6 <HAL_PCD_IRQHandler+0x102>
 8003af4:	e194      	b.n	8003e20 <HAL_PCD_IRQHandler+0x42c>
 8003af6:	6a96      	ldr	r6, [r2, #40]	@ 0x28
 8003af8:	7c13      	ldrb	r3, [r2, #16]
 8003afa:	9601      	str	r6, [sp, #4]
 8003afc:	2680      	movs	r6, #128	@ 0x80
 8003afe:	0076      	lsls	r6, r6, #1
 8003b00:	46b0      	mov	r8, r6
 8003b02:	403e      	ands	r6, r7
 8003b04:	9603      	str	r6, [sp, #12]
 8003b06:	4646      	mov	r6, r8
 8003b08:	4699      	mov	r9, r3
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	9302      	str	r3, [sp, #8]
 8003b0e:	4237      	tst	r7, r6
 8003b10:	d000      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x120>
 8003b12:	e1bd      	b.n	8003e90 <HAL_PCD_IRQHandler+0x49c>
 8003b14:	2550      	movs	r5, #80	@ 0x50
 8003b16:	469c      	mov	ip, r3
 8003b18:	5b45      	ldrh	r5, [r0, r5]
 8003b1a:	4e8f      	ldr	r6, [pc, #572]	@ (8003d58 <HAL_PCD_IRQHandler+0x364>)
 8003b1c:	4465      	add	r5, ip
 8003b1e:	46b4      	mov	ip, r6
 8003b20:	182d      	adds	r5, r5, r0
 8003b22:	4465      	add	r5, ip
 8003b24:	882d      	ldrh	r5, [r5, #0]
 8003b26:	9b01      	ldr	r3, [sp, #4]
 8003b28:	05ad      	lsls	r5, r5, #22
 8003b2a:	0dad      	lsrs	r5, r5, #22
 8003b2c:	429d      	cmp	r5, r3
 8003b2e:	d300      	bcc.n	8003b32 <HAL_PCD_IRQHandler+0x13e>
 8003b30:	e1a6      	b.n	8003e80 <HAL_PCD_IRQHandler+0x48c>
 8003b32:	1b5b      	subs	r3, r3, r5
 8003b34:	6293      	str	r3, [r2, #40]	@ 0x28
 8003b36:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8003b38:	3110      	adds	r1, #16
 8003b3a:	195b      	adds	r3, r3, r5
 8003b3c:	6253      	str	r3, [r2, #36]	@ 0x24
 8003b3e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003b40:	1861      	adds	r1, r4, r1
 8003b42:	195b      	adds	r3, r3, r5
 8003b44:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003b46:	f002 f86d 	bl	8005c24 <USB_EPStartXfer>
 8003b4a:	6820      	ldr	r0, [r4, #0]
 8003b4c:	e7aa      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003b4e:	2340      	movs	r3, #64	@ 0x40
 8003b50:	2004      	movs	r0, #4
 8003b52:	6822      	ldr	r2, [r4, #0]
 8003b54:	5ad1      	ldrh	r1, [r2, r3]
 8003b56:	4381      	bics	r1, r0
 8003b58:	52d1      	strh	r1, [r2, r3]
 8003b5a:	5ad1      	ldrh	r1, [r2, r3]
 8003b5c:	3004      	adds	r0, #4
 8003b5e:	4381      	bics	r1, r0
 8003b60:	52d1      	strh	r1, [r2, r3]
 8003b62:	23b2      	movs	r3, #178	@ 0xb2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	5ce2      	ldrb	r2, [r4, r3]
 8003b68:	2a01      	cmp	r2, #1
 8003b6a:	d100      	bne.n	8003b6e <HAL_PCD_IRQHandler+0x17a>
 8003b6c:	e384      	b.n	8004278 <HAL_PCD_IRQHandler+0x884>
 8003b6e:	0020      	movs	r0, r4
 8003b70:	f003 fc00 	bl	8007374 <HAL_PCD_ResumeCallback>
 8003b74:	2244      	movs	r2, #68	@ 0x44
 8003b76:	6821      	ldr	r1, [r4, #0]
 8003b78:	4878      	ldr	r0, [pc, #480]	@ (8003d5c <HAL_PCD_IRQHandler+0x368>)
 8003b7a:	5a8b      	ldrh	r3, [r1, r2]
 8003b7c:	4003      	ands	r3, r0
 8003b7e:	528b      	strh	r3, [r1, r2]
 8003b80:	e772      	b.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 8003b82:	8813      	ldrh	r3, [r2, #0]
 8003b84:	4976      	ldr	r1, [pc, #472]	@ (8003d60 <HAL_PCD_IRQHandler+0x36c>)
 8003b86:	400b      	ands	r3, r1
 8003b88:	2180      	movs	r1, #128	@ 0x80
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	8013      	strh	r3, [r2, #0]
 8003b8e:	1973      	adds	r3, r6, r5
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	18e3      	adds	r3, r4, r3
 8003b94:	001a      	movs	r2, r3
 8003b96:	325d      	adds	r2, #93	@ 0x5d
 8003b98:	32ff      	adds	r2, #255	@ 0xff
 8003b9a:	7812      	ldrb	r2, [r2, #0]
 8003b9c:	2a00      	cmp	r2, #0
 8003b9e:	d000      	beq.n	8003ba2 <HAL_PCD_IRQHandler+0x1ae>
 8003ba0:	e088      	b.n	8003cb4 <HAL_PCD_IRQHandler+0x2c0>
 8003ba2:	3250      	adds	r2, #80	@ 0x50
 8003ba4:	5a81      	ldrh	r1, [r0, r2]
 8003ba6:	001a      	movs	r2, r3
 8003ba8:	3251      	adds	r2, #81	@ 0x51
 8003baa:	32ff      	adds	r2, #255	@ 0xff
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	00d2      	lsls	r2, r2, #3
 8003bb0:	1852      	adds	r2, r2, r1
 8003bb2:	496c      	ldr	r1, [pc, #432]	@ (8003d64 <HAL_PCD_IRQHandler+0x370>)
 8003bb4:	1812      	adds	r2, r2, r0
 8003bb6:	468c      	mov	ip, r1
 8003bb8:	4462      	add	r2, ip
 8003bba:	8812      	ldrh	r2, [r2, #0]
 8003bbc:	0592      	lsls	r2, r2, #22
 8003bbe:	0d91      	lsrs	r1, r2, #22
 8003bc0:	4688      	mov	r8, r1
 8003bc2:	2a00      	cmp	r2, #0
 8003bc4:	d000      	beq.n	8003bc8 <HAL_PCD_IRQHandler+0x1d4>
 8003bc6:	e1e7      	b.n	8003f98 <HAL_PCD_IRQHandler+0x5a4>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4698      	mov	r8, r3
 8003bcc:	9b00      	ldr	r3, [sp, #0]
 8003bce:	1959      	adds	r1, r3, r5
 8003bd0:	00c9      	lsls	r1, r1, #3
 8003bd2:	1863      	adds	r3, r4, r1
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	306d      	adds	r0, #109	@ 0x6d
 8003bd8:	30ff      	adds	r0, #255	@ 0xff
 8003bda:	6802      	ldr	r2, [r0, #0]
 8003bdc:	3808      	subs	r0, #8
 8003bde:	4442      	add	r2, r8
 8003be0:	6082      	str	r2, [r0, #8]
 8003be2:	6802      	ldr	r2, [r0, #0]
 8003be4:	4442      	add	r2, r8
 8003be6:	6002      	str	r2, [r0, #0]
 8003be8:	001a      	movs	r2, r3
 8003bea:	3269      	adds	r2, #105	@ 0x69
 8003bec:	32ff      	adds	r2, #255	@ 0xff
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	2a00      	cmp	r2, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_PCD_IRQHandler+0x20c>
 8003bf4:	3361      	adds	r3, #97	@ 0x61
 8003bf6:	33ff      	adds	r3, #255	@ 0xff
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4543      	cmp	r3, r8
 8003bfc:	d800      	bhi.n	8003c00 <HAL_PCD_IRQHandler+0x20c>
 8003bfe:	e1b1      	b.n	8003f64 <HAL_PCD_IRQHandler+0x570>
 8003c00:	9b00      	ldr	r3, [sp, #0]
 8003c02:	0020      	movs	r0, r4
 8003c04:	195b      	adds	r3, r3, r5
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	18e3      	adds	r3, r4, r3
 8003c0a:	3351      	adds	r3, #81	@ 0x51
 8003c0c:	33ff      	adds	r3, #255	@ 0xff
 8003c0e:	7819      	ldrb	r1, [r3, #0]
 8003c10:	f003 fb6a 	bl	80072e8 <HAL_PCD_DataOutStageCallback>
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	e75a      	b.n	8003ace <HAL_PCD_IRQHandler+0xda>
 8003c18:	4a4d      	ldr	r2, [pc, #308]	@ (8003d50 <HAL_PCD_IRQHandler+0x35c>)
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2280      	movs	r2, #128	@ 0x80
 8003c20:	0212      	lsls	r2, r2, #8
 8003c22:	4313      	orrs	r3, r2
 8003c24:	8003      	strh	r3, [r0, #0]
 8003c26:	2350      	movs	r3, #80	@ 0x50
 8003c28:	5ac2      	ldrh	r2, [r0, r3]
 8003c2a:	7c23      	ldrb	r3, [r4, #16]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	18c3      	adds	r3, r0, r3
 8003c30:	189b      	adds	r3, r3, r2
 8003c32:	4a49      	ldr	r2, [pc, #292]	@ (8003d58 <HAL_PCD_IRQHandler+0x364>)
 8003c34:	0020      	movs	r0, r4
 8003c36:	4694      	mov	ip, r2
 8003c38:	4463      	add	r3, ip
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003c3e:	059b      	lsls	r3, r3, #22
 8003c40:	0d9b      	lsrs	r3, r3, #22
 8003c42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c44:	18d3      	adds	r3, r2, r3
 8003c46:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c48:	f003 fb5c 	bl	8007304 <HAL_PCD_DataInStageCallback>
 8003c4c:	7b23      	ldrb	r3, [r4, #12]
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d100      	bne.n	8003c56 <HAL_PCD_IRQHandler+0x262>
 8003c54:	e726      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003c56:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d000      	beq.n	8003c5e <HAL_PCD_IRQHandler+0x26a>
 8003c5c:	e722      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003c5e:	2180      	movs	r1, #128	@ 0x80
 8003c60:	7b22      	ldrb	r2, [r4, #12]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	3934      	subs	r1, #52	@ 0x34
 8003c66:	5242      	strh	r2, [r0, r1]
 8003c68:	7323      	strb	r3, [r4, #12]
 8003c6a:	e71b      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003c6c:	2350      	movs	r3, #80	@ 0x50
 8003c6e:	5ac2      	ldrh	r2, [r0, r3]
 8003c70:	3301      	adds	r3, #1
 8003c72:	33ff      	adds	r3, #255	@ 0xff
 8003c74:	5ce3      	ldrb	r3, [r4, r3]
 8003c76:	21a6      	movs	r1, #166	@ 0xa6
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	18c3      	adds	r3, r0, r3
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	4a39      	ldr	r2, [pc, #228]	@ (8003d64 <HAL_PCD_IRQHandler+0x370>)
 8003c80:	0089      	lsls	r1, r1, #2
 8003c82:	4694      	mov	ip, r2
 8003c84:	0022      	movs	r2, r4
 8003c86:	4463      	add	r3, ip
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	3251      	adds	r2, #81	@ 0x51
 8003c8c:	059b      	lsls	r3, r3, #22
 8003c8e:	0d9b      	lsrs	r3, r3, #22
 8003c90:	32ff      	adds	r2, #255	@ 0xff
 8003c92:	61d3      	str	r3, [r2, #28]
 8003c94:	1861      	adds	r1, r4, r1
 8003c96:	88d2      	ldrh	r2, [r2, #6]
 8003c98:	f002 fb4c 	bl	8006334 <USB_ReadPMA>
 8003c9c:	6822      	ldr	r2, [r4, #0]
 8003c9e:	4930      	ldr	r1, [pc, #192]	@ (8003d60 <HAL_PCD_IRQHandler+0x36c>)
 8003ca0:	8813      	ldrh	r3, [r2, #0]
 8003ca2:	0020      	movs	r0, r4
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	2180      	movs	r1, #128	@ 0x80
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	8013      	strh	r3, [r2, #0]
 8003cac:	f003 fb12 	bl	80072d4 <HAL_PCD_SetupStageCallback>
 8003cb0:	6820      	ldr	r0, [r4, #0]
 8003cb2:	e6f7      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003cb4:	2654      	movs	r6, #84	@ 0x54
 8003cb6:	36ff      	adds	r6, #255	@ 0xff
 8003cb8:	46b4      	mov	ip, r6
 8003cba:	449c      	add	ip, r3
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	4666      	mov	r6, ip
 8003cc0:	3151      	adds	r1, #81	@ 0x51
 8003cc2:	7836      	ldrb	r6, [r6, #0]
 8003cc4:	31ff      	adds	r1, #255	@ 0xff
 8003cc6:	780a      	ldrb	r2, [r1, #0]
 8003cc8:	2e02      	cmp	r6, #2
 8003cca:	d100      	bne.n	8003cce <HAL_PCD_IRQHandler+0x2da>
 8003ccc:	e1fe      	b.n	80040cc <HAL_PCD_IRQHandler+0x6d8>
 8003cce:	0092      	lsls	r2, r2, #2
 8003cd0:	4694      	mov	ip, r2
 8003cd2:	4484      	add	ip, r0
 8003cd4:	4662      	mov	r2, ip
 8003cd6:	4e24      	ldr	r6, [pc, #144]	@ (8003d68 <HAL_PCD_IRQHandler+0x374>)
 8003cd8:	8812      	ldrh	r2, [r2, #0]
 8003cda:	4032      	ands	r2, r6
 8003cdc:	4e23      	ldr	r6, [pc, #140]	@ (8003d6c <HAL_PCD_IRQHandler+0x378>)
 8003cde:	4332      	orrs	r2, r6
 8003ce0:	4666      	mov	r6, ip
 8003ce2:	8032      	strh	r2, [r6, #0]
 8003ce4:	780a      	ldrb	r2, [r1, #0]
 8003ce6:	0091      	lsls	r1, r2, #2
 8003ce8:	1841      	adds	r1, r0, r1
 8003cea:	8809      	ldrh	r1, [r1, #0]
 8003cec:	0449      	lsls	r1, r1, #17
 8003cee:	d400      	bmi.n	8003cf2 <HAL_PCD_IRQHandler+0x2fe>
 8003cf0:	e140      	b.n	8003f74 <HAL_PCD_IRQHandler+0x580>
 8003cf2:	2150      	movs	r1, #80	@ 0x50
 8003cf4:	5a41      	ldrh	r1, [r0, r1]
 8003cf6:	00d2      	lsls	r2, r2, #3
 8003cf8:	1852      	adds	r2, r2, r1
 8003cfa:	4917      	ldr	r1, [pc, #92]	@ (8003d58 <HAL_PCD_IRQHandler+0x364>)
 8003cfc:	1812      	adds	r2, r2, r0
 8003cfe:	468c      	mov	ip, r1
 8003d00:	4462      	add	r2, ip
 8003d02:	8812      	ldrh	r2, [r2, #0]
 8003d04:	0592      	lsls	r2, r2, #22
 8003d06:	0d91      	lsrs	r1, r2, #22
 8003d08:	4688      	mov	r8, r1
 8003d0a:	2a00      	cmp	r2, #0
 8003d0c:	d100      	bne.n	8003d10 <HAL_PCD_IRQHandler+0x31c>
 8003d0e:	e75b      	b.n	8003bc8 <HAL_PCD_IRQHandler+0x1d4>
 8003d10:	001a      	movs	r2, r3
 8003d12:	3259      	adds	r2, #89	@ 0x59
 8003d14:	e142      	b.n	8003f9c <HAL_PCD_IRQHandler+0x5a8>
 8003d16:	2244      	movs	r2, #68	@ 0x44
 8003d18:	25a4      	movs	r5, #164	@ 0xa4
 8003d1a:	6821      	ldr	r1, [r4, #0]
 8003d1c:	4814      	ldr	r0, [pc, #80]	@ (8003d70 <HAL_PCD_IRQHandler+0x37c>)
 8003d1e:	5a8b      	ldrh	r3, [r1, r2]
 8003d20:	00ad      	lsls	r5, r5, #2
 8003d22:	4003      	ands	r3, r0
 8003d24:	528b      	strh	r3, [r1, r2]
 8003d26:	0020      	movs	r0, r4
 8003d28:	f003 fb00 	bl	800732c <HAL_PCD_ResetCallback>
 8003d2c:	5d63      	ldrb	r3, [r4, r5]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d100      	bne.n	8003d34 <HAL_PCD_IRQHandler+0x340>
 8003d32:	e699      	b.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 8003d34:	2301      	movs	r3, #1
 8003d36:	5563      	strb	r3, [r4, r5]
 8003d38:	2100      	movs	r1, #0
 8003d3a:	6820      	ldr	r0, [r4, #0]
 8003d3c:	7326      	strb	r6, [r4, #12]
 8003d3e:	f002 facd 	bl	80062dc <USB_SetDevAddress>
 8003d42:	5566      	strb	r6, [r4, r5]
 8003d44:	e690      	b.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	fffffeff 	.word	0xfffffeff
 8003d4c:	ffffbfff 	.word	0xffffbfff
 8003d50:	ffff8f0f 	.word	0xffff8f0f
 8003d54:	ffff8000 	.word	0xffff8000
 8003d58:	00000402 	.word	0x00000402
 8003d5c:	ffffefff 	.word	0xffffefff
 8003d60:	00000f8f 	.word	0x00000f8f
 8003d64:	00000406 	.word	0x00000406
 8003d68:	ffff8f8f 	.word	0xffff8f8f
 8003d6c:	000080c0 	.word	0x000080c0
 8003d70:	fffffbff 	.word	0xfffffbff
 8003d74:	8803      	ldrh	r3, [r0, #0]
 8003d76:	4aca      	ldr	r2, [pc, #808]	@ (80040a0 <HAL_PCD_IRQHandler+0x6ac>)
 8003d78:	0025      	movs	r5, r4
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2280      	movs	r2, #128	@ 0x80
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	8003      	strh	r3, [r0, #0]
 8003d82:	2350      	movs	r3, #80	@ 0x50
 8003d84:	5ac2      	ldrh	r2, [r0, r3]
 8003d86:	3301      	adds	r3, #1
 8003d88:	33ff      	adds	r3, #255	@ 0xff
 8003d8a:	5ce3      	ldrb	r3, [r4, r3]
 8003d8c:	3551      	adds	r5, #81	@ 0x51
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	18c3      	adds	r3, r0, r3
 8003d92:	189b      	adds	r3, r3, r2
 8003d94:	4ac3      	ldr	r2, [pc, #780]	@ (80040a4 <HAL_PCD_IRQHandler+0x6b0>)
 8003d96:	35ff      	adds	r5, #255	@ 0xff
 8003d98:	4694      	mov	ip, r2
 8003d9a:	4463      	add	r3, ip
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	059b      	lsls	r3, r3, #22
 8003da0:	0d9b      	lsrs	r3, r3, #22
 8003da2:	61eb      	str	r3, [r5, #28]
 8003da4:	d00e      	beq.n	8003dc4 <HAL_PCD_IRQHandler+0x3d0>
 8003da6:	6969      	ldr	r1, [r5, #20]
 8003da8:	2900      	cmp	r1, #0
 8003daa:	d00b      	beq.n	8003dc4 <HAL_PCD_IRQHandler+0x3d0>
 8003dac:	88ea      	ldrh	r2, [r5, #6]
 8003dae:	f002 fac1 	bl	8006334 <USB_ReadPMA>
 8003db2:	696b      	ldr	r3, [r5, #20]
 8003db4:	69ea      	ldr	r2, [r5, #28]
 8003db6:	0020      	movs	r0, r4
 8003db8:	189b      	adds	r3, r3, r2
 8003dba:	2100      	movs	r1, #0
 8003dbc:	616b      	str	r3, [r5, #20]
 8003dbe:	f003 fa93 	bl	80072e8 <HAL_PCD_DataOutStageCallback>
 8003dc2:	6820      	ldr	r0, [r4, #0]
 8003dc4:	8803      	ldrh	r3, [r0, #0]
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	051b      	lsls	r3, r3, #20
 8003dca:	d500      	bpl.n	8003dce <HAL_PCD_IRQHandler+0x3da>
 8003dcc:	e66a      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003dce:	23c0      	movs	r3, #192	@ 0xc0
 8003dd0:	019b      	lsls	r3, r3, #6
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d100      	bne.n	8003dda <HAL_PCD_IRQHandler+0x3e6>
 8003dd8:	e664      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003dda:	2350      	movs	r3, #80	@ 0x50
 8003ddc:	5ac2      	ldrh	r2, [r0, r3]
 8003dde:	4bb1      	ldr	r3, [pc, #708]	@ (80040a4 <HAL_PCD_IRQHandler+0x6b0>)
 8003de0:	18c3      	adds	r3, r0, r3
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	0592      	lsls	r2, r2, #22
 8003de8:	0d92      	lsrs	r2, r2, #22
 8003dea:	801a      	strh	r2, [r3, #0]
 8003dec:	692a      	ldr	r2, [r5, #16]
 8003dee:	2a00      	cmp	r2, #0
 8003df0:	d000      	beq.n	8003df4 <HAL_PCD_IRQHandler+0x400>
 8003df2:	e1be      	b.n	8004172 <HAL_PCD_IRQHandler+0x77e>
 8003df4:	2180      	movs	r1, #128	@ 0x80
 8003df6:	881a      	ldrh	r2, [r3, #0]
 8003df8:	0209      	lsls	r1, r1, #8
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	801a      	strh	r2, [r3, #0]
 8003dfe:	8802      	ldrh	r2, [r0, #0]
 8003e00:	4ba9      	ldr	r3, [pc, #676]	@ (80040a8 <HAL_PCD_IRQHandler+0x6b4>)
 8003e02:	401a      	ands	r2, r3
 8003e04:	23c0      	movs	r3, #192	@ 0xc0
 8003e06:	019b      	lsls	r3, r3, #6
 8003e08:	4053      	eors	r3, r2
 8003e0a:	4aa8      	ldr	r2, [pc, #672]	@ (80040ac <HAL_PCD_IRQHandler+0x6b8>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	8003      	strh	r3, [r0, #0]
 8003e10:	e648      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003e12:	2244      	movs	r2, #68	@ 0x44
 8003e14:	6821      	ldr	r1, [r4, #0]
 8003e16:	48a6      	ldr	r0, [pc, #664]	@ (80040b0 <HAL_PCD_IRQHandler+0x6bc>)
 8003e18:	5a8b      	ldrh	r3, [r1, r2]
 8003e1a:	4003      	ands	r3, r0
 8003e1c:	528b      	strh	r3, [r1, r2]
 8003e1e:	e623      	b.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 8003e20:	1c69      	adds	r1, r5, #1
 8003e22:	008b      	lsls	r3, r1, #2
 8003e24:	185b      	adds	r3, r3, r1
 8003e26:	2100      	movs	r1, #0
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	5119      	str	r1, [r3, r4]
 8003e2c:	7f13      	ldrb	r3, [r2, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01b      	beq.n	8003e6a <HAL_PCD_IRQHandler+0x476>
 8003e32:	2340      	movs	r3, #64	@ 0x40
 8003e34:	001e      	movs	r6, r3
 8003e36:	403e      	ands	r6, r7
 8003e38:	423b      	tst	r3, r7
 8003e3a:	d000      	beq.n	8003e3e <HAL_PCD_IRQHandler+0x44a>
 8003e3c:	e0f0      	b.n	8004020 <HAL_PCD_IRQHandler+0x62c>
 8003e3e:	7c53      	ldrb	r3, [r2, #17]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d000      	beq.n	8003e46 <HAL_PCD_IRQHandler+0x452>
 8003e44:	e22c      	b.n	80042a0 <HAL_PCD_IRQHandler+0x8ac>
 8003e46:	3350      	adds	r3, #80	@ 0x50
 8003e48:	5ac1      	ldrh	r1, [r0, r3]
 8003e4a:	7c13      	ldrb	r3, [r2, #16]
 8003e4c:	4a95      	ldr	r2, [pc, #596]	@ (80040a4 <HAL_PCD_IRQHandler+0x6b0>)
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4690      	mov	r8, r2
 8003e52:	4443      	add	r3, r8
 8003e54:	181b      	adds	r3, r3, r0
 8003e56:	185b      	adds	r3, r3, r1
 8003e58:	4661      	mov	r1, ip
 8003e5a:	881a      	ldrh	r2, [r3, #0]
 8003e5c:	0592      	lsls	r2, r2, #22
 8003e5e:	0d92      	lsrs	r2, r2, #22
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	881a      	ldrh	r2, [r3, #0]
 8003e64:	4311      	orrs	r1, r2
 8003e66:	b28a      	uxth	r2, r1
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	9b00      	ldr	r3, [sp, #0]
 8003e6c:	0020      	movs	r0, r4
 8003e6e:	469c      	mov	ip, r3
 8003e70:	4465      	add	r5, ip
 8003e72:	00ed      	lsls	r5, r5, #3
 8003e74:	1965      	adds	r5, r4, r5
 8003e76:	7c29      	ldrb	r1, [r5, #16]
 8003e78:	f003 fa44 	bl	8007304 <HAL_PCD_DataInStageCallback>
 8003e7c:	6820      	ldr	r0, [r4, #0]
 8003e7e:	e611      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003e80:	9b03      	ldr	r3, [sp, #12]
 8003e82:	0020      	movs	r0, r4
 8003e84:	4649      	mov	r1, r9
 8003e86:	6293      	str	r3, [r2, #40]	@ 0x28
 8003e88:	f003 fa3c 	bl	8007304 <HAL_PCD_DataInStageCallback>
 8003e8c:	6820      	ldr	r0, [r4, #0]
 8003e8e:	e609      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8003e90:	2180      	movs	r1, #128	@ 0x80
 8003e92:	01c9      	lsls	r1, r1, #7
 8003e94:	4039      	ands	r1, r7
 8003e96:	000e      	movs	r6, r1
 8003e98:	9103      	str	r1, [sp, #12]
 8003e9a:	2140      	movs	r1, #64	@ 0x40
 8003e9c:	000b      	movs	r3, r1
 8003e9e:	403b      	ands	r3, r7
 8003ea0:	4698      	mov	r8, r3
 8003ea2:	4239      	tst	r1, r7
 8003ea4:	d100      	bne.n	8003ea8 <HAL_PCD_IRQHandler+0x4b4>
 8003ea6:	e082      	b.n	8003fae <HAL_PCD_IRQHandler+0x5ba>
 8003ea8:	4b82      	ldr	r3, [pc, #520]	@ (80040b4 <HAL_PCD_IRQHandler+0x6c0>)
 8003eaa:	2750      	movs	r7, #80	@ 0x50
 8003eac:	4698      	mov	r8, r3
 8003eae:	5bc1      	ldrh	r1, [r0, r7]
 8003eb0:	9b02      	ldr	r3, [sp, #8]
 8003eb2:	4480      	add	r8, r0
 8003eb4:	4441      	add	r1, r8
 8003eb6:	5ac9      	ldrh	r1, [r1, r3]
 8003eb8:	9b01      	ldr	r3, [sp, #4]
 8003eba:	0589      	lsls	r1, r1, #22
 8003ebc:	0d89      	lsrs	r1, r1, #22
 8003ebe:	4299      	cmp	r1, r3
 8003ec0:	d300      	bcc.n	8003ec4 <HAL_PCD_IRQHandler+0x4d0>
 8003ec2:	e1a2      	b.n	800420a <HAL_PCD_IRQHandler+0x816>
 8003ec4:	1a5b      	subs	r3, r3, r1
 8003ec6:	6293      	str	r3, [r2, #40]	@ 0x28
 8003ec8:	2e00      	cmp	r6, #0
 8003eca:	d008      	beq.n	8003ede <HAL_PCD_IRQHandler+0x4ea>
 8003ecc:	464b      	mov	r3, r9
 8003ece:	009f      	lsls	r7, r3, #2
 8003ed0:	19c7      	adds	r7, r0, r7
 8003ed2:	883b      	ldrh	r3, [r7, #0]
 8003ed4:	4e78      	ldr	r6, [pc, #480]	@ (80040b8 <HAL_PCD_IRQHandler+0x6c4>)
 8003ed6:	4033      	ands	r3, r6
 8003ed8:	4e78      	ldr	r6, [pc, #480]	@ (80040bc <HAL_PCD_IRQHandler+0x6c8>)
 8003eda:	4333      	orrs	r3, r6
 8003edc:	803b      	strh	r3, [r7, #0]
 8003ede:	9b00      	ldr	r3, [sp, #0]
 8003ee0:	195b      	adds	r3, r3, r5
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	18e3      	adds	r3, r4, r3
 8003ee6:	001f      	movs	r7, r3
 8003ee8:	3734      	adds	r7, #52	@ 0x34
 8003eea:	783e      	ldrb	r6, [r7, #0]
 8003eec:	2e01      	cmp	r6, #1
 8003eee:	d000      	beq.n	8003ef2 <HAL_PCD_IRQHandler+0x4fe>
 8003ef0:	e084      	b.n	8003ffc <HAL_PCD_IRQHandler+0x608>
 8003ef2:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8003ef4:	46b1      	mov	r9, r6
 8003ef6:	4489      	add	r9, r1
 8003ef8:	464e      	mov	r6, r9
 8003efa:	625e      	str	r6, [r3, #36]	@ 0x24
 8003efc:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8003efe:	46b4      	mov	ip, r6
 8003f00:	448c      	add	ip, r1
 8003f02:	4666      	mov	r6, ip
 8003f04:	62d6      	str	r6, [r2, #44]	@ 0x2c
 8003f06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f08:	4694      	mov	ip, r2
 8003f0a:	6a1a      	ldr	r2, [r3, #32]
 8003f0c:	4594      	cmp	ip, r2
 8003f0e:	d200      	bcs.n	8003f12 <HAL_PCD_IRQHandler+0x51e>
 8003f10:	e288      	b.n	8004424 <HAL_PCD_IRQHandler+0xa30>
 8003f12:	4661      	mov	r1, ip
 8003f14:	1a89      	subs	r1, r1, r2
 8003f16:	6319      	str	r1, [r3, #48]	@ 0x30
 8003f18:	b291      	uxth	r1, r2
 8003f1a:	9b00      	ldr	r3, [sp, #0]
 8003f1c:	195b      	adds	r3, r3, r5
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	18e3      	adds	r3, r4, r3
 8003f22:	7c5b      	ldrb	r3, [r3, #17]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d000      	beq.n	8003f2a <HAL_PCD_IRQHandler+0x536>
 8003f28:	e271      	b.n	800440e <HAL_PCD_IRQHandler+0xa1a>
 8003f2a:	9e02      	ldr	r6, [sp, #8]
 8003f2c:	3350      	adds	r3, #80	@ 0x50
 8003f2e:	46b4      	mov	ip, r6
 8003f30:	5ac3      	ldrh	r3, [r0, r3]
 8003f32:	4443      	add	r3, r8
 8003f34:	4463      	add	r3, ip
 8003f36:	881f      	ldrh	r7, [r3, #0]
 8003f38:	05bf      	lsls	r7, r7, #22
 8003f3a:	0dbf      	lsrs	r7, r7, #22
 8003f3c:	801f      	strh	r7, [r3, #0]
 8003f3e:	2a00      	cmp	r2, #0
 8003f40:	d000      	beq.n	8003f44 <HAL_PCD_IRQHandler+0x550>
 8003f42:	e2aa      	b.n	800449a <HAL_PCD_IRQHandler+0xaa6>
 8003f44:	2780      	movs	r7, #128	@ 0x80
 8003f46:	881a      	ldrh	r2, [r3, #0]
 8003f48:	023f      	lsls	r7, r7, #8
 8003f4a:	433a      	orrs	r2, r7
 8003f4c:	801a      	strh	r2, [r3, #0]
 8003f4e:	9b00      	ldr	r3, [sp, #0]
 8003f50:	195b      	adds	r3, r3, r5
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	18e3      	adds	r3, r4, r3
 8003f56:	8b1a      	ldrh	r2, [r3, #24]
 8003f58:	000b      	movs	r3, r1
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	f002 f9d2 	bl	8006304 <USB_WritePMA>
 8003f60:	6820      	ldr	r0, [r4, #0]
 8003f62:	e04b      	b.n	8003ffc <HAL_PCD_IRQHandler+0x608>
 8003f64:	3151      	adds	r1, #81	@ 0x51
 8003f66:	31ff      	adds	r1, #255	@ 0xff
 8003f68:	6820      	ldr	r0, [r4, #0]
 8003f6a:	1861      	adds	r1, r4, r1
 8003f6c:	f001 fe5a 	bl	8005c24 <USB_EPStartXfer>
 8003f70:	6820      	ldr	r0, [r4, #0]
 8003f72:	e5ac      	b.n	8003ace <HAL_PCD_IRQHandler+0xda>
 8003f74:	2150      	movs	r1, #80	@ 0x50
 8003f76:	5a41      	ldrh	r1, [r0, r1]
 8003f78:	00d2      	lsls	r2, r2, #3
 8003f7a:	1852      	adds	r2, r2, r1
 8003f7c:	4949      	ldr	r1, [pc, #292]	@ (80040a4 <HAL_PCD_IRQHandler+0x6b0>)
 8003f7e:	1812      	adds	r2, r2, r0
 8003f80:	468c      	mov	ip, r1
 8003f82:	4462      	add	r2, ip
 8003f84:	8812      	ldrh	r2, [r2, #0]
 8003f86:	0592      	lsls	r2, r2, #22
 8003f88:	0d91      	lsrs	r1, r2, #22
 8003f8a:	4688      	mov	r8, r1
 8003f8c:	2a00      	cmp	r2, #0
 8003f8e:	d100      	bne.n	8003f92 <HAL_PCD_IRQHandler+0x59e>
 8003f90:	e61a      	b.n	8003bc8 <HAL_PCD_IRQHandler+0x1d4>
 8003f92:	001a      	movs	r2, r3
 8003f94:	325b      	adds	r2, #91	@ 0x5b
 8003f96:	e001      	b.n	8003f9c <HAL_PCD_IRQHandler+0x5a8>
 8003f98:	001a      	movs	r2, r3
 8003f9a:	3257      	adds	r2, #87	@ 0x57
 8003f9c:	3365      	adds	r3, #101	@ 0x65
 8003f9e:	33ff      	adds	r3, #255	@ 0xff
 8003fa0:	32ff      	adds	r2, #255	@ 0xff
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	8812      	ldrh	r2, [r2, #0]
 8003fa6:	4643      	mov	r3, r8
 8003fa8:	f002 f9c4 	bl	8006334 <USB_ReadPMA>
 8003fac:	e60e      	b.n	8003bcc <HAL_PCD_IRQHandler+0x1d8>
 8003fae:	4b3d      	ldr	r3, [pc, #244]	@ (80040a4 <HAL_PCD_IRQHandler+0x6b0>)
 8003fb0:	2150      	movs	r1, #80	@ 0x50
 8003fb2:	469c      	mov	ip, r3
 8003fb4:	5a41      	ldrh	r1, [r0, r1]
 8003fb6:	9b02      	ldr	r3, [sp, #8]
 8003fb8:	4484      	add	ip, r0
 8003fba:	4461      	add	r1, ip
 8003fbc:	5ac9      	ldrh	r1, [r1, r3]
 8003fbe:	9b01      	ldr	r3, [sp, #4]
 8003fc0:	0589      	lsls	r1, r1, #22
 8003fc2:	0d89      	lsrs	r1, r1, #22
 8003fc4:	4299      	cmp	r1, r3
 8003fc6:	d900      	bls.n	8003fca <HAL_PCD_IRQHandler+0x5d6>
 8003fc8:	e0e0      	b.n	800418c <HAL_PCD_IRQHandler+0x798>
 8003fca:	1a5b      	subs	r3, r3, r1
 8003fcc:	6293      	str	r3, [r2, #40]	@ 0x28
 8003fce:	d100      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x5de>
 8003fd0:	e0de      	b.n	8004190 <HAL_PCD_IRQHandler+0x79c>
 8003fd2:	2e00      	cmp	r6, #0
 8003fd4:	d108      	bne.n	8003fe8 <HAL_PCD_IRQHandler+0x5f4>
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	009f      	lsls	r7, r3, #2
 8003fda:	19c7      	adds	r7, r0, r7
 8003fdc:	883b      	ldrh	r3, [r7, #0]
 8003fde:	4e36      	ldr	r6, [pc, #216]	@ (80040b8 <HAL_PCD_IRQHandler+0x6c4>)
 8003fe0:	4033      	ands	r3, r6
 8003fe2:	4e36      	ldr	r6, [pc, #216]	@ (80040bc <HAL_PCD_IRQHandler+0x6c8>)
 8003fe4:	4333      	orrs	r3, r6
 8003fe6:	803b      	strh	r3, [r7, #0]
 8003fe8:	9b00      	ldr	r3, [sp, #0]
 8003fea:	195b      	adds	r3, r3, r5
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	18e3      	adds	r3, r4, r3
 8003ff0:	001f      	movs	r7, r3
 8003ff2:	3734      	adds	r7, #52	@ 0x34
 8003ff4:	783e      	ldrb	r6, [r7, #0]
 8003ff6:	2e01      	cmp	r6, #1
 8003ff8:	d100      	bne.n	8003ffc <HAL_PCD_IRQHandler+0x608>
 8003ffa:	e1cf      	b.n	800439c <HAL_PCD_IRQHandler+0x9a8>
 8003ffc:	9b00      	ldr	r3, [sp, #0]
 8003ffe:	4a30      	ldr	r2, [pc, #192]	@ (80040c0 <HAL_PCD_IRQHandler+0x6cc>)
 8004000:	469c      	mov	ip, r3
 8004002:	4465      	add	r5, ip
 8004004:	00ed      	lsls	r5, r5, #3
 8004006:	1965      	adds	r5, r4, r5
 8004008:	7c2b      	ldrb	r3, [r5, #16]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	18c3      	adds	r3, r0, r3
 800400e:	8819      	ldrh	r1, [r3, #0]
 8004010:	4011      	ands	r1, r2
 8004012:	2230      	movs	r2, #48	@ 0x30
 8004014:	4051      	eors	r1, r2
 8004016:	4a2b      	ldr	r2, [pc, #172]	@ (80040c4 <HAL_PCD_IRQHandler+0x6d0>)
 8004018:	430a      	orrs	r2, r1
 800401a:	b292      	uxth	r2, r2
 800401c:	801a      	strh	r2, [r3, #0]
 800401e:	e541      	b.n	8003aa4 <HAL_PCD_IRQHandler+0xb0>
 8004020:	7c53      	ldrb	r3, [r2, #17]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d000      	beq.n	8004028 <HAL_PCD_IRQHandler+0x634>
 8004026:	e12d      	b.n	8004284 <HAL_PCD_IRQHandler+0x890>
 8004028:	3350      	adds	r3, #80	@ 0x50
 800402a:	5ac1      	ldrh	r1, [r0, r3]
 800402c:	7c13      	ldrb	r3, [r2, #16]
 800402e:	4a21      	ldr	r2, [pc, #132]	@ (80040b4 <HAL_PCD_IRQHandler+0x6c0>)
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	e70d      	b.n	8003e50 <HAL_PCD_IRQHandler+0x45c>
 8004034:	2044      	movs	r0, #68	@ 0x44
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	5a11      	ldrh	r1, [r2, r0]
 800403a:	4399      	bics	r1, r3
 800403c:	23b2      	movs	r3, #178	@ 0xb2
 800403e:	5211      	strh	r1, [r2, r0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	5ce1      	ldrb	r1, [r4, r3]
 8004044:	2900      	cmp	r1, #0
 8004046:	d000      	beq.n	800404a <HAL_PCD_IRQHandler+0x656>
 8004048:	e08f      	b.n	800416a <HAL_PCD_IRQHandler+0x776>
 800404a:	2504      	movs	r5, #4
 800404c:	3140      	adds	r1, #64	@ 0x40
 800404e:	5a50      	ldrh	r0, [r2, r1]
 8004050:	4328      	orrs	r0, r5
 8004052:	5250      	strh	r0, [r2, r1]
 8004054:	5a50      	ldrh	r0, [r2, r1]
 8004056:	3504      	adds	r5, #4
 8004058:	4328      	orrs	r0, r5
 800405a:	5250      	strh	r0, [r2, r1]
 800405c:	393f      	subs	r1, #63	@ 0x3f
 800405e:	54e1      	strb	r1, [r4, r3]
 8004060:	2354      	movs	r3, #84	@ 0x54
 8004062:	5ad2      	ldrh	r2, [r2, r3]
 8004064:	3b18      	subs	r3, #24
 8004066:	0892      	lsrs	r2, r2, #2
 8004068:	4013      	ands	r3, r2
 800406a:	22b3      	movs	r2, #179	@ 0xb3
 800406c:	0092      	lsls	r2, r2, #2
 800406e:	0020      	movs	r0, r4
 8004070:	50a3      	str	r3, [r4, r2]
 8004072:	f000 fbbf 	bl	80047f4 <HAL_PCDEx_LPM_Callback>
 8004076:	e4f7      	b.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 8004078:	2240      	movs	r2, #64	@ 0x40
 800407a:	2008      	movs	r0, #8
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	4d12      	ldr	r5, [pc, #72]	@ (80040c8 <HAL_PCD_IRQHandler+0x6d4>)
 8004080:	5a99      	ldrh	r1, [r3, r2]
 8004082:	4301      	orrs	r1, r0
 8004084:	5299      	strh	r1, [r3, r2]
 8004086:	303c      	adds	r0, #60	@ 0x3c
 8004088:	5a19      	ldrh	r1, [r3, r0]
 800408a:	4029      	ands	r1, r5
 800408c:	5219      	strh	r1, [r3, r0]
 800408e:	5a99      	ldrh	r1, [r3, r2]
 8004090:	3840      	subs	r0, #64	@ 0x40
 8004092:	4301      	orrs	r1, r0
 8004094:	5299      	strh	r1, [r3, r2]
 8004096:	0020      	movs	r0, r4
 8004098:	f003 f95a 	bl	8007350 <HAL_PCD_SuspendCallback>
 800409c:	e4e4      	b.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	00000f8f 	.word	0x00000f8f
 80040a4:	00000406 	.word	0x00000406
 80040a8:	ffffbf8f 	.word	0xffffbf8f
 80040ac:	00008080 	.word	0x00008080
 80040b0:	ffffdfff 	.word	0xffffdfff
 80040b4:	00000402 	.word	0x00000402
 80040b8:	ffff8f8f 	.word	0xffff8f8f
 80040bc:	0000c080 	.word	0x0000c080
 80040c0:	ffff8fbf 	.word	0xffff8fbf
 80040c4:	ffff8080 	.word	0xffff8080
 80040c8:	fffff7ff 	.word	0xfffff7ff
 80040cc:	3667      	adds	r6, #103	@ 0x67
 80040ce:	36ff      	adds	r6, #255	@ 0xff
 80040d0:	46b4      	mov	ip, r6
 80040d2:	2680      	movs	r6, #128	@ 0x80
 80040d4:	01f6      	lsls	r6, r6, #7
 80040d6:	46b0      	mov	r8, r6
 80040d8:	449c      	add	ip, r3
 80040da:	403e      	ands	r6, r7
 80040dc:	4663      	mov	r3, ip
 80040de:	46b1      	mov	r9, r6
 80040e0:	4646      	mov	r6, r8
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	00d1      	lsls	r1, r2, #3
 80040e6:	4237      	tst	r7, r6
 80040e8:	d100      	bne.n	80040ec <HAL_PCD_IRQHandler+0x6f8>
 80040ea:	e0e7      	b.n	80042bc <HAL_PCD_IRQHandler+0x8c8>
 80040ec:	2650      	movs	r6, #80	@ 0x50
 80040ee:	5b86      	ldrh	r6, [r0, r6]
 80040f0:	46b0      	mov	r8, r6
 80040f2:	4ecf      	ldr	r6, [pc, #828]	@ (8004430 <HAL_PCD_IRQHandler+0xa3c>)
 80040f4:	4441      	add	r1, r8
 80040f6:	46b0      	mov	r8, r6
 80040f8:	1809      	adds	r1, r1, r0
 80040fa:	4441      	add	r1, r8
 80040fc:	8809      	ldrh	r1, [r1, #0]
 80040fe:	0589      	lsls	r1, r1, #22
 8004100:	0d89      	lsrs	r1, r1, #22
 8004102:	4688      	mov	r8, r1
 8004104:	4299      	cmp	r1, r3
 8004106:	d900      	bls.n	800410a <HAL_PCD_IRQHandler+0x716>
 8004108:	e140      	b.n	800438c <HAL_PCD_IRQHandler+0x998>
 800410a:	4666      	mov	r6, ip
 800410c:	1a5b      	subs	r3, r3, r1
 800410e:	6033      	str	r3, [r6, #0]
 8004110:	d10d      	bne.n	800412e <HAL_PCD_IRQHandler+0x73a>
 8004112:	0093      	lsls	r3, r2, #2
 8004114:	469c      	mov	ip, r3
 8004116:	4484      	add	ip, r0
 8004118:	4663      	mov	r3, ip
 800411a:	4ec6      	ldr	r6, [pc, #792]	@ (8004434 <HAL_PCD_IRQHandler+0xa40>)
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	401e      	ands	r6, r3
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	019b      	lsls	r3, r3, #6
 8004124:	4073      	eors	r3, r6
 8004126:	4ec4      	ldr	r6, [pc, #784]	@ (8004438 <HAL_PCD_IRQHandler+0xa44>)
 8004128:	4333      	orrs	r3, r6
 800412a:	4666      	mov	r6, ip
 800412c:	8033      	strh	r3, [r6, #0]
 800412e:	067b      	lsls	r3, r7, #25
 8004130:	d507      	bpl.n	8004142 <HAL_PCD_IRQHandler+0x74e>
 8004132:	0092      	lsls	r2, r2, #2
 8004134:	1882      	adds	r2, r0, r2
 8004136:	8813      	ldrh	r3, [r2, #0]
 8004138:	4ec0      	ldr	r6, [pc, #768]	@ (800443c <HAL_PCD_IRQHandler+0xa48>)
 800413a:	4033      	ands	r3, r6
 800413c:	4ec0      	ldr	r6, [pc, #768]	@ (8004440 <HAL_PCD_IRQHandler+0xa4c>)
 800413e:	4333      	orrs	r3, r6
 8004140:	8013      	strh	r3, [r2, #0]
 8004142:	2900      	cmp	r1, #0
 8004144:	d100      	bne.n	8004148 <HAL_PCD_IRQHandler+0x754>
 8004146:	e541      	b.n	8003bcc <HAL_PCD_IRQHandler+0x1d8>
 8004148:	9b00      	ldr	r3, [sp, #0]
 800414a:	195b      	adds	r3, r3, r5
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	18e3      	adds	r3, r4, r3
 8004150:	001a      	movs	r2, r3
 8004152:	3259      	adds	r2, #89	@ 0x59
 8004154:	3365      	adds	r3, #101	@ 0x65
 8004156:	33ff      	adds	r3, #255	@ 0xff
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	32ff      	adds	r2, #255	@ 0xff
 800415c:	469c      	mov	ip, r3
 800415e:	8812      	ldrh	r2, [r2, #0]
 8004160:	000b      	movs	r3, r1
 8004162:	4661      	mov	r1, ip
 8004164:	f002 f8e6 	bl	8006334 <USB_ReadPMA>
 8004168:	e530      	b.n	8003bcc <HAL_PCD_IRQHandler+0x1d8>
 800416a:	0020      	movs	r0, r4
 800416c:	f003 f8f0 	bl	8007350 <HAL_PCD_SuspendCallback>
 8004170:	e47a      	b.n	8003a68 <HAL_PCD_IRQHandler+0x74>
 8004172:	2a3e      	cmp	r2, #62	@ 0x3e
 8004174:	d900      	bls.n	8004178 <HAL_PCD_IRQHandler+0x784>
 8004176:	e0d5      	b.n	8004324 <HAL_PCD_IRQHandler+0x930>
 8004178:	2501      	movs	r5, #1
 800417a:	0851      	lsrs	r1, r2, #1
 800417c:	402a      	ands	r2, r5
 800417e:	1889      	adds	r1, r1, r2
 8004180:	881a      	ldrh	r2, [r3, #0]
 8004182:	0289      	lsls	r1, r1, #10
 8004184:	430a      	orrs	r2, r1
 8004186:	b292      	uxth	r2, r2
 8004188:	801a      	strh	r2, [r3, #0]
 800418a:	e638      	b.n	8003dfe <HAL_PCD_IRQHandler+0x40a>
 800418c:	4643      	mov	r3, r8
 800418e:	6293      	str	r3, [r2, #40]	@ 0x28
 8004190:	9b00      	ldr	r3, [sp, #0]
 8004192:	195b      	adds	r3, r3, r5
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	18e3      	adds	r3, r4, r3
 8004198:	7c5b      	ldrb	r3, [r3, #17]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d000      	beq.n	80041a0 <HAL_PCD_IRQHandler+0x7ac>
 800419e:	e0e1      	b.n	8004364 <HAL_PCD_IRQHandler+0x970>
 80041a0:	9e02      	ldr	r6, [sp, #8]
 80041a2:	49a3      	ldr	r1, [pc, #652]	@ (8004430 <HAL_PCD_IRQHandler+0xa3c>)
 80041a4:	2750      	movs	r7, #80	@ 0x50
 80041a6:	4688      	mov	r8, r1
 80041a8:	0033      	movs	r3, r6
 80041aa:	5bc2      	ldrh	r2, [r0, r7]
 80041ac:	4443      	add	r3, r8
 80041ae:	18c3      	adds	r3, r0, r3
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	881a      	ldrh	r2, [r3, #0]
 80041b4:	0592      	lsls	r2, r2, #22
 80041b6:	0d92      	lsrs	r2, r2, #22
 80041b8:	801a      	strh	r2, [r3, #0]
 80041ba:	8819      	ldrh	r1, [r3, #0]
 80041bc:	4aa1      	ldr	r2, [pc, #644]	@ (8004444 <HAL_PCD_IRQHandler+0xa50>)
 80041be:	4311      	orrs	r1, r2
 80041c0:	b289      	uxth	r1, r1
 80041c2:	8019      	strh	r1, [r3, #0]
 80041c4:	5bc3      	ldrh	r3, [r0, r7]
 80041c6:	4463      	add	r3, ip
 80041c8:	46b4      	mov	ip, r6
 80041ca:	4463      	add	r3, ip
 80041cc:	8819      	ldrh	r1, [r3, #0]
 80041ce:	0589      	lsls	r1, r1, #22
 80041d0:	0d89      	lsrs	r1, r1, #22
 80041d2:	8019      	strh	r1, [r3, #0]
 80041d4:	8819      	ldrh	r1, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	b292      	uxth	r2, r2
 80041da:	801a      	strh	r2, [r3, #0]
 80041dc:	0020      	movs	r0, r4
 80041de:	4649      	mov	r1, r9
 80041e0:	f003 f890 	bl	8007304 <HAL_PCD_DataInStageCallback>
 80041e4:	9b03      	ldr	r3, [sp, #12]
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d000      	beq.n	80041ee <HAL_PCD_IRQHandler+0x7fa>
 80041ec:	e706      	b.n	8003ffc <HAL_PCD_IRQHandler+0x608>
 80041ee:	9b00      	ldr	r3, [sp, #0]
 80041f0:	4992      	ldr	r1, [pc, #584]	@ (800443c <HAL_PCD_IRQHandler+0xa48>)
 80041f2:	195b      	adds	r3, r3, r5
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	18e3      	adds	r3, r4, r3
 80041f8:	7c1b      	ldrb	r3, [r3, #16]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	18c3      	adds	r3, r0, r3
 80041fe:	881a      	ldrh	r2, [r3, #0]
 8004200:	400a      	ands	r2, r1
 8004202:	4991      	ldr	r1, [pc, #580]	@ (8004448 <HAL_PCD_IRQHandler+0xa54>)
 8004204:	430a      	orrs	r2, r1
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	e6f8      	b.n	8003ffc <HAL_PCD_IRQHandler+0x608>
 800420a:	2300      	movs	r3, #0
 800420c:	6293      	str	r3, [r2, #40]	@ 0x28
 800420e:	7c52      	ldrb	r2, [r2, #17]
 8004210:	2a00      	cmp	r2, #0
 8004212:	d000      	beq.n	8004216 <HAL_PCD_IRQHandler+0x822>
 8004214:	e094      	b.n	8004340 <HAL_PCD_IRQHandler+0x94c>
 8004216:	5bc3      	ldrh	r3, [r0, r7]
 8004218:	9902      	ldr	r1, [sp, #8]
 800421a:	4443      	add	r3, r8
 800421c:	4688      	mov	r8, r1
 800421e:	4666      	mov	r6, ip
 8004220:	4443      	add	r3, r8
 8004222:	881a      	ldrh	r2, [r3, #0]
 8004224:	0592      	lsls	r2, r2, #22
 8004226:	0d92      	lsrs	r2, r2, #22
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	881a      	ldrh	r2, [r3, #0]
 800422c:	4332      	orrs	r2, r6
 800422e:	b292      	uxth	r2, r2
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	000b      	movs	r3, r1
 8004234:	4985      	ldr	r1, [pc, #532]	@ (800444c <HAL_PCD_IRQHandler+0xa58>)
 8004236:	5bc2      	ldrh	r2, [r0, r7]
 8004238:	4688      	mov	r8, r1
 800423a:	4443      	add	r3, r8
 800423c:	181b      	adds	r3, r3, r0
 800423e:	189b      	adds	r3, r3, r2
 8004240:	881a      	ldrh	r2, [r3, #0]
 8004242:	0592      	lsls	r2, r2, #22
 8004244:	0d92      	lsrs	r2, r2, #22
 8004246:	801a      	strh	r2, [r3, #0]
 8004248:	881a      	ldrh	r2, [r3, #0]
 800424a:	4332      	orrs	r2, r6
 800424c:	b292      	uxth	r2, r2
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	0020      	movs	r0, r4
 8004252:	4649      	mov	r1, r9
 8004254:	f003 f856 	bl	8007304 <HAL_PCD_DataInStageCallback>
 8004258:	9b03      	ldr	r3, [sp, #12]
 800425a:	6820      	ldr	r0, [r4, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1c6      	bne.n	80041ee <HAL_PCD_IRQHandler+0x7fa>
 8004260:	e6cc      	b.n	8003ffc <HAL_PCD_IRQHandler+0x608>
 8004262:	2244      	movs	r2, #68	@ 0x44
 8004264:	6821      	ldr	r1, [r4, #0]
 8004266:	487a      	ldr	r0, [pc, #488]	@ (8004450 <HAL_PCD_IRQHandler+0xa5c>)
 8004268:	5a8b      	ldrh	r3, [r1, r2]
 800426a:	4003      	ands	r3, r0
 800426c:	528b      	strh	r3, [r1, r2]
 800426e:	0020      	movs	r0, r4
 8004270:	f003 f854 	bl	800731c <HAL_PCD_SOFCallback>
 8004274:	f7ff fbf8 	bl	8003a68 <HAL_PCD_IRQHandler+0x74>
 8004278:	2100      	movs	r1, #0
 800427a:	0020      	movs	r0, r4
 800427c:	54e5      	strb	r5, [r4, r3]
 800427e:	f000 fab9 	bl	80047f4 <HAL_PCDEx_LPM_Callback>
 8004282:	e474      	b.n	8003b6e <HAL_PCD_IRQHandler+0x17a>
 8004284:	2b01      	cmp	r3, #1
 8004286:	d000      	beq.n	800428a <HAL_PCD_IRQHandler+0x896>
 8004288:	e5ef      	b.n	8003e6a <HAL_PCD_IRQHandler+0x476>
 800428a:	334f      	adds	r3, #79	@ 0x4f
 800428c:	5ac7      	ldrh	r7, [r0, r3]
 800428e:	7c13      	ldrb	r3, [r2, #16]
 8004290:	4a67      	ldr	r2, [pc, #412]	@ (8004430 <HAL_PCD_IRQHandler+0xa3c>)
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	4694      	mov	ip, r2
 8004296:	4463      	add	r3, ip
 8004298:	18c3      	adds	r3, r0, r3
 800429a:	19db      	adds	r3, r3, r7
 800429c:	8019      	strh	r1, [r3, #0]
 800429e:	e5e4      	b.n	8003e6a <HAL_PCD_IRQHandler+0x476>
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d000      	beq.n	80042a6 <HAL_PCD_IRQHandler+0x8b2>
 80042a4:	e5e1      	b.n	8003e6a <HAL_PCD_IRQHandler+0x476>
 80042a6:	334f      	adds	r3, #79	@ 0x4f
 80042a8:	5ac1      	ldrh	r1, [r0, r3]
 80042aa:	7c13      	ldrb	r3, [r2, #16]
 80042ac:	4a67      	ldr	r2, [pc, #412]	@ (800444c <HAL_PCD_IRQHandler+0xa58>)
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4694      	mov	ip, r2
 80042b2:	4463      	add	r3, ip
 80042b4:	181b      	adds	r3, r3, r0
 80042b6:	185b      	adds	r3, r3, r1
 80042b8:	801e      	strh	r6, [r3, #0]
 80042ba:	e5d6      	b.n	8003e6a <HAL_PCD_IRQHandler+0x476>
 80042bc:	2650      	movs	r6, #80	@ 0x50
 80042be:	5b86      	ldrh	r6, [r0, r6]
 80042c0:	46b0      	mov	r8, r6
 80042c2:	4e62      	ldr	r6, [pc, #392]	@ (800444c <HAL_PCD_IRQHandler+0xa58>)
 80042c4:	4441      	add	r1, r8
 80042c6:	46b0      	mov	r8, r6
 80042c8:	1809      	adds	r1, r1, r0
 80042ca:	4441      	add	r1, r8
 80042cc:	8809      	ldrh	r1, [r1, #0]
 80042ce:	0589      	lsls	r1, r1, #22
 80042d0:	0d89      	lsrs	r1, r1, #22
 80042d2:	4688      	mov	r8, r1
 80042d4:	4299      	cmp	r1, r3
 80042d6:	d85d      	bhi.n	8004394 <HAL_PCD_IRQHandler+0x9a0>
 80042d8:	4666      	mov	r6, ip
 80042da:	1a5b      	subs	r3, r3, r1
 80042dc:	6033      	str	r3, [r6, #0]
 80042de:	d10d      	bne.n	80042fc <HAL_PCD_IRQHandler+0x908>
 80042e0:	0093      	lsls	r3, r2, #2
 80042e2:	469c      	mov	ip, r3
 80042e4:	4484      	add	ip, r0
 80042e6:	4663      	mov	r3, ip
 80042e8:	4e52      	ldr	r6, [pc, #328]	@ (8004434 <HAL_PCD_IRQHandler+0xa40>)
 80042ea:	881b      	ldrh	r3, [r3, #0]
 80042ec:	401e      	ands	r6, r3
 80042ee:	2380      	movs	r3, #128	@ 0x80
 80042f0:	019b      	lsls	r3, r3, #6
 80042f2:	4073      	eors	r3, r6
 80042f4:	4e50      	ldr	r6, [pc, #320]	@ (8004438 <HAL_PCD_IRQHandler+0xa44>)
 80042f6:	4333      	orrs	r3, r6
 80042f8:	4666      	mov	r6, ip
 80042fa:	8033      	strh	r3, [r6, #0]
 80042fc:	067b      	lsls	r3, r7, #25
 80042fe:	d407      	bmi.n	8004310 <HAL_PCD_IRQHandler+0x91c>
 8004300:	0092      	lsls	r2, r2, #2
 8004302:	1882      	adds	r2, r0, r2
 8004304:	8813      	ldrh	r3, [r2, #0]
 8004306:	4e4d      	ldr	r6, [pc, #308]	@ (800443c <HAL_PCD_IRQHandler+0xa48>)
 8004308:	4033      	ands	r3, r6
 800430a:	4e4d      	ldr	r6, [pc, #308]	@ (8004440 <HAL_PCD_IRQHandler+0xa4c>)
 800430c:	4333      	orrs	r3, r6
 800430e:	8013      	strh	r3, [r2, #0]
 8004310:	2900      	cmp	r1, #0
 8004312:	d100      	bne.n	8004316 <HAL_PCD_IRQHandler+0x922>
 8004314:	e45a      	b.n	8003bcc <HAL_PCD_IRQHandler+0x1d8>
 8004316:	9b00      	ldr	r3, [sp, #0]
 8004318:	195b      	adds	r3, r3, r5
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	18e3      	adds	r3, r4, r3
 800431e:	001a      	movs	r2, r3
 8004320:	325b      	adds	r2, #91	@ 0x5b
 8004322:	e717      	b.n	8004154 <HAL_PCD_IRQHandler+0x760>
 8004324:	251f      	movs	r5, #31
 8004326:	0951      	lsrs	r1, r2, #5
 8004328:	402a      	ands	r2, r5
 800432a:	4255      	negs	r5, r2
 800432c:	416a      	adcs	r2, r5
 800432e:	1a89      	subs	r1, r1, r2
 8004330:	881a      	ldrh	r2, [r3, #0]
 8004332:	0289      	lsls	r1, r1, #10
 8004334:	4311      	orrs	r1, r2
 8004336:	4a43      	ldr	r2, [pc, #268]	@ (8004444 <HAL_PCD_IRQHandler+0xa50>)
 8004338:	430a      	orrs	r2, r1
 800433a:	b292      	uxth	r2, r2
 800433c:	801a      	strh	r2, [r3, #0]
 800433e:	e55e      	b.n	8003dfe <HAL_PCD_IRQHandler+0x40a>
 8004340:	2a01      	cmp	r2, #1
 8004342:	d000      	beq.n	8004346 <HAL_PCD_IRQHandler+0x952>
 8004344:	e784      	b.n	8004250 <HAL_PCD_IRQHandler+0x85c>
 8004346:	9e02      	ldr	r6, [sp, #8]
 8004348:	5bc2      	ldrh	r2, [r0, r7]
 800434a:	46b4      	mov	ip, r6
 800434c:	4442      	add	r2, r8
 800434e:	4462      	add	r2, ip
 8004350:	8013      	strh	r3, [r2, #0]
 8004352:	0032      	movs	r2, r6
 8004354:	4e3d      	ldr	r6, [pc, #244]	@ (800444c <HAL_PCD_IRQHandler+0xa58>)
 8004356:	5bc1      	ldrh	r1, [r0, r7]
 8004358:	46b4      	mov	ip, r6
 800435a:	4462      	add	r2, ip
 800435c:	1812      	adds	r2, r2, r0
 800435e:	1852      	adds	r2, r2, r1
 8004360:	8013      	strh	r3, [r2, #0]
 8004362:	e775      	b.n	8004250 <HAL_PCD_IRQHandler+0x85c>
 8004364:	2b01      	cmp	r3, #1
 8004366:	d000      	beq.n	800436a <HAL_PCD_IRQHandler+0x976>
 8004368:	e738      	b.n	80041dc <HAL_PCD_IRQHandler+0x7e8>
 800436a:	9e02      	ldr	r6, [sp, #8]
 800436c:	4f30      	ldr	r7, [pc, #192]	@ (8004430 <HAL_PCD_IRQHandler+0xa3c>)
 800436e:	2150      	movs	r1, #80	@ 0x50
 8004370:	0033      	movs	r3, r6
 8004372:	46b8      	mov	r8, r7
 8004374:	5a42      	ldrh	r2, [r0, r1]
 8004376:	4443      	add	r3, r8
 8004378:	18c3      	adds	r3, r0, r3
 800437a:	189b      	adds	r3, r3, r2
 800437c:	2200      	movs	r2, #0
 800437e:	801a      	strh	r2, [r3, #0]
 8004380:	5a43      	ldrh	r3, [r0, r1]
 8004382:	4463      	add	r3, ip
 8004384:	46b4      	mov	ip, r6
 8004386:	4463      	add	r3, ip
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	e727      	b.n	80041dc <HAL_PCD_IRQHandler+0x7e8>
 800438c:	2300      	movs	r3, #0
 800438e:	4666      	mov	r6, ip
 8004390:	6033      	str	r3, [r6, #0]
 8004392:	e6be      	b.n	8004112 <HAL_PCD_IRQHandler+0x71e>
 8004394:	4663      	mov	r3, ip
 8004396:	464e      	mov	r6, r9
 8004398:	601e      	str	r6, [r3, #0]
 800439a:	e7a1      	b.n	80042e0 <HAL_PCD_IRQHandler+0x8ec>
 800439c:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 800439e:	46b1      	mov	r9, r6
 80043a0:	4489      	add	r9, r1
 80043a2:	464e      	mov	r6, r9
 80043a4:	625e      	str	r6, [r3, #36]	@ 0x24
 80043a6:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 80043a8:	46b0      	mov	r8, r6
 80043aa:	4488      	add	r8, r1
 80043ac:	4646      	mov	r6, r8
 80043ae:	62d6      	str	r6, [r2, #44]	@ 0x2c
 80043b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043b2:	4690      	mov	r8, r2
 80043b4:	6a1a      	ldr	r2, [r3, #32]
 80043b6:	4590      	cmp	r8, r2
 80043b8:	d358      	bcc.n	800446c <HAL_PCD_IRQHandler+0xa78>
 80043ba:	4641      	mov	r1, r8
 80043bc:	1a89      	subs	r1, r1, r2
 80043be:	6319      	str	r1, [r3, #48]	@ 0x30
 80043c0:	b291      	uxth	r1, r2
 80043c2:	9b00      	ldr	r3, [sp, #0]
 80043c4:	195b      	adds	r3, r3, r5
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	18e3      	adds	r3, r4, r3
 80043ca:	7c5b      	ldrb	r3, [r3, #17]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d143      	bne.n	8004458 <HAL_PCD_IRQHandler+0xa64>
 80043d0:	3350      	adds	r3, #80	@ 0x50
 80043d2:	5ac3      	ldrh	r3, [r0, r3]
 80043d4:	9e02      	ldr	r6, [sp, #8]
 80043d6:	4463      	add	r3, ip
 80043d8:	46b4      	mov	ip, r6
 80043da:	4463      	add	r3, ip
 80043dc:	881f      	ldrh	r7, [r3, #0]
 80043de:	05bf      	lsls	r7, r7, #22
 80043e0:	0dbf      	lsrs	r7, r7, #22
 80043e2:	801f      	strh	r7, [r3, #0]
 80043e4:	2a00      	cmp	r2, #0
 80043e6:	d000      	beq.n	80043ea <HAL_PCD_IRQHandler+0x9f6>
 80043e8:	e075      	b.n	80044d6 <HAL_PCD_IRQHandler+0xae2>
 80043ea:	2780      	movs	r7, #128	@ 0x80
 80043ec:	881a      	ldrh	r2, [r3, #0]
 80043ee:	023f      	lsls	r7, r7, #8
 80043f0:	433a      	orrs	r2, r7
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	9b00      	ldr	r3, [sp, #0]
 80043f6:	195b      	adds	r3, r3, r5
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	18e3      	adds	r3, r4, r3
 80043fc:	8b5a      	ldrh	r2, [r3, #26]
 80043fe:	000b      	movs	r3, r1
 8004400:	4649      	mov	r1, r9
 8004402:	f001 ff7f 	bl	8006304 <USB_WritePMA>
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	e5f8      	b.n	8003ffc <HAL_PCD_IRQHandler+0x608>
 800440a:	4662      	mov	r2, ip
 800440c:	b291      	uxth	r1, r2
 800440e:	2b01      	cmp	r3, #1
 8004410:	d000      	beq.n	8004414 <HAL_PCD_IRQHandler+0xa20>
 8004412:	e59c      	b.n	8003f4e <HAL_PCD_IRQHandler+0x55a>
 8004414:	9a02      	ldr	r2, [sp, #8]
 8004416:	334f      	adds	r3, #79	@ 0x4f
 8004418:	4694      	mov	ip, r2
 800441a:	5ac3      	ldrh	r3, [r0, r3]
 800441c:	4443      	add	r3, r8
 800441e:	4463      	add	r3, ip
 8004420:	8019      	strh	r1, [r3, #0]
 8004422:	e594      	b.n	8003f4e <HAL_PCD_IRQHandler+0x55a>
 8004424:	4662      	mov	r2, ip
 8004426:	2a00      	cmp	r2, #0
 8004428:	d126      	bne.n	8004478 <HAL_PCD_IRQHandler+0xa84>
 800442a:	703a      	strb	r2, [r7, #0]
 800442c:	000a      	movs	r2, r1
 800442e:	e574      	b.n	8003f1a <HAL_PCD_IRQHandler+0x526>
 8004430:	00000402 	.word	0x00000402
 8004434:	ffffbf8f 	.word	0xffffbf8f
 8004438:	00008080 	.word	0x00008080
 800443c:	ffff8f8f 	.word	0xffff8f8f
 8004440:	000080c0 	.word	0x000080c0
 8004444:	ffff8000 	.word	0xffff8000
 8004448:	0000c080 	.word	0x0000c080
 800444c:	00000406 	.word	0x00000406
 8004450:	fffffdff 	.word	0xfffffdff
 8004454:	4642      	mov	r2, r8
 8004456:	b291      	uxth	r1, r2
 8004458:	2b01      	cmp	r3, #1
 800445a:	d1cb      	bne.n	80043f4 <HAL_PCD_IRQHandler+0xa00>
 800445c:	334f      	adds	r3, #79	@ 0x4f
 800445e:	5ac3      	ldrh	r3, [r0, r3]
 8004460:	9a02      	ldr	r2, [sp, #8]
 8004462:	4463      	add	r3, ip
 8004464:	4694      	mov	ip, r2
 8004466:	4463      	add	r3, ip
 8004468:	8019      	strh	r1, [r3, #0]
 800446a:	e7c3      	b.n	80043f4 <HAL_PCD_IRQHandler+0xa00>
 800446c:	4642      	mov	r2, r8
 800446e:	2a00      	cmp	r2, #0
 8004470:	d120      	bne.n	80044b4 <HAL_PCD_IRQHandler+0xac0>
 8004472:	703a      	strb	r2, [r7, #0]
 8004474:	000a      	movs	r2, r1
 8004476:	e7a4      	b.n	80043c2 <HAL_PCD_IRQHandler+0x9ce>
 8004478:	2200      	movs	r2, #0
 800447a:	703a      	strb	r2, [r7, #0]
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
 800447e:	7c5b      	ldrb	r3, [r3, #17]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1c2      	bne.n	800440a <HAL_PCD_IRQHandler+0xa16>
 8004484:	2350      	movs	r3, #80	@ 0x50
 8004486:	9a02      	ldr	r2, [sp, #8]
 8004488:	5ac3      	ldrh	r3, [r0, r3]
 800448a:	4443      	add	r3, r8
 800448c:	4690      	mov	r8, r2
 800448e:	4443      	add	r3, r8
 8004490:	881a      	ldrh	r2, [r3, #0]
 8004492:	0592      	lsls	r2, r2, #22
 8004494:	0d92      	lsrs	r2, r2, #22
 8004496:	801a      	strh	r2, [r3, #0]
 8004498:	4662      	mov	r2, ip
 800449a:	2a3e      	cmp	r2, #62	@ 0x3e
 800449c:	d828      	bhi.n	80044f0 <HAL_PCD_IRQHandler+0xafc>
 800449e:	2101      	movs	r1, #1
 80044a0:	0857      	lsrs	r7, r2, #1
 80044a2:	4011      	ands	r1, r2
 80044a4:	187f      	adds	r7, r7, r1
 80044a6:	8819      	ldrh	r1, [r3, #0]
 80044a8:	02bf      	lsls	r7, r7, #10
 80044aa:	4339      	orrs	r1, r7
 80044ac:	b289      	uxth	r1, r1
 80044ae:	8019      	strh	r1, [r3, #0]
 80044b0:	b291      	uxth	r1, r2
 80044b2:	e54c      	b.n	8003f4e <HAL_PCD_IRQHandler+0x55a>
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80044b8:	703a      	strb	r2, [r7, #0]
 80044ba:	7c5b      	ldrb	r3, [r3, #17]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1c9      	bne.n	8004454 <HAL_PCD_IRQHandler+0xa60>
 80044c0:	2350      	movs	r3, #80	@ 0x50
 80044c2:	9a02      	ldr	r2, [sp, #8]
 80044c4:	5ac3      	ldrh	r3, [r0, r3]
 80044c6:	4463      	add	r3, ip
 80044c8:	4694      	mov	ip, r2
 80044ca:	4463      	add	r3, ip
 80044cc:	881a      	ldrh	r2, [r3, #0]
 80044ce:	0592      	lsls	r2, r2, #22
 80044d0:	0d92      	lsrs	r2, r2, #22
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	4642      	mov	r2, r8
 80044d6:	2a3e      	cmp	r2, #62	@ 0x3e
 80044d8:	d81a      	bhi.n	8004510 <HAL_PCD_IRQHandler+0xb1c>
 80044da:	2101      	movs	r1, #1
 80044dc:	0857      	lsrs	r7, r2, #1
 80044de:	4011      	ands	r1, r2
 80044e0:	187f      	adds	r7, r7, r1
 80044e2:	8819      	ldrh	r1, [r3, #0]
 80044e4:	02bf      	lsls	r7, r7, #10
 80044e6:	4339      	orrs	r1, r7
 80044e8:	b289      	uxth	r1, r1
 80044ea:	8019      	strh	r1, [r3, #0]
 80044ec:	b291      	uxth	r1, r2
 80044ee:	e781      	b.n	80043f4 <HAL_PCD_IRQHandler+0xa00>
 80044f0:	271f      	movs	r7, #31
 80044f2:	4017      	ands	r7, r2
 80044f4:	003e      	movs	r6, r7
 80044f6:	4277      	negs	r7, r6
 80044f8:	4177      	adcs	r7, r6
 80044fa:	0951      	lsrs	r1, r2, #5
 80044fc:	1bc9      	subs	r1, r1, r7
 80044fe:	881f      	ldrh	r7, [r3, #0]
 8004500:	0289      	lsls	r1, r1, #10
 8004502:	430f      	orrs	r7, r1
 8004504:	490a      	ldr	r1, [pc, #40]	@ (8004530 <HAL_PCD_IRQHandler+0xb3c>)
 8004506:	4339      	orrs	r1, r7
 8004508:	b289      	uxth	r1, r1
 800450a:	8019      	strh	r1, [r3, #0]
 800450c:	b291      	uxth	r1, r2
 800450e:	e51e      	b.n	8003f4e <HAL_PCD_IRQHandler+0x55a>
 8004510:	271f      	movs	r7, #31
 8004512:	4017      	ands	r7, r2
 8004514:	003e      	movs	r6, r7
 8004516:	4277      	negs	r7, r6
 8004518:	4177      	adcs	r7, r6
 800451a:	0951      	lsrs	r1, r2, #5
 800451c:	1bc9      	subs	r1, r1, r7
 800451e:	881f      	ldrh	r7, [r3, #0]
 8004520:	0289      	lsls	r1, r1, #10
 8004522:	430f      	orrs	r7, r1
 8004524:	4902      	ldr	r1, [pc, #8]	@ (8004530 <HAL_PCD_IRQHandler+0xb3c>)
 8004526:	4339      	orrs	r1, r7
 8004528:	b289      	uxth	r1, r1
 800452a:	8019      	strh	r1, [r3, #0]
 800452c:	b291      	uxth	r1, r2
 800452e:	e761      	b.n	80043f4 <HAL_PCD_IRQHandler+0xa00>
 8004530:	ffff8000 	.word	0xffff8000

08004534 <HAL_PCD_SetAddress>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	25a4      	movs	r5, #164	@ 0xa4
 8004538:	00ad      	lsls	r5, r5, #2
 800453a:	5d43      	ldrb	r3, [r0, r5]
 800453c:	0004      	movs	r4, r0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d009      	beq.n	8004556 <HAL_PCD_SetAddress+0x22>
 8004542:	2301      	movs	r3, #1
 8004544:	5543      	strb	r3, [r0, r5]
 8004546:	7301      	strb	r1, [r0, #12]
 8004548:	6800      	ldr	r0, [r0, #0]
 800454a:	f001 fec7 	bl	80062dc <USB_SetDevAddress>
 800454e:	2300      	movs	r3, #0
 8004550:	2000      	movs	r0, #0
 8004552:	5563      	strb	r3, [r4, r5]
 8004554:	bd70      	pop	{r4, r5, r6, pc}
 8004556:	2002      	movs	r0, #2
 8004558:	e7fc      	b.n	8004554 <HAL_PCD_SetAddress+0x20>
 800455a:	46c0      	nop			@ (mov r8, r8)

0800455c <HAL_PCD_EP_Open>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	0005      	movs	r5, r0
 8004560:	2007      	movs	r0, #7
 8004562:	4008      	ands	r0, r1
 8004564:	0084      	lsls	r4, r0, #2
 8004566:	1824      	adds	r4, r4, r0
 8004568:	b249      	sxtb	r1, r1
 800456a:	00e4      	lsls	r4, r4, #3
 800456c:	2900      	cmp	r1, #0
 800456e:	db1d      	blt.n	80045ac <HAL_PCD_EP_Open+0x50>
 8004570:	0021      	movs	r1, r4
 8004572:	2600      	movs	r6, #0
 8004574:	192c      	adds	r4, r5, r4
 8004576:	3151      	adds	r1, #81	@ 0x51
 8004578:	3452      	adds	r4, #82	@ 0x52
 800457a:	31ff      	adds	r1, #255	@ 0xff
 800457c:	34ff      	adds	r4, #255	@ 0xff
 800457e:	1869      	adds	r1, r5, r1
 8004580:	7026      	strb	r6, [r4, #0]
 8004582:	7008      	strb	r0, [r1, #0]
 8004584:	610a      	str	r2, [r1, #16]
 8004586:	70cb      	strb	r3, [r1, #3]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d101      	bne.n	8004590 <HAL_PCD_EP_Open+0x34>
 800458c:	2300      	movs	r3, #0
 800458e:	710b      	strb	r3, [r1, #4]
 8004590:	24a4      	movs	r4, #164	@ 0xa4
 8004592:	00a4      	lsls	r4, r4, #2
 8004594:	5d2b      	ldrb	r3, [r5, r4]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d00f      	beq.n	80045ba <HAL_PCD_EP_Open+0x5e>
 800459a:	2301      	movs	r3, #1
 800459c:	552b      	strb	r3, [r5, r4]
 800459e:	6828      	ldr	r0, [r5, #0]
 80045a0:	f001 f95c 	bl	800585c <USB_ActivateEndpoint>
 80045a4:	2300      	movs	r3, #0
 80045a6:	2000      	movs	r0, #0
 80045a8:	552b      	strb	r3, [r5, r4]
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	0021      	movs	r1, r4
 80045ae:	2601      	movs	r6, #1
 80045b0:	3110      	adds	r1, #16
 80045b2:	192c      	adds	r4, r5, r4
 80045b4:	1869      	adds	r1, r5, r1
 80045b6:	7466      	strb	r6, [r4, #17]
 80045b8:	e7e3      	b.n	8004582 <HAL_PCD_EP_Open+0x26>
 80045ba:	2002      	movs	r0, #2
 80045bc:	e7f5      	b.n	80045aa <HAL_PCD_EP_Open+0x4e>
 80045be:	46c0      	nop			@ (mov r8, r8)

080045c0 <HAL_PCD_EP_Close>:
 80045c0:	2207      	movs	r2, #7
 80045c2:	400a      	ands	r2, r1
 80045c4:	0093      	lsls	r3, r2, #2
 80045c6:	189b      	adds	r3, r3, r2
 80045c8:	b249      	sxtb	r1, r1
 80045ca:	b570      	push	{r4, r5, r6, lr}
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	0004      	movs	r4, r0
 80045d0:	2900      	cmp	r1, #0
 80045d2:	db17      	blt.n	8004604 <HAL_PCD_EP_Close+0x44>
 80045d4:	0019      	movs	r1, r3
 80045d6:	3151      	adds	r1, #81	@ 0x51
 80045d8:	31ff      	adds	r1, #255	@ 0xff
 80045da:	1841      	adds	r1, r0, r1
 80045dc:	18c3      	adds	r3, r0, r3
 80045de:	25a4      	movs	r5, #164	@ 0xa4
 80045e0:	2000      	movs	r0, #0
 80045e2:	3352      	adds	r3, #82	@ 0x52
 80045e4:	33ff      	adds	r3, #255	@ 0xff
 80045e6:	7018      	strb	r0, [r3, #0]
 80045e8:	00ad      	lsls	r5, r5, #2
 80045ea:	700a      	strb	r2, [r1, #0]
 80045ec:	5d63      	ldrb	r3, [r4, r5]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d014      	beq.n	800461c <HAL_PCD_EP_Close+0x5c>
 80045f2:	2301      	movs	r3, #1
 80045f4:	5563      	strb	r3, [r4, r5]
 80045f6:	6820      	ldr	r0, [r4, #0]
 80045f8:	f001 fa8e 	bl	8005b18 <USB_DeactivateEndpoint>
 80045fc:	2300      	movs	r3, #0
 80045fe:	2000      	movs	r0, #0
 8004600:	5563      	strb	r3, [r4, r5]
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	0019      	movs	r1, r3
 8004606:	3110      	adds	r1, #16
 8004608:	18c3      	adds	r3, r0, r3
 800460a:	1841      	adds	r1, r0, r1
 800460c:	25a4      	movs	r5, #164	@ 0xa4
 800460e:	2001      	movs	r0, #1
 8004610:	00ad      	lsls	r5, r5, #2
 8004612:	7458      	strb	r0, [r3, #17]
 8004614:	700a      	strb	r2, [r1, #0]
 8004616:	5d63      	ldrb	r3, [r4, r5]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d1ea      	bne.n	80045f2 <HAL_PCD_EP_Close+0x32>
 800461c:	2002      	movs	r0, #2
 800461e:	e7f0      	b.n	8004602 <HAL_PCD_EP_Close+0x42>

08004620 <HAL_PCD_EP_Receive>:
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	2407      	movs	r4, #7
 8004624:	4021      	ands	r1, r4
 8004626:	008c      	lsls	r4, r1, #2
 8004628:	1864      	adds	r4, r4, r1
 800462a:	00e4      	lsls	r4, r4, #3
 800462c:	1905      	adds	r5, r0, r4
 800462e:	002e      	movs	r6, r5
 8004630:	3665      	adds	r6, #101	@ 0x65
 8004632:	36ff      	adds	r6, #255	@ 0xff
 8004634:	6032      	str	r2, [r6, #0]
 8004636:	002a      	movs	r2, r5
 8004638:	3269      	adds	r2, #105	@ 0x69
 800463a:	32ff      	adds	r2, #255	@ 0xff
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	2300      	movs	r3, #0
 8004640:	3551      	adds	r5, #81	@ 0x51
 8004642:	3451      	adds	r4, #81	@ 0x51
 8004644:	6053      	str	r3, [r2, #4]
 8004646:	35ff      	adds	r5, #255	@ 0xff
 8004648:	3a17      	subs	r2, #23
 800464a:	34ff      	adds	r4, #255	@ 0xff
 800464c:	7013      	strb	r3, [r2, #0]
 800464e:	7029      	strb	r1, [r5, #0]
 8004650:	1901      	adds	r1, r0, r4
 8004652:	6800      	ldr	r0, [r0, #0]
 8004654:	f001 fae6 	bl	8005c24 <USB_EPStartXfer>
 8004658:	2000      	movs	r0, #0
 800465a:	bd70      	pop	{r4, r5, r6, pc}

0800465c <HAL_PCD_EP_GetRxCount>:
 800465c:	2307      	movs	r3, #7
 800465e:	400b      	ands	r3, r1
 8004660:	0099      	lsls	r1, r3, #2
 8004662:	18c9      	adds	r1, r1, r3
 8004664:	00c9      	lsls	r1, r1, #3
 8004666:	1840      	adds	r0, r0, r1
 8004668:	306d      	adds	r0, #109	@ 0x6d
 800466a:	30ff      	adds	r0, #255	@ 0xff
 800466c:	6800      	ldr	r0, [r0, #0]
 800466e:	4770      	bx	lr

08004670 <HAL_PCD_EP_Transmit>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	2407      	movs	r4, #7
 8004674:	4021      	ands	r1, r4
 8004676:	008c      	lsls	r4, r1, #2
 8004678:	1864      	adds	r4, r4, r1
 800467a:	00e4      	lsls	r4, r4, #3
 800467c:	1905      	adds	r5, r0, r4
 800467e:	002e      	movs	r6, r5
 8004680:	626a      	str	r2, [r5, #36]	@ 0x24
 8004682:	2201      	movs	r2, #1
 8004684:	3634      	adds	r6, #52	@ 0x34
 8004686:	62ab      	str	r3, [r5, #40]	@ 0x28
 8004688:	7032      	strb	r2, [r6, #0]
 800468a:	632b      	str	r3, [r5, #48]	@ 0x30
 800468c:	2300      	movs	r3, #0
 800468e:	3410      	adds	r4, #16
 8004690:	7429      	strb	r1, [r5, #16]
 8004692:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8004694:	746a      	strb	r2, [r5, #17]
 8004696:	1901      	adds	r1, r0, r4
 8004698:	6800      	ldr	r0, [r0, #0]
 800469a:	f001 fac3 	bl	8005c24 <USB_EPStartXfer>
 800469e:	2000      	movs	r0, #0
 80046a0:	bd70      	pop	{r4, r5, r6, pc}
 80046a2:	46c0      	nop			@ (mov r8, r8)

080046a4 <HAL_PCD_EP_SetStall>:
 80046a4:	2307      	movs	r3, #7
 80046a6:	b570      	push	{r4, r5, r6, lr}
 80046a8:	7902      	ldrb	r2, [r0, #4]
 80046aa:	0004      	movs	r4, r0
 80046ac:	400b      	ands	r3, r1
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d331      	bcc.n	8004716 <HAL_PCD_EP_SetStall+0x72>
 80046b2:	b24a      	sxtb	r2, r1
 80046b4:	2a00      	cmp	r2, #0
 80046b6:	db1b      	blt.n	80046f0 <HAL_PCD_EP_SetStall+0x4c>
 80046b8:	008a      	lsls	r2, r1, #2
 80046ba:	1852      	adds	r2, r2, r1
 80046bc:	00d2      	lsls	r2, r2, #3
 80046be:	0011      	movs	r1, r2
 80046c0:	3151      	adds	r1, #81	@ 0x51
 80046c2:	31ff      	adds	r1, #255	@ 0xff
 80046c4:	1841      	adds	r1, r0, r1
 80046c6:	1882      	adds	r2, r0, r2
 80046c8:	2000      	movs	r0, #0
 80046ca:	3252      	adds	r2, #82	@ 0x52
 80046cc:	32ff      	adds	r2, #255	@ 0xff
 80046ce:	7010      	strb	r0, [r2, #0]
 80046d0:	25a4      	movs	r5, #164	@ 0xa4
 80046d2:	2201      	movs	r2, #1
 80046d4:	700b      	strb	r3, [r1, #0]
 80046d6:	708a      	strb	r2, [r1, #2]
 80046d8:	00ad      	lsls	r5, r5, #2
 80046da:	5d63      	ldrb	r3, [r4, r5]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d018      	beq.n	8004712 <HAL_PCD_EP_SetStall+0x6e>
 80046e0:	5562      	strb	r2, [r4, r5]
 80046e2:	6820      	ldr	r0, [r4, #0]
 80046e4:	f001 fd96 	bl	8006214 <USB_EPSetStall>
 80046e8:	2300      	movs	r3, #0
 80046ea:	2000      	movs	r0, #0
 80046ec:	5563      	strb	r3, [r4, r5]
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	009a      	lsls	r2, r3, #2
 80046f2:	18d2      	adds	r2, r2, r3
 80046f4:	00d2      	lsls	r2, r2, #3
 80046f6:	0011      	movs	r1, r2
 80046f8:	3110      	adds	r1, #16
 80046fa:	1841      	adds	r1, r0, r1
 80046fc:	1882      	adds	r2, r0, r2
 80046fe:	2001      	movs	r0, #1
 8004700:	25a4      	movs	r5, #164	@ 0xa4
 8004702:	7450      	strb	r0, [r2, #17]
 8004704:	2201      	movs	r2, #1
 8004706:	700b      	strb	r3, [r1, #0]
 8004708:	708a      	strb	r2, [r1, #2]
 800470a:	00ad      	lsls	r5, r5, #2
 800470c:	5d63      	ldrb	r3, [r4, r5]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d1e6      	bne.n	80046e0 <HAL_PCD_EP_SetStall+0x3c>
 8004712:	2002      	movs	r0, #2
 8004714:	e7eb      	b.n	80046ee <HAL_PCD_EP_SetStall+0x4a>
 8004716:	2001      	movs	r0, #1
 8004718:	e7e9      	b.n	80046ee <HAL_PCD_EP_SetStall+0x4a>
 800471a:	46c0      	nop			@ (mov r8, r8)

0800471c <HAL_PCD_EP_ClrStall>:
 800471c:	230f      	movs	r3, #15
 800471e:	b570      	push	{r4, r5, r6, lr}
 8004720:	7902      	ldrb	r2, [r0, #4]
 8004722:	0004      	movs	r4, r0
 8004724:	400b      	ands	r3, r1
 8004726:	429a      	cmp	r2, r3
 8004728:	d330      	bcc.n	800478c <HAL_PCD_EP_ClrStall+0x70>
 800472a:	2207      	movs	r2, #7
 800472c:	400a      	ands	r2, r1
 800472e:	0093      	lsls	r3, r2, #2
 8004730:	189b      	adds	r3, r3, r2
 8004732:	b249      	sxtb	r1, r1
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	2900      	cmp	r1, #0
 8004738:	db18      	blt.n	800476c <HAL_PCD_EP_ClrStall+0x50>
 800473a:	0019      	movs	r1, r3
 800473c:	3151      	adds	r1, #81	@ 0x51
 800473e:	31ff      	adds	r1, #255	@ 0xff
 8004740:	1841      	adds	r1, r0, r1
 8004742:	18c3      	adds	r3, r0, r3
 8004744:	2600      	movs	r6, #0
 8004746:	2000      	movs	r0, #0
 8004748:	25a4      	movs	r5, #164	@ 0xa4
 800474a:	3352      	adds	r3, #82	@ 0x52
 800474c:	33ff      	adds	r3, #255	@ 0xff
 800474e:	7018      	strb	r0, [r3, #0]
 8004750:	00ad      	lsls	r5, r5, #2
 8004752:	708e      	strb	r6, [r1, #2]
 8004754:	700a      	strb	r2, [r1, #0]
 8004756:	5d63      	ldrb	r3, [r4, r5]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d015      	beq.n	8004788 <HAL_PCD_EP_ClrStall+0x6c>
 800475c:	2301      	movs	r3, #1
 800475e:	5563      	strb	r3, [r4, r5]
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	f001 fd79 	bl	8006258 <USB_EPClearStall>
 8004766:	2000      	movs	r0, #0
 8004768:	5566      	strb	r6, [r4, r5]
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	0019      	movs	r1, r3
 800476e:	3110      	adds	r1, #16
 8004770:	1841      	adds	r1, r0, r1
 8004772:	18c3      	adds	r3, r0, r3
 8004774:	2600      	movs	r6, #0
 8004776:	2001      	movs	r0, #1
 8004778:	25a4      	movs	r5, #164	@ 0xa4
 800477a:	7458      	strb	r0, [r3, #17]
 800477c:	00ad      	lsls	r5, r5, #2
 800477e:	708e      	strb	r6, [r1, #2]
 8004780:	700a      	strb	r2, [r1, #0]
 8004782:	5d63      	ldrb	r3, [r4, r5]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d1e9      	bne.n	800475c <HAL_PCD_EP_ClrStall+0x40>
 8004788:	2002      	movs	r0, #2
 800478a:	e7ee      	b.n	800476a <HAL_PCD_EP_ClrStall+0x4e>
 800478c:	2001      	movs	r0, #1
 800478e:	e7ec      	b.n	800476a <HAL_PCD_EP_ClrStall+0x4e>

08004790 <HAL_PCDEx_PMAConfig>:
 8004790:	b510      	push	{r4, lr}
 8004792:	060c      	lsls	r4, r1, #24
 8004794:	d50e      	bpl.n	80047b4 <HAL_PCDEx_PMAConfig+0x24>
 8004796:	2407      	movs	r4, #7
 8004798:	400c      	ands	r4, r1
 800479a:	00a1      	lsls	r1, r4, #2
 800479c:	1909      	adds	r1, r1, r4
 800479e:	00c9      	lsls	r1, r1, #3
 80047a0:	3110      	adds	r1, #16
 80047a2:	1840      	adds	r0, r0, r1
 80047a4:	b299      	uxth	r1, r3
 80047a6:	2a00      	cmp	r2, #0
 80047a8:	d10d      	bne.n	80047c6 <HAL_PCDEx_PMAConfig+0x36>
 80047aa:	2300      	movs	r3, #0
 80047ac:	80c1      	strh	r1, [r0, #6]
 80047ae:	7303      	strb	r3, [r0, #12]
 80047b0:	2000      	movs	r0, #0
 80047b2:	bd10      	pop	{r4, pc}
 80047b4:	008c      	lsls	r4, r1, #2
 80047b6:	1861      	adds	r1, r4, r1
 80047b8:	00c9      	lsls	r1, r1, #3
 80047ba:	3151      	adds	r1, #81	@ 0x51
 80047bc:	31ff      	adds	r1, #255	@ 0xff
 80047be:	1840      	adds	r0, r0, r1
 80047c0:	b299      	uxth	r1, r3
 80047c2:	2a00      	cmp	r2, #0
 80047c4:	d0f1      	beq.n	80047aa <HAL_PCDEx_PMAConfig+0x1a>
 80047c6:	6083      	str	r3, [r0, #8]
 80047c8:	2301      	movs	r3, #1
 80047ca:	e7f0      	b.n	80047ae <HAL_PCDEx_PMAConfig+0x1e>

080047cc <HAL_PCDEx_ActivateLPM>:
 80047cc:	23b4      	movs	r3, #180	@ 0xb4
 80047ce:	2101      	movs	r1, #1
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	6802      	ldr	r2, [r0, #0]
 80047d4:	50c1      	str	r1, [r0, r3]
 80047d6:	2100      	movs	r1, #0
 80047d8:	3b08      	subs	r3, #8
 80047da:	54c1      	strb	r1, [r0, r3]
 80047dc:	2354      	movs	r3, #84	@ 0x54
 80047de:	2001      	movs	r0, #1
 80047e0:	5ad1      	ldrh	r1, [r2, r3]
 80047e2:	4301      	orrs	r1, r0
 80047e4:	52d1      	strh	r1, [r2, r3]
 80047e6:	5ad1      	ldrh	r1, [r2, r3]
 80047e8:	3001      	adds	r0, #1
 80047ea:	4301      	orrs	r1, r0
 80047ec:	52d1      	strh	r1, [r2, r3]
 80047ee:	2000      	movs	r0, #0
 80047f0:	4770      	bx	lr
 80047f2:	46c0      	nop			@ (mov r8, r8)

080047f4 <HAL_PCDEx_LPM_Callback>:
 80047f4:	4770      	bx	lr
 80047f6:	46c0      	nop			@ (mov r8, r8)

080047f8 <HAL_RCC_OscConfig>:
 80047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fa:	46ce      	mov	lr, r9
 80047fc:	4647      	mov	r7, r8
 80047fe:	b580      	push	{r7, lr}
 8004800:	0004      	movs	r4, r0
 8004802:	b083      	sub	sp, #12
 8004804:	2800      	cmp	r0, #0
 8004806:	d100      	bne.n	800480a <HAL_RCC_OscConfig+0x12>
 8004808:	e0f1      	b.n	80049ee <HAL_RCC_OscConfig+0x1f6>
 800480a:	6803      	ldr	r3, [r0, #0]
 800480c:	07da      	lsls	r2, r3, #31
 800480e:	d52f      	bpl.n	8004870 <HAL_RCC_OscConfig+0x78>
 8004810:	210c      	movs	r1, #12
 8004812:	48c2      	ldr	r0, [pc, #776]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 8004814:	6842      	ldr	r2, [r0, #4]
 8004816:	400a      	ands	r2, r1
 8004818:	2a04      	cmp	r2, #4
 800481a:	d100      	bne.n	800481e <HAL_RCC_OscConfig+0x26>
 800481c:	e105      	b.n	8004a2a <HAL_RCC_OscConfig+0x232>
 800481e:	6842      	ldr	r2, [r0, #4]
 8004820:	4011      	ands	r1, r2
 8004822:	2908      	cmp	r1, #8
 8004824:	d100      	bne.n	8004828 <HAL_RCC_OscConfig+0x30>
 8004826:	e0f7      	b.n	8004a18 <HAL_RCC_OscConfig+0x220>
 8004828:	6863      	ldr	r3, [r4, #4]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d100      	bne.n	8004830 <HAL_RCC_OscConfig+0x38>
 800482e:	e106      	b.n	8004a3e <HAL_RCC_OscConfig+0x246>
 8004830:	2b00      	cmp	r3, #0
 8004832:	d100      	bne.n	8004836 <HAL_RCC_OscConfig+0x3e>
 8004834:	e128      	b.n	8004a88 <HAL_RCC_OscConfig+0x290>
 8004836:	2b05      	cmp	r3, #5
 8004838:	d100      	bne.n	800483c <HAL_RCC_OscConfig+0x44>
 800483a:	e22a      	b.n	8004c92 <HAL_RCC_OscConfig+0x49a>
 800483c:	4bb7      	ldr	r3, [pc, #732]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 800483e:	49b8      	ldr	r1, [pc, #736]	@ (8004b20 <HAL_RCC_OscConfig+0x328>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	400a      	ands	r2, r1
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	49b6      	ldr	r1, [pc, #728]	@ (8004b24 <HAL_RCC_OscConfig+0x32c>)
 800484a:	400a      	ands	r2, r1
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	f7fd fdc7 	bl	80023e0 <HAL_GetTick>
 8004852:	2680      	movs	r6, #128	@ 0x80
 8004854:	0005      	movs	r5, r0
 8004856:	4fb1      	ldr	r7, [pc, #708]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 8004858:	02b6      	lsls	r6, r6, #10
 800485a:	e005      	b.n	8004868 <HAL_RCC_OscConfig+0x70>
 800485c:	f7fd fdc0 	bl	80023e0 <HAL_GetTick>
 8004860:	1b40      	subs	r0, r0, r5
 8004862:	2864      	cmp	r0, #100	@ 0x64
 8004864:	d900      	bls.n	8004868 <HAL_RCC_OscConfig+0x70>
 8004866:	e10d      	b.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4233      	tst	r3, r6
 800486c:	d0f6      	beq.n	800485c <HAL_RCC_OscConfig+0x64>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	079a      	lsls	r2, r3, #30
 8004872:	d529      	bpl.n	80048c8 <HAL_RCC_OscConfig+0xd0>
 8004874:	220c      	movs	r2, #12
 8004876:	49a9      	ldr	r1, [pc, #676]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 8004878:	6848      	ldr	r0, [r1, #4]
 800487a:	4202      	tst	r2, r0
 800487c:	d100      	bne.n	8004880 <HAL_RCC_OscConfig+0x88>
 800487e:	e0af      	b.n	80049e0 <HAL_RCC_OscConfig+0x1e8>
 8004880:	6848      	ldr	r0, [r1, #4]
 8004882:	4002      	ands	r2, r0
 8004884:	2a08      	cmp	r2, #8
 8004886:	d100      	bne.n	800488a <HAL_RCC_OscConfig+0x92>
 8004888:	e0a1      	b.n	80049ce <HAL_RCC_OscConfig+0x1d6>
 800488a:	68e3      	ldr	r3, [r4, #12]
 800488c:	4da3      	ldr	r5, [pc, #652]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 800488e:	2b00      	cmp	r3, #0
 8004890:	d100      	bne.n	8004894 <HAL_RCC_OscConfig+0x9c>
 8004892:	e130      	b.n	8004af6 <HAL_RCC_OscConfig+0x2fe>
 8004894:	2201      	movs	r2, #1
 8004896:	682b      	ldr	r3, [r5, #0]
 8004898:	2702      	movs	r7, #2
 800489a:	4313      	orrs	r3, r2
 800489c:	602b      	str	r3, [r5, #0]
 800489e:	f7fd fd9f 	bl	80023e0 <HAL_GetTick>
 80048a2:	0006      	movs	r6, r0
 80048a4:	e005      	b.n	80048b2 <HAL_RCC_OscConfig+0xba>
 80048a6:	f7fd fd9b 	bl	80023e0 <HAL_GetTick>
 80048aa:	1b80      	subs	r0, r0, r6
 80048ac:	2802      	cmp	r0, #2
 80048ae:	d900      	bls.n	80048b2 <HAL_RCC_OscConfig+0xba>
 80048b0:	e0e8      	b.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 80048b2:	682b      	ldr	r3, [r5, #0]
 80048b4:	421f      	tst	r7, r3
 80048b6:	d0f6      	beq.n	80048a6 <HAL_RCC_OscConfig+0xae>
 80048b8:	21f8      	movs	r1, #248	@ 0xf8
 80048ba:	682a      	ldr	r2, [r5, #0]
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	438a      	bics	r2, r1
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4313      	orrs	r3, r2
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	071a      	lsls	r2, r3, #28
 80048ca:	d42d      	bmi.n	8004928 <HAL_RCC_OscConfig+0x130>
 80048cc:	075a      	lsls	r2, r3, #29
 80048ce:	d544      	bpl.n	800495a <HAL_RCC_OscConfig+0x162>
 80048d0:	2280      	movs	r2, #128	@ 0x80
 80048d2:	2000      	movs	r0, #0
 80048d4:	4b91      	ldr	r3, [pc, #580]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 80048d6:	0552      	lsls	r2, r2, #21
 80048d8:	69d9      	ldr	r1, [r3, #28]
 80048da:	4681      	mov	r9, r0
 80048dc:	4211      	tst	r1, r2
 80048de:	d108      	bne.n	80048f2 <HAL_RCC_OscConfig+0xfa>
 80048e0:	69d9      	ldr	r1, [r3, #28]
 80048e2:	4311      	orrs	r1, r2
 80048e4:	61d9      	str	r1, [r3, #28]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	4013      	ands	r3, r2
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	9b01      	ldr	r3, [sp, #4]
 80048ee:	2301      	movs	r3, #1
 80048f0:	4699      	mov	r9, r3
 80048f2:	2780      	movs	r7, #128	@ 0x80
 80048f4:	4e8c      	ldr	r6, [pc, #560]	@ (8004b28 <HAL_RCC_OscConfig+0x330>)
 80048f6:	007f      	lsls	r7, r7, #1
 80048f8:	6833      	ldr	r3, [r6, #0]
 80048fa:	423b      	tst	r3, r7
 80048fc:	d100      	bne.n	8004900 <HAL_RCC_OscConfig+0x108>
 80048fe:	e0a5      	b.n	8004a4c <HAL_RCC_OscConfig+0x254>
 8004900:	68a3      	ldr	r3, [r4, #8]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d100      	bne.n	8004908 <HAL_RCC_OscConfig+0x110>
 8004906:	e115      	b.n	8004b34 <HAL_RCC_OscConfig+0x33c>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d100      	bne.n	800490e <HAL_RCC_OscConfig+0x116>
 800490c:	e0d5      	b.n	8004aba <HAL_RCC_OscConfig+0x2c2>
 800490e:	2b05      	cmp	r3, #5
 8004910:	d100      	bne.n	8004914 <HAL_RCC_OscConfig+0x11c>
 8004912:	e144      	b.n	8004b9e <HAL_RCC_OscConfig+0x3a6>
 8004914:	2101      	movs	r1, #1
 8004916:	4b81      	ldr	r3, [pc, #516]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	438a      	bics	r2, r1
 800491c:	621a      	str	r2, [r3, #32]
 800491e:	6a1a      	ldr	r2, [r3, #32]
 8004920:	3103      	adds	r1, #3
 8004922:	438a      	bics	r2, r1
 8004924:	621a      	str	r2, [r3, #32]
 8004926:	e109      	b.n	8004b3c <HAL_RCC_OscConfig+0x344>
 8004928:	69e3      	ldr	r3, [r4, #28]
 800492a:	4d7c      	ldr	r5, [pc, #496]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 800492c:	2b00      	cmp	r3, #0
 800492e:	d060      	beq.n	80049f2 <HAL_RCC_OscConfig+0x1fa>
 8004930:	2201      	movs	r2, #1
 8004932:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004934:	2702      	movs	r7, #2
 8004936:	4313      	orrs	r3, r2
 8004938:	626b      	str	r3, [r5, #36]	@ 0x24
 800493a:	f7fd fd51 	bl	80023e0 <HAL_GetTick>
 800493e:	0006      	movs	r6, r0
 8004940:	e005      	b.n	800494e <HAL_RCC_OscConfig+0x156>
 8004942:	f7fd fd4d 	bl	80023e0 <HAL_GetTick>
 8004946:	1b80      	subs	r0, r0, r6
 8004948:	2802      	cmp	r0, #2
 800494a:	d900      	bls.n	800494e <HAL_RCC_OscConfig+0x156>
 800494c:	e09a      	b.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 800494e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004950:	421f      	tst	r7, r3
 8004952:	d0f6      	beq.n	8004942 <HAL_RCC_OscConfig+0x14a>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	075a      	lsls	r2, r3, #29
 8004958:	d4ba      	bmi.n	80048d0 <HAL_RCC_OscConfig+0xd8>
 800495a:	06db      	lsls	r3, r3, #27
 800495c:	d512      	bpl.n	8004984 <HAL_RCC_OscConfig+0x18c>
 800495e:	6963      	ldr	r3, [r4, #20]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d100      	bne.n	8004966 <HAL_RCC_OscConfig+0x16e>
 8004964:	e140      	b.n	8004be8 <HAL_RCC_OscConfig+0x3f0>
 8004966:	3305      	adds	r3, #5
 8004968:	d000      	beq.n	800496c <HAL_RCC_OscConfig+0x174>
 800496a:	e0f9      	b.n	8004b60 <HAL_RCC_OscConfig+0x368>
 800496c:	2104      	movs	r1, #4
 800496e:	20f8      	movs	r0, #248	@ 0xf8
 8004970:	4a6a      	ldr	r2, [pc, #424]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 8004972:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004974:	438b      	bics	r3, r1
 8004976:	6353      	str	r3, [r2, #52]	@ 0x34
 8004978:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800497a:	69a3      	ldr	r3, [r4, #24]
 800497c:	4381      	bics	r1, r0
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	430b      	orrs	r3, r1
 8004982:	6353      	str	r3, [r2, #52]	@ 0x34
 8004984:	6a23      	ldr	r3, [r4, #32]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01b      	beq.n	80049c2 <HAL_RCC_OscConfig+0x1ca>
 800498a:	220c      	movs	r2, #12
 800498c:	4d63      	ldr	r5, [pc, #396]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 800498e:	6869      	ldr	r1, [r5, #4]
 8004990:	400a      	ands	r2, r1
 8004992:	2a08      	cmp	r2, #8
 8004994:	d100      	bne.n	8004998 <HAL_RCC_OscConfig+0x1a0>
 8004996:	e10c      	b.n	8004bb2 <HAL_RCC_OscConfig+0x3ba>
 8004998:	2b02      	cmp	r3, #2
 800499a:	d100      	bne.n	800499e <HAL_RCC_OscConfig+0x1a6>
 800499c:	e142      	b.n	8004c24 <HAL_RCC_OscConfig+0x42c>
 800499e:	682b      	ldr	r3, [r5, #0]
 80049a0:	4a62      	ldr	r2, [pc, #392]	@ (8004b2c <HAL_RCC_OscConfig+0x334>)
 80049a2:	2680      	movs	r6, #128	@ 0x80
 80049a4:	4013      	ands	r3, r2
 80049a6:	602b      	str	r3, [r5, #0]
 80049a8:	f7fd fd1a 	bl	80023e0 <HAL_GetTick>
 80049ac:	04b6      	lsls	r6, r6, #18
 80049ae:	0004      	movs	r4, r0
 80049b0:	e004      	b.n	80049bc <HAL_RCC_OscConfig+0x1c4>
 80049b2:	f7fd fd15 	bl	80023e0 <HAL_GetTick>
 80049b6:	1b00      	subs	r0, r0, r4
 80049b8:	2802      	cmp	r0, #2
 80049ba:	d863      	bhi.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	4233      	tst	r3, r6
 80049c0:	d1f7      	bne.n	80049b2 <HAL_RCC_OscConfig+0x1ba>
 80049c2:	2000      	movs	r0, #0
 80049c4:	b003      	add	sp, #12
 80049c6:	bcc0      	pop	{r6, r7}
 80049c8:	46b9      	mov	r9, r7
 80049ca:	46b0      	mov	r8, r6
 80049cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049ce:	684a      	ldr	r2, [r1, #4]
 80049d0:	21c0      	movs	r1, #192	@ 0xc0
 80049d2:	0249      	lsls	r1, r1, #9
 80049d4:	400a      	ands	r2, r1
 80049d6:	2180      	movs	r1, #128	@ 0x80
 80049d8:	0209      	lsls	r1, r1, #8
 80049da:	428a      	cmp	r2, r1
 80049dc:	d000      	beq.n	80049e0 <HAL_RCC_OscConfig+0x1e8>
 80049de:	e754      	b.n	800488a <HAL_RCC_OscConfig+0x92>
 80049e0:	4a4e      	ldr	r2, [pc, #312]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	0792      	lsls	r2, r2, #30
 80049e6:	d541      	bpl.n	8004a6c <HAL_RCC_OscConfig+0x274>
 80049e8:	68e2      	ldr	r2, [r4, #12]
 80049ea:	2a01      	cmp	r2, #1
 80049ec:	d03e      	beq.n	8004a6c <HAL_RCC_OscConfig+0x274>
 80049ee:	2001      	movs	r0, #1
 80049f0:	e7e8      	b.n	80049c4 <HAL_RCC_OscConfig+0x1cc>
 80049f2:	2201      	movs	r2, #1
 80049f4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80049f6:	2702      	movs	r7, #2
 80049f8:	4393      	bics	r3, r2
 80049fa:	626b      	str	r3, [r5, #36]	@ 0x24
 80049fc:	f7fd fcf0 	bl	80023e0 <HAL_GetTick>
 8004a00:	0006      	movs	r6, r0
 8004a02:	e004      	b.n	8004a0e <HAL_RCC_OscConfig+0x216>
 8004a04:	f7fd fcec 	bl	80023e0 <HAL_GetTick>
 8004a08:	1b80      	subs	r0, r0, r6
 8004a0a:	2802      	cmp	r0, #2
 8004a0c:	d83a      	bhi.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004a0e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004a10:	421f      	tst	r7, r3
 8004a12:	d1f7      	bne.n	8004a04 <HAL_RCC_OscConfig+0x20c>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	e79e      	b.n	8004956 <HAL_RCC_OscConfig+0x15e>
 8004a18:	21c0      	movs	r1, #192	@ 0xc0
 8004a1a:	6842      	ldr	r2, [r0, #4]
 8004a1c:	0249      	lsls	r1, r1, #9
 8004a1e:	400a      	ands	r2, r1
 8004a20:	2180      	movs	r1, #128	@ 0x80
 8004a22:	0249      	lsls	r1, r1, #9
 8004a24:	428a      	cmp	r2, r1
 8004a26:	d000      	beq.n	8004a2a <HAL_RCC_OscConfig+0x232>
 8004a28:	e6fe      	b.n	8004828 <HAL_RCC_OscConfig+0x30>
 8004a2a:	4a3c      	ldr	r2, [pc, #240]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	0392      	lsls	r2, r2, #14
 8004a30:	d400      	bmi.n	8004a34 <HAL_RCC_OscConfig+0x23c>
 8004a32:	e71d      	b.n	8004870 <HAL_RCC_OscConfig+0x78>
 8004a34:	6862      	ldr	r2, [r4, #4]
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	d000      	beq.n	8004a3c <HAL_RCC_OscConfig+0x244>
 8004a3a:	e719      	b.n	8004870 <HAL_RCC_OscConfig+0x78>
 8004a3c:	e7d7      	b.n	80049ee <HAL_RCC_OscConfig+0x1f6>
 8004a3e:	2380      	movs	r3, #128	@ 0x80
 8004a40:	4a36      	ldr	r2, [pc, #216]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 8004a42:	025b      	lsls	r3, r3, #9
 8004a44:	6811      	ldr	r1, [r2, #0]
 8004a46:	430b      	orrs	r3, r1
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e700      	b.n	800484e <HAL_RCC_OscConfig+0x56>
 8004a4c:	6833      	ldr	r3, [r6, #0]
 8004a4e:	433b      	orrs	r3, r7
 8004a50:	6033      	str	r3, [r6, #0]
 8004a52:	f7fd fcc5 	bl	80023e0 <HAL_GetTick>
 8004a56:	0005      	movs	r5, r0
 8004a58:	e004      	b.n	8004a64 <HAL_RCC_OscConfig+0x26c>
 8004a5a:	f7fd fcc1 	bl	80023e0 <HAL_GetTick>
 8004a5e:	1b40      	subs	r0, r0, r5
 8004a60:	2864      	cmp	r0, #100	@ 0x64
 8004a62:	d80f      	bhi.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004a64:	6833      	ldr	r3, [r6, #0]
 8004a66:	423b      	tst	r3, r7
 8004a68:	d0f7      	beq.n	8004a5a <HAL_RCC_OscConfig+0x262>
 8004a6a:	e749      	b.n	8004900 <HAL_RCC_OscConfig+0x108>
 8004a6c:	25f8      	movs	r5, #248	@ 0xf8
 8004a6e:	482b      	ldr	r0, [pc, #172]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 8004a70:	6922      	ldr	r2, [r4, #16]
 8004a72:	6801      	ldr	r1, [r0, #0]
 8004a74:	00d2      	lsls	r2, r2, #3
 8004a76:	43a9      	bics	r1, r5
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	6002      	str	r2, [r0, #0]
 8004a7c:	071a      	lsls	r2, r3, #28
 8004a7e:	d400      	bmi.n	8004a82 <HAL_RCC_OscConfig+0x28a>
 8004a80:	e724      	b.n	80048cc <HAL_RCC_OscConfig+0xd4>
 8004a82:	e751      	b.n	8004928 <HAL_RCC_OscConfig+0x130>
 8004a84:	2003      	movs	r0, #3
 8004a86:	e79d      	b.n	80049c4 <HAL_RCC_OscConfig+0x1cc>
 8004a88:	4d24      	ldr	r5, [pc, #144]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 8004a8a:	4a25      	ldr	r2, [pc, #148]	@ (8004b20 <HAL_RCC_OscConfig+0x328>)
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	2780      	movs	r7, #128	@ 0x80
 8004a90:	4013      	ands	r3, r2
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	4a23      	ldr	r2, [pc, #140]	@ (8004b24 <HAL_RCC_OscConfig+0x32c>)
 8004a98:	02bf      	lsls	r7, r7, #10
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	602b      	str	r3, [r5, #0]
 8004a9e:	f7fd fc9f 	bl	80023e0 <HAL_GetTick>
 8004aa2:	0006      	movs	r6, r0
 8004aa4:	e004      	b.n	8004ab0 <HAL_RCC_OscConfig+0x2b8>
 8004aa6:	f7fd fc9b 	bl	80023e0 <HAL_GetTick>
 8004aaa:	1b80      	subs	r0, r0, r6
 8004aac:	2864      	cmp	r0, #100	@ 0x64
 8004aae:	d8e9      	bhi.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004ab0:	682b      	ldr	r3, [r5, #0]
 8004ab2:	423b      	tst	r3, r7
 8004ab4:	d1f7      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x2ae>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	e6da      	b.n	8004870 <HAL_RCC_OscConfig+0x78>
 8004aba:	2201      	movs	r2, #1
 8004abc:	4e17      	ldr	r6, [pc, #92]	@ (8004b1c <HAL_RCC_OscConfig+0x324>)
 8004abe:	4d1c      	ldr	r5, [pc, #112]	@ (8004b30 <HAL_RCC_OscConfig+0x338>)
 8004ac0:	6a33      	ldr	r3, [r6, #32]
 8004ac2:	4393      	bics	r3, r2
 8004ac4:	6233      	str	r3, [r6, #32]
 8004ac6:	6a33      	ldr	r3, [r6, #32]
 8004ac8:	3203      	adds	r2, #3
 8004aca:	4393      	bics	r3, r2
 8004acc:	6233      	str	r3, [r6, #32]
 8004ace:	f7fd fc87 	bl	80023e0 <HAL_GetTick>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	0007      	movs	r7, r0
 8004ad6:	4698      	mov	r8, r3
 8004ad8:	e004      	b.n	8004ae4 <HAL_RCC_OscConfig+0x2ec>
 8004ada:	f7fd fc81 	bl	80023e0 <HAL_GetTick>
 8004ade:	1bc0      	subs	r0, r0, r7
 8004ae0:	42a8      	cmp	r0, r5
 8004ae2:	d8cf      	bhi.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	6a33      	ldr	r3, [r6, #32]
 8004ae8:	421a      	tst	r2, r3
 8004aea:	d1f6      	bne.n	8004ada <HAL_RCC_OscConfig+0x2e2>
 8004aec:	464b      	mov	r3, r9
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d04e      	beq.n	8004b90 <HAL_RCC_OscConfig+0x398>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	e731      	b.n	800495a <HAL_RCC_OscConfig+0x162>
 8004af6:	2201      	movs	r2, #1
 8004af8:	682b      	ldr	r3, [r5, #0]
 8004afa:	2702      	movs	r7, #2
 8004afc:	4393      	bics	r3, r2
 8004afe:	602b      	str	r3, [r5, #0]
 8004b00:	f7fd fc6e 	bl	80023e0 <HAL_GetTick>
 8004b04:	0006      	movs	r6, r0
 8004b06:	e004      	b.n	8004b12 <HAL_RCC_OscConfig+0x31a>
 8004b08:	f7fd fc6a 	bl	80023e0 <HAL_GetTick>
 8004b0c:	1b80      	subs	r0, r0, r6
 8004b0e:	2802      	cmp	r0, #2
 8004b10:	d8b8      	bhi.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004b12:	682b      	ldr	r3, [r5, #0]
 8004b14:	421f      	tst	r7, r3
 8004b16:	d1f7      	bne.n	8004b08 <HAL_RCC_OscConfig+0x310>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	e6d5      	b.n	80048c8 <HAL_RCC_OscConfig+0xd0>
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	fffeffff 	.word	0xfffeffff
 8004b24:	fffbffff 	.word	0xfffbffff
 8004b28:	40007000 	.word	0x40007000
 8004b2c:	feffffff 	.word	0xfeffffff
 8004b30:	00001388 	.word	0x00001388
 8004b34:	495d      	ldr	r1, [pc, #372]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004b36:	6a0a      	ldr	r2, [r1, #32]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	620b      	str	r3, [r1, #32]
 8004b3c:	f7fd fc50 	bl	80023e0 <HAL_GetTick>
 8004b40:	4b5a      	ldr	r3, [pc, #360]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004b42:	0006      	movs	r6, r0
 8004b44:	4698      	mov	r8, r3
 8004b46:	2702      	movs	r7, #2
 8004b48:	4d59      	ldr	r5, [pc, #356]	@ (8004cb0 <HAL_RCC_OscConfig+0x4b8>)
 8004b4a:	e004      	b.n	8004b56 <HAL_RCC_OscConfig+0x35e>
 8004b4c:	f7fd fc48 	bl	80023e0 <HAL_GetTick>
 8004b50:	1b80      	subs	r0, r0, r6
 8004b52:	42a8      	cmp	r0, r5
 8004b54:	d896      	bhi.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004b56:	4643      	mov	r3, r8
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	421f      	tst	r7, r3
 8004b5c:	d0f6      	beq.n	8004b4c <HAL_RCC_OscConfig+0x354>
 8004b5e:	e7c5      	b.n	8004aec <HAL_RCC_OscConfig+0x2f4>
 8004b60:	2204      	movs	r2, #4
 8004b62:	4d52      	ldr	r5, [pc, #328]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004b64:	2702      	movs	r7, #2
 8004b66:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	636b      	str	r3, [r5, #52]	@ 0x34
 8004b6c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004b6e:	3a03      	subs	r2, #3
 8004b70:	4393      	bics	r3, r2
 8004b72:	636b      	str	r3, [r5, #52]	@ 0x34
 8004b74:	f7fd fc34 	bl	80023e0 <HAL_GetTick>
 8004b78:	0006      	movs	r6, r0
 8004b7a:	e005      	b.n	8004b88 <HAL_RCC_OscConfig+0x390>
 8004b7c:	f7fd fc30 	bl	80023e0 <HAL_GetTick>
 8004b80:	1b80      	subs	r0, r0, r6
 8004b82:	2802      	cmp	r0, #2
 8004b84:	d900      	bls.n	8004b88 <HAL_RCC_OscConfig+0x390>
 8004b86:	e77d      	b.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004b88:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004b8a:	421f      	tst	r7, r3
 8004b8c:	d1f6      	bne.n	8004b7c <HAL_RCC_OscConfig+0x384>
 8004b8e:	e6f9      	b.n	8004984 <HAL_RCC_OscConfig+0x18c>
 8004b90:	4a46      	ldr	r2, [pc, #280]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004b92:	4948      	ldr	r1, [pc, #288]	@ (8004cb4 <HAL_RCC_OscConfig+0x4bc>)
 8004b94:	69d3      	ldr	r3, [r2, #28]
 8004b96:	400b      	ands	r3, r1
 8004b98:	61d3      	str	r3, [r2, #28]
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	e6dd      	b.n	800495a <HAL_RCC_OscConfig+0x162>
 8004b9e:	2104      	movs	r1, #4
 8004ba0:	4b42      	ldr	r3, [pc, #264]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004ba2:	6a1a      	ldr	r2, [r3, #32]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	621a      	str	r2, [r3, #32]
 8004ba8:	6a1a      	ldr	r2, [r3, #32]
 8004baa:	3903      	subs	r1, #3
 8004bac:	430a      	orrs	r2, r1
 8004bae:	621a      	str	r2, [r3, #32]
 8004bb0:	e7c4      	b.n	8004b3c <HAL_RCC_OscConfig+0x344>
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d100      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x3c0>
 8004bb6:	e71a      	b.n	80049ee <HAL_RCC_OscConfig+0x1f6>
 8004bb8:	22c0      	movs	r2, #192	@ 0xc0
 8004bba:	686b      	ldr	r3, [r5, #4]
 8004bbc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004bbe:	0252      	lsls	r2, r2, #9
 8004bc0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004bc2:	401a      	ands	r2, r3
 8004bc4:	428a      	cmp	r2, r1
 8004bc6:	d000      	beq.n	8004bca <HAL_RCC_OscConfig+0x3d2>
 8004bc8:	e711      	b.n	80049ee <HAL_RCC_OscConfig+0x1f6>
 8004bca:	220f      	movs	r2, #15
 8004bcc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004bce:	4002      	ands	r2, r0
 8004bd0:	428a      	cmp	r2, r1
 8004bd2:	d000      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x3de>
 8004bd4:	e70b      	b.n	80049ee <HAL_RCC_OscConfig+0x1f6>
 8004bd6:	22f0      	movs	r2, #240	@ 0xf0
 8004bd8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004bda:	0392      	lsls	r2, r2, #14
 8004bdc:	4013      	ands	r3, r2
 8004bde:	1a18      	subs	r0, r3, r0
 8004be0:	1e43      	subs	r3, r0, #1
 8004be2:	4198      	sbcs	r0, r3
 8004be4:	b2c0      	uxtb	r0, r0
 8004be6:	e6ed      	b.n	80049c4 <HAL_RCC_OscConfig+0x1cc>
 8004be8:	2104      	movs	r1, #4
 8004bea:	4d30      	ldr	r5, [pc, #192]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004bec:	2702      	movs	r7, #2
 8004bee:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	636a      	str	r2, [r5, #52]	@ 0x34
 8004bf4:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	636b      	str	r3, [r5, #52]	@ 0x34
 8004bfa:	f7fd fbf1 	bl	80023e0 <HAL_GetTick>
 8004bfe:	0006      	movs	r6, r0
 8004c00:	e005      	b.n	8004c0e <HAL_RCC_OscConfig+0x416>
 8004c02:	f7fd fbed 	bl	80023e0 <HAL_GetTick>
 8004c06:	1b80      	subs	r0, r0, r6
 8004c08:	2802      	cmp	r0, #2
 8004c0a:	d900      	bls.n	8004c0e <HAL_RCC_OscConfig+0x416>
 8004c0c:	e73a      	b.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004c0e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004c10:	421f      	tst	r7, r3
 8004c12:	d0f6      	beq.n	8004c02 <HAL_RCC_OscConfig+0x40a>
 8004c14:	21f8      	movs	r1, #248	@ 0xf8
 8004c16:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8004c18:	69a3      	ldr	r3, [r4, #24]
 8004c1a:	438a      	bics	r2, r1
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	636b      	str	r3, [r5, #52]	@ 0x34
 8004c22:	e6af      	b.n	8004984 <HAL_RCC_OscConfig+0x18c>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	4a24      	ldr	r2, [pc, #144]	@ (8004cb8 <HAL_RCC_OscConfig+0x4c0>)
 8004c28:	2780      	movs	r7, #128	@ 0x80
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	f7fd fbd7 	bl	80023e0 <HAL_GetTick>
 8004c32:	04bf      	lsls	r7, r7, #18
 8004c34:	0006      	movs	r6, r0
 8004c36:	e005      	b.n	8004c44 <HAL_RCC_OscConfig+0x44c>
 8004c38:	f7fd fbd2 	bl	80023e0 <HAL_GetTick>
 8004c3c:	1b80      	subs	r0, r0, r6
 8004c3e:	2802      	cmp	r0, #2
 8004c40:	d900      	bls.n	8004c44 <HAL_RCC_OscConfig+0x44c>
 8004c42:	e71f      	b.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	423b      	tst	r3, r7
 8004c48:	d1f6      	bne.n	8004c38 <HAL_RCC_OscConfig+0x440>
 8004c4a:	220f      	movs	r2, #15
 8004c4c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8004c4e:	4e17      	ldr	r6, [pc, #92]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004c50:	4393      	bics	r3, r2
 8004c52:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004c54:	4313      	orrs	r3, r2
 8004c56:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8004c58:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004c5a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004c5c:	686a      	ldr	r2, [r5, #4]
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	4916      	ldr	r1, [pc, #88]	@ (8004cbc <HAL_RCC_OscConfig+0x4c4>)
 8004c62:	400a      	ands	r2, r1
 8004c64:	4313      	orrs	r3, r2
 8004c66:	606b      	str	r3, [r5, #4]
 8004c68:	2380      	movs	r3, #128	@ 0x80
 8004c6a:	682a      	ldr	r2, [r5, #0]
 8004c6c:	045b      	lsls	r3, r3, #17
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	602b      	str	r3, [r5, #0]
 8004c72:	f7fd fbb5 	bl	80023e0 <HAL_GetTick>
 8004c76:	2580      	movs	r5, #128	@ 0x80
 8004c78:	0004      	movs	r4, r0
 8004c7a:	04ad      	lsls	r5, r5, #18
 8004c7c:	e005      	b.n	8004c8a <HAL_RCC_OscConfig+0x492>
 8004c7e:	f7fd fbaf 	bl	80023e0 <HAL_GetTick>
 8004c82:	1b00      	subs	r0, r0, r4
 8004c84:	2802      	cmp	r0, #2
 8004c86:	d900      	bls.n	8004c8a <HAL_RCC_OscConfig+0x492>
 8004c88:	e6fc      	b.n	8004a84 <HAL_RCC_OscConfig+0x28c>
 8004c8a:	6833      	ldr	r3, [r6, #0]
 8004c8c:	422b      	tst	r3, r5
 8004c8e:	d0f6      	beq.n	8004c7e <HAL_RCC_OscConfig+0x486>
 8004c90:	e697      	b.n	80049c2 <HAL_RCC_OscConfig+0x1ca>
 8004c92:	2280      	movs	r2, #128	@ 0x80
 8004c94:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <HAL_RCC_OscConfig+0x4b4>)
 8004c96:	02d2      	lsls	r2, r2, #11
 8004c98:	6819      	ldr	r1, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	2280      	movs	r2, #128	@ 0x80
 8004ca0:	6819      	ldr	r1, [r3, #0]
 8004ca2:	0252      	lsls	r2, r2, #9
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	e5d1      	b.n	800484e <HAL_RCC_OscConfig+0x56>
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	00001388 	.word	0x00001388
 8004cb4:	efffffff 	.word	0xefffffff
 8004cb8:	feffffff 	.word	0xfeffffff
 8004cbc:	ffc27fff 	.word	0xffc27fff

08004cc0 <HAL_RCC_ClockConfig>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	46ce      	mov	lr, r9
 8004cc4:	4647      	mov	r7, r8
 8004cc6:	0004      	movs	r4, r0
 8004cc8:	000d      	movs	r5, r1
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d00d      	beq.n	8004cec <HAL_RCC_ClockConfig+0x2c>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4945      	ldr	r1, [pc, #276]	@ (8004de8 <HAL_RCC_ClockConfig+0x128>)
 8004cd4:	680a      	ldr	r2, [r1, #0]
 8004cd6:	401a      	ands	r2, r3
 8004cd8:	42aa      	cmp	r2, r5
 8004cda:	d20c      	bcs.n	8004cf6 <HAL_RCC_ClockConfig+0x36>
 8004cdc:	680a      	ldr	r2, [r1, #0]
 8004cde:	439a      	bics	r2, r3
 8004ce0:	432a      	orrs	r2, r5
 8004ce2:	600a      	str	r2, [r1, #0]
 8004ce4:	680a      	ldr	r2, [r1, #0]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	42ab      	cmp	r3, r5
 8004cea:	d004      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x36>
 8004cec:	2001      	movs	r0, #1
 8004cee:	bcc0      	pop	{r6, r7}
 8004cf0:	46b9      	mov	r9, r7
 8004cf2:	46b0      	mov	r8, r6
 8004cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	079a      	lsls	r2, r3, #30
 8004cfa:	d50e      	bpl.n	8004d1a <HAL_RCC_ClockConfig+0x5a>
 8004cfc:	075a      	lsls	r2, r3, #29
 8004cfe:	d505      	bpl.n	8004d0c <HAL_RCC_ClockConfig+0x4c>
 8004d00:	22e0      	movs	r2, #224	@ 0xe0
 8004d02:	493a      	ldr	r1, [pc, #232]	@ (8004dec <HAL_RCC_ClockConfig+0x12c>)
 8004d04:	00d2      	lsls	r2, r2, #3
 8004d06:	6848      	ldr	r0, [r1, #4]
 8004d08:	4302      	orrs	r2, r0
 8004d0a:	604a      	str	r2, [r1, #4]
 8004d0c:	20f0      	movs	r0, #240	@ 0xf0
 8004d0e:	4937      	ldr	r1, [pc, #220]	@ (8004dec <HAL_RCC_ClockConfig+0x12c>)
 8004d10:	684a      	ldr	r2, [r1, #4]
 8004d12:	4382      	bics	r2, r0
 8004d14:	68a0      	ldr	r0, [r4, #8]
 8004d16:	4302      	orrs	r2, r0
 8004d18:	604a      	str	r2, [r1, #4]
 8004d1a:	07db      	lsls	r3, r3, #31
 8004d1c:	d522      	bpl.n	8004d64 <HAL_RCC_ClockConfig+0xa4>
 8004d1e:	4b33      	ldr	r3, [pc, #204]	@ (8004dec <HAL_RCC_ClockConfig+0x12c>)
 8004d20:	6862      	ldr	r2, [r4, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2a01      	cmp	r2, #1
 8004d26:	d059      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x11c>
 8004d28:	2a02      	cmp	r2, #2
 8004d2a:	d054      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x116>
 8004d2c:	079b      	lsls	r3, r3, #30
 8004d2e:	d5dd      	bpl.n	8004cec <HAL_RCC_ClockConfig+0x2c>
 8004d30:	2103      	movs	r1, #3
 8004d32:	4e2e      	ldr	r6, [pc, #184]	@ (8004dec <HAL_RCC_ClockConfig+0x12c>)
 8004d34:	6873      	ldr	r3, [r6, #4]
 8004d36:	438b      	bics	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	6073      	str	r3, [r6, #4]
 8004d3c:	f7fd fb50 	bl	80023e0 <HAL_GetTick>
 8004d40:	230c      	movs	r3, #12
 8004d42:	4698      	mov	r8, r3
 8004d44:	4b2a      	ldr	r3, [pc, #168]	@ (8004df0 <HAL_RCC_ClockConfig+0x130>)
 8004d46:	0007      	movs	r7, r0
 8004d48:	4699      	mov	r9, r3
 8004d4a:	e004      	b.n	8004d56 <HAL_RCC_ClockConfig+0x96>
 8004d4c:	f7fd fb48 	bl	80023e0 <HAL_GetTick>
 8004d50:	1bc0      	subs	r0, r0, r7
 8004d52:	4548      	cmp	r0, r9
 8004d54:	d845      	bhi.n	8004de2 <HAL_RCC_ClockConfig+0x122>
 8004d56:	4643      	mov	r3, r8
 8004d58:	6872      	ldr	r2, [r6, #4]
 8004d5a:	401a      	ands	r2, r3
 8004d5c:	6863      	ldr	r3, [r4, #4]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d1f3      	bne.n	8004d4c <HAL_RCC_ClockConfig+0x8c>
 8004d64:	2101      	movs	r1, #1
 8004d66:	4a20      	ldr	r2, [pc, #128]	@ (8004de8 <HAL_RCC_ClockConfig+0x128>)
 8004d68:	6813      	ldr	r3, [r2, #0]
 8004d6a:	400b      	ands	r3, r1
 8004d6c:	42ab      	cmp	r3, r5
 8004d6e:	d905      	bls.n	8004d7c <HAL_RCC_ClockConfig+0xbc>
 8004d70:	6813      	ldr	r3, [r2, #0]
 8004d72:	438b      	bics	r3, r1
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	6813      	ldr	r3, [r2, #0]
 8004d78:	4219      	tst	r1, r3
 8004d7a:	d1b7      	bne.n	8004cec <HAL_RCC_ClockConfig+0x2c>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	075b      	lsls	r3, r3, #29
 8004d80:	d506      	bpl.n	8004d90 <HAL_RCC_ClockConfig+0xd0>
 8004d82:	4a1a      	ldr	r2, [pc, #104]	@ (8004dec <HAL_RCC_ClockConfig+0x12c>)
 8004d84:	491b      	ldr	r1, [pc, #108]	@ (8004df4 <HAL_RCC_ClockConfig+0x134>)
 8004d86:	6853      	ldr	r3, [r2, #4]
 8004d88:	400b      	ands	r3, r1
 8004d8a:	68e1      	ldr	r1, [r4, #12]
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6053      	str	r3, [r2, #4]
 8004d90:	220c      	movs	r2, #12
 8004d92:	4916      	ldr	r1, [pc, #88]	@ (8004dec <HAL_RCC_ClockConfig+0x12c>)
 8004d94:	684b      	ldr	r3, [r1, #4]
 8004d96:	401a      	ands	r2, r3
 8004d98:	2a08      	cmp	r2, #8
 8004d9a:	d00e      	beq.n	8004dba <HAL_RCC_ClockConfig+0xfa>
 8004d9c:	4816      	ldr	r0, [pc, #88]	@ (8004df8 <HAL_RCC_ClockConfig+0x138>)
 8004d9e:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <HAL_RCC_ClockConfig+0x12c>)
 8004da0:	4a16      	ldr	r2, [pc, #88]	@ (8004dfc <HAL_RCC_ClockConfig+0x13c>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4916      	ldr	r1, [pc, #88]	@ (8004e00 <HAL_RCC_ClockConfig+0x140>)
 8004da6:	061b      	lsls	r3, r3, #24
 8004da8:	0f1b      	lsrs	r3, r3, #28
 8004daa:	5cd3      	ldrb	r3, [r2, r3]
 8004dac:	40d8      	lsrs	r0, r3
 8004dae:	6008      	str	r0, [r1, #0]
 8004db0:	2003      	movs	r0, #3
 8004db2:	f7fd fad3 	bl	800235c <HAL_InitTick>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e799      	b.n	8004cee <HAL_RCC_ClockConfig+0x2e>
 8004dba:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 8004dbc:	3207      	adds	r2, #7
 8004dbe:	4911      	ldr	r1, [pc, #68]	@ (8004e04 <HAL_RCC_ClockConfig+0x144>)
 8004dc0:	0c9b      	lsrs	r3, r3, #18
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	5ccc      	ldrb	r4, [r1, r3]
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <HAL_RCC_ClockConfig+0x148>)
 8004dc8:	4002      	ands	r2, r0
 8004dca:	5c99      	ldrb	r1, [r3, r2]
 8004dcc:	480a      	ldr	r0, [pc, #40]	@ (8004df8 <HAL_RCC_ClockConfig+0x138>)
 8004dce:	f7fb f9ad 	bl	800012c <__udivsi3>
 8004dd2:	4360      	muls	r0, r4
 8004dd4:	e7e3      	b.n	8004d9e <HAL_RCC_ClockConfig+0xde>
 8004dd6:	019b      	lsls	r3, r3, #6
 8004dd8:	d4aa      	bmi.n	8004d30 <HAL_RCC_ClockConfig+0x70>
 8004dda:	e787      	b.n	8004cec <HAL_RCC_ClockConfig+0x2c>
 8004ddc:	039b      	lsls	r3, r3, #14
 8004dde:	d4a7      	bmi.n	8004d30 <HAL_RCC_ClockConfig+0x70>
 8004de0:	e784      	b.n	8004cec <HAL_RCC_ClockConfig+0x2c>
 8004de2:	2003      	movs	r0, #3
 8004de4:	e783      	b.n	8004cee <HAL_RCC_ClockConfig+0x2e>
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	40022000 	.word	0x40022000
 8004dec:	40021000 	.word	0x40021000
 8004df0:	00001388 	.word	0x00001388
 8004df4:	fffff8ff 	.word	0xfffff8ff
 8004df8:	007a1200 	.word	0x007a1200
 8004dfc:	08008cb0 	.word	0x08008cb0
 8004e00:	20000014 	.word	0x20000014
 8004e04:	08008cd0 	.word	0x08008cd0
 8004e08:	08008cc0 	.word	0x08008cc0

08004e0c <HAL_RCCEx_PeriphCLKConfig>:
 8004e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e0e:	46ce      	mov	lr, r9
 8004e10:	4647      	mov	r7, r8
 8004e12:	b580      	push	{r7, lr}
 8004e14:	6803      	ldr	r3, [r0, #0]
 8004e16:	0004      	movs	r4, r0
 8004e18:	b083      	sub	sp, #12
 8004e1a:	03da      	lsls	r2, r3, #15
 8004e1c:	d530      	bpl.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e1e:	2280      	movs	r2, #128	@ 0x80
 8004e20:	4b44      	ldr	r3, [pc, #272]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004e22:	0552      	lsls	r2, r2, #21
 8004e24:	69d9      	ldr	r1, [r3, #28]
 8004e26:	2700      	movs	r7, #0
 8004e28:	4211      	tst	r1, r2
 8004e2a:	d04b      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004e2c:	2680      	movs	r6, #128	@ 0x80
 8004e2e:	4d42      	ldr	r5, [pc, #264]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8004e30:	0076      	lsls	r6, r6, #1
 8004e32:	682b      	ldr	r3, [r5, #0]
 8004e34:	4233      	tst	r3, r6
 8004e36:	d053      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004e38:	4d3e      	ldr	r5, [pc, #248]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004e3a:	23c0      	movs	r3, #192	@ 0xc0
 8004e3c:	6a2a      	ldr	r2, [r5, #32]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	0010      	movs	r0, r2
 8004e42:	6861      	ldr	r1, [r4, #4]
 8004e44:	4018      	ands	r0, r3
 8004e46:	421a      	tst	r2, r3
 8004e48:	d011      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e4a:	400b      	ands	r3, r1
 8004e4c:	4283      	cmp	r3, r0
 8004e4e:	d00e      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e50:	2080      	movs	r0, #128	@ 0x80
 8004e52:	6a2b      	ldr	r3, [r5, #32]
 8004e54:	6a2e      	ldr	r6, [r5, #32]
 8004e56:	0240      	lsls	r0, r0, #9
 8004e58:	4330      	orrs	r0, r6
 8004e5a:	6228      	str	r0, [r5, #32]
 8004e5c:	6a28      	ldr	r0, [r5, #32]
 8004e5e:	4a37      	ldr	r2, [pc, #220]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e60:	4e37      	ldr	r6, [pc, #220]	@ (8004f40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e62:	401a      	ands	r2, r3
 8004e64:	4030      	ands	r0, r6
 8004e66:	6228      	str	r0, [r5, #32]
 8004e68:	622a      	str	r2, [r5, #32]
 8004e6a:	07db      	lsls	r3, r3, #31
 8004e6c:	d44f      	bmi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x102>
 8004e6e:	4a31      	ldr	r2, [pc, #196]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004e70:	4832      	ldr	r0, [pc, #200]	@ (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e72:	6a13      	ldr	r3, [r2, #32]
 8004e74:	4003      	ands	r3, r0
 8004e76:	430b      	orrs	r3, r1
 8004e78:	6213      	str	r3, [r2, #32]
 8004e7a:	2f01      	cmp	r7, #1
 8004e7c:	d041      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	07da      	lsls	r2, r3, #31
 8004e82:	d506      	bpl.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004e84:	2003      	movs	r0, #3
 8004e86:	492b      	ldr	r1, [pc, #172]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004e88:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004e8a:	4382      	bics	r2, r0
 8004e8c:	68a0      	ldr	r0, [r4, #8]
 8004e8e:	4302      	orrs	r2, r0
 8004e90:	630a      	str	r2, [r1, #48]	@ 0x30
 8004e92:	069a      	lsls	r2, r3, #26
 8004e94:	d506      	bpl.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004e96:	2010      	movs	r0, #16
 8004e98:	4926      	ldr	r1, [pc, #152]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004e9a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004e9c:	4382      	bics	r2, r0
 8004e9e:	68e0      	ldr	r0, [r4, #12]
 8004ea0:	4302      	orrs	r2, r0
 8004ea2:	630a      	str	r2, [r1, #48]	@ 0x30
 8004ea4:	039b      	lsls	r3, r3, #14
 8004ea6:	d405      	bmi.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	b003      	add	sp, #12
 8004eac:	bcc0      	pop	{r6, r7}
 8004eae:	46b9      	mov	r9, r7
 8004eb0:	46b0      	mov	r8, r6
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb4:	2180      	movs	r1, #128	@ 0x80
 8004eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004eb8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004eba:	438b      	bics	r3, r1
 8004ebc:	6921      	ldr	r1, [r4, #16]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ec2:	e7f1      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8004ec4:	2680      	movs	r6, #128	@ 0x80
 8004ec6:	69d9      	ldr	r1, [r3, #28]
 8004ec8:	4d1b      	ldr	r5, [pc, #108]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8004eca:	4311      	orrs	r1, r2
 8004ecc:	61d9      	str	r1, [r3, #28]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	0076      	lsls	r6, r6, #1
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	9b01      	ldr	r3, [sp, #4]
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	3701      	adds	r7, #1
 8004edc:	4233      	tst	r3, r6
 8004ede:	d1ab      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8004ee0:	682b      	ldr	r3, [r5, #0]
 8004ee2:	4333      	orrs	r3, r6
 8004ee4:	602b      	str	r3, [r5, #0]
 8004ee6:	f7fd fa7b 	bl	80023e0 <HAL_GetTick>
 8004eea:	4680      	mov	r8, r0
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	4233      	tst	r3, r6
 8004ef0:	d1a2      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2c>
 8004ef2:	f7fd fa75 	bl	80023e0 <HAL_GetTick>
 8004ef6:	4643      	mov	r3, r8
 8004ef8:	1ac0      	subs	r0, r0, r3
 8004efa:	2864      	cmp	r0, #100	@ 0x64
 8004efc:	d9f6      	bls.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xe0>
 8004efe:	2003      	movs	r0, #3
 8004f00:	e7d3      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8004f02:	69d3      	ldr	r3, [r2, #28]
 8004f04:	490f      	ldr	r1, [pc, #60]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8004f06:	400b      	ands	r3, r1
 8004f08:	61d3      	str	r3, [r2, #28]
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	e7b8      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f0e:	f7fd fa67 	bl	80023e0 <HAL_GetTick>
 8004f12:	2302      	movs	r3, #2
 8004f14:	4698      	mov	r8, r3
 8004f16:	4b0c      	ldr	r3, [pc, #48]	@ (8004f48 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004f18:	0006      	movs	r6, r0
 8004f1a:	4699      	mov	r9, r3
 8004f1c:	e004      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004f1e:	f7fd fa5f 	bl	80023e0 <HAL_GetTick>
 8004f22:	1b80      	subs	r0, r0, r6
 8004f24:	4548      	cmp	r0, r9
 8004f26:	d8ea      	bhi.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8004f28:	4642      	mov	r2, r8
 8004f2a:	6a2b      	ldr	r3, [r5, #32]
 8004f2c:	421a      	tst	r2, r3
 8004f2e:	d0f6      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004f30:	6861      	ldr	r1, [r4, #4]
 8004f32:	e79c      	b.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40007000 	.word	0x40007000
 8004f3c:	fffffcff 	.word	0xfffffcff
 8004f40:	fffeffff 	.word	0xfffeffff
 8004f44:	efffffff 	.word	0xefffffff
 8004f48:	00001388 	.word	0x00001388

08004f4c <TIM_OC1_SetConfig>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	2401      	movs	r4, #1
 8004f50:	2573      	movs	r5, #115	@ 0x73
 8004f52:	6a03      	ldr	r3, [r0, #32]
 8004f54:	6a02      	ldr	r2, [r0, #32]
 8004f56:	43a2      	bics	r2, r4
 8004f58:	6202      	str	r2, [r0, #32]
 8004f5a:	6842      	ldr	r2, [r0, #4]
 8004f5c:	6984      	ldr	r4, [r0, #24]
 8004f5e:	43ac      	bics	r4, r5
 8004f60:	680d      	ldr	r5, [r1, #0]
 8004f62:	432c      	orrs	r4, r5
 8004f64:	2502      	movs	r5, #2
 8004f66:	43ab      	bics	r3, r5
 8004f68:	688d      	ldr	r5, [r1, #8]
 8004f6a:	432b      	orrs	r3, r5
 8004f6c:	4d0e      	ldr	r5, [pc, #56]	@ (8004fa8 <TIM_OC1_SetConfig+0x5c>)
 8004f6e:	42a8      	cmp	r0, r5
 8004f70:	d008      	beq.n	8004f84 <TIM_OC1_SetConfig+0x38>
 8004f72:	4d0e      	ldr	r5, [pc, #56]	@ (8004fac <TIM_OC1_SetConfig+0x60>)
 8004f74:	42a8      	cmp	r0, r5
 8004f76:	d005      	beq.n	8004f84 <TIM_OC1_SetConfig+0x38>
 8004f78:	4d0d      	ldr	r5, [pc, #52]	@ (8004fb0 <TIM_OC1_SetConfig+0x64>)
 8004f7a:	42a8      	cmp	r0, r5
 8004f7c:	d002      	beq.n	8004f84 <TIM_OC1_SetConfig+0x38>
 8004f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8004fb4 <TIM_OC1_SetConfig+0x68>)
 8004f80:	42a8      	cmp	r0, r5
 8004f82:	d10b      	bne.n	8004f9c <TIM_OC1_SetConfig+0x50>
 8004f84:	2508      	movs	r5, #8
 8004f86:	43ab      	bics	r3, r5
 8004f88:	68cd      	ldr	r5, [r1, #12]
 8004f8a:	698e      	ldr	r6, [r1, #24]
 8004f8c:	432b      	orrs	r3, r5
 8004f8e:	2504      	movs	r5, #4
 8004f90:	43ab      	bics	r3, r5
 8004f92:	4d09      	ldr	r5, [pc, #36]	@ (8004fb8 <TIM_OC1_SetConfig+0x6c>)
 8004f94:	4015      	ands	r5, r2
 8004f96:	694a      	ldr	r2, [r1, #20]
 8004f98:	4332      	orrs	r2, r6
 8004f9a:	432a      	orrs	r2, r5
 8004f9c:	6042      	str	r2, [r0, #4]
 8004f9e:	684a      	ldr	r2, [r1, #4]
 8004fa0:	6184      	str	r4, [r0, #24]
 8004fa2:	6342      	str	r2, [r0, #52]	@ 0x34
 8004fa4:	6203      	str	r3, [r0, #32]
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800
 8004fb8:	fffffcff 	.word	0xfffffcff

08004fbc <HAL_TIM_Base_Init>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	1e04      	subs	r4, r0, #0
 8004fc0:	d100      	bne.n	8004fc4 <HAL_TIM_Base_Init+0x8>
 8004fc2:	e06d      	b.n	80050a0 <HAL_TIM_Base_Init+0xe4>
 8004fc4:	233d      	movs	r3, #61	@ 0x3d
 8004fc6:	5cc3      	ldrb	r3, [r0, r3]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d020      	beq.n	8005010 <HAL_TIM_Base_Init+0x54>
 8004fce:	233d      	movs	r3, #61	@ 0x3d
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	54e2      	strb	r2, [r4, r3]
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	4e33      	ldr	r6, [pc, #204]	@ (80050a4 <HAL_TIM_Base_Init+0xe8>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	6861      	ldr	r1, [r4, #4]
 8004fdc:	68e0      	ldr	r0, [r4, #12]
 8004fde:	69a5      	ldr	r5, [r4, #24]
 8004fe0:	42b3      	cmp	r3, r6
 8004fe2:	d01a      	beq.n	800501a <HAL_TIM_Base_Init+0x5e>
 8004fe4:	4e30      	ldr	r6, [pc, #192]	@ (80050a8 <HAL_TIM_Base_Init+0xec>)
 8004fe6:	42b3      	cmp	r3, r6
 8004fe8:	d046      	beq.n	8005078 <HAL_TIM_Base_Init+0xbc>
 8004fea:	4e30      	ldr	r6, [pc, #192]	@ (80050ac <HAL_TIM_Base_Init+0xf0>)
 8004fec:	42b3      	cmp	r3, r6
 8004fee:	d047      	beq.n	8005080 <HAL_TIM_Base_Init+0xc4>
 8004ff0:	4e2f      	ldr	r6, [pc, #188]	@ (80050b0 <HAL_TIM_Base_Init+0xf4>)
 8004ff2:	42b3      	cmp	r3, r6
 8004ff4:	d049      	beq.n	800508a <HAL_TIM_Base_Init+0xce>
 8004ff6:	4e2f      	ldr	r6, [pc, #188]	@ (80050b4 <HAL_TIM_Base_Init+0xf8>)
 8004ff8:	42b3      	cmp	r3, r6
 8004ffa:	d012      	beq.n	8005022 <HAL_TIM_Base_Init+0x66>
 8004ffc:	4e2e      	ldr	r6, [pc, #184]	@ (80050b8 <HAL_TIM_Base_Init+0xfc>)
 8004ffe:	42b3      	cmp	r3, r6
 8005000:	d00f      	beq.n	8005022 <HAL_TIM_Base_Init+0x66>
 8005002:	2680      	movs	r6, #128	@ 0x80
 8005004:	43b2      	bics	r2, r6
 8005006:	432a      	orrs	r2, r5
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	62d8      	str	r0, [r3, #44]	@ 0x2c
 800500c:	6299      	str	r1, [r3, #40]	@ 0x28
 800500e:	e014      	b.n	800503a <HAL_TIM_Base_Init+0x7e>
 8005010:	333c      	adds	r3, #60	@ 0x3c
 8005012:	54c2      	strb	r2, [r0, r3]
 8005014:	f7fd f85a 	bl	80020cc <HAL_TIM_Base_MspInit>
 8005018:	e7d9      	b.n	8004fce <HAL_TIM_Base_Init+0x12>
 800501a:	2670      	movs	r6, #112	@ 0x70
 800501c:	43b2      	bics	r2, r6
 800501e:	68a6      	ldr	r6, [r4, #8]
 8005020:	4332      	orrs	r2, r6
 8005022:	4e26      	ldr	r6, [pc, #152]	@ (80050bc <HAL_TIM_Base_Init+0x100>)
 8005024:	4032      	ands	r2, r6
 8005026:	6926      	ldr	r6, [r4, #16]
 8005028:	4332      	orrs	r2, r6
 800502a:	2680      	movs	r6, #128	@ 0x80
 800502c:	43b2      	bics	r2, r6
 800502e:	432a      	orrs	r2, r5
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8005034:	6299      	str	r1, [r3, #40]	@ 0x28
 8005036:	6962      	ldr	r2, [r4, #20]
 8005038:	631a      	str	r2, [r3, #48]	@ 0x30
 800503a:	2201      	movs	r2, #1
 800503c:	615a      	str	r2, [r3, #20]
 800503e:	6919      	ldr	r1, [r3, #16]
 8005040:	420a      	tst	r2, r1
 8005042:	d002      	beq.n	800504a <HAL_TIM_Base_Init+0x8e>
 8005044:	6919      	ldr	r1, [r3, #16]
 8005046:	4391      	bics	r1, r2
 8005048:	6119      	str	r1, [r3, #16]
 800504a:	2301      	movs	r3, #1
 800504c:	2246      	movs	r2, #70	@ 0x46
 800504e:	2000      	movs	r0, #0
 8005050:	54a3      	strb	r3, [r4, r2]
 8005052:	3a08      	subs	r2, #8
 8005054:	54a3      	strb	r3, [r4, r2]
 8005056:	3201      	adds	r2, #1
 8005058:	54a3      	strb	r3, [r4, r2]
 800505a:	3201      	adds	r2, #1
 800505c:	54a3      	strb	r3, [r4, r2]
 800505e:	3201      	adds	r2, #1
 8005060:	54a3      	strb	r3, [r4, r2]
 8005062:	3201      	adds	r2, #1
 8005064:	54a3      	strb	r3, [r4, r2]
 8005066:	3201      	adds	r2, #1
 8005068:	54a3      	strb	r3, [r4, r2]
 800506a:	3201      	adds	r2, #1
 800506c:	54a3      	strb	r3, [r4, r2]
 800506e:	3201      	adds	r2, #1
 8005070:	54a3      	strb	r3, [r4, r2]
 8005072:	3a08      	subs	r2, #8
 8005074:	54a3      	strb	r3, [r4, r2]
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	2670      	movs	r6, #112	@ 0x70
 800507a:	43b2      	bics	r2, r6
 800507c:	68a6      	ldr	r6, [r4, #8]
 800507e:	4332      	orrs	r2, r6
 8005080:	4e0e      	ldr	r6, [pc, #56]	@ (80050bc <HAL_TIM_Base_Init+0x100>)
 8005082:	4032      	ands	r2, r6
 8005084:	6926      	ldr	r6, [r4, #16]
 8005086:	4332      	orrs	r2, r6
 8005088:	e7bb      	b.n	8005002 <HAL_TIM_Base_Init+0x46>
 800508a:	4e0c      	ldr	r6, [pc, #48]	@ (80050bc <HAL_TIM_Base_Init+0x100>)
 800508c:	4032      	ands	r2, r6
 800508e:	6926      	ldr	r6, [r4, #16]
 8005090:	4332      	orrs	r2, r6
 8005092:	2680      	movs	r6, #128	@ 0x80
 8005094:	43b2      	bics	r2, r6
 8005096:	4315      	orrs	r5, r2
 8005098:	601d      	str	r5, [r3, #0]
 800509a:	62d8      	str	r0, [r3, #44]	@ 0x2c
 800509c:	6299      	str	r1, [r3, #40]	@ 0x28
 800509e:	e7ca      	b.n	8005036 <HAL_TIM_Base_Init+0x7a>
 80050a0:	2001      	movs	r0, #1
 80050a2:	e7e8      	b.n	8005076 <HAL_TIM_Base_Init+0xba>
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40002000 	.word	0x40002000
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800
 80050bc:	fffffcff 	.word	0xfffffcff

080050c0 <HAL_TIM_Base_Start>:
 80050c0:	213d      	movs	r1, #61	@ 0x3d
 80050c2:	b510      	push	{r4, lr}
 80050c4:	5c42      	ldrb	r2, [r0, r1]
 80050c6:	0003      	movs	r3, r0
 80050c8:	b2d4      	uxtb	r4, r2
 80050ca:	2001      	movs	r0, #1
 80050cc:	2a01      	cmp	r2, #1
 80050ce:	d10f      	bne.n	80050f0 <HAL_TIM_Base_Start+0x30>
 80050d0:	3201      	adds	r2, #1
 80050d2:	545a      	strb	r2, [r3, r1]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a0c      	ldr	r2, [pc, #48]	@ (8005108 <HAL_TIM_Base_Start+0x48>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00a      	beq.n	80050f2 <HAL_TIM_Base_Start+0x32>
 80050dc:	4a0b      	ldr	r2, [pc, #44]	@ (800510c <HAL_TIM_Base_Start+0x4c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <HAL_TIM_Base_Start+0x32>
 80050e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005110 <HAL_TIM_Base_Start+0x50>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIM_Base_Start+0x32>
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4322      	orrs	r2, r4
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	2000      	movs	r0, #0
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	2207      	movs	r2, #7
 80050f4:	6899      	ldr	r1, [r3, #8]
 80050f6:	400a      	ands	r2, r1
 80050f8:	2a06      	cmp	r2, #6
 80050fa:	d0f8      	beq.n	80050ee <HAL_TIM_Base_Start+0x2e>
 80050fc:	2101      	movs	r1, #1
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	2000      	movs	r0, #0
 8005102:	430a      	orrs	r2, r1
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e7f3      	b.n	80050f0 <HAL_TIM_Base_Start+0x30>
 8005108:	40012c00 	.word	0x40012c00
 800510c:	40000400 	.word	0x40000400
 8005110:	40014000 	.word	0x40014000

08005114 <HAL_TIM_PWM_MspInit>:
 8005114:	4770      	bx	lr
 8005116:	46c0      	nop			@ (mov r8, r8)

08005118 <HAL_TIM_PWM_Init>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	1e04      	subs	r4, r0, #0
 800511c:	d100      	bne.n	8005120 <HAL_TIM_PWM_Init+0x8>
 800511e:	e06d      	b.n	80051fc <HAL_TIM_PWM_Init+0xe4>
 8005120:	233d      	movs	r3, #61	@ 0x3d
 8005122:	5cc3      	ldrb	r3, [r0, r3]
 8005124:	b2da      	uxtb	r2, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d020      	beq.n	800516c <HAL_TIM_PWM_Init+0x54>
 800512a:	233d      	movs	r3, #61	@ 0x3d
 800512c:	2202      	movs	r2, #2
 800512e:	54e2      	strb	r2, [r4, r3]
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	4e33      	ldr	r6, [pc, #204]	@ (8005200 <HAL_TIM_PWM_Init+0xe8>)
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	6861      	ldr	r1, [r4, #4]
 8005138:	68e0      	ldr	r0, [r4, #12]
 800513a:	69a5      	ldr	r5, [r4, #24]
 800513c:	42b3      	cmp	r3, r6
 800513e:	d01a      	beq.n	8005176 <HAL_TIM_PWM_Init+0x5e>
 8005140:	4e30      	ldr	r6, [pc, #192]	@ (8005204 <HAL_TIM_PWM_Init+0xec>)
 8005142:	42b3      	cmp	r3, r6
 8005144:	d046      	beq.n	80051d4 <HAL_TIM_PWM_Init+0xbc>
 8005146:	4e30      	ldr	r6, [pc, #192]	@ (8005208 <HAL_TIM_PWM_Init+0xf0>)
 8005148:	42b3      	cmp	r3, r6
 800514a:	d047      	beq.n	80051dc <HAL_TIM_PWM_Init+0xc4>
 800514c:	4e2f      	ldr	r6, [pc, #188]	@ (800520c <HAL_TIM_PWM_Init+0xf4>)
 800514e:	42b3      	cmp	r3, r6
 8005150:	d049      	beq.n	80051e6 <HAL_TIM_PWM_Init+0xce>
 8005152:	4e2f      	ldr	r6, [pc, #188]	@ (8005210 <HAL_TIM_PWM_Init+0xf8>)
 8005154:	42b3      	cmp	r3, r6
 8005156:	d012      	beq.n	800517e <HAL_TIM_PWM_Init+0x66>
 8005158:	4e2e      	ldr	r6, [pc, #184]	@ (8005214 <HAL_TIM_PWM_Init+0xfc>)
 800515a:	42b3      	cmp	r3, r6
 800515c:	d00f      	beq.n	800517e <HAL_TIM_PWM_Init+0x66>
 800515e:	2680      	movs	r6, #128	@ 0x80
 8005160:	43b2      	bics	r2, r6
 8005162:	432a      	orrs	r2, r5
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8005168:	6299      	str	r1, [r3, #40]	@ 0x28
 800516a:	e014      	b.n	8005196 <HAL_TIM_PWM_Init+0x7e>
 800516c:	333c      	adds	r3, #60	@ 0x3c
 800516e:	54c2      	strb	r2, [r0, r3]
 8005170:	f7ff ffd0 	bl	8005114 <HAL_TIM_PWM_MspInit>
 8005174:	e7d9      	b.n	800512a <HAL_TIM_PWM_Init+0x12>
 8005176:	2670      	movs	r6, #112	@ 0x70
 8005178:	43b2      	bics	r2, r6
 800517a:	68a6      	ldr	r6, [r4, #8]
 800517c:	4332      	orrs	r2, r6
 800517e:	4e26      	ldr	r6, [pc, #152]	@ (8005218 <HAL_TIM_PWM_Init+0x100>)
 8005180:	4032      	ands	r2, r6
 8005182:	6926      	ldr	r6, [r4, #16]
 8005184:	4332      	orrs	r2, r6
 8005186:	2680      	movs	r6, #128	@ 0x80
 8005188:	43b2      	bics	r2, r6
 800518a:	432a      	orrs	r2, r5
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	62d8      	str	r0, [r3, #44]	@ 0x2c
 8005190:	6299      	str	r1, [r3, #40]	@ 0x28
 8005192:	6962      	ldr	r2, [r4, #20]
 8005194:	631a      	str	r2, [r3, #48]	@ 0x30
 8005196:	2201      	movs	r2, #1
 8005198:	615a      	str	r2, [r3, #20]
 800519a:	6919      	ldr	r1, [r3, #16]
 800519c:	420a      	tst	r2, r1
 800519e:	d002      	beq.n	80051a6 <HAL_TIM_PWM_Init+0x8e>
 80051a0:	6919      	ldr	r1, [r3, #16]
 80051a2:	4391      	bics	r1, r2
 80051a4:	6119      	str	r1, [r3, #16]
 80051a6:	2301      	movs	r3, #1
 80051a8:	2246      	movs	r2, #70	@ 0x46
 80051aa:	2000      	movs	r0, #0
 80051ac:	54a3      	strb	r3, [r4, r2]
 80051ae:	3a08      	subs	r2, #8
 80051b0:	54a3      	strb	r3, [r4, r2]
 80051b2:	3201      	adds	r2, #1
 80051b4:	54a3      	strb	r3, [r4, r2]
 80051b6:	3201      	adds	r2, #1
 80051b8:	54a3      	strb	r3, [r4, r2]
 80051ba:	3201      	adds	r2, #1
 80051bc:	54a3      	strb	r3, [r4, r2]
 80051be:	3201      	adds	r2, #1
 80051c0:	54a3      	strb	r3, [r4, r2]
 80051c2:	3201      	adds	r2, #1
 80051c4:	54a3      	strb	r3, [r4, r2]
 80051c6:	3201      	adds	r2, #1
 80051c8:	54a3      	strb	r3, [r4, r2]
 80051ca:	3201      	adds	r2, #1
 80051cc:	54a3      	strb	r3, [r4, r2]
 80051ce:	3a08      	subs	r2, #8
 80051d0:	54a3      	strb	r3, [r4, r2]
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	2670      	movs	r6, #112	@ 0x70
 80051d6:	43b2      	bics	r2, r6
 80051d8:	68a6      	ldr	r6, [r4, #8]
 80051da:	4332      	orrs	r2, r6
 80051dc:	4e0e      	ldr	r6, [pc, #56]	@ (8005218 <HAL_TIM_PWM_Init+0x100>)
 80051de:	4032      	ands	r2, r6
 80051e0:	6926      	ldr	r6, [r4, #16]
 80051e2:	4332      	orrs	r2, r6
 80051e4:	e7bb      	b.n	800515e <HAL_TIM_PWM_Init+0x46>
 80051e6:	4e0c      	ldr	r6, [pc, #48]	@ (8005218 <HAL_TIM_PWM_Init+0x100>)
 80051e8:	4032      	ands	r2, r6
 80051ea:	6926      	ldr	r6, [r4, #16]
 80051ec:	4332      	orrs	r2, r6
 80051ee:	2680      	movs	r6, #128	@ 0x80
 80051f0:	43b2      	bics	r2, r6
 80051f2:	4315      	orrs	r5, r2
 80051f4:	601d      	str	r5, [r3, #0]
 80051f6:	62d8      	str	r0, [r3, #44]	@ 0x2c
 80051f8:	6299      	str	r1, [r3, #40]	@ 0x28
 80051fa:	e7ca      	b.n	8005192 <HAL_TIM_PWM_Init+0x7a>
 80051fc:	2001      	movs	r0, #1
 80051fe:	e7e8      	b.n	80051d2 <HAL_TIM_PWM_Init+0xba>
 8005200:	40012c00 	.word	0x40012c00
 8005204:	40000400 	.word	0x40000400
 8005208:	40002000 	.word	0x40002000
 800520c:	40014000 	.word	0x40014000
 8005210:	40014400 	.word	0x40014400
 8005214:	40014800 	.word	0x40014800
 8005218:	fffffcff 	.word	0xfffffcff

0800521c <HAL_TIM_PWM_Start>:
 800521c:	2900      	cmp	r1, #0
 800521e:	d120      	bne.n	8005262 <HAL_TIM_PWM_Start+0x46>
 8005220:	233e      	movs	r3, #62	@ 0x3e
 8005222:	5cc2      	ldrb	r2, [r0, r3]
 8005224:	2a01      	cmp	r2, #1
 8005226:	d124      	bne.n	8005272 <HAL_TIM_PWM_Start+0x56>
 8005228:	2202      	movs	r2, #2
 800522a:	54c2      	strb	r2, [r0, r3]
 800522c:	221f      	movs	r2, #31
 800522e:	4011      	ands	r1, r2
 8005230:	3a1e      	subs	r2, #30
 8005232:	408a      	lsls	r2, r1
 8005234:	6803      	ldr	r3, [r0, #0]
 8005236:	6a19      	ldr	r1, [r3, #32]
 8005238:	4391      	bics	r1, r2
 800523a:	6219      	str	r1, [r3, #32]
 800523c:	6a19      	ldr	r1, [r3, #32]
 800523e:	430a      	orrs	r2, r1
 8005240:	621a      	str	r2, [r3, #32]
 8005242:	4a1d      	ldr	r2, [pc, #116]	@ (80052b8 <HAL_TIM_PWM_Start+0x9c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d016      	beq.n	8005276 <HAL_TIM_PWM_Start+0x5a>
 8005248:	4a1c      	ldr	r2, [pc, #112]	@ (80052bc <HAL_TIM_PWM_Start+0xa0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d013      	beq.n	8005276 <HAL_TIM_PWM_Start+0x5a>
 800524e:	4a1c      	ldr	r2, [pc, #112]	@ (80052c0 <HAL_TIM_PWM_Start+0xa4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d025      	beq.n	80052a0 <HAL_TIM_PWM_Start+0x84>
 8005254:	4a1b      	ldr	r2, [pc, #108]	@ (80052c4 <HAL_TIM_PWM_Start+0xa8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d022      	beq.n	80052a0 <HAL_TIM_PWM_Start+0x84>
 800525a:	4a1b      	ldr	r2, [pc, #108]	@ (80052c8 <HAL_TIM_PWM_Start+0xac>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d114      	bne.n	800528a <HAL_TIM_PWM_Start+0x6e>
 8005260:	e00e      	b.n	8005280 <HAL_TIM_PWM_Start+0x64>
 8005262:	2904      	cmp	r1, #4
 8005264:	d017      	beq.n	8005296 <HAL_TIM_PWM_Start+0x7a>
 8005266:	2908      	cmp	r1, #8
 8005268:	d020      	beq.n	80052ac <HAL_TIM_PWM_Start+0x90>
 800526a:	2341      	movs	r3, #65	@ 0x41
 800526c:	5cc2      	ldrb	r2, [r0, r3]
 800526e:	2a01      	cmp	r2, #1
 8005270:	d0da      	beq.n	8005228 <HAL_TIM_PWM_Start+0xc>
 8005272:	2001      	movs	r0, #1
 8005274:	e00e      	b.n	8005294 <HAL_TIM_PWM_Start+0x78>
 8005276:	2280      	movs	r2, #128	@ 0x80
 8005278:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800527a:	0212      	lsls	r2, r2, #8
 800527c:	430a      	orrs	r2, r1
 800527e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005280:	2207      	movs	r2, #7
 8005282:	6899      	ldr	r1, [r3, #8]
 8005284:	400a      	ands	r2, r1
 8005286:	2a06      	cmp	r2, #6
 8005288:	d003      	beq.n	8005292 <HAL_TIM_PWM_Start+0x76>
 800528a:	2101      	movs	r1, #1
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	2000      	movs	r0, #0
 8005294:	4770      	bx	lr
 8005296:	233f      	movs	r3, #63	@ 0x3f
 8005298:	5cc2      	ldrb	r2, [r0, r3]
 800529a:	2a01      	cmp	r2, #1
 800529c:	d0c4      	beq.n	8005228 <HAL_TIM_PWM_Start+0xc>
 800529e:	e7e8      	b.n	8005272 <HAL_TIM_PWM_Start+0x56>
 80052a0:	2280      	movs	r2, #128	@ 0x80
 80052a2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80052a4:	0212      	lsls	r2, r2, #8
 80052a6:	430a      	orrs	r2, r1
 80052a8:	645a      	str	r2, [r3, #68]	@ 0x44
 80052aa:	e7ee      	b.n	800528a <HAL_TIM_PWM_Start+0x6e>
 80052ac:	2340      	movs	r3, #64	@ 0x40
 80052ae:	5cc2      	ldrb	r2, [r0, r3]
 80052b0:	2a01      	cmp	r2, #1
 80052b2:	d0b9      	beq.n	8005228 <HAL_TIM_PWM_Start+0xc>
 80052b4:	e7dd      	b.n	8005272 <HAL_TIM_PWM_Start+0x56>
 80052b6:	46c0      	nop			@ (mov r8, r8)
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800
 80052c8:	40000400 	.word	0x40000400

080052cc <HAL_TIM_PWM_ConfigChannel>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	233c      	movs	r3, #60	@ 0x3c
 80052d0:	000d      	movs	r5, r1
 80052d2:	5cc1      	ldrb	r1, [r0, r3]
 80052d4:	0004      	movs	r4, r0
 80052d6:	2901      	cmp	r1, #1
 80052d8:	d100      	bne.n	80052dc <HAL_TIM_PWM_ConfigChannel+0x10>
 80052da:	e0de      	b.n	800549a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 80052dc:	2101      	movs	r1, #1
 80052de:	54c1      	strb	r1, [r0, r3]
 80052e0:	2a08      	cmp	r2, #8
 80052e2:	d100      	bne.n	80052e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80052e4:	e09a      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x150>
 80052e6:	d823      	bhi.n	8005330 <HAL_TIM_PWM_ConfigChannel+0x64>
 80052e8:	2a00      	cmp	r2, #0
 80052ea:	d100      	bne.n	80052ee <HAL_TIM_PWM_ConfigChannel+0x22>
 80052ec:	e083      	b.n	80053f6 <HAL_TIM_PWM_ConfigChannel+0x12a>
 80052ee:	2a04      	cmp	r2, #4
 80052f0:	d158      	bne.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 80052f2:	2110      	movs	r1, #16
 80052f4:	6803      	ldr	r3, [r0, #0]
 80052f6:	4e6a      	ldr	r6, [pc, #424]	@ (80054a0 <HAL_TIM_PWM_ConfigChannel+0x1d4>)
 80052f8:	6a18      	ldr	r0, [r3, #32]
 80052fa:	6a1a      	ldr	r2, [r3, #32]
 80052fc:	438a      	bics	r2, r1
 80052fe:	621a      	str	r2, [r3, #32]
 8005300:	6859      	ldr	r1, [r3, #4]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	4032      	ands	r2, r6
 8005306:	682e      	ldr	r6, [r5, #0]
 8005308:	0236      	lsls	r6, r6, #8
 800530a:	4316      	orrs	r6, r2
 800530c:	2220      	movs	r2, #32
 800530e:	4390      	bics	r0, r2
 8005310:	68aa      	ldr	r2, [r5, #8]
 8005312:	0112      	lsls	r2, r2, #4
 8005314:	4302      	orrs	r2, r0
 8005316:	4863      	ldr	r0, [pc, #396]	@ (80054a4 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 8005318:	4283      	cmp	r3, r0
 800531a:	d048      	beq.n	80053ae <HAL_TIM_PWM_ConfigChannel+0xe2>
 800531c:	4862      	ldr	r0, [pc, #392]	@ (80054a8 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 800531e:	4283      	cmp	r3, r0
 8005320:	d04d      	beq.n	80053be <HAL_TIM_PWM_ConfigChannel+0xf2>
 8005322:	4862      	ldr	r0, [pc, #392]	@ (80054ac <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8005324:	4283      	cmp	r3, r0
 8005326:	d04a      	beq.n	80053be <HAL_TIM_PWM_ConfigChannel+0xf2>
 8005328:	4861      	ldr	r0, [pc, #388]	@ (80054b0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800532a:	4283      	cmp	r3, r0
 800532c:	d14e      	bne.n	80053cc <HAL_TIM_PWM_ConfigChannel+0x100>
 800532e:	e046      	b.n	80053be <HAL_TIM_PWM_ConfigChannel+0xf2>
 8005330:	2a0c      	cmp	r2, #12
 8005332:	d137      	bne.n	80053a4 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8005334:	6803      	ldr	r3, [r0, #0]
 8005336:	485f      	ldr	r0, [pc, #380]	@ (80054b4 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8005338:	6a19      	ldr	r1, [r3, #32]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	4002      	ands	r2, r0
 800533e:	621a      	str	r2, [r3, #32]
 8005340:	4857      	ldr	r0, [pc, #348]	@ (80054a0 <HAL_TIM_PWM_ConfigChannel+0x1d4>)
 8005342:	685e      	ldr	r6, [r3, #4]
 8005344:	69da      	ldr	r2, [r3, #28]
 8005346:	4002      	ands	r2, r0
 8005348:	6828      	ldr	r0, [r5, #0]
 800534a:	0200      	lsls	r0, r0, #8
 800534c:	4310      	orrs	r0, r2
 800534e:	4a5a      	ldr	r2, [pc, #360]	@ (80054b8 <HAL_TIM_PWM_ConfigChannel+0x1ec>)
 8005350:	4011      	ands	r1, r2
 8005352:	68aa      	ldr	r2, [r5, #8]
 8005354:	0312      	lsls	r2, r2, #12
 8005356:	430a      	orrs	r2, r1
 8005358:	4952      	ldr	r1, [pc, #328]	@ (80054a4 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 800535a:	428b      	cmp	r3, r1
 800535c:	d008      	beq.n	8005370 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800535e:	4952      	ldr	r1, [pc, #328]	@ (80054a8 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 8005360:	428b      	cmp	r3, r1
 8005362:	d005      	beq.n	8005370 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8005364:	4951      	ldr	r1, [pc, #324]	@ (80054ac <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8005366:	428b      	cmp	r3, r1
 8005368:	d002      	beq.n	8005370 <HAL_TIM_PWM_ConfigChannel+0xa4>
 800536a:	4951      	ldr	r1, [pc, #324]	@ (80054b0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800536c:	428b      	cmp	r3, r1
 800536e:	d104      	bne.n	800537a <HAL_TIM_PWM_ConfigChannel+0xae>
 8005370:	4952      	ldr	r1, [pc, #328]	@ (80054bc <HAL_TIM_PWM_ConfigChannel+0x1f0>)
 8005372:	4031      	ands	r1, r6
 8005374:	696e      	ldr	r6, [r5, #20]
 8005376:	01b6      	lsls	r6, r6, #6
 8005378:	430e      	orrs	r6, r1
 800537a:	6869      	ldr	r1, [r5, #4]
 800537c:	605e      	str	r6, [r3, #4]
 800537e:	61d8      	str	r0, [r3, #28]
 8005380:	6419      	str	r1, [r3, #64]	@ 0x40
 8005382:	621a      	str	r2, [r3, #32]
 8005384:	2280      	movs	r2, #128	@ 0x80
 8005386:	69d9      	ldr	r1, [r3, #28]
 8005388:	0112      	lsls	r2, r2, #4
 800538a:	430a      	orrs	r2, r1
 800538c:	61da      	str	r2, [r3, #28]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	494b      	ldr	r1, [pc, #300]	@ (80054c0 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8005392:	2000      	movs	r0, #0
 8005394:	400a      	ands	r2, r1
 8005396:	61da      	str	r2, [r3, #28]
 8005398:	692a      	ldr	r2, [r5, #16]
 800539a:	69d9      	ldr	r1, [r3, #28]
 800539c:	0212      	lsls	r2, r2, #8
 800539e:	430a      	orrs	r2, r1
 80053a0:	61da      	str	r2, [r3, #28]
 80053a2:	e000      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0xda>
 80053a4:	2001      	movs	r0, #1
 80053a6:	233c      	movs	r3, #60	@ 0x3c
 80053a8:	2200      	movs	r2, #0
 80053aa:	54e2      	strb	r2, [r4, r3]
 80053ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ae:	2080      	movs	r0, #128	@ 0x80
 80053b0:	4382      	bics	r2, r0
 80053b2:	0017      	movs	r7, r2
 80053b4:	68ea      	ldr	r2, [r5, #12]
 80053b6:	3840      	subs	r0, #64	@ 0x40
 80053b8:	0112      	lsls	r2, r2, #4
 80053ba:	433a      	orrs	r2, r7
 80053bc:	4382      	bics	r2, r0
 80053be:	4841      	ldr	r0, [pc, #260]	@ (80054c4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80053c0:	696f      	ldr	r7, [r5, #20]
 80053c2:	4008      	ands	r0, r1
 80053c4:	69a9      	ldr	r1, [r5, #24]
 80053c6:	4339      	orrs	r1, r7
 80053c8:	0089      	lsls	r1, r1, #2
 80053ca:	4301      	orrs	r1, r0
 80053cc:	6059      	str	r1, [r3, #4]
 80053ce:	6869      	ldr	r1, [r5, #4]
 80053d0:	619e      	str	r6, [r3, #24]
 80053d2:	6399      	str	r1, [r3, #56]	@ 0x38
 80053d4:	621a      	str	r2, [r3, #32]
 80053d6:	2280      	movs	r2, #128	@ 0x80
 80053d8:	6999      	ldr	r1, [r3, #24]
 80053da:	0112      	lsls	r2, r2, #4
 80053dc:	430a      	orrs	r2, r1
 80053de:	619a      	str	r2, [r3, #24]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	4937      	ldr	r1, [pc, #220]	@ (80054c0 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80053e4:	2000      	movs	r0, #0
 80053e6:	400a      	ands	r2, r1
 80053e8:	619a      	str	r2, [r3, #24]
 80053ea:	692a      	ldr	r2, [r5, #16]
 80053ec:	6999      	ldr	r1, [r3, #24]
 80053ee:	0212      	lsls	r2, r2, #8
 80053f0:	430a      	orrs	r2, r1
 80053f2:	619a      	str	r2, [r3, #24]
 80053f4:	e7d7      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0xda>
 80053f6:	6806      	ldr	r6, [r0, #0]
 80053f8:	0029      	movs	r1, r5
 80053fa:	0030      	movs	r0, r6
 80053fc:	f7ff fda6 	bl	8004f4c <TIM_OC1_SetConfig>
 8005400:	2208      	movs	r2, #8
 8005402:	69b3      	ldr	r3, [r6, #24]
 8005404:	2000      	movs	r0, #0
 8005406:	4313      	orrs	r3, r2
 8005408:	61b3      	str	r3, [r6, #24]
 800540a:	69b3      	ldr	r3, [r6, #24]
 800540c:	3a04      	subs	r2, #4
 800540e:	4393      	bics	r3, r2
 8005410:	61b3      	str	r3, [r6, #24]
 8005412:	69b3      	ldr	r3, [r6, #24]
 8005414:	692a      	ldr	r2, [r5, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	61b3      	str	r3, [r6, #24]
 800541a:	e7c4      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0xda>
 800541c:	2673      	movs	r6, #115	@ 0x73
 800541e:	6803      	ldr	r3, [r0, #0]
 8005420:	4929      	ldr	r1, [pc, #164]	@ (80054c8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005422:	6a18      	ldr	r0, [r3, #32]
 8005424:	6a1a      	ldr	r2, [r3, #32]
 8005426:	400a      	ands	r2, r1
 8005428:	621a      	str	r2, [r3, #32]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	69da      	ldr	r2, [r3, #28]
 800542e:	43b2      	bics	r2, r6
 8005430:	682e      	ldr	r6, [r5, #0]
 8005432:	4316      	orrs	r6, r2
 8005434:	4a25      	ldr	r2, [pc, #148]	@ (80054cc <HAL_TIM_PWM_ConfigChannel+0x200>)
 8005436:	4010      	ands	r0, r2
 8005438:	68aa      	ldr	r2, [r5, #8]
 800543a:	0212      	lsls	r2, r2, #8
 800543c:	4302      	orrs	r2, r0
 800543e:	4819      	ldr	r0, [pc, #100]	@ (80054a4 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 8005440:	4283      	cmp	r3, r0
 8005442:	d01b      	beq.n	800547c <HAL_TIM_PWM_ConfigChannel+0x1b0>
 8005444:	4818      	ldr	r0, [pc, #96]	@ (80054a8 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 8005446:	4283      	cmp	r3, r0
 8005448:	d01f      	beq.n	800548a <HAL_TIM_PWM_ConfigChannel+0x1be>
 800544a:	4818      	ldr	r0, [pc, #96]	@ (80054ac <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 800544c:	4283      	cmp	r3, r0
 800544e:	d01c      	beq.n	800548a <HAL_TIM_PWM_ConfigChannel+0x1be>
 8005450:	4817      	ldr	r0, [pc, #92]	@ (80054b0 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8005452:	4283      	cmp	r3, r0
 8005454:	d019      	beq.n	800548a <HAL_TIM_PWM_ConfigChannel+0x1be>
 8005456:	6059      	str	r1, [r3, #4]
 8005458:	6869      	ldr	r1, [r5, #4]
 800545a:	61de      	str	r6, [r3, #28]
 800545c:	63d9      	str	r1, [r3, #60]	@ 0x3c
 800545e:	2108      	movs	r1, #8
 8005460:	621a      	str	r2, [r3, #32]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	2000      	movs	r0, #0
 8005466:	430a      	orrs	r2, r1
 8005468:	61da      	str	r2, [r3, #28]
 800546a:	69da      	ldr	r2, [r3, #28]
 800546c:	3904      	subs	r1, #4
 800546e:	438a      	bics	r2, r1
 8005470:	61da      	str	r2, [r3, #28]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	6929      	ldr	r1, [r5, #16]
 8005476:	430a      	orrs	r2, r1
 8005478:	61da      	str	r2, [r3, #28]
 800547a:	e794      	b.n	80053a6 <HAL_TIM_PWM_ConfigChannel+0xda>
 800547c:	4814      	ldr	r0, [pc, #80]	@ (80054d0 <HAL_TIM_PWM_ConfigChannel+0x204>)
 800547e:	4010      	ands	r0, r2
 8005480:	68ea      	ldr	r2, [r5, #12]
 8005482:	0212      	lsls	r2, r2, #8
 8005484:	4302      	orrs	r2, r0
 8005486:	480e      	ldr	r0, [pc, #56]	@ (80054c0 <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8005488:	4002      	ands	r2, r0
 800548a:	4812      	ldr	r0, [pc, #72]	@ (80054d4 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800548c:	696f      	ldr	r7, [r5, #20]
 800548e:	4008      	ands	r0, r1
 8005490:	69a9      	ldr	r1, [r5, #24]
 8005492:	4339      	orrs	r1, r7
 8005494:	0109      	lsls	r1, r1, #4
 8005496:	4301      	orrs	r1, r0
 8005498:	e7dd      	b.n	8005456 <HAL_TIM_PWM_ConfigChannel+0x18a>
 800549a:	2002      	movs	r0, #2
 800549c:	e786      	b.n	80053ac <HAL_TIM_PWM_ConfigChannel+0xe0>
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	ffff8cff 	.word	0xffff8cff
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40014000 	.word	0x40014000
 80054ac:	40014400 	.word	0x40014400
 80054b0:	40014800 	.word	0x40014800
 80054b4:	ffffefff 	.word	0xffffefff
 80054b8:	ffffdfff 	.word	0xffffdfff
 80054bc:	ffffbfff 	.word	0xffffbfff
 80054c0:	fffffbff 	.word	0xfffffbff
 80054c4:	fffff3ff 	.word	0xfffff3ff
 80054c8:	fffffeff 	.word	0xfffffeff
 80054cc:	fffffdff 	.word	0xfffffdff
 80054d0:	fffff7ff 	.word	0xfffff7ff
 80054d4:	ffffcfff 	.word	0xffffcfff

080054d8 <HAL_TIM_ConfigClockSource>:
 80054d8:	233c      	movs	r3, #60	@ 0x3c
 80054da:	b570      	push	{r4, r5, r6, lr}
 80054dc:	0002      	movs	r2, r0
 80054de:	5cc0      	ldrb	r0, [r0, r3]
 80054e0:	2801      	cmp	r0, #1
 80054e2:	d100      	bne.n	80054e6 <HAL_TIM_ConfigClockSource+0xe>
 80054e4:	e073      	b.n	80055ce <HAL_TIM_ConfigClockSource+0xf6>
 80054e6:	2401      	movs	r4, #1
 80054e8:	2002      	movs	r0, #2
 80054ea:	54d4      	strb	r4, [r2, r3]
 80054ec:	3301      	adds	r3, #1
 80054ee:	54d0      	strb	r0, [r2, r3]
 80054f0:	6810      	ldr	r0, [r2, #0]
 80054f2:	4d51      	ldr	r5, [pc, #324]	@ (8005638 <HAL_TIM_ConfigClockSource+0x160>)
 80054f4:	6883      	ldr	r3, [r0, #8]
 80054f6:	402b      	ands	r3, r5
 80054f8:	6083      	str	r3, [r0, #8]
 80054fa:	680b      	ldr	r3, [r1, #0]
 80054fc:	2b60      	cmp	r3, #96	@ 0x60
 80054fe:	d100      	bne.n	8005502 <HAL_TIM_ConfigClockSource+0x2a>
 8005500:	e067      	b.n	80055d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005502:	d81d      	bhi.n	8005540 <HAL_TIM_ConfigClockSource+0x68>
 8005504:	2b40      	cmp	r3, #64	@ 0x40
 8005506:	d100      	bne.n	800550a <HAL_TIM_ConfigClockSource+0x32>
 8005508:	e07d      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x12e>
 800550a:	d93f      	bls.n	800558c <HAL_TIM_ConfigClockSource+0xb4>
 800550c:	2b50      	cmp	r3, #80	@ 0x50
 800550e:	d135      	bne.n	800557c <HAL_TIM_ConfigClockSource+0xa4>
 8005510:	684d      	ldr	r5, [r1, #4]
 8005512:	68cb      	ldr	r3, [r1, #12]
 8005514:	6a01      	ldr	r1, [r0, #32]
 8005516:	6a06      	ldr	r6, [r0, #32]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	43a6      	bics	r6, r4
 800551c:	6206      	str	r6, [r0, #32]
 800551e:	26f0      	movs	r6, #240	@ 0xf0
 8005520:	6984      	ldr	r4, [r0, #24]
 8005522:	43b4      	bics	r4, r6
 8005524:	4323      	orrs	r3, r4
 8005526:	240a      	movs	r4, #10
 8005528:	43a1      	bics	r1, r4
 800552a:	4329      	orrs	r1, r5
 800552c:	6183      	str	r3, [r0, #24]
 800552e:	6201      	str	r1, [r0, #32]
 8005530:	2170      	movs	r1, #112	@ 0x70
 8005532:	6883      	ldr	r3, [r0, #8]
 8005534:	438b      	bics	r3, r1
 8005536:	3919      	subs	r1, #25
 8005538:	430b      	orrs	r3, r1
 800553a:	6083      	str	r3, [r0, #8]
 800553c:	2000      	movs	r0, #0
 800553e:	e01e      	b.n	800557e <HAL_TIM_ConfigClockSource+0xa6>
 8005540:	2480      	movs	r4, #128	@ 0x80
 8005542:	0164      	lsls	r4, r4, #5
 8005544:	42a3      	cmp	r3, r4
 8005546:	d0f9      	beq.n	800553c <HAL_TIM_ConfigClockSource+0x64>
 8005548:	2480      	movs	r4, #128	@ 0x80
 800554a:	01a4      	lsls	r4, r4, #6
 800554c:	42a3      	cmp	r3, r4
 800554e:	d12b      	bne.n	80055a8 <HAL_TIM_ConfigClockSource+0xd0>
 8005550:	6884      	ldr	r4, [r0, #8]
 8005552:	4b3a      	ldr	r3, [pc, #232]	@ (800563c <HAL_TIM_ConfigClockSource+0x164>)
 8005554:	684d      	ldr	r5, [r1, #4]
 8005556:	401c      	ands	r4, r3
 8005558:	688b      	ldr	r3, [r1, #8]
 800555a:	68c9      	ldr	r1, [r1, #12]
 800555c:	432b      	orrs	r3, r5
 800555e:	0209      	lsls	r1, r1, #8
 8005560:	430b      	orrs	r3, r1
 8005562:	4323      	orrs	r3, r4
 8005564:	6083      	str	r3, [r0, #8]
 8005566:	2380      	movs	r3, #128	@ 0x80
 8005568:	6881      	ldr	r1, [r0, #8]
 800556a:	01db      	lsls	r3, r3, #7
 800556c:	430b      	orrs	r3, r1
 800556e:	6083      	str	r3, [r0, #8]
 8005570:	2000      	movs	r0, #0
 8005572:	e004      	b.n	800557e <HAL_TIM_ConfigClockSource+0xa6>
 8005574:	2110      	movs	r1, #16
 8005576:	001c      	movs	r4, r3
 8005578:	438c      	bics	r4, r1
 800557a:	d00c      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0xbe>
 800557c:	2001      	movs	r0, #1
 800557e:	233d      	movs	r3, #61	@ 0x3d
 8005580:	2101      	movs	r1, #1
 8005582:	54d1      	strb	r1, [r2, r3]
 8005584:	2100      	movs	r1, #0
 8005586:	3b01      	subs	r3, #1
 8005588:	54d1      	strb	r1, [r2, r3]
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	2b20      	cmp	r3, #32
 800558e:	d002      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0xbe>
 8005590:	d9f0      	bls.n	8005574 <HAL_TIM_ConfigClockSource+0x9c>
 8005592:	2b30      	cmp	r3, #48	@ 0x30
 8005594:	d1f2      	bne.n	800557c <HAL_TIM_ConfigClockSource+0xa4>
 8005596:	2470      	movs	r4, #112	@ 0x70
 8005598:	6881      	ldr	r1, [r0, #8]
 800559a:	43a1      	bics	r1, r4
 800559c:	430b      	orrs	r3, r1
 800559e:	2107      	movs	r1, #7
 80055a0:	430b      	orrs	r3, r1
 80055a2:	6083      	str	r3, [r0, #8]
 80055a4:	2000      	movs	r0, #0
 80055a6:	e7ea      	b.n	800557e <HAL_TIM_ConfigClockSource+0xa6>
 80055a8:	2b70      	cmp	r3, #112	@ 0x70
 80055aa:	d1e7      	bne.n	800557c <HAL_TIM_ConfigClockSource+0xa4>
 80055ac:	6884      	ldr	r4, [r0, #8]
 80055ae:	4b23      	ldr	r3, [pc, #140]	@ (800563c <HAL_TIM_ConfigClockSource+0x164>)
 80055b0:	684d      	ldr	r5, [r1, #4]
 80055b2:	401c      	ands	r4, r3
 80055b4:	688b      	ldr	r3, [r1, #8]
 80055b6:	68c9      	ldr	r1, [r1, #12]
 80055b8:	432b      	orrs	r3, r5
 80055ba:	0209      	lsls	r1, r1, #8
 80055bc:	430b      	orrs	r3, r1
 80055be:	2177      	movs	r1, #119	@ 0x77
 80055c0:	4323      	orrs	r3, r4
 80055c2:	6083      	str	r3, [r0, #8]
 80055c4:	6883      	ldr	r3, [r0, #8]
 80055c6:	430b      	orrs	r3, r1
 80055c8:	6083      	str	r3, [r0, #8]
 80055ca:	2000      	movs	r0, #0
 80055cc:	e7d7      	b.n	800557e <HAL_TIM_ConfigClockSource+0xa6>
 80055ce:	2002      	movs	r0, #2
 80055d0:	e7db      	b.n	800558a <HAL_TIM_ConfigClockSource+0xb2>
 80055d2:	2610      	movs	r6, #16
 80055d4:	6a04      	ldr	r4, [r0, #32]
 80055d6:	6a05      	ldr	r5, [r0, #32]
 80055d8:	684b      	ldr	r3, [r1, #4]
 80055da:	43b5      	bics	r5, r6
 80055dc:	68c9      	ldr	r1, [r1, #12]
 80055de:	6205      	str	r5, [r0, #32]
 80055e0:	6985      	ldr	r5, [r0, #24]
 80055e2:	4e17      	ldr	r6, [pc, #92]	@ (8005640 <HAL_TIM_ConfigClockSource+0x168>)
 80055e4:	0309      	lsls	r1, r1, #12
 80055e6:	4035      	ands	r5, r6
 80055e8:	4329      	orrs	r1, r5
 80055ea:	25a0      	movs	r5, #160	@ 0xa0
 80055ec:	6181      	str	r1, [r0, #24]
 80055ee:	2170      	movs	r1, #112	@ 0x70
 80055f0:	43ac      	bics	r4, r5
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	4323      	orrs	r3, r4
 80055f6:	6203      	str	r3, [r0, #32]
 80055f8:	6883      	ldr	r3, [r0, #8]
 80055fa:	438b      	bics	r3, r1
 80055fc:	3909      	subs	r1, #9
 80055fe:	430b      	orrs	r3, r1
 8005600:	6083      	str	r3, [r0, #8]
 8005602:	2000      	movs	r0, #0
 8005604:	e7bb      	b.n	800557e <HAL_TIM_ConfigClockSource+0xa6>
 8005606:	684d      	ldr	r5, [r1, #4]
 8005608:	68cb      	ldr	r3, [r1, #12]
 800560a:	6a01      	ldr	r1, [r0, #32]
 800560c:	6a06      	ldr	r6, [r0, #32]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	43a6      	bics	r6, r4
 8005612:	6206      	str	r6, [r0, #32]
 8005614:	26f0      	movs	r6, #240	@ 0xf0
 8005616:	6984      	ldr	r4, [r0, #24]
 8005618:	43b4      	bics	r4, r6
 800561a:	4323      	orrs	r3, r4
 800561c:	240a      	movs	r4, #10
 800561e:	43a1      	bics	r1, r4
 8005620:	4329      	orrs	r1, r5
 8005622:	6183      	str	r3, [r0, #24]
 8005624:	6201      	str	r1, [r0, #32]
 8005626:	2170      	movs	r1, #112	@ 0x70
 8005628:	6883      	ldr	r3, [r0, #8]
 800562a:	438b      	bics	r3, r1
 800562c:	3929      	subs	r1, #41	@ 0x29
 800562e:	430b      	orrs	r3, r1
 8005630:	6083      	str	r3, [r0, #8]
 8005632:	2000      	movs	r0, #0
 8005634:	e7a3      	b.n	800557e <HAL_TIM_ConfigClockSource+0xa6>
 8005636:	46c0      	nop			@ (mov r8, r8)
 8005638:	ffff0088 	.word	0xffff0088
 800563c:	ffff00ff 	.word	0xffff00ff
 8005640:	ffff0fff 	.word	0xffff0fff

08005644 <HAL_TIMEx_PWMN_Start>:
 8005644:	2900      	cmp	r1, #0
 8005646:	d124      	bne.n	8005692 <HAL_TIMEx_PWMN_Start+0x4e>
 8005648:	2342      	movs	r3, #66	@ 0x42
 800564a:	5cc2      	ldrb	r2, [r0, r3]
 800564c:	2a01      	cmp	r2, #1
 800564e:	d128      	bne.n	80056a2 <HAL_TIMEx_PWMN_Start+0x5e>
 8005650:	2202      	movs	r2, #2
 8005652:	54c2      	strb	r2, [r0, r3]
 8005654:	220f      	movs	r2, #15
 8005656:	4011      	ands	r1, r2
 8005658:	3a0b      	subs	r2, #11
 800565a:	408a      	lsls	r2, r1
 800565c:	6803      	ldr	r3, [r0, #0]
 800565e:	6a19      	ldr	r1, [r3, #32]
 8005660:	4391      	bics	r1, r2
 8005662:	6219      	str	r1, [r3, #32]
 8005664:	6a19      	ldr	r1, [r3, #32]
 8005666:	430a      	orrs	r2, r1
 8005668:	621a      	str	r2, [r3, #32]
 800566a:	2280      	movs	r2, #128	@ 0x80
 800566c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800566e:	0212      	lsls	r2, r2, #8
 8005670:	430a      	orrs	r2, r1
 8005672:	645a      	str	r2, [r3, #68]	@ 0x44
 8005674:	4a14      	ldr	r2, [pc, #80]	@ (80056c8 <HAL_TIMEx_PWMN_Start+0x84>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d015      	beq.n	80056a6 <HAL_TIMEx_PWMN_Start+0x62>
 800567a:	4a14      	ldr	r2, [pc, #80]	@ (80056cc <HAL_TIMEx_PWMN_Start+0x88>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d012      	beq.n	80056a6 <HAL_TIMEx_PWMN_Start+0x62>
 8005680:	4a13      	ldr	r2, [pc, #76]	@ (80056d0 <HAL_TIMEx_PWMN_Start+0x8c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00f      	beq.n	80056a6 <HAL_TIMEx_PWMN_Start+0x62>
 8005686:	2101      	movs	r1, #1
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	2000      	movs	r0, #0
 8005690:	4770      	bx	lr
 8005692:	2904      	cmp	r1, #4
 8005694:	d00d      	beq.n	80056b2 <HAL_TIMEx_PWMN_Start+0x6e>
 8005696:	2908      	cmp	r1, #8
 8005698:	d010      	beq.n	80056bc <HAL_TIMEx_PWMN_Start+0x78>
 800569a:	2345      	movs	r3, #69	@ 0x45
 800569c:	5cc2      	ldrb	r2, [r0, r3]
 800569e:	2a01      	cmp	r2, #1
 80056a0:	d0d6      	beq.n	8005650 <HAL_TIMEx_PWMN_Start+0xc>
 80056a2:	2001      	movs	r0, #1
 80056a4:	e7f4      	b.n	8005690 <HAL_TIMEx_PWMN_Start+0x4c>
 80056a6:	2207      	movs	r2, #7
 80056a8:	6899      	ldr	r1, [r3, #8]
 80056aa:	400a      	ands	r2, r1
 80056ac:	2a06      	cmp	r2, #6
 80056ae:	d1ea      	bne.n	8005686 <HAL_TIMEx_PWMN_Start+0x42>
 80056b0:	e7ed      	b.n	800568e <HAL_TIMEx_PWMN_Start+0x4a>
 80056b2:	2343      	movs	r3, #67	@ 0x43
 80056b4:	5cc2      	ldrb	r2, [r0, r3]
 80056b6:	2a01      	cmp	r2, #1
 80056b8:	d0ca      	beq.n	8005650 <HAL_TIMEx_PWMN_Start+0xc>
 80056ba:	e7f2      	b.n	80056a2 <HAL_TIMEx_PWMN_Start+0x5e>
 80056bc:	2344      	movs	r3, #68	@ 0x44
 80056be:	5cc2      	ldrb	r2, [r0, r3]
 80056c0:	2a01      	cmp	r2, #1
 80056c2:	d0c5      	beq.n	8005650 <HAL_TIMEx_PWMN_Start+0xc>
 80056c4:	e7ed      	b.n	80056a2 <HAL_TIMEx_PWMN_Start+0x5e>
 80056c6:	46c0      	nop			@ (mov r8, r8)
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40014000 	.word	0x40014000

080056d4 <HAL_TIMEx_PWMN_Stop>:
 80056d4:	b530      	push	{r4, r5, lr}
 80056d6:	250f      	movs	r5, #15
 80056d8:	2404      	movs	r4, #4
 80056da:	400d      	ands	r5, r1
 80056dc:	40ac      	lsls	r4, r5
 80056de:	6803      	ldr	r3, [r0, #0]
 80056e0:	6a1a      	ldr	r2, [r3, #32]
 80056e2:	43a2      	bics	r2, r4
 80056e4:	621a      	str	r2, [r3, #32]
 80056e6:	6a1a      	ldr	r2, [r3, #32]
 80056e8:	621a      	str	r2, [r3, #32]
 80056ea:	6a1c      	ldr	r4, [r3, #32]
 80056ec:	4a17      	ldr	r2, [pc, #92]	@ (800574c <HAL_TIMEx_PWMN_Stop+0x78>)
 80056ee:	4214      	tst	r4, r2
 80056f0:	d103      	bne.n	80056fa <HAL_TIMEx_PWMN_Stop+0x26>
 80056f2:	6a1c      	ldr	r4, [r3, #32]
 80056f4:	4a16      	ldr	r2, [pc, #88]	@ (8005750 <HAL_TIMEx_PWMN_Stop+0x7c>)
 80056f6:	4214      	tst	r4, r2
 80056f8:	d01b      	beq.n	8005732 <HAL_TIMEx_PWMN_Stop+0x5e>
 80056fa:	6a1c      	ldr	r4, [r3, #32]
 80056fc:	4a13      	ldr	r2, [pc, #76]	@ (800574c <HAL_TIMEx_PWMN_Stop+0x78>)
 80056fe:	4214      	tst	r4, r2
 8005700:	d103      	bne.n	800570a <HAL_TIMEx_PWMN_Stop+0x36>
 8005702:	6a1c      	ldr	r4, [r3, #32]
 8005704:	4a12      	ldr	r2, [pc, #72]	@ (8005750 <HAL_TIMEx_PWMN_Stop+0x7c>)
 8005706:	4214      	tst	r4, r2
 8005708:	d00e      	beq.n	8005728 <HAL_TIMEx_PWMN_Stop+0x54>
 800570a:	2900      	cmp	r1, #0
 800570c:	d104      	bne.n	8005718 <HAL_TIMEx_PWMN_Stop+0x44>
 800570e:	2342      	movs	r3, #66	@ 0x42
 8005710:	2201      	movs	r2, #1
 8005712:	54c2      	strb	r2, [r0, r3]
 8005714:	2000      	movs	r0, #0
 8005716:	bd30      	pop	{r4, r5, pc}
 8005718:	2904      	cmp	r1, #4
 800571a:	d00f      	beq.n	800573c <HAL_TIMEx_PWMN_Stop+0x68>
 800571c:	2908      	cmp	r1, #8
 800571e:	d011      	beq.n	8005744 <HAL_TIMEx_PWMN_Stop+0x70>
 8005720:	2345      	movs	r3, #69	@ 0x45
 8005722:	2201      	movs	r2, #1
 8005724:	54c2      	strb	r2, [r0, r3]
 8005726:	e7f5      	b.n	8005714 <HAL_TIMEx_PWMN_Stop+0x40>
 8005728:	2401      	movs	r4, #1
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	43a2      	bics	r2, r4
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e7eb      	b.n	800570a <HAL_TIMEx_PWMN_Stop+0x36>
 8005732:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005734:	4c07      	ldr	r4, [pc, #28]	@ (8005754 <HAL_TIMEx_PWMN_Stop+0x80>)
 8005736:	4022      	ands	r2, r4
 8005738:	645a      	str	r2, [r3, #68]	@ 0x44
 800573a:	e7de      	b.n	80056fa <HAL_TIMEx_PWMN_Stop+0x26>
 800573c:	2343      	movs	r3, #67	@ 0x43
 800573e:	2201      	movs	r2, #1
 8005740:	54c2      	strb	r2, [r0, r3]
 8005742:	e7e7      	b.n	8005714 <HAL_TIMEx_PWMN_Stop+0x40>
 8005744:	2344      	movs	r3, #68	@ 0x44
 8005746:	2201      	movs	r2, #1
 8005748:	54c2      	strb	r2, [r0, r3]
 800574a:	e7e3      	b.n	8005714 <HAL_TIMEx_PWMN_Stop+0x40>
 800574c:	00001111 	.word	0x00001111
 8005750:	00000444 	.word	0x00000444
 8005754:	ffff7fff 	.word	0xffff7fff

08005758 <HAL_TIMEx_MasterConfigSynchronization>:
 8005758:	233c      	movs	r3, #60	@ 0x3c
 800575a:	b530      	push	{r4, r5, lr}
 800575c:	5cc3      	ldrb	r3, [r0, r3]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d020      	beq.n	80057a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005762:	233d      	movs	r3, #61	@ 0x3d
 8005764:	2202      	movs	r2, #2
 8005766:	2570      	movs	r5, #112	@ 0x70
 8005768:	54c2      	strb	r2, [r0, r3]
 800576a:	6803      	ldr	r3, [r0, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	689c      	ldr	r4, [r3, #8]
 8005770:	43aa      	bics	r2, r5
 8005772:	680d      	ldr	r5, [r1, #0]
 8005774:	432a      	orrs	r2, r5
 8005776:	605a      	str	r2, [r3, #4]
 8005778:	4a0b      	ldr	r2, [pc, #44]	@ (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d005      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800577e:	4a0b      	ldr	r2, [pc, #44]	@ (80057ac <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d002      	beq.n	800578a <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8005784:	4a0a      	ldr	r2, [pc, #40]	@ (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d104      	bne.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800578a:	2280      	movs	r2, #128	@ 0x80
 800578c:	4394      	bics	r4, r2
 800578e:	684a      	ldr	r2, [r1, #4]
 8005790:	4314      	orrs	r4, r2
 8005792:	609c      	str	r4, [r3, #8]
 8005794:	233d      	movs	r3, #61	@ 0x3d
 8005796:	2201      	movs	r2, #1
 8005798:	54c2      	strb	r2, [r0, r3]
 800579a:	2200      	movs	r2, #0
 800579c:	3b01      	subs	r3, #1
 800579e:	54c2      	strb	r2, [r0, r3]
 80057a0:	2000      	movs	r0, #0
 80057a2:	bd30      	pop	{r4, r5, pc}
 80057a4:	2002      	movs	r0, #2
 80057a6:	e7fc      	b.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40000400 	.word	0x40000400
 80057b0:	40014000 	.word	0x40014000

080057b4 <HAL_TIMEx_ConfigBreakDeadTime>:
 80057b4:	223c      	movs	r2, #60	@ 0x3c
 80057b6:	b510      	push	{r4, lr}
 80057b8:	5c83      	ldrb	r3, [r0, r2]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d01e      	beq.n	80057fc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80057be:	68cb      	ldr	r3, [r1, #12]
 80057c0:	4c0f      	ldr	r4, [pc, #60]	@ (8005800 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 80057c2:	4023      	ands	r3, r4
 80057c4:	688c      	ldr	r4, [r1, #8]
 80057c6:	4323      	orrs	r3, r4
 80057c8:	4c0e      	ldr	r4, [pc, #56]	@ (8005804 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 80057ca:	4023      	ands	r3, r4
 80057cc:	684c      	ldr	r4, [r1, #4]
 80057ce:	4323      	orrs	r3, r4
 80057d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005808 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 80057d2:	4023      	ands	r3, r4
 80057d4:	680c      	ldr	r4, [r1, #0]
 80057d6:	4323      	orrs	r3, r4
 80057d8:	4c0c      	ldr	r4, [pc, #48]	@ (800580c <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 80057da:	4023      	ands	r3, r4
 80057dc:	690c      	ldr	r4, [r1, #16]
 80057de:	4323      	orrs	r3, r4
 80057e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005810 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 80057e2:	4023      	ands	r3, r4
 80057e4:	694c      	ldr	r4, [r1, #20]
 80057e6:	69c9      	ldr	r1, [r1, #28]
 80057e8:	4323      	orrs	r3, r4
 80057ea:	4c0a      	ldr	r4, [pc, #40]	@ (8005814 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 80057ec:	4023      	ands	r3, r4
 80057ee:	430b      	orrs	r3, r1
 80057f0:	6801      	ldr	r1, [r0, #0]
 80057f2:	644b      	str	r3, [r1, #68]	@ 0x44
 80057f4:	2300      	movs	r3, #0
 80057f6:	5483      	strb	r3, [r0, r2]
 80057f8:	2000      	movs	r0, #0
 80057fa:	bd10      	pop	{r4, pc}
 80057fc:	2002      	movs	r0, #2
 80057fe:	e7fc      	b.n	80057fa <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 8005800:	fffffcff 	.word	0xfffffcff
 8005804:	fffffbff 	.word	0xfffffbff
 8005808:	fffff7ff 	.word	0xfffff7ff
 800580c:	ffffefff 	.word	0xffffefff
 8005810:	ffffdfff 	.word	0xffffdfff
 8005814:	ffffbfff 	.word	0xffffbfff

08005818 <USB_EnableGlobalInt>:
 8005818:	2344      	movs	r3, #68	@ 0x44
 800581a:	2200      	movs	r2, #0
 800581c:	52c2      	strh	r2, [r0, r3]
 800581e:	4a02      	ldr	r2, [pc, #8]	@ (8005828 <USB_EnableGlobalInt+0x10>)
 8005820:	3b04      	subs	r3, #4
 8005822:	52c2      	strh	r2, [r0, r3]
 8005824:	2000      	movs	r0, #0
 8005826:	4770      	bx	lr
 8005828:	ffffbf80 	.word	0xffffbf80

0800582c <USB_DisableGlobalInt>:
 800582c:	2240      	movs	r2, #64	@ 0x40
 800582e:	5a83      	ldrh	r3, [r0, r2]
 8005830:	4902      	ldr	r1, [pc, #8]	@ (800583c <USB_DisableGlobalInt+0x10>)
 8005832:	400b      	ands	r3, r1
 8005834:	5283      	strh	r3, [r0, r2]
 8005836:	2000      	movs	r0, #0
 8005838:	4770      	bx	lr
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	0000407f 	.word	0x0000407f

08005840 <USB_DevInit>:
 8005840:	2240      	movs	r2, #64	@ 0x40
 8005842:	2301      	movs	r3, #1
 8005844:	5283      	strh	r3, [r0, r2]
 8005846:	2300      	movs	r3, #0
 8005848:	5283      	strh	r3, [r0, r2]
 800584a:	3204      	adds	r2, #4
 800584c:	5283      	strh	r3, [r0, r2]
 800584e:	320c      	adds	r2, #12
 8005850:	5283      	strh	r3, [r0, r2]
 8005852:	2000      	movs	r0, #0
 8005854:	b082      	sub	sp, #8
 8005856:	b002      	add	sp, #8
 8005858:	4770      	bx	lr
 800585a:	46c0      	nop			@ (mov r8, r8)

0800585c <USB_ActivateEndpoint>:
 800585c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800585e:	46ce      	mov	lr, r9
 8005860:	4647      	mov	r7, r8
 8005862:	b580      	push	{r7, lr}
 8005864:	780d      	ldrb	r5, [r1, #0]
 8005866:	0004      	movs	r4, r0
 8005868:	00ab      	lsls	r3, r5, #2
 800586a:	18c3      	adds	r3, r0, r3
 800586c:	881a      	ldrh	r2, [r3, #0]
 800586e:	489d      	ldr	r0, [pc, #628]	@ (8005ae4 <USB_ActivateEndpoint+0x288>)
 8005870:	78ce      	ldrb	r6, [r1, #3]
 8005872:	4002      	ands	r2, r0
 8005874:	2e02      	cmp	r6, #2
 8005876:	d100      	bne.n	800587a <USB_ActivateEndpoint+0x1e>
 8005878:	e110      	b.n	8005a9c <USB_ActivateEndpoint+0x240>
 800587a:	d856      	bhi.n	800592a <USB_ActivateEndpoint+0xce>
 800587c:	2e00      	cmp	r6, #0
 800587e:	d100      	bne.n	8005882 <USB_ActivateEndpoint+0x26>
 8005880:	e0ed      	b.n	8005a5e <USB_ActivateEndpoint+0x202>
 8005882:	2080      	movs	r0, #128	@ 0x80
 8005884:	00c0      	lsls	r0, r0, #3
 8005886:	4302      	orrs	r2, r0
 8005888:	4897      	ldr	r0, [pc, #604]	@ (8005ae8 <USB_ActivateEndpoint+0x28c>)
 800588a:	4f98      	ldr	r7, [pc, #608]	@ (8005aec <USB_ActivateEndpoint+0x290>)
 800588c:	4302      	orrs	r2, r0
 800588e:	b292      	uxth	r2, r2
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	881a      	ldrh	r2, [r3, #0]
 8005894:	403a      	ands	r2, r7
 8005896:	432a      	orrs	r2, r5
 8005898:	4310      	orrs	r0, r2
 800589a:	b280      	uxth	r0, r0
 800589c:	8018      	strh	r0, [r3, #0]
 800589e:	7b0a      	ldrb	r2, [r1, #12]
 80058a0:	2000      	movs	r0, #0
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	d047      	beq.n	8005936 <USB_ActivateEndpoint+0xda>
 80058a6:	881a      	ldrh	r2, [r3, #0]
 80058a8:	4f91      	ldr	r7, [pc, #580]	@ (8005af0 <USB_ActivateEndpoint+0x294>)
 80058aa:	403a      	ands	r2, r7
 80058ac:	4f91      	ldr	r7, [pc, #580]	@ (8005af4 <USB_ActivateEndpoint+0x298>)
 80058ae:	433a      	orrs	r2, r7
 80058b0:	801a      	strh	r2, [r3, #0]
 80058b2:	2780      	movs	r7, #128	@ 0x80
 80058b4:	2250      	movs	r2, #80	@ 0x50
 80058b6:	00ff      	lsls	r7, r7, #3
 80058b8:	46b8      	mov	r8, r7
 80058ba:	4694      	mov	ip, r2
 80058bc:	890f      	ldrh	r7, [r1, #8]
 80058be:	5aa2      	ldrh	r2, [r4, r2]
 80058c0:	00ed      	lsls	r5, r5, #3
 80058c2:	1965      	adds	r5, r4, r5
 80058c4:	1952      	adds	r2, r2, r5
 80058c6:	087f      	lsrs	r7, r7, #1
 80058c8:	4442      	add	r2, r8
 80058ca:	007f      	lsls	r7, r7, #1
 80058cc:	8017      	strh	r7, [r2, #0]
 80058ce:	4662      	mov	r2, ip
 80058d0:	5aa2      	ldrh	r2, [r4, r2]
 80058d2:	4c89      	ldr	r4, [pc, #548]	@ (8005af8 <USB_ActivateEndpoint+0x29c>)
 80058d4:	1952      	adds	r2, r2, r5
 80058d6:	46a4      	mov	ip, r4
 80058d8:	894c      	ldrh	r4, [r1, #10]
 80058da:	4462      	add	r2, ip
 80058dc:	0864      	lsrs	r4, r4, #1
 80058de:	0064      	lsls	r4, r4, #1
 80058e0:	8014      	strh	r4, [r2, #0]
 80058e2:	784a      	ldrb	r2, [r1, #1]
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	d15f      	bne.n	80059a8 <USB_ActivateEndpoint+0x14c>
 80058e8:	881a      	ldrh	r2, [r3, #0]
 80058ea:	0452      	lsls	r2, r2, #17
 80058ec:	d505      	bpl.n	80058fa <USB_ActivateEndpoint+0x9e>
 80058ee:	881a      	ldrh	r2, [r3, #0]
 80058f0:	497e      	ldr	r1, [pc, #504]	@ (8005aec <USB_ActivateEndpoint+0x290>)
 80058f2:	400a      	ands	r2, r1
 80058f4:	4981      	ldr	r1, [pc, #516]	@ (8005afc <USB_ActivateEndpoint+0x2a0>)
 80058f6:	430a      	orrs	r2, r1
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	881a      	ldrh	r2, [r3, #0]
 80058fc:	0652      	lsls	r2, r2, #25
 80058fe:	d500      	bpl.n	8005902 <USB_ActivateEndpoint+0xa6>
 8005900:	e0b1      	b.n	8005a66 <USB_ActivateEndpoint+0x20a>
 8005902:	8819      	ldrh	r1, [r3, #0]
 8005904:	4a7e      	ldr	r2, [pc, #504]	@ (8005b00 <USB_ActivateEndpoint+0x2a4>)
 8005906:	4c7f      	ldr	r4, [pc, #508]	@ (8005b04 <USB_ActivateEndpoint+0x2a8>)
 8005908:	4011      	ands	r1, r2
 800590a:	22c0      	movs	r2, #192	@ 0xc0
 800590c:	0192      	lsls	r2, r2, #6
 800590e:	404a      	eors	r2, r1
 8005910:	4975      	ldr	r1, [pc, #468]	@ (8005ae8 <USB_ActivateEndpoint+0x28c>)
 8005912:	430a      	orrs	r2, r1
 8005914:	b292      	uxth	r2, r2
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	881a      	ldrh	r2, [r3, #0]
 800591a:	4022      	ands	r2, r4
 800591c:	4311      	orrs	r1, r2
 800591e:	b289      	uxth	r1, r1
 8005920:	8019      	strh	r1, [r3, #0]
 8005922:	bcc0      	pop	{r6, r7}
 8005924:	46b9      	mov	r9, r7
 8005926:	46b0      	mov	r8, r6
 8005928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800592a:	2e03      	cmp	r6, #3
 800592c:	d12c      	bne.n	8005988 <USB_ActivateEndpoint+0x12c>
 800592e:	20c0      	movs	r0, #192	@ 0xc0
 8005930:	00c0      	lsls	r0, r0, #3
 8005932:	4302      	orrs	r2, r0
 8005934:	e7a8      	b.n	8005888 <USB_ActivateEndpoint+0x2c>
 8005936:	2000      	movs	r0, #0
 8005938:	88ca      	ldrh	r2, [r1, #6]
 800593a:	00ef      	lsls	r7, r5, #3
 800593c:	0852      	lsrs	r2, r2, #1
 800593e:	0052      	lsls	r2, r2, #1
 8005940:	4691      	mov	r9, r2
 8005942:	784a      	ldrb	r2, [r1, #1]
 8005944:	19e7      	adds	r7, r4, r7
 8005946:	2a00      	cmp	r2, #0
 8005948:	d052      	beq.n	80059f0 <USB_ActivateEndpoint+0x194>
 800594a:	2280      	movs	r2, #128	@ 0x80
 800594c:	2150      	movs	r1, #80	@ 0x50
 800594e:	00d2      	lsls	r2, r2, #3
 8005950:	4694      	mov	ip, r2
 8005952:	464a      	mov	r2, r9
 8005954:	5a61      	ldrh	r1, [r4, r1]
 8005956:	19c9      	adds	r1, r1, r7
 8005958:	4461      	add	r1, ip
 800595a:	800a      	strh	r2, [r1, #0]
 800595c:	881a      	ldrh	r2, [r3, #0]
 800595e:	0652      	lsls	r2, r2, #25
 8005960:	d505      	bpl.n	800596e <USB_ActivateEndpoint+0x112>
 8005962:	881a      	ldrh	r2, [r3, #0]
 8005964:	4961      	ldr	r1, [pc, #388]	@ (8005aec <USB_ActivateEndpoint+0x290>)
 8005966:	400a      	ands	r2, r1
 8005968:	4967      	ldr	r1, [pc, #412]	@ (8005b08 <USB_ActivateEndpoint+0x2ac>)
 800596a:	430a      	orrs	r2, r1
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	2e01      	cmp	r6, #1
 8005970:	d100      	bne.n	8005974 <USB_ActivateEndpoint+0x118>
 8005972:	e08c      	b.n	8005a8e <USB_ActivateEndpoint+0x232>
 8005974:	8819      	ldrh	r1, [r3, #0]
 8005976:	4a63      	ldr	r2, [pc, #396]	@ (8005b04 <USB_ActivateEndpoint+0x2a8>)
 8005978:	4011      	ands	r1, r2
 800597a:	2220      	movs	r2, #32
 800597c:	4051      	eors	r1, r2
 800597e:	4a5a      	ldr	r2, [pc, #360]	@ (8005ae8 <USB_ActivateEndpoint+0x28c>)
 8005980:	430a      	orrs	r2, r1
 8005982:	b292      	uxth	r2, r2
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	e7cc      	b.n	8005922 <USB_ActivateEndpoint+0xc6>
 8005988:	4857      	ldr	r0, [pc, #348]	@ (8005ae8 <USB_ActivateEndpoint+0x28c>)
 800598a:	4f58      	ldr	r7, [pc, #352]	@ (8005aec <USB_ActivateEndpoint+0x290>)
 800598c:	4302      	orrs	r2, r0
 800598e:	b292      	uxth	r2, r2
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	881a      	ldrh	r2, [r3, #0]
 8005994:	403a      	ands	r2, r7
 8005996:	432a      	orrs	r2, r5
 8005998:	4310      	orrs	r0, r2
 800599a:	b280      	uxth	r0, r0
 800599c:	8018      	strh	r0, [r3, #0]
 800599e:	7b0a      	ldrb	r2, [r1, #12]
 80059a0:	2001      	movs	r0, #1
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	d0c8      	beq.n	8005938 <USB_ActivateEndpoint+0xdc>
 80059a6:	e77e      	b.n	80058a6 <USB_ActivateEndpoint+0x4a>
 80059a8:	881a      	ldrh	r2, [r3, #0]
 80059aa:	0452      	lsls	r2, r2, #17
 80059ac:	d505      	bpl.n	80059ba <USB_ActivateEndpoint+0x15e>
 80059ae:	881a      	ldrh	r2, [r3, #0]
 80059b0:	494e      	ldr	r1, [pc, #312]	@ (8005aec <USB_ActivateEndpoint+0x290>)
 80059b2:	400a      	ands	r2, r1
 80059b4:	4951      	ldr	r1, [pc, #324]	@ (8005afc <USB_ActivateEndpoint+0x2a0>)
 80059b6:	430a      	orrs	r2, r1
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	881a      	ldrh	r2, [r3, #0]
 80059bc:	0652      	lsls	r2, r2, #25
 80059be:	d505      	bpl.n	80059cc <USB_ActivateEndpoint+0x170>
 80059c0:	881a      	ldrh	r2, [r3, #0]
 80059c2:	494a      	ldr	r1, [pc, #296]	@ (8005aec <USB_ActivateEndpoint+0x290>)
 80059c4:	400a      	ands	r2, r1
 80059c6:	4950      	ldr	r1, [pc, #320]	@ (8005b08 <USB_ActivateEndpoint+0x2ac>)
 80059c8:	430a      	orrs	r2, r1
 80059ca:	801a      	strh	r2, [r3, #0]
 80059cc:	2e01      	cmp	r6, #1
 80059ce:	d057      	beq.n	8005a80 <USB_ActivateEndpoint+0x224>
 80059d0:	8819      	ldrh	r1, [r3, #0]
 80059d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005b04 <USB_ActivateEndpoint+0x2a8>)
 80059d4:	4011      	ands	r1, r2
 80059d6:	2220      	movs	r2, #32
 80059d8:	4051      	eors	r1, r2
 80059da:	4a43      	ldr	r2, [pc, #268]	@ (8005ae8 <USB_ActivateEndpoint+0x28c>)
 80059dc:	430a      	orrs	r2, r1
 80059de:	b292      	uxth	r2, r2
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	881a      	ldrh	r2, [r3, #0]
 80059e4:	4946      	ldr	r1, [pc, #280]	@ (8005b00 <USB_ActivateEndpoint+0x2a4>)
 80059e6:	400a      	ands	r2, r1
 80059e8:	4942      	ldr	r1, [pc, #264]	@ (8005af4 <USB_ActivateEndpoint+0x298>)
 80059ea:	430a      	orrs	r2, r1
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	e798      	b.n	8005922 <USB_ActivateEndpoint+0xc6>
 80059f0:	2250      	movs	r2, #80	@ 0x50
 80059f2:	5aa6      	ldrh	r6, [r4, r2]
 80059f4:	4694      	mov	ip, r2
 80059f6:	4a40      	ldr	r2, [pc, #256]	@ (8005af8 <USB_ActivateEndpoint+0x29c>)
 80059f8:	19f6      	adds	r6, r6, r7
 80059fa:	4690      	mov	r8, r2
 80059fc:	464a      	mov	r2, r9
 80059fe:	4446      	add	r6, r8
 8005a00:	8032      	strh	r2, [r6, #0]
 8005a02:	4662      	mov	r2, ip
 8005a04:	5aa2      	ldrh	r2, [r4, r2]
 8005a06:	4c41      	ldr	r4, [pc, #260]	@ (8005b0c <USB_ActivateEndpoint+0x2b0>)
 8005a08:	19d2      	adds	r2, r2, r7
 8005a0a:	46a4      	mov	ip, r4
 8005a0c:	4462      	add	r2, ip
 8005a0e:	8814      	ldrh	r4, [r2, #0]
 8005a10:	6909      	ldr	r1, [r1, #16]
 8005a12:	05a4      	lsls	r4, r4, #22
 8005a14:	0da4      	lsrs	r4, r4, #22
 8005a16:	8014      	strh	r4, [r2, #0]
 8005a18:	2900      	cmp	r1, #0
 8005a1a:	d02b      	beq.n	8005a74 <USB_ActivateEndpoint+0x218>
 8005a1c:	293e      	cmp	r1, #62	@ 0x3e
 8005a1e:	d853      	bhi.n	8005ac8 <USB_ActivateEndpoint+0x26c>
 8005a20:	2601      	movs	r6, #1
 8005a22:	084c      	lsrs	r4, r1, #1
 8005a24:	4031      	ands	r1, r6
 8005a26:	1864      	adds	r4, r4, r1
 8005a28:	8811      	ldrh	r1, [r2, #0]
 8005a2a:	02a4      	lsls	r4, r4, #10
 8005a2c:	4321      	orrs	r1, r4
 8005a2e:	b289      	uxth	r1, r1
 8005a30:	8011      	strh	r1, [r2, #0]
 8005a32:	881a      	ldrh	r2, [r3, #0]
 8005a34:	0452      	lsls	r2, r2, #17
 8005a36:	d505      	bpl.n	8005a44 <USB_ActivateEndpoint+0x1e8>
 8005a38:	881a      	ldrh	r2, [r3, #0]
 8005a3a:	492c      	ldr	r1, [pc, #176]	@ (8005aec <USB_ActivateEndpoint+0x290>)
 8005a3c:	400a      	ands	r2, r1
 8005a3e:	492f      	ldr	r1, [pc, #188]	@ (8005afc <USB_ActivateEndpoint+0x2a0>)
 8005a40:	430a      	orrs	r2, r1
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	4a2e      	ldr	r2, [pc, #184]	@ (8005b00 <USB_ActivateEndpoint+0x2a4>)
 8005a46:	8819      	ldrh	r1, [r3, #0]
 8005a48:	4011      	ands	r1, r2
 8005a4a:	22c0      	movs	r2, #192	@ 0xc0
 8005a4c:	2d00      	cmp	r5, #0
 8005a4e:	d000      	beq.n	8005a52 <USB_ActivateEndpoint+0x1f6>
 8005a50:	2280      	movs	r2, #128	@ 0x80
 8005a52:	0192      	lsls	r2, r2, #6
 8005a54:	404a      	eors	r2, r1
 8005a56:	4927      	ldr	r1, [pc, #156]	@ (8005af4 <USB_ActivateEndpoint+0x298>)
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	801a      	strh	r2, [r3, #0]
 8005a5c:	e761      	b.n	8005922 <USB_ActivateEndpoint+0xc6>
 8005a5e:	2080      	movs	r0, #128	@ 0x80
 8005a60:	0080      	lsls	r0, r0, #2
 8005a62:	4302      	orrs	r2, r0
 8005a64:	e710      	b.n	8005888 <USB_ActivateEndpoint+0x2c>
 8005a66:	881a      	ldrh	r2, [r3, #0]
 8005a68:	4920      	ldr	r1, [pc, #128]	@ (8005aec <USB_ActivateEndpoint+0x290>)
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	4926      	ldr	r1, [pc, #152]	@ (8005b08 <USB_ActivateEndpoint+0x2ac>)
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e746      	b.n	8005902 <USB_ActivateEndpoint+0xa6>
 8005a74:	2480      	movs	r4, #128	@ 0x80
 8005a76:	8811      	ldrh	r1, [r2, #0]
 8005a78:	0224      	lsls	r4, r4, #8
 8005a7a:	4321      	orrs	r1, r4
 8005a7c:	8011      	strh	r1, [r2, #0]
 8005a7e:	e7d8      	b.n	8005a32 <USB_ActivateEndpoint+0x1d6>
 8005a80:	881a      	ldrh	r2, [r3, #0]
 8005a82:	4920      	ldr	r1, [pc, #128]	@ (8005b04 <USB_ActivateEndpoint+0x2a8>)
 8005a84:	400a      	ands	r2, r1
 8005a86:	491b      	ldr	r1, [pc, #108]	@ (8005af4 <USB_ActivateEndpoint+0x298>)
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	e7a9      	b.n	80059e2 <USB_ActivateEndpoint+0x186>
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	491c      	ldr	r1, [pc, #112]	@ (8005b04 <USB_ActivateEndpoint+0x2a8>)
 8005a92:	400a      	ands	r2, r1
 8005a94:	4917      	ldr	r1, [pc, #92]	@ (8005af4 <USB_ActivateEndpoint+0x298>)
 8005a96:	430a      	orrs	r2, r1
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	e742      	b.n	8005922 <USB_ActivateEndpoint+0xc6>
 8005a9c:	4812      	ldr	r0, [pc, #72]	@ (8005ae8 <USB_ActivateEndpoint+0x28c>)
 8005a9e:	4f13      	ldr	r7, [pc, #76]	@ (8005aec <USB_ActivateEndpoint+0x290>)
 8005aa0:	4302      	orrs	r2, r0
 8005aa2:	b292      	uxth	r2, r2
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	881a      	ldrh	r2, [r3, #0]
 8005aa8:	403a      	ands	r2, r7
 8005aaa:	432a      	orrs	r2, r5
 8005aac:	4310      	orrs	r0, r2
 8005aae:	b280      	uxth	r0, r0
 8005ab0:	8018      	strh	r0, [r3, #0]
 8005ab2:	7b0a      	ldrb	r2, [r1, #12]
 8005ab4:	2a00      	cmp	r2, #0
 8005ab6:	d100      	bne.n	8005aba <USB_ActivateEndpoint+0x25e>
 8005ab8:	e73d      	b.n	8005936 <USB_ActivateEndpoint+0xda>
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	4814      	ldr	r0, [pc, #80]	@ (8005b10 <USB_ActivateEndpoint+0x2b4>)
 8005abe:	403a      	ands	r2, r7
 8005ac0:	4302      	orrs	r2, r0
 8005ac2:	801a      	strh	r2, [r3, #0]
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	e6f4      	b.n	80058b2 <USB_ActivateEndpoint+0x56>
 8005ac8:	261f      	movs	r6, #31
 8005aca:	094c      	lsrs	r4, r1, #5
 8005acc:	4031      	ands	r1, r6
 8005ace:	424e      	negs	r6, r1
 8005ad0:	4171      	adcs	r1, r6
 8005ad2:	1a64      	subs	r4, r4, r1
 8005ad4:	8811      	ldrh	r1, [r2, #0]
 8005ad6:	02a4      	lsls	r4, r4, #10
 8005ad8:	430c      	orrs	r4, r1
 8005ada:	490e      	ldr	r1, [pc, #56]	@ (8005b14 <USB_ActivateEndpoint+0x2b8>)
 8005adc:	4321      	orrs	r1, r4
 8005ade:	b289      	uxth	r1, r1
 8005ae0:	8011      	strh	r1, [r2, #0]
 8005ae2:	e7a6      	b.n	8005a32 <USB_ActivateEndpoint+0x1d6>
 8005ae4:	ffff898f 	.word	0xffff898f
 8005ae8:	ffff8080 	.word	0xffff8080
 8005aec:	ffff8f8f 	.word	0xffff8f8f
 8005af0:	ffff8e8f 	.word	0xffff8e8f
 8005af4:	00008080 	.word	0x00008080
 8005af8:	00000404 	.word	0x00000404
 8005afc:	0000c080 	.word	0x0000c080
 8005b00:	ffffbf8f 	.word	0xffffbf8f
 8005b04:	ffff8fbf 	.word	0xffff8fbf
 8005b08:	000080c0 	.word	0x000080c0
 8005b0c:	00000406 	.word	0x00000406
 8005b10:	00008180 	.word	0x00008180
 8005b14:	ffff8000 	.word	0xffff8000

08005b18 <USB_DeactivateEndpoint>:
 8005b18:	780b      	ldrb	r3, [r1, #0]
 8005b1a:	784a      	ldrb	r2, [r1, #1]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	18c0      	adds	r0, r0, r3
 8005b20:	7b0b      	ldrb	r3, [r1, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10d      	bne.n	8005b42 <USB_DeactivateEndpoint+0x2a>
 8005b26:	8803      	ldrh	r3, [r0, #0]
 8005b28:	2a00      	cmp	r2, #0
 8005b2a:	d057      	beq.n	8005bdc <USB_DeactivateEndpoint+0xc4>
 8005b2c:	065b      	lsls	r3, r3, #25
 8005b2e:	d500      	bpl.n	8005b32 <USB_DeactivateEndpoint+0x1a>
 8005b30:	e063      	b.n	8005bfa <USB_DeactivateEndpoint+0xe2>
 8005b32:	8803      	ldrh	r3, [r0, #0]
 8005b34:	4a34      	ldr	r2, [pc, #208]	@ (8005c08 <USB_DeactivateEndpoint+0xf0>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	4a34      	ldr	r2, [pc, #208]	@ (8005c0c <USB_DeactivateEndpoint+0xf4>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	8003      	strh	r3, [r0, #0]
 8005b3e:	2000      	movs	r0, #0
 8005b40:	4770      	bx	lr
 8005b42:	8803      	ldrh	r3, [r0, #0]
 8005b44:	2a00      	cmp	r2, #0
 8005b46:	d124      	bne.n	8005b92 <USB_DeactivateEndpoint+0x7a>
 8005b48:	045b      	lsls	r3, r3, #17
 8005b4a:	d505      	bpl.n	8005b58 <USB_DeactivateEndpoint+0x40>
 8005b4c:	8803      	ldrh	r3, [r0, #0]
 8005b4e:	4a30      	ldr	r2, [pc, #192]	@ (8005c10 <USB_DeactivateEndpoint+0xf8>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	4a30      	ldr	r2, [pc, #192]	@ (8005c14 <USB_DeactivateEndpoint+0xfc>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	8003      	strh	r3, [r0, #0]
 8005b58:	8803      	ldrh	r3, [r0, #0]
 8005b5a:	065b      	lsls	r3, r3, #25
 8005b5c:	d505      	bpl.n	8005b6a <USB_DeactivateEndpoint+0x52>
 8005b5e:	8803      	ldrh	r3, [r0, #0]
 8005b60:	4a2b      	ldr	r2, [pc, #172]	@ (8005c10 <USB_DeactivateEndpoint+0xf8>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	4a2c      	ldr	r2, [pc, #176]	@ (8005c18 <USB_DeactivateEndpoint+0x100>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	8003      	strh	r3, [r0, #0]
 8005b6a:	8803      	ldrh	r3, [r0, #0]
 8005b6c:	4a28      	ldr	r2, [pc, #160]	@ (8005c10 <USB_DeactivateEndpoint+0xf8>)
 8005b6e:	4926      	ldr	r1, [pc, #152]	@ (8005c08 <USB_DeactivateEndpoint+0xf0>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	4a29      	ldr	r2, [pc, #164]	@ (8005c18 <USB_DeactivateEndpoint+0x100>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	8003      	strh	r3, [r0, #0]
 8005b78:	8803      	ldrh	r3, [r0, #0]
 8005b7a:	4a28      	ldr	r2, [pc, #160]	@ (8005c1c <USB_DeactivateEndpoint+0x104>)
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	4a28      	ldr	r2, [pc, #160]	@ (8005c20 <USB_DeactivateEndpoint+0x108>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	8003      	strh	r3, [r0, #0]
 8005b86:	8803      	ldrh	r3, [r0, #0]
 8005b88:	400b      	ands	r3, r1
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	b292      	uxth	r2, r2
 8005b8e:	8002      	strh	r2, [r0, #0]
 8005b90:	e7d5      	b.n	8005b3e <USB_DeactivateEndpoint+0x26>
 8005b92:	045b      	lsls	r3, r3, #17
 8005b94:	d505      	bpl.n	8005ba2 <USB_DeactivateEndpoint+0x8a>
 8005b96:	8803      	ldrh	r3, [r0, #0]
 8005b98:	4a1d      	ldr	r2, [pc, #116]	@ (8005c10 <USB_DeactivateEndpoint+0xf8>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <USB_DeactivateEndpoint+0xfc>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	8003      	strh	r3, [r0, #0]
 8005ba2:	8803      	ldrh	r3, [r0, #0]
 8005ba4:	065b      	lsls	r3, r3, #25
 8005ba6:	d505      	bpl.n	8005bb4 <USB_DeactivateEndpoint+0x9c>
 8005ba8:	8803      	ldrh	r3, [r0, #0]
 8005baa:	4a19      	ldr	r2, [pc, #100]	@ (8005c10 <USB_DeactivateEndpoint+0xf8>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	4a1a      	ldr	r2, [pc, #104]	@ (8005c18 <USB_DeactivateEndpoint+0x100>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	8003      	strh	r3, [r0, #0]
 8005bb4:	8803      	ldrh	r3, [r0, #0]
 8005bb6:	4a16      	ldr	r2, [pc, #88]	@ (8005c10 <USB_DeactivateEndpoint+0xf8>)
 8005bb8:	4918      	ldr	r1, [pc, #96]	@ (8005c1c <USB_DeactivateEndpoint+0x104>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	4a15      	ldr	r2, [pc, #84]	@ (8005c14 <USB_DeactivateEndpoint+0xfc>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	8003      	strh	r3, [r0, #0]
 8005bc2:	8803      	ldrh	r3, [r0, #0]
 8005bc4:	4a10      	ldr	r2, [pc, #64]	@ (8005c08 <USB_DeactivateEndpoint+0xf0>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	4a15      	ldr	r2, [pc, #84]	@ (8005c20 <USB_DeactivateEndpoint+0x108>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	8003      	strh	r3, [r0, #0]
 8005bd0:	8803      	ldrh	r3, [r0, #0]
 8005bd2:	400b      	ands	r3, r1
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	b292      	uxth	r2, r2
 8005bd8:	8002      	strh	r2, [r0, #0]
 8005bda:	e7b0      	b.n	8005b3e <USB_DeactivateEndpoint+0x26>
 8005bdc:	045b      	lsls	r3, r3, #17
 8005bde:	d505      	bpl.n	8005bec <USB_DeactivateEndpoint+0xd4>
 8005be0:	8803      	ldrh	r3, [r0, #0]
 8005be2:	4a0b      	ldr	r2, [pc, #44]	@ (8005c10 <USB_DeactivateEndpoint+0xf8>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	4a0b      	ldr	r2, [pc, #44]	@ (8005c14 <USB_DeactivateEndpoint+0xfc>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	8003      	strh	r3, [r0, #0]
 8005bec:	8803      	ldrh	r3, [r0, #0]
 8005bee:	4a0b      	ldr	r2, [pc, #44]	@ (8005c1c <USB_DeactivateEndpoint+0x104>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	4a06      	ldr	r2, [pc, #24]	@ (8005c0c <USB_DeactivateEndpoint+0xf4>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	8003      	strh	r3, [r0, #0]
 8005bf8:	e7a1      	b.n	8005b3e <USB_DeactivateEndpoint+0x26>
 8005bfa:	8803      	ldrh	r3, [r0, #0]
 8005bfc:	4a04      	ldr	r2, [pc, #16]	@ (8005c10 <USB_DeactivateEndpoint+0xf8>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	4a05      	ldr	r2, [pc, #20]	@ (8005c18 <USB_DeactivateEndpoint+0x100>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	8003      	strh	r3, [r0, #0]
 8005c06:	e794      	b.n	8005b32 <USB_DeactivateEndpoint+0x1a>
 8005c08:	ffff8fbf 	.word	0xffff8fbf
 8005c0c:	00008080 	.word	0x00008080
 8005c10:	ffff8f8f 	.word	0xffff8f8f
 8005c14:	0000c080 	.word	0x0000c080
 8005c18:	000080c0 	.word	0x000080c0
 8005c1c:	ffffbf8f 	.word	0xffffbf8f
 8005c20:	ffff8080 	.word	0xffff8080

08005c24 <USB_EPStartXfer>:
 8005c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c26:	4645      	mov	r5, r8
 8005c28:	46de      	mov	lr, fp
 8005c2a:	4657      	mov	r7, sl
 8005c2c:	464e      	mov	r6, r9
 8005c2e:	b5e0      	push	{r5, r6, r7, lr}
 8005c30:	784b      	ldrb	r3, [r1, #1]
 8005c32:	0002      	movs	r2, r0
 8005c34:	7b0d      	ldrb	r5, [r1, #12]
 8005c36:	b087      	sub	sp, #28
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d100      	bne.n	8005c3e <USB_EPStartXfer+0x1a>
 8005c3c:	e072      	b.n	8005d24 <USB_EPStartXfer+0x100>
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	d04c      	beq.n	8005cdc <USB_EPStartXfer+0xb8>
 8005c42:	78cc      	ldrb	r4, [r1, #3]
 8005c44:	2c02      	cmp	r4, #2
 8005c46:	d100      	bne.n	8005c4a <USB_EPStartXfer+0x26>
 8005c48:	e0e7      	b.n	8005e1a <USB_EPStartXfer+0x1f6>
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	2c01      	cmp	r4, #1
 8005c4e:	d13e      	bne.n	8005cce <USB_EPStartXfer+0xaa>
 8005c50:	698d      	ldr	r5, [r1, #24]
 8005c52:	6908      	ldr	r0, [r1, #16]
 8005c54:	2400      	movs	r4, #0
 8005c56:	4285      	cmp	r5, r0
 8005c58:	d901      	bls.n	8005c5e <USB_EPStartXfer+0x3a>
 8005c5a:	1a2c      	subs	r4, r5, r0
 8005c5c:	0005      	movs	r5, r0
 8005c5e:	618c      	str	r4, [r1, #24]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d127      	bne.n	8005cb4 <USB_EPStartXfer+0x90>
 8005c64:	2650      	movs	r6, #80	@ 0x50
 8005c66:	4b95      	ldr	r3, [pc, #596]	@ (8005ebc <USB_EPStartXfer+0x298>)
 8005c68:	5b90      	ldrh	r0, [r2, r6]
 8005c6a:	780c      	ldrb	r4, [r1, #0]
 8005c6c:	18d3      	adds	r3, r2, r3
 8005c6e:	181b      	adds	r3, r3, r0
 8005c70:	00e4      	lsls	r4, r4, #3
 8005c72:	191b      	adds	r3, r3, r4
 8005c74:	8818      	ldrh	r0, [r3, #0]
 8005c76:	0580      	lsls	r0, r0, #22
 8005c78:	0d80      	lsrs	r0, r0, #22
 8005c7a:	8018      	strh	r0, [r3, #0]
 8005c7c:	4890      	ldr	r0, [pc, #576]	@ (8005ec0 <USB_EPStartXfer+0x29c>)
 8005c7e:	4680      	mov	r8, r0
 8005c80:	4490      	add	r8, r2
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	d100      	bne.n	8005c88 <USB_EPStartXfer+0x64>
 8005c86:	e207      	b.n	8006098 <USB_EPStartXfer+0x474>
 8005c88:	2d3e      	cmp	r5, #62	@ 0x3e
 8005c8a:	d900      	bls.n	8005c8e <USB_EPStartXfer+0x6a>
 8005c8c:	e295      	b.n	80061ba <USB_EPStartXfer+0x596>
 8005c8e:	2001      	movs	r0, #1
 8005c90:	086f      	lsrs	r7, r5, #1
 8005c92:	4005      	ands	r5, r0
 8005c94:	197f      	adds	r7, r7, r5
 8005c96:	02bf      	lsls	r7, r7, #10
 8005c98:	881d      	ldrh	r5, [r3, #0]
 8005c9a:	b2bf      	uxth	r7, r7
 8005c9c:	433d      	orrs	r5, r7
 8005c9e:	801d      	strh	r5, [r3, #0]
 8005ca0:	5b93      	ldrh	r3, [r2, r6]
 8005ca2:	4443      	add	r3, r8
 8005ca4:	191b      	adds	r3, r3, r4
 8005ca6:	8818      	ldrh	r0, [r3, #0]
 8005ca8:	0580      	lsls	r0, r0, #22
 8005caa:	0d80      	lsrs	r0, r0, #22
 8005cac:	8018      	strh	r0, [r3, #0]
 8005cae:	8818      	ldrh	r0, [r3, #0]
 8005cb0:	4307      	orrs	r7, r0
 8005cb2:	801f      	strh	r7, [r3, #0]
 8005cb4:	780b      	ldrb	r3, [r1, #0]
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	18d2      	adds	r2, r2, r3
 8005cba:	8811      	ldrh	r1, [r2, #0]
 8005cbc:	4b81      	ldr	r3, [pc, #516]	@ (8005ec4 <USB_EPStartXfer+0x2a0>)
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	4019      	ands	r1, r3
 8005cc2:	23c0      	movs	r3, #192	@ 0xc0
 8005cc4:	019b      	lsls	r3, r3, #6
 8005cc6:	404b      	eors	r3, r1
 8005cc8:	497f      	ldr	r1, [pc, #508]	@ (8005ec8 <USB_EPStartXfer+0x2a4>)
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	8013      	strh	r3, [r2, #0]
 8005cce:	b007      	add	sp, #28
 8005cd0:	bcf0      	pop	{r4, r5, r6, r7}
 8005cd2:	46bb      	mov	fp, r7
 8005cd4:	46b2      	mov	sl, r6
 8005cd6:	46a9      	mov	r9, r5
 8005cd8:	46a0      	mov	r8, r4
 8005cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cdc:	698c      	ldr	r4, [r1, #24]
 8005cde:	690b      	ldr	r3, [r1, #16]
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	429c      	cmp	r4, r3
 8005ce4:	d901      	bls.n	8005cea <USB_EPStartXfer+0xc6>
 8005ce6:	1ae0      	subs	r0, r4, r3
 8005ce8:	001c      	movs	r4, r3
 8005cea:	2350      	movs	r3, #80	@ 0x50
 8005cec:	6188      	str	r0, [r1, #24]
 8005cee:	5ad5      	ldrh	r5, [r2, r3]
 8005cf0:	4b73      	ldr	r3, [pc, #460]	@ (8005ec0 <USB_EPStartXfer+0x29c>)
 8005cf2:	7808      	ldrb	r0, [r1, #0]
 8005cf4:	18d3      	adds	r3, r2, r3
 8005cf6:	195b      	adds	r3, r3, r5
 8005cf8:	00c0      	lsls	r0, r0, #3
 8005cfa:	18c0      	adds	r0, r0, r3
 8005cfc:	8803      	ldrh	r3, [r0, #0]
 8005cfe:	059b      	lsls	r3, r3, #22
 8005d00:	0d9b      	lsrs	r3, r3, #22
 8005d02:	8003      	strh	r3, [r0, #0]
 8005d04:	2c00      	cmp	r4, #0
 8005d06:	d100      	bne.n	8005d0a <USB_EPStartXfer+0xe6>
 8005d08:	e081      	b.n	8005e0e <USB_EPStartXfer+0x1ea>
 8005d0a:	2c3e      	cmp	r4, #62	@ 0x3e
 8005d0c:	d900      	bls.n	8005d10 <USB_EPStartXfer+0xec>
 8005d0e:	e0c6      	b.n	8005e9e <USB_EPStartXfer+0x27a>
 8005d10:	2301      	movs	r3, #1
 8005d12:	0865      	lsrs	r5, r4, #1
 8005d14:	4023      	ands	r3, r4
 8005d16:	18ed      	adds	r5, r5, r3
 8005d18:	8803      	ldrh	r3, [r0, #0]
 8005d1a:	02ad      	lsls	r5, r5, #10
 8005d1c:	432b      	orrs	r3, r5
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	8003      	strh	r3, [r0, #0]
 8005d22:	e7c7      	b.n	8005cb4 <USB_EPStartXfer+0x90>
 8005d24:	690c      	ldr	r4, [r1, #16]
 8005d26:	6988      	ldr	r0, [r1, #24]
 8005d28:	42a0      	cmp	r0, r4
 8005d2a:	d868      	bhi.n	8005dfe <USB_EPStartXfer+0x1da>
 8005d2c:	2680      	movs	r6, #128	@ 0x80
 8005d2e:	00f6      	lsls	r6, r6, #3
 8005d30:	694b      	ldr	r3, [r1, #20]
 8005d32:	1997      	adds	r7, r2, r6
 8005d34:	2d00      	cmp	r5, #0
 8005d36:	d12f      	bne.n	8005d98 <USB_EPStartXfer+0x174>
 8005d38:	0404      	lsls	r4, r0, #16
 8005d3a:	b286      	uxth	r6, r0
 8005d3c:	0c24      	lsrs	r4, r4, #16
 8005d3e:	88c8      	ldrh	r0, [r1, #6]
 8005d40:	3401      	adds	r4, #1
 8005d42:	0864      	lsrs	r4, r4, #1
 8005d44:	19c0      	adds	r0, r0, r7
 8005d46:	2c00      	cmp	r4, #0
 8005d48:	d00f      	beq.n	8005d6a <USB_EPStartXfer+0x146>
 8005d4a:	0064      	lsls	r4, r4, #1
 8005d4c:	1ac5      	subs	r5, r0, r3
 8005d4e:	191c      	adds	r4, r3, r4
 8005d50:	4694      	mov	ip, r2
 8005d52:	002a      	movs	r2, r5
 8005d54:	0025      	movs	r5, r4
 8005d56:	7858      	ldrb	r0, [r3, #1]
 8005d58:	781c      	ldrb	r4, [r3, #0]
 8005d5a:	0200      	lsls	r0, r0, #8
 8005d5c:	189f      	adds	r7, r3, r2
 8005d5e:	4320      	orrs	r0, r4
 8005d60:	3302      	adds	r3, #2
 8005d62:	8038      	strh	r0, [r7, #0]
 8005d64:	42ab      	cmp	r3, r5
 8005d66:	d1f6      	bne.n	8005d56 <USB_EPStartXfer+0x132>
 8005d68:	4662      	mov	r2, ip
 8005d6a:	2350      	movs	r3, #80	@ 0x50
 8005d6c:	4853      	ldr	r0, [pc, #332]	@ (8005ebc <USB_EPStartXfer+0x298>)
 8005d6e:	5ad4      	ldrh	r4, [r2, r3]
 8005d70:	780b      	ldrb	r3, [r1, #0]
 8005d72:	1810      	adds	r0, r2, r0
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	1900      	adds	r0, r0, r4
 8005d78:	181b      	adds	r3, r3, r0
 8005d7a:	801e      	strh	r6, [r3, #0]
 8005d7c:	780b      	ldrb	r3, [r1, #0]
 8005d7e:	2000      	movs	r0, #0
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	18d3      	adds	r3, r2, r3
 8005d84:	8819      	ldrh	r1, [r3, #0]
 8005d86:	4a51      	ldr	r2, [pc, #324]	@ (8005ecc <USB_EPStartXfer+0x2a8>)
 8005d88:	4011      	ands	r1, r2
 8005d8a:	2230      	movs	r2, #48	@ 0x30
 8005d8c:	4051      	eors	r1, r2
 8005d8e:	4a50      	ldr	r2, [pc, #320]	@ (8005ed0 <USB_EPStartXfer+0x2ac>)
 8005d90:	430a      	orrs	r2, r1
 8005d92:	b292      	uxth	r2, r2
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	e79a      	b.n	8005cce <USB_EPStartXfer+0xaa>
 8005d98:	6a0d      	ldr	r5, [r1, #32]
 8005d9a:	46ab      	mov	fp, r5
 8005d9c:	780d      	ldrb	r5, [r1, #0]
 8005d9e:	00ae      	lsls	r6, r5, #2
 8005da0:	46b4      	mov	ip, r6
 8005da2:	00ed      	lsls	r5, r5, #3
 8005da4:	9501      	str	r5, [sp, #4]
 8005da6:	78ce      	ldrb	r6, [r1, #3]
 8005da8:	4494      	add	ip, r2
 8005daa:	2e02      	cmp	r6, #2
 8005dac:	d100      	bne.n	8005db0 <USB_EPStartXfer+0x18c>
 8005dae:	e099      	b.n	8005ee4 <USB_EPStartXfer+0x2c0>
 8005db0:	465c      	mov	r4, fp
 8005db2:	1a26      	subs	r6, r4, r0
 8005db4:	4664      	mov	r4, ip
 8005db6:	620e      	str	r6, [r1, #32]
 8005db8:	b286      	uxth	r6, r0
 8005dba:	0400      	lsls	r0, r0, #16
 8005dbc:	0c00      	lsrs	r0, r0, #16
 8005dbe:	8824      	ldrh	r4, [r4, #0]
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	0840      	lsrs	r0, r0, #1
 8005dc4:	0664      	lsls	r4, r4, #25
 8005dc6:	d400      	bmi.n	8005dca <USB_EPStartXfer+0x1a6>
 8005dc8:	e112      	b.n	8005ff0 <USB_EPStartXfer+0x3cc>
 8005dca:	2450      	movs	r4, #80	@ 0x50
 8005dcc:	5b14      	ldrh	r4, [r2, r4]
 8005dce:	46a4      	mov	ip, r4
 8005dd0:	4c3b      	ldr	r4, [pc, #236]	@ (8005ec0 <USB_EPStartXfer+0x29c>)
 8005dd2:	1914      	adds	r4, r2, r4
 8005dd4:	4464      	add	r4, ip
 8005dd6:	46ac      	mov	ip, r5
 8005dd8:	4464      	add	r4, ip
 8005dda:	8026      	strh	r6, [r4, #0]
 8005ddc:	894d      	ldrh	r5, [r1, #10]
 8005dde:	19ef      	adds	r7, r5, r7
 8005de0:	2800      	cmp	r0, #0
 8005de2:	d0cb      	beq.n	8005d7c <USB_EPStartXfer+0x158>
 8005de4:	0044      	lsls	r4, r0, #1
 8005de6:	191c      	adds	r4, r3, r4
 8005de8:	1aff      	subs	r7, r7, r3
 8005dea:	7858      	ldrb	r0, [r3, #1]
 8005dec:	781e      	ldrb	r6, [r3, #0]
 8005dee:	0200      	lsls	r0, r0, #8
 8005df0:	19dd      	adds	r5, r3, r7
 8005df2:	4330      	orrs	r0, r6
 8005df4:	3302      	adds	r3, #2
 8005df6:	8028      	strh	r0, [r5, #0]
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	d1f6      	bne.n	8005dea <USB_EPStartXfer+0x1c6>
 8005dfc:	e7be      	b.n	8005d7c <USB_EPStartXfer+0x158>
 8005dfe:	2680      	movs	r6, #128	@ 0x80
 8005e00:	00f6      	lsls	r6, r6, #3
 8005e02:	0020      	movs	r0, r4
 8005e04:	694b      	ldr	r3, [r1, #20]
 8005e06:	1997      	adds	r7, r2, r6
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	d1c5      	bne.n	8005d98 <USB_EPStartXfer+0x174>
 8005e0c:	e794      	b.n	8005d38 <USB_EPStartXfer+0x114>
 8005e0e:	2480      	movs	r4, #128	@ 0x80
 8005e10:	8803      	ldrh	r3, [r0, #0]
 8005e12:	0224      	lsls	r4, r4, #8
 8005e14:	4323      	orrs	r3, r4
 8005e16:	8003      	strh	r3, [r0, #0]
 8005e18:	e74c      	b.n	8005cb4 <USB_EPStartXfer+0x90>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d129      	bne.n	8005e72 <USB_EPStartXfer+0x24e>
 8005e1e:	2650      	movs	r6, #80	@ 0x50
 8005e20:	4b26      	ldr	r3, [pc, #152]	@ (8005ebc <USB_EPStartXfer+0x298>)
 8005e22:	5b80      	ldrh	r0, [r0, r6]
 8005e24:	780c      	ldrb	r4, [r1, #0]
 8005e26:	18d3      	adds	r3, r2, r3
 8005e28:	181b      	adds	r3, r3, r0
 8005e2a:	00e4      	lsls	r4, r4, #3
 8005e2c:	191b      	adds	r3, r3, r4
 8005e2e:	8818      	ldrh	r0, [r3, #0]
 8005e30:	690d      	ldr	r5, [r1, #16]
 8005e32:	0580      	lsls	r0, r0, #22
 8005e34:	0d80      	lsrs	r0, r0, #22
 8005e36:	8018      	strh	r0, [r3, #0]
 8005e38:	4821      	ldr	r0, [pc, #132]	@ (8005ec0 <USB_EPStartXfer+0x29c>)
 8005e3a:	1810      	adds	r0, r2, r0
 8005e3c:	2d00      	cmp	r5, #0
 8005e3e:	d100      	bne.n	8005e42 <USB_EPStartXfer+0x21e>
 8005e40:	e119      	b.n	8006076 <USB_EPStartXfer+0x452>
 8005e42:	2d3e      	cmp	r5, #62	@ 0x3e
 8005e44:	d900      	bls.n	8005e48 <USB_EPStartXfer+0x224>
 8005e46:	e195      	b.n	8006174 <USB_EPStartXfer+0x550>
 8005e48:	086f      	lsrs	r7, r5, #1
 8005e4a:	46b8      	mov	r8, r7
 8005e4c:	2701      	movs	r7, #1
 8005e4e:	403d      	ands	r5, r7
 8005e50:	44a8      	add	r8, r5
 8005e52:	4647      	mov	r7, r8
 8005e54:	881d      	ldrh	r5, [r3, #0]
 8005e56:	02bf      	lsls	r7, r7, #10
 8005e58:	b2bf      	uxth	r7, r7
 8005e5a:	433d      	orrs	r5, r7
 8005e5c:	801d      	strh	r5, [r3, #0]
 8005e5e:	5b93      	ldrh	r3, [r2, r6]
 8005e60:	18c3      	adds	r3, r0, r3
 8005e62:	191b      	adds	r3, r3, r4
 8005e64:	8818      	ldrh	r0, [r3, #0]
 8005e66:	0580      	lsls	r0, r0, #22
 8005e68:	0d80      	lsrs	r0, r0, #22
 8005e6a:	8018      	strh	r0, [r3, #0]
 8005e6c:	8818      	ldrh	r0, [r3, #0]
 8005e6e:	4307      	orrs	r7, r0
 8005e70:	801f      	strh	r7, [r3, #0]
 8005e72:	69cb      	ldr	r3, [r1, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d100      	bne.n	8005e7a <USB_EPStartXfer+0x256>
 8005e78:	e71c      	b.n	8005cb4 <USB_EPStartXfer+0x90>
 8005e7a:	780b      	ldrb	r3, [r1, #0]
 8005e7c:	4d15      	ldr	r5, [pc, #84]	@ (8005ed4 <USB_EPStartXfer+0x2b0>)
 8005e7e:	0098      	lsls	r0, r3, #2
 8005e80:	1810      	adds	r0, r2, r0
 8005e82:	8804      	ldrh	r4, [r0, #0]
 8005e84:	402c      	ands	r4, r5
 8005e86:	42ac      	cmp	r4, r5
 8005e88:	d002      	beq.n	8005e90 <USB_EPStartXfer+0x26c>
 8005e8a:	2c00      	cmp	r4, #0
 8005e8c:	d000      	beq.n	8005e90 <USB_EPStartXfer+0x26c>
 8005e8e:	e712      	b.n	8005cb6 <USB_EPStartXfer+0x92>
 8005e90:	8803      	ldrh	r3, [r0, #0]
 8005e92:	4c11      	ldr	r4, [pc, #68]	@ (8005ed8 <USB_EPStartXfer+0x2b4>)
 8005e94:	4023      	ands	r3, r4
 8005e96:	4c11      	ldr	r4, [pc, #68]	@ (8005edc <USB_EPStartXfer+0x2b8>)
 8005e98:	4323      	orrs	r3, r4
 8005e9a:	8003      	strh	r3, [r0, #0]
 8005e9c:	e70a      	b.n	8005cb4 <USB_EPStartXfer+0x90>
 8005e9e:	251f      	movs	r5, #31
 8005ea0:	0963      	lsrs	r3, r4, #5
 8005ea2:	402c      	ands	r4, r5
 8005ea4:	4265      	negs	r5, r4
 8005ea6:	416c      	adcs	r4, r5
 8005ea8:	1b1b      	subs	r3, r3, r4
 8005eaa:	8804      	ldrh	r4, [r0, #0]
 8005eac:	029b      	lsls	r3, r3, #10
 8005eae:	431c      	orrs	r4, r3
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <USB_EPStartXfer+0x2bc>)
 8005eb2:	4323      	orrs	r3, r4
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	8003      	strh	r3, [r0, #0]
 8005eb8:	e6fc      	b.n	8005cb4 <USB_EPStartXfer+0x90>
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	00000402 	.word	0x00000402
 8005ec0:	00000406 	.word	0x00000406
 8005ec4:	ffffbf8f 	.word	0xffffbf8f
 8005ec8:	00008080 	.word	0x00008080
 8005ecc:	ffff8fbf 	.word	0xffff8fbf
 8005ed0:	ffff8080 	.word	0xffff8080
 8005ed4:	00004040 	.word	0x00004040
 8005ed8:	ffff8f8f 	.word	0xffff8f8f
 8005edc:	000080c0 	.word	0x000080c0
 8005ee0:	ffff8000 	.word	0xffff8000
 8005ee4:	4ec4      	ldr	r6, [pc, #784]	@ (80061f8 <USB_EPStartXfer+0x5d4>)
 8005ee6:	46b1      	mov	r9, r6
 8005ee8:	4491      	add	r9, r2
 8005eea:	455c      	cmp	r4, fp
 8005eec:	d300      	bcc.n	8005ef0 <USB_EPStartXfer+0x2cc>
 8005eee:	e09a      	b.n	8006026 <USB_EPStartXfer+0x402>
 8005ef0:	4665      	mov	r5, ip
 8005ef2:	882d      	ldrh	r5, [r5, #0]
 8005ef4:	46a8      	mov	r8, r5
 8005ef6:	4646      	mov	r6, r8
 8005ef8:	4dc0      	ldr	r5, [pc, #768]	@ (80061fc <USB_EPStartXfer+0x5d8>)
 8005efa:	402e      	ands	r6, r5
 8005efc:	4dc0      	ldr	r5, [pc, #768]	@ (8006200 <USB_EPStartXfer+0x5dc>)
 8005efe:	432e      	orrs	r6, r5
 8005f00:	4665      	mov	r5, ip
 8005f02:	802e      	strh	r6, [r5, #0]
 8005f04:	465d      	mov	r5, fp
 8005f06:	1a2d      	subs	r5, r5, r0
 8005f08:	46ab      	mov	fp, r5
 8005f0a:	620d      	str	r5, [r1, #32]
 8005f0c:	4665      	mov	r5, ip
 8005f0e:	882e      	ldrh	r6, [r5, #0]
 8005f10:	0405      	lsls	r5, r0, #16
 8005f12:	0c2d      	lsrs	r5, r5, #16
 8005f14:	46ac      	mov	ip, r5
 8005f16:	2501      	movs	r5, #1
 8005f18:	46a8      	mov	r8, r5
 8005f1a:	44c4      	add	ip, r8
 8005f1c:	4665      	mov	r5, ip
 8005f1e:	086d      	lsrs	r5, r5, #1
 8005f20:	46aa      	mov	sl, r5
 8005f22:	4db8      	ldr	r5, [pc, #736]	@ (8006204 <USB_EPStartXfer+0x5e0>)
 8005f24:	9603      	str	r6, [sp, #12]
 8005f26:	46ac      	mov	ip, r5
 8005f28:	4494      	add	ip, r2
 8005f2a:	4665      	mov	r5, ip
 8005f2c:	b286      	uxth	r6, r0
 8005f2e:	9602      	str	r6, [sp, #8]
 8005f30:	9e03      	ldr	r6, [sp, #12]
 8005f32:	9504      	str	r5, [sp, #16]
 8005f34:	0676      	lsls	r6, r6, #25
 8005f36:	d400      	bmi.n	8005f3a <USB_EPStartXfer+0x316>
 8005f38:	e0bf      	b.n	80060ba <USB_EPStartXfer+0x496>
 8005f3a:	2650      	movs	r6, #80	@ 0x50
 8005f3c:	9d01      	ldr	r5, [sp, #4]
 8005f3e:	5b96      	ldrh	r6, [r2, r6]
 8005f40:	4466      	add	r6, ip
 8005f42:	46ac      	mov	ip, r5
 8005f44:	b285      	uxth	r5, r0
 8005f46:	4466      	add	r6, ip
 8005f48:	8035      	strh	r5, [r6, #0]
 8005f4a:	894e      	ldrh	r6, [r1, #10]
 8005f4c:	4655      	mov	r5, sl
 8005f4e:	46b4      	mov	ip, r6
 8005f50:	44bc      	add	ip, r7
 8005f52:	2d00      	cmp	r5, #0
 8005f54:	d022      	beq.n	8005f9c <USB_EPStartXfer+0x378>
 8005f56:	006e      	lsls	r6, r5, #1
 8005f58:	4665      	mov	r5, ip
 8005f5a:	46b0      	mov	r8, r6
 8005f5c:	1aed      	subs	r5, r5, r3
 8005f5e:	46ac      	mov	ip, r5
 8005f60:	9005      	str	r0, [sp, #20]
 8005f62:	0010      	movs	r0, r2
 8005f64:	4498      	add	r8, r3
 8005f66:	9403      	str	r4, [sp, #12]
 8005f68:	465c      	mov	r4, fp
 8005f6a:	4642      	mov	r2, r8
 8005f6c:	468b      	mov	fp, r1
 8005f6e:	001e      	movs	r6, r3
 8005f70:	4661      	mov	r1, ip
 8005f72:	4680      	mov	r8, r0
 8005f74:	469c      	mov	ip, r3
 8005f76:	9d01      	ldr	r5, [sp, #4]
 8005f78:	9404      	str	r4, [sp, #16]
 8005f7a:	7870      	ldrb	r0, [r6, #1]
 8005f7c:	7833      	ldrb	r3, [r6, #0]
 8005f7e:	0200      	lsls	r0, r0, #8
 8005f80:	1874      	adds	r4, r6, r1
 8005f82:	4318      	orrs	r0, r3
 8005f84:	3602      	adds	r6, #2
 8005f86:	8020      	strh	r0, [r4, #0]
 8005f88:	4296      	cmp	r6, r2
 8005f8a:	d1f6      	bne.n	8005f7a <USB_EPStartXfer+0x356>
 8005f8c:	9501      	str	r5, [sp, #4]
 8005f8e:	9d04      	ldr	r5, [sp, #16]
 8005f90:	4659      	mov	r1, fp
 8005f92:	4663      	mov	r3, ip
 8005f94:	4642      	mov	r2, r8
 8005f96:	46ab      	mov	fp, r5
 8005f98:	9c03      	ldr	r4, [sp, #12]
 8005f9a:	9805      	ldr	r0, [sp, #20]
 8005f9c:	465d      	mov	r5, fp
 8005f9e:	181b      	adds	r3, r3, r0
 8005fa0:	614b      	str	r3, [r1, #20]
 8005fa2:	1a28      	subs	r0, r5, r0
 8005fa4:	455c      	cmp	r4, fp
 8005fa6:	d307      	bcc.n	8005fb8 <USB_EPStartXfer+0x394>
 8005fa8:	b2a8      	uxth	r0, r5
 8005faa:	9002      	str	r0, [sp, #8]
 8005fac:	0428      	lsls	r0, r5, #16
 8005fae:	0c00      	lsrs	r0, r0, #16
 8005fb0:	3001      	adds	r0, #1
 8005fb2:	0840      	lsrs	r0, r0, #1
 8005fb4:	4682      	mov	sl, r0
 8005fb6:	2000      	movs	r0, #0
 8005fb8:	6208      	str	r0, [r1, #32]
 8005fba:	2050      	movs	r0, #80	@ 0x50
 8005fbc:	9c01      	ldr	r4, [sp, #4]
 8005fbe:	5a10      	ldrh	r0, [r2, r0]
 8005fc0:	46a4      	mov	ip, r4
 8005fc2:	4448      	add	r0, r9
 8005fc4:	9c02      	ldr	r4, [sp, #8]
 8005fc6:	4460      	add	r0, ip
 8005fc8:	8004      	strh	r4, [r0, #0]
 8005fca:	4650      	mov	r0, sl
 8005fcc:	890e      	ldrh	r6, [r1, #8]
 8005fce:	19f6      	adds	r6, r6, r7
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	d100      	bne.n	8005fd6 <USB_EPStartXfer+0x3b2>
 8005fd4:	e6d2      	b.n	8005d7c <USB_EPStartXfer+0x158>
 8005fd6:	0047      	lsls	r7, r0, #1
 8005fd8:	19df      	adds	r7, r3, r7
 8005fda:	1af6      	subs	r6, r6, r3
 8005fdc:	7858      	ldrb	r0, [r3, #1]
 8005fde:	781d      	ldrb	r5, [r3, #0]
 8005fe0:	0200      	lsls	r0, r0, #8
 8005fe2:	199c      	adds	r4, r3, r6
 8005fe4:	4328      	orrs	r0, r5
 8005fe6:	3302      	adds	r3, #2
 8005fe8:	8020      	strh	r0, [r4, #0]
 8005fea:	42bb      	cmp	r3, r7
 8005fec:	d1f6      	bne.n	8005fdc <USB_EPStartXfer+0x3b8>
 8005fee:	e6c5      	b.n	8005d7c <USB_EPStartXfer+0x158>
 8005ff0:	2450      	movs	r4, #80	@ 0x50
 8005ff2:	5b14      	ldrh	r4, [r2, r4]
 8005ff4:	46a4      	mov	ip, r4
 8005ff6:	4c80      	ldr	r4, [pc, #512]	@ (80061f8 <USB_EPStartXfer+0x5d4>)
 8005ff8:	1914      	adds	r4, r2, r4
 8005ffa:	4464      	add	r4, ip
 8005ffc:	46ac      	mov	ip, r5
 8005ffe:	4464      	add	r4, ip
 8006000:	8026      	strh	r6, [r4, #0]
 8006002:	890d      	ldrh	r5, [r1, #8]
 8006004:	19ef      	adds	r7, r5, r7
 8006006:	2800      	cmp	r0, #0
 8006008:	d100      	bne.n	800600c <USB_EPStartXfer+0x3e8>
 800600a:	e6b7      	b.n	8005d7c <USB_EPStartXfer+0x158>
 800600c:	0044      	lsls	r4, r0, #1
 800600e:	191c      	adds	r4, r3, r4
 8006010:	1aff      	subs	r7, r7, r3
 8006012:	7858      	ldrb	r0, [r3, #1]
 8006014:	781e      	ldrb	r6, [r3, #0]
 8006016:	0200      	lsls	r0, r0, #8
 8006018:	19dd      	adds	r5, r3, r7
 800601a:	4330      	orrs	r0, r6
 800601c:	3302      	adds	r3, #2
 800601e:	8028      	strh	r0, [r5, #0]
 8006020:	42a3      	cmp	r3, r4
 8006022:	d1f6      	bne.n	8006012 <USB_EPStartXfer+0x3ee>
 8006024:	e6aa      	b.n	8005d7c <USB_EPStartXfer+0x158>
 8006026:	4660      	mov	r0, ip
 8006028:	4c77      	ldr	r4, [pc, #476]	@ (8006208 <USB_EPStartXfer+0x5e4>)
 800602a:	8800      	ldrh	r0, [r0, #0]
 800602c:	4020      	ands	r0, r4
 800602e:	4c77      	ldr	r4, [pc, #476]	@ (800620c <USB_EPStartXfer+0x5e8>)
 8006030:	4320      	orrs	r0, r4
 8006032:	4664      	mov	r4, ip
 8006034:	8020      	strh	r0, [r4, #0]
 8006036:	2050      	movs	r0, #80	@ 0x50
 8006038:	9c01      	ldr	r4, [sp, #4]
 800603a:	5a10      	ldrh	r0, [r2, r0]
 800603c:	46a4      	mov	ip, r4
 800603e:	465c      	mov	r4, fp
 8006040:	4448      	add	r0, r9
 8006042:	4460      	add	r0, ip
 8006044:	b2a4      	uxth	r4, r4
 8006046:	8004      	strh	r4, [r0, #0]
 8006048:	4658      	mov	r0, fp
 800604a:	0404      	lsls	r4, r0, #16
 800604c:	0c24      	lsrs	r4, r4, #16
 800604e:	8908      	ldrh	r0, [r1, #8]
 8006050:	3401      	adds	r4, #1
 8006052:	0864      	lsrs	r4, r4, #1
 8006054:	19c7      	adds	r7, r0, r7
 8006056:	2c00      	cmp	r4, #0
 8006058:	d100      	bne.n	800605c <USB_EPStartXfer+0x438>
 800605a:	e68f      	b.n	8005d7c <USB_EPStartXfer+0x158>
 800605c:	0064      	lsls	r4, r4, #1
 800605e:	191c      	adds	r4, r3, r4
 8006060:	1aff      	subs	r7, r7, r3
 8006062:	7858      	ldrb	r0, [r3, #1]
 8006064:	781e      	ldrb	r6, [r3, #0]
 8006066:	0200      	lsls	r0, r0, #8
 8006068:	19dd      	adds	r5, r3, r7
 800606a:	4330      	orrs	r0, r6
 800606c:	3302      	adds	r3, #2
 800606e:	8028      	strh	r0, [r5, #0]
 8006070:	42a3      	cmp	r3, r4
 8006072:	d1f6      	bne.n	8006062 <USB_EPStartXfer+0x43e>
 8006074:	e682      	b.n	8005d7c <USB_EPStartXfer+0x158>
 8006076:	881f      	ldrh	r7, [r3, #0]
 8006078:	4d65      	ldr	r5, [pc, #404]	@ (8006210 <USB_EPStartXfer+0x5ec>)
 800607a:	432f      	orrs	r7, r5
 800607c:	b2bf      	uxth	r7, r7
 800607e:	801f      	strh	r7, [r3, #0]
 8006080:	5b93      	ldrh	r3, [r2, r6]
 8006082:	18c3      	adds	r3, r0, r3
 8006084:	191b      	adds	r3, r3, r4
 8006086:	8818      	ldrh	r0, [r3, #0]
 8006088:	0580      	lsls	r0, r0, #22
 800608a:	0d80      	lsrs	r0, r0, #22
 800608c:	8018      	strh	r0, [r3, #0]
 800608e:	8818      	ldrh	r0, [r3, #0]
 8006090:	4305      	orrs	r5, r0
 8006092:	b2ad      	uxth	r5, r5
 8006094:	801d      	strh	r5, [r3, #0]
 8006096:	e6ec      	b.n	8005e72 <USB_EPStartXfer+0x24e>
 8006098:	881f      	ldrh	r7, [r3, #0]
 800609a:	4d5d      	ldr	r5, [pc, #372]	@ (8006210 <USB_EPStartXfer+0x5ec>)
 800609c:	432f      	orrs	r7, r5
 800609e:	b2bf      	uxth	r7, r7
 80060a0:	801f      	strh	r7, [r3, #0]
 80060a2:	5b93      	ldrh	r3, [r2, r6]
 80060a4:	4443      	add	r3, r8
 80060a6:	191b      	adds	r3, r3, r4
 80060a8:	8818      	ldrh	r0, [r3, #0]
 80060aa:	0580      	lsls	r0, r0, #22
 80060ac:	0d80      	lsrs	r0, r0, #22
 80060ae:	8018      	strh	r0, [r3, #0]
 80060b0:	8818      	ldrh	r0, [r3, #0]
 80060b2:	4305      	orrs	r5, r0
 80060b4:	b2ad      	uxth	r5, r5
 80060b6:	801d      	strh	r5, [r3, #0]
 80060b8:	e5fc      	b.n	8005cb4 <USB_EPStartXfer+0x90>
 80060ba:	2650      	movs	r6, #80	@ 0x50
 80060bc:	9d01      	ldr	r5, [sp, #4]
 80060be:	5b96      	ldrh	r6, [r2, r6]
 80060c0:	46ac      	mov	ip, r5
 80060c2:	444e      	add	r6, r9
 80060c4:	4466      	add	r6, ip
 80060c6:	b285      	uxth	r5, r0
 80060c8:	8035      	strh	r5, [r6, #0]
 80060ca:	890e      	ldrh	r6, [r1, #8]
 80060cc:	4655      	mov	r5, sl
 80060ce:	46b4      	mov	ip, r6
 80060d0:	44bc      	add	ip, r7
 80060d2:	2d00      	cmp	r5, #0
 80060d4:	d022      	beq.n	800611c <USB_EPStartXfer+0x4f8>
 80060d6:	006e      	lsls	r6, r5, #1
 80060d8:	4665      	mov	r5, ip
 80060da:	46b0      	mov	r8, r6
 80060dc:	1aed      	subs	r5, r5, r3
 80060de:	46ac      	mov	ip, r5
 80060e0:	4498      	add	r8, r3
 80060e2:	001e      	movs	r6, r3
 80060e4:	9403      	str	r4, [sp, #12]
 80060e6:	465c      	mov	r4, fp
 80060e8:	468b      	mov	fp, r1
 80060ea:	4641      	mov	r1, r8
 80060ec:	4698      	mov	r8, r3
 80060ee:	4663      	mov	r3, ip
 80060f0:	4691      	mov	r9, r2
 80060f2:	4684      	mov	ip, r0
 80060f4:	0018      	movs	r0, r3
 80060f6:	9d01      	ldr	r5, [sp, #4]
 80060f8:	9405      	str	r4, [sp, #20]
 80060fa:	7874      	ldrb	r4, [r6, #1]
 80060fc:	7832      	ldrb	r2, [r6, #0]
 80060fe:	0224      	lsls	r4, r4, #8
 8006100:	1833      	adds	r3, r6, r0
 8006102:	4314      	orrs	r4, r2
 8006104:	3602      	adds	r6, #2
 8006106:	801c      	strh	r4, [r3, #0]
 8006108:	428e      	cmp	r6, r1
 800610a:	d1f6      	bne.n	80060fa <USB_EPStartXfer+0x4d6>
 800610c:	9501      	str	r5, [sp, #4]
 800610e:	9d05      	ldr	r5, [sp, #20]
 8006110:	4659      	mov	r1, fp
 8006112:	4660      	mov	r0, ip
 8006114:	4643      	mov	r3, r8
 8006116:	464a      	mov	r2, r9
 8006118:	46ab      	mov	fp, r5
 800611a:	9c03      	ldr	r4, [sp, #12]
 800611c:	465d      	mov	r5, fp
 800611e:	181b      	adds	r3, r3, r0
 8006120:	614b      	str	r3, [r1, #20]
 8006122:	1a28      	subs	r0, r5, r0
 8006124:	455c      	cmp	r4, fp
 8006126:	d307      	bcc.n	8006138 <USB_EPStartXfer+0x514>
 8006128:	b2a8      	uxth	r0, r5
 800612a:	9002      	str	r0, [sp, #8]
 800612c:	0428      	lsls	r0, r5, #16
 800612e:	0c00      	lsrs	r0, r0, #16
 8006130:	3001      	adds	r0, #1
 8006132:	0840      	lsrs	r0, r0, #1
 8006134:	4682      	mov	sl, r0
 8006136:	2000      	movs	r0, #0
 8006138:	6208      	str	r0, [r1, #32]
 800613a:	9c04      	ldr	r4, [sp, #16]
 800613c:	2050      	movs	r0, #80	@ 0x50
 800613e:	46a4      	mov	ip, r4
 8006140:	5a10      	ldrh	r0, [r2, r0]
 8006142:	9c01      	ldr	r4, [sp, #4]
 8006144:	4460      	add	r0, ip
 8006146:	46a4      	mov	ip, r4
 8006148:	9c02      	ldr	r4, [sp, #8]
 800614a:	4460      	add	r0, ip
 800614c:	8004      	strh	r4, [r0, #0]
 800614e:	8948      	ldrh	r0, [r1, #10]
 8006150:	19c7      	adds	r7, r0, r7
 8006152:	4650      	mov	r0, sl
 8006154:	2800      	cmp	r0, #0
 8006156:	d100      	bne.n	800615a <USB_EPStartXfer+0x536>
 8006158:	e610      	b.n	8005d7c <USB_EPStartXfer+0x158>
 800615a:	0044      	lsls	r4, r0, #1
 800615c:	191c      	adds	r4, r3, r4
 800615e:	1aff      	subs	r7, r7, r3
 8006160:	7858      	ldrb	r0, [r3, #1]
 8006162:	781e      	ldrb	r6, [r3, #0]
 8006164:	0200      	lsls	r0, r0, #8
 8006166:	19dd      	adds	r5, r3, r7
 8006168:	4330      	orrs	r0, r6
 800616a:	3302      	adds	r3, #2
 800616c:	8028      	strh	r0, [r5, #0]
 800616e:	42a3      	cmp	r3, r4
 8006170:	d1f6      	bne.n	8006160 <USB_EPStartXfer+0x53c>
 8006172:	e603      	b.n	8005d7c <USB_EPStartXfer+0x158>
 8006174:	096f      	lsrs	r7, r5, #5
 8006176:	46bc      	mov	ip, r7
 8006178:	271f      	movs	r7, #31
 800617a:	403d      	ands	r5, r7
 800617c:	426f      	negs	r7, r5
 800617e:	417d      	adcs	r5, r7
 8006180:	4667      	mov	r7, ip
 8006182:	1b7d      	subs	r5, r7, r5
 8006184:	02ad      	lsls	r5, r5, #10
 8006186:	881f      	ldrh	r7, [r3, #0]
 8006188:	b2ad      	uxth	r5, r5
 800618a:	432f      	orrs	r7, r5
 800618c:	46b8      	mov	r8, r7
 800618e:	46a9      	mov	r9, r5
 8006190:	4645      	mov	r5, r8
 8006192:	4f1f      	ldr	r7, [pc, #124]	@ (8006210 <USB_EPStartXfer+0x5ec>)
 8006194:	433d      	orrs	r5, r7
 8006196:	46bc      	mov	ip, r7
 8006198:	b2af      	uxth	r7, r5
 800619a:	464d      	mov	r5, r9
 800619c:	801f      	strh	r7, [r3, #0]
 800619e:	5b93      	ldrh	r3, [r2, r6]
 80061a0:	18c0      	adds	r0, r0, r3
 80061a2:	1900      	adds	r0, r0, r4
 80061a4:	8803      	ldrh	r3, [r0, #0]
 80061a6:	059b      	lsls	r3, r3, #22
 80061a8:	0d9b      	lsrs	r3, r3, #22
 80061aa:	8003      	strh	r3, [r0, #0]
 80061ac:	8803      	ldrh	r3, [r0, #0]
 80061ae:	431d      	orrs	r5, r3
 80061b0:	4663      	mov	r3, ip
 80061b2:	431d      	orrs	r5, r3
 80061b4:	b2ab      	uxth	r3, r5
 80061b6:	8003      	strh	r3, [r0, #0]
 80061b8:	e65b      	b.n	8005e72 <USB_EPStartXfer+0x24e>
 80061ba:	201f      	movs	r0, #31
 80061bc:	096f      	lsrs	r7, r5, #5
 80061be:	4005      	ands	r5, r0
 80061c0:	0028      	movs	r0, r5
 80061c2:	4245      	negs	r5, r0
 80061c4:	4145      	adcs	r5, r0
 80061c6:	4812      	ldr	r0, [pc, #72]	@ (8006210 <USB_EPStartXfer+0x5ec>)
 80061c8:	1b7f      	subs	r7, r7, r5
 80061ca:	4684      	mov	ip, r0
 80061cc:	881d      	ldrh	r5, [r3, #0]
 80061ce:	02bf      	lsls	r7, r7, #10
 80061d0:	b2bf      	uxth	r7, r7
 80061d2:	433d      	orrs	r5, r7
 80061d4:	4305      	orrs	r5, r0
 80061d6:	b2ad      	uxth	r5, r5
 80061d8:	801d      	strh	r5, [r3, #0]
 80061da:	5b93      	ldrh	r3, [r2, r6]
 80061dc:	4443      	add	r3, r8
 80061de:	1918      	adds	r0, r3, r4
 80061e0:	8803      	ldrh	r3, [r0, #0]
 80061e2:	059b      	lsls	r3, r3, #22
 80061e4:	0d9b      	lsrs	r3, r3, #22
 80061e6:	8003      	strh	r3, [r0, #0]
 80061e8:	8803      	ldrh	r3, [r0, #0]
 80061ea:	431f      	orrs	r7, r3
 80061ec:	4663      	mov	r3, ip
 80061ee:	431f      	orrs	r7, r3
 80061f0:	b2bb      	uxth	r3, r7
 80061f2:	8003      	strh	r3, [r0, #0]
 80061f4:	e55e      	b.n	8005cb4 <USB_EPStartXfer+0x90>
 80061f6:	46c0      	nop			@ (mov r8, r8)
 80061f8:	00000402 	.word	0x00000402
 80061fc:	ffff8f8f 	.word	0xffff8f8f
 8006200:	00008180 	.word	0x00008180
 8006204:	00000406 	.word	0x00000406
 8006208:	ffff8e8f 	.word	0xffff8e8f
 800620c:	00008080 	.word	0x00008080
 8006210:	ffff8000 	.word	0xffff8000

08006214 <USB_EPSetStall>:
 8006214:	780b      	ldrb	r3, [r1, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	18c0      	adds	r0, r0, r3
 800621a:	784b      	ldrb	r3, [r1, #1]
 800621c:	8802      	ldrh	r2, [r0, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <USB_EPSetStall+0x22>
 8006222:	4b09      	ldr	r3, [pc, #36]	@ (8006248 <USB_EPSetStall+0x34>)
 8006224:	401a      	ands	r2, r3
 8006226:	2310      	movs	r3, #16
 8006228:	405a      	eors	r2, r3
 800622a:	4b08      	ldr	r3, [pc, #32]	@ (800624c <USB_EPSetStall+0x38>)
 800622c:	4313      	orrs	r3, r2
 800622e:	b29b      	uxth	r3, r3
 8006230:	8003      	strh	r3, [r0, #0]
 8006232:	2000      	movs	r0, #0
 8006234:	4770      	bx	lr
 8006236:	4b06      	ldr	r3, [pc, #24]	@ (8006250 <USB_EPSetStall+0x3c>)
 8006238:	401a      	ands	r2, r3
 800623a:	2380      	movs	r3, #128	@ 0x80
 800623c:	015b      	lsls	r3, r3, #5
 800623e:	4053      	eors	r3, r2
 8006240:	4a04      	ldr	r2, [pc, #16]	@ (8006254 <USB_EPSetStall+0x40>)
 8006242:	4313      	orrs	r3, r2
 8006244:	8003      	strh	r3, [r0, #0]
 8006246:	e7f4      	b.n	8006232 <USB_EPSetStall+0x1e>
 8006248:	ffff8fbf 	.word	0xffff8fbf
 800624c:	ffff8080 	.word	0xffff8080
 8006250:	ffffbf8f 	.word	0xffffbf8f
 8006254:	00008080 	.word	0x00008080

08006258 <USB_EPClearStall>:
 8006258:	7b0b      	ldrb	r3, [r1, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d11a      	bne.n	8006294 <USB_EPClearStall+0x3c>
 800625e:	780b      	ldrb	r3, [r1, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	18c0      	adds	r0, r0, r3
 8006264:	784b      	ldrb	r3, [r1, #1]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d016      	beq.n	8006298 <USB_EPClearStall+0x40>
 800626a:	8803      	ldrh	r3, [r0, #0]
 800626c:	065b      	lsls	r3, r3, #25
 800626e:	d505      	bpl.n	800627c <USB_EPClearStall+0x24>
 8006270:	8803      	ldrh	r3, [r0, #0]
 8006272:	4a13      	ldr	r2, [pc, #76]	@ (80062c0 <USB_EPClearStall+0x68>)
 8006274:	4013      	ands	r3, r2
 8006276:	4a13      	ldr	r2, [pc, #76]	@ (80062c4 <USB_EPClearStall+0x6c>)
 8006278:	4313      	orrs	r3, r2
 800627a:	8003      	strh	r3, [r0, #0]
 800627c:	78cb      	ldrb	r3, [r1, #3]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d008      	beq.n	8006294 <USB_EPClearStall+0x3c>
 8006282:	8802      	ldrh	r2, [r0, #0]
 8006284:	4b10      	ldr	r3, [pc, #64]	@ (80062c8 <USB_EPClearStall+0x70>)
 8006286:	401a      	ands	r2, r3
 8006288:	2320      	movs	r3, #32
 800628a:	405a      	eors	r2, r3
 800628c:	4b0f      	ldr	r3, [pc, #60]	@ (80062cc <USB_EPClearStall+0x74>)
 800628e:	4313      	orrs	r3, r2
 8006290:	b29b      	uxth	r3, r3
 8006292:	8003      	strh	r3, [r0, #0]
 8006294:	2000      	movs	r0, #0
 8006296:	4770      	bx	lr
 8006298:	8803      	ldrh	r3, [r0, #0]
 800629a:	045b      	lsls	r3, r3, #17
 800629c:	d505      	bpl.n	80062aa <USB_EPClearStall+0x52>
 800629e:	8803      	ldrh	r3, [r0, #0]
 80062a0:	4a07      	ldr	r2, [pc, #28]	@ (80062c0 <USB_EPClearStall+0x68>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	4a0a      	ldr	r2, [pc, #40]	@ (80062d0 <USB_EPClearStall+0x78>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	8003      	strh	r3, [r0, #0]
 80062aa:	8802      	ldrh	r2, [r0, #0]
 80062ac:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <USB_EPClearStall+0x7c>)
 80062ae:	401a      	ands	r2, r3
 80062b0:	23c0      	movs	r3, #192	@ 0xc0
 80062b2:	019b      	lsls	r3, r3, #6
 80062b4:	4053      	eors	r3, r2
 80062b6:	4a08      	ldr	r2, [pc, #32]	@ (80062d8 <USB_EPClearStall+0x80>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	8003      	strh	r3, [r0, #0]
 80062bc:	e7ea      	b.n	8006294 <USB_EPClearStall+0x3c>
 80062be:	46c0      	nop			@ (mov r8, r8)
 80062c0:	ffff8f8f 	.word	0xffff8f8f
 80062c4:	000080c0 	.word	0x000080c0
 80062c8:	ffff8fbf 	.word	0xffff8fbf
 80062cc:	ffff8080 	.word	0xffff8080
 80062d0:	0000c080 	.word	0x0000c080
 80062d4:	ffffbf8f 	.word	0xffffbf8f
 80062d8:	00008080 	.word	0x00008080

080062dc <USB_SetDevAddress>:
 80062dc:	2900      	cmp	r1, #0
 80062de:	d102      	bne.n	80062e6 <USB_SetDevAddress+0xa>
 80062e0:	234c      	movs	r3, #76	@ 0x4c
 80062e2:	2280      	movs	r2, #128	@ 0x80
 80062e4:	52c2      	strh	r2, [r0, r3]
 80062e6:	2000      	movs	r0, #0
 80062e8:	4770      	bx	lr
 80062ea:	46c0      	nop			@ (mov r8, r8)

080062ec <USB_DevConnect>:
 80062ec:	2258      	movs	r2, #88	@ 0x58
 80062ee:	2180      	movs	r1, #128	@ 0x80
 80062f0:	5a83      	ldrh	r3, [r0, r2]
 80062f2:	0209      	lsls	r1, r1, #8
 80062f4:	430b      	orrs	r3, r1
 80062f6:	5283      	strh	r3, [r0, r2]
 80062f8:	2000      	movs	r0, #0
 80062fa:	4770      	bx	lr

080062fc <USB_ReadInterrupts>:
 80062fc:	2344      	movs	r3, #68	@ 0x44
 80062fe:	5ac0      	ldrh	r0, [r0, r3]
 8006300:	b280      	uxth	r0, r0
 8006302:	4770      	bx	lr

08006304 <USB_WritePMA>:
 8006304:	b530      	push	{r4, r5, lr}
 8006306:	2480      	movs	r4, #128	@ 0x80
 8006308:	00e4      	lsls	r4, r4, #3
 800630a:	46a4      	mov	ip, r4
 800630c:	3301      	adds	r3, #1
 800630e:	4462      	add	r2, ip
 8006310:	085b      	lsrs	r3, r3, #1
 8006312:	1880      	adds	r0, r0, r2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <USB_WritePMA+0x2c>
 8006318:	005a      	lsls	r2, r3, #1
 800631a:	188a      	adds	r2, r1, r2
 800631c:	1a45      	subs	r5, r0, r1
 800631e:	784b      	ldrb	r3, [r1, #1]
 8006320:	780c      	ldrb	r4, [r1, #0]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	1948      	adds	r0, r1, r5
 8006326:	4323      	orrs	r3, r4
 8006328:	3102      	adds	r1, #2
 800632a:	8003      	strh	r3, [r0, #0]
 800632c:	428a      	cmp	r2, r1
 800632e:	d1f6      	bne.n	800631e <USB_WritePMA+0x1a>
 8006330:	bd30      	pop	{r4, r5, pc}
 8006332:	46c0      	nop			@ (mov r8, r8)

08006334 <USB_ReadPMA>:
 8006334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006336:	2480      	movs	r4, #128	@ 0x80
 8006338:	00e4      	lsls	r4, r4, #3
 800633a:	46a4      	mov	ip, r4
 800633c:	4462      	add	r2, ip
 800633e:	1880      	adds	r0, r0, r2
 8006340:	0002      	movs	r2, r0
 8006342:	085f      	lsrs	r7, r3, #1
 8006344:	d00f      	beq.n	8006366 <USB_ReadPMA+0x32>
 8006346:	000c      	movs	r4, r1
 8006348:	003d      	movs	r5, r7
 800634a:	1a46      	subs	r6, r0, r1
 800634c:	19a2      	adds	r2, r4, r6
 800634e:	8812      	ldrh	r2, [r2, #0]
 8006350:	3d01      	subs	r5, #1
 8006352:	b292      	uxth	r2, r2
 8006354:	7022      	strb	r2, [r4, #0]
 8006356:	0a12      	lsrs	r2, r2, #8
 8006358:	7062      	strb	r2, [r4, #1]
 800635a:	3402      	adds	r4, #2
 800635c:	2d00      	cmp	r5, #0
 800635e:	d1f5      	bne.n	800634c <USB_ReadPMA+0x18>
 8006360:	007f      	lsls	r7, r7, #1
 8006362:	19c2      	adds	r2, r0, r7
 8006364:	19c9      	adds	r1, r1, r7
 8006366:	07db      	lsls	r3, r3, #31
 8006368:	d501      	bpl.n	800636e <USB_ReadPMA+0x3a>
 800636a:	8813      	ldrh	r3, [r2, #0]
 800636c:	700b      	strb	r3, [r1, #0]
 800636e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006370 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006370:	23af      	movs	r3, #175	@ 0xaf
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	58c3      	ldr	r3, [r0, r3]
{
 8006376:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00e      	beq.n	800639a <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800637c:	22ae      	movs	r2, #174	@ 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800637e:	2580      	movs	r5, #128	@ 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006380:	0092      	lsls	r2, r2, #2
 8006382:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006384:	00ad      	lsls	r5, r5, #2
 8006386:	5d60      	ldrb	r0, [r4, r5]
 8006388:	28ff      	cmp	r0, #255	@ 0xff
 800638a:	d006      	beq.n	800639a <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800638c:	4a04      	ldr	r2, [pc, #16]	@ (80063a0 <USBD_CDC_EP0_RxReady+0x30>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	0021      	movs	r1, r4
 8006392:	5ca2      	ldrb	r2, [r4, r2]
 8006394:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006396:	23ff      	movs	r3, #255	@ 0xff
 8006398:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 800639a:	2000      	movs	r0, #0
 800639c:	bd70      	pop	{r4, r5, r6, pc}
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	00000201 	.word	0x00000201

080063a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80063a4:	2343      	movs	r3, #67	@ 0x43
 80063a6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
 80063a8:	4800      	ldr	r0, [pc, #0]	@ (80063ac <USBD_CDC_GetFSCfgDesc+0x8>)
}
 80063aa:	4770      	bx	lr
 80063ac:	20000064 	.word	0x20000064

080063b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80063b0:	2343      	movs	r3, #67	@ 0x43
 80063b2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
 80063b4:	4800      	ldr	r0, [pc, #0]	@ (80063b8 <USBD_CDC_GetHSCfgDesc+0x8>)
}
 80063b6:	4770      	bx	lr
 80063b8:	200000a8 	.word	0x200000a8

080063bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80063bc:	2343      	movs	r3, #67	@ 0x43
 80063be:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80063c0:	4800      	ldr	r0, [pc, #0]	@ (80063c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
}
 80063c2:	4770      	bx	lr
 80063c4:	20000020 	.word	0x20000020

080063c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80063c8:	230a      	movs	r3, #10
 80063ca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80063cc:	4800      	ldr	r0, [pc, #0]	@ (80063d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 80063ce:	4770      	bx	lr
 80063d0:	20000124 	.word	0x20000124

080063d4 <USBD_CDC_DataOut>:
{
 80063d4:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063d6:	26ae      	movs	r6, #174	@ 0xae
 80063d8:	00b6      	lsls	r6, r6, #2
{
 80063da:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063dc:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063de:	f001 f8a9 	bl	8007534 <USBD_LL_GetRxDataSize>
 80063e2:	2383      	movs	r3, #131	@ 0x83
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 80063e8:	59a3      	ldr	r3, [r4, r6]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <USBD_CDC_DataOut+0x30>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063ee:	2383      	movs	r3, #131	@ 0x83
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	18e9      	adds	r1, r5, r3
 80063f4:	3b08      	subs	r3, #8
 80063f6:	58e8      	ldr	r0, [r5, r3]
 80063f8:	33b8      	adds	r3, #184	@ 0xb8
 80063fa:	58e3      	ldr	r3, [r4, r3]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	4798      	blx	r3
    return USBD_OK;
 8006400:	2000      	movs	r0, #0
}
 8006402:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8006404:	2002      	movs	r0, #2
 8006406:	e7fc      	b.n	8006402 <USBD_CDC_DataOut+0x2e>

08006408 <USBD_CDC_DataIn>:
{
 8006408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800640a:	23ae      	movs	r3, #174	@ 0xae
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	58c7      	ldr	r7, [r0, r3]
{
 8006410:	0004      	movs	r4, r0
 8006412:	000d      	movs	r5, r1
  if (pdev->pClassData != NULL)
 8006414:	2f00      	cmp	r7, #0
 8006416:	d01d      	beq.n	8006454 <USBD_CDC_DataIn+0x4c>
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006418:	3308      	adds	r3, #8
 800641a:	58c2      	ldr	r2, [r0, r3]
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800641c:	008b      	lsls	r3, r1, #2
 800641e:	185b      	adds	r3, r3, r1
 8006420:	009e      	lsls	r6, r3, #2
 8006422:	1986      	adds	r6, r0, r6
 8006424:	69f0      	ldr	r0, [r6, #28]
 8006426:	2800      	cmp	r0, #0
 8006428:	d006      	beq.n	8006438 <USBD_CDC_DataIn+0x30>
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	18d2      	adds	r2, r2, r3
 800642e:	6a11      	ldr	r1, [r2, #32]
 8006430:	f7f9 ff02 	bl	8000238 <__aeabi_uidivmod>
 8006434:	2900      	cmp	r1, #0
 8006436:	d005      	beq.n	8006444 <USBD_CDC_DataIn+0x3c>
      hcdc->TxState = 0U;
 8006438:	2385      	movs	r3, #133	@ 0x85
 800643a:	2200      	movs	r2, #0
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	50fa      	str	r2, [r7, r3]
    return USBD_OK;
 8006440:	2000      	movs	r0, #0
}
 8006442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      pdev->ep_in[epnum].total_length = 0U;
 8006444:	61f1      	str	r1, [r6, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006446:	2300      	movs	r3, #0
 8006448:	2200      	movs	r2, #0
 800644a:	0029      	movs	r1, r5
 800644c:	0020      	movs	r0, r4
 800644e:	f001 f855 	bl	80074fc <USBD_LL_Transmit>
 8006452:	e7f5      	b.n	8006440 <USBD_CDC_DataIn+0x38>
    return USBD_FAIL;
 8006454:	2002      	movs	r0, #2
 8006456:	e7f4      	b.n	8006442 <USBD_CDC_DataIn+0x3a>

08006458 <USBD_CDC_Setup>:
{
 8006458:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800645a:	23ae      	movs	r3, #174	@ 0xae
{
 800645c:	b083      	sub	sp, #12
  uint16_t status_info = 0U;
 800645e:	466a      	mov	r2, sp
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	58c6      	ldr	r6, [r0, r3]
  uint8_t ifalt = 0U;
 8006464:	466b      	mov	r3, sp
{
 8006466:	0005      	movs	r5, r0
  uint16_t status_info = 0U;
 8006468:	1d90      	adds	r0, r2, #6
 800646a:	2260      	movs	r2, #96	@ 0x60
{
 800646c:	000c      	movs	r4, r1
  uint8_t ifalt = 0U;
 800646e:	1d59      	adds	r1, r3, #5
 8006470:	2300      	movs	r3, #0
 8006472:	0017      	movs	r7, r2
 8006474:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 8006476:	8003      	strh	r3, [r0, #0]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006478:	7823      	ldrb	r3, [r4, #0]
 800647a:	401f      	ands	r7, r3
 800647c:	421a      	tst	r2, r3
 800647e:	d015      	beq.n	80064ac <USBD_CDC_Setup+0x54>
 8006480:	2f20      	cmp	r7, #32
 8006482:	d11a      	bne.n	80064ba <USBD_CDC_Setup+0x62>
      if (req->wLength)
 8006484:	88e2      	ldrh	r2, [r4, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006486:	7860      	ldrb	r0, [r4, #1]
      if (req->wLength)
 8006488:	2a00      	cmp	r2, #0
 800648a:	d01d      	beq.n	80064c8 <USBD_CDC_Setup+0x70>
        if (req->bmRequest & 0x80U)
 800648c:	b25b      	sxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	da41      	bge.n	8006516 <USBD_CDC_Setup+0xbe>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006492:	23af      	movs	r3, #175	@ 0xaf
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	58eb      	ldr	r3, [r5, r3]
 8006498:	0031      	movs	r1, r6
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800649e:	0031      	movs	r1, r6
 80064a0:	0028      	movs	r0, r5
 80064a2:	88e2      	ldrh	r2, [r4, #6]
 80064a4:	f000 fd26 	bl	8006ef4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80064a8:	2000      	movs	r0, #0
 80064aa:	e00b      	b.n	80064c4 <USBD_CDC_Setup+0x6c>
      switch (req->bRequest)
 80064ac:	7863      	ldrb	r3, [r4, #1]
 80064ae:	2b0a      	cmp	r3, #10
 80064b0:	d026      	beq.n	8006500 <USBD_CDC_Setup+0xa8>
 80064b2:	2b0b      	cmp	r3, #11
 80064b4:	d01d      	beq.n	80064f2 <USBD_CDC_Setup+0x9a>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00f      	beq.n	80064da <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 80064ba:	0028      	movs	r0, r5
 80064bc:	0021      	movs	r1, r4
 80064be:	f000 fce7 	bl	8006e90 <USBD_CtlError>
            ret = USBD_FAIL;
 80064c2:	2002      	movs	r0, #2
}
 80064c4:	b003      	add	sp, #12
 80064c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064c8:	23af      	movs	r3, #175	@ 0xaf
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	58eb      	ldr	r3, [r5, r3]
 80064ce:	2200      	movs	r2, #0
 80064d0:	0021      	movs	r1, r4
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 80064d6:	2000      	movs	r0, #0
 80064d8:	e7f4      	b.n	80064c4 <USBD_CDC_Setup+0x6c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064da:	23a7      	movs	r3, #167	@ 0xa7
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	5ceb      	ldrb	r3, [r5, r3]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d1ea      	bne.n	80064ba <USBD_CDC_Setup+0x62>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064e4:	0001      	movs	r1, r0
 80064e6:	2202      	movs	r2, #2
 80064e8:	0028      	movs	r0, r5
 80064ea:	f000 fd03 	bl	8006ef4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80064ee:	2000      	movs	r0, #0
 80064f0:	e7e8      	b.n	80064c4 <USBD_CDC_Setup+0x6c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064f2:	23a7      	movs	r3, #167	@ 0xa7
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	5ceb      	ldrb	r3, [r5, r3]
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d1de      	bne.n	80064ba <USBD_CDC_Setup+0x62>
  uint8_t ret = USBD_OK;
 80064fc:	2000      	movs	r0, #0
 80064fe:	e7e1      	b.n	80064c4 <USBD_CDC_Setup+0x6c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006500:	23a7      	movs	r3, #167	@ 0xa7
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	5ceb      	ldrb	r3, [r5, r3]
 8006506:	2b03      	cmp	r3, #3
 8006508:	d1d7      	bne.n	80064ba <USBD_CDC_Setup+0x62>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800650a:	2201      	movs	r2, #1
 800650c:	0028      	movs	r0, r5
 800650e:	f000 fcf1 	bl	8006ef4 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8006512:	2000      	movs	r0, #0
 8006514:	e7d6      	b.n	80064c4 <USBD_CDC_Setup+0x6c>
          hcdc->CmdOpCode = req->bRequest;
 8006516:	2380      	movs	r3, #128	@ 0x80
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	54f0      	strb	r0, [r6, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800651c:	4b03      	ldr	r3, [pc, #12]	@ (800652c <USBD_CDC_Setup+0xd4>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800651e:	0031      	movs	r1, r6
 8006520:	0028      	movs	r0, r5
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006522:	54f2      	strb	r2, [r6, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006524:	f000 fcfc 	bl	8006f20 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8006528:	2000      	movs	r0, #0
 800652a:	e7cb      	b.n	80064c4 <USBD_CDC_Setup+0x6c>
 800652c:	00000201 	.word	0x00000201

08006530 <USBD_CDC_DeInit>:
{
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006534:	2600      	movs	r6, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006536:	2181      	movs	r1, #129	@ 0x81
 8006538:	f000 ff92 	bl	8007460 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800653c:	2101      	movs	r1, #1
 800653e:	0020      	movs	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006540:	62e6      	str	r6, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006542:	f000 ff8d 	bl	8007460 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006546:	23b6      	movs	r3, #182	@ 0xb6
  if (pdev->pClassData != NULL)
 8006548:	25ae      	movs	r5, #174	@ 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	50e6      	str	r6, [r4, r3]
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800654e:	2182      	movs	r1, #130	@ 0x82
 8006550:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 8006552:	00ad      	lsls	r5, r5, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006554:	f000 ff84 	bl	8007460 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8006558:	5963      	ldr	r3, [r4, r5]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800655a:	6426      	str	r6, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 800655c:	2b00      	cmp	r3, #0
 800655e:	d008      	beq.n	8006572 <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006560:	23af      	movs	r3, #175	@ 0xaf
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	58e3      	ldr	r3, [r4, r3]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800656a:	5960      	ldr	r0, [r4, r5]
 800656c:	f000 ffee 	bl	800754c <USBD_static_free>
    pdev->pClassData = NULL;
 8006570:	5166      	str	r6, [r4, r5]
}
 8006572:	2000      	movs	r0, #0
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	46c0      	nop			@ (mov r8, r8)

08006578 <USBD_CDC_Init>:
{
 8006578:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800657a:	7c03      	ldrb	r3, [r0, #16]
{
 800657c:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800657e:	2b00      	cmp	r3, #0
 8006580:	d13a      	bne.n	80065f8 <USBD_CDC_Init+0x80>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006582:	2380      	movs	r3, #128	@ 0x80
 8006584:	2202      	movs	r2, #2
 8006586:	2181      	movs	r1, #129	@ 0x81
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	f000 ff59 	bl	8007440 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800658e:	2301      	movs	r3, #1
 8006590:	62e3      	str	r3, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006592:	2380      	movs	r3, #128	@ 0x80
 8006594:	2202      	movs	r2, #2
 8006596:	2101      	movs	r1, #1
 8006598:	0020      	movs	r0, r4
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	f000 ff50 	bl	8007440 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065a0:	23b6      	movs	r3, #182	@ 0xb6
 80065a2:	2501      	movs	r5, #1
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	50e5      	str	r5, [r4, r3]
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065a8:	3b65      	subs	r3, #101	@ 0x65
 80065aa:	3bff      	subs	r3, #255	@ 0xff
 80065ac:	2203      	movs	r2, #3
 80065ae:	2182      	movs	r1, #130	@ 0x82
 80065b0:	0020      	movs	r0, r4
 80065b2:	f000 ff45 	bl	8007440 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065b6:	2087      	movs	r0, #135	@ 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065b8:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065ba:	0080      	lsls	r0, r0, #2
 80065bc:	f000 ffc2 	bl	8007544 <USBD_static_malloc>
 80065c0:	23ae      	movs	r3, #174	@ 0xae
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	1e05      	subs	r5, r0, #0
 80065c6:	50e0      	str	r0, [r4, r3]
  if (pdev->pClassData == NULL)
 80065c8:	d02e      	beq.n	8006628 <USBD_CDC_Init+0xb0>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065ca:	3304      	adds	r3, #4
 80065cc:	58e3      	ldr	r3, [r4, r3]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4798      	blx	r3
    hcdc->TxState = 0U;
 80065d2:	2285      	movs	r2, #133	@ 0x85
 80065d4:	2300      	movs	r3, #0
 80065d6:	0092      	lsls	r2, r2, #2
 80065d8:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 80065da:	3204      	adds	r2, #4
 80065dc:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065de:	7c23      	ldrb	r3, [r4, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d117      	bne.n	8006614 <USBD_CDC_Init+0x9c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065e4:	2381      	movs	r3, #129	@ 0x81
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	58ea      	ldr	r2, [r5, r3]
 80065ea:	2101      	movs	r1, #1
 80065ec:	0020      	movs	r0, r4
 80065ee:	3b04      	subs	r3, #4
 80065f0:	f000 ff92 	bl	8007518 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80065f4:	2000      	movs	r0, #0
}
 80065f6:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065f8:	2340      	movs	r3, #64	@ 0x40
 80065fa:	2202      	movs	r2, #2
 80065fc:	2181      	movs	r1, #129	@ 0x81
 80065fe:	f000 ff1f 	bl	8007440 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006602:	2301      	movs	r3, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006604:	2202      	movs	r2, #2
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006606:	62e3      	str	r3, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006608:	2101      	movs	r1, #1
 800660a:	0020      	movs	r0, r4
 800660c:	333f      	adds	r3, #63	@ 0x3f
 800660e:	f000 ff17 	bl	8007440 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006612:	e7c5      	b.n	80065a0 <USBD_CDC_Init+0x28>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006614:	2381      	movs	r3, #129	@ 0x81
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	58ea      	ldr	r2, [r5, r3]
 800661a:	3bc5      	subs	r3, #197	@ 0xc5
 800661c:	2101      	movs	r1, #1
 800661e:	0020      	movs	r0, r4
 8006620:	3bff      	subs	r3, #255	@ 0xff
 8006622:	f000 ff79 	bl	8007518 <USBD_LL_PrepareReceive>
 8006626:	e7e5      	b.n	80065f4 <USBD_CDC_Init+0x7c>
    ret = 1U;
 8006628:	2001      	movs	r0, #1
 800662a:	e7e4      	b.n	80065f6 <USBD_CDC_Init+0x7e>

0800662c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800662c:	2900      	cmp	r1, #0
 800662e:	d004      	beq.n	800663a <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData = fops;
 8006630:	23af      	movs	r3, #175	@ 0xaf
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;
 8006636:	2000      	movs	r0, #0
  }

  return ret;
}
 8006638:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800663a:	2002      	movs	r0, #2
 800663c:	e7fc      	b.n	8006638 <USBD_CDC_RegisterInterface+0xc>
 800663e:	46c0      	nop			@ (mov r8, r8)

08006640 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006640:	23ae      	movs	r3, #174	@ 0xae
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8006646:	2082      	movs	r0, #130	@ 0x82
 8006648:	0080      	lsls	r0, r0, #2
 800664a:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 800664c:	2184      	movs	r1, #132	@ 0x84
 800664e:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 8006650:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 8006652:	505a      	str	r2, [r3, r1]
}
 8006654:	4770      	bx	lr
 8006656:	46c0      	nop			@ (mov r8, r8)

08006658 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8006658:	23ae      	movs	r3, #174	@ 0xae
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	58c2      	ldr	r2, [r0, r3]
 800665e:	3bb4      	subs	r3, #180	@ 0xb4

  return USBD_OK;
}
 8006660:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8006662:	50d1      	str	r1, [r2, r3]
}
 8006664:	4770      	bx	lr
 8006666:	46c0      	nop			@ (mov r8, r8)

08006668 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006668:	23ae      	movs	r3, #174	@ 0xae
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	58c2      	ldr	r2, [r0, r3]
{
 800666e:	b510      	push	{r4, lr}
 8006670:	0004      	movs	r4, r0

  if (pdev->pClassData != NULL)
 8006672:	2a00      	cmp	r2, #0
 8006674:	d014      	beq.n	80066a0 <USBD_CDC_TransmitPacket+0x38>
  {
    if (hcdc->TxState == 0U)
 8006676:	3ba4      	subs	r3, #164	@ 0xa4
 8006678:	58d1      	ldr	r1, [r2, r3]

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800667a:	2001      	movs	r0, #1
    if (hcdc->TxState == 0U)
 800667c:	2900      	cmp	r1, #0
 800667e:	d000      	beq.n	8006682 <USBD_CDC_TransmitPacket+0x1a>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8006680:	bd10      	pop	{r4, pc}
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006682:	2182      	movs	r1, #130	@ 0x82
      hcdc->TxState = 1U;
 8006684:	50d0      	str	r0, [r2, r3]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006686:	3b04      	subs	r3, #4
 8006688:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800668a:	0089      	lsls	r1, r1, #2
 800668c:	5852      	ldr	r2, [r2, r1]
 800668e:	3988      	subs	r1, #136	@ 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006690:	6323      	str	r3, [r4, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006692:	0020      	movs	r0, r4
 8006694:	b29b      	uxth	r3, r3
 8006696:	39ff      	subs	r1, #255	@ 0xff
 8006698:	f000 ff30 	bl	80074fc <USBD_LL_Transmit>
      return USBD_OK;
 800669c:	2000      	movs	r0, #0
 800669e:	e7ef      	b.n	8006680 <USBD_CDC_TransmitPacket+0x18>
    return USBD_FAIL;
 80066a0:	2002      	movs	r0, #2
 80066a2:	e7ed      	b.n	8006680 <USBD_CDC_TransmitPacket+0x18>

080066a4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066a4:	23ae      	movs	r3, #174	@ 0xae
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	58c3      	ldr	r3, [r0, r3]
{
 80066aa:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d011      	beq.n	80066d4 <USBD_CDC_ReceivePacket+0x30>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80066b0:	2281      	movs	r2, #129	@ 0x81
 80066b2:	0092      	lsls	r2, r2, #2
 80066b4:	589a      	ldr	r2, [r3, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066b6:	7c03      	ldrb	r3, [r0, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d106      	bne.n	80066ca <USBD_CDC_ReceivePacket+0x26>
      USBD_LL_PrepareReceive(pdev,
 80066bc:	2380      	movs	r3, #128	@ 0x80
 80066be:	2101      	movs	r1, #1
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	f000 ff29 	bl	8007518 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80066c6:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80066c8:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80066ca:	2340      	movs	r3, #64	@ 0x40
 80066cc:	2101      	movs	r1, #1
 80066ce:	f000 ff23 	bl	8007518 <USBD_LL_PrepareReceive>
 80066d2:	e7f8      	b.n	80066c6 <USBD_CDC_ReceivePacket+0x22>
    return USBD_FAIL;
 80066d4:	2002      	movs	r0, #2
 80066d6:	e7f7      	b.n	80066c8 <USBD_CDC_ReceivePacket+0x24>

080066d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066d8:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066da:	2800      	cmp	r0, #0
 80066dc:	d014      	beq.n	8006708 <USBD_Init+0x30>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80066de:	23ad      	movs	r3, #173	@ 0xad
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	58c4      	ldr	r4, [r0, r3]
 80066e4:	2c00      	cmp	r4, #0
 80066e6:	d001      	beq.n	80066ec <USBD_Init+0x14>
  {
    pdev->pClass = NULL;
 80066e8:	2400      	movs	r4, #0
 80066ea:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066ec:	2900      	cmp	r1, #0
 80066ee:	d002      	beq.n	80066f6 <USBD_Init+0x1e>
  {
    pdev->pDesc = pdesc;
 80066f0:	23ac      	movs	r3, #172	@ 0xac
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066f6:	23a7      	movs	r3, #167	@ 0xa7
 80066f8:	2101      	movs	r1, #1
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 80066fe:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006700:	f000 fe4e 	bl	80073a0 <USBD_LL_Init>

  return USBD_OK;
 8006704:	2000      	movs	r0, #0
}
 8006706:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 8006708:	2002      	movs	r0, #2
 800670a:	e7fc      	b.n	8006706 <USBD_Init+0x2e>

0800670c <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800670c:	2900      	cmp	r1, #0
 800670e:	d004      	beq.n	800671a <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006710:	23ad      	movs	r3, #173	@ 0xad
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8006716:	2000      	movs	r0, #0
#endif
    status = USBD_FAIL;
  }

  return status;
}
 8006718:	4770      	bx	lr
    status = USBD_FAIL;
 800671a:	2002      	movs	r0, #2
 800671c:	e7fc      	b.n	8006718 <USBD_RegisterClass+0xc>
 800671e:	46c0      	nop			@ (mov r8, r8)

08006720 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006720:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006722:	f000 fe7f 	bl	8007424 <USBD_LL_Start>

  return USBD_OK;
}
 8006726:	2000      	movs	r0, #0
 8006728:	bd10      	pop	{r4, pc}
 800672a:	46c0      	nop			@ (mov r8, r8)

0800672c <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800672c:	23ad      	movs	r3, #173	@ 0xad
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	58c3      	ldr	r3, [r0, r3]
{
 8006732:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4798      	blx	r3
 800673c:	1e43      	subs	r3, r0, #1
 800673e:	4198      	sbcs	r0, r3
 8006740:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8006742:	bd10      	pop	{r4, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006744:	2002      	movs	r0, #2
 8006746:	e7fc      	b.n	8006742 <USBD_SetClassConfig+0x16>

08006748 <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006748:	23ad      	movs	r3, #173	@ 0xad
{
 800674a:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	58c3      	ldr	r3, [r0, r3]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	4798      	blx	r3

  return USBD_OK;
}
 8006754:	2000      	movs	r0, #0
 8006756:	bd10      	pop	{r4, pc}

08006758 <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006758:	23aa      	movs	r3, #170	@ 0xaa
 800675a:	009b      	lsls	r3, r3, #2
{
 800675c:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800675e:	18c5      	adds	r5, r0, r3
{
 8006760:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006762:	0028      	movs	r0, r5
 8006764:	f000 fb80 	bl	8006e68 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006768:	23a5      	movs	r3, #165	@ 0xa5
 800676a:	2201      	movs	r2, #1
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006770:	4b11      	ldr	r3, [pc, #68]	@ (80067b8 <USBD_LL_SetupStage+0x60>)
 8006772:	5ae2      	ldrh	r2, [r4, r3]
 8006774:	3b16      	subs	r3, #22
 8006776:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006778:	3310      	adds	r3, #16
 800677a:	5ce1      	ldrb	r1, [r4, r3]
 800677c:	231f      	movs	r3, #31
 800677e:	400b      	ands	r3, r1
 8006780:	2b01      	cmp	r3, #1
 8006782:	d00a      	beq.n	800679a <USBD_LL_SetupStage+0x42>
 8006784:	2b02      	cmp	r3, #2
 8006786:	d012      	beq.n	80067ae <USBD_LL_SetupStage+0x56>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <USBD_LL_SetupStage+0x4c>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800678c:	237f      	movs	r3, #127	@ 0x7f
 800678e:	0020      	movs	r0, r4
 8006790:	4399      	bics	r1, r3
 8006792:	f000 fe73 	bl	800747c <USBD_LL_StallEP>
      break;
  }

  return USBD_OK;
}
 8006796:	2000      	movs	r0, #0
 8006798:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800679a:	0029      	movs	r1, r5
 800679c:	0020      	movs	r0, r4
 800679e:	f000 fa8f 	bl	8006cc0 <USBD_StdItfReq>
      break;
 80067a2:	e7f8      	b.n	8006796 <USBD_LL_SetupStage+0x3e>
      USBD_StdDevReq(pdev, &pdev->request);
 80067a4:	0029      	movs	r1, r5
 80067a6:	0020      	movs	r0, r4
 80067a8:	f000 f916 	bl	80069d8 <USBD_StdDevReq>
      break;
 80067ac:	e7f3      	b.n	8006796 <USBD_LL_SetupStage+0x3e>
      USBD_StdEPReq(pdev, &pdev->request);
 80067ae:	0029      	movs	r1, r5
 80067b0:	0020      	movs	r0, r4
 80067b2:	f000 fab3 	bl	8006d1c <USBD_StdEPReq>
      break;
 80067b6:	e7ee      	b.n	8006796 <USBD_LL_SetupStage+0x3e>
 80067b8:	000002ae 	.word	0x000002ae

080067bc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80067bc:	b510      	push	{r4, lr}
 80067be:	0013      	movs	r3, r2
 80067c0:	0004      	movs	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80067c2:	2900      	cmp	r1, #0
 80067c4:	d108      	bne.n	80067d8 <USBD_LL_DataOutStage+0x1c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067c6:	20a5      	movs	r0, #165	@ 0xa5
 80067c8:	0080      	lsls	r0, r0, #2
 80067ca:	5822      	ldr	r2, [r4, r0]
 80067cc:	2a03      	cmp	r2, #3
 80067ce:	d013      	beq.n	80067f8 <USBD_LL_DataOutStage+0x3c>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80067d0:	2a05      	cmp	r2, #5
 80067d2:	d023      	beq.n	800681c <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80067d4:	2000      	movs	r0, #0
 80067d6:	e00e      	b.n	80067f6 <USBD_LL_DataOutStage+0x3a>
  else if ((pdev->pClass->DataOut != NULL) &&
 80067d8:	23ad      	movs	r3, #173	@ 0xad
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	58c3      	ldr	r3, [r0, r3]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <USBD_LL_DataOutStage+0x38>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067e4:	22a7      	movs	r2, #167	@ 0xa7
 80067e6:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 80067e8:	5c82      	ldrb	r2, [r0, r2]
 80067ea:	2a03      	cmp	r2, #3
 80067ec:	d102      	bne.n	80067f4 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 80067ee:	4798      	blx	r3
  return USBD_OK;
 80067f0:	2000      	movs	r0, #0
 80067f2:	e000      	b.n	80067f6 <USBD_LL_DataOutStage+0x3a>
    return USBD_FAIL;
 80067f4:	2002      	movs	r0, #2
}
 80067f6:	bd10      	pop	{r4, pc}
      if (pep->rem_length > pep->maxpacket)
 80067f8:	0020      	movs	r0, r4
 80067fa:	3055      	adds	r0, #85	@ 0x55
 80067fc:	30ff      	adds	r0, #255	@ 0xff
 80067fe:	68c1      	ldr	r1, [r0, #12]
 8006800:	6902      	ldr	r2, [r0, #16]
 8006802:	4291      	cmp	r1, r2
 8006804:	d911      	bls.n	800682a <USBD_LL_DataOutStage+0x6e>
        pep->rem_length -= pep->maxpacket;
 8006806:	1a89      	subs	r1, r1, r2
 8006808:	60c1      	str	r1, [r0, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800680a:	428a      	cmp	r2, r1
 800680c:	d81d      	bhi.n	800684a <USBD_LL_DataOutStage+0x8e>
 800680e:	b292      	uxth	r2, r2
 8006810:	0019      	movs	r1, r3
 8006812:	0020      	movs	r0, r4
 8006814:	f000 fb96 	bl	8006f44 <USBD_CtlContinueRx>
  return USBD_OK;
 8006818:	2000      	movs	r0, #0
 800681a:	e7ec      	b.n	80067f6 <USBD_LL_DataOutStage+0x3a>
        pdev->ep0_state = USBD_EP0_IDLE;
 800681c:	5021      	str	r1, [r4, r0]
        USBD_LL_StallEP(pdev, 0U);
 800681e:	2100      	movs	r1, #0
 8006820:	0020      	movs	r0, r4
 8006822:	f000 fe2b 	bl	800747c <USBD_LL_StallEP>
  return USBD_OK;
 8006826:	2000      	movs	r0, #0
 8006828:	e7e5      	b.n	80067f6 <USBD_LL_DataOutStage+0x3a>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800682a:	23ad      	movs	r3, #173	@ 0xad
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	58e3      	ldr	r3, [r4, r3]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d004      	beq.n	8006840 <USBD_LL_DataOutStage+0x84>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006836:	22a7      	movs	r2, #167	@ 0xa7
 8006838:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800683a:	5ca2      	ldrb	r2, [r4, r2]
 800683c:	2a03      	cmp	r2, #3
 800683e:	d006      	beq.n	800684e <USBD_LL_DataOutStage+0x92>
        USBD_CtlSendStatus(pdev);
 8006840:	0020      	movs	r0, r4
 8006842:	f000 fb87 	bl	8006f54 <USBD_CtlSendStatus>
  return USBD_OK;
 8006846:	2000      	movs	r0, #0
 8006848:	e7d5      	b.n	80067f6 <USBD_LL_DataOutStage+0x3a>
        USBD_CtlContinueRx(pdev, pdata,
 800684a:	b28a      	uxth	r2, r1
 800684c:	e7e0      	b.n	8006810 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 800684e:	0020      	movs	r0, r4
 8006850:	4798      	blx	r3
 8006852:	e7f5      	b.n	8006840 <USBD_LL_DataOutStage+0x84>

08006854 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006856:	0004      	movs	r4, r0
 8006858:	0013      	movs	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800685a:	2900      	cmp	r1, #0
 800685c:	d111      	bne.n	8006882 <USBD_LL_DataInStage+0x2e>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800685e:	22a5      	movs	r2, #165	@ 0xa5
 8006860:	0092      	lsls	r2, r2, #2
 8006862:	5882      	ldr	r2, [r0, r2]
 8006864:	2a02      	cmp	r2, #2
 8006866:	d01e      	beq.n	80068a6 <USBD_LL_DataInStage+0x52>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006868:	2304      	movs	r3, #4
 800686a:	439a      	bics	r2, r3
 800686c:	d102      	bne.n	8006874 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800686e:	2180      	movs	r1, #128	@ 0x80
 8006870:	f000 fe04 	bl	800747c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006874:	23a8      	movs	r3, #168	@ 0xa8
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	5ce2      	ldrb	r2, [r4, r3]
 800687a:	2a01      	cmp	r2, #1
 800687c:	d010      	beq.n	80068a0 <USBD_LL_DataInStage+0x4c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800687e:	2000      	movs	r0, #0
}
 8006880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8006882:	23ad      	movs	r3, #173	@ 0xad
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	58c3      	ldr	r3, [r0, r3]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d006      	beq.n	800689c <USBD_LL_DataInStage+0x48>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800688e:	22a7      	movs	r2, #167	@ 0xa7
 8006890:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8006892:	5c82      	ldrb	r2, [r0, r2]
 8006894:	2a03      	cmp	r2, #3
 8006896:	d101      	bne.n	800689c <USBD_LL_DataInStage+0x48>
    pdev->pClass->DataIn(pdev, epnum);
 8006898:	4798      	blx	r3
 800689a:	e7f0      	b.n	800687e <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 800689c:	2002      	movs	r0, #2
 800689e:	e7ef      	b.n	8006880 <USBD_LL_DataInStage+0x2c>
      pdev->dev_test_mode = 0U;
 80068a0:	2200      	movs	r2, #0
 80068a2:	54e2      	strb	r2, [r4, r3]
 80068a4:	e7eb      	b.n	800687e <USBD_LL_DataInStage+0x2a>
      if (pep->rem_length > pep->maxpacket)
 80068a6:	6a02      	ldr	r2, [r0, #32]
 80068a8:	6a45      	ldr	r5, [r0, #36]	@ 0x24
 80068aa:	42aa      	cmp	r2, r5
 80068ac:	d827      	bhi.n	80068fe <USBD_LL_DataInStage+0xaa>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80068ae:	69c7      	ldr	r7, [r0, #28]
 80068b0:	0029      	movs	r1, r5
 80068b2:	0038      	movs	r0, r7
 80068b4:	f7f9 fcc0 	bl	8000238 <__aeabi_uidivmod>
 80068b8:	1e0e      	subs	r6, r1, #0
 80068ba:	d10d      	bne.n	80068d8 <USBD_LL_DataInStage+0x84>
 80068bc:	42bd      	cmp	r5, r7
 80068be:	d80b      	bhi.n	80068d8 <USBD_LL_DataInStage+0x84>
            (pep->total_length < pdev->ep0_data_len))
 80068c0:	25a6      	movs	r5, #166	@ 0xa6
 80068c2:	00ad      	lsls	r5, r5, #2
            (pep->total_length >= pep->maxpacket) &&
 80068c4:	5963      	ldr	r3, [r4, r5]
 80068c6:	429f      	cmp	r7, r3
 80068c8:	d206      	bcs.n	80068d8 <USBD_LL_DataInStage+0x84>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068ca:	2200      	movs	r2, #0
 80068cc:	2100      	movs	r1, #0
 80068ce:	0020      	movs	r0, r4
 80068d0:	f000 fb1e 	bl	8006f10 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068d4:	5166      	str	r6, [r4, r5]
 80068d6:	e018      	b.n	800690a <USBD_LL_DataInStage+0xb6>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068d8:	23ad      	movs	r3, #173	@ 0xad
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	58e3      	ldr	r3, [r4, r3]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d004      	beq.n	80068ee <USBD_LL_DataInStage+0x9a>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068e4:	22a7      	movs	r2, #167	@ 0xa7
 80068e6:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80068e8:	5ca2      	ldrb	r2, [r4, r2]
 80068ea:	2a03      	cmp	r2, #3
 80068ec:	d014      	beq.n	8006918 <USBD_LL_DataInStage+0xc4>
          USBD_LL_StallEP(pdev, 0x80U);
 80068ee:	2180      	movs	r1, #128	@ 0x80
 80068f0:	0020      	movs	r0, r4
 80068f2:	f000 fdc3 	bl	800747c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80068f6:	0020      	movs	r0, r4
 80068f8:	f000 fb38 	bl	8006f6c <USBD_CtlReceiveStatus>
 80068fc:	e7ba      	b.n	8006874 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 80068fe:	1b52      	subs	r2, r2, r5
 8006900:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006902:	0019      	movs	r1, r3
 8006904:	b292      	uxth	r2, r2
 8006906:	f000 fb03 	bl	8006f10 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800690a:	2300      	movs	r3, #0
 800690c:	2200      	movs	r2, #0
 800690e:	2100      	movs	r1, #0
 8006910:	0020      	movs	r0, r4
 8006912:	f000 fe01 	bl	8007518 <USBD_LL_PrepareReceive>
 8006916:	e7ad      	b.n	8006874 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 8006918:	0020      	movs	r0, r4
 800691a:	4798      	blx	r3
 800691c:	e7e7      	b.n	80068ee <USBD_LL_DataInStage+0x9a>
 800691e:	46c0      	nop			@ (mov r8, r8)

08006920 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006920:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006922:	2340      	movs	r3, #64	@ 0x40
 8006924:	2200      	movs	r2, #0
 8006926:	2100      	movs	r1, #0
{
 8006928:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800692a:	f000 fd89 	bl	8007440 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800692e:	23ac      	movs	r3, #172	@ 0xac
 8006930:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006932:	2640      	movs	r6, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	50e5      	str	r5, [r4, r3]
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006938:	330c      	adds	r3, #12
 800693a:	50e6      	str	r6, [r4, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800693c:	3b25      	subs	r3, #37	@ 0x25
 800693e:	2200      	movs	r2, #0
 8006940:	3bff      	subs	r3, #255	@ 0xff
 8006942:	2180      	movs	r1, #128	@ 0x80
 8006944:	0020      	movs	r0, r4
 8006946:	f000 fd7b 	bl	8007440 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800694a:	23a7      	movs	r3, #167	@ 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 800694c:	22a5      	movs	r2, #165	@ 0xa5
  pdev->dev_state = USBD_STATE_DEFAULT;
 800694e:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006950:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006952:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006954:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006956:	2300      	movs	r3, #0
 8006958:	0092      	lsls	r2, r2, #2
 800695a:	50a3      	str	r3, [r4, r2]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 800695c:	3210      	adds	r2, #16
  pdev->dev_config = 0U;
 800695e:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8006960:	50a3      	str	r3, [r4, r2]

  if (pdev->pClassData)
 8006962:	23ae      	movs	r3, #174	@ 0xae
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	58e3      	ldr	r3, [r4, r3]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d006      	beq.n	800697a <USBD_LL_Reset+0x5a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800696c:	23ad      	movs	r3, #173	@ 0xad
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	58e3      	ldr	r3, [r4, r3]
 8006972:	2100      	movs	r1, #0
 8006974:	0020      	movs	r0, r4
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	4798      	blx	r3
  }

  return USBD_OK;
}
 800697a:	2000      	movs	r0, #0
 800697c:	bd70      	pop	{r4, r5, r6, pc}
 800697e:	46c0      	nop			@ (mov r8, r8)

08006980 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006980:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006982:	2000      	movs	r0, #0
 8006984:	4770      	bx	lr
 8006986:	46c0      	nop			@ (mov r8, r8)

08006988 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006988:	23a7      	movs	r3, #167	@ 0xa7
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	5cc1      	ldrb	r1, [r0, r3]
 800698e:	4a03      	ldr	r2, [pc, #12]	@ (800699c <USBD_LL_Suspend+0x14>)
 8006990:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006992:	2204      	movs	r2, #4
 8006994:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8006996:	2000      	movs	r0, #0
 8006998:	4770      	bx	lr
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	0000029d 	.word	0x0000029d

080069a0 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80069a0:	23a7      	movs	r3, #167	@ 0xa7
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	5cc2      	ldrb	r2, [r0, r3]
 80069a6:	2a04      	cmp	r2, #4
 80069a8:	d102      	bne.n	80069b0 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80069aa:	4a02      	ldr	r2, [pc, #8]	@ (80069b4 <USBD_LL_Resume+0x14>)
 80069ac:	5c82      	ldrb	r2, [r0, r2]
 80069ae:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 80069b0:	2000      	movs	r0, #0
 80069b2:	4770      	bx	lr
 80069b4:	0000029d 	.word	0x0000029d

080069b8 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b8:	23a7      	movs	r3, #167	@ 0xa7
{
 80069ba:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	5cc3      	ldrb	r3, [r0, r3]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d001      	beq.n	80069c8 <USBD_LL_SOF+0x10>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80069c4:	2000      	movs	r0, #0
 80069c6:	bd10      	pop	{r4, pc}
    if (pdev->pClass->SOF != NULL)
 80069c8:	23ad      	movs	r3, #173	@ 0xad
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	58c3      	ldr	r3, [r0, r3]
 80069ce:	69db      	ldr	r3, [r3, #28]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0f7      	beq.n	80069c4 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 80069d4:	4798      	blx	r3
 80069d6:	e7f5      	b.n	80069c4 <USBD_LL_SOF+0xc>

080069d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80069d8:	2360      	movs	r3, #96	@ 0x60
 80069da:	780a      	ldrb	r2, [r1, #0]
 80069dc:	b570      	push	{r4, r5, r6, lr}
 80069de:	4013      	ands	r3, r2
 80069e0:	000d      	movs	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069e2:	0019      	movs	r1, r3
 80069e4:	22c0      	movs	r2, #192	@ 0xc0
 80069e6:	3920      	subs	r1, #32
{
 80069e8:	0004      	movs	r4, r0
 80069ea:	b082      	sub	sp, #8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ec:	4211      	tst	r1, r2
 80069ee:	d00c      	beq.n	8006a0a <USBD_StdDevReq+0x32>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d011      	beq.n	8006a18 <USBD_StdDevReq+0x40>
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80069f4:	2180      	movs	r1, #128	@ 0x80
 80069f6:	0020      	movs	r0, r4
 80069f8:	f000 fd40 	bl	800747c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80069fc:	2100      	movs	r1, #0
 80069fe:	0020      	movs	r0, r4
 8006a00:	f000 fd3c 	bl	800747c <USBD_LL_StallEP>
}
 8006a04:	2000      	movs	r0, #0
 8006a06:	b002      	add	sp, #8
 8006a08:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8006a0a:	23ad      	movs	r3, #173	@ 0xad
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	58c3      	ldr	r3, [r0, r3]
 8006a10:	0029      	movs	r1, r5
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4798      	blx	r3
      break;
 8006a16:	e7f5      	b.n	8006a04 <USBD_StdDevReq+0x2c>
      switch (req->bRequest)
 8006a18:	786b      	ldrb	r3, [r5, #1]
 8006a1a:	2b09      	cmp	r3, #9
 8006a1c:	d8ea      	bhi.n	80069f4 <USBD_StdDevReq+0x1c>
 8006a1e:	4aa3      	ldr	r2, [pc, #652]	@ (8006cac <USBD_StdDevReq+0x2d4>)
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	58d3      	ldr	r3, [r2, r3]
 8006a24:	469f      	mov	pc, r3
  cfgidx = (uint8_t)(req->wValue);
 8006a26:	78ab      	ldrb	r3, [r5, #2]
 8006a28:	4da1      	ldr	r5, [pc, #644]	@ (8006cb0 <USBD_StdDevReq+0x2d8>)
 8006a2a:	702b      	strb	r3, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d8e1      	bhi.n	80069f4 <USBD_StdDevReq+0x1c>
    switch (pdev->dev_state)
 8006a30:	21a7      	movs	r1, #167	@ 0xa7
 8006a32:	0089      	lsls	r1, r1, #2
 8006a34:	5c42      	ldrb	r2, [r0, r1]
 8006a36:	2a02      	cmp	r2, #2
 8006a38:	d100      	bne.n	8006a3c <USBD_StdDevReq+0x64>
 8006a3a:	e119      	b.n	8006c70 <USBD_StdDevReq+0x298>
 8006a3c:	2a03      	cmp	r2, #3
 8006a3e:	d100      	bne.n	8006a42 <USBD_StdDevReq+0x6a>
 8006a40:	e104      	b.n	8006c4c <USBD_StdDevReq+0x274>
  USBD_LL_StallEP(pdev, 0x80U);
 8006a42:	2180      	movs	r1, #128	@ 0x80
 8006a44:	f000 fd1a 	bl	800747c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006a48:	2100      	movs	r1, #0
 8006a4a:	0020      	movs	r0, r4
 8006a4c:	f000 fd16 	bl	800747c <USBD_LL_StallEP>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006a50:	0020      	movs	r0, r4
 8006a52:	7829      	ldrb	r1, [r5, #0]
 8006a54:	f7ff fe78 	bl	8006748 <USBD_ClrClassConfig>
        break;
 8006a58:	e7d4      	b.n	8006a04 <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8006a5a:	23a7      	movs	r3, #167	@ 0xa7
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	5cc3      	ldrb	r3, [r0, r3]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d8c6      	bhi.n	80069f4 <USBD_StdDevReq+0x1c>
      if (req->wLength != 0x2U)
 8006a66:	88eb      	ldrh	r3, [r5, #6]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d1c3      	bne.n	80069f4 <USBD_StdDevReq+0x1c>
      if (pdev->dev_remote_wakeup)
 8006a6c:	23a9      	movs	r3, #169	@ 0xa9
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	58c3      	ldr	r3, [r0, r3]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006a72:	0001      	movs	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a74:	425a      	negs	r2, r3
 8006a76:	4153      	adcs	r3, r2
 8006a78:	2201      	movs	r2, #1
 8006a7a:	425b      	negs	r3, r3
 8006a7c:	4393      	bics	r3, r2
 8006a7e:	3303      	adds	r3, #3
 8006a80:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006a82:	310c      	adds	r1, #12
 8006a84:	3201      	adds	r2, #1
 8006a86:	f000 fa35 	bl	8006ef4 <USBD_CtlSendData>
      break;
 8006a8a:	e7bb      	b.n	8006a04 <USBD_StdDevReq+0x2c>
  switch (pdev->dev_state)
 8006a8c:	23a7      	movs	r3, #167	@ 0xa7
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	5cc3      	ldrb	r3, [r0, r3]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d8ad      	bhi.n	80069f4 <USBD_StdDevReq+0x1c>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a98:	886b      	ldrh	r3, [r5, #2]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d1b2      	bne.n	8006a04 <USBD_StdDevReq+0x2c>
        pdev->dev_remote_wakeup = 0U;
 8006a9e:	23a9      	movs	r3, #169	@ 0xa9
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	50c2      	str	r2, [r0, r3]
        USBD_CtlSendStatus(pdev);
 8006aa6:	0020      	movs	r0, r4
 8006aa8:	f000 fa54 	bl	8006f54 <USBD_CtlSendStatus>
 8006aac:	e7aa      	b.n	8006a04 <USBD_StdDevReq+0x2c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006aae:	886b      	ldrh	r3, [r5, #2]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d1a7      	bne.n	8006a04 <USBD_StdDevReq+0x2c>
    pdev->dev_remote_wakeup = 1U;
 8006ab4:	22a9      	movs	r2, #169	@ 0xa9
 8006ab6:	0092      	lsls	r2, r2, #2
 8006ab8:	5083      	str	r3, [r0, r2]
    USBD_CtlSendStatus(pdev);
 8006aba:	f000 fa4b 	bl	8006f54 <USBD_CtlSendStatus>
 8006abe:	e7a1      	b.n	8006a04 <USBD_StdDevReq+0x2c>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ac0:	88ab      	ldrh	r3, [r5, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d000      	beq.n	8006ac8 <USBD_StdDevReq+0xf0>
 8006ac6:	e795      	b.n	80069f4 <USBD_StdDevReq+0x1c>
 8006ac8:	88eb      	ldrh	r3, [r5, #6]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d000      	beq.n	8006ad0 <USBD_StdDevReq+0xf8>
 8006ace:	e791      	b.n	80069f4 <USBD_StdDevReq+0x1c>
 8006ad0:	886d      	ldrh	r5, [r5, #2]
 8006ad2:	2d7f      	cmp	r5, #127	@ 0x7f
 8006ad4:	d900      	bls.n	8006ad8 <USBD_StdDevReq+0x100>
 8006ad6:	e78d      	b.n	80069f4 <USBD_StdDevReq+0x1c>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad8:	26a7      	movs	r6, #167	@ 0xa7
 8006ada:	00b6      	lsls	r6, r6, #2
 8006adc:	5d83      	ldrb	r3, [r0, r6]
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d100      	bne.n	8006ae4 <USBD_StdDevReq+0x10c>
 8006ae2:	e787      	b.n	80069f4 <USBD_StdDevReq+0x1c>
      pdev->dev_address = dev_addr;
 8006ae4:	4b73      	ldr	r3, [pc, #460]	@ (8006cb4 <USBD_StdDevReq+0x2dc>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ae6:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8006ae8:	54c1      	strb	r1, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006aea:	f000 fcf9 	bl	80074e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006aee:	0020      	movs	r0, r4
 8006af0:	f000 fa30 	bl	8006f54 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006af4:	2d00      	cmp	r5, #0
 8006af6:	d100      	bne.n	8006afa <USBD_StdDevReq+0x122>
 8006af8:	e0d4      	b.n	8006ca4 <USBD_StdDevReq+0x2cc>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006afa:	2302      	movs	r3, #2
 8006afc:	55a3      	strb	r3, [r4, r6]
 8006afe:	e781      	b.n	8006a04 <USBD_StdDevReq+0x2c>
  uint16_t len = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	466a      	mov	r2, sp
 8006b04:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 8006b06:	886a      	ldrh	r2, [r5, #2]
 8006b08:	0a13      	lsrs	r3, r2, #8
 8006b0a:	2b07      	cmp	r3, #7
 8006b0c:	d900      	bls.n	8006b10 <USBD_StdDevReq+0x138>
 8006b0e:	e771      	b.n	80069f4 <USBD_StdDevReq+0x1c>
 8006b10:	4969      	ldr	r1, [pc, #420]	@ (8006cb8 <USBD_StdDevReq+0x2e0>)
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	58cb      	ldr	r3, [r1, r3]
 8006b16:	469f      	mov	pc, r3
  if (req->wLength != 1U)
 8006b18:	88eb      	ldrh	r3, [r5, #6]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d000      	beq.n	8006b20 <USBD_StdDevReq+0x148>
 8006b1e:	e769      	b.n	80069f4 <USBD_StdDevReq+0x1c>
    switch (pdev->dev_state)
 8006b20:	23a7      	movs	r3, #167	@ 0xa7
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	5cc3      	ldrb	r3, [r0, r3]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d900      	bls.n	8006b2c <USBD_StdDevReq+0x154>
 8006b2a:	e087      	b.n	8006c3c <USBD_StdDevReq+0x264>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d100      	bne.n	8006b32 <USBD_StdDevReq+0x15a>
 8006b30:	e760      	b.n	80069f4 <USBD_StdDevReq+0x1c>
        pdev->dev_default_config = 0U;
 8006b32:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b34:	0001      	movs	r1, r0
 8006b36:	2201      	movs	r2, #1
        pdev->dev_default_config = 0U;
 8006b38:	6083      	str	r3, [r0, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b3a:	3108      	adds	r1, #8
 8006b3c:	f000 f9da 	bl	8006ef4 <USBD_CtlSendData>
        break;
 8006b40:	e760      	b.n	8006a04 <USBD_StdDevReq+0x2c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b42:	7c03      	ldrb	r3, [r0, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d000      	beq.n	8006b4a <USBD_StdDevReq+0x172>
 8006b48:	e754      	b.n	80069f4 <USBD_StdDevReq+0x1c>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006b4a:	23ad      	movs	r3, #173	@ 0xad
 8006b4c:	466a      	mov	r2, sp
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	58c3      	ldr	r3, [r0, r3]
 8006b52:	1d90      	adds	r0, r2, #6
 8006b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b56:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b58:	2307      	movs	r3, #7
 8006b5a:	7043      	strb	r3, [r0, #1]
    if ((len != 0U) && (req->wLength != 0U))
 8006b5c:	466b      	mov	r3, sp
 8006b5e:	88da      	ldrh	r2, [r3, #6]
 8006b60:	88eb      	ldrh	r3, [r5, #6]
 8006b62:	2a00      	cmp	r2, #0
 8006b64:	d00d      	beq.n	8006b82 <USBD_StdDevReq+0x1aa>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d09d      	beq.n	8006aa6 <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 8006b6a:	1c11      	adds	r1, r2, #0
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d900      	bls.n	8006b72 <USBD_StdDevReq+0x19a>
 8006b70:	1c19      	adds	r1, r3, #0
 8006b72:	466b      	mov	r3, sp
 8006b74:	b28a      	uxth	r2, r1
 8006b76:	80d9      	strh	r1, [r3, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b78:	0001      	movs	r1, r0
 8006b7a:	0020      	movs	r0, r4
 8006b7c:	f000 f9ba 	bl	8006ef4 <USBD_CtlSendData>
 8006b80:	88eb      	ldrh	r3, [r5, #6]
    if (req->wLength == 0U)
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d000      	beq.n	8006b88 <USBD_StdDevReq+0x1b0>
 8006b86:	e73d      	b.n	8006a04 <USBD_StdDevReq+0x2c>
 8006b88:	e78d      	b.n	8006aa6 <USBD_StdDevReq+0xce>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b8a:	7c03      	ldrb	r3, [r0, #16]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d000      	beq.n	8006b92 <USBD_StdDevReq+0x1ba>
 8006b90:	e730      	b.n	80069f4 <USBD_StdDevReq+0x1c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b92:	23ad      	movs	r3, #173	@ 0xad
 8006b94:	466a      	mov	r2, sp
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	58c3      	ldr	r3, [r0, r3]
 8006b9a:	1d90      	adds	r0, r2, #6
 8006b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b9e:	4798      	blx	r3
  if (err != 0U)
 8006ba0:	e7dc      	b.n	8006b5c <USBD_StdDevReq+0x184>
      switch ((uint8_t)(req->wValue))
 8006ba2:	b2d2      	uxtb	r2, r2
 8006ba4:	2a05      	cmp	r2, #5
 8006ba6:	d900      	bls.n	8006baa <USBD_StdDevReq+0x1d2>
 8006ba8:	e724      	b.n	80069f4 <USBD_StdDevReq+0x1c>
 8006baa:	4b44      	ldr	r3, [pc, #272]	@ (8006cbc <USBD_StdDevReq+0x2e4>)
 8006bac:	0092      	lsls	r2, r2, #2
 8006bae:	589b      	ldr	r3, [r3, r2]
 8006bb0:	469f      	mov	pc, r3
      pdev->pClass->Setup(pdev, req);
 8006bb2:	23ad      	movs	r3, #173	@ 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bb4:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	58c3      	ldr	r3, [r0, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	d166      	bne.n	8006c8c <USBD_StdDevReq+0x2b4>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006bc0:	466a      	mov	r2, sp
 8006bc2:	1d90      	adds	r0, r2, #6
 8006bc4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006bca:	e7c7      	b.n	8006b5c <USBD_StdDevReq+0x184>
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bcc:	23ac      	movs	r3, #172	@ 0xac
 8006bce:	466a      	mov	r2, sp
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	58e3      	ldr	r3, [r4, r3]
 8006bd4:	1d91      	adds	r1, r2, #6
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	7c00      	ldrb	r0, [r0, #16]
 8006bda:	4798      	blx	r3
  if (err != 0U)
 8006bdc:	e7be      	b.n	8006b5c <USBD_StdDevReq+0x184>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006bde:	23ac      	movs	r3, #172	@ 0xac
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	58c3      	ldr	r3, [r0, r3]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d100      	bne.n	8006bec <USBD_StdDevReq+0x214>
 8006bea:	e703      	b.n	80069f4 <USBD_StdDevReq+0x1c>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006bec:	466a      	mov	r2, sp
 8006bee:	7c20      	ldrb	r0, [r4, #16]
 8006bf0:	1d91      	adds	r1, r2, #6
 8006bf2:	4798      	blx	r3
  if (err != 0U)
 8006bf4:	e7b2      	b.n	8006b5c <USBD_StdDevReq+0x184>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006bf6:	23ac      	movs	r3, #172	@ 0xac
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	58c3      	ldr	r3, [r0, r3]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f4      	bne.n	8006bec <USBD_StdDevReq+0x214>
 8006c02:	e6f7      	b.n	80069f4 <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c04:	23ac      	movs	r3, #172	@ 0xac
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	58c3      	ldr	r3, [r0, r3]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1ed      	bne.n	8006bec <USBD_StdDevReq+0x214>
 8006c10:	e6f0      	b.n	80069f4 <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c12:	23ac      	movs	r3, #172	@ 0xac
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	58c3      	ldr	r3, [r0, r3]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e6      	bne.n	8006bec <USBD_StdDevReq+0x214>
 8006c1e:	e6e9      	b.n	80069f4 <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c20:	23ac      	movs	r3, #172	@ 0xac
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	58c3      	ldr	r3, [r0, r3]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1df      	bne.n	8006bec <USBD_StdDevReq+0x214>
 8006c2c:	e6e2      	b.n	80069f4 <USBD_StdDevReq+0x1c>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c2e:	23ac      	movs	r3, #172	@ 0xac
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	58c3      	ldr	r3, [r0, r3]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1d8      	bne.n	8006bec <USBD_StdDevReq+0x214>
 8006c3a:	e6db      	b.n	80069f4 <USBD_StdDevReq+0x1c>
    switch (pdev->dev_state)
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d000      	beq.n	8006c42 <USBD_StdDevReq+0x26a>
 8006c40:	e6d8      	b.n	80069f4 <USBD_StdDevReq+0x1c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006c42:	2201      	movs	r2, #1
 8006c44:	1d01      	adds	r1, r0, #4
 8006c46:	f000 f955 	bl	8006ef4 <USBD_CtlSendData>
        break;
 8006c4a:	e6db      	b.n	8006a04 <USBD_StdDevReq+0x2c>
        if (cfgidx == 0U)
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01f      	beq.n	8006c90 <USBD_StdDevReq+0x2b8>
        else if (cfgidx != pdev->dev_config)
 8006c50:	6841      	ldr	r1, [r0, #4]
 8006c52:	2901      	cmp	r1, #1
 8006c54:	d100      	bne.n	8006c58 <USBD_StdDevReq+0x280>
 8006c56:	e726      	b.n	8006aa6 <USBD_StdDevReq+0xce>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c58:	b2c9      	uxtb	r1, r1
 8006c5a:	f7ff fd75 	bl	8006748 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c5e:	7829      	ldrb	r1, [r5, #0]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c60:	0020      	movs	r0, r4
          pdev->dev_config = cfgidx;
 8006c62:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c64:	f7ff fd62 	bl	800672c <USBD_SetClassConfig>
 8006c68:	2802      	cmp	r0, #2
 8006c6a:	d000      	beq.n	8006c6e <USBD_StdDevReq+0x296>
 8006c6c:	e71b      	b.n	8006aa6 <USBD_StdDevReq+0xce>
 8006c6e:	e6c1      	b.n	80069f4 <USBD_StdDevReq+0x1c>
        if (cfgidx)
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d100      	bne.n	8006c76 <USBD_StdDevReq+0x29e>
 8006c74:	e717      	b.n	8006aa6 <USBD_StdDevReq+0xce>
          pdev->dev_config = cfgidx;
 8006c76:	2301      	movs	r3, #1
 8006c78:	6043      	str	r3, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c7a:	3302      	adds	r3, #2
 8006c7c:	5443      	strb	r3, [r0, r1]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c7e:	2101      	movs	r1, #1
 8006c80:	f7ff fd54 	bl	800672c <USBD_SetClassConfig>
 8006c84:	2802      	cmp	r0, #2
 8006c86:	d000      	beq.n	8006c8a <USBD_StdDevReq+0x2b2>
 8006c88:	e70d      	b.n	8006aa6 <USBD_StdDevReq+0xce>
 8006c8a:	e6b3      	b.n	80069f4 <USBD_StdDevReq+0x1c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c8e:	e797      	b.n	8006bc0 <USBD_StdDevReq+0x1e8>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c90:	2202      	movs	r2, #2
 8006c92:	5442      	strb	r2, [r0, r1]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c94:	2100      	movs	r1, #0
          pdev->dev_config = cfgidx;
 8006c96:	6043      	str	r3, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c98:	f7ff fd56 	bl	8006748 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c9c:	0020      	movs	r0, r4
 8006c9e:	f000 f959 	bl	8006f54 <USBD_CtlSendStatus>
 8006ca2:	e6af      	b.n	8006a04 <USBD_StdDevReq+0x2c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	55a3      	strb	r3, [r4, r6]
 8006ca8:	e6ac      	b.n	8006a04 <USBD_StdDevReq+0x2c>
 8006caa:	46c0      	nop			@ (mov r8, r8)
 8006cac:	08008ce0 	.word	0x08008ce0
 8006cb0:	20000440 	.word	0x20000440
 8006cb4:	0000029e 	.word	0x0000029e
 8006cb8:	08008d08 	.word	0x08008d08
 8006cbc:	08008d28 	.word	0x08008d28

08006cc0 <USBD_StdItfReq>:
{
 8006cc0:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cc2:	780a      	ldrb	r2, [r1, #0]
{
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	0004      	movs	r4, r0
 8006cca:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ccc:	0652      	lsls	r2, r2, #25
 8006cce:	d50b      	bpl.n	8006ce8 <USBD_StdItfReq+0x28>
 8006cd0:	2b40      	cmp	r3, #64	@ 0x40
 8006cd2:	d009      	beq.n	8006ce8 <USBD_StdItfReq+0x28>
  USBD_LL_StallEP(pdev, 0x80U);
 8006cd4:	2180      	movs	r1, #128	@ 0x80
 8006cd6:	0020      	movs	r0, r4
 8006cd8:	f000 fbd0 	bl	800747c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006cdc:	2100      	movs	r1, #0
 8006cde:	0020      	movs	r0, r4
 8006ce0:	f000 fbcc 	bl	800747c <USBD_LL_StallEP>
}
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8006ce8:	23a7      	movs	r3, #167	@ 0xa7
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	5ce3      	ldrb	r3, [r4, r3]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d8ef      	bhi.n	8006cd4 <USBD_StdItfReq+0x14>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cf4:	792b      	ldrb	r3, [r5, #4]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d8ec      	bhi.n	8006cd4 <USBD_StdItfReq+0x14>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cfa:	23ad      	movs	r3, #173	@ 0xad
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	58e3      	ldr	r3, [r4, r3]
 8006d00:	0029      	movs	r1, r5
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	0020      	movs	r0, r4
 8006d06:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d08:	88eb      	ldrh	r3, [r5, #6]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1ea      	bne.n	8006ce4 <USBD_StdItfReq+0x24>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d1e8      	bne.n	8006ce4 <USBD_StdItfReq+0x24>
              USBD_CtlSendStatus(pdev);
 8006d12:	0020      	movs	r0, r4
 8006d14:	f000 f91e 	bl	8006f54 <USBD_CtlSendStatus>
 8006d18:	e7e4      	b.n	8006ce4 <USBD_StdItfReq+0x24>
 8006d1a:	46c0      	nop			@ (mov r8, r8)

08006d1c <USBD_StdEPReq>:
{
 8006d1c:	2360      	movs	r3, #96	@ 0x60
 8006d1e:	780a      	ldrb	r2, [r1, #0]
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	4013      	ands	r3, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d24:	001c      	movs	r4, r3
 8006d26:	22c0      	movs	r2, #192	@ 0xc0
 8006d28:	3c20      	subs	r4, #32
{
 8006d2a:	0005      	movs	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8006d2c:	8888      	ldrh	r0, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d2e:	4214      	tst	r4, r2
 8006d30:	d00b      	beq.n	8006d4a <USBD_StdEPReq+0x2e>
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d010      	beq.n	8006d58 <USBD_StdEPReq+0x3c>
  USBD_LL_StallEP(pdev, 0x80U);
 8006d36:	2180      	movs	r1, #128	@ 0x80
 8006d38:	0028      	movs	r0, r5
 8006d3a:	f000 fb9f 	bl	800747c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006d3e:	2100      	movs	r1, #0
 8006d40:	0028      	movs	r0, r5
 8006d42:	f000 fb9b 	bl	800747c <USBD_LL_StallEP>
}
 8006d46:	2000      	movs	r0, #0
 8006d48:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup(pdev, req);
 8006d4a:	23ad      	movs	r3, #173	@ 0xad
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	58eb      	ldr	r3, [r5, r3]
 8006d50:	0028      	movs	r0, r5
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	4798      	blx	r3
      break;
 8006d56:	e7f6      	b.n	8006d46 <USBD_StdEPReq+0x2a>
      switch (req->bRequest)
 8006d58:	784b      	ldrb	r3, [r1, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8006d5a:	b2c2      	uxtb	r2, r0
      switch (req->bRequest)
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d043      	beq.n	8006de8 <USBD_StdEPReq+0xcc>
 8006d60:	2b03      	cmp	r3, #3
 8006d62:	d02d      	beq.n	8006dc0 <USBD_StdEPReq+0xa4>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e6      	bne.n	8006d36 <USBD_StdEPReq+0x1a>
          switch (pdev->dev_state)
 8006d68:	23a7      	movs	r3, #167	@ 0xa7
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	5ceb      	ldrb	r3, [r5, r3]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d056      	beq.n	8006e20 <USBD_StdEPReq+0x104>
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d1df      	bne.n	8006d36 <USBD_StdEPReq+0x1a>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d76:	210f      	movs	r1, #15
 8006d78:	4011      	ands	r1, r2
 8006d7a:	008b      	lsls	r3, r1, #2
 8006d7c:	185b      	adds	r3, r3, r1
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	18eb      	adds	r3, r5, r3
              if ((ep_addr & 0x80U) == 0x80U)
 8006d82:	0600      	lsls	r0, r0, #24
 8006d84:	d45d      	bmi.n	8006e42 <USBD_StdEPReq+0x126>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d86:	3359      	adds	r3, #89	@ 0x59
 8006d88:	33ff      	adds	r3, #255	@ 0xff
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0d2      	beq.n	8006d36 <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d90:	237f      	movs	r3, #127	@ 0x7f
 8006d92:	4013      	ands	r3, r2
 8006d94:	009c      	lsls	r4, r3, #2
 8006d96:	18e4      	adds	r4, r4, r3
 8006d98:	00a4      	lsls	r4, r4, #2
 8006d9a:	3455      	adds	r4, #85	@ 0x55
 8006d9c:	34ff      	adds	r4, #255	@ 0xff
 8006d9e:	192c      	adds	r4, r5, r4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d05a      	beq.n	8006e5a <USBD_StdEPReq+0x13e>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006da4:	0011      	movs	r1, r2
 8006da6:	0028      	movs	r0, r5
 8006da8:	f000 fb84 	bl	80074b4 <USBD_LL_IsStallEP>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d054      	beq.n	8006e5a <USBD_StdEPReq+0x13e>
 8006db0:	2301      	movs	r3, #1
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006db2:	2202      	movs	r2, #2
 8006db4:	0021      	movs	r1, r4
 8006db6:	0028      	movs	r0, r5
                pep->status = 0x0000U;
 8006db8:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006dba:	f000 f89b 	bl	8006ef4 <USBD_CtlSendData>
              break;
 8006dbe:	e7c2      	b.n	8006d46 <USBD_StdEPReq+0x2a>
          switch (pdev->dev_state)
 8006dc0:	23a7      	movs	r3, #167	@ 0xa7
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	5ceb      	ldrb	r3, [r5, r3]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d01e      	beq.n	8006e08 <USBD_StdEPReq+0xec>
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d1b3      	bne.n	8006d36 <USBD_StdEPReq+0x1a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dce:	884b      	ldrh	r3, [r1, #2]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d115      	bne.n	8006e00 <USBD_StdEPReq+0xe4>
                if ((ep_addr != 0x00U) &&
 8006dd4:	0653      	lsls	r3, r2, #25
 8006dd6:	d013      	beq.n	8006e00 <USBD_StdEPReq+0xe4>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006dd8:	88cb      	ldrh	r3, [r1, #6]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d110      	bne.n	8006e00 <USBD_StdEPReq+0xe4>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006dde:	0011      	movs	r1, r2
 8006de0:	0028      	movs	r0, r5
 8006de2:	f000 fb4b 	bl	800747c <USBD_LL_StallEP>
 8006de6:	e00b      	b.n	8006e00 <USBD_StdEPReq+0xe4>
          switch (pdev->dev_state)
 8006de8:	23a7      	movs	r3, #167	@ 0xa7
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	5ceb      	ldrb	r3, [r5, r3]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d00a      	beq.n	8006e08 <USBD_StdEPReq+0xec>
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d19f      	bne.n	8006d36 <USBD_StdEPReq+0x1a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006df6:	884b      	ldrh	r3, [r1, #2]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1a4      	bne.n	8006d46 <USBD_StdEPReq+0x2a>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006dfc:	0653      	lsls	r3, r2, #25
 8006dfe:	d12e      	bne.n	8006e5e <USBD_StdEPReq+0x142>
              USBD_CtlSendStatus(pdev);
 8006e00:	0028      	movs	r0, r5
 8006e02:	f000 f8a7 	bl	8006f54 <USBD_CtlSendStatus>
              break;
 8006e06:	e79e      	b.n	8006d46 <USBD_StdEPReq+0x2a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e08:	0653      	lsls	r3, r2, #25
 8006e0a:	d100      	bne.n	8006e0e <USBD_StdEPReq+0xf2>
 8006e0c:	e793      	b.n	8006d36 <USBD_StdEPReq+0x1a>
                USBD_LL_StallEP(pdev, ep_addr);
 8006e0e:	0011      	movs	r1, r2
 8006e10:	0028      	movs	r0, r5
 8006e12:	f000 fb33 	bl	800747c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e16:	2180      	movs	r1, #128	@ 0x80
 8006e18:	0028      	movs	r0, r5
 8006e1a:	f000 fb2f 	bl	800747c <USBD_LL_StallEP>
 8006e1e:	e792      	b.n	8006d46 <USBD_StdEPReq+0x2a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e20:	0652      	lsls	r2, r2, #25
 8006e22:	d000      	beq.n	8006e26 <USBD_StdEPReq+0x10a>
 8006e24:	e787      	b.n	8006d36 <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e26:	0029      	movs	r1, r5
 8006e28:	3155      	adds	r1, #85	@ 0x55
 8006e2a:	31ff      	adds	r1, #255	@ 0xff
 8006e2c:	0600      	lsls	r0, r0, #24
 8006e2e:	d501      	bpl.n	8006e34 <USBD_StdEPReq+0x118>
 8006e30:	3941      	subs	r1, #65	@ 0x41
 8006e32:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 8006e34:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e36:	2202      	movs	r2, #2
 8006e38:	0028      	movs	r0, r5
              pep->status = 0x0000U;
 8006e3a:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e3c:	f000 f85a 	bl	8006ef4 <USBD_CtlSendData>
              break;
 8006e40:	e781      	b.n	8006d46 <USBD_StdEPReq+0x2a>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d100      	bne.n	8006e4a <USBD_StdEPReq+0x12e>
 8006e48:	e775      	b.n	8006d36 <USBD_StdEPReq+0x1a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e4a:	237f      	movs	r3, #127	@ 0x7f
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	1c59      	adds	r1, r3, #1
 8006e50:	008c      	lsls	r4, r1, #2
 8006e52:	1864      	adds	r4, r4, r1
 8006e54:	00a4      	lsls	r4, r4, #2
 8006e56:	192c      	adds	r4, r5, r4
 8006e58:	e7a2      	b.n	8006da0 <USBD_StdEPReq+0x84>
{
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e7a9      	b.n	8006db2 <USBD_StdEPReq+0x96>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e5e:	0011      	movs	r1, r2
 8006e60:	0028      	movs	r0, r5
 8006e62:	f000 fb19 	bl	8007498 <USBD_LL_ClearStallEP>
 8006e66:	e7cb      	b.n	8006e00 <USBD_StdEPReq+0xe4>

08006e68 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006e68:	780b      	ldrb	r3, [r1, #0]
 8006e6a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e6c:	784b      	ldrb	r3, [r1, #1]
 8006e6e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e70:	78cb      	ldrb	r3, [r1, #3]
 8006e72:	788a      	ldrb	r2, [r1, #2]
 8006e74:	021b      	lsls	r3, r3, #8
 8006e76:	4313      	orrs	r3, r2
 8006e78:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e7a:	794b      	ldrb	r3, [r1, #5]
 8006e7c:	790a      	ldrb	r2, [r1, #4]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	4313      	orrs	r3, r2
 8006e82:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e84:	79cb      	ldrb	r3, [r1, #7]
 8006e86:	798a      	ldrb	r2, [r1, #6]
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	80c3      	strh	r3, [r0, #6]
}
 8006e8e:	4770      	bx	lr

08006e90 <USBD_CtlError>:
{
 8006e90:	b510      	push	{r4, lr}
 8006e92:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006e94:	2180      	movs	r1, #128	@ 0x80
 8006e96:	f000 faf1 	bl	800747c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	0020      	movs	r0, r4
 8006e9e:	f000 faed 	bl	800747c <USBD_LL_StallEP>
}
 8006ea2:	bd10      	pop	{r4, pc}

08006ea4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	0004      	movs	r4, r0
 8006ea8:	000d      	movs	r5, r1
 8006eaa:	0016      	movs	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d01d      	beq.n	8006eec <USBD_GetString+0x48>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8006eb0:	7803      	ldrb	r3, [r0, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d01b      	beq.n	8006eee <USBD_GetString+0x4a>
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	f7f9 f926 	bl	8000108 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	b2c3      	uxtb	r3, r0
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ec8:	2303      	movs	r3, #3
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006eca:	702a      	strb	r2, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ecc:	706b      	strb	r3, [r5, #1]
    while (*desc != '\0')
 8006ece:	7820      	ldrb	r0, [r4, #0]
 8006ed0:	2800      	cmp	r0, #0
 8006ed2:	d00b      	beq.n	8006eec <USBD_GetString+0x48>
      unicode[idx++] =  0U;
 8006ed4:	2100      	movs	r1, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ed6:	3b01      	subs	r3, #1
      unicode[idx++] = *desc++;
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	54e8      	strb	r0, [r5, r3]
 8006ede:	3401      	adds	r4, #1
      unicode[idx++] =  0U;
 8006ee0:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8006ee2:	7820      	ldrb	r0, [r4, #0]
      unicode[idx++] =  0U;
 8006ee4:	3302      	adds	r3, #2
 8006ee6:	b2db      	uxtb	r3, r3
    while (*desc != '\0')
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d1f5      	bne.n	8006ed8 <USBD_GetString+0x34>
}
 8006eec:	bd70      	pop	{r4, r5, r6, pc}
  while (*buf != '\0')
 8006eee:	2202      	movs	r2, #2
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e7e8      	b.n	8006ec6 <USBD_GetString+0x22>

08006ef4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006ef4:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ef6:	22a5      	movs	r2, #165	@ 0xa5
{
 8006ef8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006efa:	2402      	movs	r4, #2
 8006efc:	0092      	lsls	r2, r2, #2
 8006efe:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f00:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8006f02:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f04:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8006f06:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f08:	f000 faf8 	bl	80074fc <USBD_LL_Transmit>

  return USBD_OK;
}
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	bd10      	pop	{r4, pc}

08006f10 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006f10:	b510      	push	{r4, lr}
 8006f12:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f14:	000a      	movs	r2, r1
 8006f16:	2100      	movs	r1, #0
 8006f18:	f000 faf0 	bl	80074fc <USBD_LL_Transmit>

  return USBD_OK;
}
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	bd10      	pop	{r4, pc}

08006f20 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006f20:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f22:	22a5      	movs	r2, #165	@ 0xa5
{
 8006f24:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f26:	2403      	movs	r4, #3
 8006f28:	0092      	lsls	r2, r2, #2
 8006f2a:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8006f2c:	3a39      	subs	r2, #57	@ 0x39
 8006f2e:	3aff      	subs	r2, #255	@ 0xff
 8006f30:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 8006f32:	3204      	adds	r2, #4
 8006f34:	5083      	str	r3, [r0, r2]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f36:	000a      	movs	r2, r1
 8006f38:	2100      	movs	r1, #0
 8006f3a:	f000 faed 	bl	8007518 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006f3e:	2000      	movs	r0, #0
 8006f40:	bd10      	pop	{r4, pc}
 8006f42:	46c0      	nop			@ (mov r8, r8)

08006f44 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006f44:	b510      	push	{r4, lr}
 8006f46:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f48:	000a      	movs	r2, r1
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	f000 fae4 	bl	8007518 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006f50:	2000      	movs	r0, #0
 8006f52:	bd10      	pop	{r4, pc}

08006f54 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f54:	23a5      	movs	r3, #165	@ 0xa5
 8006f56:	2204      	movs	r2, #4
{
 8006f58:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006f5e:	2100      	movs	r1, #0
 8006f60:	2300      	movs	r3, #0
 8006f62:	2200      	movs	r2, #0
 8006f64:	f000 faca 	bl	80074fc <USBD_LL_Transmit>

  return USBD_OK;
}
 8006f68:	2000      	movs	r0, #0
 8006f6a:	bd10      	pop	{r4, pc}

08006f6c <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f6c:	23a5      	movs	r3, #165	@ 0xa5
 8006f6e:	2205      	movs	r2, #5
{
 8006f70:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f76:	2100      	movs	r1, #0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f000 facc 	bl	8007518 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006f80:	2000      	movs	r0, #0
 8006f82:	bd10      	pop	{r4, pc}

08006f84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f86:	4c1a      	ldr	r4, [pc, #104]	@ (8006ff0 <MX_USB_DEVICE_Init+0x6c>)
 8006f88:	2200      	movs	r2, #0
 8006f8a:	0020      	movs	r0, r4
 8006f8c:	4919      	ldr	r1, [pc, #100]	@ (8006ff4 <MX_USB_DEVICE_Init+0x70>)
 8006f8e:	f7ff fba3 	bl	80066d8 <USBD_Init>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d111      	bne.n	8006fba <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f96:	0020      	movs	r0, r4
 8006f98:	4917      	ldr	r1, [pc, #92]	@ (8006ff8 <MX_USB_DEVICE_Init+0x74>)
 8006f9a:	f7ff fbb7 	bl	800670c <USBD_RegisterClass>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d113      	bne.n	8006fca <MX_USB_DEVICE_Init+0x46>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006fa2:	0020      	movs	r0, r4
 8006fa4:	4915      	ldr	r1, [pc, #84]	@ (8006ffc <MX_USB_DEVICE_Init+0x78>)
 8006fa6:	f7ff fb41 	bl	800662c <USBD_CDC_RegisterInterface>
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d115      	bne.n	8006fda <MX_USB_DEVICE_Init+0x56>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006fae:	0020      	movs	r0, r4
 8006fb0:	f7ff fbb6 	bl	8006720 <USBD_Start>
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d117      	bne.n	8006fe8 <MX_USB_DEVICE_Init+0x64>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006fb8:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006fba:	f7f9 ff0f 	bl	8000ddc <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006fbe:	0020      	movs	r0, r4
 8006fc0:	490d      	ldr	r1, [pc, #52]	@ (8006ff8 <MX_USB_DEVICE_Init+0x74>)
 8006fc2:	f7ff fba3 	bl	800670c <USBD_RegisterClass>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d0eb      	beq.n	8006fa2 <MX_USB_DEVICE_Init+0x1e>
    Error_Handler();
 8006fca:	f7f9 ff07 	bl	8000ddc <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006fce:	0020      	movs	r0, r4
 8006fd0:	490a      	ldr	r1, [pc, #40]	@ (8006ffc <MX_USB_DEVICE_Init+0x78>)
 8006fd2:	f7ff fb2b 	bl	800662c <USBD_CDC_RegisterInterface>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d0e9      	beq.n	8006fae <MX_USB_DEVICE_Init+0x2a>
    Error_Handler();
 8006fda:	f7f9 feff 	bl	8000ddc <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006fde:	0020      	movs	r0, r4
 8006fe0:	f7ff fb9e 	bl	8006720 <USBD_Start>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d0e7      	beq.n	8006fb8 <MX_USB_DEVICE_Init+0x34>
    Error_Handler();
 8006fe8:	f7f9 fef8 	bl	8000ddc <Error_Handler>
}
 8006fec:	e7e4      	b.n	8006fb8 <MX_USB_DEVICE_Init+0x34>
 8006fee:	46c0      	nop			@ (mov r8, r8)
 8006ff0:	20000444 	.word	0x20000444
 8006ff4:	20000174 	.word	0x20000174
 8006ff8:	200000ec 	.word	0x200000ec
 8006ffc:	20000130 	.word	0x20000130

08007000 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
  /* USER CODE END 4 */
}
 8007000:	2000      	movs	r0, #0
 8007002:	4770      	bx	lr

08007004 <CDC_Control_FS>:
			break;
	}

	return (USBD_OK);
  /* USER CODE END 5 */
}
 8007004:	2000      	movs	r0, #0
 8007006:	4770      	bx	lr

08007008 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007008:	b570      	push	{r4, r5, r6, lr}
 800700a:	000e      	movs	r6, r1
 800700c:	0004      	movs	r4, r0
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800700e:	4d0f      	ldr	r5, [pc, #60]	@ (800704c <CDC_Receive_FS+0x44>)
 8007010:	0001      	movs	r1, r0
 8007012:	0028      	movs	r0, r5
 8007014:	f7ff fb20 	bl	8006658 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007018:	0028      	movs	r0, r5
 800701a:	f7ff fb43 	bl	80066a4 <USBD_CDC_ReceivePacket>

	memset(buffer, '\0', 64);  // clear the buffer
 800701e:	4d0c      	ldr	r5, [pc, #48]	@ (8007050 <CDC_Receive_FS+0x48>)
 8007020:	2240      	movs	r2, #64	@ 0x40
 8007022:	0028      	movs	r0, r5
 8007024:	2100      	movs	r1, #0
 8007026:	f000 fc5f 	bl	80078e8 <memset>
	uint8_t len = (uint8_t) *Len;
	memcpy(buffer, Buf, len);  // copy the data to the buffer
 800702a:	7836      	ldrb	r6, [r6, #0]
 800702c:	0021      	movs	r1, r4
 800702e:	0032      	movs	r2, r6
 8007030:	0028      	movs	r0, r5
 8007032:	f000 fd44 	bl	8007abe <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8007036:	0032      	movs	r2, r6
 8007038:	2100      	movs	r1, #0
 800703a:	0020      	movs	r0, r4
 800703c:	f000 fc54 	bl	80078e8 <memset>
	commandRecieved = TRUE;
 8007040:	2201      	movs	r2, #1
 8007042:	4b04      	ldr	r3, [pc, #16]	@ (8007054 <CDC_Receive_FS+0x4c>)

	return (USBD_OK);
  /* USER CODE END 6 */
}
 8007044:	2000      	movs	r0, #0
	commandRecieved = TRUE;
 8007046:	701a      	strb	r2, [r3, #0]
}
 8007048:	bd70      	pop	{r4, r5, r6, pc}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	20000444 	.word	0x20000444
 8007050:	200003f8 	.word	0x200003f8
 8007054:	20000228 	.word	0x20000228

08007058 <CDC_Init_FS>:
{
 8007058:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800705a:	4c06      	ldr	r4, [pc, #24]	@ (8007074 <CDC_Init_FS+0x1c>)
 800705c:	2200      	movs	r2, #0
 800705e:	0020      	movs	r0, r4
 8007060:	4905      	ldr	r1, [pc, #20]	@ (8007078 <CDC_Init_FS+0x20>)
 8007062:	f7ff faed 	bl	8006640 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007066:	0020      	movs	r0, r4
 8007068:	4904      	ldr	r1, [pc, #16]	@ (800707c <CDC_Init_FS+0x24>)
 800706a:	f7ff faf5 	bl	8006658 <USBD_CDC_SetRxBuffer>
}
 800706e:	2000      	movs	r0, #0
 8007070:	bd10      	pop	{r4, pc}
 8007072:	46c0      	nop			@ (mov r8, r8)
 8007074:	20000444 	.word	0x20000444
 8007078:	20000708 	.word	0x20000708
 800707c:	20000b08 	.word	0x20000b08

08007080 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8007080:	22ae      	movs	r2, #174	@ 0xae
{
 8007082:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8007084:	4c08      	ldr	r4, [pc, #32]	@ (80070a8 <CDC_Transmit_FS+0x28>)
 8007086:	0092      	lsls	r2, r2, #2
{
 8007088:	0003      	movs	r3, r0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 800708a:	58a0      	ldr	r0, [r4, r2]
	if (hcdc->TxState != 0) {
 800708c:	3aa4      	subs	r2, #164	@ 0xa4
 800708e:	5882      	ldr	r2, [r0, r2]
		return USBD_BUSY;
 8007090:	2001      	movs	r0, #1
	if (hcdc->TxState != 0) {
 8007092:	2a00      	cmp	r2, #0
 8007094:	d107      	bne.n	80070a6 <CDC_Transmit_FS+0x26>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007096:	000a      	movs	r2, r1
 8007098:	0020      	movs	r0, r4
 800709a:	0019      	movs	r1, r3
 800709c:	f7ff fad0 	bl	8006640 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80070a0:	0020      	movs	r0, r4
 80070a2:	f7ff fae1 	bl	8006668 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 80070a6:	bd10      	pop	{r4, pc}
 80070a8:	20000444 	.word	0x20000444

080070ac <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070ac:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
 80070ae:	4801      	ldr	r0, [pc, #4]	@ (80070b4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80070b0:	800b      	strh	r3, [r1, #0]
}
 80070b2:	4770      	bx	lr
 80070b4:	20000160 	.word	0x20000160

080070b8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070b8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 80070ba:	4801      	ldr	r0, [pc, #4]	@ (80070c0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80070bc:	800b      	strh	r3, [r1, #0]
}
 80070be:	4770      	bx	lr
 80070c0:	2000015c 	.word	0x2000015c

080070c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c4:	b510      	push	{r4, lr}
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070c6:	4c04      	ldr	r4, [pc, #16]	@ (80070d8 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80070c8:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80070ca:	0021      	movs	r1, r4
 80070cc:	4803      	ldr	r0, [pc, #12]	@ (80070dc <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80070ce:	f7ff fee9 	bl	8006ea4 <USBD_GetString>
  return USBD_StrDesc;
}
 80070d2:	0020      	movs	r0, r4
 80070d4:	bd10      	pop	{r4, pc}
 80070d6:	46c0      	nop			@ (mov r8, r8)
 80070d8:	20000f08 	.word	0x20000f08
 80070dc:	08008d40 	.word	0x08008d40

080070e0 <USBD_FS_ProductStrDescriptor>:
{
 80070e0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070e2:	4c04      	ldr	r4, [pc, #16]	@ (80070f4 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80070e4:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070e6:	0021      	movs	r1, r4
 80070e8:	4803      	ldr	r0, [pc, #12]	@ (80070f8 <USBD_FS_ProductStrDescriptor+0x18>)
 80070ea:	f7ff fedb 	bl	8006ea4 <USBD_GetString>
}
 80070ee:	0020      	movs	r0, r4
 80070f0:	bd10      	pop	{r4, pc}
 80070f2:	46c0      	nop			@ (mov r8, r8)
 80070f4:	20000f08 	.word	0x20000f08
 80070f8:	08008d54 	.word	0x08008d54

080070fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070fc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070fe:	4c04      	ldr	r4, [pc, #16]	@ (8007110 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8007100:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007102:	0021      	movs	r1, r4
 8007104:	4803      	ldr	r0, [pc, #12]	@ (8007114 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007106:	f7ff fecd 	bl	8006ea4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 800710a:	0020      	movs	r0, r4
 800710c:	bd10      	pop	{r4, pc}
 800710e:	46c0      	nop			@ (mov r8, r8)
 8007110:	20000f08 	.word	0x20000f08
 8007114:	08008d6c 	.word	0x08008d6c

08007118 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007118:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800711a:	4c04      	ldr	r4, [pc, #16]	@ (800712c <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 800711c:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800711e:	0021      	movs	r1, r4
 8007120:	4803      	ldr	r0, [pc, #12]	@ (8007130 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8007122:	f7ff febf 	bl	8006ea4 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8007126:	0020      	movs	r0, r4
 8007128:	bd10      	pop	{r4, pc}
 800712a:	46c0      	nop			@ (mov r8, r8)
 800712c:	20000f08 	.word	0x20000f08
 8007130:	08008d78 	.word	0x08008d78

08007134 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8007134:	231a      	movs	r3, #26
{
 8007136:	b530      	push	{r4, r5, lr}
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007138:	4a52      	ldr	r2, [pc, #328]	@ (8007284 <USBD_FS_SerialStrDescriptor+0x150>)
  *length = USB_SIZ_STRING_SERIAL;
 800713a:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800713c:	4b52      	ldr	r3, [pc, #328]	@ (8007288 <USBD_FS_SerialStrDescriptor+0x154>)

  deviceserial0 += deviceserial2;
 800713e:	6812      	ldr	r2, [r2, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007140:	681b      	ldr	r3, [r3, #0]
  deviceserial0 += deviceserial2;
 8007142:	189b      	adds	r3, r3, r2

  if (deviceserial0 != 0)
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <USBD_FS_SerialStrDescriptor+0x18>
 8007148:	4850      	ldr	r0, [pc, #320]	@ (800728c <USBD_FS_SerialStrDescriptor+0x158>)
}
 800714a:	bd30      	pop	{r4, r5, pc}
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
  {
    if (((value >> 28)) < 0xA)
 800714c:	0f19      	lsrs	r1, r3, #28
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800714e:	000c      	movs	r4, r1
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007150:	4a4f      	ldr	r2, [pc, #316]	@ (8007290 <USBD_FS_SerialStrDescriptor+0x15c>)
      pbuf[2 * idx] = (value >> 28) + '0';
 8007152:	0008      	movs	r0, r1
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007154:	6812      	ldr	r2, [r2, #0]
      pbuf[2 * idx] = (value >> 28) + '0';
 8007156:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8007158:	2909      	cmp	r1, #9
 800715a:	d900      	bls.n	800715e <USBD_FS_SerialStrDescriptor+0x2a>
 800715c:	e086      	b.n	800726c <USBD_FS_SerialStrDescriptor+0x138>
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800715e:	2100      	movs	r1, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007160:	484a      	ldr	r0, [pc, #296]	@ (800728c <USBD_FS_SerialStrDescriptor+0x158>)
    pbuf[2 * idx + 1] = 0;
 8007162:	70c1      	strb	r1, [r0, #3]
    value = value << 4;
 8007164:	0119      	lsls	r1, r3, #4
    if (((value >> 28)) < 0xA)
 8007166:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8007168:	7084      	strb	r4, [r0, #2]
 800716a:	002c      	movs	r4, r5
 800716c:	0029      	movs	r1, r5
 800716e:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8007170:	2d09      	cmp	r5, #9
 8007172:	d878      	bhi.n	8007266 <USBD_FS_SerialStrDescriptor+0x132>
    pbuf[2 * idx + 1] = 0;
 8007174:	2100      	movs	r1, #0
 8007176:	7141      	strb	r1, [r0, #5]
    value = value << 4;
 8007178:	0219      	lsls	r1, r3, #8
    if (((value >> 28)) < 0xA)
 800717a:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800717c:	7104      	strb	r4, [r0, #4]
 800717e:	002c      	movs	r4, r5
 8007180:	0029      	movs	r1, r5
 8007182:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8007184:	2d09      	cmp	r5, #9
 8007186:	d86b      	bhi.n	8007260 <USBD_FS_SerialStrDescriptor+0x12c>
    pbuf[2 * idx + 1] = 0;
 8007188:	2100      	movs	r1, #0
 800718a:	71c1      	strb	r1, [r0, #7]
    value = value << 4;
 800718c:	0319      	lsls	r1, r3, #12
    if (((value >> 28)) < 0xA)
 800718e:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8007190:	7184      	strb	r4, [r0, #6]
 8007192:	002c      	movs	r4, r5
 8007194:	0029      	movs	r1, r5
 8007196:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8007198:	2d09      	cmp	r5, #9
 800719a:	d85e      	bhi.n	800725a <USBD_FS_SerialStrDescriptor+0x126>
    pbuf[2 * idx + 1] = 0;
 800719c:	2100      	movs	r1, #0
 800719e:	7241      	strb	r1, [r0, #9]
    value = value << 4;
 80071a0:	0419      	lsls	r1, r3, #16
    if (((value >> 28)) < 0xA)
 80071a2:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 80071a4:	7204      	strb	r4, [r0, #8]
 80071a6:	002c      	movs	r4, r5
 80071a8:	0029      	movs	r1, r5
 80071aa:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 80071ac:	2d09      	cmp	r5, #9
 80071ae:	d851      	bhi.n	8007254 <USBD_FS_SerialStrDescriptor+0x120>
    pbuf[2 * idx + 1] = 0;
 80071b0:	2100      	movs	r1, #0
 80071b2:	72c1      	strb	r1, [r0, #11]
    value = value << 4;
 80071b4:	0519      	lsls	r1, r3, #20
    if (((value >> 28)) < 0xA)
 80071b6:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 80071b8:	7284      	strb	r4, [r0, #10]
 80071ba:	002c      	movs	r4, r5
 80071bc:	0029      	movs	r1, r5
 80071be:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 80071c0:	2d09      	cmp	r5, #9
 80071c2:	d844      	bhi.n	800724e <USBD_FS_SerialStrDescriptor+0x11a>
    pbuf[2 * idx + 1] = 0;
 80071c4:	2100      	movs	r1, #0
 80071c6:	7341      	strb	r1, [r0, #13]
    value = value << 4;
 80071c8:	0619      	lsls	r1, r3, #24
    if (((value >> 28)) < 0xA)
 80071ca:	0f0d      	lsrs	r5, r1, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 80071cc:	7304      	strb	r4, [r0, #12]
 80071ce:	002c      	movs	r4, r5
 80071d0:	0029      	movs	r1, r5
 80071d2:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 80071d4:	2d09      	cmp	r5, #9
 80071d6:	d837      	bhi.n	8007248 <USBD_FS_SerialStrDescriptor+0x114>
    pbuf[2 * idx + 1] = 0;
 80071d8:	2100      	movs	r1, #0
 80071da:	73c1      	strb	r1, [r0, #15]
    if (((value >> 28)) < 0xA)
 80071dc:	310f      	adds	r1, #15
      pbuf[2 * idx] = (value >> 28) + '0';
 80071de:	7384      	strb	r4, [r0, #14]
    if (((value >> 28)) < 0xA)
 80071e0:	000c      	movs	r4, r1
 80071e2:	401c      	ands	r4, r3
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071e4:	0023      	movs	r3, r4
 80071e6:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 80071e8:	2c09      	cmp	r4, #9
 80071ea:	d800      	bhi.n	80071ee <USBD_FS_SerialStrDescriptor+0xba>
      pbuf[2 * idx] = (value >> 28) + '0';
 80071ec:	3b07      	subs	r3, #7
 80071ee:	7403      	strb	r3, [r0, #16]
    pbuf[2 * idx + 1] = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	7443      	strb	r3, [r0, #17]
    if (((value >> 28)) < 0xA)
 80071f4:	0f13      	lsrs	r3, r2, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 80071f6:	001c      	movs	r4, r3
 80071f8:	0019      	movs	r1, r3
 80071fa:	3430      	adds	r4, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 80071fc:	2b09      	cmp	r3, #9
 80071fe:	d838      	bhi.n	8007272 <USBD_FS_SerialStrDescriptor+0x13e>
    pbuf[2 * idx + 1] = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	74c3      	strb	r3, [r0, #19]
    value = value << 4;
 8007204:	0113      	lsls	r3, r2, #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8007206:	7484      	strb	r4, [r0, #18]
    if (((value >> 28)) < 0xA)
 8007208:	0f1c      	lsrs	r4, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800720a:	0021      	movs	r1, r4
 800720c:	0023      	movs	r3, r4
 800720e:	3130      	adds	r1, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8007210:	2c09      	cmp	r4, #9
 8007212:	d831      	bhi.n	8007278 <USBD_FS_SerialStrDescriptor+0x144>
    pbuf[2 * idx + 1] = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	7543      	strb	r3, [r0, #21]
    value = value << 4;
 8007218:	0213      	lsls	r3, r2, #8
    if (((value >> 28)) < 0xA)
 800721a:	0f1c      	lsrs	r4, r3, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 800721c:	7501      	strb	r1, [r0, #20]
 800721e:	0021      	movs	r1, r4
 8007220:	0023      	movs	r3, r4
 8007222:	3130      	adds	r1, #48	@ 0x30
    if (((value >> 28)) < 0xA)
 8007224:	2c09      	cmp	r4, #9
 8007226:	d82a      	bhi.n	800727e <USBD_FS_SerialStrDescriptor+0x14a>
    pbuf[2 * idx + 1] = 0;
 8007228:	2300      	movs	r3, #0
 800722a:	75c3      	strb	r3, [r0, #23]
    value = value << 4;
 800722c:	0313      	lsls	r3, r2, #12
      pbuf[2 * idx] = (value >> 28) + '0';
 800722e:	7581      	strb	r1, [r0, #22]
    if (((value >> 28)) < 0xA)
 8007230:	0f19      	lsrs	r1, r3, #28
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007232:	000a      	movs	r2, r1
      pbuf[2 * idx] = (value >> 28) + '0';
 8007234:	000b      	movs	r3, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007236:	3237      	adds	r2, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 8007238:	2909      	cmp	r1, #9
 800723a:	d801      	bhi.n	8007240 <USBD_FS_SerialStrDescriptor+0x10c>
      pbuf[2 * idx] = (value >> 28) + '0';
 800723c:	3330      	adds	r3, #48	@ 0x30
 800723e:	001a      	movs	r2, r3
    pbuf[2 * idx + 1] = 0;
 8007240:	2300      	movs	r3, #0
      pbuf[2 * idx] = (value >> 28) + '0';
 8007242:	7602      	strb	r2, [r0, #24]
    pbuf[2 * idx + 1] = 0;
 8007244:	7643      	strb	r3, [r0, #25]
  return (uint8_t *) USBD_StringSerial;
 8007246:	e780      	b.n	800714a <USBD_FS_SerialStrDescriptor+0x16>
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007248:	3137      	adds	r1, #55	@ 0x37
 800724a:	000c      	movs	r4, r1
 800724c:	e7c4      	b.n	80071d8 <USBD_FS_SerialStrDescriptor+0xa4>
 800724e:	3137      	adds	r1, #55	@ 0x37
 8007250:	000c      	movs	r4, r1
 8007252:	e7b7      	b.n	80071c4 <USBD_FS_SerialStrDescriptor+0x90>
 8007254:	3137      	adds	r1, #55	@ 0x37
 8007256:	000c      	movs	r4, r1
 8007258:	e7aa      	b.n	80071b0 <USBD_FS_SerialStrDescriptor+0x7c>
 800725a:	3137      	adds	r1, #55	@ 0x37
 800725c:	000c      	movs	r4, r1
 800725e:	e79d      	b.n	800719c <USBD_FS_SerialStrDescriptor+0x68>
 8007260:	3137      	adds	r1, #55	@ 0x37
 8007262:	000c      	movs	r4, r1
 8007264:	e790      	b.n	8007188 <USBD_FS_SerialStrDescriptor+0x54>
 8007266:	3137      	adds	r1, #55	@ 0x37
 8007268:	000c      	movs	r4, r1
 800726a:	e783      	b.n	8007174 <USBD_FS_SerialStrDescriptor+0x40>
 800726c:	3037      	adds	r0, #55	@ 0x37
 800726e:	0004      	movs	r4, r0
 8007270:	e775      	b.n	800715e <USBD_FS_SerialStrDescriptor+0x2a>
 8007272:	3137      	adds	r1, #55	@ 0x37
 8007274:	000c      	movs	r4, r1
 8007276:	e7c3      	b.n	8007200 <USBD_FS_SerialStrDescriptor+0xcc>
 8007278:	3337      	adds	r3, #55	@ 0x37
 800727a:	0019      	movs	r1, r3
 800727c:	e7ca      	b.n	8007214 <USBD_FS_SerialStrDescriptor+0xe0>
 800727e:	3337      	adds	r3, #55	@ 0x37
 8007280:	0019      	movs	r1, r3
 8007282:	e7d1      	b.n	8007228 <USBD_FS_SerialStrDescriptor+0xf4>
 8007284:	1ffff7b4 	.word	0x1ffff7b4
 8007288:	1ffff7ac 	.word	0x1ffff7ac
 800728c:	20000140 	.word	0x20000140
 8007290:	1ffff7b0 	.word	0x1ffff7b0

08007294 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007294:	b500      	push	{lr}
  if(pcdHandle->Instance==USB)
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <HAL_PCD_MspInit+0x38>)
 8007298:	6802      	ldr	r2, [r0, #0]
{
 800729a:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 800729c:	429a      	cmp	r2, r3
 800729e:	d001      	beq.n	80072a4 <HAL_PCD_MspInit+0x10>
    HAL_NVIC_EnableIRQ(USB_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80072a0:	b003      	add	sp, #12
 80072a2:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 80072a4:	2180      	movs	r1, #128	@ 0x80
 80072a6:	4b0a      	ldr	r3, [pc, #40]	@ (80072d0 <HAL_PCD_MspInit+0x3c>)
 80072a8:	0409      	lsls	r1, r1, #16
 80072aa:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80072ac:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 80072ae:	430a      	orrs	r2, r1
 80072b0:	61da      	str	r2, [r3, #28]
 80072b2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80072b4:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80072b6:	400b      	ands	r3, r1
 80072b8:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80072ba:	2100      	movs	r1, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80072bc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80072be:	f7fb faeb 	bl	8002898 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80072c2:	201f      	movs	r0, #31
 80072c4:	f7fb fb12 	bl	80028ec <HAL_NVIC_EnableIRQ>
}
 80072c8:	e7ea      	b.n	80072a0 <HAL_PCD_MspInit+0xc>
 80072ca:	46c0      	nop			@ (mov r8, r8)
 80072cc:	40005c00 	.word	0x40005c00
 80072d0:	40021000 	.word	0x40021000

080072d4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072d4:	23a6      	movs	r3, #166	@ 0xa6
{
 80072d6:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	18c1      	adds	r1, r0, r3
 80072dc:	3340      	adds	r3, #64	@ 0x40
 80072de:	58c0      	ldr	r0, [r0, r3]
 80072e0:	f7ff fa3a 	bl	8006758 <USBD_LL_SetupStage>
}
 80072e4:	bd10      	pop	{r4, pc}
 80072e6:	46c0      	nop			@ (mov r8, r8)

080072e8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072e8:	008b      	lsls	r3, r1, #2
 80072ea:	185b      	adds	r3, r3, r1
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	18c3      	adds	r3, r0, r3
 80072f0:	3365      	adds	r3, #101	@ 0x65
 80072f2:	33ff      	adds	r3, #255	@ 0xff
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	23b6      	movs	r3, #182	@ 0xb6
{
 80072f8:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	58c0      	ldr	r0, [r0, r3]
 80072fe:	f7ff fa5d 	bl	80067bc <USBD_LL_DataOutStage>
}
 8007302:	bd10      	pop	{r4, pc}

08007304 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007304:	008b      	lsls	r3, r1, #2
 8007306:	185b      	adds	r3, r3, r1
 8007308:	00db      	lsls	r3, r3, #3
 800730a:	18c3      	adds	r3, r0, r3
 800730c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800730e:	23b6      	movs	r3, #182	@ 0xb6
{
 8007310:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	58c0      	ldr	r0, [r0, r3]
 8007316:	f7ff fa9d 	bl	8006854 <USBD_LL_DataInStage>
}
 800731a:	bd10      	pop	{r4, pc}

0800731c <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800731c:	23b6      	movs	r3, #182	@ 0xb6
{
 800731e:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	58c0      	ldr	r0, [r0, r3]
 8007324:	f7ff fb48 	bl	80069b8 <USBD_LL_SOF>
}
 8007328:	bd10      	pop	{r4, pc}
 800732a:	46c0      	nop			@ (mov r8, r8)

0800732c <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800732c:	b570      	push	{r4, r5, r6, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800732e:	7943      	ldrb	r3, [r0, #5]
{
 8007330:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007332:	2b02      	cmp	r3, #2
 8007334:	d001      	beq.n	800733a <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8007336:	f7f9 fd51 	bl	8000ddc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800733a:	25b6      	movs	r5, #182	@ 0xb6
 800733c:	00ad      	lsls	r5, r5, #2
 800733e:	2101      	movs	r1, #1
 8007340:	5960      	ldr	r0, [r4, r5]
 8007342:	f7ff fb1d 	bl	8006980 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007346:	5960      	ldr	r0, [r4, r5]
 8007348:	f7ff faea 	bl	8006920 <USBD_LL_Reset>
}
 800734c:	bd70      	pop	{r4, r5, r6, pc}
 800734e:	46c0      	nop			@ (mov r8, r8)

08007350 <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007350:	23b6      	movs	r3, #182	@ 0xb6
{
 8007352:	b510      	push	{r4, lr}
 8007354:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	58c0      	ldr	r0, [r0, r3]
 800735a:	f7ff fb15 	bl	8006988 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800735e:	7a63      	ldrb	r3, [r4, #9]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d004      	beq.n	800736e <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007364:	2106      	movs	r1, #6
 8007366:	4a02      	ldr	r2, [pc, #8]	@ (8007370 <HAL_PCD_SuspendCallback+0x20>)
 8007368:	6913      	ldr	r3, [r2, #16]
 800736a:	430b      	orrs	r3, r1
 800736c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800736e:	bd10      	pop	{r4, pc}
 8007370:	e000ed00 	.word	0xe000ed00

08007374 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007374:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007376:	7a43      	ldrb	r3, [r0, #9]
{
 8007378:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 800737a:	2b00      	cmp	r3, #0
 800737c:	d105      	bne.n	800738a <HAL_PCD_ResumeCallback+0x16>
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    SystemClockConfig_Resume();
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800737e:	23b6      	movs	r3, #182	@ 0xb6
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	58e0      	ldr	r0, [r4, r3]
 8007384:	f7ff fb0c 	bl	80069a0 <USBD_LL_Resume>
}
 8007388:	bd10      	pop	{r4, pc}
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800738a:	2106      	movs	r1, #6
 800738c:	4a03      	ldr	r2, [pc, #12]	@ (800739c <HAL_PCD_ResumeCallback+0x28>)
 800738e:	6913      	ldr	r3, [r2, #16]
 8007390:	438b      	bics	r3, r1
 8007392:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8007394:	f7f9 f8a4 	bl	80004e0 <SystemClock_Config>
}
 8007398:	e7f1      	b.n	800737e <HAL_PCD_ResumeCallback+0xa>
 800739a:	46c0      	nop			@ (mov r8, r8)
 800739c:	e000ed00 	.word	0xe000ed00

080073a0 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 80073a0:	23b6      	movs	r3, #182	@ 0xb6
{
 80073a2:	b570      	push	{r4, r5, r6, lr}
 80073a4:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 80073a6:	481d      	ldr	r0, [pc, #116]	@ (800741c <USBD_LL_Init+0x7c>)
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 80073ac:	3b18      	subs	r3, #24
 80073ae:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 80073b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007420 <USBD_LL_Init+0x80>)
 80073b2:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80073b4:	2382      	movs	r3, #130	@ 0x82
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073ba:	2302      	movs	r3, #2
 80073bc:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80073be:	2300      	movs	r3, #0
 80073c0:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80073c2:	8143      	strh	r3, [r0, #10]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80073c4:	f7fc f9f4 	bl	80037b0 <HAL_PCD_Init>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d123      	bne.n	8007414 <USBD_LL_Init+0x74>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80073cc:	25b0      	movs	r5, #176	@ 0xb0
 80073ce:	00ad      	lsls	r5, r5, #2
 80073d0:	5960      	ldr	r0, [r4, r5]
 80073d2:	2318      	movs	r3, #24
 80073d4:	2200      	movs	r2, #0
 80073d6:	2100      	movs	r1, #0
 80073d8:	f7fd f9da 	bl	8004790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80073dc:	5960      	ldr	r0, [r4, r5]
 80073de:	2358      	movs	r3, #88	@ 0x58
 80073e0:	2200      	movs	r2, #0
 80073e2:	2180      	movs	r1, #128	@ 0x80
 80073e4:	f7fd f9d4 	bl	8004790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80073e8:	5960      	ldr	r0, [r4, r5]
 80073ea:	23c0      	movs	r3, #192	@ 0xc0
 80073ec:	2200      	movs	r2, #0
 80073ee:	2181      	movs	r1, #129	@ 0x81
 80073f0:	f7fd f9ce 	bl	8004790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80073f4:	2388      	movs	r3, #136	@ 0x88
 80073f6:	5960      	ldr	r0, [r4, r5]
 80073f8:	2200      	movs	r2, #0
 80073fa:	2101      	movs	r1, #1
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	f7fd f9c7 	bl	8004790 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007402:	2380      	movs	r3, #128	@ 0x80
 8007404:	5960      	ldr	r0, [r4, r5]
 8007406:	2200      	movs	r2, #0
 8007408:	2182      	movs	r1, #130	@ 0x82
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	f7fd f9c0 	bl	8004790 <HAL_PCDEx_PMAConfig>
}
 8007410:	2000      	movs	r0, #0
 8007412:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8007414:	f7f9 fce2 	bl	8000ddc <Error_Handler>
 8007418:	e7d8      	b.n	80073cc <USBD_LL_Init+0x2c>
 800741a:	46c0      	nop			@ (mov r8, r8)
 800741c:	20001328 	.word	0x20001328
 8007420:	40005c00 	.word	0x40005c00

08007424 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8007424:	23b0      	movs	r3, #176	@ 0xb0
 8007426:	009b      	lsls	r3, r3, #2
{
 8007428:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800742a:	58c0      	ldr	r0, [r0, r3]
 800742c:	f7fc facc 	bl	80039c8 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007430:	2800      	cmp	r0, #0
 8007432:	d003      	beq.n	800743c <USBD_LL_Start+0x18>
 8007434:	3802      	subs	r0, #2
 8007436:	1e43      	subs	r3, r0, #1
 8007438:	4198      	sbcs	r0, r3
 800743a:	3001      	adds	r0, #1
}
 800743c:	bd10      	pop	{r4, pc}
 800743e:	46c0      	nop			@ (mov r8, r8)

08007440 <USBD_LL_OpenEP>:
{
 8007440:	b510      	push	{r4, lr}
 8007442:	0014      	movs	r4, r2
 8007444:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007446:	23b0      	movs	r3, #176	@ 0xb0
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	58c0      	ldr	r0, [r0, r3]
 800744c:	0023      	movs	r3, r4
 800744e:	f7fd f885 	bl	800455c <HAL_PCD_EP_Open>
  switch (hal_status)
 8007452:	2800      	cmp	r0, #0
 8007454:	d003      	beq.n	800745e <USBD_LL_OpenEP+0x1e>
 8007456:	3802      	subs	r0, #2
 8007458:	1e43      	subs	r3, r0, #1
 800745a:	4198      	sbcs	r0, r3
 800745c:	3001      	adds	r0, #1
}
 800745e:	bd10      	pop	{r4, pc}

08007460 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007460:	23b0      	movs	r3, #176	@ 0xb0
 8007462:	009b      	lsls	r3, r3, #2
{
 8007464:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007466:	58c0      	ldr	r0, [r0, r3]
 8007468:	f7fd f8aa 	bl	80045c0 <HAL_PCD_EP_Close>
  switch (hal_status)
 800746c:	2800      	cmp	r0, #0
 800746e:	d003      	beq.n	8007478 <USBD_LL_CloseEP+0x18>
 8007470:	3802      	subs	r0, #2
 8007472:	1e43      	subs	r3, r0, #1
 8007474:	4198      	sbcs	r0, r3
 8007476:	3001      	adds	r0, #1
}
 8007478:	bd10      	pop	{r4, pc}
 800747a:	46c0      	nop			@ (mov r8, r8)

0800747c <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800747c:	23b0      	movs	r3, #176	@ 0xb0
 800747e:	009b      	lsls	r3, r3, #2
{
 8007480:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007482:	58c0      	ldr	r0, [r0, r3]
 8007484:	f7fd f90e 	bl	80046a4 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8007488:	2800      	cmp	r0, #0
 800748a:	d003      	beq.n	8007494 <USBD_LL_StallEP+0x18>
 800748c:	3802      	subs	r0, #2
 800748e:	1e43      	subs	r3, r0, #1
 8007490:	4198      	sbcs	r0, r3
 8007492:	3001      	adds	r0, #1
}
 8007494:	bd10      	pop	{r4, pc}
 8007496:	46c0      	nop			@ (mov r8, r8)

08007498 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007498:	23b0      	movs	r3, #176	@ 0xb0
 800749a:	009b      	lsls	r3, r3, #2
{
 800749c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800749e:	58c0      	ldr	r0, [r0, r3]
 80074a0:	f7fd f93c 	bl	800471c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d003      	beq.n	80074b0 <USBD_LL_ClearStallEP+0x18>
 80074a8:	3802      	subs	r0, #2
 80074aa:	1e43      	subs	r3, r0, #1
 80074ac:	4198      	sbcs	r0, r3
 80074ae:	3001      	adds	r0, #1
}
 80074b0:	bd10      	pop	{r4, pc}
 80074b2:	46c0      	nop			@ (mov r8, r8)

080074b4 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074b4:	23b0      	movs	r3, #176	@ 0xb0
  if((ep_addr & 0x80) == 0x80)
 80074b6:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 80074bc:	2a00      	cmp	r2, #0
 80074be:	db07      	blt.n	80074d0 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80074c0:	008a      	lsls	r2, r1, #2
 80074c2:	1852      	adds	r2, r2, r1
 80074c4:	00d2      	lsls	r2, r2, #3
 80074c6:	189b      	adds	r3, r3, r2
 80074c8:	3353      	adds	r3, #83	@ 0x53
 80074ca:	33ff      	adds	r3, #255	@ 0xff
 80074cc:	7818      	ldrb	r0, [r3, #0]
}
 80074ce:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80074d0:	227f      	movs	r2, #127	@ 0x7f
 80074d2:	4011      	ands	r1, r2
 80074d4:	008a      	lsls	r2, r1, #2
 80074d6:	1852      	adds	r2, r2, r1
 80074d8:	00d2      	lsls	r2, r2, #3
 80074da:	189b      	adds	r3, r3, r2
 80074dc:	7c98      	ldrb	r0, [r3, #18]
 80074de:	e7f6      	b.n	80074ce <USBD_LL_IsStallEP+0x1a>

080074e0 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074e0:	23b0      	movs	r3, #176	@ 0xb0
 80074e2:	009b      	lsls	r3, r3, #2
{
 80074e4:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074e6:	58c0      	ldr	r0, [r0, r3]
 80074e8:	f7fd f824 	bl	8004534 <HAL_PCD_SetAddress>
  switch (hal_status)
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d003      	beq.n	80074f8 <USBD_LL_SetUSBAddress+0x18>
 80074f0:	3802      	subs	r0, #2
 80074f2:	1e43      	subs	r3, r0, #1
 80074f4:	4198      	sbcs	r0, r3
 80074f6:	3001      	adds	r0, #1
}
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	46c0      	nop			@ (mov r8, r8)

080074fc <USBD_LL_Transmit>:
{
 80074fc:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074fe:	24b0      	movs	r4, #176	@ 0xb0
 8007500:	00a4      	lsls	r4, r4, #2
 8007502:	5900      	ldr	r0, [r0, r4]
 8007504:	f7fd f8b4 	bl	8004670 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8007508:	2800      	cmp	r0, #0
 800750a:	d003      	beq.n	8007514 <USBD_LL_Transmit+0x18>
 800750c:	3802      	subs	r0, #2
 800750e:	1e43      	subs	r3, r0, #1
 8007510:	4198      	sbcs	r0, r3
 8007512:	3001      	adds	r0, #1
}
 8007514:	bd10      	pop	{r4, pc}
 8007516:	46c0      	nop			@ (mov r8, r8)

08007518 <USBD_LL_PrepareReceive>:
{
 8007518:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800751a:	24b0      	movs	r4, #176	@ 0xb0
 800751c:	00a4      	lsls	r4, r4, #2
 800751e:	5900      	ldr	r0, [r0, r4]
 8007520:	f7fd f87e 	bl	8004620 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8007524:	2800      	cmp	r0, #0
 8007526:	d003      	beq.n	8007530 <USBD_LL_PrepareReceive+0x18>
 8007528:	3802      	subs	r0, #2
 800752a:	1e43      	subs	r3, r0, #1
 800752c:	4198      	sbcs	r0, r3
 800752e:	3001      	adds	r0, #1
}
 8007530:	bd10      	pop	{r4, pc}
 8007532:	46c0      	nop			@ (mov r8, r8)

08007534 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007534:	23b0      	movs	r3, #176	@ 0xb0
{
 8007536:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	58c0      	ldr	r0, [r0, r3]
 800753c:	f7fd f88e 	bl	800465c <HAL_PCD_EP_GetRxCount>
}
 8007540:	bd10      	pop	{r4, pc}
 8007542:	46c0      	nop			@ (mov r8, r8)

08007544 <USBD_static_malloc>:
  return mem;
 8007544:	4800      	ldr	r0, [pc, #0]	@ (8007548 <USBD_static_malloc+0x4>)
}
 8007546:	4770      	bx	lr
 8007548:	20001108 	.word	0x20001108

0800754c <USBD_static_free>:
}
 800754c:	4770      	bx	lr
 800754e:	46c0      	nop			@ (mov r8, r8)

08007550 <atoi>:
 8007550:	b510      	push	{r4, lr}
 8007552:	220a      	movs	r2, #10
 8007554:	2100      	movs	r1, #0
 8007556:	f000 f88b 	bl	8007670 <strtol>
 800755a:	bd10      	pop	{r4, pc}

0800755c <_strtol_l.constprop.0>:
 800755c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755e:	b085      	sub	sp, #20
 8007560:	0017      	movs	r7, r2
 8007562:	001e      	movs	r6, r3
 8007564:	9003      	str	r0, [sp, #12]
 8007566:	9101      	str	r1, [sp, #4]
 8007568:	2b24      	cmp	r3, #36	@ 0x24
 800756a:	d844      	bhi.n	80075f6 <_strtol_l.constprop.0+0x9a>
 800756c:	000c      	movs	r4, r1
 800756e:	2b01      	cmp	r3, #1
 8007570:	d041      	beq.n	80075f6 <_strtol_l.constprop.0+0x9a>
 8007572:	4b3d      	ldr	r3, [pc, #244]	@ (8007668 <_strtol_l.constprop.0+0x10c>)
 8007574:	2208      	movs	r2, #8
 8007576:	469c      	mov	ip, r3
 8007578:	0023      	movs	r3, r4
 800757a:	4661      	mov	r1, ip
 800757c:	781d      	ldrb	r5, [r3, #0]
 800757e:	3401      	adds	r4, #1
 8007580:	5d48      	ldrb	r0, [r1, r5]
 8007582:	0001      	movs	r1, r0
 8007584:	4011      	ands	r1, r2
 8007586:	4210      	tst	r0, r2
 8007588:	d1f6      	bne.n	8007578 <_strtol_l.constprop.0+0x1c>
 800758a:	2d2d      	cmp	r5, #45	@ 0x2d
 800758c:	d13a      	bne.n	8007604 <_strtol_l.constprop.0+0xa8>
 800758e:	7825      	ldrb	r5, [r4, #0]
 8007590:	1c9c      	adds	r4, r3, #2
 8007592:	2301      	movs	r3, #1
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	2210      	movs	r2, #16
 8007598:	0033      	movs	r3, r6
 800759a:	4393      	bics	r3, r2
 800759c:	d109      	bne.n	80075b2 <_strtol_l.constprop.0+0x56>
 800759e:	2d30      	cmp	r5, #48	@ 0x30
 80075a0:	d136      	bne.n	8007610 <_strtol_l.constprop.0+0xb4>
 80075a2:	2120      	movs	r1, #32
 80075a4:	7823      	ldrb	r3, [r4, #0]
 80075a6:	438b      	bics	r3, r1
 80075a8:	2b58      	cmp	r3, #88	@ 0x58
 80075aa:	d131      	bne.n	8007610 <_strtol_l.constprop.0+0xb4>
 80075ac:	0016      	movs	r6, r2
 80075ae:	7865      	ldrb	r5, [r4, #1]
 80075b0:	3402      	adds	r4, #2
 80075b2:	4a2e      	ldr	r2, [pc, #184]	@ (800766c <_strtol_l.constprop.0+0x110>)
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	4694      	mov	ip, r2
 80075b8:	4463      	add	r3, ip
 80075ba:	0031      	movs	r1, r6
 80075bc:	0018      	movs	r0, r3
 80075be:	9302      	str	r3, [sp, #8]
 80075c0:	f7f8 fe3a 	bl	8000238 <__aeabi_uidivmod>
 80075c4:	2200      	movs	r2, #0
 80075c6:	4684      	mov	ip, r0
 80075c8:	0010      	movs	r0, r2
 80075ca:	002b      	movs	r3, r5
 80075cc:	3b30      	subs	r3, #48	@ 0x30
 80075ce:	2b09      	cmp	r3, #9
 80075d0:	d825      	bhi.n	800761e <_strtol_l.constprop.0+0xc2>
 80075d2:	001d      	movs	r5, r3
 80075d4:	42ae      	cmp	r6, r5
 80075d6:	dd31      	ble.n	800763c <_strtol_l.constprop.0+0xe0>
 80075d8:	1c53      	adds	r3, r2, #1
 80075da:	d009      	beq.n	80075f0 <_strtol_l.constprop.0+0x94>
 80075dc:	2201      	movs	r2, #1
 80075de:	4252      	negs	r2, r2
 80075e0:	4584      	cmp	ip, r0
 80075e2:	d305      	bcc.n	80075f0 <_strtol_l.constprop.0+0x94>
 80075e4:	d101      	bne.n	80075ea <_strtol_l.constprop.0+0x8e>
 80075e6:	42a9      	cmp	r1, r5
 80075e8:	db25      	blt.n	8007636 <_strtol_l.constprop.0+0xda>
 80075ea:	2201      	movs	r2, #1
 80075ec:	4370      	muls	r0, r6
 80075ee:	1828      	adds	r0, r5, r0
 80075f0:	7825      	ldrb	r5, [r4, #0]
 80075f2:	3401      	adds	r4, #1
 80075f4:	e7e9      	b.n	80075ca <_strtol_l.constprop.0+0x6e>
 80075f6:	f000 fa2d 	bl	8007a54 <__errno>
 80075fa:	2316      	movs	r3, #22
 80075fc:	6003      	str	r3, [r0, #0]
 80075fe:	2000      	movs	r0, #0
 8007600:	b005      	add	sp, #20
 8007602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007604:	9100      	str	r1, [sp, #0]
 8007606:	2d2b      	cmp	r5, #43	@ 0x2b
 8007608:	d1c5      	bne.n	8007596 <_strtol_l.constprop.0+0x3a>
 800760a:	7825      	ldrb	r5, [r4, #0]
 800760c:	1c9c      	adds	r4, r3, #2
 800760e:	e7c2      	b.n	8007596 <_strtol_l.constprop.0+0x3a>
 8007610:	2e00      	cmp	r6, #0
 8007612:	d1ce      	bne.n	80075b2 <_strtol_l.constprop.0+0x56>
 8007614:	3608      	adds	r6, #8
 8007616:	2d30      	cmp	r5, #48	@ 0x30
 8007618:	d0cb      	beq.n	80075b2 <_strtol_l.constprop.0+0x56>
 800761a:	3602      	adds	r6, #2
 800761c:	e7c9      	b.n	80075b2 <_strtol_l.constprop.0+0x56>
 800761e:	002b      	movs	r3, r5
 8007620:	3b41      	subs	r3, #65	@ 0x41
 8007622:	2b19      	cmp	r3, #25
 8007624:	d801      	bhi.n	800762a <_strtol_l.constprop.0+0xce>
 8007626:	3d37      	subs	r5, #55	@ 0x37
 8007628:	e7d4      	b.n	80075d4 <_strtol_l.constprop.0+0x78>
 800762a:	002b      	movs	r3, r5
 800762c:	3b61      	subs	r3, #97	@ 0x61
 800762e:	2b19      	cmp	r3, #25
 8007630:	d804      	bhi.n	800763c <_strtol_l.constprop.0+0xe0>
 8007632:	3d57      	subs	r5, #87	@ 0x57
 8007634:	e7ce      	b.n	80075d4 <_strtol_l.constprop.0+0x78>
 8007636:	2201      	movs	r2, #1
 8007638:	4252      	negs	r2, r2
 800763a:	e7d9      	b.n	80075f0 <_strtol_l.constprop.0+0x94>
 800763c:	1c53      	adds	r3, r2, #1
 800763e:	d108      	bne.n	8007652 <_strtol_l.constprop.0+0xf6>
 8007640:	2322      	movs	r3, #34	@ 0x22
 8007642:	9a03      	ldr	r2, [sp, #12]
 8007644:	9802      	ldr	r0, [sp, #8]
 8007646:	6013      	str	r3, [r2, #0]
 8007648:	2f00      	cmp	r7, #0
 800764a:	d0d9      	beq.n	8007600 <_strtol_l.constprop.0+0xa4>
 800764c:	1e63      	subs	r3, r4, #1
 800764e:	9301      	str	r3, [sp, #4]
 8007650:	e007      	b.n	8007662 <_strtol_l.constprop.0+0x106>
 8007652:	9b00      	ldr	r3, [sp, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d000      	beq.n	800765a <_strtol_l.constprop.0+0xfe>
 8007658:	4240      	negs	r0, r0
 800765a:	2f00      	cmp	r7, #0
 800765c:	d0d0      	beq.n	8007600 <_strtol_l.constprop.0+0xa4>
 800765e:	2a00      	cmp	r2, #0
 8007660:	d1f4      	bne.n	800764c <_strtol_l.constprop.0+0xf0>
 8007662:	9b01      	ldr	r3, [sp, #4]
 8007664:	603b      	str	r3, [r7, #0]
 8007666:	e7cb      	b.n	8007600 <_strtol_l.constprop.0+0xa4>
 8007668:	08008d87 	.word	0x08008d87
 800766c:	7fffffff 	.word	0x7fffffff

08007670 <strtol>:
 8007670:	b510      	push	{r4, lr}
 8007672:	4c04      	ldr	r4, [pc, #16]	@ (8007684 <strtol+0x14>)
 8007674:	0013      	movs	r3, r2
 8007676:	000a      	movs	r2, r1
 8007678:	0001      	movs	r1, r0
 800767a:	6820      	ldr	r0, [r4, #0]
 800767c:	f7ff ff6e 	bl	800755c <_strtol_l.constprop.0>
 8007680:	bd10      	pop	{r4, pc}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	2000019c 	.word	0x2000019c

08007688 <std>:
 8007688:	2300      	movs	r3, #0
 800768a:	b510      	push	{r4, lr}
 800768c:	0004      	movs	r4, r0
 800768e:	6003      	str	r3, [r0, #0]
 8007690:	6043      	str	r3, [r0, #4]
 8007692:	6083      	str	r3, [r0, #8]
 8007694:	8181      	strh	r1, [r0, #12]
 8007696:	6643      	str	r3, [r0, #100]	@ 0x64
 8007698:	81c2      	strh	r2, [r0, #14]
 800769a:	6103      	str	r3, [r0, #16]
 800769c:	6143      	str	r3, [r0, #20]
 800769e:	6183      	str	r3, [r0, #24]
 80076a0:	0019      	movs	r1, r3
 80076a2:	2208      	movs	r2, #8
 80076a4:	305c      	adds	r0, #92	@ 0x5c
 80076a6:	f000 f91f 	bl	80078e8 <memset>
 80076aa:	4b0b      	ldr	r3, [pc, #44]	@ (80076d8 <std+0x50>)
 80076ac:	6224      	str	r4, [r4, #32]
 80076ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80076b0:	4b0a      	ldr	r3, [pc, #40]	@ (80076dc <std+0x54>)
 80076b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076b4:	4b0a      	ldr	r3, [pc, #40]	@ (80076e0 <std+0x58>)
 80076b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076b8:	4b0a      	ldr	r3, [pc, #40]	@ (80076e4 <std+0x5c>)
 80076ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80076bc:	4b0a      	ldr	r3, [pc, #40]	@ (80076e8 <std+0x60>)
 80076be:	429c      	cmp	r4, r3
 80076c0:	d005      	beq.n	80076ce <std+0x46>
 80076c2:	4b0a      	ldr	r3, [pc, #40]	@ (80076ec <std+0x64>)
 80076c4:	429c      	cmp	r4, r3
 80076c6:	d002      	beq.n	80076ce <std+0x46>
 80076c8:	4b09      	ldr	r3, [pc, #36]	@ (80076f0 <std+0x68>)
 80076ca:	429c      	cmp	r4, r3
 80076cc:	d103      	bne.n	80076d6 <std+0x4e>
 80076ce:	0020      	movs	r0, r4
 80076d0:	3058      	adds	r0, #88	@ 0x58
 80076d2:	f000 f9e9 	bl	8007aa8 <__retarget_lock_init_recursive>
 80076d6:	bd10      	pop	{r4, pc}
 80076d8:	08007851 	.word	0x08007851
 80076dc:	08007879 	.word	0x08007879
 80076e0:	080078b1 	.word	0x080078b1
 80076e4:	080078dd 	.word	0x080078dd
 80076e8:	20001604 	.word	0x20001604
 80076ec:	2000166c 	.word	0x2000166c
 80076f0:	200016d4 	.word	0x200016d4

080076f4 <stdio_exit_handler>:
 80076f4:	b510      	push	{r4, lr}
 80076f6:	4a03      	ldr	r2, [pc, #12]	@ (8007704 <stdio_exit_handler+0x10>)
 80076f8:	4903      	ldr	r1, [pc, #12]	@ (8007708 <stdio_exit_handler+0x14>)
 80076fa:	4804      	ldr	r0, [pc, #16]	@ (800770c <stdio_exit_handler+0x18>)
 80076fc:	f000 f86c 	bl	80077d8 <_fwalk_sglue>
 8007700:	bd10      	pop	{r4, pc}
 8007702:	46c0      	nop			@ (mov r8, r8)
 8007704:	20000190 	.word	0x20000190
 8007708:	080083dd 	.word	0x080083dd
 800770c:	200001a0 	.word	0x200001a0

08007710 <cleanup_stdio>:
 8007710:	6841      	ldr	r1, [r0, #4]
 8007712:	4b0b      	ldr	r3, [pc, #44]	@ (8007740 <cleanup_stdio+0x30>)
 8007714:	b510      	push	{r4, lr}
 8007716:	0004      	movs	r4, r0
 8007718:	4299      	cmp	r1, r3
 800771a:	d001      	beq.n	8007720 <cleanup_stdio+0x10>
 800771c:	f000 fe5e 	bl	80083dc <_fflush_r>
 8007720:	68a1      	ldr	r1, [r4, #8]
 8007722:	4b08      	ldr	r3, [pc, #32]	@ (8007744 <cleanup_stdio+0x34>)
 8007724:	4299      	cmp	r1, r3
 8007726:	d002      	beq.n	800772e <cleanup_stdio+0x1e>
 8007728:	0020      	movs	r0, r4
 800772a:	f000 fe57 	bl	80083dc <_fflush_r>
 800772e:	68e1      	ldr	r1, [r4, #12]
 8007730:	4b05      	ldr	r3, [pc, #20]	@ (8007748 <cleanup_stdio+0x38>)
 8007732:	4299      	cmp	r1, r3
 8007734:	d002      	beq.n	800773c <cleanup_stdio+0x2c>
 8007736:	0020      	movs	r0, r4
 8007738:	f000 fe50 	bl	80083dc <_fflush_r>
 800773c:	bd10      	pop	{r4, pc}
 800773e:	46c0      	nop			@ (mov r8, r8)
 8007740:	20001604 	.word	0x20001604
 8007744:	2000166c 	.word	0x2000166c
 8007748:	200016d4 	.word	0x200016d4

0800774c <global_stdio_init.part.0>:
 800774c:	b510      	push	{r4, lr}
 800774e:	4b09      	ldr	r3, [pc, #36]	@ (8007774 <global_stdio_init.part.0+0x28>)
 8007750:	4a09      	ldr	r2, [pc, #36]	@ (8007778 <global_stdio_init.part.0+0x2c>)
 8007752:	2104      	movs	r1, #4
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	4809      	ldr	r0, [pc, #36]	@ (800777c <global_stdio_init.part.0+0x30>)
 8007758:	2200      	movs	r2, #0
 800775a:	f7ff ff95 	bl	8007688 <std>
 800775e:	2201      	movs	r2, #1
 8007760:	2109      	movs	r1, #9
 8007762:	4807      	ldr	r0, [pc, #28]	@ (8007780 <global_stdio_init.part.0+0x34>)
 8007764:	f7ff ff90 	bl	8007688 <std>
 8007768:	2202      	movs	r2, #2
 800776a:	2112      	movs	r1, #18
 800776c:	4805      	ldr	r0, [pc, #20]	@ (8007784 <global_stdio_init.part.0+0x38>)
 800776e:	f7ff ff8b 	bl	8007688 <std>
 8007772:	bd10      	pop	{r4, pc}
 8007774:	2000173c 	.word	0x2000173c
 8007778:	080076f5 	.word	0x080076f5
 800777c:	20001604 	.word	0x20001604
 8007780:	2000166c 	.word	0x2000166c
 8007784:	200016d4 	.word	0x200016d4

08007788 <__sfp_lock_acquire>:
 8007788:	b510      	push	{r4, lr}
 800778a:	4802      	ldr	r0, [pc, #8]	@ (8007794 <__sfp_lock_acquire+0xc>)
 800778c:	f000 f98d 	bl	8007aaa <__retarget_lock_acquire_recursive>
 8007790:	bd10      	pop	{r4, pc}
 8007792:	46c0      	nop			@ (mov r8, r8)
 8007794:	20001745 	.word	0x20001745

08007798 <__sfp_lock_release>:
 8007798:	b510      	push	{r4, lr}
 800779a:	4802      	ldr	r0, [pc, #8]	@ (80077a4 <__sfp_lock_release+0xc>)
 800779c:	f000 f986 	bl	8007aac <__retarget_lock_release_recursive>
 80077a0:	bd10      	pop	{r4, pc}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	20001745 	.word	0x20001745

080077a8 <__sinit>:
 80077a8:	b510      	push	{r4, lr}
 80077aa:	0004      	movs	r4, r0
 80077ac:	f7ff ffec 	bl	8007788 <__sfp_lock_acquire>
 80077b0:	6a23      	ldr	r3, [r4, #32]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <__sinit+0x14>
 80077b6:	f7ff ffef 	bl	8007798 <__sfp_lock_release>
 80077ba:	bd10      	pop	{r4, pc}
 80077bc:	4b04      	ldr	r3, [pc, #16]	@ (80077d0 <__sinit+0x28>)
 80077be:	6223      	str	r3, [r4, #32]
 80077c0:	4b04      	ldr	r3, [pc, #16]	@ (80077d4 <__sinit+0x2c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1f6      	bne.n	80077b6 <__sinit+0xe>
 80077c8:	f7ff ffc0 	bl	800774c <global_stdio_init.part.0>
 80077cc:	e7f3      	b.n	80077b6 <__sinit+0xe>
 80077ce:	46c0      	nop			@ (mov r8, r8)
 80077d0:	08007711 	.word	0x08007711
 80077d4:	2000173c 	.word	0x2000173c

080077d8 <_fwalk_sglue>:
 80077d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077da:	0014      	movs	r4, r2
 80077dc:	2600      	movs	r6, #0
 80077de:	9000      	str	r0, [sp, #0]
 80077e0:	9101      	str	r1, [sp, #4]
 80077e2:	68a5      	ldr	r5, [r4, #8]
 80077e4:	6867      	ldr	r7, [r4, #4]
 80077e6:	3f01      	subs	r7, #1
 80077e8:	d504      	bpl.n	80077f4 <_fwalk_sglue+0x1c>
 80077ea:	6824      	ldr	r4, [r4, #0]
 80077ec:	2c00      	cmp	r4, #0
 80077ee:	d1f8      	bne.n	80077e2 <_fwalk_sglue+0xa>
 80077f0:	0030      	movs	r0, r6
 80077f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077f4:	89ab      	ldrh	r3, [r5, #12]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d908      	bls.n	800780c <_fwalk_sglue+0x34>
 80077fa:	220e      	movs	r2, #14
 80077fc:	5eab      	ldrsh	r3, [r5, r2]
 80077fe:	3301      	adds	r3, #1
 8007800:	d004      	beq.n	800780c <_fwalk_sglue+0x34>
 8007802:	0029      	movs	r1, r5
 8007804:	9800      	ldr	r0, [sp, #0]
 8007806:	9b01      	ldr	r3, [sp, #4]
 8007808:	4798      	blx	r3
 800780a:	4306      	orrs	r6, r0
 800780c:	3568      	adds	r5, #104	@ 0x68
 800780e:	e7ea      	b.n	80077e6 <_fwalk_sglue+0xe>

08007810 <siprintf>:
 8007810:	b40e      	push	{r1, r2, r3}
 8007812:	b500      	push	{lr}
 8007814:	490b      	ldr	r1, [pc, #44]	@ (8007844 <siprintf+0x34>)
 8007816:	b09c      	sub	sp, #112	@ 0x70
 8007818:	ab1d      	add	r3, sp, #116	@ 0x74
 800781a:	9002      	str	r0, [sp, #8]
 800781c:	9006      	str	r0, [sp, #24]
 800781e:	9107      	str	r1, [sp, #28]
 8007820:	9104      	str	r1, [sp, #16]
 8007822:	4809      	ldr	r0, [pc, #36]	@ (8007848 <siprintf+0x38>)
 8007824:	4909      	ldr	r1, [pc, #36]	@ (800784c <siprintf+0x3c>)
 8007826:	cb04      	ldmia	r3!, {r2}
 8007828:	9105      	str	r1, [sp, #20]
 800782a:	6800      	ldr	r0, [r0, #0]
 800782c:	a902      	add	r1, sp, #8
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	f000 fad2 	bl	8007dd8 <_svfiprintf_r>
 8007834:	2200      	movs	r2, #0
 8007836:	9b02      	ldr	r3, [sp, #8]
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	b01c      	add	sp, #112	@ 0x70
 800783c:	bc08      	pop	{r3}
 800783e:	b003      	add	sp, #12
 8007840:	4718      	bx	r3
 8007842:	46c0      	nop			@ (mov r8, r8)
 8007844:	7fffffff 	.word	0x7fffffff
 8007848:	2000019c 	.word	0x2000019c
 800784c:	ffff0208 	.word	0xffff0208

08007850 <__sread>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	000c      	movs	r4, r1
 8007854:	250e      	movs	r5, #14
 8007856:	5f49      	ldrsh	r1, [r1, r5]
 8007858:	f000 f8d4 	bl	8007a04 <_read_r>
 800785c:	2800      	cmp	r0, #0
 800785e:	db03      	blt.n	8007868 <__sread+0x18>
 8007860:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007862:	181b      	adds	r3, r3, r0
 8007864:	6563      	str	r3, [r4, #84]	@ 0x54
 8007866:	bd70      	pop	{r4, r5, r6, pc}
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	4a02      	ldr	r2, [pc, #8]	@ (8007874 <__sread+0x24>)
 800786c:	4013      	ands	r3, r2
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	e7f9      	b.n	8007866 <__sread+0x16>
 8007872:	46c0      	nop			@ (mov r8, r8)
 8007874:	ffffefff 	.word	0xffffefff

08007878 <__swrite>:
 8007878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787a:	001f      	movs	r7, r3
 800787c:	898b      	ldrh	r3, [r1, #12]
 800787e:	0005      	movs	r5, r0
 8007880:	000c      	movs	r4, r1
 8007882:	0016      	movs	r6, r2
 8007884:	05db      	lsls	r3, r3, #23
 8007886:	d505      	bpl.n	8007894 <__swrite+0x1c>
 8007888:	230e      	movs	r3, #14
 800788a:	5ec9      	ldrsh	r1, [r1, r3]
 800788c:	2200      	movs	r2, #0
 800788e:	2302      	movs	r3, #2
 8007890:	f000 f8a4 	bl	80079dc <_lseek_r>
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	4a05      	ldr	r2, [pc, #20]	@ (80078ac <__swrite+0x34>)
 8007898:	0028      	movs	r0, r5
 800789a:	4013      	ands	r3, r2
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	0032      	movs	r2, r6
 80078a0:	230e      	movs	r3, #14
 80078a2:	5ee1      	ldrsh	r1, [r4, r3]
 80078a4:	003b      	movs	r3, r7
 80078a6:	f000 f8c1 	bl	8007a2c <_write_r>
 80078aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ac:	ffffefff 	.word	0xffffefff

080078b0 <__sseek>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	000c      	movs	r4, r1
 80078b4:	250e      	movs	r5, #14
 80078b6:	5f49      	ldrsh	r1, [r1, r5]
 80078b8:	f000 f890 	bl	80079dc <_lseek_r>
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	1c42      	adds	r2, r0, #1
 80078c0:	d103      	bne.n	80078ca <__sseek+0x1a>
 80078c2:	4a05      	ldr	r2, [pc, #20]	@ (80078d8 <__sseek+0x28>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	81a3      	strh	r3, [r4, #12]
 80078c8:	bd70      	pop	{r4, r5, r6, pc}
 80078ca:	2280      	movs	r2, #128	@ 0x80
 80078cc:	0152      	lsls	r2, r2, #5
 80078ce:	4313      	orrs	r3, r2
 80078d0:	81a3      	strh	r3, [r4, #12]
 80078d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80078d4:	e7f8      	b.n	80078c8 <__sseek+0x18>
 80078d6:	46c0      	nop			@ (mov r8, r8)
 80078d8:	ffffefff 	.word	0xffffefff

080078dc <__sclose>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	230e      	movs	r3, #14
 80078e0:	5ec9      	ldrsh	r1, [r1, r3]
 80078e2:	f000 f869 	bl	80079b8 <_close_r>
 80078e6:	bd10      	pop	{r4, pc}

080078e8 <memset>:
 80078e8:	0003      	movs	r3, r0
 80078ea:	1882      	adds	r2, r0, r2
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d100      	bne.n	80078f2 <memset+0xa>
 80078f0:	4770      	bx	lr
 80078f2:	7019      	strb	r1, [r3, #0]
 80078f4:	3301      	adds	r3, #1
 80078f6:	e7f9      	b.n	80078ec <memset+0x4>

080078f8 <strtok>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	4b16      	ldr	r3, [pc, #88]	@ (8007954 <strtok+0x5c>)
 80078fc:	0005      	movs	r5, r0
 80078fe:	681f      	ldr	r7, [r3, #0]
 8007900:	000e      	movs	r6, r1
 8007902:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007904:	2c00      	cmp	r4, #0
 8007906:	d11d      	bne.n	8007944 <strtok+0x4c>
 8007908:	2050      	movs	r0, #80	@ 0x50
 800790a:	f000 f949 	bl	8007ba0 <malloc>
 800790e:	1e02      	subs	r2, r0, #0
 8007910:	6478      	str	r0, [r7, #68]	@ 0x44
 8007912:	d104      	bne.n	800791e <strtok+0x26>
 8007914:	215b      	movs	r1, #91	@ 0x5b
 8007916:	4b10      	ldr	r3, [pc, #64]	@ (8007958 <strtok+0x60>)
 8007918:	4810      	ldr	r0, [pc, #64]	@ (800795c <strtok+0x64>)
 800791a:	f000 f8d9 	bl	8007ad0 <__assert_func>
 800791e:	6004      	str	r4, [r0, #0]
 8007920:	6044      	str	r4, [r0, #4]
 8007922:	6084      	str	r4, [r0, #8]
 8007924:	60c4      	str	r4, [r0, #12]
 8007926:	6104      	str	r4, [r0, #16]
 8007928:	6144      	str	r4, [r0, #20]
 800792a:	6184      	str	r4, [r0, #24]
 800792c:	6284      	str	r4, [r0, #40]	@ 0x28
 800792e:	62c4      	str	r4, [r0, #44]	@ 0x2c
 8007930:	6304      	str	r4, [r0, #48]	@ 0x30
 8007932:	6344      	str	r4, [r0, #52]	@ 0x34
 8007934:	6384      	str	r4, [r0, #56]	@ 0x38
 8007936:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8007938:	6404      	str	r4, [r0, #64]	@ 0x40
 800793a:	6444      	str	r4, [r0, #68]	@ 0x44
 800793c:	6484      	str	r4, [r0, #72]	@ 0x48
 800793e:	64c4      	str	r4, [r0, #76]	@ 0x4c
 8007940:	7704      	strb	r4, [r0, #28]
 8007942:	6244      	str	r4, [r0, #36]	@ 0x24
 8007944:	0031      	movs	r1, r6
 8007946:	0028      	movs	r0, r5
 8007948:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800794a:	2301      	movs	r3, #1
 800794c:	f000 f808 	bl	8007960 <__strtok_r>
 8007950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007952:	46c0      	nop			@ (mov r8, r8)
 8007954:	2000019c 	.word	0x2000019c
 8007958:	08008e87 	.word	0x08008e87
 800795c:	08008e9e 	.word	0x08008e9e

08007960 <__strtok_r>:
 8007960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007962:	1e04      	subs	r4, r0, #0
 8007964:	d102      	bne.n	800796c <__strtok_r+0xc>
 8007966:	6814      	ldr	r4, [r2, #0]
 8007968:	2c00      	cmp	r4, #0
 800796a:	d009      	beq.n	8007980 <__strtok_r+0x20>
 800796c:	0020      	movs	r0, r4
 800796e:	000e      	movs	r6, r1
 8007970:	7805      	ldrb	r5, [r0, #0]
 8007972:	3401      	adds	r4, #1
 8007974:	7837      	ldrb	r7, [r6, #0]
 8007976:	2f00      	cmp	r7, #0
 8007978:	d104      	bne.n	8007984 <__strtok_r+0x24>
 800797a:	2d00      	cmp	r5, #0
 800797c:	d10d      	bne.n	800799a <__strtok_r+0x3a>
 800797e:	6015      	str	r5, [r2, #0]
 8007980:	2000      	movs	r0, #0
 8007982:	e006      	b.n	8007992 <__strtok_r+0x32>
 8007984:	3601      	adds	r6, #1
 8007986:	42bd      	cmp	r5, r7
 8007988:	d1f4      	bne.n	8007974 <__strtok_r+0x14>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1ee      	bne.n	800796c <__strtok_r+0xc>
 800798e:	6014      	str	r4, [r2, #0]
 8007990:	7003      	strb	r3, [r0, #0]
 8007992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007994:	3301      	adds	r3, #1
 8007996:	2d00      	cmp	r5, #0
 8007998:	d102      	bne.n	80079a0 <__strtok_r+0x40>
 800799a:	000b      	movs	r3, r1
 800799c:	7826      	ldrb	r6, [r4, #0]
 800799e:	3401      	adds	r4, #1
 80079a0:	781d      	ldrb	r5, [r3, #0]
 80079a2:	42ae      	cmp	r6, r5
 80079a4:	d1f6      	bne.n	8007994 <__strtok_r+0x34>
 80079a6:	2300      	movs	r3, #0
 80079a8:	001d      	movs	r5, r3
 80079aa:	429e      	cmp	r6, r3
 80079ac:	d002      	beq.n	80079b4 <__strtok_r+0x54>
 80079ae:	0023      	movs	r3, r4
 80079b0:	1e61      	subs	r1, r4, #1
 80079b2:	700d      	strb	r5, [r1, #0]
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	e7ec      	b.n	8007992 <__strtok_r+0x32>

080079b8 <_close_r>:
 80079b8:	2300      	movs	r3, #0
 80079ba:	b570      	push	{r4, r5, r6, lr}
 80079bc:	4d06      	ldr	r5, [pc, #24]	@ (80079d8 <_close_r+0x20>)
 80079be:	0004      	movs	r4, r0
 80079c0:	0008      	movs	r0, r1
 80079c2:	602b      	str	r3, [r5, #0]
 80079c4:	f7fa fc6e 	bl	80022a4 <_close>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d103      	bne.n	80079d4 <_close_r+0x1c>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d000      	beq.n	80079d4 <_close_r+0x1c>
 80079d2:	6023      	str	r3, [r4, #0]
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	46c0      	nop			@ (mov r8, r8)
 80079d8:	20001740 	.word	0x20001740

080079dc <_lseek_r>:
 80079dc:	b570      	push	{r4, r5, r6, lr}
 80079de:	0004      	movs	r4, r0
 80079e0:	0008      	movs	r0, r1
 80079e2:	0011      	movs	r1, r2
 80079e4:	001a      	movs	r2, r3
 80079e6:	2300      	movs	r3, #0
 80079e8:	4d05      	ldr	r5, [pc, #20]	@ (8007a00 <_lseek_r+0x24>)
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	f7fa fc66 	bl	80022bc <_lseek>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d103      	bne.n	80079fc <_lseek_r+0x20>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d000      	beq.n	80079fc <_lseek_r+0x20>
 80079fa:	6023      	str	r3, [r4, #0]
 80079fc:	bd70      	pop	{r4, r5, r6, pc}
 80079fe:	46c0      	nop			@ (mov r8, r8)
 8007a00:	20001740 	.word	0x20001740

08007a04 <_read_r>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	0004      	movs	r4, r0
 8007a08:	0008      	movs	r0, r1
 8007a0a:	0011      	movs	r1, r2
 8007a0c:	001a      	movs	r2, r3
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4d05      	ldr	r5, [pc, #20]	@ (8007a28 <_read_r+0x24>)
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	f7fa fc2a 	bl	800226c <_read>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d103      	bne.n	8007a24 <_read_r+0x20>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d000      	beq.n	8007a24 <_read_r+0x20>
 8007a22:	6023      	str	r3, [r4, #0]
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	46c0      	nop			@ (mov r8, r8)
 8007a28:	20001740 	.word	0x20001740

08007a2c <_write_r>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	0004      	movs	r4, r0
 8007a30:	0008      	movs	r0, r1
 8007a32:	0011      	movs	r1, r2
 8007a34:	001a      	movs	r2, r3
 8007a36:	2300      	movs	r3, #0
 8007a38:	4d05      	ldr	r5, [pc, #20]	@ (8007a50 <_write_r+0x24>)
 8007a3a:	602b      	str	r3, [r5, #0]
 8007a3c:	f7fa fc24 	bl	8002288 <_write>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d103      	bne.n	8007a4c <_write_r+0x20>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d000      	beq.n	8007a4c <_write_r+0x20>
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	bd70      	pop	{r4, r5, r6, pc}
 8007a4e:	46c0      	nop			@ (mov r8, r8)
 8007a50:	20001740 	.word	0x20001740

08007a54 <__errno>:
 8007a54:	4b01      	ldr	r3, [pc, #4]	@ (8007a5c <__errno+0x8>)
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	4770      	bx	lr
 8007a5a:	46c0      	nop			@ (mov r8, r8)
 8007a5c:	2000019c 	.word	0x2000019c

08007a60 <__libc_init_array>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	2600      	movs	r6, #0
 8007a64:	4c0c      	ldr	r4, [pc, #48]	@ (8007a98 <__libc_init_array+0x38>)
 8007a66:	4d0d      	ldr	r5, [pc, #52]	@ (8007a9c <__libc_init_array+0x3c>)
 8007a68:	1b64      	subs	r4, r4, r5
 8007a6a:	10a4      	asrs	r4, r4, #2
 8007a6c:	42a6      	cmp	r6, r4
 8007a6e:	d109      	bne.n	8007a84 <__libc_init_array+0x24>
 8007a70:	2600      	movs	r6, #0
 8007a72:	f001 f81b 	bl	8008aac <_init>
 8007a76:	4c0a      	ldr	r4, [pc, #40]	@ (8007aa0 <__libc_init_array+0x40>)
 8007a78:	4d0a      	ldr	r5, [pc, #40]	@ (8007aa4 <__libc_init_array+0x44>)
 8007a7a:	1b64      	subs	r4, r4, r5
 8007a7c:	10a4      	asrs	r4, r4, #2
 8007a7e:	42a6      	cmp	r6, r4
 8007a80:	d105      	bne.n	8007a8e <__libc_init_array+0x2e>
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	00b3      	lsls	r3, r6, #2
 8007a86:	58eb      	ldr	r3, [r5, r3]
 8007a88:	4798      	blx	r3
 8007a8a:	3601      	adds	r6, #1
 8007a8c:	e7ee      	b.n	8007a6c <__libc_init_array+0xc>
 8007a8e:	00b3      	lsls	r3, r6, #2
 8007a90:	58eb      	ldr	r3, [r5, r3]
 8007a92:	4798      	blx	r3
 8007a94:	3601      	adds	r6, #1
 8007a96:	e7f2      	b.n	8007a7e <__libc_init_array+0x1e>
 8007a98:	08008f68 	.word	0x08008f68
 8007a9c:	08008f68 	.word	0x08008f68
 8007aa0:	08008f6c 	.word	0x08008f6c
 8007aa4:	08008f68 	.word	0x08008f68

08007aa8 <__retarget_lock_init_recursive>:
 8007aa8:	4770      	bx	lr

08007aaa <__retarget_lock_acquire_recursive>:
 8007aaa:	4770      	bx	lr

08007aac <__retarget_lock_release_recursive>:
 8007aac:	4770      	bx	lr

08007aae <strcpy>:
 8007aae:	0003      	movs	r3, r0
 8007ab0:	780a      	ldrb	r2, [r1, #0]
 8007ab2:	3101      	adds	r1, #1
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	d1f9      	bne.n	8007ab0 <strcpy+0x2>
 8007abc:	4770      	bx	lr

08007abe <memcpy>:
 8007abe:	2300      	movs	r3, #0
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d100      	bne.n	8007ac8 <memcpy+0xa>
 8007ac6:	bd10      	pop	{r4, pc}
 8007ac8:	5ccc      	ldrb	r4, [r1, r3]
 8007aca:	54c4      	strb	r4, [r0, r3]
 8007acc:	3301      	adds	r3, #1
 8007ace:	e7f8      	b.n	8007ac2 <memcpy+0x4>

08007ad0 <__assert_func>:
 8007ad0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007ad2:	0014      	movs	r4, r2
 8007ad4:	001a      	movs	r2, r3
 8007ad6:	4b09      	ldr	r3, [pc, #36]	@ (8007afc <__assert_func+0x2c>)
 8007ad8:	0005      	movs	r5, r0
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	000e      	movs	r6, r1
 8007ade:	68d8      	ldr	r0, [r3, #12]
 8007ae0:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <__assert_func+0x30>)
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	d101      	bne.n	8007aea <__assert_func+0x1a>
 8007ae6:	4b07      	ldr	r3, [pc, #28]	@ (8007b04 <__assert_func+0x34>)
 8007ae8:	001c      	movs	r4, r3
 8007aea:	4907      	ldr	r1, [pc, #28]	@ (8007b08 <__assert_func+0x38>)
 8007aec:	9301      	str	r3, [sp, #4]
 8007aee:	9402      	str	r4, [sp, #8]
 8007af0:	002b      	movs	r3, r5
 8007af2:	9600      	str	r6, [sp, #0]
 8007af4:	f000 fc9e 	bl	8008434 <fiprintf>
 8007af8:	f000 fcdd 	bl	80084b6 <abort>
 8007afc:	2000019c 	.word	0x2000019c
 8007b00:	08008ef8 	.word	0x08008ef8
 8007b04:	08008f33 	.word	0x08008f33
 8007b08:	08008f05 	.word	0x08008f05

08007b0c <_free_r>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	0005      	movs	r5, r0
 8007b10:	1e0c      	subs	r4, r1, #0
 8007b12:	d010      	beq.n	8007b36 <_free_r+0x2a>
 8007b14:	3c04      	subs	r4, #4
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	da00      	bge.n	8007b1e <_free_r+0x12>
 8007b1c:	18e4      	adds	r4, r4, r3
 8007b1e:	0028      	movs	r0, r5
 8007b20:	f000 f8ea 	bl	8007cf8 <__malloc_lock>
 8007b24:	4a1d      	ldr	r2, [pc, #116]	@ (8007b9c <_free_r+0x90>)
 8007b26:	6813      	ldr	r3, [r2, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d105      	bne.n	8007b38 <_free_r+0x2c>
 8007b2c:	6063      	str	r3, [r4, #4]
 8007b2e:	6014      	str	r4, [r2, #0]
 8007b30:	0028      	movs	r0, r5
 8007b32:	f000 f8e9 	bl	8007d08 <__malloc_unlock>
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	d908      	bls.n	8007b4e <_free_r+0x42>
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	1821      	adds	r1, r4, r0
 8007b40:	428b      	cmp	r3, r1
 8007b42:	d1f3      	bne.n	8007b2c <_free_r+0x20>
 8007b44:	6819      	ldr	r1, [r3, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	1809      	adds	r1, r1, r0
 8007b4a:	6021      	str	r1, [r4, #0]
 8007b4c:	e7ee      	b.n	8007b2c <_free_r+0x20>
 8007b4e:	001a      	movs	r2, r3
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <_free_r+0x4e>
 8007b56:	42a3      	cmp	r3, r4
 8007b58:	d9f9      	bls.n	8007b4e <_free_r+0x42>
 8007b5a:	6811      	ldr	r1, [r2, #0]
 8007b5c:	1850      	adds	r0, r2, r1
 8007b5e:	42a0      	cmp	r0, r4
 8007b60:	d10b      	bne.n	8007b7a <_free_r+0x6e>
 8007b62:	6820      	ldr	r0, [r4, #0]
 8007b64:	1809      	adds	r1, r1, r0
 8007b66:	1850      	adds	r0, r2, r1
 8007b68:	6011      	str	r1, [r2, #0]
 8007b6a:	4283      	cmp	r3, r0
 8007b6c:	d1e0      	bne.n	8007b30 <_free_r+0x24>
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	1841      	adds	r1, r0, r1
 8007b74:	6011      	str	r1, [r2, #0]
 8007b76:	6053      	str	r3, [r2, #4]
 8007b78:	e7da      	b.n	8007b30 <_free_r+0x24>
 8007b7a:	42a0      	cmp	r0, r4
 8007b7c:	d902      	bls.n	8007b84 <_free_r+0x78>
 8007b7e:	230c      	movs	r3, #12
 8007b80:	602b      	str	r3, [r5, #0]
 8007b82:	e7d5      	b.n	8007b30 <_free_r+0x24>
 8007b84:	6820      	ldr	r0, [r4, #0]
 8007b86:	1821      	adds	r1, r4, r0
 8007b88:	428b      	cmp	r3, r1
 8007b8a:	d103      	bne.n	8007b94 <_free_r+0x88>
 8007b8c:	6819      	ldr	r1, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	1809      	adds	r1, r1, r0
 8007b92:	6021      	str	r1, [r4, #0]
 8007b94:	6063      	str	r3, [r4, #4]
 8007b96:	6054      	str	r4, [r2, #4]
 8007b98:	e7ca      	b.n	8007b30 <_free_r+0x24>
 8007b9a:	46c0      	nop			@ (mov r8, r8)
 8007b9c:	2000174c 	.word	0x2000174c

08007ba0 <malloc>:
 8007ba0:	b510      	push	{r4, lr}
 8007ba2:	4b03      	ldr	r3, [pc, #12]	@ (8007bb0 <malloc+0x10>)
 8007ba4:	0001      	movs	r1, r0
 8007ba6:	6818      	ldr	r0, [r3, #0]
 8007ba8:	f000 f826 	bl	8007bf8 <_malloc_r>
 8007bac:	bd10      	pop	{r4, pc}
 8007bae:	46c0      	nop			@ (mov r8, r8)
 8007bb0:	2000019c 	.word	0x2000019c

08007bb4 <sbrk_aligned>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	4e0f      	ldr	r6, [pc, #60]	@ (8007bf4 <sbrk_aligned+0x40>)
 8007bb8:	000d      	movs	r5, r1
 8007bba:	6831      	ldr	r1, [r6, #0]
 8007bbc:	0004      	movs	r4, r0
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d102      	bne.n	8007bc8 <sbrk_aligned+0x14>
 8007bc2:	f000 fc5b 	bl	800847c <_sbrk_r>
 8007bc6:	6030      	str	r0, [r6, #0]
 8007bc8:	0029      	movs	r1, r5
 8007bca:	0020      	movs	r0, r4
 8007bcc:	f000 fc56 	bl	800847c <_sbrk_r>
 8007bd0:	1c43      	adds	r3, r0, #1
 8007bd2:	d103      	bne.n	8007bdc <sbrk_aligned+0x28>
 8007bd4:	2501      	movs	r5, #1
 8007bd6:	426d      	negs	r5, r5
 8007bd8:	0028      	movs	r0, r5
 8007bda:	bd70      	pop	{r4, r5, r6, pc}
 8007bdc:	2303      	movs	r3, #3
 8007bde:	1cc5      	adds	r5, r0, #3
 8007be0:	439d      	bics	r5, r3
 8007be2:	42a8      	cmp	r0, r5
 8007be4:	d0f8      	beq.n	8007bd8 <sbrk_aligned+0x24>
 8007be6:	1a29      	subs	r1, r5, r0
 8007be8:	0020      	movs	r0, r4
 8007bea:	f000 fc47 	bl	800847c <_sbrk_r>
 8007bee:	3001      	adds	r0, #1
 8007bf0:	d1f2      	bne.n	8007bd8 <sbrk_aligned+0x24>
 8007bf2:	e7ef      	b.n	8007bd4 <sbrk_aligned+0x20>
 8007bf4:	20001748 	.word	0x20001748

08007bf8 <_malloc_r>:
 8007bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	1ccb      	adds	r3, r1, #3
 8007bfe:	4393      	bics	r3, r2
 8007c00:	3308      	adds	r3, #8
 8007c02:	0005      	movs	r5, r0
 8007c04:	001f      	movs	r7, r3
 8007c06:	2b0c      	cmp	r3, #12
 8007c08:	d234      	bcs.n	8007c74 <_malloc_r+0x7c>
 8007c0a:	270c      	movs	r7, #12
 8007c0c:	42b9      	cmp	r1, r7
 8007c0e:	d833      	bhi.n	8007c78 <_malloc_r+0x80>
 8007c10:	0028      	movs	r0, r5
 8007c12:	f000 f871 	bl	8007cf8 <__malloc_lock>
 8007c16:	4e37      	ldr	r6, [pc, #220]	@ (8007cf4 <_malloc_r+0xfc>)
 8007c18:	6833      	ldr	r3, [r6, #0]
 8007c1a:	001c      	movs	r4, r3
 8007c1c:	2c00      	cmp	r4, #0
 8007c1e:	d12f      	bne.n	8007c80 <_malloc_r+0x88>
 8007c20:	0039      	movs	r1, r7
 8007c22:	0028      	movs	r0, r5
 8007c24:	f7ff ffc6 	bl	8007bb4 <sbrk_aligned>
 8007c28:	0004      	movs	r4, r0
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d15f      	bne.n	8007cee <_malloc_r+0xf6>
 8007c2e:	6834      	ldr	r4, [r6, #0]
 8007c30:	9400      	str	r4, [sp, #0]
 8007c32:	9b00      	ldr	r3, [sp, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d14a      	bne.n	8007cce <_malloc_r+0xd6>
 8007c38:	2c00      	cmp	r4, #0
 8007c3a:	d052      	beq.n	8007ce2 <_malloc_r+0xea>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	0028      	movs	r0, r5
 8007c40:	18e3      	adds	r3, r4, r3
 8007c42:	9900      	ldr	r1, [sp, #0]
 8007c44:	9301      	str	r3, [sp, #4]
 8007c46:	f000 fc19 	bl	800847c <_sbrk_r>
 8007c4a:	9b01      	ldr	r3, [sp, #4]
 8007c4c:	4283      	cmp	r3, r0
 8007c4e:	d148      	bne.n	8007ce2 <_malloc_r+0xea>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	0028      	movs	r0, r5
 8007c54:	1aff      	subs	r7, r7, r3
 8007c56:	0039      	movs	r1, r7
 8007c58:	f7ff ffac 	bl	8007bb4 <sbrk_aligned>
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d040      	beq.n	8007ce2 <_malloc_r+0xea>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	19db      	adds	r3, r3, r7
 8007c64:	6023      	str	r3, [r4, #0]
 8007c66:	6833      	ldr	r3, [r6, #0]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	d133      	bne.n	8007cd6 <_malloc_r+0xde>
 8007c6e:	9b00      	ldr	r3, [sp, #0]
 8007c70:	6033      	str	r3, [r6, #0]
 8007c72:	e019      	b.n	8007ca8 <_malloc_r+0xb0>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	dac9      	bge.n	8007c0c <_malloc_r+0x14>
 8007c78:	230c      	movs	r3, #12
 8007c7a:	602b      	str	r3, [r5, #0]
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c80:	6821      	ldr	r1, [r4, #0]
 8007c82:	1bc9      	subs	r1, r1, r7
 8007c84:	d420      	bmi.n	8007cc8 <_malloc_r+0xd0>
 8007c86:	290b      	cmp	r1, #11
 8007c88:	d90a      	bls.n	8007ca0 <_malloc_r+0xa8>
 8007c8a:	19e2      	adds	r2, r4, r7
 8007c8c:	6027      	str	r7, [r4, #0]
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	d104      	bne.n	8007c9c <_malloc_r+0xa4>
 8007c92:	6032      	str	r2, [r6, #0]
 8007c94:	6863      	ldr	r3, [r4, #4]
 8007c96:	6011      	str	r1, [r2, #0]
 8007c98:	6053      	str	r3, [r2, #4]
 8007c9a:	e005      	b.n	8007ca8 <_malloc_r+0xb0>
 8007c9c:	605a      	str	r2, [r3, #4]
 8007c9e:	e7f9      	b.n	8007c94 <_malloc_r+0x9c>
 8007ca0:	6862      	ldr	r2, [r4, #4]
 8007ca2:	42a3      	cmp	r3, r4
 8007ca4:	d10e      	bne.n	8007cc4 <_malloc_r+0xcc>
 8007ca6:	6032      	str	r2, [r6, #0]
 8007ca8:	0028      	movs	r0, r5
 8007caa:	f000 f82d 	bl	8007d08 <__malloc_unlock>
 8007cae:	0020      	movs	r0, r4
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	300b      	adds	r0, #11
 8007cb4:	1d23      	adds	r3, r4, #4
 8007cb6:	4390      	bics	r0, r2
 8007cb8:	1ac2      	subs	r2, r0, r3
 8007cba:	4298      	cmp	r0, r3
 8007cbc:	d0df      	beq.n	8007c7e <_malloc_r+0x86>
 8007cbe:	1a1b      	subs	r3, r3, r0
 8007cc0:	50a3      	str	r3, [r4, r2]
 8007cc2:	e7dc      	b.n	8007c7e <_malloc_r+0x86>
 8007cc4:	605a      	str	r2, [r3, #4]
 8007cc6:	e7ef      	b.n	8007ca8 <_malloc_r+0xb0>
 8007cc8:	0023      	movs	r3, r4
 8007cca:	6864      	ldr	r4, [r4, #4]
 8007ccc:	e7a6      	b.n	8007c1c <_malloc_r+0x24>
 8007cce:	9c00      	ldr	r4, [sp, #0]
 8007cd0:	6863      	ldr	r3, [r4, #4]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	e7ad      	b.n	8007c32 <_malloc_r+0x3a>
 8007cd6:	001a      	movs	r2, r3
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	42a3      	cmp	r3, r4
 8007cdc:	d1fb      	bne.n	8007cd6 <_malloc_r+0xde>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e7da      	b.n	8007c98 <_malloc_r+0xa0>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	0028      	movs	r0, r5
 8007ce6:	602b      	str	r3, [r5, #0]
 8007ce8:	f000 f80e 	bl	8007d08 <__malloc_unlock>
 8007cec:	e7c6      	b.n	8007c7c <_malloc_r+0x84>
 8007cee:	6007      	str	r7, [r0, #0]
 8007cf0:	e7da      	b.n	8007ca8 <_malloc_r+0xb0>
 8007cf2:	46c0      	nop			@ (mov r8, r8)
 8007cf4:	2000174c 	.word	0x2000174c

08007cf8 <__malloc_lock>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	4802      	ldr	r0, [pc, #8]	@ (8007d04 <__malloc_lock+0xc>)
 8007cfc:	f7ff fed5 	bl	8007aaa <__retarget_lock_acquire_recursive>
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	46c0      	nop			@ (mov r8, r8)
 8007d04:	20001744 	.word	0x20001744

08007d08 <__malloc_unlock>:
 8007d08:	b510      	push	{r4, lr}
 8007d0a:	4802      	ldr	r0, [pc, #8]	@ (8007d14 <__malloc_unlock+0xc>)
 8007d0c:	f7ff fece 	bl	8007aac <__retarget_lock_release_recursive>
 8007d10:	bd10      	pop	{r4, pc}
 8007d12:	46c0      	nop			@ (mov r8, r8)
 8007d14:	20001744 	.word	0x20001744

08007d18 <__ssputs_r>:
 8007d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d1a:	688e      	ldr	r6, [r1, #8]
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	001f      	movs	r7, r3
 8007d20:	000c      	movs	r4, r1
 8007d22:	680b      	ldr	r3, [r1, #0]
 8007d24:	9002      	str	r0, [sp, #8]
 8007d26:	9203      	str	r2, [sp, #12]
 8007d28:	42be      	cmp	r6, r7
 8007d2a:	d830      	bhi.n	8007d8e <__ssputs_r+0x76>
 8007d2c:	210c      	movs	r1, #12
 8007d2e:	5e62      	ldrsh	r2, [r4, r1]
 8007d30:	2190      	movs	r1, #144	@ 0x90
 8007d32:	00c9      	lsls	r1, r1, #3
 8007d34:	420a      	tst	r2, r1
 8007d36:	d028      	beq.n	8007d8a <__ssputs_r+0x72>
 8007d38:	2003      	movs	r0, #3
 8007d3a:	6921      	ldr	r1, [r4, #16]
 8007d3c:	1a5b      	subs	r3, r3, r1
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	6963      	ldr	r3, [r4, #20]
 8007d42:	4343      	muls	r3, r0
 8007d44:	9801      	ldr	r0, [sp, #4]
 8007d46:	0fdd      	lsrs	r5, r3, #31
 8007d48:	18ed      	adds	r5, r5, r3
 8007d4a:	1c7b      	adds	r3, r7, #1
 8007d4c:	181b      	adds	r3, r3, r0
 8007d4e:	106d      	asrs	r5, r5, #1
 8007d50:	42ab      	cmp	r3, r5
 8007d52:	d900      	bls.n	8007d56 <__ssputs_r+0x3e>
 8007d54:	001d      	movs	r5, r3
 8007d56:	0552      	lsls	r2, r2, #21
 8007d58:	d528      	bpl.n	8007dac <__ssputs_r+0x94>
 8007d5a:	0029      	movs	r1, r5
 8007d5c:	9802      	ldr	r0, [sp, #8]
 8007d5e:	f7ff ff4b 	bl	8007bf8 <_malloc_r>
 8007d62:	1e06      	subs	r6, r0, #0
 8007d64:	d02c      	beq.n	8007dc0 <__ssputs_r+0xa8>
 8007d66:	9a01      	ldr	r2, [sp, #4]
 8007d68:	6921      	ldr	r1, [r4, #16]
 8007d6a:	f7ff fea8 	bl	8007abe <memcpy>
 8007d6e:	89a2      	ldrh	r2, [r4, #12]
 8007d70:	4b18      	ldr	r3, [pc, #96]	@ (8007dd4 <__ssputs_r+0xbc>)
 8007d72:	401a      	ands	r2, r3
 8007d74:	2380      	movs	r3, #128	@ 0x80
 8007d76:	4313      	orrs	r3, r2
 8007d78:	81a3      	strh	r3, [r4, #12]
 8007d7a:	9b01      	ldr	r3, [sp, #4]
 8007d7c:	6126      	str	r6, [r4, #16]
 8007d7e:	18f6      	adds	r6, r6, r3
 8007d80:	6026      	str	r6, [r4, #0]
 8007d82:	003e      	movs	r6, r7
 8007d84:	6165      	str	r5, [r4, #20]
 8007d86:	1aed      	subs	r5, r5, r3
 8007d88:	60a5      	str	r5, [r4, #8]
 8007d8a:	42be      	cmp	r6, r7
 8007d8c:	d900      	bls.n	8007d90 <__ssputs_r+0x78>
 8007d8e:	003e      	movs	r6, r7
 8007d90:	0032      	movs	r2, r6
 8007d92:	9903      	ldr	r1, [sp, #12]
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	f000 fb5d 	bl	8008454 <memmove>
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	68a3      	ldr	r3, [r4, #8]
 8007d9e:	1b9b      	subs	r3, r3, r6
 8007da0:	60a3      	str	r3, [r4, #8]
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	199b      	adds	r3, r3, r6
 8007da6:	6023      	str	r3, [r4, #0]
 8007da8:	b005      	add	sp, #20
 8007daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dac:	002a      	movs	r2, r5
 8007dae:	9802      	ldr	r0, [sp, #8]
 8007db0:	f000 fb88 	bl	80084c4 <_realloc_r>
 8007db4:	1e06      	subs	r6, r0, #0
 8007db6:	d1e0      	bne.n	8007d7a <__ssputs_r+0x62>
 8007db8:	6921      	ldr	r1, [r4, #16]
 8007dba:	9802      	ldr	r0, [sp, #8]
 8007dbc:	f7ff fea6 	bl	8007b0c <_free_r>
 8007dc0:	230c      	movs	r3, #12
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	9a02      	ldr	r2, [sp, #8]
 8007dc6:	4240      	negs	r0, r0
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	89a2      	ldrh	r2, [r4, #12]
 8007dcc:	3334      	adds	r3, #52	@ 0x34
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	e7e9      	b.n	8007da8 <__ssputs_r+0x90>
 8007dd4:	fffffb7f 	.word	0xfffffb7f

08007dd8 <_svfiprintf_r>:
 8007dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dda:	b0a1      	sub	sp, #132	@ 0x84
 8007ddc:	9003      	str	r0, [sp, #12]
 8007dde:	001d      	movs	r5, r3
 8007de0:	898b      	ldrh	r3, [r1, #12]
 8007de2:	000f      	movs	r7, r1
 8007de4:	0016      	movs	r6, r2
 8007de6:	061b      	lsls	r3, r3, #24
 8007de8:	d511      	bpl.n	8007e0e <_svfiprintf_r+0x36>
 8007dea:	690b      	ldr	r3, [r1, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10e      	bne.n	8007e0e <_svfiprintf_r+0x36>
 8007df0:	2140      	movs	r1, #64	@ 0x40
 8007df2:	f7ff ff01 	bl	8007bf8 <_malloc_r>
 8007df6:	6038      	str	r0, [r7, #0]
 8007df8:	6138      	str	r0, [r7, #16]
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d105      	bne.n	8007e0a <_svfiprintf_r+0x32>
 8007dfe:	230c      	movs	r3, #12
 8007e00:	9a03      	ldr	r2, [sp, #12]
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	2001      	movs	r0, #1
 8007e06:	4240      	negs	r0, r0
 8007e08:	e0cf      	b.n	8007faa <_svfiprintf_r+0x1d2>
 8007e0a:	2340      	movs	r3, #64	@ 0x40
 8007e0c:	617b      	str	r3, [r7, #20]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	ac08      	add	r4, sp, #32
 8007e12:	6163      	str	r3, [r4, #20]
 8007e14:	3320      	adds	r3, #32
 8007e16:	7663      	strb	r3, [r4, #25]
 8007e18:	3310      	adds	r3, #16
 8007e1a:	76a3      	strb	r3, [r4, #26]
 8007e1c:	9507      	str	r5, [sp, #28]
 8007e1e:	0035      	movs	r5, r6
 8007e20:	782b      	ldrb	r3, [r5, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <_svfiprintf_r+0x52>
 8007e26:	2b25      	cmp	r3, #37	@ 0x25
 8007e28:	d148      	bne.n	8007ebc <_svfiprintf_r+0xe4>
 8007e2a:	1bab      	subs	r3, r5, r6
 8007e2c:	9305      	str	r3, [sp, #20]
 8007e2e:	42b5      	cmp	r5, r6
 8007e30:	d00b      	beq.n	8007e4a <_svfiprintf_r+0x72>
 8007e32:	0032      	movs	r2, r6
 8007e34:	0039      	movs	r1, r7
 8007e36:	9803      	ldr	r0, [sp, #12]
 8007e38:	f7ff ff6e 	bl	8007d18 <__ssputs_r>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d100      	bne.n	8007e42 <_svfiprintf_r+0x6a>
 8007e40:	e0ae      	b.n	8007fa0 <_svfiprintf_r+0x1c8>
 8007e42:	6963      	ldr	r3, [r4, #20]
 8007e44:	9a05      	ldr	r2, [sp, #20]
 8007e46:	189b      	adds	r3, r3, r2
 8007e48:	6163      	str	r3, [r4, #20]
 8007e4a:	782b      	ldrb	r3, [r5, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d100      	bne.n	8007e52 <_svfiprintf_r+0x7a>
 8007e50:	e0a6      	b.n	8007fa0 <_svfiprintf_r+0x1c8>
 8007e52:	2201      	movs	r2, #1
 8007e54:	2300      	movs	r3, #0
 8007e56:	4252      	negs	r2, r2
 8007e58:	6062      	str	r2, [r4, #4]
 8007e5a:	a904      	add	r1, sp, #16
 8007e5c:	3254      	adds	r2, #84	@ 0x54
 8007e5e:	1852      	adds	r2, r2, r1
 8007e60:	1c6e      	adds	r6, r5, #1
 8007e62:	6023      	str	r3, [r4, #0]
 8007e64:	60e3      	str	r3, [r4, #12]
 8007e66:	60a3      	str	r3, [r4, #8]
 8007e68:	7013      	strb	r3, [r2, #0]
 8007e6a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007e6c:	4b54      	ldr	r3, [pc, #336]	@ (8007fc0 <_svfiprintf_r+0x1e8>)
 8007e6e:	2205      	movs	r2, #5
 8007e70:	0018      	movs	r0, r3
 8007e72:	7831      	ldrb	r1, [r6, #0]
 8007e74:	9305      	str	r3, [sp, #20]
 8007e76:	f000 fb13 	bl	80084a0 <memchr>
 8007e7a:	1c75      	adds	r5, r6, #1
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d11f      	bne.n	8007ec0 <_svfiprintf_r+0xe8>
 8007e80:	6822      	ldr	r2, [r4, #0]
 8007e82:	06d3      	lsls	r3, r2, #27
 8007e84:	d504      	bpl.n	8007e90 <_svfiprintf_r+0xb8>
 8007e86:	2353      	movs	r3, #83	@ 0x53
 8007e88:	a904      	add	r1, sp, #16
 8007e8a:	185b      	adds	r3, r3, r1
 8007e8c:	2120      	movs	r1, #32
 8007e8e:	7019      	strb	r1, [r3, #0]
 8007e90:	0713      	lsls	r3, r2, #28
 8007e92:	d504      	bpl.n	8007e9e <_svfiprintf_r+0xc6>
 8007e94:	2353      	movs	r3, #83	@ 0x53
 8007e96:	a904      	add	r1, sp, #16
 8007e98:	185b      	adds	r3, r3, r1
 8007e9a:	212b      	movs	r1, #43	@ 0x2b
 8007e9c:	7019      	strb	r1, [r3, #0]
 8007e9e:	7833      	ldrb	r3, [r6, #0]
 8007ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ea2:	d016      	beq.n	8007ed2 <_svfiprintf_r+0xfa>
 8007ea4:	0035      	movs	r5, r6
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	200a      	movs	r0, #10
 8007eaa:	68e3      	ldr	r3, [r4, #12]
 8007eac:	782a      	ldrb	r2, [r5, #0]
 8007eae:	1c6e      	adds	r6, r5, #1
 8007eb0:	3a30      	subs	r2, #48	@ 0x30
 8007eb2:	2a09      	cmp	r2, #9
 8007eb4:	d950      	bls.n	8007f58 <_svfiprintf_r+0x180>
 8007eb6:	2900      	cmp	r1, #0
 8007eb8:	d111      	bne.n	8007ede <_svfiprintf_r+0x106>
 8007eba:	e017      	b.n	8007eec <_svfiprintf_r+0x114>
 8007ebc:	3501      	adds	r5, #1
 8007ebe:	e7af      	b.n	8007e20 <_svfiprintf_r+0x48>
 8007ec0:	9b05      	ldr	r3, [sp, #20]
 8007ec2:	6822      	ldr	r2, [r4, #0]
 8007ec4:	1ac0      	subs	r0, r0, r3
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4083      	lsls	r3, r0
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	002e      	movs	r6, r5
 8007ece:	6023      	str	r3, [r4, #0]
 8007ed0:	e7cc      	b.n	8007e6c <_svfiprintf_r+0x94>
 8007ed2:	9b07      	ldr	r3, [sp, #28]
 8007ed4:	1d19      	adds	r1, r3, #4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	9107      	str	r1, [sp, #28]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	db01      	blt.n	8007ee2 <_svfiprintf_r+0x10a>
 8007ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ee0:	e004      	b.n	8007eec <_svfiprintf_r+0x114>
 8007ee2:	425b      	negs	r3, r3
 8007ee4:	60e3      	str	r3, [r4, #12]
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	6023      	str	r3, [r4, #0]
 8007eec:	782b      	ldrb	r3, [r5, #0]
 8007eee:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ef0:	d10c      	bne.n	8007f0c <_svfiprintf_r+0x134>
 8007ef2:	786b      	ldrb	r3, [r5, #1]
 8007ef4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ef6:	d134      	bne.n	8007f62 <_svfiprintf_r+0x18a>
 8007ef8:	9b07      	ldr	r3, [sp, #28]
 8007efa:	3502      	adds	r5, #2
 8007efc:	1d1a      	adds	r2, r3, #4
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	9207      	str	r2, [sp, #28]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	da01      	bge.n	8007f0a <_svfiprintf_r+0x132>
 8007f06:	2301      	movs	r3, #1
 8007f08:	425b      	negs	r3, r3
 8007f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f0c:	4e2d      	ldr	r6, [pc, #180]	@ (8007fc4 <_svfiprintf_r+0x1ec>)
 8007f0e:	2203      	movs	r2, #3
 8007f10:	0030      	movs	r0, r6
 8007f12:	7829      	ldrb	r1, [r5, #0]
 8007f14:	f000 fac4 	bl	80084a0 <memchr>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d006      	beq.n	8007f2a <_svfiprintf_r+0x152>
 8007f1c:	2340      	movs	r3, #64	@ 0x40
 8007f1e:	1b80      	subs	r0, r0, r6
 8007f20:	4083      	lsls	r3, r0
 8007f22:	6822      	ldr	r2, [r4, #0]
 8007f24:	3501      	adds	r5, #1
 8007f26:	4313      	orrs	r3, r2
 8007f28:	6023      	str	r3, [r4, #0]
 8007f2a:	7829      	ldrb	r1, [r5, #0]
 8007f2c:	2206      	movs	r2, #6
 8007f2e:	4826      	ldr	r0, [pc, #152]	@ (8007fc8 <_svfiprintf_r+0x1f0>)
 8007f30:	1c6e      	adds	r6, r5, #1
 8007f32:	7621      	strb	r1, [r4, #24]
 8007f34:	f000 fab4 	bl	80084a0 <memchr>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d038      	beq.n	8007fae <_svfiprintf_r+0x1d6>
 8007f3c:	4b23      	ldr	r3, [pc, #140]	@ (8007fcc <_svfiprintf_r+0x1f4>)
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d122      	bne.n	8007f88 <_svfiprintf_r+0x1b0>
 8007f42:	2207      	movs	r2, #7
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	3307      	adds	r3, #7
 8007f48:	4393      	bics	r3, r2
 8007f4a:	3308      	adds	r3, #8
 8007f4c:	9307      	str	r3, [sp, #28]
 8007f4e:	6963      	ldr	r3, [r4, #20]
 8007f50:	9a04      	ldr	r2, [sp, #16]
 8007f52:	189b      	adds	r3, r3, r2
 8007f54:	6163      	str	r3, [r4, #20]
 8007f56:	e762      	b.n	8007e1e <_svfiprintf_r+0x46>
 8007f58:	4343      	muls	r3, r0
 8007f5a:	0035      	movs	r5, r6
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	189b      	adds	r3, r3, r2
 8007f60:	e7a4      	b.n	8007eac <_svfiprintf_r+0xd4>
 8007f62:	2300      	movs	r3, #0
 8007f64:	200a      	movs	r0, #10
 8007f66:	0019      	movs	r1, r3
 8007f68:	3501      	adds	r5, #1
 8007f6a:	6063      	str	r3, [r4, #4]
 8007f6c:	782a      	ldrb	r2, [r5, #0]
 8007f6e:	1c6e      	adds	r6, r5, #1
 8007f70:	3a30      	subs	r2, #48	@ 0x30
 8007f72:	2a09      	cmp	r2, #9
 8007f74:	d903      	bls.n	8007f7e <_svfiprintf_r+0x1a6>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0c8      	beq.n	8007f0c <_svfiprintf_r+0x134>
 8007f7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007f7c:	e7c6      	b.n	8007f0c <_svfiprintf_r+0x134>
 8007f7e:	4341      	muls	r1, r0
 8007f80:	0035      	movs	r5, r6
 8007f82:	2301      	movs	r3, #1
 8007f84:	1889      	adds	r1, r1, r2
 8007f86:	e7f1      	b.n	8007f6c <_svfiprintf_r+0x194>
 8007f88:	aa07      	add	r2, sp, #28
 8007f8a:	9200      	str	r2, [sp, #0]
 8007f8c:	0021      	movs	r1, r4
 8007f8e:	003a      	movs	r2, r7
 8007f90:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd0 <_svfiprintf_r+0x1f8>)
 8007f92:	9803      	ldr	r0, [sp, #12]
 8007f94:	e000      	b.n	8007f98 <_svfiprintf_r+0x1c0>
 8007f96:	bf00      	nop
 8007f98:	9004      	str	r0, [sp, #16]
 8007f9a:	9b04      	ldr	r3, [sp, #16]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	d1d6      	bne.n	8007f4e <_svfiprintf_r+0x176>
 8007fa0:	89bb      	ldrh	r3, [r7, #12]
 8007fa2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007fa4:	065b      	lsls	r3, r3, #25
 8007fa6:	d500      	bpl.n	8007faa <_svfiprintf_r+0x1d2>
 8007fa8:	e72c      	b.n	8007e04 <_svfiprintf_r+0x2c>
 8007faa:	b021      	add	sp, #132	@ 0x84
 8007fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fae:	aa07      	add	r2, sp, #28
 8007fb0:	9200      	str	r2, [sp, #0]
 8007fb2:	0021      	movs	r1, r4
 8007fb4:	003a      	movs	r2, r7
 8007fb6:	4b06      	ldr	r3, [pc, #24]	@ (8007fd0 <_svfiprintf_r+0x1f8>)
 8007fb8:	9803      	ldr	r0, [sp, #12]
 8007fba:	f000 f87b 	bl	80080b4 <_printf_i>
 8007fbe:	e7eb      	b.n	8007f98 <_svfiprintf_r+0x1c0>
 8007fc0:	08008f34 	.word	0x08008f34
 8007fc4:	08008f3a 	.word	0x08008f3a
 8007fc8:	08008f3e 	.word	0x08008f3e
 8007fcc:	00000000 	.word	0x00000000
 8007fd0:	08007d19 	.word	0x08007d19

08007fd4 <_printf_common>:
 8007fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fd6:	0016      	movs	r6, r2
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	688a      	ldr	r2, [r1, #8]
 8007fdc:	690b      	ldr	r3, [r1, #16]
 8007fde:	000c      	movs	r4, r1
 8007fe0:	9000      	str	r0, [sp, #0]
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	da00      	bge.n	8007fe8 <_printf_common+0x14>
 8007fe6:	0013      	movs	r3, r2
 8007fe8:	0022      	movs	r2, r4
 8007fea:	6033      	str	r3, [r6, #0]
 8007fec:	3243      	adds	r2, #67	@ 0x43
 8007fee:	7812      	ldrb	r2, [r2, #0]
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	d001      	beq.n	8007ff8 <_printf_common+0x24>
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	6033      	str	r3, [r6, #0]
 8007ff8:	6823      	ldr	r3, [r4, #0]
 8007ffa:	069b      	lsls	r3, r3, #26
 8007ffc:	d502      	bpl.n	8008004 <_printf_common+0x30>
 8007ffe:	6833      	ldr	r3, [r6, #0]
 8008000:	3302      	adds	r3, #2
 8008002:	6033      	str	r3, [r6, #0]
 8008004:	6822      	ldr	r2, [r4, #0]
 8008006:	2306      	movs	r3, #6
 8008008:	0015      	movs	r5, r2
 800800a:	401d      	ands	r5, r3
 800800c:	421a      	tst	r2, r3
 800800e:	d027      	beq.n	8008060 <_printf_common+0x8c>
 8008010:	0023      	movs	r3, r4
 8008012:	3343      	adds	r3, #67	@ 0x43
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	1e5a      	subs	r2, r3, #1
 8008018:	4193      	sbcs	r3, r2
 800801a:	6822      	ldr	r2, [r4, #0]
 800801c:	0692      	lsls	r2, r2, #26
 800801e:	d430      	bmi.n	8008082 <_printf_common+0xae>
 8008020:	0022      	movs	r2, r4
 8008022:	9901      	ldr	r1, [sp, #4]
 8008024:	9800      	ldr	r0, [sp, #0]
 8008026:	9d08      	ldr	r5, [sp, #32]
 8008028:	3243      	adds	r2, #67	@ 0x43
 800802a:	47a8      	blx	r5
 800802c:	3001      	adds	r0, #1
 800802e:	d025      	beq.n	800807c <_printf_common+0xa8>
 8008030:	2206      	movs	r2, #6
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	2500      	movs	r5, #0
 8008036:	4013      	ands	r3, r2
 8008038:	2b04      	cmp	r3, #4
 800803a:	d105      	bne.n	8008048 <_printf_common+0x74>
 800803c:	6833      	ldr	r3, [r6, #0]
 800803e:	68e5      	ldr	r5, [r4, #12]
 8008040:	1aed      	subs	r5, r5, r3
 8008042:	43eb      	mvns	r3, r5
 8008044:	17db      	asrs	r3, r3, #31
 8008046:	401d      	ands	r5, r3
 8008048:	68a3      	ldr	r3, [r4, #8]
 800804a:	6922      	ldr	r2, [r4, #16]
 800804c:	4293      	cmp	r3, r2
 800804e:	dd01      	ble.n	8008054 <_printf_common+0x80>
 8008050:	1a9b      	subs	r3, r3, r2
 8008052:	18ed      	adds	r5, r5, r3
 8008054:	2600      	movs	r6, #0
 8008056:	42b5      	cmp	r5, r6
 8008058:	d120      	bne.n	800809c <_printf_common+0xc8>
 800805a:	2000      	movs	r0, #0
 800805c:	e010      	b.n	8008080 <_printf_common+0xac>
 800805e:	3501      	adds	r5, #1
 8008060:	68e3      	ldr	r3, [r4, #12]
 8008062:	6832      	ldr	r2, [r6, #0]
 8008064:	1a9b      	subs	r3, r3, r2
 8008066:	42ab      	cmp	r3, r5
 8008068:	ddd2      	ble.n	8008010 <_printf_common+0x3c>
 800806a:	0022      	movs	r2, r4
 800806c:	2301      	movs	r3, #1
 800806e:	9901      	ldr	r1, [sp, #4]
 8008070:	9800      	ldr	r0, [sp, #0]
 8008072:	9f08      	ldr	r7, [sp, #32]
 8008074:	3219      	adds	r2, #25
 8008076:	47b8      	blx	r7
 8008078:	3001      	adds	r0, #1
 800807a:	d1f0      	bne.n	800805e <_printf_common+0x8a>
 800807c:	2001      	movs	r0, #1
 800807e:	4240      	negs	r0, r0
 8008080:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008082:	2030      	movs	r0, #48	@ 0x30
 8008084:	18e1      	adds	r1, r4, r3
 8008086:	3143      	adds	r1, #67	@ 0x43
 8008088:	7008      	strb	r0, [r1, #0]
 800808a:	0021      	movs	r1, r4
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	3145      	adds	r1, #69	@ 0x45
 8008090:	7809      	ldrb	r1, [r1, #0]
 8008092:	18a2      	adds	r2, r4, r2
 8008094:	3243      	adds	r2, #67	@ 0x43
 8008096:	3302      	adds	r3, #2
 8008098:	7011      	strb	r1, [r2, #0]
 800809a:	e7c1      	b.n	8008020 <_printf_common+0x4c>
 800809c:	0022      	movs	r2, r4
 800809e:	2301      	movs	r3, #1
 80080a0:	9901      	ldr	r1, [sp, #4]
 80080a2:	9800      	ldr	r0, [sp, #0]
 80080a4:	9f08      	ldr	r7, [sp, #32]
 80080a6:	321a      	adds	r2, #26
 80080a8:	47b8      	blx	r7
 80080aa:	3001      	adds	r0, #1
 80080ac:	d0e6      	beq.n	800807c <_printf_common+0xa8>
 80080ae:	3601      	adds	r6, #1
 80080b0:	e7d1      	b.n	8008056 <_printf_common+0x82>
	...

080080b4 <_printf_i>:
 80080b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080b6:	b08b      	sub	sp, #44	@ 0x2c
 80080b8:	9206      	str	r2, [sp, #24]
 80080ba:	000a      	movs	r2, r1
 80080bc:	3243      	adds	r2, #67	@ 0x43
 80080be:	9307      	str	r3, [sp, #28]
 80080c0:	9005      	str	r0, [sp, #20]
 80080c2:	9203      	str	r2, [sp, #12]
 80080c4:	7e0a      	ldrb	r2, [r1, #24]
 80080c6:	000c      	movs	r4, r1
 80080c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080ca:	2a78      	cmp	r2, #120	@ 0x78
 80080cc:	d809      	bhi.n	80080e2 <_printf_i+0x2e>
 80080ce:	2a62      	cmp	r2, #98	@ 0x62
 80080d0:	d80b      	bhi.n	80080ea <_printf_i+0x36>
 80080d2:	2a00      	cmp	r2, #0
 80080d4:	d100      	bne.n	80080d8 <_printf_i+0x24>
 80080d6:	e0bc      	b.n	8008252 <_printf_i+0x19e>
 80080d8:	497b      	ldr	r1, [pc, #492]	@ (80082c8 <_printf_i+0x214>)
 80080da:	9104      	str	r1, [sp, #16]
 80080dc:	2a58      	cmp	r2, #88	@ 0x58
 80080de:	d100      	bne.n	80080e2 <_printf_i+0x2e>
 80080e0:	e090      	b.n	8008204 <_printf_i+0x150>
 80080e2:	0025      	movs	r5, r4
 80080e4:	3542      	adds	r5, #66	@ 0x42
 80080e6:	702a      	strb	r2, [r5, #0]
 80080e8:	e022      	b.n	8008130 <_printf_i+0x7c>
 80080ea:	0010      	movs	r0, r2
 80080ec:	3863      	subs	r0, #99	@ 0x63
 80080ee:	2815      	cmp	r0, #21
 80080f0:	d8f7      	bhi.n	80080e2 <_printf_i+0x2e>
 80080f2:	f7f8 f811 	bl	8000118 <__gnu_thumb1_case_shi>
 80080f6:	0016      	.short	0x0016
 80080f8:	fff6001f 	.word	0xfff6001f
 80080fc:	fff6fff6 	.word	0xfff6fff6
 8008100:	001ffff6 	.word	0x001ffff6
 8008104:	fff6fff6 	.word	0xfff6fff6
 8008108:	fff6fff6 	.word	0xfff6fff6
 800810c:	003600a1 	.word	0x003600a1
 8008110:	fff60080 	.word	0xfff60080
 8008114:	00b2fff6 	.word	0x00b2fff6
 8008118:	0036fff6 	.word	0x0036fff6
 800811c:	fff6fff6 	.word	0xfff6fff6
 8008120:	0084      	.short	0x0084
 8008122:	0025      	movs	r5, r4
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	3542      	adds	r5, #66	@ 0x42
 8008128:	1d11      	adds	r1, r2, #4
 800812a:	6019      	str	r1, [r3, #0]
 800812c:	6813      	ldr	r3, [r2, #0]
 800812e:	702b      	strb	r3, [r5, #0]
 8008130:	2301      	movs	r3, #1
 8008132:	e0a0      	b.n	8008276 <_printf_i+0x1c2>
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	6809      	ldr	r1, [r1, #0]
 8008138:	1d02      	adds	r2, r0, #4
 800813a:	060d      	lsls	r5, r1, #24
 800813c:	d50b      	bpl.n	8008156 <_printf_i+0xa2>
 800813e:	6806      	ldr	r6, [r0, #0]
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	2e00      	cmp	r6, #0
 8008144:	da03      	bge.n	800814e <_printf_i+0x9a>
 8008146:	232d      	movs	r3, #45	@ 0x2d
 8008148:	9a03      	ldr	r2, [sp, #12]
 800814a:	4276      	negs	r6, r6
 800814c:	7013      	strb	r3, [r2, #0]
 800814e:	4b5e      	ldr	r3, [pc, #376]	@ (80082c8 <_printf_i+0x214>)
 8008150:	270a      	movs	r7, #10
 8008152:	9304      	str	r3, [sp, #16]
 8008154:	e018      	b.n	8008188 <_printf_i+0xd4>
 8008156:	6806      	ldr	r6, [r0, #0]
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	0649      	lsls	r1, r1, #25
 800815c:	d5f1      	bpl.n	8008142 <_printf_i+0x8e>
 800815e:	b236      	sxth	r6, r6
 8008160:	e7ef      	b.n	8008142 <_printf_i+0x8e>
 8008162:	6808      	ldr	r0, [r1, #0]
 8008164:	6819      	ldr	r1, [r3, #0]
 8008166:	c940      	ldmia	r1!, {r6}
 8008168:	0605      	lsls	r5, r0, #24
 800816a:	d402      	bmi.n	8008172 <_printf_i+0xbe>
 800816c:	0640      	lsls	r0, r0, #25
 800816e:	d500      	bpl.n	8008172 <_printf_i+0xbe>
 8008170:	b2b6      	uxth	r6, r6
 8008172:	6019      	str	r1, [r3, #0]
 8008174:	4b54      	ldr	r3, [pc, #336]	@ (80082c8 <_printf_i+0x214>)
 8008176:	270a      	movs	r7, #10
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	2a6f      	cmp	r2, #111	@ 0x6f
 800817c:	d100      	bne.n	8008180 <_printf_i+0xcc>
 800817e:	3f02      	subs	r7, #2
 8008180:	0023      	movs	r3, r4
 8008182:	2200      	movs	r2, #0
 8008184:	3343      	adds	r3, #67	@ 0x43
 8008186:	701a      	strb	r2, [r3, #0]
 8008188:	6863      	ldr	r3, [r4, #4]
 800818a:	60a3      	str	r3, [r4, #8]
 800818c:	2b00      	cmp	r3, #0
 800818e:	db03      	blt.n	8008198 <_printf_i+0xe4>
 8008190:	2104      	movs	r1, #4
 8008192:	6822      	ldr	r2, [r4, #0]
 8008194:	438a      	bics	r2, r1
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	2e00      	cmp	r6, #0
 800819a:	d102      	bne.n	80081a2 <_printf_i+0xee>
 800819c:	9d03      	ldr	r5, [sp, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00c      	beq.n	80081bc <_printf_i+0x108>
 80081a2:	9d03      	ldr	r5, [sp, #12]
 80081a4:	0030      	movs	r0, r6
 80081a6:	0039      	movs	r1, r7
 80081a8:	f7f8 f846 	bl	8000238 <__aeabi_uidivmod>
 80081ac:	9b04      	ldr	r3, [sp, #16]
 80081ae:	3d01      	subs	r5, #1
 80081b0:	5c5b      	ldrb	r3, [r3, r1]
 80081b2:	702b      	strb	r3, [r5, #0]
 80081b4:	0033      	movs	r3, r6
 80081b6:	0006      	movs	r6, r0
 80081b8:	429f      	cmp	r7, r3
 80081ba:	d9f3      	bls.n	80081a4 <_printf_i+0xf0>
 80081bc:	2f08      	cmp	r7, #8
 80081be:	d109      	bne.n	80081d4 <_printf_i+0x120>
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	07db      	lsls	r3, r3, #31
 80081c4:	d506      	bpl.n	80081d4 <_printf_i+0x120>
 80081c6:	6862      	ldr	r2, [r4, #4]
 80081c8:	6923      	ldr	r3, [r4, #16]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	dc02      	bgt.n	80081d4 <_printf_i+0x120>
 80081ce:	2330      	movs	r3, #48	@ 0x30
 80081d0:	3d01      	subs	r5, #1
 80081d2:	702b      	strb	r3, [r5, #0]
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	1b5b      	subs	r3, r3, r5
 80081d8:	6123      	str	r3, [r4, #16]
 80081da:	9b07      	ldr	r3, [sp, #28]
 80081dc:	0021      	movs	r1, r4
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	9805      	ldr	r0, [sp, #20]
 80081e2:	9b06      	ldr	r3, [sp, #24]
 80081e4:	aa09      	add	r2, sp, #36	@ 0x24
 80081e6:	f7ff fef5 	bl	8007fd4 <_printf_common>
 80081ea:	3001      	adds	r0, #1
 80081ec:	d148      	bne.n	8008280 <_printf_i+0x1cc>
 80081ee:	2001      	movs	r0, #1
 80081f0:	4240      	negs	r0, r0
 80081f2:	b00b      	add	sp, #44	@ 0x2c
 80081f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081f6:	2220      	movs	r2, #32
 80081f8:	6809      	ldr	r1, [r1, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	6022      	str	r2, [r4, #0]
 80081fe:	2278      	movs	r2, #120	@ 0x78
 8008200:	4932      	ldr	r1, [pc, #200]	@ (80082cc <_printf_i+0x218>)
 8008202:	9104      	str	r1, [sp, #16]
 8008204:	0021      	movs	r1, r4
 8008206:	3145      	adds	r1, #69	@ 0x45
 8008208:	700a      	strb	r2, [r1, #0]
 800820a:	6819      	ldr	r1, [r3, #0]
 800820c:	6822      	ldr	r2, [r4, #0]
 800820e:	c940      	ldmia	r1!, {r6}
 8008210:	0610      	lsls	r0, r2, #24
 8008212:	d402      	bmi.n	800821a <_printf_i+0x166>
 8008214:	0650      	lsls	r0, r2, #25
 8008216:	d500      	bpl.n	800821a <_printf_i+0x166>
 8008218:	b2b6      	uxth	r6, r6
 800821a:	6019      	str	r1, [r3, #0]
 800821c:	07d3      	lsls	r3, r2, #31
 800821e:	d502      	bpl.n	8008226 <_printf_i+0x172>
 8008220:	2320      	movs	r3, #32
 8008222:	4313      	orrs	r3, r2
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	2e00      	cmp	r6, #0
 8008228:	d001      	beq.n	800822e <_printf_i+0x17a>
 800822a:	2710      	movs	r7, #16
 800822c:	e7a8      	b.n	8008180 <_printf_i+0xcc>
 800822e:	2220      	movs	r2, #32
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	4393      	bics	r3, r2
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	e7f8      	b.n	800822a <_printf_i+0x176>
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	680d      	ldr	r5, [r1, #0]
 800823c:	1d10      	adds	r0, r2, #4
 800823e:	6949      	ldr	r1, [r1, #20]
 8008240:	6018      	str	r0, [r3, #0]
 8008242:	6813      	ldr	r3, [r2, #0]
 8008244:	062e      	lsls	r6, r5, #24
 8008246:	d501      	bpl.n	800824c <_printf_i+0x198>
 8008248:	6019      	str	r1, [r3, #0]
 800824a:	e002      	b.n	8008252 <_printf_i+0x19e>
 800824c:	066d      	lsls	r5, r5, #25
 800824e:	d5fb      	bpl.n	8008248 <_printf_i+0x194>
 8008250:	8019      	strh	r1, [r3, #0]
 8008252:	2300      	movs	r3, #0
 8008254:	9d03      	ldr	r5, [sp, #12]
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	e7bf      	b.n	80081da <_printf_i+0x126>
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	1d11      	adds	r1, r2, #4
 800825e:	6019      	str	r1, [r3, #0]
 8008260:	6815      	ldr	r5, [r2, #0]
 8008262:	2100      	movs	r1, #0
 8008264:	0028      	movs	r0, r5
 8008266:	6862      	ldr	r2, [r4, #4]
 8008268:	f000 f91a 	bl	80084a0 <memchr>
 800826c:	2800      	cmp	r0, #0
 800826e:	d001      	beq.n	8008274 <_printf_i+0x1c0>
 8008270:	1b40      	subs	r0, r0, r5
 8008272:	6060      	str	r0, [r4, #4]
 8008274:	6863      	ldr	r3, [r4, #4]
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	2300      	movs	r3, #0
 800827a:	9a03      	ldr	r2, [sp, #12]
 800827c:	7013      	strb	r3, [r2, #0]
 800827e:	e7ac      	b.n	80081da <_printf_i+0x126>
 8008280:	002a      	movs	r2, r5
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	9906      	ldr	r1, [sp, #24]
 8008286:	9805      	ldr	r0, [sp, #20]
 8008288:	9d07      	ldr	r5, [sp, #28]
 800828a:	47a8      	blx	r5
 800828c:	3001      	adds	r0, #1
 800828e:	d0ae      	beq.n	80081ee <_printf_i+0x13a>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	079b      	lsls	r3, r3, #30
 8008294:	d415      	bmi.n	80082c2 <_printf_i+0x20e>
 8008296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008298:	68e0      	ldr	r0, [r4, #12]
 800829a:	4298      	cmp	r0, r3
 800829c:	daa9      	bge.n	80081f2 <_printf_i+0x13e>
 800829e:	0018      	movs	r0, r3
 80082a0:	e7a7      	b.n	80081f2 <_printf_i+0x13e>
 80082a2:	0022      	movs	r2, r4
 80082a4:	2301      	movs	r3, #1
 80082a6:	9906      	ldr	r1, [sp, #24]
 80082a8:	9805      	ldr	r0, [sp, #20]
 80082aa:	9e07      	ldr	r6, [sp, #28]
 80082ac:	3219      	adds	r2, #25
 80082ae:	47b0      	blx	r6
 80082b0:	3001      	adds	r0, #1
 80082b2:	d09c      	beq.n	80081ee <_printf_i+0x13a>
 80082b4:	3501      	adds	r5, #1
 80082b6:	68e3      	ldr	r3, [r4, #12]
 80082b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	42ab      	cmp	r3, r5
 80082be:	dcf0      	bgt.n	80082a2 <_printf_i+0x1ee>
 80082c0:	e7e9      	b.n	8008296 <_printf_i+0x1e2>
 80082c2:	2500      	movs	r5, #0
 80082c4:	e7f7      	b.n	80082b6 <_printf_i+0x202>
 80082c6:	46c0      	nop			@ (mov r8, r8)
 80082c8:	08008f45 	.word	0x08008f45
 80082cc:	08008f56 	.word	0x08008f56

080082d0 <__sflush_r>:
 80082d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082d2:	220c      	movs	r2, #12
 80082d4:	5e8b      	ldrsh	r3, [r1, r2]
 80082d6:	0005      	movs	r5, r0
 80082d8:	000c      	movs	r4, r1
 80082da:	071a      	lsls	r2, r3, #28
 80082dc:	d456      	bmi.n	800838c <__sflush_r+0xbc>
 80082de:	684a      	ldr	r2, [r1, #4]
 80082e0:	2a00      	cmp	r2, #0
 80082e2:	dc02      	bgt.n	80082ea <__sflush_r+0x1a>
 80082e4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	dd4e      	ble.n	8008388 <__sflush_r+0xb8>
 80082ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80082ec:	2f00      	cmp	r7, #0
 80082ee:	d04b      	beq.n	8008388 <__sflush_r+0xb8>
 80082f0:	2200      	movs	r2, #0
 80082f2:	2080      	movs	r0, #128	@ 0x80
 80082f4:	682e      	ldr	r6, [r5, #0]
 80082f6:	602a      	str	r2, [r5, #0]
 80082f8:	001a      	movs	r2, r3
 80082fa:	0140      	lsls	r0, r0, #5
 80082fc:	6a21      	ldr	r1, [r4, #32]
 80082fe:	4002      	ands	r2, r0
 8008300:	4203      	tst	r3, r0
 8008302:	d033      	beq.n	800836c <__sflush_r+0x9c>
 8008304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	075b      	lsls	r3, r3, #29
 800830a:	d506      	bpl.n	800831a <__sflush_r+0x4a>
 800830c:	6863      	ldr	r3, [r4, #4]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <__sflush_r+0x4a>
 8008316:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008318:	1ad2      	subs	r2, r2, r3
 800831a:	2300      	movs	r3, #0
 800831c:	0028      	movs	r0, r5
 800831e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008320:	6a21      	ldr	r1, [r4, #32]
 8008322:	47b8      	blx	r7
 8008324:	89a2      	ldrh	r2, [r4, #12]
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	d106      	bne.n	8008338 <__sflush_r+0x68>
 800832a:	6829      	ldr	r1, [r5, #0]
 800832c:	291d      	cmp	r1, #29
 800832e:	d846      	bhi.n	80083be <__sflush_r+0xee>
 8008330:	4b29      	ldr	r3, [pc, #164]	@ (80083d8 <__sflush_r+0x108>)
 8008332:	410b      	asrs	r3, r1
 8008334:	07db      	lsls	r3, r3, #31
 8008336:	d442      	bmi.n	80083be <__sflush_r+0xee>
 8008338:	2300      	movs	r3, #0
 800833a:	6063      	str	r3, [r4, #4]
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	6023      	str	r3, [r4, #0]
 8008340:	04d2      	lsls	r2, r2, #19
 8008342:	d505      	bpl.n	8008350 <__sflush_r+0x80>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <__sflush_r+0x7e>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d100      	bne.n	8008350 <__sflush_r+0x80>
 800834e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008352:	602e      	str	r6, [r5, #0]
 8008354:	2900      	cmp	r1, #0
 8008356:	d017      	beq.n	8008388 <__sflush_r+0xb8>
 8008358:	0023      	movs	r3, r4
 800835a:	3344      	adds	r3, #68	@ 0x44
 800835c:	4299      	cmp	r1, r3
 800835e:	d002      	beq.n	8008366 <__sflush_r+0x96>
 8008360:	0028      	movs	r0, r5
 8008362:	f7ff fbd3 	bl	8007b0c <_free_r>
 8008366:	2300      	movs	r3, #0
 8008368:	6363      	str	r3, [r4, #52]	@ 0x34
 800836a:	e00d      	b.n	8008388 <__sflush_r+0xb8>
 800836c:	2301      	movs	r3, #1
 800836e:	0028      	movs	r0, r5
 8008370:	47b8      	blx	r7
 8008372:	0002      	movs	r2, r0
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	d1c6      	bne.n	8008306 <__sflush_r+0x36>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0c3      	beq.n	8008306 <__sflush_r+0x36>
 800837e:	2b1d      	cmp	r3, #29
 8008380:	d001      	beq.n	8008386 <__sflush_r+0xb6>
 8008382:	2b16      	cmp	r3, #22
 8008384:	d11a      	bne.n	80083bc <__sflush_r+0xec>
 8008386:	602e      	str	r6, [r5, #0]
 8008388:	2000      	movs	r0, #0
 800838a:	e01e      	b.n	80083ca <__sflush_r+0xfa>
 800838c:	690e      	ldr	r6, [r1, #16]
 800838e:	2e00      	cmp	r6, #0
 8008390:	d0fa      	beq.n	8008388 <__sflush_r+0xb8>
 8008392:	680f      	ldr	r7, [r1, #0]
 8008394:	600e      	str	r6, [r1, #0]
 8008396:	1bba      	subs	r2, r7, r6
 8008398:	9201      	str	r2, [sp, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	079b      	lsls	r3, r3, #30
 800839e:	d100      	bne.n	80083a2 <__sflush_r+0xd2>
 80083a0:	694a      	ldr	r2, [r1, #20]
 80083a2:	60a2      	str	r2, [r4, #8]
 80083a4:	9b01      	ldr	r3, [sp, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	ddee      	ble.n	8008388 <__sflush_r+0xb8>
 80083aa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80083ac:	0032      	movs	r2, r6
 80083ae:	001f      	movs	r7, r3
 80083b0:	0028      	movs	r0, r5
 80083b2:	9b01      	ldr	r3, [sp, #4]
 80083b4:	6a21      	ldr	r1, [r4, #32]
 80083b6:	47b8      	blx	r7
 80083b8:	2800      	cmp	r0, #0
 80083ba:	dc07      	bgt.n	80083cc <__sflush_r+0xfc>
 80083bc:	89a2      	ldrh	r2, [r4, #12]
 80083be:	2340      	movs	r3, #64	@ 0x40
 80083c0:	2001      	movs	r0, #1
 80083c2:	4313      	orrs	r3, r2
 80083c4:	b21b      	sxth	r3, r3
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	4240      	negs	r0, r0
 80083ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083cc:	9b01      	ldr	r3, [sp, #4]
 80083ce:	1836      	adds	r6, r6, r0
 80083d0:	1a1b      	subs	r3, r3, r0
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	e7e6      	b.n	80083a4 <__sflush_r+0xd4>
 80083d6:	46c0      	nop			@ (mov r8, r8)
 80083d8:	dfbffffe 	.word	0xdfbffffe

080083dc <_fflush_r>:
 80083dc:	690b      	ldr	r3, [r1, #16]
 80083de:	b570      	push	{r4, r5, r6, lr}
 80083e0:	0005      	movs	r5, r0
 80083e2:	000c      	movs	r4, r1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <_fflush_r+0x12>
 80083e8:	2500      	movs	r5, #0
 80083ea:	0028      	movs	r0, r5
 80083ec:	bd70      	pop	{r4, r5, r6, pc}
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d004      	beq.n	80083fc <_fflush_r+0x20>
 80083f2:	6a03      	ldr	r3, [r0, #32]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <_fflush_r+0x20>
 80083f8:	f7ff f9d6 	bl	80077a8 <__sinit>
 80083fc:	220c      	movs	r2, #12
 80083fe:	5ea3      	ldrsh	r3, [r4, r2]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0f1      	beq.n	80083e8 <_fflush_r+0xc>
 8008404:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008406:	07d2      	lsls	r2, r2, #31
 8008408:	d404      	bmi.n	8008414 <_fflush_r+0x38>
 800840a:	059b      	lsls	r3, r3, #22
 800840c:	d402      	bmi.n	8008414 <_fflush_r+0x38>
 800840e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008410:	f7ff fb4b 	bl	8007aaa <__retarget_lock_acquire_recursive>
 8008414:	0028      	movs	r0, r5
 8008416:	0021      	movs	r1, r4
 8008418:	f7ff ff5a 	bl	80082d0 <__sflush_r>
 800841c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800841e:	0005      	movs	r5, r0
 8008420:	07db      	lsls	r3, r3, #31
 8008422:	d4e2      	bmi.n	80083ea <_fflush_r+0xe>
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	059b      	lsls	r3, r3, #22
 8008428:	d4df      	bmi.n	80083ea <_fflush_r+0xe>
 800842a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800842c:	f7ff fb3e 	bl	8007aac <__retarget_lock_release_recursive>
 8008430:	e7db      	b.n	80083ea <_fflush_r+0xe>
	...

08008434 <fiprintf>:
 8008434:	b40e      	push	{r1, r2, r3}
 8008436:	b517      	push	{r0, r1, r2, r4, lr}
 8008438:	4c05      	ldr	r4, [pc, #20]	@ (8008450 <fiprintf+0x1c>)
 800843a:	ab05      	add	r3, sp, #20
 800843c:	cb04      	ldmia	r3!, {r2}
 800843e:	0001      	movs	r1, r0
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	9301      	str	r3, [sp, #4]
 8008444:	f000 f894 	bl	8008570 <_vfiprintf_r>
 8008448:	bc1e      	pop	{r1, r2, r3, r4}
 800844a:	bc08      	pop	{r3}
 800844c:	b003      	add	sp, #12
 800844e:	4718      	bx	r3
 8008450:	2000019c 	.word	0x2000019c

08008454 <memmove>:
 8008454:	b510      	push	{r4, lr}
 8008456:	4288      	cmp	r0, r1
 8008458:	d806      	bhi.n	8008468 <memmove+0x14>
 800845a:	2300      	movs	r3, #0
 800845c:	429a      	cmp	r2, r3
 800845e:	d008      	beq.n	8008472 <memmove+0x1e>
 8008460:	5ccc      	ldrb	r4, [r1, r3]
 8008462:	54c4      	strb	r4, [r0, r3]
 8008464:	3301      	adds	r3, #1
 8008466:	e7f9      	b.n	800845c <memmove+0x8>
 8008468:	188b      	adds	r3, r1, r2
 800846a:	4298      	cmp	r0, r3
 800846c:	d2f5      	bcs.n	800845a <memmove+0x6>
 800846e:	3a01      	subs	r2, #1
 8008470:	d200      	bcs.n	8008474 <memmove+0x20>
 8008472:	bd10      	pop	{r4, pc}
 8008474:	5c8b      	ldrb	r3, [r1, r2]
 8008476:	5483      	strb	r3, [r0, r2]
 8008478:	e7f9      	b.n	800846e <memmove+0x1a>
	...

0800847c <_sbrk_r>:
 800847c:	2300      	movs	r3, #0
 800847e:	b570      	push	{r4, r5, r6, lr}
 8008480:	4d06      	ldr	r5, [pc, #24]	@ (800849c <_sbrk_r+0x20>)
 8008482:	0004      	movs	r4, r0
 8008484:	0008      	movs	r0, r1
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	f7f9 ff1a 	bl	80022c0 <_sbrk>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d103      	bne.n	8008498 <_sbrk_r+0x1c>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d000      	beq.n	8008498 <_sbrk_r+0x1c>
 8008496:	6023      	str	r3, [r4, #0]
 8008498:	bd70      	pop	{r4, r5, r6, pc}
 800849a:	46c0      	nop			@ (mov r8, r8)
 800849c:	20001740 	.word	0x20001740

080084a0 <memchr>:
 80084a0:	b2c9      	uxtb	r1, r1
 80084a2:	1882      	adds	r2, r0, r2
 80084a4:	4290      	cmp	r0, r2
 80084a6:	d101      	bne.n	80084ac <memchr+0xc>
 80084a8:	2000      	movs	r0, #0
 80084aa:	4770      	bx	lr
 80084ac:	7803      	ldrb	r3, [r0, #0]
 80084ae:	428b      	cmp	r3, r1
 80084b0:	d0fb      	beq.n	80084aa <memchr+0xa>
 80084b2:	3001      	adds	r0, #1
 80084b4:	e7f6      	b.n	80084a4 <memchr+0x4>

080084b6 <abort>:
 80084b6:	2006      	movs	r0, #6
 80084b8:	b510      	push	{r4, lr}
 80084ba:	f000 fa3f 	bl	800893c <raise>
 80084be:	2001      	movs	r0, #1
 80084c0:	f7f9 fece 	bl	8002260 <_exit>

080084c4 <_realloc_r>:
 80084c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084c6:	0006      	movs	r6, r0
 80084c8:	000c      	movs	r4, r1
 80084ca:	0015      	movs	r5, r2
 80084cc:	2900      	cmp	r1, #0
 80084ce:	d105      	bne.n	80084dc <_realloc_r+0x18>
 80084d0:	0011      	movs	r1, r2
 80084d2:	f7ff fb91 	bl	8007bf8 <_malloc_r>
 80084d6:	0004      	movs	r4, r0
 80084d8:	0020      	movs	r0, r4
 80084da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084dc:	2a00      	cmp	r2, #0
 80084de:	d103      	bne.n	80084e8 <_realloc_r+0x24>
 80084e0:	f7ff fb14 	bl	8007b0c <_free_r>
 80084e4:	2400      	movs	r4, #0
 80084e6:	e7f7      	b.n	80084d8 <_realloc_r+0x14>
 80084e8:	f000 fa48 	bl	800897c <_malloc_usable_size_r>
 80084ec:	0007      	movs	r7, r0
 80084ee:	4285      	cmp	r5, r0
 80084f0:	d802      	bhi.n	80084f8 <_realloc_r+0x34>
 80084f2:	0843      	lsrs	r3, r0, #1
 80084f4:	42ab      	cmp	r3, r5
 80084f6:	d3ef      	bcc.n	80084d8 <_realloc_r+0x14>
 80084f8:	0029      	movs	r1, r5
 80084fa:	0030      	movs	r0, r6
 80084fc:	f7ff fb7c 	bl	8007bf8 <_malloc_r>
 8008500:	9001      	str	r0, [sp, #4]
 8008502:	2800      	cmp	r0, #0
 8008504:	d0ee      	beq.n	80084e4 <_realloc_r+0x20>
 8008506:	002a      	movs	r2, r5
 8008508:	42bd      	cmp	r5, r7
 800850a:	d900      	bls.n	800850e <_realloc_r+0x4a>
 800850c:	003a      	movs	r2, r7
 800850e:	0021      	movs	r1, r4
 8008510:	9801      	ldr	r0, [sp, #4]
 8008512:	f7ff fad4 	bl	8007abe <memcpy>
 8008516:	0021      	movs	r1, r4
 8008518:	0030      	movs	r0, r6
 800851a:	f7ff faf7 	bl	8007b0c <_free_r>
 800851e:	9c01      	ldr	r4, [sp, #4]
 8008520:	e7da      	b.n	80084d8 <_realloc_r+0x14>

08008522 <__sfputc_r>:
 8008522:	6893      	ldr	r3, [r2, #8]
 8008524:	b510      	push	{r4, lr}
 8008526:	3b01      	subs	r3, #1
 8008528:	6093      	str	r3, [r2, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	da04      	bge.n	8008538 <__sfputc_r+0x16>
 800852e:	6994      	ldr	r4, [r2, #24]
 8008530:	42a3      	cmp	r3, r4
 8008532:	db07      	blt.n	8008544 <__sfputc_r+0x22>
 8008534:	290a      	cmp	r1, #10
 8008536:	d005      	beq.n	8008544 <__sfputc_r+0x22>
 8008538:	6813      	ldr	r3, [r2, #0]
 800853a:	1c58      	adds	r0, r3, #1
 800853c:	6010      	str	r0, [r2, #0]
 800853e:	7019      	strb	r1, [r3, #0]
 8008540:	0008      	movs	r0, r1
 8008542:	bd10      	pop	{r4, pc}
 8008544:	f000 f930 	bl	80087a8 <__swbuf_r>
 8008548:	0001      	movs	r1, r0
 800854a:	e7f9      	b.n	8008540 <__sfputc_r+0x1e>

0800854c <__sfputs_r>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	0006      	movs	r6, r0
 8008550:	000f      	movs	r7, r1
 8008552:	0014      	movs	r4, r2
 8008554:	18d5      	adds	r5, r2, r3
 8008556:	42ac      	cmp	r4, r5
 8008558:	d101      	bne.n	800855e <__sfputs_r+0x12>
 800855a:	2000      	movs	r0, #0
 800855c:	e007      	b.n	800856e <__sfputs_r+0x22>
 800855e:	7821      	ldrb	r1, [r4, #0]
 8008560:	003a      	movs	r2, r7
 8008562:	0030      	movs	r0, r6
 8008564:	f7ff ffdd 	bl	8008522 <__sfputc_r>
 8008568:	3401      	adds	r4, #1
 800856a:	1c43      	adds	r3, r0, #1
 800856c:	d1f3      	bne.n	8008556 <__sfputs_r+0xa>
 800856e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008570 <_vfiprintf_r>:
 8008570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008572:	b0a1      	sub	sp, #132	@ 0x84
 8008574:	000f      	movs	r7, r1
 8008576:	0015      	movs	r5, r2
 8008578:	001e      	movs	r6, r3
 800857a:	9003      	str	r0, [sp, #12]
 800857c:	2800      	cmp	r0, #0
 800857e:	d004      	beq.n	800858a <_vfiprintf_r+0x1a>
 8008580:	6a03      	ldr	r3, [r0, #32]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <_vfiprintf_r+0x1a>
 8008586:	f7ff f90f 	bl	80077a8 <__sinit>
 800858a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800858c:	07db      	lsls	r3, r3, #31
 800858e:	d405      	bmi.n	800859c <_vfiprintf_r+0x2c>
 8008590:	89bb      	ldrh	r3, [r7, #12]
 8008592:	059b      	lsls	r3, r3, #22
 8008594:	d402      	bmi.n	800859c <_vfiprintf_r+0x2c>
 8008596:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008598:	f7ff fa87 	bl	8007aaa <__retarget_lock_acquire_recursive>
 800859c:	89bb      	ldrh	r3, [r7, #12]
 800859e:	071b      	lsls	r3, r3, #28
 80085a0:	d502      	bpl.n	80085a8 <_vfiprintf_r+0x38>
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d113      	bne.n	80085d0 <_vfiprintf_r+0x60>
 80085a8:	0039      	movs	r1, r7
 80085aa:	9803      	ldr	r0, [sp, #12]
 80085ac:	f000 f93e 	bl	800882c <__swsetup_r>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d00d      	beq.n	80085d0 <_vfiprintf_r+0x60>
 80085b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085b6:	07db      	lsls	r3, r3, #31
 80085b8:	d503      	bpl.n	80085c2 <_vfiprintf_r+0x52>
 80085ba:	2001      	movs	r0, #1
 80085bc:	4240      	negs	r0, r0
 80085be:	b021      	add	sp, #132	@ 0x84
 80085c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c2:	89bb      	ldrh	r3, [r7, #12]
 80085c4:	059b      	lsls	r3, r3, #22
 80085c6:	d4f8      	bmi.n	80085ba <_vfiprintf_r+0x4a>
 80085c8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80085ca:	f7ff fa6f 	bl	8007aac <__retarget_lock_release_recursive>
 80085ce:	e7f4      	b.n	80085ba <_vfiprintf_r+0x4a>
 80085d0:	2300      	movs	r3, #0
 80085d2:	ac08      	add	r4, sp, #32
 80085d4:	6163      	str	r3, [r4, #20]
 80085d6:	3320      	adds	r3, #32
 80085d8:	7663      	strb	r3, [r4, #25]
 80085da:	3310      	adds	r3, #16
 80085dc:	76a3      	strb	r3, [r4, #26]
 80085de:	9607      	str	r6, [sp, #28]
 80085e0:	002e      	movs	r6, r5
 80085e2:	7833      	ldrb	r3, [r6, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <_vfiprintf_r+0x7c>
 80085e8:	2b25      	cmp	r3, #37	@ 0x25
 80085ea:	d148      	bne.n	800867e <_vfiprintf_r+0x10e>
 80085ec:	1b73      	subs	r3, r6, r5
 80085ee:	9305      	str	r3, [sp, #20]
 80085f0:	42ae      	cmp	r6, r5
 80085f2:	d00b      	beq.n	800860c <_vfiprintf_r+0x9c>
 80085f4:	002a      	movs	r2, r5
 80085f6:	0039      	movs	r1, r7
 80085f8:	9803      	ldr	r0, [sp, #12]
 80085fa:	f7ff ffa7 	bl	800854c <__sfputs_r>
 80085fe:	3001      	adds	r0, #1
 8008600:	d100      	bne.n	8008604 <_vfiprintf_r+0x94>
 8008602:	e0ae      	b.n	8008762 <_vfiprintf_r+0x1f2>
 8008604:	6963      	ldr	r3, [r4, #20]
 8008606:	9a05      	ldr	r2, [sp, #20]
 8008608:	189b      	adds	r3, r3, r2
 800860a:	6163      	str	r3, [r4, #20]
 800860c:	7833      	ldrb	r3, [r6, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d100      	bne.n	8008614 <_vfiprintf_r+0xa4>
 8008612:	e0a6      	b.n	8008762 <_vfiprintf_r+0x1f2>
 8008614:	2201      	movs	r2, #1
 8008616:	2300      	movs	r3, #0
 8008618:	4252      	negs	r2, r2
 800861a:	6062      	str	r2, [r4, #4]
 800861c:	a904      	add	r1, sp, #16
 800861e:	3254      	adds	r2, #84	@ 0x54
 8008620:	1852      	adds	r2, r2, r1
 8008622:	1c75      	adds	r5, r6, #1
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	60e3      	str	r3, [r4, #12]
 8008628:	60a3      	str	r3, [r4, #8]
 800862a:	7013      	strb	r3, [r2, #0]
 800862c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800862e:	4b59      	ldr	r3, [pc, #356]	@ (8008794 <_vfiprintf_r+0x224>)
 8008630:	2205      	movs	r2, #5
 8008632:	0018      	movs	r0, r3
 8008634:	7829      	ldrb	r1, [r5, #0]
 8008636:	9305      	str	r3, [sp, #20]
 8008638:	f7ff ff32 	bl	80084a0 <memchr>
 800863c:	1c6e      	adds	r6, r5, #1
 800863e:	2800      	cmp	r0, #0
 8008640:	d11f      	bne.n	8008682 <_vfiprintf_r+0x112>
 8008642:	6822      	ldr	r2, [r4, #0]
 8008644:	06d3      	lsls	r3, r2, #27
 8008646:	d504      	bpl.n	8008652 <_vfiprintf_r+0xe2>
 8008648:	2353      	movs	r3, #83	@ 0x53
 800864a:	a904      	add	r1, sp, #16
 800864c:	185b      	adds	r3, r3, r1
 800864e:	2120      	movs	r1, #32
 8008650:	7019      	strb	r1, [r3, #0]
 8008652:	0713      	lsls	r3, r2, #28
 8008654:	d504      	bpl.n	8008660 <_vfiprintf_r+0xf0>
 8008656:	2353      	movs	r3, #83	@ 0x53
 8008658:	a904      	add	r1, sp, #16
 800865a:	185b      	adds	r3, r3, r1
 800865c:	212b      	movs	r1, #43	@ 0x2b
 800865e:	7019      	strb	r1, [r3, #0]
 8008660:	782b      	ldrb	r3, [r5, #0]
 8008662:	2b2a      	cmp	r3, #42	@ 0x2a
 8008664:	d016      	beq.n	8008694 <_vfiprintf_r+0x124>
 8008666:	002e      	movs	r6, r5
 8008668:	2100      	movs	r1, #0
 800866a:	200a      	movs	r0, #10
 800866c:	68e3      	ldr	r3, [r4, #12]
 800866e:	7832      	ldrb	r2, [r6, #0]
 8008670:	1c75      	adds	r5, r6, #1
 8008672:	3a30      	subs	r2, #48	@ 0x30
 8008674:	2a09      	cmp	r2, #9
 8008676:	d950      	bls.n	800871a <_vfiprintf_r+0x1aa>
 8008678:	2900      	cmp	r1, #0
 800867a:	d111      	bne.n	80086a0 <_vfiprintf_r+0x130>
 800867c:	e017      	b.n	80086ae <_vfiprintf_r+0x13e>
 800867e:	3601      	adds	r6, #1
 8008680:	e7af      	b.n	80085e2 <_vfiprintf_r+0x72>
 8008682:	9b05      	ldr	r3, [sp, #20]
 8008684:	6822      	ldr	r2, [r4, #0]
 8008686:	1ac0      	subs	r0, r0, r3
 8008688:	2301      	movs	r3, #1
 800868a:	4083      	lsls	r3, r0
 800868c:	4313      	orrs	r3, r2
 800868e:	0035      	movs	r5, r6
 8008690:	6023      	str	r3, [r4, #0]
 8008692:	e7cc      	b.n	800862e <_vfiprintf_r+0xbe>
 8008694:	9b07      	ldr	r3, [sp, #28]
 8008696:	1d19      	adds	r1, r3, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	9107      	str	r1, [sp, #28]
 800869c:	2b00      	cmp	r3, #0
 800869e:	db01      	blt.n	80086a4 <_vfiprintf_r+0x134>
 80086a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086a2:	e004      	b.n	80086ae <_vfiprintf_r+0x13e>
 80086a4:	425b      	negs	r3, r3
 80086a6:	60e3      	str	r3, [r4, #12]
 80086a8:	2302      	movs	r3, #2
 80086aa:	4313      	orrs	r3, r2
 80086ac:	6023      	str	r3, [r4, #0]
 80086ae:	7833      	ldrb	r3, [r6, #0]
 80086b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80086b2:	d10c      	bne.n	80086ce <_vfiprintf_r+0x15e>
 80086b4:	7873      	ldrb	r3, [r6, #1]
 80086b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b8:	d134      	bne.n	8008724 <_vfiprintf_r+0x1b4>
 80086ba:	9b07      	ldr	r3, [sp, #28]
 80086bc:	3602      	adds	r6, #2
 80086be:	1d1a      	adds	r2, r3, #4
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	9207      	str	r2, [sp, #28]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	da01      	bge.n	80086cc <_vfiprintf_r+0x15c>
 80086c8:	2301      	movs	r3, #1
 80086ca:	425b      	negs	r3, r3
 80086cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ce:	4d32      	ldr	r5, [pc, #200]	@ (8008798 <_vfiprintf_r+0x228>)
 80086d0:	2203      	movs	r2, #3
 80086d2:	0028      	movs	r0, r5
 80086d4:	7831      	ldrb	r1, [r6, #0]
 80086d6:	f7ff fee3 	bl	80084a0 <memchr>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d006      	beq.n	80086ec <_vfiprintf_r+0x17c>
 80086de:	2340      	movs	r3, #64	@ 0x40
 80086e0:	1b40      	subs	r0, r0, r5
 80086e2:	4083      	lsls	r3, r0
 80086e4:	6822      	ldr	r2, [r4, #0]
 80086e6:	3601      	adds	r6, #1
 80086e8:	4313      	orrs	r3, r2
 80086ea:	6023      	str	r3, [r4, #0]
 80086ec:	7831      	ldrb	r1, [r6, #0]
 80086ee:	2206      	movs	r2, #6
 80086f0:	482a      	ldr	r0, [pc, #168]	@ (800879c <_vfiprintf_r+0x22c>)
 80086f2:	1c75      	adds	r5, r6, #1
 80086f4:	7621      	strb	r1, [r4, #24]
 80086f6:	f7ff fed3 	bl	80084a0 <memchr>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	d040      	beq.n	8008780 <_vfiprintf_r+0x210>
 80086fe:	4b28      	ldr	r3, [pc, #160]	@ (80087a0 <_vfiprintf_r+0x230>)
 8008700:	2b00      	cmp	r3, #0
 8008702:	d122      	bne.n	800874a <_vfiprintf_r+0x1da>
 8008704:	2207      	movs	r2, #7
 8008706:	9b07      	ldr	r3, [sp, #28]
 8008708:	3307      	adds	r3, #7
 800870a:	4393      	bics	r3, r2
 800870c:	3308      	adds	r3, #8
 800870e:	9307      	str	r3, [sp, #28]
 8008710:	6963      	ldr	r3, [r4, #20]
 8008712:	9a04      	ldr	r2, [sp, #16]
 8008714:	189b      	adds	r3, r3, r2
 8008716:	6163      	str	r3, [r4, #20]
 8008718:	e762      	b.n	80085e0 <_vfiprintf_r+0x70>
 800871a:	4343      	muls	r3, r0
 800871c:	002e      	movs	r6, r5
 800871e:	2101      	movs	r1, #1
 8008720:	189b      	adds	r3, r3, r2
 8008722:	e7a4      	b.n	800866e <_vfiprintf_r+0xfe>
 8008724:	2300      	movs	r3, #0
 8008726:	200a      	movs	r0, #10
 8008728:	0019      	movs	r1, r3
 800872a:	3601      	adds	r6, #1
 800872c:	6063      	str	r3, [r4, #4]
 800872e:	7832      	ldrb	r2, [r6, #0]
 8008730:	1c75      	adds	r5, r6, #1
 8008732:	3a30      	subs	r2, #48	@ 0x30
 8008734:	2a09      	cmp	r2, #9
 8008736:	d903      	bls.n	8008740 <_vfiprintf_r+0x1d0>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0c8      	beq.n	80086ce <_vfiprintf_r+0x15e>
 800873c:	9109      	str	r1, [sp, #36]	@ 0x24
 800873e:	e7c6      	b.n	80086ce <_vfiprintf_r+0x15e>
 8008740:	4341      	muls	r1, r0
 8008742:	002e      	movs	r6, r5
 8008744:	2301      	movs	r3, #1
 8008746:	1889      	adds	r1, r1, r2
 8008748:	e7f1      	b.n	800872e <_vfiprintf_r+0x1be>
 800874a:	aa07      	add	r2, sp, #28
 800874c:	9200      	str	r2, [sp, #0]
 800874e:	0021      	movs	r1, r4
 8008750:	003a      	movs	r2, r7
 8008752:	4b14      	ldr	r3, [pc, #80]	@ (80087a4 <_vfiprintf_r+0x234>)
 8008754:	9803      	ldr	r0, [sp, #12]
 8008756:	e000      	b.n	800875a <_vfiprintf_r+0x1ea>
 8008758:	bf00      	nop
 800875a:	9004      	str	r0, [sp, #16]
 800875c:	9b04      	ldr	r3, [sp, #16]
 800875e:	3301      	adds	r3, #1
 8008760:	d1d6      	bne.n	8008710 <_vfiprintf_r+0x1a0>
 8008762:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008764:	07db      	lsls	r3, r3, #31
 8008766:	d405      	bmi.n	8008774 <_vfiprintf_r+0x204>
 8008768:	89bb      	ldrh	r3, [r7, #12]
 800876a:	059b      	lsls	r3, r3, #22
 800876c:	d402      	bmi.n	8008774 <_vfiprintf_r+0x204>
 800876e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008770:	f7ff f99c 	bl	8007aac <__retarget_lock_release_recursive>
 8008774:	89bb      	ldrh	r3, [r7, #12]
 8008776:	065b      	lsls	r3, r3, #25
 8008778:	d500      	bpl.n	800877c <_vfiprintf_r+0x20c>
 800877a:	e71e      	b.n	80085ba <_vfiprintf_r+0x4a>
 800877c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800877e:	e71e      	b.n	80085be <_vfiprintf_r+0x4e>
 8008780:	aa07      	add	r2, sp, #28
 8008782:	9200      	str	r2, [sp, #0]
 8008784:	0021      	movs	r1, r4
 8008786:	003a      	movs	r2, r7
 8008788:	4b06      	ldr	r3, [pc, #24]	@ (80087a4 <_vfiprintf_r+0x234>)
 800878a:	9803      	ldr	r0, [sp, #12]
 800878c:	f7ff fc92 	bl	80080b4 <_printf_i>
 8008790:	e7e3      	b.n	800875a <_vfiprintf_r+0x1ea>
 8008792:	46c0      	nop			@ (mov r8, r8)
 8008794:	08008f34 	.word	0x08008f34
 8008798:	08008f3a 	.word	0x08008f3a
 800879c:	08008f3e 	.word	0x08008f3e
 80087a0:	00000000 	.word	0x00000000
 80087a4:	0800854d 	.word	0x0800854d

080087a8 <__swbuf_r>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	0006      	movs	r6, r0
 80087ac:	000d      	movs	r5, r1
 80087ae:	0014      	movs	r4, r2
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d004      	beq.n	80087be <__swbuf_r+0x16>
 80087b4:	6a03      	ldr	r3, [r0, #32]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <__swbuf_r+0x16>
 80087ba:	f7fe fff5 	bl	80077a8 <__sinit>
 80087be:	69a3      	ldr	r3, [r4, #24]
 80087c0:	60a3      	str	r3, [r4, #8]
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	071b      	lsls	r3, r3, #28
 80087c6:	d502      	bpl.n	80087ce <__swbuf_r+0x26>
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d109      	bne.n	80087e2 <__swbuf_r+0x3a>
 80087ce:	0021      	movs	r1, r4
 80087d0:	0030      	movs	r0, r6
 80087d2:	f000 f82b 	bl	800882c <__swsetup_r>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d003      	beq.n	80087e2 <__swbuf_r+0x3a>
 80087da:	2501      	movs	r5, #1
 80087dc:	426d      	negs	r5, r5
 80087de:	0028      	movs	r0, r5
 80087e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e2:	6923      	ldr	r3, [r4, #16]
 80087e4:	6820      	ldr	r0, [r4, #0]
 80087e6:	b2ef      	uxtb	r7, r5
 80087e8:	1ac0      	subs	r0, r0, r3
 80087ea:	6963      	ldr	r3, [r4, #20]
 80087ec:	b2ed      	uxtb	r5, r5
 80087ee:	4283      	cmp	r3, r0
 80087f0:	dc05      	bgt.n	80087fe <__swbuf_r+0x56>
 80087f2:	0021      	movs	r1, r4
 80087f4:	0030      	movs	r0, r6
 80087f6:	f7ff fdf1 	bl	80083dc <_fflush_r>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d1ed      	bne.n	80087da <__swbuf_r+0x32>
 80087fe:	68a3      	ldr	r3, [r4, #8]
 8008800:	3001      	adds	r0, #1
 8008802:	3b01      	subs	r3, #1
 8008804:	60a3      	str	r3, [r4, #8]
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	6022      	str	r2, [r4, #0]
 800880c:	701f      	strb	r7, [r3, #0]
 800880e:	6963      	ldr	r3, [r4, #20]
 8008810:	4283      	cmp	r3, r0
 8008812:	d004      	beq.n	800881e <__swbuf_r+0x76>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	07db      	lsls	r3, r3, #31
 8008818:	d5e1      	bpl.n	80087de <__swbuf_r+0x36>
 800881a:	2d0a      	cmp	r5, #10
 800881c:	d1df      	bne.n	80087de <__swbuf_r+0x36>
 800881e:	0021      	movs	r1, r4
 8008820:	0030      	movs	r0, r6
 8008822:	f7ff fddb 	bl	80083dc <_fflush_r>
 8008826:	2800      	cmp	r0, #0
 8008828:	d0d9      	beq.n	80087de <__swbuf_r+0x36>
 800882a:	e7d6      	b.n	80087da <__swbuf_r+0x32>

0800882c <__swsetup_r>:
 800882c:	4b2d      	ldr	r3, [pc, #180]	@ (80088e4 <__swsetup_r+0xb8>)
 800882e:	b570      	push	{r4, r5, r6, lr}
 8008830:	0005      	movs	r5, r0
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	000c      	movs	r4, r1
 8008836:	2800      	cmp	r0, #0
 8008838:	d004      	beq.n	8008844 <__swsetup_r+0x18>
 800883a:	6a03      	ldr	r3, [r0, #32]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <__swsetup_r+0x18>
 8008840:	f7fe ffb2 	bl	80077a8 <__sinit>
 8008844:	230c      	movs	r3, #12
 8008846:	5ee2      	ldrsh	r2, [r4, r3]
 8008848:	0713      	lsls	r3, r2, #28
 800884a:	d423      	bmi.n	8008894 <__swsetup_r+0x68>
 800884c:	06d3      	lsls	r3, r2, #27
 800884e:	d407      	bmi.n	8008860 <__swsetup_r+0x34>
 8008850:	2309      	movs	r3, #9
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	2340      	movs	r3, #64	@ 0x40
 8008856:	2001      	movs	r0, #1
 8008858:	4313      	orrs	r3, r2
 800885a:	81a3      	strh	r3, [r4, #12]
 800885c:	4240      	negs	r0, r0
 800885e:	e03a      	b.n	80088d6 <__swsetup_r+0xaa>
 8008860:	0752      	lsls	r2, r2, #29
 8008862:	d513      	bpl.n	800888c <__swsetup_r+0x60>
 8008864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008866:	2900      	cmp	r1, #0
 8008868:	d008      	beq.n	800887c <__swsetup_r+0x50>
 800886a:	0023      	movs	r3, r4
 800886c:	3344      	adds	r3, #68	@ 0x44
 800886e:	4299      	cmp	r1, r3
 8008870:	d002      	beq.n	8008878 <__swsetup_r+0x4c>
 8008872:	0028      	movs	r0, r5
 8008874:	f7ff f94a 	bl	8007b0c <_free_r>
 8008878:	2300      	movs	r3, #0
 800887a:	6363      	str	r3, [r4, #52]	@ 0x34
 800887c:	2224      	movs	r2, #36	@ 0x24
 800887e:	89a3      	ldrh	r3, [r4, #12]
 8008880:	4393      	bics	r3, r2
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	2300      	movs	r3, #0
 8008886:	6063      	str	r3, [r4, #4]
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	2308      	movs	r3, #8
 800888e:	89a2      	ldrh	r2, [r4, #12]
 8008890:	4313      	orrs	r3, r2
 8008892:	81a3      	strh	r3, [r4, #12]
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <__swsetup_r+0x86>
 800889a:	21a0      	movs	r1, #160	@ 0xa0
 800889c:	2280      	movs	r2, #128	@ 0x80
 800889e:	89a3      	ldrh	r3, [r4, #12]
 80088a0:	0089      	lsls	r1, r1, #2
 80088a2:	0092      	lsls	r2, r2, #2
 80088a4:	400b      	ands	r3, r1
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <__swsetup_r+0x86>
 80088aa:	0021      	movs	r1, r4
 80088ac:	0028      	movs	r0, r5
 80088ae:	f000 f897 	bl	80089e0 <__smakebuf_r>
 80088b2:	230c      	movs	r3, #12
 80088b4:	5ee2      	ldrsh	r2, [r4, r3]
 80088b6:	2101      	movs	r1, #1
 80088b8:	0013      	movs	r3, r2
 80088ba:	400b      	ands	r3, r1
 80088bc:	420a      	tst	r2, r1
 80088be:	d00b      	beq.n	80088d8 <__swsetup_r+0xac>
 80088c0:	2300      	movs	r3, #0
 80088c2:	60a3      	str	r3, [r4, #8]
 80088c4:	6963      	ldr	r3, [r4, #20]
 80088c6:	425b      	negs	r3, r3
 80088c8:	61a3      	str	r3, [r4, #24]
 80088ca:	2000      	movs	r0, #0
 80088cc:	6923      	ldr	r3, [r4, #16]
 80088ce:	4283      	cmp	r3, r0
 80088d0:	d101      	bne.n	80088d6 <__swsetup_r+0xaa>
 80088d2:	0613      	lsls	r3, r2, #24
 80088d4:	d4be      	bmi.n	8008854 <__swsetup_r+0x28>
 80088d6:	bd70      	pop	{r4, r5, r6, pc}
 80088d8:	0791      	lsls	r1, r2, #30
 80088da:	d400      	bmi.n	80088de <__swsetup_r+0xb2>
 80088dc:	6963      	ldr	r3, [r4, #20]
 80088de:	60a3      	str	r3, [r4, #8]
 80088e0:	e7f3      	b.n	80088ca <__swsetup_r+0x9e>
 80088e2:	46c0      	nop			@ (mov r8, r8)
 80088e4:	2000019c 	.word	0x2000019c

080088e8 <_raise_r>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	0004      	movs	r4, r0
 80088ec:	000d      	movs	r5, r1
 80088ee:	291f      	cmp	r1, #31
 80088f0:	d904      	bls.n	80088fc <_raise_r+0x14>
 80088f2:	2316      	movs	r3, #22
 80088f4:	6003      	str	r3, [r0, #0]
 80088f6:	2001      	movs	r0, #1
 80088f8:	4240      	negs	r0, r0
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d004      	beq.n	800890c <_raise_r+0x24>
 8008902:	008a      	lsls	r2, r1, #2
 8008904:	189b      	adds	r3, r3, r2
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	2a00      	cmp	r2, #0
 800890a:	d108      	bne.n	800891e <_raise_r+0x36>
 800890c:	0020      	movs	r0, r4
 800890e:	f000 f831 	bl	8008974 <_getpid_r>
 8008912:	002a      	movs	r2, r5
 8008914:	0001      	movs	r1, r0
 8008916:	0020      	movs	r0, r4
 8008918:	f000 f81a 	bl	8008950 <_kill_r>
 800891c:	e7ed      	b.n	80088fa <_raise_r+0x12>
 800891e:	2a01      	cmp	r2, #1
 8008920:	d009      	beq.n	8008936 <_raise_r+0x4e>
 8008922:	1c51      	adds	r1, r2, #1
 8008924:	d103      	bne.n	800892e <_raise_r+0x46>
 8008926:	2316      	movs	r3, #22
 8008928:	6003      	str	r3, [r0, #0]
 800892a:	2001      	movs	r0, #1
 800892c:	e7e5      	b.n	80088fa <_raise_r+0x12>
 800892e:	2100      	movs	r1, #0
 8008930:	0028      	movs	r0, r5
 8008932:	6019      	str	r1, [r3, #0]
 8008934:	4790      	blx	r2
 8008936:	2000      	movs	r0, #0
 8008938:	e7df      	b.n	80088fa <_raise_r+0x12>
	...

0800893c <raise>:
 800893c:	b510      	push	{r4, lr}
 800893e:	4b03      	ldr	r3, [pc, #12]	@ (800894c <raise+0x10>)
 8008940:	0001      	movs	r1, r0
 8008942:	6818      	ldr	r0, [r3, #0]
 8008944:	f7ff ffd0 	bl	80088e8 <_raise_r>
 8008948:	bd10      	pop	{r4, pc}
 800894a:	46c0      	nop			@ (mov r8, r8)
 800894c:	2000019c 	.word	0x2000019c

08008950 <_kill_r>:
 8008950:	2300      	movs	r3, #0
 8008952:	b570      	push	{r4, r5, r6, lr}
 8008954:	4d06      	ldr	r5, [pc, #24]	@ (8008970 <_kill_r+0x20>)
 8008956:	0004      	movs	r4, r0
 8008958:	0008      	movs	r0, r1
 800895a:	0011      	movs	r1, r2
 800895c:	602b      	str	r3, [r5, #0]
 800895e:	f7f9 fc77 	bl	8002250 <_kill>
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	d103      	bne.n	800896e <_kill_r+0x1e>
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d000      	beq.n	800896e <_kill_r+0x1e>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	20001740 	.word	0x20001740

08008974 <_getpid_r>:
 8008974:	b510      	push	{r4, lr}
 8008976:	f7f9 fc69 	bl	800224c <_getpid>
 800897a:	bd10      	pop	{r4, pc}

0800897c <_malloc_usable_size_r>:
 800897c:	1f0b      	subs	r3, r1, #4
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	1f18      	subs	r0, r3, #4
 8008982:	2b00      	cmp	r3, #0
 8008984:	da01      	bge.n	800898a <_malloc_usable_size_r+0xe>
 8008986:	580b      	ldr	r3, [r1, r0]
 8008988:	18c0      	adds	r0, r0, r3
 800898a:	4770      	bx	lr

0800898c <__swhatbuf_r>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	000e      	movs	r6, r1
 8008990:	001d      	movs	r5, r3
 8008992:	230e      	movs	r3, #14
 8008994:	5ec9      	ldrsh	r1, [r1, r3]
 8008996:	0014      	movs	r4, r2
 8008998:	b096      	sub	sp, #88	@ 0x58
 800899a:	2900      	cmp	r1, #0
 800899c:	da0c      	bge.n	80089b8 <__swhatbuf_r+0x2c>
 800899e:	89b2      	ldrh	r2, [r6, #12]
 80089a0:	2380      	movs	r3, #128	@ 0x80
 80089a2:	0011      	movs	r1, r2
 80089a4:	4019      	ands	r1, r3
 80089a6:	421a      	tst	r2, r3
 80089a8:	d114      	bne.n	80089d4 <__swhatbuf_r+0x48>
 80089aa:	2380      	movs	r3, #128	@ 0x80
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	2000      	movs	r0, #0
 80089b0:	6029      	str	r1, [r5, #0]
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	b016      	add	sp, #88	@ 0x58
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	466a      	mov	r2, sp
 80089ba:	f000 f853 	bl	8008a64 <_fstat_r>
 80089be:	2800      	cmp	r0, #0
 80089c0:	dbed      	blt.n	800899e <__swhatbuf_r+0x12>
 80089c2:	23f0      	movs	r3, #240	@ 0xf0
 80089c4:	9901      	ldr	r1, [sp, #4]
 80089c6:	021b      	lsls	r3, r3, #8
 80089c8:	4019      	ands	r1, r3
 80089ca:	4b04      	ldr	r3, [pc, #16]	@ (80089dc <__swhatbuf_r+0x50>)
 80089cc:	18c9      	adds	r1, r1, r3
 80089ce:	424b      	negs	r3, r1
 80089d0:	4159      	adcs	r1, r3
 80089d2:	e7ea      	b.n	80089aa <__swhatbuf_r+0x1e>
 80089d4:	2100      	movs	r1, #0
 80089d6:	2340      	movs	r3, #64	@ 0x40
 80089d8:	e7e9      	b.n	80089ae <__swhatbuf_r+0x22>
 80089da:	46c0      	nop			@ (mov r8, r8)
 80089dc:	ffffe000 	.word	0xffffe000

080089e0 <__smakebuf_r>:
 80089e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e2:	2602      	movs	r6, #2
 80089e4:	898b      	ldrh	r3, [r1, #12]
 80089e6:	0005      	movs	r5, r0
 80089e8:	000c      	movs	r4, r1
 80089ea:	b085      	sub	sp, #20
 80089ec:	4233      	tst	r3, r6
 80089ee:	d007      	beq.n	8008a00 <__smakebuf_r+0x20>
 80089f0:	0023      	movs	r3, r4
 80089f2:	3347      	adds	r3, #71	@ 0x47
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	2301      	movs	r3, #1
 80089fa:	6163      	str	r3, [r4, #20]
 80089fc:	b005      	add	sp, #20
 80089fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a00:	ab03      	add	r3, sp, #12
 8008a02:	aa02      	add	r2, sp, #8
 8008a04:	f7ff ffc2 	bl	800898c <__swhatbuf_r>
 8008a08:	9f02      	ldr	r7, [sp, #8]
 8008a0a:	9001      	str	r0, [sp, #4]
 8008a0c:	0039      	movs	r1, r7
 8008a0e:	0028      	movs	r0, r5
 8008a10:	f7ff f8f2 	bl	8007bf8 <_malloc_r>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d108      	bne.n	8008a2a <__smakebuf_r+0x4a>
 8008a18:	220c      	movs	r2, #12
 8008a1a:	5ea3      	ldrsh	r3, [r4, r2]
 8008a1c:	059a      	lsls	r2, r3, #22
 8008a1e:	d4ed      	bmi.n	80089fc <__smakebuf_r+0x1c>
 8008a20:	2203      	movs	r2, #3
 8008a22:	4393      	bics	r3, r2
 8008a24:	431e      	orrs	r6, r3
 8008a26:	81a6      	strh	r6, [r4, #12]
 8008a28:	e7e2      	b.n	80089f0 <__smakebuf_r+0x10>
 8008a2a:	2380      	movs	r3, #128	@ 0x80
 8008a2c:	89a2      	ldrh	r2, [r4, #12]
 8008a2e:	6020      	str	r0, [r4, #0]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	6120      	str	r0, [r4, #16]
 8008a38:	6167      	str	r7, [r4, #20]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00c      	beq.n	8008a58 <__smakebuf_r+0x78>
 8008a3e:	0028      	movs	r0, r5
 8008a40:	230e      	movs	r3, #14
 8008a42:	5ee1      	ldrsh	r1, [r4, r3]
 8008a44:	f000 f820 	bl	8008a88 <_isatty_r>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d005      	beq.n	8008a58 <__smakebuf_r+0x78>
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	89a2      	ldrh	r2, [r4, #12]
 8008a50:	439a      	bics	r2, r3
 8008a52:	3b02      	subs	r3, #2
 8008a54:	4313      	orrs	r3, r2
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	9a01      	ldr	r2, [sp, #4]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	81a3      	strh	r3, [r4, #12]
 8008a60:	e7cc      	b.n	80089fc <__smakebuf_r+0x1c>
	...

08008a64 <_fstat_r>:
 8008a64:	2300      	movs	r3, #0
 8008a66:	b570      	push	{r4, r5, r6, lr}
 8008a68:	4d06      	ldr	r5, [pc, #24]	@ (8008a84 <_fstat_r+0x20>)
 8008a6a:	0004      	movs	r4, r0
 8008a6c:	0008      	movs	r0, r1
 8008a6e:	0011      	movs	r1, r2
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	f7f9 fc1b 	bl	80022ac <_fstat>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	d103      	bne.n	8008a82 <_fstat_r+0x1e>
 8008a7a:	682b      	ldr	r3, [r5, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d000      	beq.n	8008a82 <_fstat_r+0x1e>
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	20001740 	.word	0x20001740

08008a88 <_isatty_r>:
 8008a88:	2300      	movs	r3, #0
 8008a8a:	b570      	push	{r4, r5, r6, lr}
 8008a8c:	4d06      	ldr	r5, [pc, #24]	@ (8008aa8 <_isatty_r+0x20>)
 8008a8e:	0004      	movs	r4, r0
 8008a90:	0008      	movs	r0, r1
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	f7f9 fc10 	bl	80022b8 <_isatty>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d103      	bne.n	8008aa4 <_isatty_r+0x1c>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d000      	beq.n	8008aa4 <_isatty_r+0x1c>
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	bd70      	pop	{r4, r5, r6, pc}
 8008aa6:	46c0      	nop			@ (mov r8, r8)
 8008aa8:	20001740 	.word	0x20001740

08008aac <_init>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	46c0      	nop			@ (mov r8, r8)
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr

08008ab8 <_fini>:
 8008ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aba:	46c0      	nop			@ (mov r8, r8)
 8008abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008abe:	bc08      	pop	{r3}
 8008ac0:	469e      	mov	lr, r3
 8008ac2:	4770      	bx	lr
