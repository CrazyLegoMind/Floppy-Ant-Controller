
FAC firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008770  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08008830  08008830  00009830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c28  08008c28  0000a1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008c28  08008c28  0000a1f4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008c28  08008c28  0000a1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c28  08008c28  00009c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c2c  08008c2c  00009c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08008c30  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035dc  200001f4  08008e24  0000a1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037d0  08008e24  0000a7d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000222da  00000000  00000000  0000a21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bb3  00000000  00000000  0002c4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000ef09  00000000  00000000  000320a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c0  00000000  00000000  00040fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001774  00000000  00000000  00042578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd83  00000000  00000000  00043cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000060d1  00000000  00000000  0005fa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065b40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004660  00000000  00000000  00065b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0006a1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008818 	.word	0x08008818

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	08008818 	.word	0x08008818

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_sqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5609      	ldrsb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_uqi>:
 8000140:	b402      	push	{r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0049      	lsls	r1, r1, #1
 8000148:	5c09      	ldrb	r1, [r1, r0]
 800014a:	0049      	lsls	r1, r1, #1
 800014c:	448e      	add	lr, r1
 800014e:	bc02      	pop	{r1}
 8000150:	4770      	bx	lr
 8000152:	46c0      	nop			@ (mov r8, r8)

08000154 <__gnu_thumb1_case_shi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5e09      	ldrsh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	@ 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	@ 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	@ 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fadd>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	024b      	lsls	r3, r1, #9
 8000458:	0a5a      	lsrs	r2, r3, #9
 800045a:	4694      	mov	ip, r2
 800045c:	004a      	lsls	r2, r1, #1
 800045e:	0fc9      	lsrs	r1, r1, #31
 8000460:	46ce      	mov	lr, r9
 8000462:	4647      	mov	r7, r8
 8000464:	4689      	mov	r9, r1
 8000466:	0045      	lsls	r5, r0, #1
 8000468:	0246      	lsls	r6, r0, #9
 800046a:	0e2d      	lsrs	r5, r5, #24
 800046c:	0e12      	lsrs	r2, r2, #24
 800046e:	b580      	push	{r7, lr}
 8000470:	0999      	lsrs	r1, r3, #6
 8000472:	0a77      	lsrs	r7, r6, #9
 8000474:	0fc4      	lsrs	r4, r0, #31
 8000476:	09b6      	lsrs	r6, r6, #6
 8000478:	1aab      	subs	r3, r5, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	d020      	beq.n	80004c0 <__aeabi_fadd+0x6c>
 800047e:	2b00      	cmp	r3, #0
 8000480:	dd0c      	ble.n	800049c <__aeabi_fadd+0x48>
 8000482:	2a00      	cmp	r2, #0
 8000484:	d134      	bne.n	80004f0 <__aeabi_fadd+0x9c>
 8000486:	2900      	cmp	r1, #0
 8000488:	d02a      	beq.n	80004e0 <__aeabi_fadd+0x8c>
 800048a:	1e5a      	subs	r2, r3, #1
 800048c:	2b01      	cmp	r3, #1
 800048e:	d100      	bne.n	8000492 <__aeabi_fadd+0x3e>
 8000490:	e08f      	b.n	80005b2 <__aeabi_fadd+0x15e>
 8000492:	2bff      	cmp	r3, #255	@ 0xff
 8000494:	d100      	bne.n	8000498 <__aeabi_fadd+0x44>
 8000496:	e0cd      	b.n	8000634 <__aeabi_fadd+0x1e0>
 8000498:	0013      	movs	r3, r2
 800049a:	e02f      	b.n	80004fc <__aeabi_fadd+0xa8>
 800049c:	2b00      	cmp	r3, #0
 800049e:	d060      	beq.n	8000562 <__aeabi_fadd+0x10e>
 80004a0:	1b53      	subs	r3, r2, r5
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d000      	beq.n	80004a8 <__aeabi_fadd+0x54>
 80004a6:	e0ee      	b.n	8000686 <__aeabi_fadd+0x232>
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_fadd+0x5a>
 80004ac:	e13e      	b.n	800072c <__aeabi_fadd+0x2d8>
 80004ae:	1e5c      	subs	r4, r3, #1
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fadd+0x62>
 80004b4:	e16b      	b.n	800078e <__aeabi_fadd+0x33a>
 80004b6:	2bff      	cmp	r3, #255	@ 0xff
 80004b8:	d100      	bne.n	80004bc <__aeabi_fadd+0x68>
 80004ba:	e0b9      	b.n	8000630 <__aeabi_fadd+0x1dc>
 80004bc:	0023      	movs	r3, r4
 80004be:	e0e7      	b.n	8000690 <__aeabi_fadd+0x23c>
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	dc00      	bgt.n	80004c6 <__aeabi_fadd+0x72>
 80004c4:	e0a4      	b.n	8000610 <__aeabi_fadd+0x1bc>
 80004c6:	2a00      	cmp	r2, #0
 80004c8:	d069      	beq.n	800059e <__aeabi_fadd+0x14a>
 80004ca:	2dff      	cmp	r5, #255	@ 0xff
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fadd+0x7c>
 80004ce:	e0b1      	b.n	8000634 <__aeabi_fadd+0x1e0>
 80004d0:	2280      	movs	r2, #128	@ 0x80
 80004d2:	04d2      	lsls	r2, r2, #19
 80004d4:	4311      	orrs	r1, r2
 80004d6:	2b1b      	cmp	r3, #27
 80004d8:	dc00      	bgt.n	80004dc <__aeabi_fadd+0x88>
 80004da:	e0e9      	b.n	80006b0 <__aeabi_fadd+0x25c>
 80004dc:	002b      	movs	r3, r5
 80004de:	3605      	adds	r6, #5
 80004e0:	08f7      	lsrs	r7, r6, #3
 80004e2:	2bff      	cmp	r3, #255	@ 0xff
 80004e4:	d100      	bne.n	80004e8 <__aeabi_fadd+0x94>
 80004e6:	e0a5      	b.n	8000634 <__aeabi_fadd+0x1e0>
 80004e8:	027a      	lsls	r2, r7, #9
 80004ea:	0a52      	lsrs	r2, r2, #9
 80004ec:	b2d8      	uxtb	r0, r3
 80004ee:	e030      	b.n	8000552 <__aeabi_fadd+0xfe>
 80004f0:	2dff      	cmp	r5, #255	@ 0xff
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fadd+0xa2>
 80004f4:	e09e      	b.n	8000634 <__aeabi_fadd+0x1e0>
 80004f6:	2280      	movs	r2, #128	@ 0x80
 80004f8:	04d2      	lsls	r2, r2, #19
 80004fa:	4311      	orrs	r1, r2
 80004fc:	2001      	movs	r0, #1
 80004fe:	2b1b      	cmp	r3, #27
 8000500:	dc08      	bgt.n	8000514 <__aeabi_fadd+0xc0>
 8000502:	0008      	movs	r0, r1
 8000504:	2220      	movs	r2, #32
 8000506:	40d8      	lsrs	r0, r3
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	4099      	lsls	r1, r3
 800050c:	000b      	movs	r3, r1
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	4193      	sbcs	r3, r2
 8000512:	4318      	orrs	r0, r3
 8000514:	1a36      	subs	r6, r6, r0
 8000516:	0173      	lsls	r3, r6, #5
 8000518:	d400      	bmi.n	800051c <__aeabi_fadd+0xc8>
 800051a:	e071      	b.n	8000600 <__aeabi_fadd+0x1ac>
 800051c:	01b6      	lsls	r6, r6, #6
 800051e:	09b7      	lsrs	r7, r6, #6
 8000520:	0038      	movs	r0, r7
 8000522:	f000 fdb7 	bl	8001094 <__clzsi2>
 8000526:	003b      	movs	r3, r7
 8000528:	3805      	subs	r0, #5
 800052a:	4083      	lsls	r3, r0
 800052c:	4285      	cmp	r5, r0
 800052e:	dd4d      	ble.n	80005cc <__aeabi_fadd+0x178>
 8000530:	4eb4      	ldr	r6, [pc, #720]	@ (8000804 <__aeabi_fadd+0x3b0>)
 8000532:	1a2d      	subs	r5, r5, r0
 8000534:	401e      	ands	r6, r3
 8000536:	075a      	lsls	r2, r3, #29
 8000538:	d068      	beq.n	800060c <__aeabi_fadd+0x1b8>
 800053a:	220f      	movs	r2, #15
 800053c:	4013      	ands	r3, r2
 800053e:	2b04      	cmp	r3, #4
 8000540:	d064      	beq.n	800060c <__aeabi_fadd+0x1b8>
 8000542:	3604      	adds	r6, #4
 8000544:	0173      	lsls	r3, r6, #5
 8000546:	d561      	bpl.n	800060c <__aeabi_fadd+0x1b8>
 8000548:	1c68      	adds	r0, r5, #1
 800054a:	2dfe      	cmp	r5, #254	@ 0xfe
 800054c:	d154      	bne.n	80005f8 <__aeabi_fadd+0x1a4>
 800054e:	20ff      	movs	r0, #255	@ 0xff
 8000550:	2200      	movs	r2, #0
 8000552:	05c0      	lsls	r0, r0, #23
 8000554:	4310      	orrs	r0, r2
 8000556:	07e4      	lsls	r4, r4, #31
 8000558:	4320      	orrs	r0, r4
 800055a:	bcc0      	pop	{r6, r7}
 800055c:	46b9      	mov	r9, r7
 800055e:	46b0      	mov	r8, r6
 8000560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000562:	22fe      	movs	r2, #254	@ 0xfe
 8000564:	4690      	mov	r8, r2
 8000566:	1c68      	adds	r0, r5, #1
 8000568:	0002      	movs	r2, r0
 800056a:	4640      	mov	r0, r8
 800056c:	4210      	tst	r0, r2
 800056e:	d16b      	bne.n	8000648 <__aeabi_fadd+0x1f4>
 8000570:	2d00      	cmp	r5, #0
 8000572:	d000      	beq.n	8000576 <__aeabi_fadd+0x122>
 8000574:	e0dd      	b.n	8000732 <__aeabi_fadd+0x2de>
 8000576:	2e00      	cmp	r6, #0
 8000578:	d100      	bne.n	800057c <__aeabi_fadd+0x128>
 800057a:	e102      	b.n	8000782 <__aeabi_fadd+0x32e>
 800057c:	2900      	cmp	r1, #0
 800057e:	d0b3      	beq.n	80004e8 <__aeabi_fadd+0x94>
 8000580:	2280      	movs	r2, #128	@ 0x80
 8000582:	1a77      	subs	r7, r6, r1
 8000584:	04d2      	lsls	r2, r2, #19
 8000586:	4217      	tst	r7, r2
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x138>
 800058a:	e136      	b.n	80007fa <__aeabi_fadd+0x3a6>
 800058c:	464c      	mov	r4, r9
 800058e:	1b8e      	subs	r6, r1, r6
 8000590:	d061      	beq.n	8000656 <__aeabi_fadd+0x202>
 8000592:	2001      	movs	r0, #1
 8000594:	4216      	tst	r6, r2
 8000596:	d130      	bne.n	80005fa <__aeabi_fadd+0x1a6>
 8000598:	2300      	movs	r3, #0
 800059a:	08f7      	lsrs	r7, r6, #3
 800059c:	e7a4      	b.n	80004e8 <__aeabi_fadd+0x94>
 800059e:	2900      	cmp	r1, #0
 80005a0:	d09e      	beq.n	80004e0 <__aeabi_fadd+0x8c>
 80005a2:	1e5a      	subs	r2, r3, #1
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x156>
 80005a8:	e0ca      	b.n	8000740 <__aeabi_fadd+0x2ec>
 80005aa:	2bff      	cmp	r3, #255	@ 0xff
 80005ac:	d042      	beq.n	8000634 <__aeabi_fadd+0x1e0>
 80005ae:	0013      	movs	r3, r2
 80005b0:	e791      	b.n	80004d6 <__aeabi_fadd+0x82>
 80005b2:	1a71      	subs	r1, r6, r1
 80005b4:	014b      	lsls	r3, r1, #5
 80005b6:	d400      	bmi.n	80005ba <__aeabi_fadd+0x166>
 80005b8:	e0d1      	b.n	800075e <__aeabi_fadd+0x30a>
 80005ba:	018f      	lsls	r7, r1, #6
 80005bc:	09bf      	lsrs	r7, r7, #6
 80005be:	0038      	movs	r0, r7
 80005c0:	f000 fd68 	bl	8001094 <__clzsi2>
 80005c4:	003b      	movs	r3, r7
 80005c6:	3805      	subs	r0, #5
 80005c8:	4083      	lsls	r3, r0
 80005ca:	2501      	movs	r5, #1
 80005cc:	2220      	movs	r2, #32
 80005ce:	1b40      	subs	r0, r0, r5
 80005d0:	3001      	adds	r0, #1
 80005d2:	1a12      	subs	r2, r2, r0
 80005d4:	001e      	movs	r6, r3
 80005d6:	4093      	lsls	r3, r2
 80005d8:	40c6      	lsrs	r6, r0
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	4193      	sbcs	r3, r2
 80005de:	431e      	orrs	r6, r3
 80005e0:	d039      	beq.n	8000656 <__aeabi_fadd+0x202>
 80005e2:	0773      	lsls	r3, r6, #29
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x194>
 80005e6:	e11b      	b.n	8000820 <__aeabi_fadd+0x3cc>
 80005e8:	230f      	movs	r3, #15
 80005ea:	2500      	movs	r5, #0
 80005ec:	4033      	ands	r3, r6
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	d1a7      	bne.n	8000542 <__aeabi_fadd+0xee>
 80005f2:	2001      	movs	r0, #1
 80005f4:	0172      	lsls	r2, r6, #5
 80005f6:	d57c      	bpl.n	80006f2 <__aeabi_fadd+0x29e>
 80005f8:	b2c0      	uxtb	r0, r0
 80005fa:	01b2      	lsls	r2, r6, #6
 80005fc:	0a52      	lsrs	r2, r2, #9
 80005fe:	e7a8      	b.n	8000552 <__aeabi_fadd+0xfe>
 8000600:	0773      	lsls	r3, r6, #29
 8000602:	d003      	beq.n	800060c <__aeabi_fadd+0x1b8>
 8000604:	230f      	movs	r3, #15
 8000606:	4033      	ands	r3, r6
 8000608:	2b04      	cmp	r3, #4
 800060a:	d19a      	bne.n	8000542 <__aeabi_fadd+0xee>
 800060c:	002b      	movs	r3, r5
 800060e:	e767      	b.n	80004e0 <__aeabi_fadd+0x8c>
 8000610:	2b00      	cmp	r3, #0
 8000612:	d023      	beq.n	800065c <__aeabi_fadd+0x208>
 8000614:	1b53      	subs	r3, r2, r5
 8000616:	2d00      	cmp	r5, #0
 8000618:	d17b      	bne.n	8000712 <__aeabi_fadd+0x2be>
 800061a:	2e00      	cmp	r6, #0
 800061c:	d100      	bne.n	8000620 <__aeabi_fadd+0x1cc>
 800061e:	e086      	b.n	800072e <__aeabi_fadd+0x2da>
 8000620:	1e5d      	subs	r5, r3, #1
 8000622:	2b01      	cmp	r3, #1
 8000624:	d100      	bne.n	8000628 <__aeabi_fadd+0x1d4>
 8000626:	e08b      	b.n	8000740 <__aeabi_fadd+0x2ec>
 8000628:	2bff      	cmp	r3, #255	@ 0xff
 800062a:	d002      	beq.n	8000632 <__aeabi_fadd+0x1de>
 800062c:	002b      	movs	r3, r5
 800062e:	e075      	b.n	800071c <__aeabi_fadd+0x2c8>
 8000630:	464c      	mov	r4, r9
 8000632:	4667      	mov	r7, ip
 8000634:	2f00      	cmp	r7, #0
 8000636:	d100      	bne.n	800063a <__aeabi_fadd+0x1e6>
 8000638:	e789      	b.n	800054e <__aeabi_fadd+0xfa>
 800063a:	2280      	movs	r2, #128	@ 0x80
 800063c:	03d2      	lsls	r2, r2, #15
 800063e:	433a      	orrs	r2, r7
 8000640:	0252      	lsls	r2, r2, #9
 8000642:	20ff      	movs	r0, #255	@ 0xff
 8000644:	0a52      	lsrs	r2, r2, #9
 8000646:	e784      	b.n	8000552 <__aeabi_fadd+0xfe>
 8000648:	1a77      	subs	r7, r6, r1
 800064a:	017b      	lsls	r3, r7, #5
 800064c:	d46b      	bmi.n	8000726 <__aeabi_fadd+0x2d2>
 800064e:	2f00      	cmp	r7, #0
 8000650:	d000      	beq.n	8000654 <__aeabi_fadd+0x200>
 8000652:	e765      	b.n	8000520 <__aeabi_fadd+0xcc>
 8000654:	2400      	movs	r4, #0
 8000656:	2000      	movs	r0, #0
 8000658:	2200      	movs	r2, #0
 800065a:	e77a      	b.n	8000552 <__aeabi_fadd+0xfe>
 800065c:	22fe      	movs	r2, #254	@ 0xfe
 800065e:	1c6b      	adds	r3, r5, #1
 8000660:	421a      	tst	r2, r3
 8000662:	d149      	bne.n	80006f8 <__aeabi_fadd+0x2a4>
 8000664:	2d00      	cmp	r5, #0
 8000666:	d000      	beq.n	800066a <__aeabi_fadd+0x216>
 8000668:	e09f      	b.n	80007aa <__aeabi_fadd+0x356>
 800066a:	2e00      	cmp	r6, #0
 800066c:	d100      	bne.n	8000670 <__aeabi_fadd+0x21c>
 800066e:	e0ba      	b.n	80007e6 <__aeabi_fadd+0x392>
 8000670:	2900      	cmp	r1, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x222>
 8000674:	e0cf      	b.n	8000816 <__aeabi_fadd+0x3c2>
 8000676:	1872      	adds	r2, r6, r1
 8000678:	0153      	lsls	r3, r2, #5
 800067a:	d400      	bmi.n	800067e <__aeabi_fadd+0x22a>
 800067c:	e0cd      	b.n	800081a <__aeabi_fadd+0x3c6>
 800067e:	0192      	lsls	r2, r2, #6
 8000680:	2001      	movs	r0, #1
 8000682:	0a52      	lsrs	r2, r2, #9
 8000684:	e765      	b.n	8000552 <__aeabi_fadd+0xfe>
 8000686:	2aff      	cmp	r2, #255	@ 0xff
 8000688:	d0d2      	beq.n	8000630 <__aeabi_fadd+0x1dc>
 800068a:	2080      	movs	r0, #128	@ 0x80
 800068c:	04c0      	lsls	r0, r0, #19
 800068e:	4306      	orrs	r6, r0
 8000690:	2001      	movs	r0, #1
 8000692:	2b1b      	cmp	r3, #27
 8000694:	dc08      	bgt.n	80006a8 <__aeabi_fadd+0x254>
 8000696:	0030      	movs	r0, r6
 8000698:	2420      	movs	r4, #32
 800069a:	40d8      	lsrs	r0, r3
 800069c:	1ae3      	subs	r3, r4, r3
 800069e:	409e      	lsls	r6, r3
 80006a0:	0033      	movs	r3, r6
 80006a2:	1e5c      	subs	r4, r3, #1
 80006a4:	41a3      	sbcs	r3, r4
 80006a6:	4318      	orrs	r0, r3
 80006a8:	464c      	mov	r4, r9
 80006aa:	0015      	movs	r5, r2
 80006ac:	1a0e      	subs	r6, r1, r0
 80006ae:	e732      	b.n	8000516 <__aeabi_fadd+0xc2>
 80006b0:	0008      	movs	r0, r1
 80006b2:	2220      	movs	r2, #32
 80006b4:	40d8      	lsrs	r0, r3
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	4099      	lsls	r1, r3
 80006ba:	000b      	movs	r3, r1
 80006bc:	1e5a      	subs	r2, r3, #1
 80006be:	4193      	sbcs	r3, r2
 80006c0:	4303      	orrs	r3, r0
 80006c2:	18f6      	adds	r6, r6, r3
 80006c4:	0173      	lsls	r3, r6, #5
 80006c6:	d59b      	bpl.n	8000600 <__aeabi_fadd+0x1ac>
 80006c8:	3501      	adds	r5, #1
 80006ca:	2dff      	cmp	r5, #255	@ 0xff
 80006cc:	d100      	bne.n	80006d0 <__aeabi_fadd+0x27c>
 80006ce:	e73e      	b.n	800054e <__aeabi_fadd+0xfa>
 80006d0:	2301      	movs	r3, #1
 80006d2:	494d      	ldr	r1, [pc, #308]	@ (8000808 <__aeabi_fadd+0x3b4>)
 80006d4:	0872      	lsrs	r2, r6, #1
 80006d6:	4033      	ands	r3, r6
 80006d8:	400a      	ands	r2, r1
 80006da:	431a      	orrs	r2, r3
 80006dc:	0016      	movs	r6, r2
 80006de:	0753      	lsls	r3, r2, #29
 80006e0:	d004      	beq.n	80006ec <__aeabi_fadd+0x298>
 80006e2:	230f      	movs	r3, #15
 80006e4:	4013      	ands	r3, r2
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	d000      	beq.n	80006ec <__aeabi_fadd+0x298>
 80006ea:	e72a      	b.n	8000542 <__aeabi_fadd+0xee>
 80006ec:	0173      	lsls	r3, r6, #5
 80006ee:	d500      	bpl.n	80006f2 <__aeabi_fadd+0x29e>
 80006f0:	e72a      	b.n	8000548 <__aeabi_fadd+0xf4>
 80006f2:	002b      	movs	r3, r5
 80006f4:	08f7      	lsrs	r7, r6, #3
 80006f6:	e6f7      	b.n	80004e8 <__aeabi_fadd+0x94>
 80006f8:	2bff      	cmp	r3, #255	@ 0xff
 80006fa:	d100      	bne.n	80006fe <__aeabi_fadd+0x2aa>
 80006fc:	e727      	b.n	800054e <__aeabi_fadd+0xfa>
 80006fe:	1871      	adds	r1, r6, r1
 8000700:	0849      	lsrs	r1, r1, #1
 8000702:	074a      	lsls	r2, r1, #29
 8000704:	d02f      	beq.n	8000766 <__aeabi_fadd+0x312>
 8000706:	220f      	movs	r2, #15
 8000708:	400a      	ands	r2, r1
 800070a:	2a04      	cmp	r2, #4
 800070c:	d02b      	beq.n	8000766 <__aeabi_fadd+0x312>
 800070e:	1d0e      	adds	r6, r1, #4
 8000710:	e6e6      	b.n	80004e0 <__aeabi_fadd+0x8c>
 8000712:	2aff      	cmp	r2, #255	@ 0xff
 8000714:	d08d      	beq.n	8000632 <__aeabi_fadd+0x1de>
 8000716:	2080      	movs	r0, #128	@ 0x80
 8000718:	04c0      	lsls	r0, r0, #19
 800071a:	4306      	orrs	r6, r0
 800071c:	2b1b      	cmp	r3, #27
 800071e:	dd24      	ble.n	800076a <__aeabi_fadd+0x316>
 8000720:	0013      	movs	r3, r2
 8000722:	1d4e      	adds	r6, r1, #5
 8000724:	e6dc      	b.n	80004e0 <__aeabi_fadd+0x8c>
 8000726:	464c      	mov	r4, r9
 8000728:	1b8f      	subs	r7, r1, r6
 800072a:	e6f9      	b.n	8000520 <__aeabi_fadd+0xcc>
 800072c:	464c      	mov	r4, r9
 800072e:	000e      	movs	r6, r1
 8000730:	e6d6      	b.n	80004e0 <__aeabi_fadd+0x8c>
 8000732:	2e00      	cmp	r6, #0
 8000734:	d149      	bne.n	80007ca <__aeabi_fadd+0x376>
 8000736:	2900      	cmp	r1, #0
 8000738:	d068      	beq.n	800080c <__aeabi_fadd+0x3b8>
 800073a:	4667      	mov	r7, ip
 800073c:	464c      	mov	r4, r9
 800073e:	e77c      	b.n	800063a <__aeabi_fadd+0x1e6>
 8000740:	1870      	adds	r0, r6, r1
 8000742:	0143      	lsls	r3, r0, #5
 8000744:	d574      	bpl.n	8000830 <__aeabi_fadd+0x3dc>
 8000746:	4930      	ldr	r1, [pc, #192]	@ (8000808 <__aeabi_fadd+0x3b4>)
 8000748:	0840      	lsrs	r0, r0, #1
 800074a:	4001      	ands	r1, r0
 800074c:	0743      	lsls	r3, r0, #29
 800074e:	d009      	beq.n	8000764 <__aeabi_fadd+0x310>
 8000750:	230f      	movs	r3, #15
 8000752:	4003      	ands	r3, r0
 8000754:	2b04      	cmp	r3, #4
 8000756:	d005      	beq.n	8000764 <__aeabi_fadd+0x310>
 8000758:	2302      	movs	r3, #2
 800075a:	1d0e      	adds	r6, r1, #4
 800075c:	e6c0      	b.n	80004e0 <__aeabi_fadd+0x8c>
 800075e:	2301      	movs	r3, #1
 8000760:	08cf      	lsrs	r7, r1, #3
 8000762:	e6c1      	b.n	80004e8 <__aeabi_fadd+0x94>
 8000764:	2302      	movs	r3, #2
 8000766:	08cf      	lsrs	r7, r1, #3
 8000768:	e6be      	b.n	80004e8 <__aeabi_fadd+0x94>
 800076a:	2520      	movs	r5, #32
 800076c:	0030      	movs	r0, r6
 800076e:	40d8      	lsrs	r0, r3
 8000770:	1aeb      	subs	r3, r5, r3
 8000772:	409e      	lsls	r6, r3
 8000774:	0033      	movs	r3, r6
 8000776:	1e5d      	subs	r5, r3, #1
 8000778:	41ab      	sbcs	r3, r5
 800077a:	4303      	orrs	r3, r0
 800077c:	0015      	movs	r5, r2
 800077e:	185e      	adds	r6, r3, r1
 8000780:	e7a0      	b.n	80006c4 <__aeabi_fadd+0x270>
 8000782:	2900      	cmp	r1, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x334>
 8000786:	e765      	b.n	8000654 <__aeabi_fadd+0x200>
 8000788:	464c      	mov	r4, r9
 800078a:	4667      	mov	r7, ip
 800078c:	e6ac      	b.n	80004e8 <__aeabi_fadd+0x94>
 800078e:	1b8f      	subs	r7, r1, r6
 8000790:	017b      	lsls	r3, r7, #5
 8000792:	d52e      	bpl.n	80007f2 <__aeabi_fadd+0x39e>
 8000794:	01bf      	lsls	r7, r7, #6
 8000796:	09bf      	lsrs	r7, r7, #6
 8000798:	0038      	movs	r0, r7
 800079a:	f000 fc7b 	bl	8001094 <__clzsi2>
 800079e:	003b      	movs	r3, r7
 80007a0:	3805      	subs	r0, #5
 80007a2:	4083      	lsls	r3, r0
 80007a4:	464c      	mov	r4, r9
 80007a6:	3501      	adds	r5, #1
 80007a8:	e710      	b.n	80005cc <__aeabi_fadd+0x178>
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x35c>
 80007ae:	e740      	b.n	8000632 <__aeabi_fadd+0x1de>
 80007b0:	2900      	cmp	r1, #0
 80007b2:	d100      	bne.n	80007b6 <__aeabi_fadd+0x362>
 80007b4:	e741      	b.n	800063a <__aeabi_fadd+0x1e6>
 80007b6:	2380      	movs	r3, #128	@ 0x80
 80007b8:	03db      	lsls	r3, r3, #15
 80007ba:	429f      	cmp	r7, r3
 80007bc:	d200      	bcs.n	80007c0 <__aeabi_fadd+0x36c>
 80007be:	e73c      	b.n	800063a <__aeabi_fadd+0x1e6>
 80007c0:	459c      	cmp	ip, r3
 80007c2:	d300      	bcc.n	80007c6 <__aeabi_fadd+0x372>
 80007c4:	e739      	b.n	800063a <__aeabi_fadd+0x1e6>
 80007c6:	4667      	mov	r7, ip
 80007c8:	e737      	b.n	800063a <__aeabi_fadd+0x1e6>
 80007ca:	2900      	cmp	r1, #0
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x37c>
 80007ce:	e734      	b.n	800063a <__aeabi_fadd+0x1e6>
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	03db      	lsls	r3, r3, #15
 80007d4:	429f      	cmp	r7, r3
 80007d6:	d200      	bcs.n	80007da <__aeabi_fadd+0x386>
 80007d8:	e72f      	b.n	800063a <__aeabi_fadd+0x1e6>
 80007da:	459c      	cmp	ip, r3
 80007dc:	d300      	bcc.n	80007e0 <__aeabi_fadd+0x38c>
 80007de:	e72c      	b.n	800063a <__aeabi_fadd+0x1e6>
 80007e0:	464c      	mov	r4, r9
 80007e2:	4667      	mov	r7, ip
 80007e4:	e729      	b.n	800063a <__aeabi_fadd+0x1e6>
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_fadd+0x398>
 80007ea:	e734      	b.n	8000656 <__aeabi_fadd+0x202>
 80007ec:	2300      	movs	r3, #0
 80007ee:	08cf      	lsrs	r7, r1, #3
 80007f0:	e67a      	b.n	80004e8 <__aeabi_fadd+0x94>
 80007f2:	464c      	mov	r4, r9
 80007f4:	2301      	movs	r3, #1
 80007f6:	08ff      	lsrs	r7, r7, #3
 80007f8:	e676      	b.n	80004e8 <__aeabi_fadd+0x94>
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fadd+0x3ac>
 80007fe:	e729      	b.n	8000654 <__aeabi_fadd+0x200>
 8000800:	08ff      	lsrs	r7, r7, #3
 8000802:	e671      	b.n	80004e8 <__aeabi_fadd+0x94>
 8000804:	fbffffff 	.word	0xfbffffff
 8000808:	7dffffff 	.word	0x7dffffff
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	2400      	movs	r4, #0
 8000810:	20ff      	movs	r0, #255	@ 0xff
 8000812:	03d2      	lsls	r2, r2, #15
 8000814:	e69d      	b.n	8000552 <__aeabi_fadd+0xfe>
 8000816:	2300      	movs	r3, #0
 8000818:	e666      	b.n	80004e8 <__aeabi_fadd+0x94>
 800081a:	2300      	movs	r3, #0
 800081c:	08d7      	lsrs	r7, r2, #3
 800081e:	e663      	b.n	80004e8 <__aeabi_fadd+0x94>
 8000820:	2001      	movs	r0, #1
 8000822:	0172      	lsls	r2, r6, #5
 8000824:	d500      	bpl.n	8000828 <__aeabi_fadd+0x3d4>
 8000826:	e6e7      	b.n	80005f8 <__aeabi_fadd+0x1a4>
 8000828:	0031      	movs	r1, r6
 800082a:	2300      	movs	r3, #0
 800082c:	08cf      	lsrs	r7, r1, #3
 800082e:	e65b      	b.n	80004e8 <__aeabi_fadd+0x94>
 8000830:	2301      	movs	r3, #1
 8000832:	08c7      	lsrs	r7, r0, #3
 8000834:	e658      	b.n	80004e8 <__aeabi_fadd+0x94>
 8000836:	46c0      	nop			@ (mov r8, r8)

08000838 <__aeabi_fmul>:
 8000838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083a:	464f      	mov	r7, r9
 800083c:	4646      	mov	r6, r8
 800083e:	46d6      	mov	lr, sl
 8000840:	0044      	lsls	r4, r0, #1
 8000842:	b5c0      	push	{r6, r7, lr}
 8000844:	0246      	lsls	r6, r0, #9
 8000846:	1c0f      	adds	r7, r1, #0
 8000848:	0a76      	lsrs	r6, r6, #9
 800084a:	0e24      	lsrs	r4, r4, #24
 800084c:	0fc5      	lsrs	r5, r0, #31
 800084e:	2c00      	cmp	r4, #0
 8000850:	d100      	bne.n	8000854 <__aeabi_fmul+0x1c>
 8000852:	e0da      	b.n	8000a0a <__aeabi_fmul+0x1d2>
 8000854:	2cff      	cmp	r4, #255	@ 0xff
 8000856:	d074      	beq.n	8000942 <__aeabi_fmul+0x10a>
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	00f6      	lsls	r6, r6, #3
 800085c:	04db      	lsls	r3, r3, #19
 800085e:	431e      	orrs	r6, r3
 8000860:	2300      	movs	r3, #0
 8000862:	4699      	mov	r9, r3
 8000864:	469a      	mov	sl, r3
 8000866:	3c7f      	subs	r4, #127	@ 0x7f
 8000868:	027b      	lsls	r3, r7, #9
 800086a:	0a5b      	lsrs	r3, r3, #9
 800086c:	4698      	mov	r8, r3
 800086e:	007b      	lsls	r3, r7, #1
 8000870:	0e1b      	lsrs	r3, r3, #24
 8000872:	0fff      	lsrs	r7, r7, #31
 8000874:	2b00      	cmp	r3, #0
 8000876:	d074      	beq.n	8000962 <__aeabi_fmul+0x12a>
 8000878:	2bff      	cmp	r3, #255	@ 0xff
 800087a:	d100      	bne.n	800087e <__aeabi_fmul+0x46>
 800087c:	e08e      	b.n	800099c <__aeabi_fmul+0x164>
 800087e:	4642      	mov	r2, r8
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	00d2      	lsls	r2, r2, #3
 8000884:	04c9      	lsls	r1, r1, #19
 8000886:	4311      	orrs	r1, r2
 8000888:	3b7f      	subs	r3, #127	@ 0x7f
 800088a:	002a      	movs	r2, r5
 800088c:	18e4      	adds	r4, r4, r3
 800088e:	464b      	mov	r3, r9
 8000890:	407a      	eors	r2, r7
 8000892:	4688      	mov	r8, r1
 8000894:	b2d2      	uxtb	r2, r2
 8000896:	2b0a      	cmp	r3, #10
 8000898:	dc75      	bgt.n	8000986 <__aeabi_fmul+0x14e>
 800089a:	464b      	mov	r3, r9
 800089c:	2000      	movs	r0, #0
 800089e:	2b02      	cmp	r3, #2
 80008a0:	dd0f      	ble.n	80008c2 <__aeabi_fmul+0x8a>
 80008a2:	4649      	mov	r1, r9
 80008a4:	2301      	movs	r3, #1
 80008a6:	408b      	lsls	r3, r1
 80008a8:	21a6      	movs	r1, #166	@ 0xa6
 80008aa:	00c9      	lsls	r1, r1, #3
 80008ac:	420b      	tst	r3, r1
 80008ae:	d169      	bne.n	8000984 <__aeabi_fmul+0x14c>
 80008b0:	2190      	movs	r1, #144	@ 0x90
 80008b2:	0089      	lsls	r1, r1, #2
 80008b4:	420b      	tst	r3, r1
 80008b6:	d000      	beq.n	80008ba <__aeabi_fmul+0x82>
 80008b8:	e100      	b.n	8000abc <__aeabi_fmul+0x284>
 80008ba:	2188      	movs	r1, #136	@ 0x88
 80008bc:	4219      	tst	r1, r3
 80008be:	d000      	beq.n	80008c2 <__aeabi_fmul+0x8a>
 80008c0:	e0f5      	b.n	8000aae <__aeabi_fmul+0x276>
 80008c2:	4641      	mov	r1, r8
 80008c4:	0409      	lsls	r1, r1, #16
 80008c6:	0c09      	lsrs	r1, r1, #16
 80008c8:	4643      	mov	r3, r8
 80008ca:	0008      	movs	r0, r1
 80008cc:	0c35      	lsrs	r5, r6, #16
 80008ce:	0436      	lsls	r6, r6, #16
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	0c36      	lsrs	r6, r6, #16
 80008d4:	4370      	muls	r0, r6
 80008d6:	4369      	muls	r1, r5
 80008d8:	435e      	muls	r6, r3
 80008da:	435d      	muls	r5, r3
 80008dc:	1876      	adds	r6, r6, r1
 80008de:	0c03      	lsrs	r3, r0, #16
 80008e0:	199b      	adds	r3, r3, r6
 80008e2:	4299      	cmp	r1, r3
 80008e4:	d903      	bls.n	80008ee <__aeabi_fmul+0xb6>
 80008e6:	2180      	movs	r1, #128	@ 0x80
 80008e8:	0249      	lsls	r1, r1, #9
 80008ea:	468c      	mov	ip, r1
 80008ec:	4465      	add	r5, ip
 80008ee:	0400      	lsls	r0, r0, #16
 80008f0:	0419      	lsls	r1, r3, #16
 80008f2:	0c00      	lsrs	r0, r0, #16
 80008f4:	1809      	adds	r1, r1, r0
 80008f6:	018e      	lsls	r6, r1, #6
 80008f8:	1e70      	subs	r0, r6, #1
 80008fa:	4186      	sbcs	r6, r0
 80008fc:	0c1b      	lsrs	r3, r3, #16
 80008fe:	0e89      	lsrs	r1, r1, #26
 8000900:	195b      	adds	r3, r3, r5
 8000902:	430e      	orrs	r6, r1
 8000904:	019b      	lsls	r3, r3, #6
 8000906:	431e      	orrs	r6, r3
 8000908:	011b      	lsls	r3, r3, #4
 800090a:	d46c      	bmi.n	80009e6 <__aeabi_fmul+0x1ae>
 800090c:	0023      	movs	r3, r4
 800090e:	337f      	adds	r3, #127	@ 0x7f
 8000910:	2b00      	cmp	r3, #0
 8000912:	dc00      	bgt.n	8000916 <__aeabi_fmul+0xde>
 8000914:	e0b1      	b.n	8000a7a <__aeabi_fmul+0x242>
 8000916:	0015      	movs	r5, r2
 8000918:	0771      	lsls	r1, r6, #29
 800091a:	d00b      	beq.n	8000934 <__aeabi_fmul+0xfc>
 800091c:	200f      	movs	r0, #15
 800091e:	0021      	movs	r1, r4
 8000920:	4030      	ands	r0, r6
 8000922:	2804      	cmp	r0, #4
 8000924:	d006      	beq.n	8000934 <__aeabi_fmul+0xfc>
 8000926:	3604      	adds	r6, #4
 8000928:	0132      	lsls	r2, r6, #4
 800092a:	d503      	bpl.n	8000934 <__aeabi_fmul+0xfc>
 800092c:	4b6e      	ldr	r3, [pc, #440]	@ (8000ae8 <__aeabi_fmul+0x2b0>)
 800092e:	401e      	ands	r6, r3
 8000930:	000b      	movs	r3, r1
 8000932:	3380      	adds	r3, #128	@ 0x80
 8000934:	2bfe      	cmp	r3, #254	@ 0xfe
 8000936:	dd00      	ble.n	800093a <__aeabi_fmul+0x102>
 8000938:	e0bd      	b.n	8000ab6 <__aeabi_fmul+0x27e>
 800093a:	01b2      	lsls	r2, r6, #6
 800093c:	0a52      	lsrs	r2, r2, #9
 800093e:	b2db      	uxtb	r3, r3
 8000940:	e048      	b.n	80009d4 <__aeabi_fmul+0x19c>
 8000942:	2e00      	cmp	r6, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_fmul+0x110>
 8000946:	e092      	b.n	8000a6e <__aeabi_fmul+0x236>
 8000948:	2308      	movs	r3, #8
 800094a:	4699      	mov	r9, r3
 800094c:	3b06      	subs	r3, #6
 800094e:	469a      	mov	sl, r3
 8000950:	027b      	lsls	r3, r7, #9
 8000952:	0a5b      	lsrs	r3, r3, #9
 8000954:	4698      	mov	r8, r3
 8000956:	007b      	lsls	r3, r7, #1
 8000958:	24ff      	movs	r4, #255	@ 0xff
 800095a:	0e1b      	lsrs	r3, r3, #24
 800095c:	0fff      	lsrs	r7, r7, #31
 800095e:	2b00      	cmp	r3, #0
 8000960:	d18a      	bne.n	8000878 <__aeabi_fmul+0x40>
 8000962:	4642      	mov	r2, r8
 8000964:	2a00      	cmp	r2, #0
 8000966:	d164      	bne.n	8000a32 <__aeabi_fmul+0x1fa>
 8000968:	4649      	mov	r1, r9
 800096a:	3201      	adds	r2, #1
 800096c:	4311      	orrs	r1, r2
 800096e:	4689      	mov	r9, r1
 8000970:	290a      	cmp	r1, #10
 8000972:	dc08      	bgt.n	8000986 <__aeabi_fmul+0x14e>
 8000974:	407d      	eors	r5, r7
 8000976:	2001      	movs	r0, #1
 8000978:	b2ea      	uxtb	r2, r5
 800097a:	2902      	cmp	r1, #2
 800097c:	dc91      	bgt.n	80008a2 <__aeabi_fmul+0x6a>
 800097e:	0015      	movs	r5, r2
 8000980:	2200      	movs	r2, #0
 8000982:	e027      	b.n	80009d4 <__aeabi_fmul+0x19c>
 8000984:	0015      	movs	r5, r2
 8000986:	4653      	mov	r3, sl
 8000988:	2b02      	cmp	r3, #2
 800098a:	d100      	bne.n	800098e <__aeabi_fmul+0x156>
 800098c:	e093      	b.n	8000ab6 <__aeabi_fmul+0x27e>
 800098e:	2b03      	cmp	r3, #3
 8000990:	d01a      	beq.n	80009c8 <__aeabi_fmul+0x190>
 8000992:	2b01      	cmp	r3, #1
 8000994:	d12c      	bne.n	80009f0 <__aeabi_fmul+0x1b8>
 8000996:	2300      	movs	r3, #0
 8000998:	2200      	movs	r2, #0
 800099a:	e01b      	b.n	80009d4 <__aeabi_fmul+0x19c>
 800099c:	4643      	mov	r3, r8
 800099e:	34ff      	adds	r4, #255	@ 0xff
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d055      	beq.n	8000a50 <__aeabi_fmul+0x218>
 80009a4:	2103      	movs	r1, #3
 80009a6:	464b      	mov	r3, r9
 80009a8:	430b      	orrs	r3, r1
 80009aa:	0019      	movs	r1, r3
 80009ac:	2b0a      	cmp	r3, #10
 80009ae:	dc00      	bgt.n	80009b2 <__aeabi_fmul+0x17a>
 80009b0:	e092      	b.n	8000ad8 <__aeabi_fmul+0x2a0>
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	d000      	beq.n	80009b8 <__aeabi_fmul+0x180>
 80009b6:	e08c      	b.n	8000ad2 <__aeabi_fmul+0x29a>
 80009b8:	2280      	movs	r2, #128	@ 0x80
 80009ba:	03d2      	lsls	r2, r2, #15
 80009bc:	4216      	tst	r6, r2
 80009be:	d003      	beq.n	80009c8 <__aeabi_fmul+0x190>
 80009c0:	4643      	mov	r3, r8
 80009c2:	4213      	tst	r3, r2
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fmul+0x190>
 80009c6:	e07d      	b.n	8000ac4 <__aeabi_fmul+0x28c>
 80009c8:	2280      	movs	r2, #128	@ 0x80
 80009ca:	03d2      	lsls	r2, r2, #15
 80009cc:	4332      	orrs	r2, r6
 80009ce:	0252      	lsls	r2, r2, #9
 80009d0:	0a52      	lsrs	r2, r2, #9
 80009d2:	23ff      	movs	r3, #255	@ 0xff
 80009d4:	05d8      	lsls	r0, r3, #23
 80009d6:	07ed      	lsls	r5, r5, #31
 80009d8:	4310      	orrs	r0, r2
 80009da:	4328      	orrs	r0, r5
 80009dc:	bce0      	pop	{r5, r6, r7}
 80009de:	46ba      	mov	sl, r7
 80009e0:	46b1      	mov	r9, r6
 80009e2:	46a8      	mov	r8, r5
 80009e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009e6:	2301      	movs	r3, #1
 80009e8:	0015      	movs	r5, r2
 80009ea:	0871      	lsrs	r1, r6, #1
 80009ec:	401e      	ands	r6, r3
 80009ee:	430e      	orrs	r6, r1
 80009f0:	0023      	movs	r3, r4
 80009f2:	3380      	adds	r3, #128	@ 0x80
 80009f4:	1c61      	adds	r1, r4, #1
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	dd41      	ble.n	8000a7e <__aeabi_fmul+0x246>
 80009fa:	0772      	lsls	r2, r6, #29
 80009fc:	d094      	beq.n	8000928 <__aeabi_fmul+0xf0>
 80009fe:	220f      	movs	r2, #15
 8000a00:	4032      	ands	r2, r6
 8000a02:	2a04      	cmp	r2, #4
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fmul+0x1d0>
 8000a06:	e78e      	b.n	8000926 <__aeabi_fmul+0xee>
 8000a08:	e78e      	b.n	8000928 <__aeabi_fmul+0xf0>
 8000a0a:	2e00      	cmp	r6, #0
 8000a0c:	d105      	bne.n	8000a1a <__aeabi_fmul+0x1e2>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	4699      	mov	r9, r3
 8000a12:	3b03      	subs	r3, #3
 8000a14:	2400      	movs	r4, #0
 8000a16:	469a      	mov	sl, r3
 8000a18:	e726      	b.n	8000868 <__aeabi_fmul+0x30>
 8000a1a:	0030      	movs	r0, r6
 8000a1c:	f000 fb3a 	bl	8001094 <__clzsi2>
 8000a20:	2476      	movs	r4, #118	@ 0x76
 8000a22:	1f43      	subs	r3, r0, #5
 8000a24:	409e      	lsls	r6, r3
 8000a26:	2300      	movs	r3, #0
 8000a28:	4264      	negs	r4, r4
 8000a2a:	4699      	mov	r9, r3
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	1a24      	subs	r4, r4, r0
 8000a30:	e71a      	b.n	8000868 <__aeabi_fmul+0x30>
 8000a32:	4640      	mov	r0, r8
 8000a34:	f000 fb2e 	bl	8001094 <__clzsi2>
 8000a38:	464b      	mov	r3, r9
 8000a3a:	1a24      	subs	r4, r4, r0
 8000a3c:	3c76      	subs	r4, #118	@ 0x76
 8000a3e:	2b0a      	cmp	r3, #10
 8000a40:	dca1      	bgt.n	8000986 <__aeabi_fmul+0x14e>
 8000a42:	4643      	mov	r3, r8
 8000a44:	3805      	subs	r0, #5
 8000a46:	4083      	lsls	r3, r0
 8000a48:	407d      	eors	r5, r7
 8000a4a:	4698      	mov	r8, r3
 8000a4c:	b2ea      	uxtb	r2, r5
 8000a4e:	e724      	b.n	800089a <__aeabi_fmul+0x62>
 8000a50:	464a      	mov	r2, r9
 8000a52:	3302      	adds	r3, #2
 8000a54:	4313      	orrs	r3, r2
 8000a56:	002a      	movs	r2, r5
 8000a58:	407a      	eors	r2, r7
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	dc92      	bgt.n	8000986 <__aeabi_fmul+0x14e>
 8000a60:	4649      	mov	r1, r9
 8000a62:	0015      	movs	r5, r2
 8000a64:	2900      	cmp	r1, #0
 8000a66:	d026      	beq.n	8000ab6 <__aeabi_fmul+0x27e>
 8000a68:	4699      	mov	r9, r3
 8000a6a:	2002      	movs	r0, #2
 8000a6c:	e719      	b.n	80008a2 <__aeabi_fmul+0x6a>
 8000a6e:	230c      	movs	r3, #12
 8000a70:	4699      	mov	r9, r3
 8000a72:	3b09      	subs	r3, #9
 8000a74:	24ff      	movs	r4, #255	@ 0xff
 8000a76:	469a      	mov	sl, r3
 8000a78:	e6f6      	b.n	8000868 <__aeabi_fmul+0x30>
 8000a7a:	0015      	movs	r5, r2
 8000a7c:	0021      	movs	r1, r4
 8000a7e:	2201      	movs	r2, #1
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	2b1b      	cmp	r3, #27
 8000a84:	dd00      	ble.n	8000a88 <__aeabi_fmul+0x250>
 8000a86:	e786      	b.n	8000996 <__aeabi_fmul+0x15e>
 8000a88:	319e      	adds	r1, #158	@ 0x9e
 8000a8a:	0032      	movs	r2, r6
 8000a8c:	408e      	lsls	r6, r1
 8000a8e:	40da      	lsrs	r2, r3
 8000a90:	1e73      	subs	r3, r6, #1
 8000a92:	419e      	sbcs	r6, r3
 8000a94:	4332      	orrs	r2, r6
 8000a96:	0753      	lsls	r3, r2, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x26c>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x26c>
 8000aa2:	3204      	adds	r2, #4
 8000aa4:	0153      	lsls	r3, r2, #5
 8000aa6:	d510      	bpl.n	8000aca <__aeabi_fmul+0x292>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	e792      	b.n	80009d4 <__aeabi_fmul+0x19c>
 8000aae:	003d      	movs	r5, r7
 8000ab0:	4646      	mov	r6, r8
 8000ab2:	4682      	mov	sl, r0
 8000ab4:	e767      	b.n	8000986 <__aeabi_fmul+0x14e>
 8000ab6:	23ff      	movs	r3, #255	@ 0xff
 8000ab8:	2200      	movs	r2, #0
 8000aba:	e78b      	b.n	80009d4 <__aeabi_fmul+0x19c>
 8000abc:	2280      	movs	r2, #128	@ 0x80
 8000abe:	2500      	movs	r5, #0
 8000ac0:	03d2      	lsls	r2, r2, #15
 8000ac2:	e786      	b.n	80009d2 <__aeabi_fmul+0x19a>
 8000ac4:	003d      	movs	r5, r7
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	e783      	b.n	80009d2 <__aeabi_fmul+0x19a>
 8000aca:	0192      	lsls	r2, r2, #6
 8000acc:	2300      	movs	r3, #0
 8000ace:	0a52      	lsrs	r2, r2, #9
 8000ad0:	e780      	b.n	80009d4 <__aeabi_fmul+0x19c>
 8000ad2:	003d      	movs	r5, r7
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	e777      	b.n	80009c8 <__aeabi_fmul+0x190>
 8000ad8:	002a      	movs	r2, r5
 8000ada:	2301      	movs	r3, #1
 8000adc:	407a      	eors	r2, r7
 8000ade:	408b      	lsls	r3, r1
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	e6e9      	b.n	80008ba <__aeabi_fmul+0x82>
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	f7ffffff 	.word	0xf7ffffff

08000aec <__aeabi_fsub>:
 8000aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aee:	4647      	mov	r7, r8
 8000af0:	46ce      	mov	lr, r9
 8000af2:	0243      	lsls	r3, r0, #9
 8000af4:	b580      	push	{r7, lr}
 8000af6:	0a5f      	lsrs	r7, r3, #9
 8000af8:	099b      	lsrs	r3, r3, #6
 8000afa:	0045      	lsls	r5, r0, #1
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	469c      	mov	ip, r3
 8000b00:	024b      	lsls	r3, r1, #9
 8000b02:	0fc4      	lsrs	r4, r0, #31
 8000b04:	0fce      	lsrs	r6, r1, #31
 8000b06:	0e2d      	lsrs	r5, r5, #24
 8000b08:	0a58      	lsrs	r0, r3, #9
 8000b0a:	0e12      	lsrs	r2, r2, #24
 8000b0c:	0999      	lsrs	r1, r3, #6
 8000b0e:	2aff      	cmp	r2, #255	@ 0xff
 8000b10:	d06b      	beq.n	8000bea <__aeabi_fsub+0xfe>
 8000b12:	2301      	movs	r3, #1
 8000b14:	405e      	eors	r6, r3
 8000b16:	1aab      	subs	r3, r5, r2
 8000b18:	42b4      	cmp	r4, r6
 8000b1a:	d04b      	beq.n	8000bb4 <__aeabi_fsub+0xc8>
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	dc00      	bgt.n	8000b22 <__aeabi_fsub+0x36>
 8000b20:	e0ff      	b.n	8000d22 <__aeabi_fsub+0x236>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d100      	bne.n	8000b28 <__aeabi_fsub+0x3c>
 8000b26:	e088      	b.n	8000c3a <__aeabi_fsub+0x14e>
 8000b28:	2dff      	cmp	r5, #255	@ 0xff
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_fsub+0x42>
 8000b2c:	e0ef      	b.n	8000d0e <__aeabi_fsub+0x222>
 8000b2e:	2280      	movs	r2, #128	@ 0x80
 8000b30:	04d2      	lsls	r2, r2, #19
 8000b32:	4311      	orrs	r1, r2
 8000b34:	2001      	movs	r0, #1
 8000b36:	2b1b      	cmp	r3, #27
 8000b38:	dc08      	bgt.n	8000b4c <__aeabi_fsub+0x60>
 8000b3a:	0008      	movs	r0, r1
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	40d8      	lsrs	r0, r3
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	4099      	lsls	r1, r3
 8000b44:	000b      	movs	r3, r1
 8000b46:	1e5a      	subs	r2, r3, #1
 8000b48:	4193      	sbcs	r3, r2
 8000b4a:	4318      	orrs	r0, r3
 8000b4c:	4663      	mov	r3, ip
 8000b4e:	1a1b      	subs	r3, r3, r0
 8000b50:	469c      	mov	ip, r3
 8000b52:	4663      	mov	r3, ip
 8000b54:	015b      	lsls	r3, r3, #5
 8000b56:	d400      	bmi.n	8000b5a <__aeabi_fsub+0x6e>
 8000b58:	e0cd      	b.n	8000cf6 <__aeabi_fsub+0x20a>
 8000b5a:	4663      	mov	r3, ip
 8000b5c:	019f      	lsls	r7, r3, #6
 8000b5e:	09bf      	lsrs	r7, r7, #6
 8000b60:	0038      	movs	r0, r7
 8000b62:	f000 fa97 	bl	8001094 <__clzsi2>
 8000b66:	003b      	movs	r3, r7
 8000b68:	3805      	subs	r0, #5
 8000b6a:	4083      	lsls	r3, r0
 8000b6c:	4285      	cmp	r5, r0
 8000b6e:	dc00      	bgt.n	8000b72 <__aeabi_fsub+0x86>
 8000b70:	e0a2      	b.n	8000cb8 <__aeabi_fsub+0x1cc>
 8000b72:	4ab7      	ldr	r2, [pc, #732]	@ (8000e50 <__aeabi_fsub+0x364>)
 8000b74:	1a2d      	subs	r5, r5, r0
 8000b76:	401a      	ands	r2, r3
 8000b78:	4694      	mov	ip, r2
 8000b7a:	075a      	lsls	r2, r3, #29
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fsub+0x94>
 8000b7e:	e0c3      	b.n	8000d08 <__aeabi_fsub+0x21c>
 8000b80:	220f      	movs	r2, #15
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d100      	bne.n	8000b8a <__aeabi_fsub+0x9e>
 8000b88:	e0be      	b.n	8000d08 <__aeabi_fsub+0x21c>
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	4698      	mov	r8, r3
 8000b8e:	44c4      	add	ip, r8
 8000b90:	4663      	mov	r3, ip
 8000b92:	015b      	lsls	r3, r3, #5
 8000b94:	d400      	bmi.n	8000b98 <__aeabi_fsub+0xac>
 8000b96:	e0b7      	b.n	8000d08 <__aeabi_fsub+0x21c>
 8000b98:	1c68      	adds	r0, r5, #1
 8000b9a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_fsub+0xb4>
 8000b9e:	e0a5      	b.n	8000cec <__aeabi_fsub+0x200>
 8000ba0:	20ff      	movs	r0, #255	@ 0xff
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	05c0      	lsls	r0, r0, #23
 8000ba6:	4310      	orrs	r0, r2
 8000ba8:	07e4      	lsls	r4, r4, #31
 8000baa:	4320      	orrs	r0, r4
 8000bac:	bcc0      	pop	{r6, r7}
 8000bae:	46b9      	mov	r9, r7
 8000bb0:	46b0      	mov	r8, r6
 8000bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	dc00      	bgt.n	8000bba <__aeabi_fsub+0xce>
 8000bb8:	e1eb      	b.n	8000f92 <__aeabi_fsub+0x4a6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d046      	beq.n	8000c4c <__aeabi_fsub+0x160>
 8000bbe:	2dff      	cmp	r5, #255	@ 0xff
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0xd8>
 8000bc2:	e0a4      	b.n	8000d0e <__aeabi_fsub+0x222>
 8000bc4:	2280      	movs	r2, #128	@ 0x80
 8000bc6:	04d2      	lsls	r2, r2, #19
 8000bc8:	4311      	orrs	r1, r2
 8000bca:	2b1b      	cmp	r3, #27
 8000bcc:	dc00      	bgt.n	8000bd0 <__aeabi_fsub+0xe4>
 8000bce:	e0fb      	b.n	8000dc8 <__aeabi_fsub+0x2dc>
 8000bd0:	2305      	movs	r3, #5
 8000bd2:	4698      	mov	r8, r3
 8000bd4:	002b      	movs	r3, r5
 8000bd6:	44c4      	add	ip, r8
 8000bd8:	4662      	mov	r2, ip
 8000bda:	08d7      	lsrs	r7, r2, #3
 8000bdc:	2bff      	cmp	r3, #255	@ 0xff
 8000bde:	d100      	bne.n	8000be2 <__aeabi_fsub+0xf6>
 8000be0:	e095      	b.n	8000d0e <__aeabi_fsub+0x222>
 8000be2:	027a      	lsls	r2, r7, #9
 8000be4:	0a52      	lsrs	r2, r2, #9
 8000be6:	b2d8      	uxtb	r0, r3
 8000be8:	e7dc      	b.n	8000ba4 <__aeabi_fsub+0xb8>
 8000bea:	002b      	movs	r3, r5
 8000bec:	3bff      	subs	r3, #255	@ 0xff
 8000bee:	4699      	mov	r9, r3
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	d118      	bne.n	8000c26 <__aeabi_fsub+0x13a>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	405e      	eors	r6, r3
 8000bf8:	42b4      	cmp	r4, r6
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_fsub+0x112>
 8000bfc:	e0ca      	b.n	8000d94 <__aeabi_fsub+0x2a8>
 8000bfe:	464b      	mov	r3, r9
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d02d      	beq.n	8000c60 <__aeabi_fsub+0x174>
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d000      	beq.n	8000c0a <__aeabi_fsub+0x11e>
 8000c08:	e13c      	b.n	8000e84 <__aeabi_fsub+0x398>
 8000c0a:	23ff      	movs	r3, #255	@ 0xff
 8000c0c:	4664      	mov	r4, ip
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	d100      	bne.n	8000c14 <__aeabi_fsub+0x128>
 8000c12:	e15f      	b.n	8000ed4 <__aeabi_fsub+0x3e8>
 8000c14:	1e5d      	subs	r5, r3, #1
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d100      	bne.n	8000c1c <__aeabi_fsub+0x130>
 8000c1a:	e174      	b.n	8000f06 <__aeabi_fsub+0x41a>
 8000c1c:	0034      	movs	r4, r6
 8000c1e:	2bff      	cmp	r3, #255	@ 0xff
 8000c20:	d074      	beq.n	8000d0c <__aeabi_fsub+0x220>
 8000c22:	002b      	movs	r3, r5
 8000c24:	e103      	b.n	8000e2e <__aeabi_fsub+0x342>
 8000c26:	42b4      	cmp	r4, r6
 8000c28:	d100      	bne.n	8000c2c <__aeabi_fsub+0x140>
 8000c2a:	e09c      	b.n	8000d66 <__aeabi_fsub+0x27a>
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d017      	beq.n	8000c60 <__aeabi_fsub+0x174>
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0ea      	beq.n	8000c0a <__aeabi_fsub+0x11e>
 8000c34:	0007      	movs	r7, r0
 8000c36:	0034      	movs	r4, r6
 8000c38:	e06c      	b.n	8000d14 <__aeabi_fsub+0x228>
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d0cc      	beq.n	8000bd8 <__aeabi_fsub+0xec>
 8000c3e:	1e5a      	subs	r2, r3, #1
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d02b      	beq.n	8000c9c <__aeabi_fsub+0x1b0>
 8000c44:	2bff      	cmp	r3, #255	@ 0xff
 8000c46:	d062      	beq.n	8000d0e <__aeabi_fsub+0x222>
 8000c48:	0013      	movs	r3, r2
 8000c4a:	e773      	b.n	8000b34 <__aeabi_fsub+0x48>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d0c3      	beq.n	8000bd8 <__aeabi_fsub+0xec>
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fsub+0x16c>
 8000c56:	e11e      	b.n	8000e96 <__aeabi_fsub+0x3aa>
 8000c58:	2bff      	cmp	r3, #255	@ 0xff
 8000c5a:	d058      	beq.n	8000d0e <__aeabi_fsub+0x222>
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	e7b4      	b.n	8000bca <__aeabi_fsub+0xde>
 8000c60:	22fe      	movs	r2, #254	@ 0xfe
 8000c62:	1c6b      	adds	r3, r5, #1
 8000c64:	421a      	tst	r2, r3
 8000c66:	d10d      	bne.n	8000c84 <__aeabi_fsub+0x198>
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d060      	beq.n	8000d2e <__aeabi_fsub+0x242>
 8000c6c:	4663      	mov	r3, ip
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d000      	beq.n	8000c74 <__aeabi_fsub+0x188>
 8000c72:	e120      	b.n	8000eb6 <__aeabi_fsub+0x3ca>
 8000c74:	2900      	cmp	r1, #0
 8000c76:	d000      	beq.n	8000c7a <__aeabi_fsub+0x18e>
 8000c78:	e128      	b.n	8000ecc <__aeabi_fsub+0x3e0>
 8000c7a:	2280      	movs	r2, #128	@ 0x80
 8000c7c:	2400      	movs	r4, #0
 8000c7e:	20ff      	movs	r0, #255	@ 0xff
 8000c80:	03d2      	lsls	r2, r2, #15
 8000c82:	e78f      	b.n	8000ba4 <__aeabi_fsub+0xb8>
 8000c84:	4663      	mov	r3, ip
 8000c86:	1a5f      	subs	r7, r3, r1
 8000c88:	017b      	lsls	r3, r7, #5
 8000c8a:	d500      	bpl.n	8000c8e <__aeabi_fsub+0x1a2>
 8000c8c:	e0fe      	b.n	8000e8c <__aeabi_fsub+0x3a0>
 8000c8e:	2f00      	cmp	r7, #0
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fsub+0x1a8>
 8000c92:	e765      	b.n	8000b60 <__aeabi_fsub+0x74>
 8000c94:	2400      	movs	r4, #0
 8000c96:	2000      	movs	r0, #0
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e783      	b.n	8000ba4 <__aeabi_fsub+0xb8>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	1a59      	subs	r1, r3, r1
 8000ca0:	014b      	lsls	r3, r1, #5
 8000ca2:	d400      	bmi.n	8000ca6 <__aeabi_fsub+0x1ba>
 8000ca4:	e119      	b.n	8000eda <__aeabi_fsub+0x3ee>
 8000ca6:	018f      	lsls	r7, r1, #6
 8000ca8:	09bf      	lsrs	r7, r7, #6
 8000caa:	0038      	movs	r0, r7
 8000cac:	f000 f9f2 	bl	8001094 <__clzsi2>
 8000cb0:	003b      	movs	r3, r7
 8000cb2:	3805      	subs	r0, #5
 8000cb4:	4083      	lsls	r3, r0
 8000cb6:	2501      	movs	r5, #1
 8000cb8:	2220      	movs	r2, #32
 8000cba:	1b40      	subs	r0, r0, r5
 8000cbc:	3001      	adds	r0, #1
 8000cbe:	1a12      	subs	r2, r2, r0
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	4093      	lsls	r3, r2
 8000cc4:	40c1      	lsrs	r1, r0
 8000cc6:	1e5a      	subs	r2, r3, #1
 8000cc8:	4193      	sbcs	r3, r2
 8000cca:	4319      	orrs	r1, r3
 8000ccc:	468c      	mov	ip, r1
 8000cce:	1e0b      	subs	r3, r1, #0
 8000cd0:	d0e1      	beq.n	8000c96 <__aeabi_fsub+0x1aa>
 8000cd2:	075b      	lsls	r3, r3, #29
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_fsub+0x1ec>
 8000cd6:	e152      	b.n	8000f7e <__aeabi_fsub+0x492>
 8000cd8:	230f      	movs	r3, #15
 8000cda:	2500      	movs	r5, #0
 8000cdc:	400b      	ands	r3, r1
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d000      	beq.n	8000ce4 <__aeabi_fsub+0x1f8>
 8000ce2:	e752      	b.n	8000b8a <__aeabi_fsub+0x9e>
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	014a      	lsls	r2, r1, #5
 8000ce8:	d400      	bmi.n	8000cec <__aeabi_fsub+0x200>
 8000cea:	e092      	b.n	8000e12 <__aeabi_fsub+0x326>
 8000cec:	b2c0      	uxtb	r0, r0
 8000cee:	4663      	mov	r3, ip
 8000cf0:	019a      	lsls	r2, r3, #6
 8000cf2:	0a52      	lsrs	r2, r2, #9
 8000cf4:	e756      	b.n	8000ba4 <__aeabi_fsub+0xb8>
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	075b      	lsls	r3, r3, #29
 8000cfa:	d005      	beq.n	8000d08 <__aeabi_fsub+0x21c>
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	4662      	mov	r2, ip
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	d000      	beq.n	8000d08 <__aeabi_fsub+0x21c>
 8000d06:	e740      	b.n	8000b8a <__aeabi_fsub+0x9e>
 8000d08:	002b      	movs	r3, r5
 8000d0a:	e765      	b.n	8000bd8 <__aeabi_fsub+0xec>
 8000d0c:	0007      	movs	r7, r0
 8000d0e:	2f00      	cmp	r7, #0
 8000d10:	d100      	bne.n	8000d14 <__aeabi_fsub+0x228>
 8000d12:	e745      	b.n	8000ba0 <__aeabi_fsub+0xb4>
 8000d14:	2280      	movs	r2, #128	@ 0x80
 8000d16:	03d2      	lsls	r2, r2, #15
 8000d18:	433a      	orrs	r2, r7
 8000d1a:	0252      	lsls	r2, r2, #9
 8000d1c:	20ff      	movs	r0, #255	@ 0xff
 8000d1e:	0a52      	lsrs	r2, r2, #9
 8000d20:	e740      	b.n	8000ba4 <__aeabi_fsub+0xb8>
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d179      	bne.n	8000e1a <__aeabi_fsub+0x32e>
 8000d26:	22fe      	movs	r2, #254	@ 0xfe
 8000d28:	1c6b      	adds	r3, r5, #1
 8000d2a:	421a      	tst	r2, r3
 8000d2c:	d1aa      	bne.n	8000c84 <__aeabi_fsub+0x198>
 8000d2e:	4663      	mov	r3, ip
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x24a>
 8000d34:	e0f5      	b.n	8000f22 <__aeabi_fsub+0x436>
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d100      	bne.n	8000d3c <__aeabi_fsub+0x250>
 8000d3a:	e0d1      	b.n	8000ee0 <__aeabi_fsub+0x3f4>
 8000d3c:	1a5f      	subs	r7, r3, r1
 8000d3e:	2380      	movs	r3, #128	@ 0x80
 8000d40:	04db      	lsls	r3, r3, #19
 8000d42:	421f      	tst	r7, r3
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x25c>
 8000d46:	e10e      	b.n	8000f66 <__aeabi_fsub+0x47a>
 8000d48:	4662      	mov	r2, ip
 8000d4a:	2401      	movs	r4, #1
 8000d4c:	1a8a      	subs	r2, r1, r2
 8000d4e:	4694      	mov	ip, r2
 8000d50:	2000      	movs	r0, #0
 8000d52:	4034      	ands	r4, r6
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	d100      	bne.n	8000d5a <__aeabi_fsub+0x26e>
 8000d58:	e724      	b.n	8000ba4 <__aeabi_fsub+0xb8>
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	421a      	tst	r2, r3
 8000d5e:	d1c6      	bne.n	8000cee <__aeabi_fsub+0x202>
 8000d60:	2300      	movs	r3, #0
 8000d62:	08d7      	lsrs	r7, r2, #3
 8000d64:	e73d      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d017      	beq.n	8000d9a <__aeabi_fsub+0x2ae>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d000      	beq.n	8000d70 <__aeabi_fsub+0x284>
 8000d6e:	e0af      	b.n	8000ed0 <__aeabi_fsub+0x3e4>
 8000d70:	23ff      	movs	r3, #255	@ 0xff
 8000d72:	4665      	mov	r5, ip
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	d100      	bne.n	8000d7a <__aeabi_fsub+0x28e>
 8000d78:	e0ad      	b.n	8000ed6 <__aeabi_fsub+0x3ea>
 8000d7a:	1e5e      	subs	r6, r3, #1
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_fsub+0x296>
 8000d80:	e089      	b.n	8000e96 <__aeabi_fsub+0x3aa>
 8000d82:	2bff      	cmp	r3, #255	@ 0xff
 8000d84:	d0c2      	beq.n	8000d0c <__aeabi_fsub+0x220>
 8000d86:	2e1b      	cmp	r6, #27
 8000d88:	dc00      	bgt.n	8000d8c <__aeabi_fsub+0x2a0>
 8000d8a:	e0ab      	b.n	8000ee4 <__aeabi_fsub+0x3f8>
 8000d8c:	1d4b      	adds	r3, r1, #5
 8000d8e:	469c      	mov	ip, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	e721      	b.n	8000bd8 <__aeabi_fsub+0xec>
 8000d94:	464b      	mov	r3, r9
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d170      	bne.n	8000e7c <__aeabi_fsub+0x390>
 8000d9a:	22fe      	movs	r2, #254	@ 0xfe
 8000d9c:	1c6b      	adds	r3, r5, #1
 8000d9e:	421a      	tst	r2, r3
 8000da0:	d15e      	bne.n	8000e60 <__aeabi_fsub+0x374>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fsub+0x2bc>
 8000da6:	e0c3      	b.n	8000f30 <__aeabi_fsub+0x444>
 8000da8:	4663      	mov	r3, ip
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0x2c4>
 8000dae:	e0d0      	b.n	8000f52 <__aeabi_fsub+0x466>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	d100      	bne.n	8000db6 <__aeabi_fsub+0x2ca>
 8000db4:	e094      	b.n	8000ee0 <__aeabi_fsub+0x3f4>
 8000db6:	000a      	movs	r2, r1
 8000db8:	4462      	add	r2, ip
 8000dba:	0153      	lsls	r3, r2, #5
 8000dbc:	d400      	bmi.n	8000dc0 <__aeabi_fsub+0x2d4>
 8000dbe:	e0d8      	b.n	8000f72 <__aeabi_fsub+0x486>
 8000dc0:	0192      	lsls	r2, r2, #6
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	0a52      	lsrs	r2, r2, #9
 8000dc6:	e6ed      	b.n	8000ba4 <__aeabi_fsub+0xb8>
 8000dc8:	0008      	movs	r0, r1
 8000dca:	2220      	movs	r2, #32
 8000dcc:	40d8      	lsrs	r0, r3
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	4099      	lsls	r1, r3
 8000dd2:	000b      	movs	r3, r1
 8000dd4:	1e5a      	subs	r2, r3, #1
 8000dd6:	4193      	sbcs	r3, r2
 8000dd8:	4303      	orrs	r3, r0
 8000dda:	449c      	add	ip, r3
 8000ddc:	4663      	mov	r3, ip
 8000dde:	015b      	lsls	r3, r3, #5
 8000de0:	d589      	bpl.n	8000cf6 <__aeabi_fsub+0x20a>
 8000de2:	3501      	adds	r5, #1
 8000de4:	2dff      	cmp	r5, #255	@ 0xff
 8000de6:	d100      	bne.n	8000dea <__aeabi_fsub+0x2fe>
 8000de8:	e6da      	b.n	8000ba0 <__aeabi_fsub+0xb4>
 8000dea:	4662      	mov	r2, ip
 8000dec:	2301      	movs	r3, #1
 8000dee:	4919      	ldr	r1, [pc, #100]	@ (8000e54 <__aeabi_fsub+0x368>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	0852      	lsrs	r2, r2, #1
 8000df4:	400a      	ands	r2, r1
 8000df6:	431a      	orrs	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	4694      	mov	ip, r2
 8000dfc:	075b      	lsls	r3, r3, #29
 8000dfe:	d004      	beq.n	8000e0a <__aeabi_fsub+0x31e>
 8000e00:	230f      	movs	r3, #15
 8000e02:	4013      	ands	r3, r2
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d000      	beq.n	8000e0a <__aeabi_fsub+0x31e>
 8000e08:	e6bf      	b.n	8000b8a <__aeabi_fsub+0x9e>
 8000e0a:	4663      	mov	r3, ip
 8000e0c:	015b      	lsls	r3, r3, #5
 8000e0e:	d500      	bpl.n	8000e12 <__aeabi_fsub+0x326>
 8000e10:	e6c2      	b.n	8000b98 <__aeabi_fsub+0xac>
 8000e12:	4663      	mov	r3, ip
 8000e14:	08df      	lsrs	r7, r3, #3
 8000e16:	002b      	movs	r3, r5
 8000e18:	e6e3      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000e1a:	1b53      	subs	r3, r2, r5
 8000e1c:	2d00      	cmp	r5, #0
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_fsub+0x336>
 8000e20:	e6f4      	b.n	8000c0c <__aeabi_fsub+0x120>
 8000e22:	2080      	movs	r0, #128	@ 0x80
 8000e24:	4664      	mov	r4, ip
 8000e26:	04c0      	lsls	r0, r0, #19
 8000e28:	4304      	orrs	r4, r0
 8000e2a:	46a4      	mov	ip, r4
 8000e2c:	0034      	movs	r4, r6
 8000e2e:	2001      	movs	r0, #1
 8000e30:	2b1b      	cmp	r3, #27
 8000e32:	dc09      	bgt.n	8000e48 <__aeabi_fsub+0x35c>
 8000e34:	2520      	movs	r5, #32
 8000e36:	4660      	mov	r0, ip
 8000e38:	40d8      	lsrs	r0, r3
 8000e3a:	1aeb      	subs	r3, r5, r3
 8000e3c:	4665      	mov	r5, ip
 8000e3e:	409d      	lsls	r5, r3
 8000e40:	002b      	movs	r3, r5
 8000e42:	1e5d      	subs	r5, r3, #1
 8000e44:	41ab      	sbcs	r3, r5
 8000e46:	4318      	orrs	r0, r3
 8000e48:	1a0b      	subs	r3, r1, r0
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	0015      	movs	r5, r2
 8000e4e:	e680      	b.n	8000b52 <__aeabi_fsub+0x66>
 8000e50:	fbffffff 	.word	0xfbffffff
 8000e54:	7dffffff 	.word	0x7dffffff
 8000e58:	22fe      	movs	r2, #254	@ 0xfe
 8000e5a:	1c6b      	adds	r3, r5, #1
 8000e5c:	4213      	tst	r3, r2
 8000e5e:	d0a3      	beq.n	8000da8 <__aeabi_fsub+0x2bc>
 8000e60:	2bff      	cmp	r3, #255	@ 0xff
 8000e62:	d100      	bne.n	8000e66 <__aeabi_fsub+0x37a>
 8000e64:	e69c      	b.n	8000ba0 <__aeabi_fsub+0xb4>
 8000e66:	4461      	add	r1, ip
 8000e68:	0849      	lsrs	r1, r1, #1
 8000e6a:	074a      	lsls	r2, r1, #29
 8000e6c:	d049      	beq.n	8000f02 <__aeabi_fsub+0x416>
 8000e6e:	220f      	movs	r2, #15
 8000e70:	400a      	ands	r2, r1
 8000e72:	2a04      	cmp	r2, #4
 8000e74:	d045      	beq.n	8000f02 <__aeabi_fsub+0x416>
 8000e76:	1d0a      	adds	r2, r1, #4
 8000e78:	4694      	mov	ip, r2
 8000e7a:	e6ad      	b.n	8000bd8 <__aeabi_fsub+0xec>
 8000e7c:	2d00      	cmp	r5, #0
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_fsub+0x396>
 8000e80:	e776      	b.n	8000d70 <__aeabi_fsub+0x284>
 8000e82:	e68d      	b.n	8000ba0 <__aeabi_fsub+0xb4>
 8000e84:	0034      	movs	r4, r6
 8000e86:	20ff      	movs	r0, #255	@ 0xff
 8000e88:	2200      	movs	r2, #0
 8000e8a:	e68b      	b.n	8000ba4 <__aeabi_fsub+0xb8>
 8000e8c:	4663      	mov	r3, ip
 8000e8e:	2401      	movs	r4, #1
 8000e90:	1acf      	subs	r7, r1, r3
 8000e92:	4034      	ands	r4, r6
 8000e94:	e664      	b.n	8000b60 <__aeabi_fsub+0x74>
 8000e96:	4461      	add	r1, ip
 8000e98:	014b      	lsls	r3, r1, #5
 8000e9a:	d56d      	bpl.n	8000f78 <__aeabi_fsub+0x48c>
 8000e9c:	0848      	lsrs	r0, r1, #1
 8000e9e:	4944      	ldr	r1, [pc, #272]	@ (8000fb0 <__aeabi_fsub+0x4c4>)
 8000ea0:	4001      	ands	r1, r0
 8000ea2:	0743      	lsls	r3, r0, #29
 8000ea4:	d02c      	beq.n	8000f00 <__aeabi_fsub+0x414>
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	4003      	ands	r3, r0
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	d028      	beq.n	8000f00 <__aeabi_fsub+0x414>
 8000eae:	1d0b      	adds	r3, r1, #4
 8000eb0:	469c      	mov	ip, r3
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	e690      	b.n	8000bd8 <__aeabi_fsub+0xec>
 8000eb6:	2900      	cmp	r1, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_fsub+0x3d0>
 8000eba:	e72b      	b.n	8000d14 <__aeabi_fsub+0x228>
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	03db      	lsls	r3, r3, #15
 8000ec0:	429f      	cmp	r7, r3
 8000ec2:	d200      	bcs.n	8000ec6 <__aeabi_fsub+0x3da>
 8000ec4:	e726      	b.n	8000d14 <__aeabi_fsub+0x228>
 8000ec6:	4298      	cmp	r0, r3
 8000ec8:	d300      	bcc.n	8000ecc <__aeabi_fsub+0x3e0>
 8000eca:	e723      	b.n	8000d14 <__aeabi_fsub+0x228>
 8000ecc:	2401      	movs	r4, #1
 8000ece:	4034      	ands	r4, r6
 8000ed0:	0007      	movs	r7, r0
 8000ed2:	e71f      	b.n	8000d14 <__aeabi_fsub+0x228>
 8000ed4:	0034      	movs	r4, r6
 8000ed6:	468c      	mov	ip, r1
 8000ed8:	e67e      	b.n	8000bd8 <__aeabi_fsub+0xec>
 8000eda:	2301      	movs	r3, #1
 8000edc:	08cf      	lsrs	r7, r1, #3
 8000ede:	e680      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e67e      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000ee4:	2020      	movs	r0, #32
 8000ee6:	4665      	mov	r5, ip
 8000ee8:	1b80      	subs	r0, r0, r6
 8000eea:	4085      	lsls	r5, r0
 8000eec:	4663      	mov	r3, ip
 8000eee:	0028      	movs	r0, r5
 8000ef0:	40f3      	lsrs	r3, r6
 8000ef2:	1e45      	subs	r5, r0, #1
 8000ef4:	41a8      	sbcs	r0, r5
 8000ef6:	4303      	orrs	r3, r0
 8000ef8:	469c      	mov	ip, r3
 8000efa:	0015      	movs	r5, r2
 8000efc:	448c      	add	ip, r1
 8000efe:	e76d      	b.n	8000ddc <__aeabi_fsub+0x2f0>
 8000f00:	2302      	movs	r3, #2
 8000f02:	08cf      	lsrs	r7, r1, #3
 8000f04:	e66d      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000f06:	1b0f      	subs	r7, r1, r4
 8000f08:	017b      	lsls	r3, r7, #5
 8000f0a:	d528      	bpl.n	8000f5e <__aeabi_fsub+0x472>
 8000f0c:	01bf      	lsls	r7, r7, #6
 8000f0e:	09bf      	lsrs	r7, r7, #6
 8000f10:	0038      	movs	r0, r7
 8000f12:	f000 f8bf 	bl	8001094 <__clzsi2>
 8000f16:	003b      	movs	r3, r7
 8000f18:	3805      	subs	r0, #5
 8000f1a:	4083      	lsls	r3, r0
 8000f1c:	0034      	movs	r4, r6
 8000f1e:	2501      	movs	r5, #1
 8000f20:	e6ca      	b.n	8000cb8 <__aeabi_fsub+0x1cc>
 8000f22:	2900      	cmp	r1, #0
 8000f24:	d100      	bne.n	8000f28 <__aeabi_fsub+0x43c>
 8000f26:	e6b5      	b.n	8000c94 <__aeabi_fsub+0x1a8>
 8000f28:	2401      	movs	r4, #1
 8000f2a:	0007      	movs	r7, r0
 8000f2c:	4034      	ands	r4, r6
 8000f2e:	e658      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000f30:	4663      	mov	r3, ip
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0x44c>
 8000f36:	e6e9      	b.n	8000d0c <__aeabi_fsub+0x220>
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x452>
 8000f3c:	e6ea      	b.n	8000d14 <__aeabi_fsub+0x228>
 8000f3e:	2380      	movs	r3, #128	@ 0x80
 8000f40:	03db      	lsls	r3, r3, #15
 8000f42:	429f      	cmp	r7, r3
 8000f44:	d200      	bcs.n	8000f48 <__aeabi_fsub+0x45c>
 8000f46:	e6e5      	b.n	8000d14 <__aeabi_fsub+0x228>
 8000f48:	4298      	cmp	r0, r3
 8000f4a:	d300      	bcc.n	8000f4e <__aeabi_fsub+0x462>
 8000f4c:	e6e2      	b.n	8000d14 <__aeabi_fsub+0x228>
 8000f4e:	0007      	movs	r7, r0
 8000f50:	e6e0      	b.n	8000d14 <__aeabi_fsub+0x228>
 8000f52:	2900      	cmp	r1, #0
 8000f54:	d100      	bne.n	8000f58 <__aeabi_fsub+0x46c>
 8000f56:	e69e      	b.n	8000c96 <__aeabi_fsub+0x1aa>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	08cf      	lsrs	r7, r1, #3
 8000f5c:	e641      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000f5e:	0034      	movs	r4, r6
 8000f60:	2301      	movs	r3, #1
 8000f62:	08ff      	lsrs	r7, r7, #3
 8000f64:	e63d      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000f66:	2f00      	cmp	r7, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x480>
 8000f6a:	e693      	b.n	8000c94 <__aeabi_fsub+0x1a8>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	08ff      	lsrs	r7, r7, #3
 8000f70:	e637      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000f72:	2300      	movs	r3, #0
 8000f74:	08d7      	lsrs	r7, r2, #3
 8000f76:	e634      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	08cf      	lsrs	r7, r1, #3
 8000f7c:	e631      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000f7e:	2280      	movs	r2, #128	@ 0x80
 8000f80:	000b      	movs	r3, r1
 8000f82:	04d2      	lsls	r2, r2, #19
 8000f84:	2001      	movs	r0, #1
 8000f86:	4013      	ands	r3, r2
 8000f88:	4211      	tst	r1, r2
 8000f8a:	d000      	beq.n	8000f8e <__aeabi_fsub+0x4a2>
 8000f8c:	e6ae      	b.n	8000cec <__aeabi_fsub+0x200>
 8000f8e:	08cf      	lsrs	r7, r1, #3
 8000f90:	e627      	b.n	8000be2 <__aeabi_fsub+0xf6>
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x4ac>
 8000f96:	e75f      	b.n	8000e58 <__aeabi_fsub+0x36c>
 8000f98:	1b56      	subs	r6, r2, r5
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_fsub+0x4b6>
 8000f9e:	0033      	movs	r3, r6
 8000fa0:	e6e7      	b.n	8000d72 <__aeabi_fsub+0x286>
 8000fa2:	2380      	movs	r3, #128	@ 0x80
 8000fa4:	4660      	mov	r0, ip
 8000fa6:	04db      	lsls	r3, r3, #19
 8000fa8:	4318      	orrs	r0, r3
 8000faa:	4684      	mov	ip, r0
 8000fac:	e6eb      	b.n	8000d86 <__aeabi_fsub+0x29a>
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	7dffffff 	.word	0x7dffffff

08000fb4 <__aeabi_f2iz>:
 8000fb4:	0241      	lsls	r1, r0, #9
 8000fb6:	0042      	lsls	r2, r0, #1
 8000fb8:	0fc3      	lsrs	r3, r0, #31
 8000fba:	0a49      	lsrs	r1, r1, #9
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	0e12      	lsrs	r2, r2, #24
 8000fc0:	2a7e      	cmp	r2, #126	@ 0x7e
 8000fc2:	dd03      	ble.n	8000fcc <__aeabi_f2iz+0x18>
 8000fc4:	2a9d      	cmp	r2, #157	@ 0x9d
 8000fc6:	dd02      	ble.n	8000fce <__aeabi_f2iz+0x1a>
 8000fc8:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <__aeabi_f2iz+0x3c>)
 8000fca:	1898      	adds	r0, r3, r2
 8000fcc:	4770      	bx	lr
 8000fce:	2080      	movs	r0, #128	@ 0x80
 8000fd0:	0400      	lsls	r0, r0, #16
 8000fd2:	4301      	orrs	r1, r0
 8000fd4:	2a95      	cmp	r2, #149	@ 0x95
 8000fd6:	dc07      	bgt.n	8000fe8 <__aeabi_f2iz+0x34>
 8000fd8:	2096      	movs	r0, #150	@ 0x96
 8000fda:	1a82      	subs	r2, r0, r2
 8000fdc:	40d1      	lsrs	r1, r2
 8000fde:	4248      	negs	r0, r1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1f3      	bne.n	8000fcc <__aeabi_f2iz+0x18>
 8000fe4:	0008      	movs	r0, r1
 8000fe6:	e7f1      	b.n	8000fcc <__aeabi_f2iz+0x18>
 8000fe8:	3a96      	subs	r2, #150	@ 0x96
 8000fea:	4091      	lsls	r1, r2
 8000fec:	e7f7      	b.n	8000fde <__aeabi_f2iz+0x2a>
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	7fffffff 	.word	0x7fffffff

08000ff4 <__aeabi_i2f>:
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	d012      	beq.n	8001020 <__aeabi_i2f+0x2c>
 8000ffa:	17c3      	asrs	r3, r0, #31
 8000ffc:	18c5      	adds	r5, r0, r3
 8000ffe:	405d      	eors	r5, r3
 8001000:	0fc4      	lsrs	r4, r0, #31
 8001002:	0028      	movs	r0, r5
 8001004:	f000 f846 	bl	8001094 <__clzsi2>
 8001008:	239e      	movs	r3, #158	@ 0x9e
 800100a:	1a1b      	subs	r3, r3, r0
 800100c:	2b96      	cmp	r3, #150	@ 0x96
 800100e:	dc0f      	bgt.n	8001030 <__aeabi_i2f+0x3c>
 8001010:	2808      	cmp	r0, #8
 8001012:	d038      	beq.n	8001086 <__aeabi_i2f+0x92>
 8001014:	3808      	subs	r0, #8
 8001016:	4085      	lsls	r5, r0
 8001018:	026d      	lsls	r5, r5, #9
 800101a:	0a6d      	lsrs	r5, r5, #9
 800101c:	b2d8      	uxtb	r0, r3
 800101e:	e002      	b.n	8001026 <__aeabi_i2f+0x32>
 8001020:	2400      	movs	r4, #0
 8001022:	2000      	movs	r0, #0
 8001024:	2500      	movs	r5, #0
 8001026:	05c0      	lsls	r0, r0, #23
 8001028:	4328      	orrs	r0, r5
 800102a:	07e4      	lsls	r4, r4, #31
 800102c:	4320      	orrs	r0, r4
 800102e:	bd70      	pop	{r4, r5, r6, pc}
 8001030:	2b99      	cmp	r3, #153	@ 0x99
 8001032:	dc14      	bgt.n	800105e <__aeabi_i2f+0x6a>
 8001034:	1f42      	subs	r2, r0, #5
 8001036:	4095      	lsls	r5, r2
 8001038:	002a      	movs	r2, r5
 800103a:	4915      	ldr	r1, [pc, #84]	@ (8001090 <__aeabi_i2f+0x9c>)
 800103c:	4011      	ands	r1, r2
 800103e:	0755      	lsls	r5, r2, #29
 8001040:	d01c      	beq.n	800107c <__aeabi_i2f+0x88>
 8001042:	250f      	movs	r5, #15
 8001044:	402a      	ands	r2, r5
 8001046:	2a04      	cmp	r2, #4
 8001048:	d018      	beq.n	800107c <__aeabi_i2f+0x88>
 800104a:	3104      	adds	r1, #4
 800104c:	08ca      	lsrs	r2, r1, #3
 800104e:	0149      	lsls	r1, r1, #5
 8001050:	d515      	bpl.n	800107e <__aeabi_i2f+0x8a>
 8001052:	239f      	movs	r3, #159	@ 0x9f
 8001054:	0252      	lsls	r2, r2, #9
 8001056:	1a18      	subs	r0, r3, r0
 8001058:	0a55      	lsrs	r5, r2, #9
 800105a:	b2c0      	uxtb	r0, r0
 800105c:	e7e3      	b.n	8001026 <__aeabi_i2f+0x32>
 800105e:	2205      	movs	r2, #5
 8001060:	0029      	movs	r1, r5
 8001062:	1a12      	subs	r2, r2, r0
 8001064:	40d1      	lsrs	r1, r2
 8001066:	0002      	movs	r2, r0
 8001068:	321b      	adds	r2, #27
 800106a:	4095      	lsls	r5, r2
 800106c:	002a      	movs	r2, r5
 800106e:	1e55      	subs	r5, r2, #1
 8001070:	41aa      	sbcs	r2, r5
 8001072:	430a      	orrs	r2, r1
 8001074:	4906      	ldr	r1, [pc, #24]	@ (8001090 <__aeabi_i2f+0x9c>)
 8001076:	4011      	ands	r1, r2
 8001078:	0755      	lsls	r5, r2, #29
 800107a:	d1e2      	bne.n	8001042 <__aeabi_i2f+0x4e>
 800107c:	08ca      	lsrs	r2, r1, #3
 800107e:	0252      	lsls	r2, r2, #9
 8001080:	0a55      	lsrs	r5, r2, #9
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	e7cf      	b.n	8001026 <__aeabi_i2f+0x32>
 8001086:	026d      	lsls	r5, r5, #9
 8001088:	0a6d      	lsrs	r5, r5, #9
 800108a:	308e      	adds	r0, #142	@ 0x8e
 800108c:	e7cb      	b.n	8001026 <__aeabi_i2f+0x32>
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	fbffffff 	.word	0xfbffffff

08001094 <__clzsi2>:
 8001094:	211c      	movs	r1, #28
 8001096:	2301      	movs	r3, #1
 8001098:	041b      	lsls	r3, r3, #16
 800109a:	4298      	cmp	r0, r3
 800109c:	d301      	bcc.n	80010a2 <__clzsi2+0xe>
 800109e:	0c00      	lsrs	r0, r0, #16
 80010a0:	3910      	subs	r1, #16
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	4298      	cmp	r0, r3
 80010a6:	d301      	bcc.n	80010ac <__clzsi2+0x18>
 80010a8:	0a00      	lsrs	r0, r0, #8
 80010aa:	3908      	subs	r1, #8
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	4298      	cmp	r0, r3
 80010b0:	d301      	bcc.n	80010b6 <__clzsi2+0x22>
 80010b2:	0900      	lsrs	r0, r0, #4
 80010b4:	3904      	subs	r1, #4
 80010b6:	a202      	add	r2, pc, #8	@ (adr r2, 80010c0 <__clzsi2+0x2c>)
 80010b8:	5c10      	ldrb	r0, [r2, r0]
 80010ba:	1840      	adds	r0, r0, r1
 80010bc:	4770      	bx	lr
 80010be:	46c0      	nop			@ (mov r8, r8)
 80010c0:	02020304 	.word	0x02020304
 80010c4:	01010101 	.word	0x01010101
	...

080010d0 <initDMAadc>:
uint16_t adcChannels[3];
uint16_t battValue = 0;
uint16_t pot1Value = 0;
uint16_t pot2Value = 0;

void initDMAadc(){
 80010d0:	b510      	push	{r4, lr}
	HAL_ADCEx_Calibration_Start(&hadc);
 80010d2:	4c06      	ldr	r4, [pc, #24]	@ (80010ec <initDMAadc+0x1c>)
 80010d4:	0020      	movs	r0, r4
 80010d6:	f002 f983 	bl	80033e0 <HAL_ADCEx_Calibration_Start>
	HAL_Delay(50);
 80010da:	2032      	movs	r0, #50	@ 0x32
 80010dc:	f001 ff70 	bl	8002fc0 <HAL_Delay>
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adcChannels, 3);
 80010e0:	2203      	movs	r2, #3
 80010e2:	0020      	movs	r0, r4
 80010e4:	4902      	ldr	r1, [pc, #8]	@ (80010f0 <initDMAadc+0x20>)
 80010e6:	f002 f86f 	bl	80031c8 <HAL_ADC_Start_DMA>
}
 80010ea:	bd10      	pop	{r4, pc}
 80010ec:	20002410 	.word	0x20002410
 80010f0:	20000216 	.word	0x20000216

080010f4 <DMAadcUpdate>:

void DMAadcUpdate(){
 80010f4:	b510      	push	{r4, lr}
	HAL_ADC_Start_DMA(&hadc, (uint32_t*) adcChannels, 3);
 80010f6:	2203      	movs	r2, #3
 80010f8:	4902      	ldr	r1, [pc, #8]	@ (8001104 <DMAadcUpdate+0x10>)
 80010fa:	4803      	ldr	r0, [pc, #12]	@ (8001108 <DMAadcUpdate+0x14>)
 80010fc:	f002 f864 	bl	80031c8 <HAL_ADC_Start_DMA>
}
 8001100:	bd10      	pop	{r4, pc}
 8001102:	46c0      	nop			@ (mov r8, r8)
 8001104:	20000216 	.word	0x20000216
 8001108:	20002410 	.word	0x20002410

0800110c <DMAadcGetch>:

uint16_t DMAadcGetch(uint8_t ch){
	return adcChannels[ch];
 800110c:	4b01      	ldr	r3, [pc, #4]	@ (8001114 <DMAadcGetch+0x8>)
 800110e:	0040      	lsls	r0, r0, #1
 8001110:	5a18      	ldrh	r0, [r3, r0]
}
 8001112:	4770      	bx	lr
 8001114:	20000216 	.word	0x20000216

08001118 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	//uint8_t string[30];
	//sprintf(string, "x =  %d\n", adcChannels[1] );
	//serialPrintString(string);
	battValue = adcChannels[0];
 8001118:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <HAL_ADC_ConvCpltCallback+0x18>)
 800111a:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_ADC_ConvCpltCallback+0x1c>)
 800111c:	8811      	ldrh	r1, [r2, #0]
 800111e:	8019      	strh	r1, [r3, #0]
	pot1Value = adcChannels[1];
 8001120:	8851      	ldrh	r1, [r2, #2]
 8001122:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <HAL_ADC_ConvCpltCallback+0x20>)
 8001124:	8019      	strh	r1, [r3, #0]
	pot2Value = adcChannels[2];
 8001126:	8892      	ldrh	r2, [r2, #4]
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <HAL_ADC_ConvCpltCallback+0x24>)
 800112a:	801a      	strh	r2, [r3, #0]
}
 800112c:	4770      	bx	lr
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	20000216 	.word	0x20000216
 8001134:	20000214 	.word	0x20000214
 8001138:	20000212 	.word	0x20000212
 800113c:	20000210 	.word	0x20000210

08001140 <setSoftPWM>:
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
		if (i < duty) { //set pin
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
			softpwmbuffer[i] |= (uint32_t) pin;
		} else { //reset pin
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001140:	43c3      	mvns	r3, r0
void setSoftPWM(uint16_t pin, uint32_t duty, uint32_t *softpwmbuffer) {
 8001142:	b5f0      	push	{r4, r5, r6, r7, lr}
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001144:	0405      	lsls	r5, r0, #16
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001146:	43ef      	mvns	r7, r5
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
 8001148:	2400      	movs	r4, #0
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 800114a:	469c      	mov	ip, r3
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 800114c:	6813      	ldr	r3, [r2, #0]
		if (i < duty) { //set pin
 800114e:	42a1      	cmp	r1, r4
 8001150:	d908      	bls.n	8001164 <setSoftPWM+0x24>
			softpwmbuffer[i] &= (uint32_t) ~(pin << 16);
 8001152:	403b      	ands	r3, r7
			softpwmbuffer[i] |= (uint32_t) pin;
 8001154:	4303      	orrs	r3, r0
 8001156:	c208      	stmia	r2!, {r3}
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
 8001158:	23fa      	movs	r3, #250	@ 0xfa
 800115a:	3401      	adds	r4, #1
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	429c      	cmp	r4, r3
 8001160:	d1f4      	bne.n	800114c <setSoftPWM+0xc>
		}
	}
}
 8001162:	bdf0      	pop	{r4, r5, r6, r7, pc}
			softpwmbuffer[i] &= (uint32_t) ~(pin);
 8001164:	4666      	mov	r6, ip
 8001166:	4033      	ands	r3, r6
			softpwmbuffer[i] |= (uint32_t) pin << 16;
 8001168:	432b      	orrs	r3, r5
 800116a:	e7f4      	b.n	8001156 <setSoftPWM+0x16>

0800116c <setDMApwmDuty>:
uint8_t setDMApwmDuty(GPIO_TypeDef *port, uint16_t pin, uint16_t duty) {
 800116c:	0003      	movs	r3, r0
 800116e:	0008      	movs	r0, r1
 8001170:	0011      	movs	r1, r2
	if (port == GPIOA) {
 8001172:	2290      	movs	r2, #144	@ 0x90
uint8_t setDMApwmDuty(GPIO_TypeDef *port, uint16_t pin, uint16_t duty) {
 8001174:	b510      	push	{r4, lr}
	if (port == GPIOA) {
 8001176:	05d2      	lsls	r2, r2, #23
 8001178:	4293      	cmp	r3, r2
 800117a:	d105      	bne.n	8001188 <setDMApwmDuty+0x1c>
		setSoftPWM(pin, duty, (uint32_t*) &dataA);
 800117c:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <setDMApwmDuty+0x28>)
		setSoftPWM(pin, duty, (uint32_t*) &dataB);
 800117e:	f7ff ffdf 	bl	8001140 <setSoftPWM>
		r = 1;
 8001182:	2201      	movs	r2, #1
}
 8001184:	0010      	movs	r0, r2
 8001186:	bd10      	pop	{r4, pc}
	if (port == GPIOB) {
 8001188:	4c03      	ldr	r4, [pc, #12]	@ (8001198 <setDMApwmDuty+0x2c>)
 800118a:	2200      	movs	r2, #0
 800118c:	42a3      	cmp	r3, r4
 800118e:	d1f9      	bne.n	8001184 <setDMApwmDuty+0x18>
		setSoftPWM(pin, duty, (uint32_t*) &dataB);
 8001190:	4a02      	ldr	r2, [pc, #8]	@ (800119c <setDMApwmDuty+0x30>)
 8001192:	e7f4      	b.n	800117e <setDMApwmDuty+0x12>
 8001194:	200011bc 	.word	0x200011bc
 8001198:	48000400 	.word	0x48000400
 800119c:	2000021c 	.word	0x2000021c

080011a0 <zeroSoftPWM>:

void zeroSoftPWM(uint32_t softpwmbuffer[]) {
	for (uint32_t i = 0; i < PWM_STEPS; ++i) {
		softpwmbuffer[i] = 0;
 80011a0:	22fa      	movs	r2, #250	@ 0xfa
void zeroSoftPWM(uint32_t softpwmbuffer[]) {
 80011a2:	b510      	push	{r4, lr}
		softpwmbuffer[i] = 0;
 80011a4:	2100      	movs	r1, #0
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	f006 fa56 	bl	8007658 <memset>
	}
}
 80011ac:	bd10      	pop	{r4, pc}
	...

080011b0 <initDMApwm>:
void initDMApwm() {
 80011b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	htim1.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80011b2:	232f      	movs	r3, #47	@ 0x2f
	HAL_DMA_Start(&hdma_tim1_ch3_up, (uint32_t) &(dataA[0]), (uint32_t) &(GPIOA->BSRR), sizeof(dataA) / sizeof(dataA[0]));
 80011b4:	25fa      	movs	r5, #250	@ 0xfa
	htim3.Init.Period = TIMER_FREQ - 1;
 80011b6:	4f17      	ldr	r7, [pc, #92]	@ (8001214 <initDMApwm+0x64>)
	htim1.Init.Period = TIMER_FREQ - 1;
 80011b8:	4c17      	ldr	r4, [pc, #92]	@ (8001218 <initDMApwm+0x68>)
 80011ba:	4a18      	ldr	r2, [pc, #96]	@ (800121c <initDMApwm+0x6c>)
	htim1.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80011bc:	6821      	ldr	r1, [r4, #0]
	htim3.Init.Period = TIMER_FREQ - 1;
 80011be:	60fa      	str	r2, [r7, #12]
	htim1.Init.Period = TIMER_FREQ - 1;
 80011c0:	60e2      	str	r2, [r4, #12]
	htim3.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80011c2:	683a      	ldr	r2, [r7, #0]
	htim1.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80011c4:	62cb      	str	r3, [r1, #44]	@ 0x2c
	HAL_TIM_Base_Start(&htim1);
 80011c6:	0020      	movs	r0, r4
	htim3.Instance->ARR = (TIMER_FREQ / (PWM_STEPS * PWM_FREQ)) - 1;
 80011c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
	HAL_TIM_Base_Start(&htim1);
 80011ca:	f004 f95f 	bl	800548c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 80011ce:	0038      	movs	r0, r7
 80011d0:	f004 f95c 	bl	800548c <HAL_TIM_Base_Start>
	HAL_DMA_Start(&hdma_tim1_ch3_up, (uint32_t) &(dataA[0]), (uint32_t) &(GPIOA->BSRR), sizeof(dataA) / sizeof(dataA[0]));
 80011d4:	4e12      	ldr	r6, [pc, #72]	@ (8001220 <initDMApwm+0x70>)
 80011d6:	00ad      	lsls	r5, r5, #2
 80011d8:	0031      	movs	r1, r6
 80011da:	002b      	movs	r3, r5
 80011dc:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <initDMApwm+0x74>)
 80011de:	4812      	ldr	r0, [pc, #72]	@ (8001228 <initDMApwm+0x78>)
 80011e0:	f002 f9d8 	bl	8003594 <HAL_DMA_Start>
	HAL_DMA_Start(&hdma_tim3_ch4_up, (uint32_t) &(dataB[0]), (uint32_t) &(GPIOB->BSRR), sizeof(dataB) / sizeof(dataB[0]));
 80011e4:	4911      	ldr	r1, [pc, #68]	@ (800122c <initDMApwm+0x7c>)
 80011e6:	002b      	movs	r3, r5
 80011e8:	4a11      	ldr	r2, [pc, #68]	@ (8001230 <initDMApwm+0x80>)
 80011ea:	4812      	ldr	r0, [pc, #72]	@ (8001234 <initDMApwm+0x84>)
 80011ec:	000d      	movs	r5, r1
 80011ee:	f002 f9d1 	bl	8003594 <HAL_DMA_Start>
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	6821      	ldr	r1, [r4, #0]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	68ca      	ldr	r2, [r1, #12]
	zeroSoftPWM(dataA);
 80011fa:	0030      	movs	r0, r6
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 80011fc:	431a      	orrs	r2, r3
 80011fe:	60ca      	str	r2, [r1, #12]
	__HAL_TIM_ENABLE_DMA(&htim3, TIM_DMA_UPDATE);
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	68d1      	ldr	r1, [r2, #12]
 8001204:	430b      	orrs	r3, r1
 8001206:	60d3      	str	r3, [r2, #12]
	zeroSoftPWM(dataA);
 8001208:	f7ff ffca 	bl	80011a0 <zeroSoftPWM>
	zeroSoftPWM(dataB);
 800120c:	0028      	movs	r0, r5
 800120e:	f7ff ffc7 	bl	80011a0 <zeroSoftPWM>
}
 8001212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001214:	200022e8 	.word	0x200022e8
 8001218:	20002330 	.word	0x20002330
 800121c:	02dc6bff 	.word	0x02dc6bff
 8001220:	200011bc 	.word	0x200011bc
 8001224:	48000018 	.word	0x48000018
 8001228:	200021cc 	.word	0x200021cc
 800122c:	2000021c 	.word	0x2000021c
 8001230:	48000418 	.word	0x48000418
 8001234:	20002188 	.word	0x20002188

08001238 <getBattVoltage>:
	if (vbat >= MIN_1S_VOLTAGE && vbat <= MAX_1S_VOLTAGE) return 1;	// add (or subtracted) 200 to have some margin
	if (vbat >= MIN_2S_VOLTAGE && vbat <= MAX_2S_VOLTAGE) return 2;	// add (or subtracted) 200 to have some margin
	return 0;
}

uint16_t getBattVoltage() {
 8001238:	b510      	push	{r4, lr}
	const uint32_t vref = 3300000;		// 3.3V in uV to make the result an integer
	const uint32_t adcRes = 4096;		// 12 bit resolution
	const uint32_t dividerRatio = 3;	// voltage divider in the circuit is 1/3
	uint32_t adc = DMAadcGetch(BATTERY_CHANNEL);
 800123a:	2000      	movs	r0, #0
 800123c:	f7ff ff66 	bl	800110c <DMAadcGetch>
	uint32_t vbat = ((vref / adcRes) * adc * dividerRatio) / 1000;	// /1000 to have the value in mV
 8001240:	21fa      	movs	r1, #250	@ 0xfa
 8001242:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <getBattVoltage+0x1c>)
 8001244:	0089      	lsls	r1, r1, #2
 8001246:	4358      	muls	r0, r3
 8001248:	f7fe ff8e 	bl	8000168 <__udivsi3>
	return vbat + COMPENSATION_VALUE;
 800124c:	3064      	adds	r0, #100	@ 0x64
 800124e:	b280      	uxth	r0, r0
}
 8001250:	bd10      	pop	{r4, pc}
 8001252:	46c0      	nop			@ (mov r8, r8)
 8001254:	0000096f 	.word	0x0000096f

08001258 <getBatteryConfiguration>:
uint8_t getBatteryConfiguration() {
 8001258:	b510      	push	{r4, lr}
	uint16_t vbat = getBattVoltage();
 800125a:	f7ff ffed 	bl	8001238 <getBattVoltage>
	if (vbat >= MIN_1S_VOLTAGE && vbat <= MAX_1S_VOLTAGE) return 1;	// add (or subtracted) 200 to have some margin
 800125e:	21af      	movs	r1, #175	@ 0xaf
 8001260:	4a08      	ldr	r2, [pc, #32]	@ (8001284 <getBatteryConfiguration+0x2c>)
	uint16_t vbat = getBattVoltage();
 8001262:	0003      	movs	r3, r0
	if (vbat >= MIN_1S_VOLTAGE && vbat <= MAX_1S_VOLTAGE) return 1;	// add (or subtracted) 200 to have some margin
 8001264:	1882      	adds	r2, r0, r2
 8001266:	b292      	uxth	r2, r2
 8001268:	2001      	movs	r0, #1
 800126a:	00c9      	lsls	r1, r1, #3
 800126c:	428a      	cmp	r2, r1
 800126e:	d908      	bls.n	8001282 <getBatteryConfiguration+0x2a>
	if (vbat >= MIN_2S_VOLTAGE && vbat <= MAX_2S_VOLTAGE) return 2;	// add (or subtracted) 200 to have some margin
 8001270:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <getBatteryConfiguration+0x30>)
 8001272:	2000      	movs	r0, #0
 8001274:	189b      	adds	r3, r3, r2
 8001276:	22af      	movs	r2, #175	@ 0xaf
 8001278:	b29b      	uxth	r3, r3
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	429a      	cmp	r2, r3
 800127e:	4140      	adcs	r0, r0
 8001280:	0040      	lsls	r0, r0, #1
}
 8001282:	bd10      	pop	{r4, pc}
 8001284:	fffff510 	.word	0xfffff510
 8001288:	ffffea20 	.word	0xffffea20

0800128c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800128c:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800128e:	2510      	movs	r5, #16
void SystemClock_Config(void) {
 8001290:	b097      	sub	sp, #92	@ 0x5c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001292:	2228      	movs	r2, #40	@ 0x28
 8001294:	2100      	movs	r1, #0
 8001296:	a80c      	add	r0, sp, #48	@ 0x30
 8001298:	f006 f9de 	bl	8007658 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800129c:	002a      	movs	r2, r5
 800129e:	2100      	movs	r1, #0
 80012a0:	a801      	add	r0, sp, #4
 80012a2:	f006 f9d9 	bl	8007658 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80012a6:	2214      	movs	r2, #20
 80012a8:	2100      	movs	r1, #0
 80012aa:	a805      	add	r0, sp, #20
 80012ac:	f006 f9d4 	bl	8007658 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80012b0:	2313      	movs	r3, #19
 80012b2:	930a      	str	r3, [sp, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	025b      	lsls	r3, r3, #9
 80012b8:	9313      	str	r3, [sp, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80012ba:	2380      	movs	r3, #128	@ 0x80
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012bc:	2401      	movs	r4, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012be:	950e      	str	r5, [sp, #56]	@ 0x38
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80012c0:	9510      	str	r5, [sp, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80012c2:	035b      	lsls	r3, r3, #13
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c4:	3d0e      	subs	r5, #14
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012c6:	a80a      	add	r0, sp, #40	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c8:	940b      	str	r4, [sp, #44]	@ 0x2c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ca:	940d      	str	r4, [sp, #52]	@ 0x34
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80012cc:	940f      	str	r4, [sp, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ce:	9512      	str	r5, [sp, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80012d0:	9314      	str	r3, [sp, #80]	@ 0x50
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012d2:	f003 fce9 	bl	8004ca8 <HAL_RCC_OscConfig>
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x52>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012da:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012dc:	e7fe      	b.n	80012dc <SystemClock_Config+0x50>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012de:	2307      	movs	r3, #7
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e0:	9003      	str	r0, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e2:	9004      	str	r0, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80012e4:	0021      	movs	r1, r4
 80012e6:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80012e8:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	9502      	str	r5, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80012ec:	f003 ff04 	bl	80050f8 <HAL_RCC_ClockConfig>
 80012f0:	2800      	cmp	r0, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x6c>
 80012f4:	b672      	cpsid	i
	while (1) {
 80012f6:	e7fe      	b.n	80012f6 <SystemClock_Config+0x6a>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_I2C1;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <SystemClock_Config+0x88>)
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80012fa:	9008      	str	r0, [sp, #32]
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB | RCC_PERIPHCLK_I2C1;
 80012fc:	9305      	str	r3, [sp, #20]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80012fe:	2380      	movs	r3, #128	@ 0x80
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001300:	a805      	add	r0, sp, #20
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001302:	9309      	str	r3, [sp, #36]	@ 0x24
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001304:	f003 ff7c 	bl	8005200 <HAL_RCCEx_PeriphCLKConfig>
 8001308:	2800      	cmp	r0, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x84>
 800130c:	b672      	cpsid	i
	while (1) {
 800130e:	e7fe      	b.n	800130e <SystemClock_Config+0x82>
}
 8001310:	b017      	add	sp, #92	@ 0x5c
 8001312:	bd30      	pop	{r4, r5, pc}
 8001314:	00020020 	.word	0x00020020

08001318 <main>:
int main(void) {
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	b09b      	sub	sp, #108	@ 0x6c
	HAL_Init();
 800131c:	f001 fe2e 	bl	8002f7c <HAL_Init>
	SystemClock_Config();
 8001320:	f7ff ffb4 	bl	800128c <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001324:	2214      	movs	r2, #20
 8001326:	2100      	movs	r1, #0
 8001328:	a812      	add	r0, sp, #72	@ 0x48
 800132a:	f006 f995 	bl	8007658 <memset>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2280      	movs	r2, #128	@ 0x80
 8001330:	4dd7      	ldr	r5, [pc, #860]	@ (8001690 <main+0x378>)
 8001332:	0312      	lsls	r2, r2, #12
 8001334:	696b      	ldr	r3, [r5, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 8001336:	2480      	movs	r4, #128	@ 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001338:	4313      	orrs	r3, r2
 800133a:	616b      	str	r3, [r5, #20]
 800133c:	696b      	ldr	r3, [r5, #20]
	HAL_GPIO_WritePin(GPIOB,
 800133e:	27fc      	movs	r7, #252	@ 0xfc
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	4013      	ands	r3, r2
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001342:	2280      	movs	r2, #128	@ 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001344:	9307      	str	r3, [sp, #28]
 8001346:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001348:	696b      	ldr	r3, [r5, #20]
 800134a:	03d2      	lsls	r2, r2, #15
 800134c:	4313      	orrs	r3, r2
 800134e:	616b      	str	r3, [r5, #20]
 8001350:	696b      	ldr	r3, [r5, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 8001352:	0224      	lsls	r4, r4, #8
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001354:	4013      	ands	r3, r2
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2280      	movs	r2, #128	@ 0x80
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001358:	9308      	str	r3, [sp, #32]
 800135a:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	696b      	ldr	r3, [r5, #20]
 800135e:	0292      	lsls	r2, r2, #10
 8001360:	4313      	orrs	r3, r2
 8001362:	616b      	str	r3, [r5, #20]
 8001364:	696b      	ldr	r3, [r5, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 8001366:	0021      	movs	r1, r4
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	4013      	ands	r3, r2
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2280      	movs	r2, #128	@ 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	9309      	str	r3, [sp, #36]	@ 0x24
 800136e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	696b      	ldr	r3, [r5, #20]
 8001372:	02d2      	lsls	r2, r2, #11
 8001374:	4313      	orrs	r3, r2
 8001376:	616b      	str	r3, [r5, #20]
 8001378:	696b      	ldr	r3, [r5, #20]
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 800137a:	48c6      	ldr	r0, [pc, #792]	@ (8001694 <main+0x37c>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4013      	ands	r3, r2
 800137e:	930a      	str	r3, [sp, #40]	@ 0x28
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
	HAL_GPIO_WritePin(GPIOB,
 8001382:	023f      	lsls	r7, r7, #8
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
	HAL_GPIO_WritePin(U_LED_GPIO_Port, U_LED_Pin, GPIO_PIN_RESET);
 8001386:	f002 fa77 	bl	8003878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,
 800138a:	2200      	movs	r2, #0
 800138c:	0039      	movs	r1, r7
 800138e:	48c2      	ldr	r0, [pc, #776]	@ (8001698 <main+0x380>)
 8001390:	f002 fa72 	bl	8003878 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, PWM_M1_F_Pin | PWM_M2_F_Pin | PWM_M3_F_Pin,
 8001394:	21e0      	movs	r1, #224	@ 0xe0
 8001396:	2090      	movs	r0, #144	@ 0x90
 8001398:	2200      	movs	r2, #0
 800139a:	00c9      	lsls	r1, r1, #3
 800139c:	05c0      	lsls	r0, r0, #23
 800139e:	f002 fa6b 	bl	8003878 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2601      	movs	r6, #1
	GPIO_InitStruct.Pin = U_LED_Pin;
 80013a4:	9412      	str	r4, [sp, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2400      	movs	r4, #0
	HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 80013a8:	48ba      	ldr	r0, [pc, #744]	@ (8001694 <main+0x37c>)
 80013aa:	a912      	add	r1, sp, #72	@ 0x48
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	9613      	str	r6, [sp, #76]	@ 0x4c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	9414      	str	r4, [sp, #80]	@ 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	9415      	str	r4, [sp, #84]	@ 0x54
	HAL_GPIO_Init(U_LED_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f002 f9a3 	bl	80036fc <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013b6:	23c4      	movs	r3, #196	@ 0xc4
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 80013b8:	48b7      	ldr	r0, [pc, #732]	@ (8001698 <main+0x380>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013ba:	039b      	lsls	r3, r3, #14
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 80013bc:	a912      	add	r1, sp, #72	@ 0x48
	GPIO_InitStruct.Pin = CH1_Pin;
 80013be:	9612      	str	r6, [sp, #72]	@ 0x48
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013c0:	9313      	str	r3, [sp, #76]	@ 0x4c
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c2:	9614      	str	r6, [sp, #80]	@ 0x50
	HAL_GPIO_Init(CH1_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f002 f99a 	bl	80036fc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CH2_Pin | CH3_Pin | CH4_Pin;
 80013c8:	230e      	movs	r3, #14
 80013ca:	9312      	str	r3, [sp, #72]	@ 0x48
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013cc:	2384      	movs	r3, #132	@ 0x84
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	48b2      	ldr	r0, [pc, #712]	@ (8001698 <main+0x380>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d0:	039b      	lsls	r3, r3, #14
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	a912      	add	r1, sp, #72	@ 0x48
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d4:	9313      	str	r3, [sp, #76]	@ 0x4c
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	9614      	str	r6, [sp, #80]	@ 0x50
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f002 f990 	bl	80036fc <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	48ae      	ldr	r0, [pc, #696]	@ (8001698 <main+0x380>)
 80013de:	a912      	add	r1, sp, #72	@ 0x48
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	9613      	str	r6, [sp, #76]	@ 0x4c
	GPIO_InitStruct.Pin = SLEEPN_M3_Pin | PWM_M3_B_Pin | SLEEPN_M2_Pin
 80013e2:	9712      	str	r7, [sp, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	9414      	str	r4, [sp, #80]	@ 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	9415      	str	r4, [sp, #84]	@ 0x54
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f002 f988 	bl	80036fc <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = PWM_M1_F_Pin | PWM_M2_F_Pin | PWM_M3_F_Pin;
 80013ec:	23e0      	movs	r3, #224	@ 0xe0
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	2090      	movs	r0, #144	@ 0x90
	GPIO_InitStruct.Pin = PWM_M1_F_Pin | PWM_M2_F_Pin | PWM_M3_F_Pin;
 80013f0:	00db      	lsls	r3, r3, #3
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	a912      	add	r1, sp, #72	@ 0x48
 80013f4:	05c0      	lsls	r0, r0, #23
	GPIO_InitStruct.Pin = PWM_M1_F_Pin | PWM_M2_F_Pin | PWM_M3_F_Pin;
 80013f6:	9312      	str	r3, [sp, #72]	@ 0x48
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	9613      	str	r6, [sp, #76]	@ 0x4c
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	9414      	str	r4, [sp, #80]	@ 0x50
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	9415      	str	r4, [sp, #84]	@ 0x54
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f002 f97d 	bl	80036fc <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001402:	0022      	movs	r2, r4
 8001404:	0021      	movs	r1, r4
 8001406:	2005      	movs	r0, #5
 8001408:	f002 f842 	bl	8003490 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800140c:	2005      	movs	r0, #5
 800140e:	f002 f869 	bl	80034e4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001412:	0022      	movs	r2, r4
 8001414:	0021      	movs	r1, r4
 8001416:	2006      	movs	r0, #6
 8001418:	f002 f83a 	bl	8003490 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800141c:	2006      	movs	r0, #6
 800141e:	f002 f861 	bl	80034e4 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001422:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001424:	0022      	movs	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001426:	4333      	orrs	r3, r6
 8001428:	616b      	str	r3, [r5, #20]
 800142a:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800142c:	0021      	movs	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800142e:	4033      	ands	r3, r6
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001430:	2009      	movs	r0, #9
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001432:	9306      	str	r3, [sp, #24]
 8001434:	9b06      	ldr	r3, [sp, #24]
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001436:	f002 f82b 	bl	8003490 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800143a:	2009      	movs	r0, #9
 800143c:	f002 f852 	bl	80034e4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001440:	0022      	movs	r2, r4
 8001442:	0021      	movs	r1, r4
 8001444:	200a      	movs	r0, #10
 8001446:	f002 f823 	bl	8003490 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800144a:	200a      	movs	r0, #10
 800144c:	f002 f84a 	bl	80034e4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001450:	0022      	movs	r2, r4
 8001452:	0021      	movs	r1, r4
 8001454:	200b      	movs	r0, #11
 8001456:	f002 f81b 	bl	8003490 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800145a:	200b      	movs	r0, #11
 800145c:	f002 f842 	bl	80034e4 <HAL_NVIC_EnableIRQ>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001460:	221c      	movs	r2, #28
 8001462:	0021      	movs	r1, r4
 8001464:	a80b      	add	r0, sp, #44	@ 0x2c
 8001466:	f006 f8f7 	bl	8007658 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800146a:	2220      	movs	r2, #32
 800146c:	0021      	movs	r1, r4
 800146e:	a812      	add	r0, sp, #72	@ 0x48
 8001470:	f006 f8f2 	bl	8007658 <memset>
	htim16.Instance = TIM16;
 8001474:	4d89      	ldr	r5, [pc, #548]	@ (800169c <main+0x384>)
 8001476:	4b8a      	ldr	r3, [pc, #552]	@ (80016a0 <main+0x388>)
	htim16.Init.Period = 10000 - 1;
 8001478:	4e8a      	ldr	r6, [pc, #552]	@ (80016a4 <main+0x38c>)
	htim16.Instance = TIM16;
 800147a:	602b      	str	r3, [r5, #0]
	htim16.Init.Prescaler = 24 - 1;
 800147c:	2317      	movs	r3, #23
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 800147e:	0028      	movs	r0, r5
	htim16.Init.Prescaler = 24 - 1;
 8001480:	606b      	str	r3, [r5, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001482:	60ac      	str	r4, [r5, #8]
	htim16.Init.Period = 10000 - 1;
 8001484:	60ee      	str	r6, [r5, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	612c      	str	r4, [r5, #16]
	htim16.Init.RepetitionCounter = 0;
 8001488:	616c      	str	r4, [r5, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 800148c:	f004 f874 	bl	8005578 <HAL_TIM_Base_Init>
 8001490:	42a0      	cmp	r0, r4
 8001492:	d001      	beq.n	8001498 <main+0x180>
 8001494:	b672      	cpsid	i
	while (1) {
 8001496:	e7fe      	b.n	8001496 <main+0x17e>
	if (HAL_TIM_PWM_Init(&htim16) != HAL_OK) {
 8001498:	0028      	movs	r0, r5
 800149a:	f004 f895 	bl	80055c8 <HAL_TIM_PWM_Init>
 800149e:	1e02      	subs	r2, r0, #0
 80014a0:	d001      	beq.n	80014a6 <main+0x18e>
 80014a2:	b672      	cpsid	i
	while (1) {
 80014a4:	e7fe      	b.n	80014a4 <main+0x18c>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a6:	2360      	movs	r3, #96	@ 0x60
	sConfigOC.Pulse = 0;
 80014a8:	900c      	str	r0, [sp, #48]	@ 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014aa:	900d      	str	r0, [sp, #52]	@ 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ac:	900e      	str	r0, [sp, #56]	@ 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ae:	900f      	str	r0, [sp, #60]	@ 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014b0:	9010      	str	r0, [sp, #64]	@ 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014b2:	9011      	str	r0, [sp, #68]	@ 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1)
 80014b4:	a90b      	add	r1, sp, #44	@ 0x2c
 80014b6:	0028      	movs	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b8:	930b      	str	r3, [sp, #44]	@ 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1)
 80014ba:	f004 f8ed 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d001      	beq.n	80014c6 <main+0x1ae>
 80014c2:	b672      	cpsid	i
	while (1) {
 80014c4:	e7fe      	b.n	80014c4 <main+0x1ac>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c6:	2380      	movs	r3, #128	@ 0x80
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014c8:	9012      	str	r0, [sp, #72]	@ 0x48
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ca:	9013      	str	r0, [sp, #76]	@ 0x4c
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014cc:	9014      	str	r0, [sp, #80]	@ 0x50
	sBreakDeadTimeConfig.DeadTime = 0;
 80014ce:	9015      	str	r0, [sp, #84]	@ 0x54
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014d0:	9016      	str	r0, [sp, #88]	@ 0x58
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014d2:	019b      	lsls	r3, r3, #6
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014d4:	9019      	str	r0, [sp, #100]	@ 0x64
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig)
 80014d6:	a912      	add	r1, sp, #72	@ 0x48
 80014d8:	0028      	movs	r0, r5
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014da:	9317      	str	r3, [sp, #92]	@ 0x5c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig)
 80014dc:	f004 fa94 	bl	8005a08 <HAL_TIMEx_ConfigBreakDeadTime>
 80014e0:	1e04      	subs	r4, r0, #0
 80014e2:	d001      	beq.n	80014e8 <main+0x1d0>
 80014e4:	b672      	cpsid	i
	while (1) {
 80014e6:	e7fe      	b.n	80014e6 <main+0x1ce>
	HAL_TIM_MspPostInit(&htim16);
 80014e8:	0028      	movs	r0, r5
 80014ea:	f001 fc2f 	bl	8002d4c <HAL_TIM_MspPostInit>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80014ee:	221c      	movs	r2, #28
 80014f0:	0021      	movs	r1, r4
 80014f2:	a80b      	add	r0, sp, #44	@ 0x2c
 80014f4:	f006 f8b0 	bl	8007658 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80014f8:	2220      	movs	r2, #32
 80014fa:	0021      	movs	r1, r4
 80014fc:	a812      	add	r0, sp, #72	@ 0x48
 80014fe:	f006 f8ab 	bl	8007658 <memset>
	htim17.Instance = TIM17;
 8001502:	4f69      	ldr	r7, [pc, #420]	@ (80016a8 <main+0x390>)
 8001504:	4b69      	ldr	r3, [pc, #420]	@ (80016ac <main+0x394>)
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8001506:	0038      	movs	r0, r7
	htim17.Instance = TIM17;
 8001508:	603b      	str	r3, [r7, #0]
	htim17.Init.Prescaler = 24 - 1;
 800150a:	2317      	movs	r3, #23
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	60bc      	str	r4, [r7, #8]
	htim17.Init.Prescaler = 24 - 1;
 800150e:	607b      	str	r3, [r7, #4]
	htim17.Init.Period = 10000 - 1;
 8001510:	60fe      	str	r6, [r7, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001512:	613c      	str	r4, [r7, #16]
	htim17.Init.RepetitionCounter = 0;
 8001514:	617c      	str	r4, [r7, #20]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	61bc      	str	r4, [r7, #24]
	if (HAL_TIM_Base_Init(&htim17) != HAL_OK) {
 8001518:	f004 f82e 	bl	8005578 <HAL_TIM_Base_Init>
 800151c:	2800      	cmp	r0, #0
 800151e:	d001      	beq.n	8001524 <main+0x20c>
 8001520:	b672      	cpsid	i
	while (1) {
 8001522:	e7fe      	b.n	8001522 <main+0x20a>
	if (HAL_TIM_PWM_Init(&htim17) != HAL_OK) {
 8001524:	0038      	movs	r0, r7
 8001526:	f004 f84f 	bl	80055c8 <HAL_TIM_PWM_Init>
 800152a:	1e02      	subs	r2, r0, #0
 800152c:	d001      	beq.n	8001532 <main+0x21a>
 800152e:	b672      	cpsid	i
	while (1) {
 8001530:	e7fe      	b.n	8001530 <main+0x218>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001532:	2360      	movs	r3, #96	@ 0x60
	sConfigOC.Pulse = 0;
 8001534:	900c      	str	r0, [sp, #48]	@ 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001536:	900d      	str	r0, [sp, #52]	@ 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001538:	900e      	str	r0, [sp, #56]	@ 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153a:	900f      	str	r0, [sp, #60]	@ 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800153c:	9010      	str	r0, [sp, #64]	@ 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800153e:	9011      	str	r0, [sp, #68]	@ 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 8001540:	a90b      	add	r1, sp, #44	@ 0x2c
 8001542:	0038      	movs	r0, r7
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001544:	930b      	str	r3, [sp, #44]	@ 0x2c
	if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1)
 8001546:	f004 f8a7 	bl	8005698 <HAL_TIM_PWM_ConfigChannel>
 800154a:	2800      	cmp	r0, #0
 800154c:	d001      	beq.n	8001552 <main+0x23a>
 800154e:	b672      	cpsid	i
	while (1) {
 8001550:	e7fe      	b.n	8001550 <main+0x238>
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001552:	2380      	movs	r3, #128	@ 0x80
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001554:	9012      	str	r0, [sp, #72]	@ 0x48
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001556:	9013      	str	r0, [sp, #76]	@ 0x4c
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001558:	9014      	str	r0, [sp, #80]	@ 0x50
	sBreakDeadTimeConfig.DeadTime = 0;
 800155a:	9015      	str	r0, [sp, #84]	@ 0x54
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800155c:	9016      	str	r0, [sp, #88]	@ 0x58
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800155e:	019b      	lsls	r3, r3, #6
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001560:	9019      	str	r0, [sp, #100]	@ 0x64
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 8001562:	a912      	add	r1, sp, #72	@ 0x48
 8001564:	0038      	movs	r0, r7
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001566:	9317      	str	r3, [sp, #92]	@ 0x5c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig)
 8001568:	f004 fa4e 	bl	8005a08 <HAL_TIMEx_ConfigBreakDeadTime>
 800156c:	1e05      	subs	r5, r0, #0
 800156e:	d001      	beq.n	8001574 <main+0x25c>
 8001570:	b672      	cpsid	i
	while (1) {
 8001572:	e7fe      	b.n	8001572 <main+0x25a>
	HAL_TIM_MspPostInit(&htim17);
 8001574:	0038      	movs	r0, r7
 8001576:	f001 fbe9 	bl	8002d4c <HAL_TIM_MspPostInit>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800157a:	2210      	movs	r2, #16
 800157c:	0029      	movs	r1, r5
 800157e:	a812      	add	r0, sp, #72	@ 0x48
 8001580:	f006 f86a 	bl	8007658 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001584:	2208      	movs	r2, #8
 8001586:	0029      	movs	r1, r5
 8001588:	a80b      	add	r0, sp, #44	@ 0x2c
 800158a:	f006 f865 	bl	8007658 <memset>
	htim1.Instance = TIM1;
 800158e:	4c48      	ldr	r4, [pc, #288]	@ (80016b0 <main+0x398>)
 8001590:	4b48      	ldr	r3, [pc, #288]	@ (80016b4 <main+0x39c>)
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001592:	0020      	movs	r0, r4
	htim1.Instance = TIM1;
 8001594:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 100 - 1;
 8001596:	2363      	movs	r3, #99	@ 0x63
	htim1.Init.Prescaler = 0;
 8001598:	6065      	str	r5, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159a:	60a5      	str	r5, [r4, #8]
	htim1.Init.Period = 100 - 1;
 800159c:	60e3      	str	r3, [r4, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	6125      	str	r5, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 80015a0:	6165      	str	r5, [r4, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80015a4:	f003 ffe8 	bl	8005578 <HAL_TIM_Base_Init>
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d001      	beq.n	80015b0 <main+0x298>
 80015ac:	b672      	cpsid	i
	while (1) {
 80015ae:	e7fe      	b.n	80015ae <main+0x296>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	2380      	movs	r3, #128	@ 0x80
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80015b2:	0020      	movs	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b4:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80015b6:	a912      	add	r1, sp, #72	@ 0x48
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b8:	9312      	str	r3, [sp, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80015ba:	f004 f8d9 	bl	8005770 <HAL_TIM_ConfigClockSource>
 80015be:	2800      	cmp	r0, #0
 80015c0:	d001      	beq.n	80015c6 <main+0x2ae>
 80015c2:	b672      	cpsid	i
	while (1) {
 80015c4:	e7fe      	b.n	80015c4 <main+0x2ac>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015c6:	2320      	movs	r3, #32
 80015c8:	930b      	str	r3, [sp, #44]	@ 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80015cc:	0020      	movs	r0, r4
 80015ce:	a90b      	add	r1, sp, #44	@ 0x2c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	930c      	str	r3, [sp, #48]	@ 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80015d2:	f004 f9eb 	bl	80059ac <HAL_TIMEx_MasterConfigSynchronization>
 80015d6:	2800      	cmp	r0, #0
 80015d8:	d001      	beq.n	80015de <main+0x2c6>
 80015da:	b672      	cpsid	i
	while (1) {
 80015dc:	e7fe      	b.n	80015dc <main+0x2c4>
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015de:	2601      	movs	r6, #1
	hi2c1.Instance = I2C1;
 80015e0:	4c35      	ldr	r4, [pc, #212]	@ (80016b8 <main+0x3a0>)
 80015e2:	4b36      	ldr	r3, [pc, #216]	@ (80016bc <main+0x3a4>)
	hi2c1.Init.OwnAddress1 = 0;
 80015e4:	60a0      	str	r0, [r4, #8]
	hi2c1.Instance = I2C1;
 80015e6:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x00201D2B;
 80015e8:	4b35      	ldr	r3, [pc, #212]	@ (80016c0 <main+0x3a8>)
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ea:	6120      	str	r0, [r4, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80015ec:	6160      	str	r0, [r4, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015ee:	61a0      	str	r0, [r4, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f0:	61e0      	str	r0, [r4, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	6220      	str	r0, [r4, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80015f4:	0020      	movs	r0, r4
	hi2c1.Init.Timing = 0x00201D2B;
 80015f6:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f8:	60e6      	str	r6, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80015fa:	f002 fa89 	bl	8003b10 <HAL_I2C_Init>
 80015fe:	1e01      	subs	r1, r0, #0
 8001600:	d001      	beq.n	8001606 <main+0x2ee>
 8001602:	b672      	cpsid	i
	while (1) {
 8001604:	e7fe      	b.n	8001604 <main+0x2ec>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8001606:	0020      	movs	r0, r4
 8001608:	f002 fc98 	bl	8003f3c <HAL_I2CEx_ConfigAnalogFilter>
 800160c:	1e01      	subs	r1, r0, #0
 800160e:	d001      	beq.n	8001614 <main+0x2fc>
 8001610:	b672      	cpsid	i
	while (1) {
 8001612:	e7fe      	b.n	8001612 <main+0x2fa>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001614:	0020      	movs	r0, r4
 8001616:	f002 fcb7 	bl	8003f88 <HAL_I2CEx_ConfigDigitalFilter>
 800161a:	1e05      	subs	r5, r0, #0
 800161c:	d001      	beq.n	8001622 <main+0x30a>
 800161e:	b672      	cpsid	i
	while (1) {
 8001620:	e7fe      	b.n	8001620 <main+0x308>
	MX_USB_DEVICE_Init();
 8001622:	f005 fc21 	bl	8006e68 <MX_USB_DEVICE_Init>
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001626:	220c      	movs	r2, #12
 8001628:	0029      	movs	r1, r5
 800162a:	a812      	add	r0, sp, #72	@ 0x48
 800162c:	f006 f814 	bl	8007658 <memset>
	hadc.Instance = ADC1;
 8001630:	4c24      	ldr	r4, [pc, #144]	@ (80016c4 <main+0x3ac>)
 8001632:	4b25      	ldr	r3, [pc, #148]	@ (80016c8 <main+0x3b0>)
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8001634:	0020      	movs	r0, r4
	hadc.Instance = ADC1;
 8001636:	6023      	str	r3, [r4, #0]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001638:	2308      	movs	r3, #8
 800163a:	6163      	str	r3, [r4, #20]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163c:	23c2      	movs	r3, #194	@ 0xc2
 800163e:	33ff      	adds	r3, #255	@ 0xff
 8001640:	61e3      	str	r3, [r4, #28]
	hadc.Init.DMAContinuousRequests = ENABLE;
 8001642:	1d63      	adds	r3, r4, #5
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001644:	6065      	str	r5, [r4, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001646:	60a5      	str	r5, [r4, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001648:	60e5      	str	r5, [r4, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800164a:	6126      	str	r6, [r4, #16]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800164c:	61a5      	str	r5, [r4, #24]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800164e:	6225      	str	r5, [r4, #32]
	hadc.Init.DMAContinuousRequests = ENABLE;
 8001650:	77de      	strb	r6, [r3, #31]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001652:	62a6      	str	r6, [r4, #40]	@ 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8001654:	f001 fd16 	bl	8003084 <HAL_ADC_Init>
 8001658:	2800      	cmp	r0, #0
 800165a:	d001      	beq.n	8001660 <main+0x348>
 800165c:	b672      	cpsid	i
	while (1) {
 800165e:	e7fe      	b.n	800165e <main+0x346>
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	015b      	lsls	r3, r3, #5
 8001664:	9313      	str	r3, [sp, #76]	@ 0x4c
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001666:	2305      	movs	r3, #5
	sConfig.Channel = ADC_CHANNEL_0;
 8001668:	9012      	str	r0, [sp, #72]	@ 0x48
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800166a:	a912      	add	r1, sp, #72	@ 0x48
 800166c:	0020      	movs	r0, r4
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800166e:	9314      	str	r3, [sp, #80]	@ 0x50
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001670:	f001 fe40 	bl	80032f4 <HAL_ADC_ConfigChannel>
 8001674:	2800      	cmp	r0, #0
 8001676:	d001      	beq.n	800167c <main+0x364>
 8001678:	b672      	cpsid	i
	while (1) {
 800167a:	e7fe      	b.n	800167a <main+0x362>
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800167c:	0020      	movs	r0, r4
 800167e:	a912      	add	r1, sp, #72	@ 0x48
	sConfig.Channel = ADC_CHANNEL_1;
 8001680:	9612      	str	r6, [sp, #72]	@ 0x48
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8001682:	f001 fe37 	bl	80032f4 <HAL_ADC_ConfigChannel>
 8001686:	2800      	cmp	r0, #0
 8001688:	d020      	beq.n	80016cc <main+0x3b4>
 800168a:	b672      	cpsid	i
	while (1) {
 800168c:	e7fe      	b.n	800168c <main+0x374>
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	40021000 	.word	0x40021000
 8001694:	48000800 	.word	0x48000800
 8001698:	48000400 	.word	0x48000400
 800169c:	20002258 	.word	0x20002258
 80016a0:	40014400 	.word	0x40014400
 80016a4:	0000270f 	.word	0x0000270f
 80016a8:	20002210 	.word	0x20002210
 80016ac:	40014800 	.word	0x40014800
 80016b0:	20002330 	.word	0x20002330
 80016b4:	40012c00 	.word	0x40012c00
 80016b8:	20002378 	.word	0x20002378
 80016bc:	40005400 	.word	0x40005400
 80016c0:	00201d2b 	.word	0x00201d2b
 80016c4:	20002410 	.word	0x20002410
 80016c8:	40012400 	.word	0x40012400
	sConfig.Channel = ADC_CHANNEL_2;
 80016cc:	2302      	movs	r3, #2
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80016ce:	0020      	movs	r0, r4
 80016d0:	a912      	add	r1, sp, #72	@ 0x48
	sConfig.Channel = ADC_CHANNEL_2;
 80016d2:	9312      	str	r3, [sp, #72]	@ 0x48
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80016d4:	f001 fe0e 	bl	80032f4 <HAL_ADC_ConfigChannel>
 80016d8:	2800      	cmp	r0, #0
 80016da:	d001      	beq.n	80016e0 <main+0x3c8>
 80016dc:	b672      	cpsid	i
	while (1) {
 80016de:	e7fe      	b.n	80016de <main+0x3c6>
	htim6.Instance = TIM6;
 80016e0:	4dca      	ldr	r5, [pc, #808]	@ (8001a0c <main+0x6f4>)
 80016e2:	4bcb      	ldr	r3, [pc, #812]	@ (8001a10 <main+0x6f8>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	60a8      	str	r0, [r5, #8]
	htim6.Instance = TIM6;
 80016e6:	602b      	str	r3, [r5, #0]
	htim6.Init.Prescaler = 24 - 1;
 80016e8:	2317      	movs	r3, #23
 80016ea:	606b      	str	r3, [r5, #4]
	htim6.Init.Period = 65535;
 80016ec:	4bc9      	ldr	r3, [pc, #804]	@ (8001a14 <main+0x6fc>)
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	61a8      	str	r0, [r5, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80016f0:	0028      	movs	r0, r5
	htim6.Init.Period = 65535;
 80016f2:	60eb      	str	r3, [r5, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80016f4:	f003 ff40 	bl	8005578 <HAL_TIM_Base_Init>
 80016f8:	1e04      	subs	r4, r0, #0
 80016fa:	d001      	beq.n	8001700 <main+0x3e8>
 80016fc:	b672      	cpsid	i
	while (1) {
 80016fe:	e7fe      	b.n	80016fe <main+0x3e6>
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001700:	0001      	movs	r1, r0
 8001702:	2210      	movs	r2, #16
 8001704:	a812      	add	r0, sp, #72	@ 0x48
 8001706:	f005 ffa7 	bl	8007658 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800170a:	2208      	movs	r2, #8
 800170c:	0021      	movs	r1, r4
 800170e:	a80b      	add	r0, sp, #44	@ 0x2c
 8001710:	f005 ffa2 	bl	8007658 <memset>
	htim3.Instance = TIM3;
 8001714:	4ec0      	ldr	r6, [pc, #768]	@ (8001a18 <main+0x700>)
 8001716:	4bc1      	ldr	r3, [pc, #772]	@ (8001a1c <main+0x704>)
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001718:	0030      	movs	r0, r6
	htim3.Instance = TIM3;
 800171a:	6033      	str	r3, [r6, #0]
	htim3.Init.Period = 100 - 1;
 800171c:	2363      	movs	r3, #99	@ 0x63
	htim3.Init.Prescaler = 0;
 800171e:	6074      	str	r4, [r6, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	60b4      	str	r4, [r6, #8]
	htim3.Init.Period = 100 - 1;
 8001722:	60f3      	str	r3, [r6, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	6134      	str	r4, [r6, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001726:	61b4      	str	r4, [r6, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001728:	f003 ff26 	bl	8005578 <HAL_TIM_Base_Init>
 800172c:	2800      	cmp	r0, #0
 800172e:	d001      	beq.n	8001734 <main+0x41c>
 8001730:	b672      	cpsid	i
	while (1) {
 8001732:	e7fe      	b.n	8001732 <main+0x41a>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001734:	2380      	movs	r3, #128	@ 0x80
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001736:	0030      	movs	r0, r6
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	015b      	lsls	r3, r3, #5
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800173a:	a912      	add	r1, sp, #72	@ 0x48
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800173c:	9312      	str	r3, [sp, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800173e:	f004 f817 	bl	8005770 <HAL_TIM_ConfigClockSource>
 8001742:	2800      	cmp	r0, #0
 8001744:	d001      	beq.n	800174a <main+0x432>
 8001746:	b672      	cpsid	i
	while (1) {
 8001748:	e7fe      	b.n	8001748 <main+0x430>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800174a:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	900c      	str	r0, [sp, #48]	@ 0x30
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800174e:	a90b      	add	r1, sp, #44	@ 0x2c
 8001750:	0030      	movs	r0, r6
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001752:	930b      	str	r3, [sp, #44]	@ 0x2c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001754:	f004 f92a 	bl	80059ac <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	2800      	cmp	r0, #0
 800175a:	d001      	beq.n	8001760 <main+0x448>
 800175c:	b672      	cpsid	i
	while (1) {
 800175e:	e7fe      	b.n	800175e <main+0x446>
	initReciever(&htim6);
 8001760:	0028      	movs	r0, r5
 8001762:	f000 fbcb 	bl	8001efc <initReciever>
	initMotors();
 8001766:	f000 f9d5 	bl	8001b14 <initMotors>
	initDMAadc();
 800176a:	f7ff fcb1 	bl	80010d0 <initDMAadc>
	uint8_t isFirstWrite = read_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS);
 800176e:	2064      	movs	r0, #100	@ 0x64
 8001770:	f000 fd42 	bl	80021f8 <read_byte_eeprom>
	if (isFirstWrite) {	// if is the first time the value is 255 (value of the memory empty)
 8001774:	2800      	cmp	r0, #0
 8001776:	d05d      	beq.n	8001834 <main+0x51c>
			HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8001778:	2580      	movs	r5, #128	@ 0x80
 800177a:	240a      	movs	r4, #10
 800177c:	022d      	lsls	r5, r5, #8
 800177e:	0029      	movs	r1, r5
 8001780:	48a7      	ldr	r0, [pc, #668]	@ (8001a20 <main+0x708>)
 8001782:	f002 f87f 	bl	8003884 <HAL_GPIO_TogglePin>
		for (int i = 0; i < 10; i++) {
 8001786:	3c01      	subs	r4, #1
			HAL_Delay(100);
 8001788:	2064      	movs	r0, #100	@ 0x64
 800178a:	f001 fc19 	bl	8002fc0 <HAL_Delay>
		for (int i = 0; i < 10; i++) {
 800178e:	2c00      	cmp	r4, #0
 8001790:	d1f5      	bne.n	800177e <main+0x466>
		storeSettingsToEeprom();	// write the default settings
 8001792:	f000 fdf9 	bl	8002388 <storeSettingsToEeprom>
		write_byte_eeprom(EEPROM_ISFIRSTBOOT_ADDRESS, isFirstWrite);
 8001796:	0021      	movs	r1, r4
 8001798:	2064      	movs	r0, #100	@ 0x64
 800179a:	f000 fddd 	bl	8002358 <write_byte_eeprom>
	uint32_t timeLowBattery = 0;
 800179e:	2600      	movs	r6, #0
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 80017a0:	2580      	movs	r5, #128	@ 0x80
	disableMotor(M1);
 80017a2:	2000      	movs	r0, #0
 80017a4:	f000 fb1c 	bl	8001de0 <disableMotor>
	disableMotor(M2);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f000 fb19 	bl	8001de0 <disableMotor>
	disableMotor(M3);
 80017ae:	2002      	movs	r0, #2
 80017b0:	f000 fb16 	bl	8001de0 <disableMotor>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 80017b4:	022d      	lsls	r5, r5, #8
	uint32_t timeLimitBattery = 0;
 80017b6:	9602      	str	r6, [sp, #8]
	uint32_t time3 = 0;
 80017b8:	9604      	str	r6, [sp, #16]
	uint32_t time2 = 0;
 80017ba:	9603      	str	r6, [sp, #12]
	uint32_t time1 = 0;
 80017bc:	9601      	str	r6, [sp, #4]
		DMAadcUpdate();
 80017be:	f7ff fc99 	bl	80010f4 <DMAadcUpdate>
		if (!cutoff) {	// if the robot is not in cutoff
 80017c2:	4b98      	ldr	r3, [pc, #608]	@ (8001a24 <main+0x70c>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d000      	beq.n	80017cc <main+0x4b4>
 80017ca:	e161      	b.n	8001a90 <main+0x778>
			if (!noDisarm) {
 80017cc:	4b96      	ldr	r3, [pc, #600]	@ (8001a28 <main+0x710>)
 80017ce:	4c97      	ldr	r4, [pc, #604]	@ (8001a2c <main+0x714>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	9305      	str	r3, [sp, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <main+0x4cc>
				if (getChannelValuePercentage(armChannel) > 75)
 80017d8:	4b95      	ldr	r3, [pc, #596]	@ (8001a30 <main+0x718>)
 80017da:	7818      	ldrb	r0, [r3, #0]
 80017dc:	f000 fb6e 	bl	8001ebc <getChannelValuePercentage>
 80017e0:	284b      	cmp	r0, #75	@ 0x4b
 80017e2:	d92a      	bls.n	800183a <main+0x522>
					armed = TRUE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	7023      	strb	r3, [r4, #0]
				enableMotor(M1);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f000 fb11 	bl	8001e10 <enableMotor>
				enableMotor(M2);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 fb0e 	bl	8001e10 <enableMotor>
				enableMotor(M3);
 80017f4:	2002      	movs	r0, #2
 80017f6:	f000 fb0b 	bl	8001e10 <enableMotor>
				setServoIsEnable(TRUE, &htim17); // start servo 1 HV
 80017fa:	0039      	movs	r1, r7
 80017fc:	2001      	movs	r0, #1
 80017fe:	f000 fc9f 	bl	8002140 <setServoIsEnable>
				setServoIsEnable(TRUE, &htim16); // start servo 2
 8001802:	2001      	movs	r0, #1
 8001804:	498b      	ldr	r1, [pc, #556]	@ (8001a34 <main+0x71c>)
 8001806:	f000 fc9b 	bl	8002140 <setServoIsEnable>
				if (tankMixIsON) { // calculate and use the tank mix only if it's enabled
 800180a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a38 <main+0x720>)
 800180c:	781c      	ldrb	r4, [r3, #0]
 800180e:	2c00      	cmp	r4, #0
 8001810:	d132      	bne.n	8001878 <main+0x560>
							getChannelValuePercentage(thChannel));
 8001812:	4b8a      	ldr	r3, [pc, #552]	@ (8001a3c <main+0x724>)
 8001814:	7818      	ldrb	r0, [r3, #0]
 8001816:	f000 fb51 	bl	8001ebc <getChannelValuePercentage>
					setMotorSpeedBidirectional(M1,
 800181a:	b201      	sxth	r1, r0
 800181c:	0020      	movs	r0, r4
 800181e:	f000 fa9f 	bl	8001d60 <setMotorSpeedBidirectional>
							getChannelValuePercentage(stChannel));
 8001822:	4b87      	ldr	r3, [pc, #540]	@ (8001a40 <main+0x728>)
 8001824:	7818      	ldrb	r0, [r3, #0]
 8001826:	f000 fb49 	bl	8001ebc <getChannelValuePercentage>
					setMotorSpeedBidirectional(M2,
 800182a:	b201      	sxth	r1, r0
 800182c:	2001      	movs	r0, #1
 800182e:	f000 fa97 	bl	8001d60 <setMotorSpeedBidirectional>
 8001832:	e037      	b.n	80018a4 <main+0x58c>
		loadSettingsFromEeprom();	// load the settings from the eeprom memory
 8001834:	f000 fd8c 	bl	8002350 <loadSettingsFromEeprom>
 8001838:	e7b1      	b.n	800179e <main+0x486>
					armed = FALSE;
 800183a:	9b05      	ldr	r3, [sp, #20]
				makeSound(mLeft, 50);
 800183c:	2132      	movs	r1, #50	@ 0x32
					armed = FALSE;
 800183e:	7023      	strb	r3, [r4, #0]
				makeSound(mLeft, 50);
 8001840:	4b80      	ldr	r3, [pc, #512]	@ (8001a44 <main+0x72c>)
 8001842:	7818      	ldrb	r0, [r3, #0]
 8001844:	f000 fafc 	bl	8001e40 <makeSound>
				HAL_Delay(50);
 8001848:	2032      	movs	r0, #50	@ 0x32
 800184a:	f001 fbb9 	bl	8002fc0 <HAL_Delay>
			if (armed) {	// if armed do...
 800184e:	7824      	ldrb	r4, [r4, #0]
 8001850:	2c00      	cmp	r4, #0
 8001852:	d1c9      	bne.n	80017e8 <main+0x4d0>
				disableMotor(M1);
 8001854:	0020      	movs	r0, r4
 8001856:	f000 fac3 	bl	8001de0 <disableMotor>
				disableMotor(M2);
 800185a:	2001      	movs	r0, #1
 800185c:	f000 fac0 	bl	8001de0 <disableMotor>
				disableMotor(M3);
 8001860:	2002      	movs	r0, #2
 8001862:	f000 fabd 	bl	8001de0 <disableMotor>
				setServoIsEnable(FALSE, &htim17); // stop servo 1 HV
 8001866:	0039      	movs	r1, r7
 8001868:	0020      	movs	r0, r4
 800186a:	f000 fc69 	bl	8002140 <setServoIsEnable>
				setServoIsEnable(FALSE, &htim16); // stop servo 2
 800186e:	0020      	movs	r0, r4
 8001870:	4970      	ldr	r1, [pc, #448]	@ (8001a34 <main+0x71c>)
 8001872:	f000 fc65 	bl	8002140 <setServoIsEnable>
 8001876:	e038      	b.n	80018ea <main+0x5d2>
					tank = tankMix(getChannelValuePercentage(stChannel),
 8001878:	4b71      	ldr	r3, [pc, #452]	@ (8001a40 <main+0x728>)
 800187a:	7818      	ldrb	r0, [r3, #0]
 800187c:	f000 fb1e 	bl	8001ebc <getChannelValuePercentage>
 8001880:	4b6e      	ldr	r3, [pc, #440]	@ (8001a3c <main+0x724>)
 8001882:	0004      	movs	r4, r0
 8001884:	7818      	ldrb	r0, [r3, #0]
 8001886:	f000 fb19 	bl	8001ebc <getChannelValuePercentage>
 800188a:	0001      	movs	r1, r0
 800188c:	0020      	movs	r0, r4
 800188e:	f000 fbe1 	bl	8002054 <tankMix>
 8001892:	4b6d      	ldr	r3, [pc, #436]	@ (8001a48 <main+0x730>)
 8001894:	0c02      	lsrs	r2, r0, #16
 8001896:	8018      	strh	r0, [r3, #0]
 8001898:	805a      	strh	r2, [r3, #2]
					setTankMotor(tank);
 800189a:	b283      	uxth	r3, r0
 800189c:	0410      	lsls	r0, r2, #16
 800189e:	4318      	orrs	r0, r3
 80018a0:	f000 fa8a 	bl	8001db8 <setTankMotor>
					motSeekPot(mWeapon, reciever_channels[wpChannel], 1);
 80018a4:	4a69      	ldr	r2, [pc, #420]	@ (8001a4c <main+0x734>)
 80018a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a50 <main+0x738>)
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	0052      	lsls	r2, r2, #1
 80018ac:	5ad1      	ldrh	r1, [r2, r3]
 80018ae:	4b69      	ldr	r3, [pc, #420]	@ (8001a54 <main+0x73c>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	7818      	ldrb	r0, [r3, #0]
 80018b4:	f000 f996 	bl	8001be4 <motSeekPot>
				if (limit == TRUE) { // !!ASUME THAT S1 IS CONNECTED TO THE WEAPON ESC
 80018b8:	4c67      	ldr	r4, [pc, #412]	@ (8001a58 <main+0x740>)
 80018ba:	4b68      	ldr	r3, [pc, #416]	@ (8001a5c <main+0x744>)
 80018bc:	7822      	ldrb	r2, [r4, #0]
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 80018be:	7818      	ldrb	r0, [r3, #0]
				if (limit == TRUE) { // !!ASUME THAT S1 IS CONNECTED TO THE WEAPON ESC
 80018c0:	2a01      	cmp	r2, #1
 80018c2:	d000      	beq.n	80018c6 <main+0x5ae>
 80018c4:	e09e      	b.n	8001a04 <main+0x6ec>
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 80018c6:	f000 faf9 	bl	8001ebc <getChannelValuePercentage>
					if (limit == TRUE)
 80018ca:	7823      	ldrb	r3, [r4, #0]
					uint8_t s1 = getChannelValuePercentage(s1Channel);
 80018cc:	b2c1      	uxtb	r1, r0
					if (limit == TRUE)
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d100      	bne.n	80018d4 <main+0x5bc>
						s1 = s1 / 2;
 80018d2:	0849      	lsrs	r1, r1, #1
					setServoAngle(S1, getChannelValuePercentage(s1Channel)); // servo 1 attached to channel s1Channel
 80018d4:	2000      	movs	r0, #0
 80018d6:	f000 fbf7 	bl	80020c8 <setServoAngle>
				setServoAngle(S2, getChannelValuePercentage(s2Channel));
 80018da:	4b61      	ldr	r3, [pc, #388]	@ (8001a60 <main+0x748>)
 80018dc:	7818      	ldrb	r0, [r3, #0]
 80018de:	f000 faed 	bl	8001ebc <getChannelValuePercentage>
 80018e2:	0001      	movs	r1, r0
 80018e4:	2001      	movs	r0, #1
 80018e6:	f000 fbef 	bl	80020c8 <setServoAngle>
			if (HAL_GetTick() - time2 >= 200) {
 80018ea:	f001 fb63 	bl	8002fb4 <HAL_GetTick>
 80018ee:	9b03      	ldr	r3, [sp, #12]
 80018f0:	1ac0      	subs	r0, r0, r3
 80018f2:	28c7      	cmp	r0, #199	@ 0xc7
 80018f4:	d941      	bls.n	800197a <main+0x662>
				batteryVoltage = getBattVoltage();
 80018f6:	f7ff fc9f 	bl	8001238 <getBattVoltage>
 80018fa:	4c5a      	ldr	r4, [pc, #360]	@ (8001a64 <main+0x74c>)
 80018fc:	8020      	strh	r0, [r4, #0]
				batteryConfiguration = getBatteryConfiguration();
 80018fe:	f7ff fcab 	bl	8001258 <getBatteryConfiguration>
 8001902:	4b59      	ldr	r3, [pc, #356]	@ (8001a68 <main+0x750>)
 8001904:	7018      	strb	r0, [r3, #0]
				if (HAL_GetTick() - timeLimitBattery
 8001906:	f001 fb55 	bl	8002fb4 <HAL_GetTick>
 800190a:	9b02      	ldr	r3, [sp, #8]
 800190c:	1ac0      	subs	r0, r0, r3
 800190e:	4b57      	ldr	r3, [pc, #348]	@ (8001a6c <main+0x754>)
 8001910:	4298      	cmp	r0, r3
 8001912:	d902      	bls.n	800191a <main+0x602>
					limit = TRUE;// activate limit state (weapon speed limited)
 8001914:	2201      	movs	r2, #1
 8001916:	4b50      	ldr	r3, [pc, #320]	@ (8001a58 <main+0x740>)
 8001918:	701a      	strb	r2, [r3, #0]
				if (batteryVoltage >= limitVoltage * 100 * batteryConfiguration
 800191a:	4b55      	ldr	r3, [pc, #340]	@ (8001a70 <main+0x758>)
 800191c:	4a52      	ldr	r2, [pc, #328]	@ (8001a68 <main+0x750>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	7812      	ldrb	r2, [r2, #0]
 8001922:	8821      	ldrh	r1, [r4, #0]
 8001924:	435a      	muls	r2, r3
 8001926:	2364      	movs	r3, #100	@ 0x64
 8001928:	4353      	muls	r3, r2
 800192a:	4299      	cmp	r1, r3
 800192c:	db07      	blt.n	800193e <main+0x626>
						&& !limit)
 800192e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <main+0x740>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <main+0x626>
					timeLimitBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 8001936:	f001 fb3d 	bl	8002fb4 <HAL_GetTick>
 800193a:	300a      	adds	r0, #10
 800193c:	9002      	str	r0, [sp, #8]
				if (HAL_GetTick() - timeLowBattery
 800193e:	f001 fb39 	bl	8002fb4 <HAL_GetTick>
 8001942:	4b4a      	ldr	r3, [pc, #296]	@ (8001a6c <main+0x754>)
 8001944:	1b80      	subs	r0, r0, r6
 8001946:	4298      	cmp	r0, r3
 8001948:	d902      	bls.n	8001950 <main+0x638>
					cutoff = TRUE;	// activate cutoff state (robot disarmed)
 800194a:	2201      	movs	r2, #1
 800194c:	4b35      	ldr	r3, [pc, #212]	@ (8001a24 <main+0x70c>)
 800194e:	701a      	strb	r2, [r3, #0]
				if (batteryVoltage >= cutOffVoltage * 100 * batteryConfiguration
 8001950:	4b48      	ldr	r3, [pc, #288]	@ (8001a74 <main+0x75c>)
 8001952:	4a45      	ldr	r2, [pc, #276]	@ (8001a68 <main+0x750>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	7812      	ldrb	r2, [r2, #0]
 8001958:	8821      	ldrh	r1, [r4, #0]
 800195a:	435a      	muls	r2, r3
 800195c:	2364      	movs	r3, #100	@ 0x64
 800195e:	4353      	muls	r3, r2
 8001960:	4299      	cmp	r1, r3
 8001962:	db07      	blt.n	8001974 <main+0x65c>
						&& !cutoff)
 8001964:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <main+0x70c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d103      	bne.n	8001974 <main+0x65c>
					timeLowBattery = HAL_GetTick() + CUTOFF_BATTERY_TIMEOUT;
 800196c:	f001 fb22 	bl	8002fb4 <HAL_GetTick>
 8001970:	300a      	adds	r0, #10
 8001972:	0006      	movs	r6, r0
				time2 = HAL_GetTick();
 8001974:	f001 fb1e 	bl	8002fb4 <HAL_GetTick>
 8001978:	9003      	str	r0, [sp, #12]
			if (HAL_GetTick() - time1 >= 2000 && limit == FALSE) {
 800197a:	f001 fb1b 	bl	8002fb4 <HAL_GetTick>
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	1ac0      	subs	r0, r0, r3
 8001982:	23fa      	movs	r3, #250	@ 0xfa
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4298      	cmp	r0, r3
 8001988:	d30a      	bcc.n	80019a0 <main+0x688>
 800198a:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <main+0x740>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d106      	bne.n	80019a0 <main+0x688>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8001992:	0029      	movs	r1, r5
 8001994:	4822      	ldr	r0, [pc, #136]	@ (8001a20 <main+0x708>)
 8001996:	f001 ff75 	bl	8003884 <HAL_GPIO_TogglePin>
				time1 = HAL_GetTick();
 800199a:	f001 fb0b 	bl	8002fb4 <HAL_GetTick>
 800199e:	9001      	str	r0, [sp, #4]
			if (HAL_GetTick() - time3 >= 350 && limit == TRUE) {
 80019a0:	f001 fb08 	bl	8002fb4 <HAL_GetTick>
 80019a4:	9b04      	ldr	r3, [sp, #16]
 80019a6:	1ac0      	subs	r0, r0, r3
 80019a8:	23af      	movs	r3, #175	@ 0xaf
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4298      	cmp	r0, r3
 80019ae:	d30a      	bcc.n	80019c6 <main+0x6ae>
 80019b0:	4b29      	ldr	r3, [pc, #164]	@ (8001a58 <main+0x740>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d106      	bne.n	80019c6 <main+0x6ae>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 80019b8:	0029      	movs	r1, r5
 80019ba:	4819      	ldr	r0, [pc, #100]	@ (8001a20 <main+0x708>)
 80019bc:	f001 ff62 	bl	8003884 <HAL_GPIO_TogglePin>
				time3 = HAL_GetTick();
 80019c0:	f001 faf8 	bl	8002fb4 <HAL_GetTick>
 80019c4:	9004      	str	r0, [sp, #16]
		if (commandRecieved) {	// recieved a command from the USB
 80019c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <main+0x760>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00f      	beq.n	80019ee <main+0x6d6>
			if (modifySettingsWithCommand()) {
 80019ce:	f000 fe91 	bl	80026f4 <modifySettingsWithCommand>
 80019d2:	ac12      	add	r4, sp, #72	@ 0x48
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d100      	bne.n	80019da <main+0x6c2>
 80019d8:	e07f      	b.n	8001ada <main+0x7c2>
				uint8_t s[] = "\nOK\n";
 80019da:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <main+0x764>)
 80019dc:	9312      	str	r3, [sp, #72]	@ 0x48
 80019de:	2300      	movs	r3, #0
 80019e0:	7123      	strb	r3, [r4, #4]
				serialPrintString(s);
 80019e2:	0020      	movs	r0, r4
 80019e4:	f000 fbfe 	bl	80021e4 <serialPrintString>
			commandRecieved = FALSE;
 80019e8:	2200      	movs	r2, #0
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <main+0x760>)
 80019ec:	701a      	strb	r2, [r3, #0]
		ccr1 = TIM1->CCR1;
 80019ee:	4924      	ldr	r1, [pc, #144]	@ (8001a80 <main+0x768>)
 80019f0:	4b24      	ldr	r3, [pc, #144]	@ (8001a84 <main+0x76c>)
 80019f2:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 80019f4:	801a      	strh	r2, [r3, #0]
		ccr2 = TIM1->CCR2;
 80019f6:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 80019f8:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <main+0x770>)
 80019fa:	801a      	strh	r2, [r3, #0]
		ccr3 = TIM1->CCR3;
 80019fc:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80019fe:	4b23      	ldr	r3, [pc, #140]	@ (8001a8c <main+0x774>)
 8001a00:	801a      	strh	r2, [r3, #0]
		DMAadcUpdate();
 8001a02:	e6dc      	b.n	80017be <main+0x4a6>
					setServoAngle(S1, getChannelValuePercentage(s1Channel)); // servo 1 attached to channel s1Channel
 8001a04:	f000 fa5a 	bl	8001ebc <getChannelValuePercentage>
 8001a08:	0001      	movs	r1, r0
 8001a0a:	e763      	b.n	80018d4 <main+0x5bc>
 8001a0c:	200022a0 	.word	0x200022a0
 8001a10:	40001000 	.word	0x40001000
 8001a14:	0000ffff 	.word	0x0000ffff
 8001a18:	200022e8 	.word	0x200022e8
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	48000800 	.word	0x48000800
 8001a24:	2000217e 	.word	0x2000217e
 8001a28:	20000006 	.word	0x20000006
 8001a2c:	2000217b 	.word	0x2000217b
 8001a30:	2000000c 	.word	0x2000000c
 8001a34:	20002258 	.word	0x20002258
 8001a38:	20000007 	.word	0x20000007
 8001a3c:	20000011 	.word	0x20000011
 8001a40:	20000010 	.word	0x20000010
 8001a44:	20002177 	.word	0x20002177
 8001a48:	20002184 	.word	0x20002184
 8001a4c:	2000000f 	.word	0x2000000f
 8001a50:	20002462 	.word	0x20002462
 8001a54:	20000008 	.word	0x20000008
 8001a58:	2000217d 	.word	0x2000217d
 8001a5c:	2000000e 	.word	0x2000000e
 8001a60:	2000000d 	.word	0x2000000d
 8001a64:	20002180 	.word	0x20002180
 8001a68:	2000217c 	.word	0x2000217c
 8001a6c:	0000270f 	.word	0x0000270f
 8001a70:	20000005 	.word	0x20000005
 8001a74:	20000004 	.word	0x20000004
 8001a78:	20002182 	.word	0x20002182
 8001a7c:	0a4b4f0a 	.word	0x0a4b4f0a
 8001a80:	40012c00 	.word	0x40012c00
 8001a84:	20002174 	.word	0x20002174
 8001a88:	20002172 	.word	0x20002172
 8001a8c:	20002170 	.word	0x20002170
			disableMotor(M1);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f000 f9a5 	bl	8001de0 <disableMotor>
			disableMotor(M2);
 8001a96:	2001      	movs	r0, #1
 8001a98:	f000 f9a2 	bl	8001de0 <disableMotor>
			disableMotor(M3);
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f000 f99f 	bl	8001de0 <disableMotor>
			setServoAngle(S1, 0);	// servo 1 attached to channel s1Channel
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	0008      	movs	r0, r1
 8001aa6:	f000 fb0f 	bl	80020c8 <setServoAngle>
			setServoAngle(S2, 0);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	2001      	movs	r0, #1
 8001aae:	f000 fb0b 	bl	80020c8 <setServoAngle>
			if (HAL_GetTick() - time1 >= 100) {
 8001ab2:	f001 fa7f 	bl	8002fb4 <HAL_GetTick>
 8001ab6:	9b01      	ldr	r3, [sp, #4]
 8001ab8:	1ac0      	subs	r0, r0, r3
 8001aba:	2863      	cmp	r0, #99	@ 0x63
 8001abc:	d800      	bhi.n	8001ac0 <main+0x7a8>
 8001abe:	e782      	b.n	80019c6 <main+0x6ae>
				HAL_GPIO_TogglePin(U_LED_GPIO_Port, U_LED_Pin);
 8001ac0:	0029      	movs	r1, r5
 8001ac2:	4809      	ldr	r0, [pc, #36]	@ (8001ae8 <main+0x7d0>)
 8001ac4:	f001 fede 	bl	8003884 <HAL_GPIO_TogglePin>
				makeSound(mLeft, 100);	// beep while in cutoff mode
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <main+0x7d4>)
 8001aca:	2164      	movs	r1, #100	@ 0x64
 8001acc:	7818      	ldrb	r0, [r3, #0]
 8001ace:	f000 f9b7 	bl	8001e40 <makeSound>
				time1 = HAL_GetTick();
 8001ad2:	f001 fa6f 	bl	8002fb4 <HAL_GetTick>
 8001ad6:	9001      	str	r0, [sp, #4]
 8001ad8:	e775      	b.n	80019c6 <main+0x6ae>
				uint8_t s[] = "\nWHAT??\n";
 8001ada:	2209      	movs	r2, #9
 8001adc:	0020      	movs	r0, r4
 8001ade:	4904      	ldr	r1, [pc, #16]	@ (8001af0 <main+0x7d8>)
 8001ae0:	f005 fea5 	bl	800782e <memcpy>
 8001ae4:	e77d      	b.n	80019e2 <main+0x6ca>
 8001ae6:	46c0      	nop			@ (mov r8, r8)
 8001ae8:	48000800 	.word	0x48000800
 8001aec:	20002177 	.word	0x20002177
 8001af0:	08008880 	.word	0x08008880

08001af4 <map>:
		int16_t out_max) {
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	001d      	movs	r5, r3
 8001af8:	ab04      	add	r3, sp, #16
 8001afa:	2400      	movs	r4, #0
 8001afc:	5f1c      	ldrsh	r4, [r3, r4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001afe:	1a43      	subs	r3, r0, r1
 8001b00:	1b60      	subs	r0, r4, r5
 8001b02:	4358      	muls	r0, r3
 8001b04:	1a51      	subs	r1, r2, r1
 8001b06:	f7fe fbb9 	bl	800027c <__divsi3>
 8001b0a:	1940      	adds	r0, r0, r5
 8001b0c:	b200      	sxth	r0, r0
}
 8001b0e:	bd70      	pop	{r4, r5, r6, pc}

08001b10 <Error_Handler>:
 8001b10:	b672      	cpsid	i
	while (1) {
 8001b12:	e7fe      	b.n	8001b12 <Error_Handler+0x2>

08001b14 <initMotors>:
unsigned long pid_prev_time = 0;
float pid_prop_k = 1.0;
float pid_deriv_k = 0.0;
float pid_integ_k = 0.0;

void initMotors() {
 8001b14:	b510      	push	{r4, lr}
	initDMApwm();
 8001b16:	f7ff fb4b 	bl	80011b0 <initDMApwm>
}
 8001b1a:	bd10      	pop	{r4, pc}

08001b1c <getMotorRev>:
	// set the speed of the motors
	setMotorSpeedBidirectional(mLeft, t.speedL);
	setMotorSpeedBidirectional(mRight, t.speedR);
}

uint8_t getMotorRev(uint8_t motorN) { // return 1 if the motorN is reversed, else 0
 8001b1c:	0003      	movs	r3, r0
	uint8_t isRev = 0;
	switch (motorN) {
 8001b1e:	2801      	cmp	r0, #1
 8001b20:	d007      	beq.n	8001b32 <getMotorRev+0x16>
 8001b22:	2802      	cmp	r0, #2
 8001b24:	d007      	beq.n	8001b36 <getMotorRev+0x1a>
 8001b26:	2000      	movs	r0, #0
 8001b28:	4283      	cmp	r3, r0
 8001b2a:	d101      	bne.n	8001b30 <getMotorRev+0x14>
	case M1:
		isRev = m1Rev;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <getMotorRev+0x20>)
		break;
	case M2:
		isRev = m2Rev;
		break;
	case M3:
		isRev = m3Rev;
 8001b2e:	7818      	ldrb	r0, [r3, #0]
		break;
	}
	return isRev;
}
 8001b30:	4770      	bx	lr
		isRev = m2Rev;
 8001b32:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <getMotorRev+0x24>)
 8001b34:	e7fb      	b.n	8001b2e <getMotorRev+0x12>
		isRev = m3Rev;
 8001b36:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <getMotorRev+0x28>)
 8001b38:	e7f9      	b.n	8001b2e <getMotorRev+0x12>
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	2000000b 	.word	0x2000000b
 8001b40:	2000000a 	.word	0x2000000a
 8001b44:	2000217a 	.word	0x2000217a

08001b48 <setDriverSignals>:
		dir = !dir;	//check if the motor is reversed, if it is reverse the direction
	setDriverSignals(motorN, sp, dir);

}

void setDriverSignals(uint8_t motorN, int16_t sp, uint8_t dir) {
 8001b48:	b510      	push	{r4, lr}
 8001b4a:	000c      	movs	r4, r1
	/*
	 * PA8 --> M1_PWM (PWM_M1_F) 	PA15 --> DIR_M1 (PWM_M1_B)
	 * PA9 --> M2_PWM (PWM_M2_F)	PA13 --> DIR_M2 (PWM_M2_B)
	 * PA10 --> M3_PWM (PWM_M3_F)	PA11 --> DIR_M3 (PWM_M3_B)
	 */
	switch (motorN) {
 8001b4c:	2801      	cmp	r0, #1
 8001b4e:	d014      	beq.n	8001b7a <setDriverSignals+0x32>
 8001b50:	2802      	cmp	r0, #2
 8001b52:	d01f      	beq.n	8001b94 <setDriverSignals+0x4c>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d10f      	bne.n	8001b78 <setDriverSignals+0x30>
	case M1:
		if (dir) {	// set the direction
 8001b58:	2a00      	cmp	r2, #0
 8001b5a:	d001      	beq.n	8001b60 <setDriverSignals+0x18>
			setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE);
 8001b5c:	22fa      	movs	r2, #250	@ 0xfa
 8001b5e:	0092      	lsls	r2, r2, #2
		} else {
			setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, 0);
 8001b60:	2180      	movs	r1, #128	@ 0x80
 8001b62:	4813      	ldr	r0, [pc, #76]	@ (8001bb0 <setDriverSignals+0x68>)
 8001b64:	0209      	lsls	r1, r1, #8
 8001b66:	f7ff fb01 	bl	800116c <setDMApwmDuty>
		}
		setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, sp);	// set the speed
 8001b6a:	2180      	movs	r1, #128	@ 0x80
 8001b6c:	b2a2      	uxth	r2, r4
 8001b6e:	0049      	lsls	r1, r1, #1
		if (dir) {	// set the direction
			setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE);
		} else {
			setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, 0);
		}
		setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, sp);	// set the speed
 8001b70:	2090      	movs	r0, #144	@ 0x90
 8001b72:	05c0      	lsls	r0, r0, #23
 8001b74:	f7ff fafa 	bl	800116c <setDMApwmDuty>
		break;
	}
#endif
}
 8001b78:	bd10      	pop	{r4, pc}
		if (dir) {	// set the direction
 8001b7a:	2a00      	cmp	r2, #0
 8001b7c:	d001      	beq.n	8001b82 <setDriverSignals+0x3a>
			setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8001b7e:	22fa      	movs	r2, #250	@ 0xfa
 8001b80:	0092      	lsls	r2, r2, #2
			setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, 0);
 8001b82:	2180      	movs	r1, #128	@ 0x80
 8001b84:	480a      	ldr	r0, [pc, #40]	@ (8001bb0 <setDriverSignals+0x68>)
 8001b86:	0189      	lsls	r1, r1, #6
 8001b88:	f7ff faf0 	bl	800116c <setDMApwmDuty>
		setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, sp);	// set the speed
 8001b8c:	2180      	movs	r1, #128	@ 0x80
 8001b8e:	b2a2      	uxth	r2, r4
 8001b90:	0089      	lsls	r1, r1, #2
 8001b92:	e7ed      	b.n	8001b70 <setDriverSignals+0x28>
		if (dir) {	// set the direction
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	d001      	beq.n	8001b9c <setDriverSignals+0x54>
			setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M3_B_Pin, MAX_DMA_PWM_VALUE);
 8001b98:	22fa      	movs	r2, #250	@ 0xfa
 8001b9a:	0092      	lsls	r2, r2, #2
			setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, 0);
 8001b9c:	2180      	movs	r1, #128	@ 0x80
 8001b9e:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <setDriverSignals+0x68>)
 8001ba0:	0109      	lsls	r1, r1, #4
 8001ba2:	f7ff fae3 	bl	800116c <setDMApwmDuty>
		setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, sp);	// set the speed
 8001ba6:	2180      	movs	r1, #128	@ 0x80
 8001ba8:	b2a2      	uxth	r2, r4
 8001baa:	00c9      	lsls	r1, r1, #3
 8001bac:	e7e0      	b.n	8001b70 <setDriverSignals+0x28>
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	48000400 	.word	0x48000400

08001bb4 <setDriverBrake>:

void setDriverBrake(uint8_t motorN) {
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	b510      	push	{r4, lr}
			break;
	}
#endif

#ifdef DRIVER_PH_EN
	switch (motorN) {
 8001bb8:	2801      	cmp	r0, #1
 8001bba:	d00a      	beq.n	8001bd2 <setDriverBrake+0x1e>
 8001bbc:	2802      	cmp	r0, #2
 8001bbe:	d00c      	beq.n	8001bda <setDriverBrake+0x26>
 8001bc0:	2800      	cmp	r0, #0
 8001bc2:	d105      	bne.n	8001bd0 <setDriverBrake+0x1c>
	case M1:
		setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, 0);
 8001bc4:	2180      	movs	r1, #128	@ 0x80
 8001bc6:	0049      	lsls	r1, r1, #1
		break;
	case M2:
		setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, 0);
		break;
	case M3:
		setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, 0);
 8001bc8:	2090      	movs	r0, #144	@ 0x90
 8001bca:	05c0      	lsls	r0, r0, #23
 8001bcc:	f7ff face 	bl	800116c <setDMApwmDuty>
		break;
	}
#endif
}
 8001bd0:	bd10      	pop	{r4, pc}
		setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, 0);
 8001bd2:	2180      	movs	r1, #128	@ 0x80
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	0089      	lsls	r1, r1, #2
 8001bd8:	e7f6      	b.n	8001bc8 <setDriverBrake+0x14>
		setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, 0);
 8001bda:	2180      	movs	r1, #128	@ 0x80
 8001bdc:	2200      	movs	r2, #0
 8001bde:	00c9      	lsls	r1, r1, #3
 8001be0:	e7f2      	b.n	8001bc8 <setDriverBrake+0x14>
	...

08001be4 <motSeekPot>:
	if(target_pos < 400){
 8001be4:	23c8      	movs	r3, #200	@ 0xc8
void motSeekPot(uint8_t motorN, uint16_t target_pos, uint8_t pot_ch) {
 8001be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be8:	b08f      	sub	sp, #60	@ 0x3c
 8001bea:	0017      	movs	r7, r2
 8001bec:	9004      	str	r0, [sp, #16]
	if(target_pos < 400){
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4299      	cmp	r1, r3
 8001bf2:	d204      	bcs.n	8001bfe <motSeekPot+0x1a>
		setDriverBrake(motorN);
 8001bf4:	9804      	ldr	r0, [sp, #16]
 8001bf6:	f7ff ffdd 	bl	8001bb4 <setDriverBrake>
}
 8001bfa:	b00f      	add	sp, #60	@ 0x3c
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	target_pos = map(target_pos, 2000, 4000, 0, 4095);
 8001bfe:	b208      	sxth	r0, r1
 8001c00:	22fa      	movs	r2, #250	@ 0xfa
 8001c02:	21fa      	movs	r1, #250	@ 0xfa
 8001c04:	4d45      	ldr	r5, [pc, #276]	@ (8001d1c <motSeekPot+0x138>)
 8001c06:	2300      	movs	r3, #0
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	00c9      	lsls	r1, r1, #3
 8001c0c:	9500      	str	r5, [sp, #0]
 8001c0e:	f7ff ff71 	bl	8001af4 <map>
 8001c12:	0004      	movs	r4, r0
	int16_t current_pos = DMAadcGetch(pot_ch);
 8001c14:	0038      	movs	r0, r7
 8001c16:	f7ff fa79 	bl	800110c <DMAadcGetch>
	if (target_pos > 4095)
 8001c1a:	2280      	movs	r2, #128	@ 0x80
 8001c1c:	1c23      	adds	r3, r4, #0
 8001c1e:	b2a4      	uxth	r4, r4
 8001c20:	0152      	lsls	r2, r2, #5
 8001c22:	4294      	cmp	r4, r2
 8001c24:	d300      	bcc.n	8001c28 <motSeekPot+0x44>
 8001c26:	1c2b      	adds	r3, r5, #0
	float pid_error = target_pos - current_pos;
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	b200      	sxth	r0, r0
 8001c2c:	1a18      	subs	r0, r3, r0
 8001c2e:	f7ff f9e1 	bl	8000ff4 <__aeabi_i2f>
	float pid_prop = pid_error + pid_prop_k;
 8001c32:	4b3b      	ldr	r3, [pc, #236]	@ (8001d20 <motSeekPot+0x13c>)
	float pid_error = target_pos - current_pos;
 8001c34:	9003      	str	r0, [sp, #12]
	float pid_prop = pid_error + pid_prop_k;
 8001c36:	6819      	ldr	r1, [r3, #0]
 8001c38:	f7fe fc0c 	bl	8000454 <__aeabi_fadd>
	float pid_deriv = (pid_error - prev_error) * pid_deriv_k;
 8001c3c:	4e39      	ldr	r6, [pc, #228]	@ (8001d24 <motSeekPot+0x140>)
	float pid_prop = pid_error + pid_prop_k;
 8001c3e:	9005      	str	r0, [sp, #20]
	float pid_deriv = (pid_error - prev_error) * pid_deriv_k;
 8001c40:	6831      	ldr	r1, [r6, #0]
 8001c42:	9803      	ldr	r0, [sp, #12]
 8001c44:	f7fe ff52 	bl	8000aec <__aeabi_fsub>
 8001c48:	4b37      	ldr	r3, [pc, #220]	@ (8001d28 <motSeekPot+0x144>)
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	f7fe fdf4 	bl	8000838 <__aeabi_fmul>
 8001c50:	1c04      	adds	r4, r0, #0
	if (abs(pid_deriv) < 200.0) {
 8001c52:	f7ff f9af 	bl	8000fb4 <__aeabi_f2iz>
 8001c56:	23c7      	movs	r3, #199	@ 0xc7
 8001c58:	30c7      	adds	r0, #199	@ 0xc7
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4298      	cmp	r0, r3
 8001c5e:	d800      	bhi.n	8001c62 <motSeekPot+0x7e>
		pid_deriv = 0.0;
 8001c60:	2400      	movs	r4, #0
	if (abs(pid_error) < 80.0) {
 8001c62:	9803      	ldr	r0, [sp, #12]
 8001c64:	f7ff f9a6 	bl	8000fb4 <__aeabi_f2iz>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	334f      	adds	r3, #79	@ 0x4f
 8001c6c:	2500      	movs	r5, #0
 8001c6e:	4f2f      	ldr	r7, [pc, #188]	@ (8001d2c <motSeekPot+0x148>)
 8001c70:	2b9e      	cmp	r3, #158	@ 0x9e
 8001c72:	d80b      	bhi.n	8001c8c <motSeekPot+0xa8>
	if (abs(pid_error) < 40.0) {
 8001c74:	3027      	adds	r0, #39	@ 0x27
 8001c76:	284e      	cmp	r0, #78	@ 0x4e
 8001c78:	d949      	bls.n	8001d0e <motSeekPot+0x12a>
		pid_integral = pid_integral + pid_error * pid_integ_k;
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <motSeekPot+0x14c>)
 8001c7c:	9803      	ldr	r0, [sp, #12]
 8001c7e:	6819      	ldr	r1, [r3, #0]
 8001c80:	f7fe fdda 	bl	8000838 <__aeabi_fmul>
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	f7fe fbe5 	bl	8000454 <__aeabi_fadd>
 8001c8a:	1c05      	adds	r5, r0, #0
	int speed = pid_prop + pid_deriv + pid_integral;
 8001c8c:	1c21      	adds	r1, r4, #0
		pid_integral = pid_integral + pid_error * pid_integ_k;
 8001c8e:	603d      	str	r5, [r7, #0]
	int speed = pid_prop + pid_deriv + pid_integral;
 8001c90:	9805      	ldr	r0, [sp, #20]
 8001c92:	f7fe fbdf 	bl	8000454 <__aeabi_fadd>
 8001c96:	1c29      	adds	r1, r5, #0
 8001c98:	f7fe fbdc 	bl	8000454 <__aeabi_fadd>
 8001c9c:	f7ff f98a 	bl	8000fb4 <__aeabi_f2iz>
	if (speed < -MAX_DMA_PWM_VALUE)
 8001ca0:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <motSeekPot+0x150>)
	int speed = pid_prop + pid_deriv + pid_integral;
 8001ca2:	0005      	movs	r5, r0
	if (speed < -MAX_DMA_PWM_VALUE)
 8001ca4:	0004      	movs	r4, r0
 8001ca6:	4298      	cmp	r0, r3
 8001ca8:	da00      	bge.n	8001cac <motSeekPot+0xc8>
 8001caa:	001c      	movs	r4, r3
 8001cac:	23fa      	movs	r3, #250	@ 0xfa
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429c      	cmp	r4, r3
 8001cb2:	dd00      	ble.n	8001cb6 <motSeekPot+0xd2>
 8001cb4:	001c      	movs	r4, r3
		sprintf(string, "x =  %d\n", speed );
 8001cb6:	0022      	movs	r2, r4
 8001cb8:	491f      	ldr	r1, [pc, #124]	@ (8001d38 <motSeekPot+0x154>)
 8001cba:	a806      	add	r0, sp, #24
 8001cbc:	f005 fc5e 	bl	800757c <siprintf>
		serialPrintString(string);
 8001cc0:	a806      	add	r0, sp, #24
 8001cc2:	f000 fa8f 	bl	80021e4 <serialPrintString>
	prev_error = pid_error;
 8001cc6:	9b03      	ldr	r3, [sp, #12]
 8001cc8:	6033      	str	r3, [r6, #0]
	sp = map(sp, 0, speed_steps, 0, MAX_DMA_PWM_VALUE);
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <motSeekPot+0x158>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	5e9a      	ldrsh	r2, [r3, r2]
	uint16_t sp = abs(speed);
 8001cd0:	17e3      	asrs	r3, r4, #31
 8001cd2:	18e0      	adds	r0, r4, r3
 8001cd4:	4058      	eors	r0, r3
	sp = map(sp, 0, speed_steps, 0, MAX_DMA_PWM_VALUE);
 8001cd6:	23fa      	movs	r3, #250	@ 0xfa
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	b200      	sxth	r0, r0
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	f7ff ff07 	bl	8001af4 <map>
 8001ce6:	0007      	movs	r7, r0
	if (speed >= 0)
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	db14      	blt.n	8001d16 <motSeekPot+0x132>
	if (speed == 0) { // brake if speed is 0
 8001cec:	2401      	movs	r4, #1
 8001cee:	2d00      	cmp	r5, #0
 8001cf0:	d100      	bne.n	8001cf4 <motSeekPot+0x110>
 8001cf2:	e77f      	b.n	8001bf4 <motSeekPot+0x10>
	if (getMotorRev(motorN))
 8001cf4:	9804      	ldr	r0, [sp, #16]
 8001cf6:	f7ff ff11 	bl	8001b1c <getMotorRev>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d001      	beq.n	8001d02 <motSeekPot+0x11e>
		dir = !dir;	//check if the motor is reversed, if it is reverse the direction
 8001cfe:	2301      	movs	r3, #1
 8001d00:	405c      	eors	r4, r3
	setDriverSignals(motorN, sp, dir);
 8001d02:	0022      	movs	r2, r4
 8001d04:	0039      	movs	r1, r7
 8001d06:	9804      	ldr	r0, [sp, #16]
 8001d08:	f7ff ff1e 	bl	8001b48 <setDriverSignals>
 8001d0c:	e775      	b.n	8001bfa <motSeekPot+0x16>
 8001d0e:	2400      	movs	r4, #0
		pid_deriv = 0;
 8001d10:	1c25      	adds	r5, r4, #0
		pid_prop = 0;
 8001d12:	9405      	str	r4, [sp, #20]
 8001d14:	e7ba      	b.n	8001c8c <motSeekPot+0xa8>
	uint8_t dir = FALSE; //backwards default
 8001d16:	2400      	movs	r4, #0
 8001d18:	e7ec      	b.n	8001cf4 <motSeekPot+0x110>
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	00000fff 	.word	0x00000fff
 8001d20:	20000014 	.word	0x20000014
 8001d24:	2000245c 	.word	0x2000245c
 8001d28:	20002454 	.word	0x20002454
 8001d2c:	20002458 	.word	0x20002458
 8001d30:	20002450 	.word	0x20002450
 8001d34:	fffffc18 	.word	0xfffffc18
 8001d38:	08008889 	.word	0x08008889
 8001d3c:	08008af2 	.word	0x08008af2

08001d40 <calculateSpeedWithDeadZoneDouble>:
}
/*	Calculate the speed with dead-zone for double direction DC motors
 *  max -3, min +3
 *	change the deadzone value according your needs
 */
int16_t calculateSpeedWithDeadZoneDouble(int16_t speed) {
 8001d40:	0003      	movs	r3, r0
	int16_t returnValue = speed;
	if (speed < DEADZONE)
		returnValue = 0;	// lower deadzone
 8001d42:	2000      	movs	r0, #0
	if (speed < DEADZONE)
 8001d44:	2b09      	cmp	r3, #9
 8001d46:	dd00      	ble.n	8001d4a <calculateSpeedWithDeadZoneDouble+0xa>
	int16_t returnValue = speed;
 8001d48:	0018      	movs	r0, r3
	if (speed > speed_steps - DEADZONE)
 8001d4a:	4a04      	ldr	r2, [pc, #16]	@ (8001d5c <calculateSpeedWithDeadZoneDouble+0x1c>)
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	0011      	movs	r1, r2
 8001d50:	3909      	subs	r1, #9
 8001d52:	4299      	cmp	r1, r3
 8001d54:	dc00      	bgt.n	8001d58 <calculateSpeedWithDeadZoneDouble+0x18>
		returnValue = speed_steps;	// upper deadzone
 8001d56:	b210      	sxth	r0, r2
	return returnValue;
}
 8001d58:	4770      	bx	lr
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	08008af2 	.word	0x08008af2

08001d60 <setMotorSpeedBidirectional>:
void setMotorSpeedBidirectional(uint8_t motorN, int16_t speed) {
 8001d60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d62:	0005      	movs	r5, r0
 8001d64:	0008      	movs	r0, r1
	speed = calculateSpeedWithDeadZoneDouble(speed);
 8001d66:	f7ff ffeb 	bl	8001d40 <calculateSpeedWithDeadZoneDouble>
	speed = (speed - speed_steps / 2) * 2;
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <setMotorSpeedBidirectional+0x54>)
 8001d6c:	881a      	ldrh	r2, [r3, #0]
 8001d6e:	0854      	lsrs	r4, r2, #1
 8001d70:	1b04      	subs	r4, r0, r4
 8001d72:	0064      	lsls	r4, r4, #1
 8001d74:	b224      	sxth	r4, r4
	uint16_t sp = abs(speed);
 8001d76:	17e3      	asrs	r3, r4, #31
 8001d78:	18e0      	adds	r0, r4, r3
 8001d7a:	4058      	eors	r0, r3
	sp = map(sp, 0, speed_steps, 0, MAX_DMA_PWM_VALUE);
 8001d7c:	23fa      	movs	r3, #250	@ 0xfa
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2300      	movs	r3, #0
 8001d84:	b212      	sxth	r2, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	b200      	sxth	r0, r0
 8001d8a:	f7ff feb3 	bl	8001af4 <map>
 8001d8e:	0006      	movs	r6, r0
		setDriverBrake(motorN);
 8001d90:	0028      	movs	r0, r5
	if (speed == 0) { // brake if speed is 0
 8001d92:	2c00      	cmp	r4, #0
 8001d94:	d102      	bne.n	8001d9c <setMotorSpeedBidirectional+0x3c>
		setDriverBrake(motorN);
 8001d96:	f7ff ff0d 	bl	8001bb4 <setDriverBrake>
}
 8001d9a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	if (getMotorRev(motorN))
 8001d9c:	f7ff febe 	bl	8001b1c <getMotorRev>
 8001da0:	0fe2      	lsrs	r2, r4, #31
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d101      	bne.n	8001daa <setMotorSpeedBidirectional+0x4a>
	if (speed >= 0)
 8001da6:	43e4      	mvns	r4, r4
 8001da8:	0fe2      	lsrs	r2, r4, #31
	setDriverSignals(motorN, sp, dir);
 8001daa:	0031      	movs	r1, r6
 8001dac:	0028      	movs	r0, r5
 8001dae:	f7ff fecb 	bl	8001b48 <setDriverSignals>
 8001db2:	e7f2      	b.n	8001d9a <setMotorSpeedBidirectional+0x3a>
 8001db4:	08008af2 	.word	0x08008af2

08001db8 <setTankMotor>:
void setTankMotor(TankMotors t) {
 8001db8:	b507      	push	{r0, r1, r2, lr}
	setMotorSpeedBidirectional(mLeft, t.speedL);
 8001dba:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <setTankMotor+0x20>)
 8001dbc:	b201      	sxth	r1, r0
void setTankMotor(TankMotors t) {
 8001dbe:	9001      	str	r0, [sp, #4]
	setMotorSpeedBidirectional(mLeft, t.speedL);
 8001dc0:	7818      	ldrb	r0, [r3, #0]
 8001dc2:	f7ff ffcd 	bl	8001d60 <setMotorSpeedBidirectional>
	setMotorSpeedBidirectional(mRight, t.speedR);
 8001dc6:	ab01      	add	r3, sp, #4
 8001dc8:	2102      	movs	r1, #2
 8001dca:	5e59      	ldrsh	r1, [r3, r1]
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <setTankMotor+0x24>)
 8001dce:	7818      	ldrb	r0, [r3, #0]
 8001dd0:	f7ff ffc6 	bl	8001d60 <setMotorSpeedBidirectional>
}
 8001dd4:	bd07      	pop	{r0, r1, r2, pc}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	20002177 	.word	0x20002177
 8001ddc:	20000009 	.word	0x20000009

08001de0 <disableMotor>:
#endif
	}
	disableMotor(motorN);
}

void disableMotor(uint8_t motorN) {
 8001de0:	0002      	movs	r2, r0
 8001de2:	b510      	push	{r4, lr}
	switch (motorN) {
 8001de4:	2801      	cmp	r0, #1
 8001de6:	d009      	beq.n	8001dfc <disableMotor+0x1c>
 8001de8:	2802      	cmp	r0, #2
 8001dea:	d00b      	beq.n	8001e04 <disableMotor+0x24>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d104      	bne.n	8001dfa <disableMotor+0x1a>
	case M1:
		HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, FALSE);
 8001df0:	2180      	movs	r1, #128	@ 0x80
 8001df2:	01c9      	lsls	r1, r1, #7
		break;
	case M2:
		HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
		break;
	case M3:
		HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <disableMotor+0x2c>)
 8001df6:	f001 fd3f 	bl	8003878 <HAL_GPIO_WritePin>
		break;
	}
}
 8001dfa:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, FALSE);
 8001dfc:	2180      	movs	r1, #128	@ 0x80
 8001dfe:	2200      	movs	r2, #0
 8001e00:	0149      	lsls	r1, r1, #5
 8001e02:	e7f7      	b.n	8001df4 <disableMotor+0x14>
		HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, FALSE);
 8001e04:	2180      	movs	r1, #128	@ 0x80
 8001e06:	2200      	movs	r2, #0
 8001e08:	00c9      	lsls	r1, r1, #3
 8001e0a:	e7f3      	b.n	8001df4 <disableMotor+0x14>
 8001e0c:	48000400 	.word	0x48000400

08001e10 <enableMotor>:

void enableMotor(uint8_t motorN) {
 8001e10:	0002      	movs	r2, r0
 8001e12:	b510      	push	{r4, lr}
	switch (motorN) {
 8001e14:	2801      	cmp	r0, #1
 8001e16:	d00a      	beq.n	8001e2e <enableMotor+0x1e>
 8001e18:	2802      	cmp	r0, #2
 8001e1a:	d00b      	beq.n	8001e34 <enableMotor+0x24>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d105      	bne.n	8001e2c <enableMotor+0x1c>
	case M1:
		HAL_GPIO_WritePin(SLEEPN_M1_GPIO_Port, SLEEPN_M1_Pin, TRUE);
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	3201      	adds	r2, #1
 8001e24:	01c9      	lsls	r1, r1, #7
		break;
	case M2:
		HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
		break;
	case M3:
		HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <enableMotor+0x2c>)
 8001e28:	f001 fd26 	bl	8003878 <HAL_GPIO_WritePin>
		break;
	}
}
 8001e2c:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(SLEEPN_M2_GPIO_Port, SLEEPN_M2_Pin, TRUE);
 8001e2e:	2180      	movs	r1, #128	@ 0x80
 8001e30:	0149      	lsls	r1, r1, #5
 8001e32:	e7f8      	b.n	8001e26 <enableMotor+0x16>
		HAL_GPIO_WritePin(SLEEPN_M3_GPIO_Port, SLEEPN_M3_Pin, TRUE);
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	2201      	movs	r2, #1
 8001e38:	00c9      	lsls	r1, r1, #3
 8001e3a:	e7f4      	b.n	8001e26 <enableMotor+0x16>
 8001e3c:	48000400 	.word	0x48000400

08001e40 <makeSound>:
void makeSound(uint8_t motorN, uint8_t duration) {
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e42:	0004      	movs	r4, r0
 8001e44:	000e      	movs	r6, r1
	uint32_t time = HAL_GetTick();
 8001e46:	f001 f8b5 	bl	8002fb4 <HAL_GetTick>
			setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8001e4a:	27fa      	movs	r7, #250	@ 0xfa
	uint32_t time = HAL_GetTick();
 8001e4c:	0005      	movs	r5, r0
	enableMotor(motorN);
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f7ff ffde 	bl	8001e10 <enableMotor>
			setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8001e54:	00bf      	lsls	r7, r7, #2
	while (HAL_GetTick() <= time + duration) {
 8001e56:	f001 f8ad 	bl	8002fb4 <HAL_GetTick>
 8001e5a:	1973      	adds	r3, r6, r5
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d903      	bls.n	8001e68 <makeSound+0x28>
	disableMotor(motorN);
 8001e60:	0020      	movs	r0, r4
 8001e62:	f7ff ffbd 	bl	8001de0 <disableMotor>
}
 8001e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (motorN) {
 8001e68:	2c01      	cmp	r4, #1
 8001e6a:	d011      	beq.n	8001e90 <makeSound+0x50>
 8001e6c:	2c02      	cmp	r4, #2
 8001e6e:	d019      	beq.n	8001ea4 <makeSound+0x64>
 8001e70:	2c00      	cmp	r4, #0
 8001e72:	d1f0      	bne.n	8001e56 <makeSound+0x16>
			setDMApwmDuty(PWM_M1_B_GPIO_Port, PWM_M1_B_Pin, MAX_DMA_PWM_VALUE);
 8001e74:	2180      	movs	r1, #128	@ 0x80
 8001e76:	003a      	movs	r2, r7
 8001e78:	0209      	lsls	r1, r1, #8
 8001e7a:	480f      	ldr	r0, [pc, #60]	@ (8001eb8 <makeSound+0x78>)
 8001e7c:	f7ff f976 	bl	800116c <setDMApwmDuty>
			setDMApwmDuty(PWM_M1_F_GPIO_Port, PWM_M1_F_Pin, sp);
 8001e80:	2180      	movs	r1, #128	@ 0x80
 8001e82:	2214      	movs	r2, #20
 8001e84:	0049      	lsls	r1, r1, #1
			setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, sp);
 8001e86:	2090      	movs	r0, #144	@ 0x90
 8001e88:	05c0      	lsls	r0, r0, #23
 8001e8a:	f7ff f96f 	bl	800116c <setDMApwmDuty>
			break;
 8001e8e:	e7e2      	b.n	8001e56 <makeSound+0x16>
			setDMApwmDuty(PWM_M2_B_GPIO_Port, PWM_M2_B_Pin, MAX_DMA_PWM_VALUE);
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	003a      	movs	r2, r7
 8001e94:	0189      	lsls	r1, r1, #6
 8001e96:	4808      	ldr	r0, [pc, #32]	@ (8001eb8 <makeSound+0x78>)
 8001e98:	f7ff f968 	bl	800116c <setDMApwmDuty>
			setDMApwmDuty(PWM_M2_F_GPIO_Port, PWM_M2_F_Pin, sp);
 8001e9c:	2180      	movs	r1, #128	@ 0x80
 8001e9e:	2214      	movs	r2, #20
 8001ea0:	0089      	lsls	r1, r1, #2
 8001ea2:	e7f0      	b.n	8001e86 <makeSound+0x46>
			setDMApwmDuty(PWM_M3_B_GPIO_Port, PWM_M3_B_Pin, 1);
 8001ea4:	2180      	movs	r1, #128	@ 0x80
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	0109      	lsls	r1, r1, #4
 8001eaa:	4803      	ldr	r0, [pc, #12]	@ (8001eb8 <makeSound+0x78>)
 8001eac:	f7ff f95e 	bl	800116c <setDMApwmDuty>
			setDMApwmDuty(PWM_M3_F_GPIO_Port, PWM_M3_F_Pin, sp);
 8001eb0:	2180      	movs	r1, #128	@ 0x80
 8001eb2:	2214      	movs	r2, #20
 8001eb4:	00c9      	lsls	r1, r1, #3
 8001eb6:	e7e6      	b.n	8001e86 <makeSound+0x46>
 8001eb8:	48000400 	.word	0x48000400

08001ebc <getChannelValuePercentage>:
/* Measure PPM */
uint8_t channelToRead = 1;
uint16_t reciever_channels[NUMBER_OF_PPM_CHANNEL + 1]; // channel values from ch1-ch6 (1-6) (7-8 with flysky-i6 not used) {0 is the separation pulse}

uint16_t getChannelValuePercentage(uint8_t channelNumber) {
	int temp = (reciever_channels[channelNumber] - 1000) / (1000 / speed_steps);
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <getChannelValuePercentage+0x34>)
uint16_t getChannelValuePercentage(uint8_t channelNumber) {
 8001ebe:	b570      	push	{r4, r5, r6, lr}
	int temp = (reciever_channels[channelNumber] - 1000) / (1000 / speed_steps);
 8001ec0:	881c      	ldrh	r4, [r3, #0]
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <getChannelValuePercentage+0x38>)
 8001ec4:	0040      	lsls	r0, r0, #1
 8001ec6:	5ac5      	ldrh	r5, [r0, r3]
 8001ec8:	20fa      	movs	r0, #250	@ 0xfa
 8001eca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <getChannelValuePercentage+0x3c>)
 8001ecc:	0021      	movs	r1, r4
 8001ece:	0080      	lsls	r0, r0, #2
 8001ed0:	18ed      	adds	r5, r5, r3
 8001ed2:	f7fe f9d3 	bl	800027c <__divsi3>
 8001ed6:	0001      	movs	r1, r0
 8001ed8:	0028      	movs	r0, r5
 8001eda:	f7fe f9cf 	bl	800027c <__divsi3>
	if (temp > speed_steps) temp = speed_steps;	// clip to the maximum
	if (temp < 0) temp = 0;	// clip to the minimum
 8001ede:	43c3      	mvns	r3, r0
 8001ee0:	17db      	asrs	r3, r3, #31
 8001ee2:	4018      	ands	r0, r3
	return temp;
 8001ee4:	42a0      	cmp	r0, r4
 8001ee6:	dd00      	ble.n	8001eea <getChannelValuePercentage+0x2e>
 8001ee8:	0020      	movs	r0, r4
 8001eea:	b280      	uxth	r0, r0
}
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	08008af2 	.word	0x08008af2
 8001ef4:	20002462 	.word	0x20002462
 8001ef8:	fffffc18 	.word	0xfffffc18

08001efc <initReciever>:

void initReciever(TIM_HandleTypeDef *htim) {
 8001efc:	b510      	push	{r4, lr}
	HAL_TIM_Base_Start(htim);
 8001efe:	f003 fac5 	bl	800548c <HAL_TIM_Base_Start>
}
 8001f02:	bd10      	pop	{r4, pc}

08001f04 <HAL_GPIO_EXTI_Callback>:

uint8_t aligned = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
	if (recieverIsPWM) {
 8001f04:	4b4b      	ldr	r3, [pc, #300]	@ (8002034 <HAL_GPIO_EXTI_Callback+0x130>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f06:	b570      	push	{r4, r5, r6, lr}
	if (recieverIsPWM) {
 8001f08:	681b      	ldr	r3, [r3, #0]
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f0a:	0004      	movs	r4, r0
	if (recieverIsPWM) {
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d100      	bne.n	8001f12 <HAL_GPIO_EXTI_Callback+0xe>
 8001f10:	e06a      	b.n	8001fe8 <HAL_GPIO_EXTI_Callback+0xe4>
		// channel 1
		if (GPIO_Pin == CH1_Pin) {
 8001f12:	4d49      	ldr	r5, [pc, #292]	@ (8002038 <HAL_GPIO_EXTI_Callback+0x134>)
 8001f14:	2801      	cmp	r0, #1
 8001f16:	d10f      	bne.n	8001f38 <HAL_GPIO_EXTI_Callback+0x34>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 1) {	// rising edge
 8001f18:	0001      	movs	r1, r0
 8001f1a:	4848      	ldr	r0, [pc, #288]	@ (800203c <HAL_GPIO_EXTI_Callback+0x138>)
 8001f1c:	f001 fca6 	bl	800386c <HAL_GPIO_ReadPin>
 8001f20:	4b47      	ldr	r3, [pc, #284]	@ (8002040 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001f22:	2801      	cmp	r0, #1
 8001f24:	d116      	bne.n	8001f54 <HAL_GPIO_EXTI_Callback+0x50>
				aligned = 0;
 8001f26:	2200      	movs	r2, #0
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001f28:	681b      	ldr	r3, [r3, #0]
				aligned = HAL_GPIO_ReadPin(CH2_GPIO_Port, CH2_Pin);	// if the second channel are high means that all the channels are aligned
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4843      	ldr	r0, [pc, #268]	@ (800203c <HAL_GPIO_EXTI_Callback+0x138>)
				__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001f2e:	625a      	str	r2, [r3, #36]	@ 0x24
				aligned = 0;
 8001f30:	702a      	strb	r2, [r5, #0]
				aligned = HAL_GPIO_ReadPin(CH2_GPIO_Port, CH2_Pin);	// if the second channel are high means that all the channels are aligned
 8001f32:	f001 fc9b 	bl	800386c <HAL_GPIO_ReadPin>
 8001f36:	7028      	strb	r0, [r5, #0]
			} else {	// falling edge
				usWidth = __HAL_TIM_GET_COUNTER(&htim6) / (TIMCLOCK / PRESCALAR);
				reciever_channels[1] = usWidth;
			}
		}
		if (aligned) {
 8001f38:	782b      	ldrb	r3, [r5, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d029      	beq.n	8001f92 <HAL_GPIO_EXTI_Callback+0x8e>
			// channel 2 (only falling, because it starts with ch1)
			if (GPIO_Pin == CH2_Pin) {
 8001f3e:	2c02      	cmp	r4, #2
 8001f40:	d111      	bne.n	8001f66 <HAL_GPIO_EXTI_Callback+0x62>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001f42:	4b3f      	ldr	r3, [pc, #252]	@ (8002040 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001f44:	4a3f      	ldr	r2, [pc, #252]	@ (8002044 <HAL_GPIO_EXTI_Callback+0x140>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	8013      	strh	r3, [r2, #0]
				reciever_channels[2] = usWidth;
 8001f4e:	4a3e      	ldr	r2, [pc, #248]	@ (8002048 <HAL_GPIO_EXTI_Callback+0x144>)
			}
		} else {	// not aligned, subtract channel 1 time from ch2 time etc.
			// channel 2 (only falling, because it starts after ch1)
			if (GPIO_Pin == CH2_Pin) {
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[2] = usWidth - (reciever_channels[1]);
 8001f50:	8093      	strh	r3, [r2, #4]
			if (GPIO_Pin == CH3_Pin) {
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
				reciever_channels[3] = usWidth - (reciever_channels[1] + reciever_channels[2]);
			}
			// channel 4 (only falling, because it starts after ch3)
			if (GPIO_Pin == CH4_Pin) {
 8001f52:	e01d      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6) / (TIMCLOCK / PRESCALAR);
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3b      	ldr	r2, [pc, #236]	@ (8002044 <HAL_GPIO_EXTI_Callback+0x140>)
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	085b      	lsrs	r3, r3, #1
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	8013      	strh	r3, [r2, #0]
				reciever_channels[1] = usWidth;
 8001f60:	4a39      	ldr	r2, [pc, #228]	@ (8002048 <HAL_GPIO_EXTI_Callback+0x144>)
 8001f62:	8053      	strh	r3, [r2, #2]
 8001f64:	e7e8      	b.n	8001f38 <HAL_GPIO_EXTI_Callback+0x34>
			if (GPIO_Pin == CH3_Pin) {
 8001f66:	2c04      	cmp	r4, #4
 8001f68:	d108      	bne.n	8001f7c <HAL_GPIO_EXTI_Callback+0x78>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001f6a:	4b35      	ldr	r3, [pc, #212]	@ (8002040 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001f6c:	4a35      	ldr	r2, [pc, #212]	@ (8002044 <HAL_GPIO_EXTI_Callback+0x140>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	8013      	strh	r3, [r2, #0]
				reciever_channels[3] = usWidth;
 8001f76:	4a34      	ldr	r2, [pc, #208]	@ (8002048 <HAL_GPIO_EXTI_Callback+0x144>)
				reciever_channels[3] = usWidth - (reciever_channels[1] + reciever_channels[2]);
 8001f78:	80d3      	strh	r3, [r2, #6]
			if (GPIO_Pin == CH4_Pin) {
 8001f7a:	e009      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
			if (GPIO_Pin == CH4_Pin) {
 8001f7c:	2c08      	cmp	r4, #8
 8001f7e:	d107      	bne.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001f80:	4b2f      	ldr	r3, [pc, #188]	@ (8002040 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001f82:	4a30      	ldr	r2, [pc, #192]	@ (8002044 <HAL_GPIO_EXTI_Callback+0x140>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	8013      	strh	r3, [r2, #0]
				reciever_channels[4] = usWidth;
 8001f8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002048 <HAL_GPIO_EXTI_Callback+0x144>)
 8001f8e:	8113      	strh	r3, [r2, #8]
					}
				}
			}
		}
	}
}
 8001f90:	bd70      	pop	{r4, r5, r6, pc}
			if (GPIO_Pin == CH2_Pin) {
 8001f92:	2c02      	cmp	r4, #2
 8001f94:	d109      	bne.n	8001faa <HAL_GPIO_EXTI_Callback+0xa6>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001f96:	4b2a      	ldr	r3, [pc, #168]	@ (8002040 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001f98:	4a2a      	ldr	r2, [pc, #168]	@ (8002044 <HAL_GPIO_EXTI_Callback+0x140>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	8013      	strh	r3, [r2, #0]
				reciever_channels[2] = usWidth - (reciever_channels[1]);
 8001fa2:	4a29      	ldr	r2, [pc, #164]	@ (8002048 <HAL_GPIO_EXTI_Callback+0x144>)
 8001fa4:	8851      	ldrh	r1, [r2, #2]
 8001fa6:	1a5b      	subs	r3, r3, r1
 8001fa8:	e7d2      	b.n	8001f50 <HAL_GPIO_EXTI_Callback+0x4c>
			if (GPIO_Pin == CH3_Pin) {
 8001faa:	2c04      	cmp	r4, #4
 8001fac:	d10b      	bne.n	8001fc6 <HAL_GPIO_EXTI_Callback+0xc2>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001fae:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001fb0:	4a24      	ldr	r2, [pc, #144]	@ (8002044 <HAL_GPIO_EXTI_Callback+0x140>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	8013      	strh	r3, [r2, #0]
				reciever_channels[3] = usWidth - (reciever_channels[1] + reciever_channels[2]);
 8001fba:	4a23      	ldr	r2, [pc, #140]	@ (8002048 <HAL_GPIO_EXTI_Callback+0x144>)
 8001fbc:	8851      	ldrh	r1, [r2, #2]
 8001fbe:	8890      	ldrh	r0, [r2, #4]
 8001fc0:	1809      	adds	r1, r1, r0
 8001fc2:	1a5b      	subs	r3, r3, r1
 8001fc4:	e7d8      	b.n	8001f78 <HAL_GPIO_EXTI_Callback+0x74>
			if (GPIO_Pin == CH4_Pin) {
 8001fc6:	2c08      	cmp	r4, #8
 8001fc8:	d1e2      	bne.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001fca:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <HAL_GPIO_EXTI_Callback+0x140>)
 8001fce:	681b      	ldr	r3, [r3, #0]
				reciever_channels[4] = usWidth - (reciever_channels[1] + reciever_channels[2] + reciever_channels[3]);
 8001fd0:	491d      	ldr	r1, [pc, #116]	@ (8002048 <HAL_GPIO_EXTI_Callback+0x144>)
				usWidth = __HAL_TIM_GET_COUNTER(&htim6);
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	8013      	strh	r3, [r2, #0]
				reciever_channels[4] = usWidth - (reciever_channels[1] + reciever_channels[2] + reciever_channels[3]);
 8001fd8:	8888      	ldrh	r0, [r1, #4]
 8001fda:	884a      	ldrh	r2, [r1, #2]
 8001fdc:	1812      	adds	r2, r2, r0
 8001fde:	88c8      	ldrh	r0, [r1, #6]
 8001fe0:	1812      	adds	r2, r2, r0
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	810b      	strh	r3, [r1, #8]
 8001fe6:	e7d3      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
		if (GPIO_Pin == CH1_Pin) {
 8001fe8:	2801      	cmp	r0, #1
 8001fea:	d1d1      	bne.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
			if (HAL_GPIO_ReadPin(CH1_GPIO_Port, CH1_Pin) == 0) {
 8001fec:	0001      	movs	r1, r0
 8001fee:	4813      	ldr	r0, [pc, #76]	@ (800203c <HAL_GPIO_EXTI_Callback+0x138>)
 8001ff0:	f001 fc3c 	bl	800386c <HAL_GPIO_ReadPin>
 8001ff4:	2800      	cmp	r0, #0
 8001ff6:	d1cb      	bne.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
				usWidth = __HAL_TIM_GET_COUNTER(&htim6) / (TIMCLOCK/PRESCALAR);
 8001ff8:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001ffa:	4912      	ldr	r1, [pc, #72]	@ (8002044 <HAL_GPIO_EXTI_Callback+0x140>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4d13      	ldr	r5, [pc, #76]	@ (800204c <HAL_GPIO_EXTI_Callback+0x148>)
 8002000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
				__HAL_TIM_SET_COUNTER(&htim6, 0);  // reset the counter
 8002002:	6258      	str	r0, [r3, #36]	@ 0x24
				usWidth = __HAL_TIM_GET_COUNTER(&htim6) / (TIMCLOCK/PRESCALAR);
 8002004:	0852      	lsrs	r2, r2, #1
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 8002006:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_GPIO_EXTI_Callback+0x14c>)
				usWidth = __HAL_TIM_GET_COUNTER(&htim6) / (TIMCLOCK/PRESCALAR);
 8002008:	b292      	uxth	r2, r2
 800200a:	800a      	strh	r2, [r1, #0]
				if (usWidth > 4500) { // if the separation pulse found, the next pulse is ch1
 800200c:	429a      	cmp	r2, r3
 800200e:	d903      	bls.n	8002018 <HAL_GPIO_EXTI_Callback+0x114>
					reciever_channels[0] = usWidth;	// store the separation pulse width
 8002010:	4b0d      	ldr	r3, [pc, #52]	@ (8002048 <HAL_GPIO_EXTI_Callback+0x144>)
					channelToRead = 1;	// next channel is ch1
 8002012:	702c      	strb	r4, [r5, #0]
					reciever_channels[0] = usWidth;	// store the separation pulse width
 8002014:	801a      	strh	r2, [r3, #0]
					channelToRead = 1;	// next channel is ch1
 8002016:	e7bb      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
					if (channelToRead != 0) {
 8002018:	782b      	ldrb	r3, [r5, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0b8      	beq.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 800201e:	005c      	lsls	r4, r3, #1
 8002020:	4909      	ldr	r1, [pc, #36]	@ (8002048 <HAL_GPIO_EXTI_Callback+0x144>)
						channelToRead++;
 8002022:	3301      	adds	r3, #1
 8002024:	b2db      	uxtb	r3, r3
						reciever_channels[channelToRead] = usWidth;	// store the current channel width
 8002026:	5262      	strh	r2, [r4, r1]
						if (channelToRead > NUMBER_OF_PPM_CHANNEL) {
 8002028:	2b08      	cmp	r3, #8
 800202a:	d801      	bhi.n	8002030 <HAL_GPIO_EXTI_Callback+0x12c>
						channelToRead++;
 800202c:	702b      	strb	r3, [r5, #0]
 800202e:	e7af      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
							channelToRead = 0;
 8002030:	7028      	strb	r0, [r5, #0]
}
 8002032:	e7ad      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x8c>
 8002034:	20000000 	.word	0x20000000
 8002038:	20002460 	.word	0x20002460
 800203c:	48000400 	.word	0x48000400
 8002040:	200022a0 	.word	0x200022a0
 8002044:	20002474 	.word	0x20002474
 8002048:	20002462 	.word	0x20002462
 800204c:	20000018 	.word	0x20000018
 8002050:	00001194 	.word	0x00001194

08002054 <tankMix>:

TankMotors tankMix(uint16_t STchannel, uint16_t THchannel) {
	TankMotors t;
	int16_t st = (STchannel - speed_steps/2) * 2;
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <tankMix+0x50>)
TankMotors tankMix(uint16_t STchannel, uint16_t THchannel) {
 8002056:	b513      	push	{r0, r1, r4, lr}
	int16_t st = (STchannel - speed_steps/2) * 2;
 8002058:	881c      	ldrh	r4, [r3, #0]
 800205a:	0863      	lsrs	r3, r4, #1
 800205c:	1ac0      	subs	r0, r0, r3
	int16_t th = (THchannel - speed_steps/2) * 2;
 800205e:	1acb      	subs	r3, r1, r3
	int16_t st = (STchannel - speed_steps/2) * 2;
 8002060:	0040      	lsls	r0, r0, #1
	int16_t th = (THchannel - speed_steps/2) * 2;
 8002062:	005b      	lsls	r3, r3, #1
	int16_t st = (STchannel - speed_steps/2) * 2;
 8002064:	b280      	uxth	r0, r0
	int16_t th = (THchannel - speed_steps/2) * 2;
 8002066:	b29b      	uxth	r3, r3
	int16_t ml = th + st;	// mixing
 8002068:	18c2      	adds	r2, r0, r3
 800206a:	b212      	sxth	r2, r2
	int16_t mr = th - st;	// mixing
 800206c:	1a1b      	subs	r3, r3, r0
 800206e:	b21b      	sxth	r3, r3
	// keep the value inside -speed_steps and speed_steps
	if (ml > speed_steps) ml = speed_steps;
 8002070:	42a2      	cmp	r2, r4
 8002072:	dd00      	ble.n	8002076 <tankMix+0x22>
 8002074:	b222      	sxth	r2, r4
	if (ml < -speed_steps) ml = -speed_steps;
 8002076:	4261      	negs	r1, r4
 8002078:	428a      	cmp	r2, r1
 800207a:	da00      	bge.n	800207e <tankMix+0x2a>
 800207c:	b20a      	sxth	r2, r1
	if (mr > speed_steps) mr = speed_steps;
 800207e:	429c      	cmp	r4, r3
 8002080:	da0c      	bge.n	800209c <tankMix+0x48>
 8002082:	b223      	sxth	r3, r4
	if (mr < -speed_steps) mr = -speed_steps;
	t.speedL = (ml + speed_steps) / 2;	// keep value inside 0 and speed_steps
 8002084:	1912      	adds	r2, r2, r4
	t.speedR = (mr + speed_steps) / 2;
 8002086:	191b      	adds	r3, r3, r4
	t.speedL = (ml + speed_steps) / 2;	// keep value inside 0 and speed_steps
 8002088:	0fd0      	lsrs	r0, r2, #31
 800208a:	1880      	adds	r0, r0, r2
	t.speedR = (mr + speed_steps) / 2;
 800208c:	0fda      	lsrs	r2, r3, #31
 800208e:	18d3      	adds	r3, r2, r3
	t.speedL = (ml + speed_steps) / 2;	// keep value inside 0 and speed_steps
 8002090:	1040      	asrs	r0, r0, #1
	t.speedR = (mr + speed_steps) / 2;
 8002092:	105b      	asrs	r3, r3, #1
	return t;
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	b280      	uxth	r0, r0
 8002098:	4318      	orrs	r0, r3
}
 800209a:	bd16      	pop	{r1, r2, r4, pc}
	if (mr < -speed_steps) mr = -speed_steps;
 800209c:	4299      	cmp	r1, r3
 800209e:	ddf1      	ble.n	8002084 <tankMix+0x30>
 80020a0:	b20b      	sxth	r3, r1
 80020a2:	e7ef      	b.n	8002084 <tankMix+0x30>
 80020a4:	08008af2 	.word	0x08008af2

080020a8 <getServoRev>:
extern uint8_t s2Rev;
extern uint16_t speed_steps;

uint8_t getServoRev(uint8_t servoN) {	// return 1 if the motorN is reversed, else 0
	uint8_t isRev = 0;
	switch (servoN) {
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d003      	beq.n	80020b4 <getServoRev+0xc>
 80020ac:	2801      	cmp	r0, #1
 80020ae:	d004      	beq.n	80020ba <getServoRev+0x12>
 80020b0:	2000      	movs	r0, #0
		case S2:
			isRev = s2Rev;
			break;
	}
	return isRev;
}
 80020b2:	4770      	bx	lr
			isRev = s1Rev;
 80020b4:	4b02      	ldr	r3, [pc, #8]	@ (80020c0 <getServoRev+0x18>)
			isRev = s2Rev;
 80020b6:	7818      	ldrb	r0, [r3, #0]
			break;
 80020b8:	e7fb      	b.n	80020b2 <getServoRev+0xa>
			isRev = s2Rev;
 80020ba:	4b02      	ldr	r3, [pc, #8]	@ (80020c4 <getServoRev+0x1c>)
 80020bc:	e7fb      	b.n	80020b6 <getServoRev+0xe>
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	20002179 	.word	0x20002179
 80020c4:	20002178 	.word	0x20002178

080020c8 <setServoAngle>:
 * P(us) = P * 1'000'000
 * factor = 10000/P(us)
 * if factor < 1 divide by the new factor
 * new factor = 1/factor
 */
void setServoAngle(uint8_t servoN, uint16_t percentage) {
 80020c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020ca:	0006      	movs	r6, r0
	const uint8_t factor = 2;
	uint16_t temp = calculateSpeedWithDeadZoneDouble(percentage);
 80020cc:	b208      	sxth	r0, r1
 80020ce:	f7ff fe37 	bl	8001d40 <calculateSpeedWithDeadZoneDouble>
	if (temp > speed_steps) temp = speed_steps;
 80020d2:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <setServoAngle+0x6c>)
 80020d4:	1c04      	adds	r4, r0, #0
 80020d6:	881d      	ldrh	r5, [r3, #0]
 80020d8:	b280      	uxth	r0, r0
 80020da:	42a8      	cmp	r0, r5
 80020dc:	d900      	bls.n	80020e0 <setServoAngle+0x18>
 80020de:	1c2c      	adds	r4, r5, #0
	if (temp < 0) temp = 0;

	if (getServoRev(servoN)) temp = speed_steps - temp;	// take in count if the servo must be reversed or not
 80020e0:	0030      	movs	r0, r6
	if (temp > speed_steps) temp = speed_steps;
 80020e2:	b2a4      	uxth	r4, r4
	if (getServoRev(servoN)) temp = speed_steps - temp;	// take in count if the servo must be reversed or not
 80020e4:	f7ff ffe0 	bl	80020a8 <getServoRev>
 80020e8:	2800      	cmp	r0, #0
 80020ea:	d001      	beq.n	80020f0 <setServoAngle+0x28>
 80020ec:	1b2c      	subs	r4, r5, r4
 80020ee:	b2a4      	uxth	r4, r4

	switch (servoN) {
 80020f0:	2e00      	cmp	r6, #0
 80020f2:	d002      	beq.n	80020fa <setServoAngle+0x32>
 80020f4:	2e01      	cmp	r6, #1
 80020f6:	d00f      	beq.n	8002118 <setServoAngle+0x50>
		case S2:
			temp = map(temp, 0, speed_steps, S2_MIN_TIME_PWM, S2_MAX_TIME_PWM);
			TIM17->CCR1 = temp * factor;
			break;
	}
}
 80020f8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
			temp = map(temp, 0, speed_steps, S1_MIN_TIME_PWM, S1_MAX_TIME_PWM);
 80020fa:	23fa      	movs	r3, #250	@ 0xfa
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	23fa      	movs	r3, #250	@ 0xfa
 8002102:	0031      	movs	r1, r6
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	b22a      	sxth	r2, r5
 8002108:	b220      	sxth	r0, r4
 800210a:	f7ff fcf3 	bl	8001af4 <map>
			TIM16->CCR1 = temp * factor;
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <setServoAngle+0x70>)
 8002110:	b280      	uxth	r0, r0
 8002112:	0040      	lsls	r0, r0, #1
			TIM17->CCR1 = temp * factor;
 8002114:	6358      	str	r0, [r3, #52]	@ 0x34
}
 8002116:	e7ef      	b.n	80020f8 <setServoAngle+0x30>
			temp = map(temp, 0, speed_steps, S2_MIN_TIME_PWM, S2_MAX_TIME_PWM);
 8002118:	2396      	movs	r3, #150	@ 0x96
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2388      	movs	r3, #136	@ 0x88
 8002120:	2100      	movs	r1, #0
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	b22a      	sxth	r2, r5
 8002126:	b220      	sxth	r0, r4
 8002128:	f7ff fce4 	bl	8001af4 <map>
			TIM17->CCR1 = temp * factor;
 800212c:	b280      	uxth	r0, r0
 800212e:	4b03      	ldr	r3, [pc, #12]	@ (800213c <setServoAngle+0x74>)
 8002130:	0040      	lsls	r0, r0, #1
 8002132:	e7ef      	b.n	8002114 <setServoAngle+0x4c>
 8002134:	08008af2 	.word	0x08008af2
 8002138:	40014400 	.word	0x40014400
 800213c:	40014800 	.word	0x40014800

08002140 <setServoIsEnable>:

void setServoIsEnable(uint8_t state, TIM_HandleTypeDef *htim){
 8002140:	0003      	movs	r3, r0
 8002142:	b510      	push	{r4, lr}
 8002144:	0008      	movs	r0, r1
	if(state == TRUE){	// turn of the pwm generation
		HAL_TIMEx_PWMN_Start(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 8002146:	2100      	movs	r1, #0
	if(state == TRUE){	// turn of the pwm generation
 8002148:	2b01      	cmp	r3, #1
 800214a:	d102      	bne.n	8002152 <setServoIsEnable+0x12>
		HAL_TIMEx_PWMN_Start(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 800214c:	f003 fc26 	bl	800599c <HAL_TIMEx_PWMN_Start>
	}else{
		HAL_TIMEx_PWMN_Stop(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
	}
}
 8002150:	bd10      	pop	{r4, pc}
		HAL_TIMEx_PWMN_Stop(htim,TIM_CHANNEL_1);	// can be TIM16 or TIM17, channel 1 used on all of them
 8002152:	f003 fc27 	bl	80059a4 <HAL_TIMEx_PWMN_Stop>
}
 8002156:	e7fb      	b.n	8002150 <setServoIsEnable+0x10>

08002158 <remove_all_chars>:
	strcpy(c.value, token);
	return c;
}

void remove_all_chars(char *str, char c) {
	char *pr = str, *pw = str;
 8002158:	0002      	movs	r2, r0
void remove_all_chars(char *str, char c) {
 800215a:	b510      	push	{r4, lr}
	while (*pr) {
 800215c:	7803      	ldrb	r3, [r0, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <remove_all_chars+0xe>
		*pw = *pr++;
		pw += (*pw != c);
	}
	*pw = '\0';
 8002162:	7013      	strb	r3, [r2, #0]
}
 8002164:	bd10      	pop	{r4, pc}
		*pw = *pr++;
 8002166:	7013      	strb	r3, [r2, #0]
		pw += (*pw != c);
 8002168:	1a5b      	subs	r3, r3, r1
 800216a:	1e5c      	subs	r4, r3, #1
 800216c:	41a3      	sbcs	r3, r4
		*pw = *pr++;
 800216e:	3001      	adds	r0, #1
		pw += (*pw != c);
 8002170:	18d2      	adds	r2, r2, r3
 8002172:	e7f3      	b.n	800215c <remove_all_chars+0x4>

08002174 <decodeCommand>:
Command decodeCommand(char *buffer) {
 8002174:	b5b0      	push	{r4, r5, r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	0004      	movs	r4, r0
	char temp[strlen(buffer)];
 800217c:	0008      	movs	r0, r1
Command decodeCommand(char *buffer) {
 800217e:	000d      	movs	r5, r1
	char temp[strlen(buffer)];
 8002180:	f7fd ffcc 	bl	800011c <strlen>
 8002184:	466a      	mov	r2, sp
 8002186:	3007      	adds	r0, #7
 8002188:	08c3      	lsrs	r3, r0, #3
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	469d      	mov	sp, r3
	strcpy(temp, buffer);
 8002190:	0029      	movs	r1, r5
 8002192:	4668      	mov	r0, sp
 8002194:	f005 fb43 	bl	800781e <strcpy>
	remove_all_chars(temp, ' ');	// remove all the spaces form the string
 8002198:	2120      	movs	r1, #32
 800219a:	4668      	mov	r0, sp
 800219c:	f7ff ffdc 	bl	8002158 <remove_all_chars>
	remove_all_chars(temp, '\n');	// remove all the spaces form the string
 80021a0:	210a      	movs	r1, #10
 80021a2:	4668      	mov	r0, sp
 80021a4:	f7ff ffd8 	bl	8002158 <remove_all_chars>
	char *token = strtok(temp, COMMAND_TYPE_SEPARATOR);
 80021a8:	4d0d      	ldr	r5, [pc, #52]	@ (80021e0 <decodeCommand+0x6c>)
 80021aa:	4668      	mov	r0, sp
 80021ac:	0029      	movs	r1, r5
 80021ae:	f005 fa5b 	bl	8007668 <strtok>
 80021b2:	0001      	movs	r1, r0
	strcpy(c.type, token);
 80021b4:	1d38      	adds	r0, r7, #4
 80021b6:	f005 fb32 	bl	800781e <strcpy>
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 80021ba:	0029      	movs	r1, r5
 80021bc:	2000      	movs	r0, #0
 80021be:	f005 fa53 	bl	8007668 <strtok>
	strcpy(c.value, token);
 80021c2:	230e      	movs	r3, #14
	token = strtok(NULL, COMMAND_TYPE_SEPARATOR);
 80021c4:	0001      	movs	r1, r0
	strcpy(c.value, token);
 80021c6:	18f8      	adds	r0, r7, r3
 80021c8:	f005 fb29 	bl	800781e <strcpy>
	return c;
 80021cc:	2214      	movs	r2, #20
 80021ce:	0020      	movs	r0, r4
 80021d0:	1d39      	adds	r1, r7, #4
 80021d2:	f005 fb2c 	bl	800782e <memcpy>
}
 80021d6:	0020      	movs	r0, r4
 80021d8:	46bd      	mov	sp, r7
 80021da:	b006      	add	sp, #24
 80021dc:	bdb0      	pop	{r4, r5, r7, pc}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	08008892 	.word	0x08008892

080021e4 <serialPrintString>:

void serialPrintString(uint8_t *s) {
 80021e4:	b510      	push	{r4, lr}
 80021e6:	0004      	movs	r4, r0
	CDC_Transmit_FS(s, strlen(s));
 80021e8:	f7fd ff98 	bl	800011c <strlen>
 80021ec:	b281      	uxth	r1, r0
 80021ee:	0020      	movs	r0, r4
 80021f0:	f004 fea6 	bl	8006f40 <CDC_Transmit_FS>
}
 80021f4:	bd10      	pop	{r4, pc}
	...

080021f8 <read_byte_eeprom>:
	readSettingsFromEeprom();
}

uint8_t read_byte_eeprom(uint8_t address) {
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80021f8:	23fa      	movs	r3, #250	@ 0xfa
uint8_t read_byte_eeprom(uint8_t address) {
 80021fa:	b530      	push	{r4, r5, lr}
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 80021fc:	009b      	lsls	r3, r3, #2
uint8_t read_byte_eeprom(uint8_t address) {
 80021fe:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8002200:	2517      	movs	r5, #23
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	2301      	movs	r3, #1
 8002206:	4c06      	ldr	r4, [pc, #24]	@ (8002220 <read_byte_eeprom+0x28>)
 8002208:	446d      	add	r5, sp
uint8_t read_byte_eeprom(uint8_t address) {
 800220a:	0002      	movs	r2, r0
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800220c:	21a0      	movs	r1, #160	@ 0xa0
 800220e:	0020      	movs	r0, r4
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	9500      	str	r5, [sp, #0]
 8002214:	f001 fdb4 	bl	8003d80 <HAL_I2C_Mem_Read>
	return data;
 8002218:	7828      	ldrb	r0, [r5, #0]
}
 800221a:	b007      	add	sp, #28
 800221c:	bd30      	pop	{r4, r5, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	20002378 	.word	0x20002378

08002224 <readSettingsFromEeprom>:
void readSettingsFromEeprom() {
 8002224:	b510      	push	{r4, lr}
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8002226:	2400      	movs	r4, #0
void readSettingsFromEeprom() {
 8002228:	b086      	sub	sp, #24
		dataRead[i] = read_byte_eeprom(i);
 800222a:	b2e0      	uxtb	r0, r4
 800222c:	f7ff ffe4 	bl	80021f8 <read_byte_eeprom>
 8002230:	ab01      	add	r3, sp, #4
 8002232:	5518      	strb	r0, [r3, r4]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8002234:	3401      	adds	r4, #1
 8002236:	2c14      	cmp	r4, #20
 8002238:	d1f7      	bne.n	800222a <readSettingsFromEeprom+0x6>
	thChannel = dataRead[0];
 800223a:	4a31      	ldr	r2, [pc, #196]	@ (8002300 <readSettingsFromEeprom+0xdc>)
 800223c:	7819      	ldrb	r1, [r3, #0]
 800223e:	7011      	strb	r1, [r2, #0]
	stChannel = dataRead[1];
 8002240:	7859      	ldrb	r1, [r3, #1]
 8002242:	4a30      	ldr	r2, [pc, #192]	@ (8002304 <readSettingsFromEeprom+0xe0>)
 8002244:	7011      	strb	r1, [r2, #0]
	wpChannel = dataRead[2];
 8002246:	7899      	ldrb	r1, [r3, #2]
 8002248:	4a2f      	ldr	r2, [pc, #188]	@ (8002308 <readSettingsFromEeprom+0xe4>)
 800224a:	7011      	strb	r1, [r2, #0]
	s1Channel = dataRead[3];
 800224c:	78d9      	ldrb	r1, [r3, #3]
 800224e:	4a2f      	ldr	r2, [pc, #188]	@ (800230c <readSettingsFromEeprom+0xe8>)
 8002250:	7011      	strb	r1, [r2, #0]
	s2Channel = dataRead[4];
 8002252:	7919      	ldrb	r1, [r3, #4]
 8002254:	4a2e      	ldr	r2, [pc, #184]	@ (8002310 <readSettingsFromEeprom+0xec>)
 8002256:	7011      	strb	r1, [r2, #0]
	armChannel = dataRead[5];
 8002258:	7959      	ldrb	r1, [r3, #5]
 800225a:	4a2e      	ldr	r2, [pc, #184]	@ (8002314 <readSettingsFromEeprom+0xf0>)
 800225c:	7011      	strb	r1, [r2, #0]
	m1Rev = dataRead[6];
 800225e:	7999      	ldrb	r1, [r3, #6]
 8002260:	4a2d      	ldr	r2, [pc, #180]	@ (8002318 <readSettingsFromEeprom+0xf4>)
 8002262:	7011      	strb	r1, [r2, #0]
	m2Rev = dataRead[7];
 8002264:	79d9      	ldrb	r1, [r3, #7]
 8002266:	4a2d      	ldr	r2, [pc, #180]	@ (800231c <readSettingsFromEeprom+0xf8>)
 8002268:	7011      	strb	r1, [r2, #0]
	m3Rev = dataRead[8];
 800226a:	7a19      	ldrb	r1, [r3, #8]
 800226c:	4a2c      	ldr	r2, [pc, #176]	@ (8002320 <readSettingsFromEeprom+0xfc>)
 800226e:	7011      	strb	r1, [r2, #0]
	s1Rev = dataRead[9];
 8002270:	7a59      	ldrb	r1, [r3, #9]
 8002272:	4a2c      	ldr	r2, [pc, #176]	@ (8002324 <readSettingsFromEeprom+0x100>)
 8002274:	7011      	strb	r1, [r2, #0]
	s2Rev = dataRead[10];
 8002276:	7a99      	ldrb	r1, [r3, #10]
 8002278:	4a2b      	ldr	r2, [pc, #172]	@ (8002328 <readSettingsFromEeprom+0x104>)
 800227a:	7011      	strb	r1, [r2, #0]
	switch (dataRead[11]) {	// control M1 at which motor is assigned
 800227c:	7ada      	ldrb	r2, [r3, #11]
 800227e:	2a01      	cmp	r2, #1
 8002280:	d010      	beq.n	80022a4 <readSettingsFromEeprom+0x80>
 8002282:	2a02      	cmp	r2, #2
 8002284:	d012      	beq.n	80022ac <readSettingsFromEeprom+0x88>
 8002286:	2a00      	cmp	r2, #0
 8002288:	d101      	bne.n	800228e <readSettingsFromEeprom+0x6a>
			mLeft = M1;
 800228a:	4928      	ldr	r1, [pc, #160]	@ (800232c <readSettingsFromEeprom+0x108>)
 800228c:	700a      	strb	r2, [r1, #0]
	switch (dataRead[12]) {	// control M2 at which motor is assigned
 800228e:	7b1a      	ldrb	r2, [r3, #12]
 8002290:	2a01      	cmp	r2, #1
 8002292:	d00d      	beq.n	80022b0 <readSettingsFromEeprom+0x8c>
 8002294:	2a02      	cmp	r2, #2
 8002296:	d02b      	beq.n	80022f0 <readSettingsFromEeprom+0xcc>
 8002298:	2a00      	cmp	r2, #0
 800229a:	d10b      	bne.n	80022b4 <readSettingsFromEeprom+0x90>
			mLeft = M2;
 800229c:	4a23      	ldr	r2, [pc, #140]	@ (800232c <readSettingsFromEeprom+0x108>)
			mWeapon = M2;
 800229e:	2101      	movs	r1, #1
 80022a0:	7011      	strb	r1, [r2, #0]
			break;
 80022a2:	e007      	b.n	80022b4 <readSettingsFromEeprom+0x90>
			mRight = M1;
 80022a4:	4a22      	ldr	r2, [pc, #136]	@ (8002330 <readSettingsFromEeprom+0x10c>)
			mWeapon = M1;
 80022a6:	2100      	movs	r1, #0
 80022a8:	7011      	strb	r1, [r2, #0]
			break;
 80022aa:	e7f0      	b.n	800228e <readSettingsFromEeprom+0x6a>
			mWeapon = M1;
 80022ac:	4a21      	ldr	r2, [pc, #132]	@ (8002334 <readSettingsFromEeprom+0x110>)
 80022ae:	e7fa      	b.n	80022a6 <readSettingsFromEeprom+0x82>
			mRight = M2;
 80022b0:	491f      	ldr	r1, [pc, #124]	@ (8002330 <readSettingsFromEeprom+0x10c>)
 80022b2:	700a      	strb	r2, [r1, #0]
	switch (dataRead[13]) {	// control M3 at which motor is assigned
 80022b4:	7b5a      	ldrb	r2, [r3, #13]
 80022b6:	2a01      	cmp	r2, #1
 80022b8:	d01c      	beq.n	80022f4 <readSettingsFromEeprom+0xd0>
 80022ba:	2a02      	cmp	r2, #2
 80022bc:	d01c      	beq.n	80022f8 <readSettingsFromEeprom+0xd4>
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d102      	bne.n	80022c8 <readSettingsFromEeprom+0xa4>
			mLeft = M3;
 80022c2:	4a1a      	ldr	r2, [pc, #104]	@ (800232c <readSettingsFromEeprom+0x108>)
			mRight = M3;
 80022c4:	2102      	movs	r1, #2
 80022c6:	7011      	strb	r1, [r2, #0]
	weaponDoubleDirection = dataRead[14];
 80022c8:	7b99      	ldrb	r1, [r3, #14]
 80022ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002338 <readSettingsFromEeprom+0x114>)
 80022cc:	7011      	strb	r1, [r2, #0]
	tankMixIsON = dataRead[15];
 80022ce:	7bd9      	ldrb	r1, [r3, #15]
 80022d0:	4a1a      	ldr	r2, [pc, #104]	@ (800233c <readSettingsFromEeprom+0x118>)
 80022d2:	7011      	strb	r1, [r2, #0]
	noDisarm = dataRead[16];
 80022d4:	7c19      	ldrb	r1, [r3, #16]
 80022d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002340 <readSettingsFromEeprom+0x11c>)
 80022d8:	7011      	strb	r1, [r2, #0]
	limitVoltage = dataRead[17];
 80022da:	7c59      	ldrb	r1, [r3, #17]
 80022dc:	4a19      	ldr	r2, [pc, #100]	@ (8002344 <readSettingsFromEeprom+0x120>)
 80022de:	7011      	strb	r1, [r2, #0]
	cutOffVoltage = dataRead[18];
 80022e0:	7c99      	ldrb	r1, [r3, #18]
 80022e2:	4a19      	ldr	r2, [pc, #100]	@ (8002348 <readSettingsFromEeprom+0x124>)
 80022e4:	7011      	strb	r1, [r2, #0]
	recieverIsPWM = dataRead[19];
 80022e6:	7cdb      	ldrb	r3, [r3, #19]
 80022e8:	4a18      	ldr	r2, [pc, #96]	@ (800234c <readSettingsFromEeprom+0x128>)
 80022ea:	7013      	strb	r3, [r2, #0]
}
 80022ec:	b006      	add	sp, #24
 80022ee:	bd10      	pop	{r4, pc}
			mWeapon = M2;
 80022f0:	4a10      	ldr	r2, [pc, #64]	@ (8002334 <readSettingsFromEeprom+0x110>)
 80022f2:	e7d4      	b.n	800229e <readSettingsFromEeprom+0x7a>
			mRight = M3;
 80022f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002330 <readSettingsFromEeprom+0x10c>)
 80022f6:	e7e5      	b.n	80022c4 <readSettingsFromEeprom+0xa0>
			mWeapon = M3;
 80022f8:	490e      	ldr	r1, [pc, #56]	@ (8002334 <readSettingsFromEeprom+0x110>)
 80022fa:	700a      	strb	r2, [r1, #0]
			break;
 80022fc:	e7e4      	b.n	80022c8 <readSettingsFromEeprom+0xa4>
 80022fe:	46c0      	nop			@ (mov r8, r8)
 8002300:	20000011 	.word	0x20000011
 8002304:	20000010 	.word	0x20000010
 8002308:	2000000f 	.word	0x2000000f
 800230c:	2000000e 	.word	0x2000000e
 8002310:	2000000d 	.word	0x2000000d
 8002314:	2000000c 	.word	0x2000000c
 8002318:	2000000b 	.word	0x2000000b
 800231c:	2000000a 	.word	0x2000000a
 8002320:	2000217a 	.word	0x2000217a
 8002324:	20002179 	.word	0x20002179
 8002328:	20002178 	.word	0x20002178
 800232c:	20002177 	.word	0x20002177
 8002330:	20000009 	.word	0x20000009
 8002334:	20000008 	.word	0x20000008
 8002338:	20002176 	.word	0x20002176
 800233c:	20000007 	.word	0x20000007
 8002340:	20000006 	.word	0x20000006
 8002344:	20000005 	.word	0x20000005
 8002348:	20000004 	.word	0x20000004
 800234c:	20000000 	.word	0x20000000

08002350 <loadSettingsFromEeprom>:
void loadSettingsFromEeprom() {
 8002350:	b510      	push	{r4, lr}
	readSettingsFromEeprom();
 8002352:	f7ff ff67 	bl	8002224 <readSettingsFromEeprom>
}
 8002356:	bd10      	pop	{r4, pc}

08002358 <write_byte_eeprom>:

void write_byte_eeprom(uint8_t address, uint8_t value) {
 8002358:	0002      	movs	r2, r0
	uint8_t data = value;
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 800235a:	23fa      	movs	r3, #250	@ 0xfa
	uint8_t data = value;
 800235c:	2017      	movs	r0, #23
void write_byte_eeprom(uint8_t address, uint8_t value) {
 800235e:	b510      	push	{r4, lr}
 8002360:	b086      	sub	sp, #24
	uint8_t data = value;
 8002362:	4468      	add	r0, sp
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8002364:	009b      	lsls	r3, r3, #2
	uint8_t data = value;
 8002366:	7001      	strb	r1, [r0, #0]
	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDRESS, address, 1, &data, 1, 1000);
 8002368:	9302      	str	r3, [sp, #8]
 800236a:	2301      	movs	r3, #1
 800236c:	4c05      	ldr	r4, [pc, #20]	@ (8002384 <write_byte_eeprom+0x2c>)
 800236e:	21a0      	movs	r1, #160	@ 0xa0
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	9000      	str	r0, [sp, #0]
 8002374:	0020      	movs	r0, r4
 8002376:	f001 fc29 	bl	8003bcc <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 800237a:	200a      	movs	r0, #10
 800237c:	f000 fe20 	bl	8002fc0 <HAL_Delay>
}
 8002380:	b006      	add	sp, #24
 8002382:	bd10      	pop	{r4, pc}
 8002384:	20002378 	.word	0x20002378

08002388 <storeSettingsToEeprom>:
void storeSettingsToEeprom() {
 8002388:	b530      	push	{r4, r5, lr}
	dataToStore[0] = thChannel;
 800238a:	4b35      	ldr	r3, [pc, #212]	@ (8002460 <storeSettingsToEeprom+0xd8>)
void storeSettingsToEeprom() {
 800238c:	b087      	sub	sp, #28
	dataToStore[0] = thChannel;
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	ac01      	add	r4, sp, #4
 8002392:	7023      	strb	r3, [r4, #0]
	dataToStore[1] = stChannel;
 8002394:	4b33      	ldr	r3, [pc, #204]	@ (8002464 <storeSettingsToEeprom+0xdc>)
 8002396:	2200      	movs	r2, #0
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	7063      	strb	r3, [r4, #1]
	dataToStore[2] = wpChannel;
 800239c:	4b32      	ldr	r3, [pc, #200]	@ (8002468 <storeSettingsToEeprom+0xe0>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	70a3      	strb	r3, [r4, #2]
	dataToStore[3] = s1Channel;
 80023a2:	4b32      	ldr	r3, [pc, #200]	@ (800246c <storeSettingsToEeprom+0xe4>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	70e3      	strb	r3, [r4, #3]
	dataToStore[4] = s2Channel;
 80023a8:	4b31      	ldr	r3, [pc, #196]	@ (8002470 <storeSettingsToEeprom+0xe8>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	7123      	strb	r3, [r4, #4]
	dataToStore[5] = armChannel;
 80023ae:	4b31      	ldr	r3, [pc, #196]	@ (8002474 <storeSettingsToEeprom+0xec>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	7163      	strb	r3, [r4, #5]
	dataToStore[6] = m1Rev;
 80023b4:	4b30      	ldr	r3, [pc, #192]	@ (8002478 <storeSettingsToEeprom+0xf0>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	71a3      	strb	r3, [r4, #6]
	dataToStore[7] = m2Rev;
 80023ba:	4b30      	ldr	r3, [pc, #192]	@ (800247c <storeSettingsToEeprom+0xf4>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	71e3      	strb	r3, [r4, #7]
	dataToStore[8] = m3Rev;
 80023c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002480 <storeSettingsToEeprom+0xf8>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	7223      	strb	r3, [r4, #8]
	dataToStore[9] = s1Rev;
 80023c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002484 <storeSettingsToEeprom+0xfc>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	7263      	strb	r3, [r4, #9]
	dataToStore[10] = s2Rev;
 80023cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002488 <storeSettingsToEeprom+0x100>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	72a3      	strb	r3, [r4, #10]
	switch (mLeft) {	// mLeft is code 0
 80023d2:	4b2e      	ldr	r3, [pc, #184]	@ (800248c <storeSettingsToEeprom+0x104>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d034      	beq.n	8002444 <storeSettingsToEeprom+0xbc>
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d034      	beq.n	8002448 <storeSettingsToEeprom+0xc0>
 80023de:	4293      	cmp	r3, r2
 80023e0:	d100      	bne.n	80023e4 <storeSettingsToEeprom+0x5c>
			dataToStore[11] = 0;
 80023e2:	72e3      	strb	r3, [r4, #11]
	switch (mRight) {	// mRight is code 1
 80023e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002490 <storeSettingsToEeprom+0x108>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d02f      	beq.n	800244c <storeSettingsToEeprom+0xc4>
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d02f      	beq.n	8002450 <storeSettingsToEeprom+0xc8>
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <storeSettingsToEeprom+0x70>
			dataToStore[11] = 1;
 80023f4:	3301      	adds	r3, #1
 80023f6:	72e3      	strb	r3, [r4, #11]
	switch (mWeapon) {	// mWeapon is code 2
 80023f8:	4b26      	ldr	r3, [pc, #152]	@ (8002494 <storeSettingsToEeprom+0x10c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d02a      	beq.n	8002456 <storeSettingsToEeprom+0xce>
 8002400:	2b02      	cmp	r3, #2
 8002402:	d02b      	beq.n	800245c <storeSettingsToEeprom+0xd4>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <storeSettingsToEeprom+0x84>
			dataToStore[11] = 2;
 8002408:	3302      	adds	r3, #2
 800240a:	72e3      	strb	r3, [r4, #11]
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800240c:	2500      	movs	r5, #0
	dataToStore[14] = weaponDoubleDirection;
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <storeSettingsToEeprom+0x110>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	73a3      	strb	r3, [r4, #14]
	dataToStore[15] = tankMixIsON;
 8002414:	4b21      	ldr	r3, [pc, #132]	@ (800249c <storeSettingsToEeprom+0x114>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	73e3      	strb	r3, [r4, #15]
	dataToStore[16] = noDisarm;
 800241a:	4b21      	ldr	r3, [pc, #132]	@ (80024a0 <storeSettingsToEeprom+0x118>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	7423      	strb	r3, [r4, #16]
	dataToStore[17] = limitVoltage;
 8002420:	4b20      	ldr	r3, [pc, #128]	@ (80024a4 <storeSettingsToEeprom+0x11c>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	7463      	strb	r3, [r4, #17]
	dataToStore[18] = cutOffVoltage;
 8002426:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <storeSettingsToEeprom+0x120>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	74a3      	strb	r3, [r4, #18]
	dataToStore[19] = recieverIsPWM;
 800242c:	4b1f      	ldr	r3, [pc, #124]	@ (80024ac <storeSettingsToEeprom+0x124>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	74e3      	strb	r3, [r4, #19]
		write_byte_eeprom(i, dataToStore[i]);
 8002432:	5d61      	ldrb	r1, [r4, r5]
 8002434:	b2e8      	uxtb	r0, r5
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 8002436:	3501      	adds	r5, #1
		write_byte_eeprom(i, dataToStore[i]);
 8002438:	f7ff ff8e 	bl	8002358 <write_byte_eeprom>
	for (int i = EEPROM_DATA_BEGIN_ADDRESS; i < SETTINGS_NUMBER; i++) {
 800243c:	2d14      	cmp	r5, #20
 800243e:	d1f8      	bne.n	8002432 <storeSettingsToEeprom+0xaa>
}
 8002440:	b007      	add	sp, #28
 8002442:	bd30      	pop	{r4, r5, pc}
			dataToStore[12] = 0;
 8002444:	7322      	strb	r2, [r4, #12]
			break;
 8002446:	e7cd      	b.n	80023e4 <storeSettingsToEeprom+0x5c>
			dataToStore[13] = 0;
 8002448:	7362      	strb	r2, [r4, #13]
			break;
 800244a:	e7cb      	b.n	80023e4 <storeSettingsToEeprom+0x5c>
			dataToStore[12] = 1;
 800244c:	7323      	strb	r3, [r4, #12]
			break;
 800244e:	e7d3      	b.n	80023f8 <storeSettingsToEeprom+0x70>
			dataToStore[13] = 1;
 8002450:	2301      	movs	r3, #1
 8002452:	7363      	strb	r3, [r4, #13]
			break;
 8002454:	e7d0      	b.n	80023f8 <storeSettingsToEeprom+0x70>
			dataToStore[12] = 2;
 8002456:	2302      	movs	r3, #2
 8002458:	7323      	strb	r3, [r4, #12]
			break;
 800245a:	e7d7      	b.n	800240c <storeSettingsToEeprom+0x84>
			dataToStore[13] = 2;
 800245c:	7363      	strb	r3, [r4, #13]
			break;
 800245e:	e7d5      	b.n	800240c <storeSettingsToEeprom+0x84>
 8002460:	20000011 	.word	0x20000011
 8002464:	20000010 	.word	0x20000010
 8002468:	2000000f 	.word	0x2000000f
 800246c:	2000000e 	.word	0x2000000e
 8002470:	2000000d 	.word	0x2000000d
 8002474:	2000000c 	.word	0x2000000c
 8002478:	2000000b 	.word	0x2000000b
 800247c:	2000000a 	.word	0x2000000a
 8002480:	2000217a 	.word	0x2000217a
 8002484:	20002179 	.word	0x20002179
 8002488:	20002178 	.word	0x20002178
 800248c:	20002177 	.word	0x20002177
 8002490:	20000009 	.word	0x20000009
 8002494:	20000008 	.word	0x20000008
 8002498:	20002176 	.word	0x20002176
 800249c:	20000007 	.word	0x20000007
 80024a0:	20000006 	.word	0x20000006
 80024a4:	20000005 	.word	0x20000005
 80024a8:	20000004 	.word	0x20000004
 80024ac:	20000000 	.word	0x20000000

080024b0 <serialPrintStatus>:

void serialPrintStatus() {
 80024b0:	b530      	push	{r4, r5, lr}
 80024b2:	b089      	sub	sp, #36	@ 0x24
	uint8_t string[30];
	// print voltage
	sprintf(string, "VBATT > %d\n", getBattVoltage());
 80024b4:	f7fe fec0 	bl	8001238 <getBattVoltage>
 80024b8:	4929      	ldr	r1, [pc, #164]	@ (8002560 <serialPrintStatus+0xb0>)
 80024ba:	0002      	movs	r2, r0
 80024bc:	4668      	mov	r0, sp
 80024be:	f005 f85d 	bl	800757c <siprintf>
	serialPrintString(string);
 80024c2:	4668      	mov	r0, sp
 80024c4:	f7ff fe8e 	bl	80021e4 <serialPrintString>
	HAL_Delay(1);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f000 fd79 	bl	8002fc0 <HAL_Delay>
	// which battery detected
	sprintf(string, "BATT > %d\n", batteryConfiguration);
 80024ce:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <serialPrintStatus+0xb4>)
 80024d0:	4925      	ldr	r1, [pc, #148]	@ (8002568 <serialPrintStatus+0xb8>)
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	4668      	mov	r0, sp
 80024d6:	f005 f851 	bl	800757c <siprintf>
	serialPrintString(string);
 80024da:	4668      	mov	r0, sp
 80024dc:	f7ff fe82 	bl	80021e4 <serialPrintString>
	HAL_Delay(1);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f000 fd6d 	bl	8002fc0 <HAL_Delay>
	// print RX channels
	if (recieverIsPWM) {	// print only four channel
 80024e6:	4b21      	ldr	r3, [pc, #132]	@ (800256c <serialPrintStatus+0xbc>)
		for (int i = 1; i < 5; i++) {
 80024e8:	2401      	movs	r4, #1
	if (recieverIsPWM) {	// print only four channel
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4d20      	ldr	r5, [pc, #128]	@ (8002570 <serialPrintStatus+0xc0>)
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d022      	beq.n	8002538 <serialPrintStatus+0x88>
			sprintf(string, "CH%d > %d\n", i, getChannelValuePercentage(i));
 80024f2:	b2e0      	uxtb	r0, r4
 80024f4:	f7ff fce2 	bl	8001ebc <getChannelValuePercentage>
 80024f8:	0022      	movs	r2, r4
 80024fa:	0003      	movs	r3, r0
 80024fc:	0029      	movs	r1, r5
 80024fe:	4668      	mov	r0, sp
 8002500:	f005 f83c 	bl	800757c <siprintf>
			serialPrintString(string);
 8002504:	4668      	mov	r0, sp
 8002506:	f7ff fe6d 	bl	80021e4 <serialPrintString>
		for (int i = 1; i < 5; i++) {
 800250a:	3401      	adds	r4, #1
			HAL_Delay(2);
 800250c:	2002      	movs	r0, #2
 800250e:	f000 fd57 	bl	8002fc0 <HAL_Delay>
		for (int i = 1; i < 5; i++) {
 8002512:	2c05      	cmp	r4, #5
 8002514:	d1ed      	bne.n	80024f2 <serialPrintStatus+0x42>
			serialPrintString(string);
			HAL_Delay(2);
		}
	}
	// print armed
	if (armed) {
 8002516:	4b17      	ldr	r3, [pc, #92]	@ (8002574 <serialPrintStatus+0xc4>)
		sprintf(string, "ARMED > TRUE\n");
 8002518:	4917      	ldr	r1, [pc, #92]	@ (8002578 <serialPrintStatus+0xc8>)
	if (armed) {
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d100      	bne.n	8002522 <serialPrintStatus+0x72>
		serialPrintString(string);
		HAL_Delay(1);
	} else {
		sprintf(string, "ARMED > FALSE\n");
 8002520:	4916      	ldr	r1, [pc, #88]	@ (800257c <serialPrintStatus+0xcc>)
 8002522:	4668      	mov	r0, sp
 8002524:	f005 f97b 	bl	800781e <strcpy>
		serialPrintString(string);
 8002528:	4668      	mov	r0, sp
 800252a:	f7ff fe5b 	bl	80021e4 <serialPrintString>
		HAL_Delay(1);
 800252e:	2001      	movs	r0, #1
 8002530:	f000 fd46 	bl	8002fc0 <HAL_Delay>
	}
}
 8002534:	b009      	add	sp, #36	@ 0x24
 8002536:	bd30      	pop	{r4, r5, pc}
			sprintf(string, "CH%d > %d\n", i, getChannelValuePercentage(i));
 8002538:	b2e0      	uxtb	r0, r4
 800253a:	f7ff fcbf 	bl	8001ebc <getChannelValuePercentage>
 800253e:	0022      	movs	r2, r4
 8002540:	0003      	movs	r3, r0
 8002542:	0029      	movs	r1, r5
 8002544:	4668      	mov	r0, sp
 8002546:	f005 f819 	bl	800757c <siprintf>
			serialPrintString(string);
 800254a:	4668      	mov	r0, sp
 800254c:	f7ff fe4a 	bl	80021e4 <serialPrintString>
		for (int i = 1; i < 9; i++) {
 8002550:	3401      	adds	r4, #1
			HAL_Delay(2);
 8002552:	2002      	movs	r0, #2
 8002554:	f000 fd34 	bl	8002fc0 <HAL_Delay>
		for (int i = 1; i < 9; i++) {
 8002558:	2c09      	cmp	r4, #9
 800255a:	d1ed      	bne.n	8002538 <serialPrintStatus+0x88>
 800255c:	e7db      	b.n	8002516 <serialPrintStatus+0x66>
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	08008894 	.word	0x08008894
 8002564:	2000217c 	.word	0x2000217c
 8002568:	08008895 	.word	0x08008895
 800256c:	20000000 	.word	0x20000000
 8002570:	080088a0 	.word	0x080088a0
 8002574:	2000217b 	.word	0x2000217b
 8002578:	080088ab 	.word	0x080088ab
 800257c:	080088b9 	.word	0x080088b9

08002580 <serialPrintSettings>:

void serialPrintSettings() {
 8002580:	b570      	push	{r4, r5, r6, lr}
	uint8_t dataRead[SETTINGS_NUMBER];
	dataRead[0] = thChannel;
 8002582:	4b44      	ldr	r3, [pc, #272]	@ (8002694 <serialPrintSettings+0x114>)
void serialPrintSettings() {
 8002584:	b0a4      	sub	sp, #144	@ 0x90
	dataRead[0] = thChannel;
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	ac03      	add	r4, sp, #12
 800258a:	7023      	strb	r3, [r4, #0]
	dataRead[1] = stChannel;
 800258c:	4b42      	ldr	r3, [pc, #264]	@ (8002698 <serialPrintSettings+0x118>)
 800258e:	2200      	movs	r2, #0
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	7063      	strb	r3, [r4, #1]
	dataRead[2] = wpChannel;
 8002594:	4b41      	ldr	r3, [pc, #260]	@ (800269c <serialPrintSettings+0x11c>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	70a3      	strb	r3, [r4, #2]
	dataRead[3] = s1Channel;
 800259a:	4b41      	ldr	r3, [pc, #260]	@ (80026a0 <serialPrintSettings+0x120>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	70e3      	strb	r3, [r4, #3]
	dataRead[4] = s2Channel;
 80025a0:	4b40      	ldr	r3, [pc, #256]	@ (80026a4 <serialPrintSettings+0x124>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	7123      	strb	r3, [r4, #4]
	dataRead[5] = armChannel;
 80025a6:	4b40      	ldr	r3, [pc, #256]	@ (80026a8 <serialPrintSettings+0x128>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	7163      	strb	r3, [r4, #5]

	dataRead[6] = m1Rev;
 80025ac:	4b3f      	ldr	r3, [pc, #252]	@ (80026ac <serialPrintSettings+0x12c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	71a3      	strb	r3, [r4, #6]
	dataRead[7] = m2Rev;
 80025b2:	4b3f      	ldr	r3, [pc, #252]	@ (80026b0 <serialPrintSettings+0x130>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	71e3      	strb	r3, [r4, #7]
	dataRead[8] = m3Rev;
 80025b8:	4b3e      	ldr	r3, [pc, #248]	@ (80026b4 <serialPrintSettings+0x134>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	7223      	strb	r3, [r4, #8]
	dataRead[9] = s1Rev;
 80025be:	4b3e      	ldr	r3, [pc, #248]	@ (80026b8 <serialPrintSettings+0x138>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	7263      	strb	r3, [r4, #9]
	dataRead[10] = s2Rev;
 80025c4:	4b3d      	ldr	r3, [pc, #244]	@ (80026bc <serialPrintSettings+0x13c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	72a3      	strb	r3, [r4, #10]

	switch (mLeft) {	// mleft is code 0
 80025ca:	4b3d      	ldr	r3, [pc, #244]	@ (80026c0 <serialPrintSettings+0x140>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d051      	beq.n	8002676 <serialPrintSettings+0xf6>
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d051      	beq.n	800267a <serialPrintSettings+0xfa>
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d100      	bne.n	80025dc <serialPrintSettings+0x5c>
		case M1:
			dataRead[11] = 0;
 80025da:	72e3      	strb	r3, [r4, #11]
		case M3:
			dataRead[13] = 0;
			break;
	}

	switch (mRight) {	// mright is code 1
 80025dc:	4b39      	ldr	r3, [pc, #228]	@ (80026c4 <serialPrintSettings+0x144>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d04c      	beq.n	800267e <serialPrintSettings+0xfe>
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d04c      	beq.n	8002682 <serialPrintSettings+0x102>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <serialPrintSettings+0x70>
		case M1:
			dataRead[11] = 1;
 80025ec:	3301      	adds	r3, #1
 80025ee:	72e3      	strb	r3, [r4, #11]
		case M3:
			dataRead[13] = 1;
			break;
	}

	switch (mWeapon) {	// mweapon is code 2
 80025f0:	4b35      	ldr	r3, [pc, #212]	@ (80026c8 <serialPrintSettings+0x148>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d047      	beq.n	8002688 <serialPrintSettings+0x108>
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d048      	beq.n	800268e <serialPrintSettings+0x10e>
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <serialPrintSettings+0x84>
		case M1:
			dataRead[11] = 2;
 8002600:	3302      	adds	r3, #2
 8002602:	72e3      	strb	r3, [r4, #11]
		case M3:
			dataRead[13] = 2;
			break;
	}

	dataRead[14] = weaponDoubleDirection;
 8002604:	4b31      	ldr	r3, [pc, #196]	@ (80026cc <serialPrintSettings+0x14c>)
	dataRead[16] = noDisarm;
	dataRead[17] = limitVoltage;
	dataRead[18] = cutOffVoltage;
	dataRead[19] = recieverIsPWM;

	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 8002606:	ae10      	add	r6, sp, #64	@ 0x40
	dataRead[14] = weaponDoubleDirection;
 8002608:	781b      	ldrb	r3, [r3, #0]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 800260a:	2250      	movs	r2, #80	@ 0x50
	dataRead[14] = weaponDoubleDirection;
 800260c:	73a3      	strb	r3, [r4, #14]
	dataRead[15] = tankMixIsON;
 800260e:	4b30      	ldr	r3, [pc, #192]	@ (80026d0 <serialPrintSettings+0x150>)
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 8002610:	4930      	ldr	r1, [pc, #192]	@ (80026d4 <serialPrintSettings+0x154>)
	dataRead[15] = tankMixIsON;
 8002612:	781b      	ldrb	r3, [r3, #0]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 8002614:	0030      	movs	r0, r6
	dataRead[15] = tankMixIsON;
 8002616:	73e3      	strb	r3, [r4, #15]
	dataRead[16] = noDisarm;
 8002618:	4b2f      	ldr	r3, [pc, #188]	@ (80026d8 <serialPrintSettings+0x158>)
			(const uint8_t*) COMMAND_RXPWMMODE };

	uint8_t c[] = "\nSETTINGS:\n";
	serialPrintString(c);
	HAL_Delay(0);
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 800261a:	2500      	movs	r5, #0
	dataRead[16] = noDisarm;
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	7423      	strb	r3, [r4, #16]
	dataRead[17] = limitVoltage;
 8002620:	4b2e      	ldr	r3, [pc, #184]	@ (80026dc <serialPrintSettings+0x15c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	7463      	strb	r3, [r4, #17]
	dataRead[18] = cutOffVoltage;
 8002626:	4b2e      	ldr	r3, [pc, #184]	@ (80026e0 <serialPrintSettings+0x160>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	74a3      	strb	r3, [r4, #18]
	dataRead[19] = recieverIsPWM;
 800262c:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <serialPrintSettings+0x164>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	74e3      	strb	r3, [r4, #19]
	const uint8_t *commands[] = { (const uint8_t*) COMMAND_TH2CH, (const uint8_t*) COMMAND_ST2CH,
 8002632:	f005 f8fc 	bl	800782e <memcpy>
	uint8_t c[] = "\nSETTINGS:\n";
 8002636:	220c      	movs	r2, #12
 8002638:	492b      	ldr	r1, [pc, #172]	@ (80026e8 <serialPrintSettings+0x168>)
 800263a:	4668      	mov	r0, sp
 800263c:	f005 f8f7 	bl	800782e <memcpy>
	serialPrintString(c);
 8002640:	4668      	mov	r0, sp
 8002642:	f7ff fdcf 	bl	80021e4 <serialPrintString>
	HAL_Delay(0);
 8002646:	2000      	movs	r0, #0
 8002648:	f000 fcba 	bl	8002fc0 <HAL_Delay>
		uint8_t string[30];
		sprintf(string, "%s > %d\n", commands[i], dataRead[i]);
 800264c:	00aa      	lsls	r2, r5, #2
 800264e:	5d63      	ldrb	r3, [r4, r5]
 8002650:	4926      	ldr	r1, [pc, #152]	@ (80026ec <serialPrintSettings+0x16c>)
 8002652:	58b2      	ldr	r2, [r6, r2]
 8002654:	a808      	add	r0, sp, #32
 8002656:	f004 ff91 	bl	800757c <siprintf>
		serialPrintString(string);
 800265a:	a808      	add	r0, sp, #32
 800265c:	f7ff fdc2 	bl	80021e4 <serialPrintString>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 8002660:	3501      	adds	r5, #1
		HAL_Delay(10);
 8002662:	200a      	movs	r0, #10
 8002664:	f000 fcac 	bl	8002fc0 <HAL_Delay>
	for (int i = 0; i < SETTINGS_NUMBER; i++) {
 8002668:	2d14      	cmp	r5, #20
 800266a:	d1ef      	bne.n	800264c <serialPrintSettings+0xcc>
	}
	serialPrintString("\nwrite COMAND > VALUE (e.g. TH2CH>3)\nthan SAVE>1 to store all settings on EEPROM\n");
 800266c:	4820      	ldr	r0, [pc, #128]	@ (80026f0 <serialPrintSettings+0x170>)
 800266e:	f7ff fdb9 	bl	80021e4 <serialPrintString>
}
 8002672:	b024      	add	sp, #144	@ 0x90
 8002674:	bd70      	pop	{r4, r5, r6, pc}
			dataRead[12] = 0;
 8002676:	7322      	strb	r2, [r4, #12]
			break;
 8002678:	e7b0      	b.n	80025dc <serialPrintSettings+0x5c>
			dataRead[13] = 0;
 800267a:	7362      	strb	r2, [r4, #13]
			break;
 800267c:	e7ae      	b.n	80025dc <serialPrintSettings+0x5c>
			dataRead[12] = 1;
 800267e:	7323      	strb	r3, [r4, #12]
			break;
 8002680:	e7b6      	b.n	80025f0 <serialPrintSettings+0x70>
			dataRead[13] = 1;
 8002682:	2301      	movs	r3, #1
 8002684:	7363      	strb	r3, [r4, #13]
			break;
 8002686:	e7b3      	b.n	80025f0 <serialPrintSettings+0x70>
			dataRead[12] = 2;
 8002688:	2302      	movs	r3, #2
 800268a:	7323      	strb	r3, [r4, #12]
			break;
 800268c:	e7ba      	b.n	8002604 <serialPrintSettings+0x84>
			dataRead[13] = 2;
 800268e:	7363      	strb	r3, [r4, #13]
			break;
 8002690:	e7b8      	b.n	8002604 <serialPrintSettings+0x84>
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	20000011 	.word	0x20000011
 8002698:	20000010 	.word	0x20000010
 800269c:	2000000f 	.word	0x2000000f
 80026a0:	2000000e 	.word	0x2000000e
 80026a4:	2000000d 	.word	0x2000000d
 80026a8:	2000000c 	.word	0x2000000c
 80026ac:	2000000b 	.word	0x2000000b
 80026b0:	2000000a 	.word	0x2000000a
 80026b4:	2000217a 	.word	0x2000217a
 80026b8:	20002179 	.word	0x20002179
 80026bc:	20002178 	.word	0x20002178
 80026c0:	20002177 	.word	0x20002177
 80026c4:	20000009 	.word	0x20000009
 80026c8:	20000008 	.word	0x20000008
 80026cc:	20002176 	.word	0x20002176
 80026d0:	20000007 	.word	0x20000007
 80026d4:	08008830 	.word	0x08008830
 80026d8:	20000006 	.word	0x20000006
 80026dc:	20000005 	.word	0x20000005
 80026e0:	20000004 	.word	0x20000004
 80026e4:	20000000 	.word	0x20000000
 80026e8:	08008923 	.word	0x08008923
 80026ec:	080088c8 	.word	0x080088c8
 80026f0:	080088d1 	.word	0x080088d1

080026f4 <modifySettingsWithCommand>:
int modifySettingsWithCommand() {
 80026f4:	b510      	push	{r4, lr}
 80026f6:	b086      	sub	sp, #24
	Command c = decodeCommand(buffer);
 80026f8:	49cc      	ldr	r1, [pc, #816]	@ (8002a2c <modifySettingsWithCommand+0x338>)
 80026fa:	a801      	add	r0, sp, #4
 80026fc:	f7ff fd3a 	bl	8002174 <decodeCommand>
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 8002700:	49cb      	ldr	r1, [pc, #812]	@ (8002a30 <modifySettingsWithCommand+0x33c>)
 8002702:	a801      	add	r0, sp, #4
 8002704:	f7fd fd00 	bl	8000108 <strcmp>
	uint8_t isOK = FALSE;
 8002708:	2400      	movs	r4, #0
	if (strcmp(c.type, COMMAND_TH2CH) == 0) {	// COMMAND_TH2CH recieved
 800270a:	42a0      	cmp	r0, r4
 800270c:	d107      	bne.n	800271e <modifySettingsWithCommand+0x2a>
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 800270e:	230e      	movs	r3, #14
 8002710:	446b      	add	r3, sp
 8002712:	0018      	movs	r0, r3
 8002714:	f004 fdd1 	bl	80072ba <atoi>
 8002718:	4bc6      	ldr	r3, [pc, #792]	@ (8002a34 <modifySettingsWithCommand+0x340>)
		isOK = TRUE;
 800271a:	3401      	adds	r4, #1
		thChannel = atoi(c.value);	// convert value string into integer value (the value of the channel)
 800271c:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_ST2CH) == 0) {
 800271e:	49c6      	ldr	r1, [pc, #792]	@ (8002a38 <modifySettingsWithCommand+0x344>)
 8002720:	a801      	add	r0, sp, #4
 8002722:	f7fd fcf1 	bl	8000108 <strcmp>
 8002726:	2800      	cmp	r0, #0
 8002728:	d107      	bne.n	800273a <modifySettingsWithCommand+0x46>
		stChannel = atoi(c.value);
 800272a:	230e      	movs	r3, #14
 800272c:	446b      	add	r3, sp
 800272e:	0018      	movs	r0, r3
 8002730:	f004 fdc3 	bl	80072ba <atoi>
		isOK = TRUE;
 8002734:	2401      	movs	r4, #1
		stChannel = atoi(c.value);
 8002736:	4bc1      	ldr	r3, [pc, #772]	@ (8002a3c <modifySettingsWithCommand+0x348>)
 8002738:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_WP2CH) == 0) {
 800273a:	49c1      	ldr	r1, [pc, #772]	@ (8002a40 <modifySettingsWithCommand+0x34c>)
 800273c:	a801      	add	r0, sp, #4
 800273e:	f7fd fce3 	bl	8000108 <strcmp>
 8002742:	2800      	cmp	r0, #0
 8002744:	d107      	bne.n	8002756 <modifySettingsWithCommand+0x62>
		wpChannel = atoi(c.value);
 8002746:	230e      	movs	r3, #14
 8002748:	446b      	add	r3, sp
 800274a:	0018      	movs	r0, r3
 800274c:	f004 fdb5 	bl	80072ba <atoi>
		isOK = TRUE;
 8002750:	2401      	movs	r4, #1
		wpChannel = atoi(c.value);
 8002752:	4bbc      	ldr	r3, [pc, #752]	@ (8002a44 <modifySettingsWithCommand+0x350>)
 8002754:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S12CH) == 0) {
 8002756:	49bc      	ldr	r1, [pc, #752]	@ (8002a48 <modifySettingsWithCommand+0x354>)
 8002758:	a801      	add	r0, sp, #4
 800275a:	f7fd fcd5 	bl	8000108 <strcmp>
 800275e:	2800      	cmp	r0, #0
 8002760:	d107      	bne.n	8002772 <modifySettingsWithCommand+0x7e>
		s1Channel = atoi(c.value);
 8002762:	230e      	movs	r3, #14
 8002764:	446b      	add	r3, sp
 8002766:	0018      	movs	r0, r3
 8002768:	f004 fda7 	bl	80072ba <atoi>
		isOK = TRUE;
 800276c:	2401      	movs	r4, #1
		s1Channel = atoi(c.value);
 800276e:	4bb7      	ldr	r3, [pc, #732]	@ (8002a4c <modifySettingsWithCommand+0x358>)
 8002770:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S22CH) == 0) {
 8002772:	49b7      	ldr	r1, [pc, #732]	@ (8002a50 <modifySettingsWithCommand+0x35c>)
 8002774:	a801      	add	r0, sp, #4
 8002776:	f7fd fcc7 	bl	8000108 <strcmp>
 800277a:	2800      	cmp	r0, #0
 800277c:	d107      	bne.n	800278e <modifySettingsWithCommand+0x9a>
		s2Channel = atoi(c.value);
 800277e:	230e      	movs	r3, #14
 8002780:	446b      	add	r3, sp
 8002782:	0018      	movs	r0, r3
 8002784:	f004 fd99 	bl	80072ba <atoi>
		isOK = TRUE;
 8002788:	2401      	movs	r4, #1
		s2Channel = atoi(c.value);
 800278a:	4bb2      	ldr	r3, [pc, #712]	@ (8002a54 <modifySettingsWithCommand+0x360>)
 800278c:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_ARM) == 0) {
 800278e:	49b2      	ldr	r1, [pc, #712]	@ (8002a58 <modifySettingsWithCommand+0x364>)
 8002790:	a801      	add	r0, sp, #4
 8002792:	f7fd fcb9 	bl	8000108 <strcmp>
 8002796:	2800      	cmp	r0, #0
 8002798:	d107      	bne.n	80027aa <modifySettingsWithCommand+0xb6>
		armChannel = atoi(c.value);
 800279a:	230e      	movs	r3, #14
 800279c:	446b      	add	r3, sp
 800279e:	0018      	movs	r0, r3
 80027a0:	f004 fd8b 	bl	80072ba <atoi>
		isOK = TRUE;
 80027a4:	2401      	movs	r4, #1
		armChannel = atoi(c.value);
 80027a6:	4bad      	ldr	r3, [pc, #692]	@ (8002a5c <modifySettingsWithCommand+0x368>)
 80027a8:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M1REV) == 0) {
 80027aa:	49ad      	ldr	r1, [pc, #692]	@ (8002a60 <modifySettingsWithCommand+0x36c>)
 80027ac:	a801      	add	r0, sp, #4
 80027ae:	f7fd fcab 	bl	8000108 <strcmp>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d107      	bne.n	80027c6 <modifySettingsWithCommand+0xd2>
		m1Rev = atoi(c.value);
 80027b6:	230e      	movs	r3, #14
 80027b8:	446b      	add	r3, sp
 80027ba:	0018      	movs	r0, r3
 80027bc:	f004 fd7d 	bl	80072ba <atoi>
		isOK = TRUE;
 80027c0:	2401      	movs	r4, #1
		m1Rev = atoi(c.value);
 80027c2:	4ba8      	ldr	r3, [pc, #672]	@ (8002a64 <modifySettingsWithCommand+0x370>)
 80027c4:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M2REV) == 0) {
 80027c6:	49a8      	ldr	r1, [pc, #672]	@ (8002a68 <modifySettingsWithCommand+0x374>)
 80027c8:	a801      	add	r0, sp, #4
 80027ca:	f7fd fc9d 	bl	8000108 <strcmp>
 80027ce:	2800      	cmp	r0, #0
 80027d0:	d107      	bne.n	80027e2 <modifySettingsWithCommand+0xee>
		m2Rev = atoi(c.value);
 80027d2:	230e      	movs	r3, #14
 80027d4:	446b      	add	r3, sp
 80027d6:	0018      	movs	r0, r3
 80027d8:	f004 fd6f 	bl	80072ba <atoi>
		isOK = TRUE;
 80027dc:	2401      	movs	r4, #1
		m2Rev = atoi(c.value);
 80027de:	4ba3      	ldr	r3, [pc, #652]	@ (8002a6c <modifySettingsWithCommand+0x378>)
 80027e0:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M3REV) == 0) {
 80027e2:	49a3      	ldr	r1, [pc, #652]	@ (8002a70 <modifySettingsWithCommand+0x37c>)
 80027e4:	a801      	add	r0, sp, #4
 80027e6:	f7fd fc8f 	bl	8000108 <strcmp>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d107      	bne.n	80027fe <modifySettingsWithCommand+0x10a>
		m3Rev = atoi(c.value);
 80027ee:	230e      	movs	r3, #14
 80027f0:	446b      	add	r3, sp
 80027f2:	0018      	movs	r0, r3
 80027f4:	f004 fd61 	bl	80072ba <atoi>
		isOK = TRUE;
 80027f8:	2401      	movs	r4, #1
		m3Rev = atoi(c.value);
 80027fa:	4b9e      	ldr	r3, [pc, #632]	@ (8002a74 <modifySettingsWithCommand+0x380>)
 80027fc:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S1REV) == 0) {
 80027fe:	499e      	ldr	r1, [pc, #632]	@ (8002a78 <modifySettingsWithCommand+0x384>)
 8002800:	a801      	add	r0, sp, #4
 8002802:	f7fd fc81 	bl	8000108 <strcmp>
 8002806:	2800      	cmp	r0, #0
 8002808:	d107      	bne.n	800281a <modifySettingsWithCommand+0x126>
		s1Rev = atoi(c.value);
 800280a:	230e      	movs	r3, #14
 800280c:	446b      	add	r3, sp
 800280e:	0018      	movs	r0, r3
 8002810:	f004 fd53 	bl	80072ba <atoi>
		isOK = TRUE;
 8002814:	2401      	movs	r4, #1
		s1Rev = atoi(c.value);
 8002816:	4b99      	ldr	r3, [pc, #612]	@ (8002a7c <modifySettingsWithCommand+0x388>)
 8002818:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_S2REV) == 0) {
 800281a:	4999      	ldr	r1, [pc, #612]	@ (8002a80 <modifySettingsWithCommand+0x38c>)
 800281c:	a801      	add	r0, sp, #4
 800281e:	f7fd fc73 	bl	8000108 <strcmp>
 8002822:	2800      	cmp	r0, #0
 8002824:	d107      	bne.n	8002836 <modifySettingsWithCommand+0x142>
		s2Rev = atoi(c.value);
 8002826:	230e      	movs	r3, #14
 8002828:	446b      	add	r3, sp
 800282a:	0018      	movs	r0, r3
 800282c:	f004 fd45 	bl	80072ba <atoi>
		isOK = TRUE;
 8002830:	2401      	movs	r4, #1
		s2Rev = atoi(c.value);
 8002832:	4b94      	ldr	r3, [pc, #592]	@ (8002a84 <modifySettingsWithCommand+0x390>)
 8002834:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M1ASS) == 0) {
 8002836:	4994      	ldr	r1, [pc, #592]	@ (8002a88 <modifySettingsWithCommand+0x394>)
 8002838:	a801      	add	r0, sp, #4
 800283a:	f7fd fc65 	bl	8000108 <strcmp>
 800283e:	2800      	cmp	r0, #0
 8002840:	d120      	bne.n	8002884 <modifySettingsWithCommand+0x190>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8002842:	230e      	movs	r3, #14
 8002844:	446b      	add	r3, sp
 8002846:	0018      	movs	r0, r3
 8002848:	4990      	ldr	r1, [pc, #576]	@ (8002a8c <modifySettingsWithCommand+0x398>)
 800284a:	f7fd fc5d 	bl	8000108 <strcmp>
 800284e:	2800      	cmp	r0, #0
 8002850:	d102      	bne.n	8002858 <modifySettingsWithCommand+0x164>
			isOK = TRUE;
 8002852:	2401      	movs	r4, #1
			mLeft = M1;
 8002854:	4b8e      	ldr	r3, [pc, #568]	@ (8002a90 <modifySettingsWithCommand+0x39c>)
 8002856:	7018      	strb	r0, [r3, #0]
		if (strcmp(c.value, VALUE_MR) == 0) {
 8002858:	230e      	movs	r3, #14
 800285a:	446b      	add	r3, sp
 800285c:	0018      	movs	r0, r3
 800285e:	498d      	ldr	r1, [pc, #564]	@ (8002a94 <modifySettingsWithCommand+0x3a0>)
 8002860:	f7fd fc52 	bl	8000108 <strcmp>
 8002864:	2800      	cmp	r0, #0
 8002866:	d102      	bne.n	800286e <modifySettingsWithCommand+0x17a>
			isOK = TRUE;
 8002868:	2401      	movs	r4, #1
			mRight = M1;
 800286a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a98 <modifySettingsWithCommand+0x3a4>)
 800286c:	7018      	strb	r0, [r3, #0]
		if (strcmp(c.value, VALUE_WP) == 0) {
 800286e:	230e      	movs	r3, #14
 8002870:	446b      	add	r3, sp
 8002872:	0018      	movs	r0, r3
 8002874:	4989      	ldr	r1, [pc, #548]	@ (8002a9c <modifySettingsWithCommand+0x3a8>)
 8002876:	f7fd fc47 	bl	8000108 <strcmp>
 800287a:	2800      	cmp	r0, #0
 800287c:	d102      	bne.n	8002884 <modifySettingsWithCommand+0x190>
			isOK = TRUE;
 800287e:	2401      	movs	r4, #1
			mWeapon = M1;
 8002880:	4b87      	ldr	r3, [pc, #540]	@ (8002aa0 <modifySettingsWithCommand+0x3ac>)
 8002882:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_M2ASS) == 0) {
 8002884:	4987      	ldr	r1, [pc, #540]	@ (8002aa4 <modifySettingsWithCommand+0x3b0>)
 8002886:	a801      	add	r0, sp, #4
 8002888:	f7fd fc3e 	bl	8000108 <strcmp>
 800288c:	2800      	cmp	r0, #0
 800288e:	d120      	bne.n	80028d2 <modifySettingsWithCommand+0x1de>
		if (strcmp(c.value, VALUE_ML) == 0) {
 8002890:	230e      	movs	r3, #14
 8002892:	446b      	add	r3, sp
 8002894:	0018      	movs	r0, r3
 8002896:	497d      	ldr	r1, [pc, #500]	@ (8002a8c <modifySettingsWithCommand+0x398>)
 8002898:	f7fd fc36 	bl	8000108 <strcmp>
 800289c:	2800      	cmp	r0, #0
 800289e:	d102      	bne.n	80028a6 <modifySettingsWithCommand+0x1b2>
			mLeft = M2;
 80028a0:	2401      	movs	r4, #1
 80028a2:	4b7b      	ldr	r3, [pc, #492]	@ (8002a90 <modifySettingsWithCommand+0x39c>)
 80028a4:	701c      	strb	r4, [r3, #0]
		if (strcmp(c.value, VALUE_MR) == 0) {
 80028a6:	230e      	movs	r3, #14
 80028a8:	446b      	add	r3, sp
 80028aa:	0018      	movs	r0, r3
 80028ac:	4979      	ldr	r1, [pc, #484]	@ (8002a94 <modifySettingsWithCommand+0x3a0>)
 80028ae:	f7fd fc2b 	bl	8000108 <strcmp>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d102      	bne.n	80028bc <modifySettingsWithCommand+0x1c8>
			mRight = M2;
 80028b6:	2401      	movs	r4, #1
 80028b8:	4b77      	ldr	r3, [pc, #476]	@ (8002a98 <modifySettingsWithCommand+0x3a4>)
 80028ba:	701c      	strb	r4, [r3, #0]
		if (strcmp(c.value, VALUE_WP) == 0) {
 80028bc:	230e      	movs	r3, #14
 80028be:	446b      	add	r3, sp
 80028c0:	0018      	movs	r0, r3
 80028c2:	4976      	ldr	r1, [pc, #472]	@ (8002a9c <modifySettingsWithCommand+0x3a8>)
 80028c4:	f7fd fc20 	bl	8000108 <strcmp>
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d102      	bne.n	80028d2 <modifySettingsWithCommand+0x1de>
			mWeapon = M2;
 80028cc:	2401      	movs	r4, #1
 80028ce:	4b74      	ldr	r3, [pc, #464]	@ (8002aa0 <modifySettingsWithCommand+0x3ac>)
 80028d0:	701c      	strb	r4, [r3, #0]
	if (strcmp(c.type, COMMAND_M3ASS) == 0) {
 80028d2:	4975      	ldr	r1, [pc, #468]	@ (8002aa8 <modifySettingsWithCommand+0x3b4>)
 80028d4:	a801      	add	r0, sp, #4
 80028d6:	f7fd fc17 	bl	8000108 <strcmp>
 80028da:	2800      	cmp	r0, #0
 80028dc:	d123      	bne.n	8002926 <modifySettingsWithCommand+0x232>
		if (strcmp(c.value, VALUE_ML) == 0) {
 80028de:	230e      	movs	r3, #14
 80028e0:	446b      	add	r3, sp
 80028e2:	0018      	movs	r0, r3
 80028e4:	4969      	ldr	r1, [pc, #420]	@ (8002a8c <modifySettingsWithCommand+0x398>)
 80028e6:	f7fd fc0f 	bl	8000108 <strcmp>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d103      	bne.n	80028f6 <modifySettingsWithCommand+0x202>
			mLeft = M3;
 80028ee:	2202      	movs	r2, #2
			isOK = TRUE;
 80028f0:	2401      	movs	r4, #1
			mLeft = M3;
 80028f2:	4b67      	ldr	r3, [pc, #412]	@ (8002a90 <modifySettingsWithCommand+0x39c>)
 80028f4:	701a      	strb	r2, [r3, #0]
		if (strcmp(c.value, VALUE_MR) == 0) {
 80028f6:	230e      	movs	r3, #14
 80028f8:	446b      	add	r3, sp
 80028fa:	0018      	movs	r0, r3
 80028fc:	4965      	ldr	r1, [pc, #404]	@ (8002a94 <modifySettingsWithCommand+0x3a0>)
 80028fe:	f7fd fc03 	bl	8000108 <strcmp>
 8002902:	2800      	cmp	r0, #0
 8002904:	d103      	bne.n	800290e <modifySettingsWithCommand+0x21a>
			mRight = M3;
 8002906:	2202      	movs	r2, #2
			isOK = TRUE;
 8002908:	2401      	movs	r4, #1
			mRight = M3;
 800290a:	4b63      	ldr	r3, [pc, #396]	@ (8002a98 <modifySettingsWithCommand+0x3a4>)
 800290c:	701a      	strb	r2, [r3, #0]
		if (strcmp(c.value, VALUE_WP) == 0) {
 800290e:	230e      	movs	r3, #14
 8002910:	446b      	add	r3, sp
 8002912:	0018      	movs	r0, r3
 8002914:	4961      	ldr	r1, [pc, #388]	@ (8002a9c <modifySettingsWithCommand+0x3a8>)
 8002916:	f7fd fbf7 	bl	8000108 <strcmp>
 800291a:	2800      	cmp	r0, #0
 800291c:	d103      	bne.n	8002926 <modifySettingsWithCommand+0x232>
			mWeapon = M3;
 800291e:	2202      	movs	r2, #2
			isOK = TRUE;
 8002920:	2401      	movs	r4, #1
			mWeapon = M3;
 8002922:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa0 <modifySettingsWithCommand+0x3ac>)
 8002924:	701a      	strb	r2, [r3, #0]
	if (strcmp(c.type, COMMAND_WPDD) == 0) {
 8002926:	4961      	ldr	r1, [pc, #388]	@ (8002aac <modifySettingsWithCommand+0x3b8>)
 8002928:	a801      	add	r0, sp, #4
 800292a:	f7fd fbed 	bl	8000108 <strcmp>
 800292e:	2800      	cmp	r0, #0
 8002930:	d107      	bne.n	8002942 <modifySettingsWithCommand+0x24e>
		weaponDoubleDirection = atoi(c.value);
 8002932:	230e      	movs	r3, #14
 8002934:	446b      	add	r3, sp
 8002936:	0018      	movs	r0, r3
 8002938:	f004 fcbf 	bl	80072ba <atoi>
		isOK = TRUE;
 800293c:	2401      	movs	r4, #1
		weaponDoubleDirection = atoi(c.value);
 800293e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab0 <modifySettingsWithCommand+0x3bc>)
 8002940:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_TANKON) == 0) {
 8002942:	495c      	ldr	r1, [pc, #368]	@ (8002ab4 <modifySettingsWithCommand+0x3c0>)
 8002944:	a801      	add	r0, sp, #4
 8002946:	f7fd fbdf 	bl	8000108 <strcmp>
 800294a:	2800      	cmp	r0, #0
 800294c:	d107      	bne.n	800295e <modifySettingsWithCommand+0x26a>
		tankMixIsON = atoi(c.value);
 800294e:	230e      	movs	r3, #14
 8002950:	446b      	add	r3, sp
 8002952:	0018      	movs	r0, r3
 8002954:	f004 fcb1 	bl	80072ba <atoi>
		isOK = TRUE;
 8002958:	2401      	movs	r4, #1
		tankMixIsON = atoi(c.value);
 800295a:	4b57      	ldr	r3, [pc, #348]	@ (8002ab8 <modifySettingsWithCommand+0x3c4>)
 800295c:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_NODISARM) == 0) {
 800295e:	4957      	ldr	r1, [pc, #348]	@ (8002abc <modifySettingsWithCommand+0x3c8>)
 8002960:	a801      	add	r0, sp, #4
 8002962:	f7fd fbd1 	bl	8000108 <strcmp>
 8002966:	2800      	cmp	r0, #0
 8002968:	d107      	bne.n	800297a <modifySettingsWithCommand+0x286>
		noDisarm = atoi(c.value);
 800296a:	230e      	movs	r3, #14
 800296c:	446b      	add	r3, sp
 800296e:	0018      	movs	r0, r3
 8002970:	f004 fca3 	bl	80072ba <atoi>
		isOK = TRUE;
 8002974:	2401      	movs	r4, #1
		noDisarm = atoi(c.value);
 8002976:	4b52      	ldr	r3, [pc, #328]	@ (8002ac0 <modifySettingsWithCommand+0x3cc>)
 8002978:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_LIMITVOLTAGE) == 0) {
 800297a:	4952      	ldr	r1, [pc, #328]	@ (8002ac4 <modifySettingsWithCommand+0x3d0>)
 800297c:	a801      	add	r0, sp, #4
 800297e:	f7fd fbc3 	bl	8000108 <strcmp>
 8002982:	2800      	cmp	r0, #0
 8002984:	d107      	bne.n	8002996 <modifySettingsWithCommand+0x2a2>
		limitVoltage = atoi(c.value);
 8002986:	230e      	movs	r3, #14
 8002988:	446b      	add	r3, sp
 800298a:	0018      	movs	r0, r3
 800298c:	f004 fc95 	bl	80072ba <atoi>
		isOK = TRUE;
 8002990:	2401      	movs	r4, #1
		limitVoltage = atoi(c.value);
 8002992:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac8 <modifySettingsWithCommand+0x3d4>)
 8002994:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_CUTOFFVOLTAGE) == 0) {
 8002996:	494d      	ldr	r1, [pc, #308]	@ (8002acc <modifySettingsWithCommand+0x3d8>)
 8002998:	a801      	add	r0, sp, #4
 800299a:	f7fd fbb5 	bl	8000108 <strcmp>
 800299e:	2800      	cmp	r0, #0
 80029a0:	d107      	bne.n	80029b2 <modifySettingsWithCommand+0x2be>
		cutOffVoltage = atoi(c.value);
 80029a2:	230e      	movs	r3, #14
 80029a4:	446b      	add	r3, sp
 80029a6:	0018      	movs	r0, r3
 80029a8:	f004 fc87 	bl	80072ba <atoi>
		isOK = TRUE;
 80029ac:	2401      	movs	r4, #1
		cutOffVoltage = atoi(c.value);
 80029ae:	4b48      	ldr	r3, [pc, #288]	@ (8002ad0 <modifySettingsWithCommand+0x3dc>)
 80029b0:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_RXPWMMODE) == 0) {
 80029b2:	4948      	ldr	r1, [pc, #288]	@ (8002ad4 <modifySettingsWithCommand+0x3e0>)
 80029b4:	a801      	add	r0, sp, #4
 80029b6:	f7fd fba7 	bl	8000108 <strcmp>
 80029ba:	2800      	cmp	r0, #0
 80029bc:	d107      	bne.n	80029ce <modifySettingsWithCommand+0x2da>
		recieverIsPWM = atoi(c.value);
 80029be:	230e      	movs	r3, #14
 80029c0:	446b      	add	r3, sp
 80029c2:	0018      	movs	r0, r3
 80029c4:	f004 fc79 	bl	80072ba <atoi>
		isOK = TRUE;
 80029c8:	2401      	movs	r4, #1
		recieverIsPWM = atoi(c.value);
 80029ca:	4b43      	ldr	r3, [pc, #268]	@ (8002ad8 <modifySettingsWithCommand+0x3e4>)
 80029cc:	7018      	strb	r0, [r3, #0]
	if (strcmp(c.type, COMMAND_SAVE) == 0) {
 80029ce:	4943      	ldr	r1, [pc, #268]	@ (8002adc <modifySettingsWithCommand+0x3e8>)
 80029d0:	a801      	add	r0, sp, #4
 80029d2:	f7fd fb99 	bl	8000108 <strcmp>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d102      	bne.n	80029e0 <modifySettingsWithCommand+0x2ec>
		storeSettingsToEeprom();
 80029da:	f7ff fcd5 	bl	8002388 <storeSettingsToEeprom>
		isOK = TRUE;
 80029de:	2401      	movs	r4, #1
	if (strcmp(c.type, COMMAND_READ) == 0) {
 80029e0:	493f      	ldr	r1, [pc, #252]	@ (8002ae0 <modifySettingsWithCommand+0x3ec>)
 80029e2:	a801      	add	r0, sp, #4
 80029e4:	f7fd fb90 	bl	8000108 <strcmp>
 80029e8:	2800      	cmp	r0, #0
 80029ea:	d104      	bne.n	80029f6 <modifySettingsWithCommand+0x302>
		readSettingsFromEeprom();
 80029ec:	f7ff fc1a 	bl	8002224 <readSettingsFromEeprom>
		isOK = TRUE;
 80029f0:	2401      	movs	r4, #1
		serialPrintSettings();
 80029f2:	f7ff fdc5 	bl	8002580 <serialPrintSettings>
	if (strcmp(c.type, COMMAND_CONNECTED) == 0) {
 80029f6:	493b      	ldr	r1, [pc, #236]	@ (8002ae4 <modifySettingsWithCommand+0x3f0>)
 80029f8:	a801      	add	r0, sp, #4
 80029fa:	f7fd fb85 	bl	8000108 <strcmp>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d100      	bne.n	8002a04 <modifySettingsWithCommand+0x310>
		isOK = TRUE;
 8002a02:	2401      	movs	r4, #1
	if (strcmp(c.type, COMMAND_STATUS) == 0) {
 8002a04:	4938      	ldr	r1, [pc, #224]	@ (8002ae8 <modifySettingsWithCommand+0x3f4>)
 8002a06:	a801      	add	r0, sp, #4
 8002a08:	f7fd fb7e 	bl	8000108 <strcmp>
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d102      	bne.n	8002a16 <modifySettingsWithCommand+0x322>
		serialPrintStatus();
 8002a10:	f7ff fd4e 	bl	80024b0 <serialPrintStatus>
		isOK = TRUE;
 8002a14:	2401      	movs	r4, #1
	sprintf(recievedString, "%s, %s", c.type, c.value);
 8002a16:	230e      	movs	r3, #14
 8002a18:	4934      	ldr	r1, [pc, #208]	@ (8002aec <modifySettingsWithCommand+0x3f8>)
 8002a1a:	446b      	add	r3, sp
 8002a1c:	aa01      	add	r2, sp, #4
 8002a1e:	4834      	ldr	r0, [pc, #208]	@ (8002af0 <modifySettingsWithCommand+0x3fc>)
 8002a20:	f004 fdac 	bl	800757c <siprintf>
}
 8002a24:	0020      	movs	r0, r4
 8002a26:	b006      	add	sp, #24
 8002a28:	bd10      	pop	{r4, pc}
 8002a2a:	46c0      	nop			@ (mov r8, r8)
 8002a2c:	20002476 	.word	0x20002476
 8002a30:	0800892f 	.word	0x0800892f
 8002a34:	20000011 	.word	0x20000011
 8002a38:	08008935 	.word	0x08008935
 8002a3c:	20000010 	.word	0x20000010
 8002a40:	0800893b 	.word	0x0800893b
 8002a44:	2000000f 	.word	0x2000000f
 8002a48:	08008941 	.word	0x08008941
 8002a4c:	2000000e 	.word	0x2000000e
 8002a50:	08008947 	.word	0x08008947
 8002a54:	2000000d 	.word	0x2000000d
 8002a58:	0800894d 	.word	0x0800894d
 8002a5c:	2000000c 	.word	0x2000000c
 8002a60:	08008954 	.word	0x08008954
 8002a64:	2000000b 	.word	0x2000000b
 8002a68:	0800895a 	.word	0x0800895a
 8002a6c:	2000000a 	.word	0x2000000a
 8002a70:	08008960 	.word	0x08008960
 8002a74:	2000217a 	.word	0x2000217a
 8002a78:	08008966 	.word	0x08008966
 8002a7c:	20002179 	.word	0x20002179
 8002a80:	0800896c 	.word	0x0800896c
 8002a84:	20002178 	.word	0x20002178
 8002a88:	08008972 	.word	0x08008972
 8002a8c:	08008978 	.word	0x08008978
 8002a90:	20002177 	.word	0x20002177
 8002a94:	0800897b 	.word	0x0800897b
 8002a98:	20000009 	.word	0x20000009
 8002a9c:	0800897e 	.word	0x0800897e
 8002aa0:	20000008 	.word	0x20000008
 8002aa4:	08008981 	.word	0x08008981
 8002aa8:	08008987 	.word	0x08008987
 8002aac:	0800898d 	.word	0x0800898d
 8002ab0:	20002176 	.word	0x20002176
 8002ab4:	08008992 	.word	0x08008992
 8002ab8:	20000007 	.word	0x20000007
 8002abc:	08008998 	.word	0x08008998
 8002ac0:	20000006 	.word	0x20000006
 8002ac4:	080089a1 	.word	0x080089a1
 8002ac8:	20000005 	.word	0x20000005
 8002acc:	080089a6 	.word	0x080089a6
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	080089ae 	.word	0x080089ae
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	080089b4 	.word	0x080089b4
 8002ae0:	080089b9 	.word	0x080089b9
 8002ae4:	080089be 	.word	0x080089be
 8002ae8:	080089c2 	.word	0x080089c2
 8002aec:	080089c9 	.word	0x080089c9
 8002af0:	2000215c 	.word	0x2000215c

08002af4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af4:	2101      	movs	r1, #1
 8002af6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <HAL_MspInit+0x2c>)
{
 8002af8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	619a      	str	r2, [r3, #24]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	9200      	str	r2, [sp, #0]
 8002b08:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	69da      	ldr	r2, [r3, #28]
 8002b0c:	0549      	lsls	r1, r1, #21
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	61da      	str	r2, [r3, #28]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	400b      	ands	r3, r1
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b1a:	b002      	add	sp, #8
 8002b1c:	4770      	bx	lr
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	40021000 	.word	0x40021000

08002b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b24:	b530      	push	{r4, r5, lr}
 8002b26:	0005      	movs	r5, r0
 8002b28:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2a:	2214      	movs	r2, #20
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	a803      	add	r0, sp, #12
 8002b30:	f004 fd92 	bl	8007658 <memset>
  if(hadc->Instance==ADC1)
 8002b34:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <HAL_ADC_MspInit+0x88>)
 8002b36:	682a      	ldr	r2, [r5, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d134      	bne.n	8002ba6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b3c:	2180      	movs	r1, #128	@ 0x80
 8002b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb0 <HAL_ADC_MspInit+0x8c>)
 8002b40:	0089      	lsls	r1, r1, #2
 8002b42:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b46:	430a      	orrs	r2, r1
 8002b48:	619a      	str	r2, [r3, #24]
 8002b4a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b4e:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b50:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b52:	9201      	str	r2, [sp, #4]
 8002b54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	0289      	lsls	r1, r1, #10
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	615a      	str	r2, [r3, #20]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	400b      	ands	r3, r1
 8002b62:	9302      	str	r3, [sp, #8]
 8002b64:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8002b66:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBAT_Pin|POT1_Pin|POT2_Pin;
 8002b6a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6c:	3b04      	subs	r3, #4
 8002b6e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f000 fdc4 	bl	80036fc <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002b74:	2280      	movs	r2, #128	@ 0x80
    hdma_adc.Instance = DMA1_Channel1;
 8002b76:	4c0f      	ldr	r4, [pc, #60]	@ (8002bb4 <HAL_ADC_MspInit+0x90>)
 8002b78:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb8 <HAL_ADC_MspInit+0x94>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002b7a:	60e2      	str	r2, [r4, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b7c:	1892      	adds	r2, r2, r2
 8002b7e:	6122      	str	r2, [r4, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b80:	2280      	movs	r2, #128	@ 0x80
 8002b82:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 8002b84:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b86:	6162      	str	r2, [r4, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b88:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002b8a:	2220      	movs	r2, #32
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002b8c:	0020      	movs	r0, r4
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b8e:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b90:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002b92:	61a2      	str	r2, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002b94:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002b96:	f000 fccb 	bl	8003530 <HAL_DMA_Init>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8002b9e:	f7fe ffb7 	bl	8001b10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002ba2:	632c      	str	r4, [r5, #48]	@ 0x30
 8002ba4:	6265      	str	r5, [r4, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ba6:	b009      	add	sp, #36	@ 0x24
 8002ba8:	bd30      	pop	{r4, r5, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	40012400 	.word	0x40012400
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	200023cc 	.word	0x200023cc
 8002bb8:	40020008 	.word	0x40020008

08002bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	0004      	movs	r4, r0
 8002bc0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc2:	2214      	movs	r2, #20
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	a803      	add	r0, sp, #12
 8002bc8:	f004 fd46 	bl	8007658 <memset>
  if(hi2c->Instance==I2C1)
 8002bcc:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_I2C_MspInit+0x60>)
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d120      	bne.n	8002c16 <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	4c12      	ldr	r4, [pc, #72]	@ (8002c20 <HAL_I2C_MspInit+0x64>)
 8002bd8:	02d2      	lsls	r2, r2, #11
 8002bda:	6963      	ldr	r3, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bdc:	4811      	ldr	r0, [pc, #68]	@ (8002c24 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	4313      	orrs	r3, r2
 8002be0:	6163      	str	r3, [r4, #20]
 8002be2:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4013      	ands	r3, r2
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bec:	23c0      	movs	r3, #192	@ 0xc0
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf2:	2312      	movs	r3, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bf4:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bf6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bf8:	3b11      	subs	r3, #17
 8002bfa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfc:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002bfe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	f000 fd7c 	bl	80036fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c04:	2280      	movs	r2, #128	@ 0x80
 8002c06:	69e3      	ldr	r3, [r4, #28]
 8002c08:	0392      	lsls	r2, r2, #14
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61e3      	str	r3, [r4, #28]
 8002c0e:	69e3      	ldr	r3, [r4, #28]
 8002c10:	4013      	ands	r3, r2
 8002c12:	9302      	str	r3, [sp, #8]
 8002c14:	9b02      	ldr	r3, [sp, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c16:	b008      	add	sp, #32
 8002c18:	bd10      	pop	{r4, pc}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	40005400 	.word	0x40005400
 8002c20:	40021000 	.word	0x40021000
 8002c24:	48000400 	.word	0x48000400

08002c28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c28:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM1)
 8002c2a:	6803      	ldr	r3, [r0, #0]
 8002c2c:	4a3d      	ldr	r2, [pc, #244]	@ (8002d24 <HAL_TIM_Base_MspInit+0xfc>)
{
 8002c2e:	0005      	movs	r5, r0
 8002c30:	b087      	sub	sp, #28
  if(htim_base->Instance==TIM1)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d125      	bne.n	8002c82 <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c36:	2380      	movs	r3, #128	@ 0x80
 8002c38:	4a3b      	ldr	r2, [pc, #236]	@ (8002d28 <HAL_TIM_Base_MspInit+0x100>)
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	6991      	ldr	r1, [r2, #24]

    /* TIM1 DMA Init */
    /* TIM1_CH3_UP Init */
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002c3e:	4c3b      	ldr	r4, [pc, #236]	@ (8002d2c <HAL_TIM_Base_MspInit+0x104>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c40:	4319      	orrs	r1, r3
 8002c42:	6191      	str	r1, [r2, #24]
 8002c44:	6992      	ldr	r2, [r2, #24]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002c46:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c48:	401a      	ands	r2, r3
 8002c4a:	9201      	str	r2, [sp, #4]
 8002c4c:	9a01      	ldr	r2, [sp, #4]
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002c4e:	4a38      	ldr	r2, [pc, #224]	@ (8002d30 <HAL_TIM_Base_MspInit+0x108>)
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_tim1_ch3_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c50:	6163      	str	r3, [r4, #20]
    hdma_tim1_ch3_up.Instance = DMA1_Channel5;
 8002c52:	6022      	str	r2, [r4, #0]
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c54:	2210      	movs	r2, #16
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8002c56:	2320      	movs	r3, #32
    hdma_tim1_ch3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c58:	6062      	str	r2, [r4, #4]
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5a:	2200      	movs	r2, #0
    hdma_tim1_ch3_up.Init.MemInc = DMA_MINC_ENABLE;
 8002c5c:	60e1      	str	r1, [r4, #12]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c5e:	3181      	adds	r1, #129	@ 0x81
 8002c60:	31ff      	adds	r1, #255	@ 0xff
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8002c62:	0020      	movs	r0, r4
    hdma_tim1_ch3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c64:	60a2      	str	r2, [r4, #8]
    hdma_tim1_ch3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c66:	6121      	str	r1, [r4, #16]
    hdma_tim1_ch3_up.Init.Mode = DMA_CIRCULAR;
 8002c68:	61a3      	str	r3, [r4, #24]
    hdma_tim1_ch3_up.Init.Priority = DMA_PRIORITY_LOW;
 8002c6a:	61e2      	str	r2, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch3_up) != HAL_OK)
 8002c6c:	f000 fc60 	bl	8003530 <HAL_DMA_Init>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8002c74:	f7fe ff4c 	bl	8001b10 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3_up);
 8002c78:	62ec      	str	r4, [r5, #44]	@ 0x2c
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 8002c7a:	622c      	str	r4, [r5, #32]
 8002c7c:	6265      	str	r5, [r4, #36]	@ 0x24
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002c7e:	b007      	add	sp, #28
 8002c80:	bd30      	pop	{r4, r5, pc}
  else if(htim_base->Instance==TIM3)
 8002c82:	4a2c      	ldr	r2, [pc, #176]	@ (8002d34 <HAL_TIM_Base_MspInit+0x10c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d123      	bne.n	8002cd0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c88:	2102      	movs	r1, #2
 8002c8a:	4b27      	ldr	r3, [pc, #156]	@ (8002d28 <HAL_TIM_Base_MspInit+0x100>)
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8002c8c:	4c2a      	ldr	r4, [pc, #168]	@ (8002d38 <HAL_TIM_Base_MspInit+0x110>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c8e:	69da      	ldr	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002c90:	0020      	movs	r0, r4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c92:	430a      	orrs	r2, r1
 8002c94:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002c96:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c98:	69db      	ldr	r3, [r3, #28]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 8002c9a:	60e2      	str	r2, [r4, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c9c:	400b      	ands	r3, r1
 8002c9e:	9302      	str	r3, [sp, #8]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ca0:	3281      	adds	r2, #129	@ 0x81
 8002ca2:	32ff      	adds	r2, #255	@ 0xff
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ca4:	9b02      	ldr	r3, [sp, #8]
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8002ca6:	4b25      	ldr	r3, [pc, #148]	@ (8002d3c <HAL_TIM_Base_MspInit+0x114>)
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ca8:	6122      	str	r2, [r4, #16]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002caa:	2280      	movs	r2, #128	@ 0x80
    hdma_tim3_ch4_up.Instance = DMA1_Channel3;
 8002cac:	6023      	str	r3, [r4, #0]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cae:	2310      	movs	r3, #16
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cb0:	0112      	lsls	r2, r2, #4
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cb2:	6063      	str	r3, [r4, #4]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002cb4:	6162      	str	r2, [r4, #20]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb6:	2300      	movs	r3, #0
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8002cb8:	2220      	movs	r2, #32
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cba:	60a3      	str	r3, [r4, #8]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8002cbc:	61a2      	str	r2, [r4, #24]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002cbe:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 8002cc0:	f000 fc36 	bl	8003530 <HAL_DMA_Init>
 8002cc4:	2800      	cmp	r0, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8002cc8:	f7fe ff22 	bl	8001b10 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 8002ccc:	632c      	str	r4, [r5, #48]	@ 0x30
 8002cce:	e7d4      	b.n	8002c7a <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM6)
 8002cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d40 <HAL_TIM_Base_MspInit+0x118>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d109      	bne.n	8002cea <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002cd6:	2110      	movs	r1, #16
 8002cd8:	4b13      	ldr	r3, [pc, #76]	@ (8002d28 <HAL_TIM_Base_MspInit+0x100>)
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	61da      	str	r2, [r3, #28]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	400b      	ands	r3, r1
 8002ce4:	9303      	str	r3, [sp, #12]
 8002ce6:	9b03      	ldr	r3, [sp, #12]
 8002ce8:	e7c9      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM16)
 8002cea:	4a16      	ldr	r2, [pc, #88]	@ (8002d44 <HAL_TIM_Base_MspInit+0x11c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d10a      	bne.n	8002d06 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002cf0:	2180      	movs	r1, #128	@ 0x80
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <HAL_TIM_Base_MspInit+0x100>)
 8002cf4:	0289      	lsls	r1, r1, #10
 8002cf6:	699a      	ldr	r2, [r3, #24]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	619a      	str	r2, [r3, #24]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	400b      	ands	r3, r1
 8002d00:	9304      	str	r3, [sp, #16]
 8002d02:	9b04      	ldr	r3, [sp, #16]
 8002d04:	e7bb      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 8002d06:	4a10      	ldr	r2, [pc, #64]	@ (8002d48 <HAL_TIM_Base_MspInit+0x120>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d1b8      	bne.n	8002c7e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002d0c:	2180      	movs	r1, #128	@ 0x80
 8002d0e:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_TIM_Base_MspInit+0x100>)
 8002d10:	02c9      	lsls	r1, r1, #11
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	619a      	str	r2, [r3, #24]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	9305      	str	r3, [sp, #20]
 8002d1e:	9b05      	ldr	r3, [sp, #20]
}
 8002d20:	e7ad      	b.n	8002c7e <HAL_TIM_Base_MspInit+0x56>
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	200021cc 	.word	0x200021cc
 8002d30:	40020058 	.word	0x40020058
 8002d34:	40000400 	.word	0x40000400
 8002d38:	20002188 	.word	0x20002188
 8002d3c:	40020030 	.word	0x40020030
 8002d40:	40001000 	.word	0x40001000
 8002d44:	40014400 	.word	0x40014400
 8002d48:	40014800 	.word	0x40014800

08002d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	0004      	movs	r4, r0
 8002d50:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d52:	2214      	movs	r2, #20
 8002d54:	2100      	movs	r1, #0
 8002d56:	a803      	add	r0, sp, #12
 8002d58:	f004 fc7e 	bl	8007658 <memset>
  if(htim->Instance==TIM16)
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	4a14      	ldr	r2, [pc, #80]	@ (8002db0 <HAL_TIM_MspPostInit+0x64>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d114      	bne.n	8002d8e <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d64:	2180      	movs	r1, #128	@ 0x80
 8002d66:	4b13      	ldr	r3, [pc, #76]	@ (8002db4 <HAL_TIM_MspPostInit+0x68>)
 8002d68:	02c9      	lsls	r1, r1, #11
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	615a      	str	r2, [r3, #20]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	400b      	ands	r3, r1
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	9b01      	ldr	r3, [sp, #4]
    /**TIM16 GPIO Configuration
    PB6     ------> TIM16_CH1N
    */
    GPIO_InitStruct.Pin = SERVO1_HV_Pin;
 8002d78:	2340      	movs	r3, #64	@ 0x40
 8002d7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7c:	3b3e      	subs	r3, #62	@ 0x3e
    GPIO_InitStruct.Pin = SERVO2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	480e      	ldr	r0, [pc, #56]	@ (8002db8 <HAL_TIM_MspPostInit+0x6c>)
 8002d80:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8002d84:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SERVO2_GPIO_Port, &GPIO_InitStruct);
 8002d86:	f000 fcb9 	bl	80036fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002d8a:	b008      	add	sp, #32
 8002d8c:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM17)
 8002d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8002dbc <HAL_TIM_MspPostInit+0x70>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d1fa      	bne.n	8002d8a <HAL_TIM_MspPostInit+0x3e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d94:	2180      	movs	r1, #128	@ 0x80
 8002d96:	4b07      	ldr	r3, [pc, #28]	@ (8002db4 <HAL_TIM_MspPostInit+0x68>)
 8002d98:	02c9      	lsls	r1, r1, #11
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	615a      	str	r2, [r3, #20]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	400b      	ands	r3, r1
 8002da4:	9302      	str	r3, [sp, #8]
 8002da6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SERVO2_Pin;
 8002da8:	2380      	movs	r3, #128	@ 0x80
 8002daa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	3b7e      	subs	r3, #126	@ 0x7e
 8002dae:	e7e6      	b.n	8002d7e <HAL_TIM_MspPostInit+0x32>
 8002db0:	40014400 	.word	0x40014400
 8002db4:	40021000 	.word	0x40021000
 8002db8:	48000400 	.word	0x48000400
 8002dbc:	40014800 	.word	0x40014800

08002dc0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <NMI_Handler>

08002dc2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <HardFault_Handler>

08002dc4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002dc4:	4770      	bx	lr

08002dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002dc6:	4770      	bx	lr

08002dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dca:	f000 f8e7 	bl	8002f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dce:	bd10      	pop	{r4, pc}

08002dd0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002dd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH1_Pin);
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 fd5e 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH2_Pin);
 8002dd8:	2002      	movs	r0, #2
 8002dda:	f000 fd5b 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002dde:	bd10      	pop	{r4, pc}

08002de0 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002de0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH3_Pin);
 8002de2:	2004      	movs	r0, #4
 8002de4:	f000 fd56 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH4_Pin);
 8002de8:	2008      	movs	r0, #8
 8002dea:	f000 fd53 	bl	8003894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002dee:	bd10      	pop	{r4, pc}

08002df0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002df0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002df2:	4802      	ldr	r0, [pc, #8]	@ (8002dfc <DMA1_Channel1_IRQHandler+0xc>)
 8002df4:	f000 fc38 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	200023cc 	.word	0x200023cc

08002e00 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002e00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 8002e02:	4802      	ldr	r0, [pc, #8]	@ (8002e0c <DMA1_Channel2_3_IRQHandler+0xc>)
 8002e04:	f000 fc30 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002e08:	bd10      	pop	{r4, pc}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	20002188 	.word	0x20002188

08002e10 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8002e10:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3_up);
 8002e12:	4802      	ldr	r0, [pc, #8]	@ (8002e1c <DMA1_Channel4_5_IRQHandler+0xc>)
 8002e14:	f000 fc28 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8002e18:	bd10      	pop	{r4, pc}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	200021cc 	.word	0x200021cc

08002e20 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002e20:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002e22:	4802      	ldr	r0, [pc, #8]	@ (8002e2c <USB_IRQHandler+0xc>)
 8002e24:	f001 f944 	bl	80040b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	200033a8 	.word	0x200033a8

08002e30 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002e30:	2001      	movs	r0, #1
 8002e32:	4770      	bx	lr

08002e34 <_kill>:

int _kill(int pid, int sig)
{
 8002e34:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e36:	f004 fcc5 	bl	80077c4 <__errno>
 8002e3a:	2316      	movs	r3, #22
 8002e3c:	6003      	str	r3, [r0, #0]
  return -1;
 8002e3e:	2001      	movs	r0, #1
}
 8002e40:	4240      	negs	r0, r0
 8002e42:	bd10      	pop	{r4, pc}

08002e44 <_exit>:

void _exit (int status)
{
 8002e44:	b510      	push	{r4, lr}
  errno = EINVAL;
 8002e46:	f004 fcbd 	bl	80077c4 <__errno>
 8002e4a:	2316      	movs	r3, #22
 8002e4c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002e4e:	e7fe      	b.n	8002e4e <_exit+0xa>

08002e50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	000e      	movs	r6, r1
 8002e54:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e56:	2500      	movs	r5, #0
 8002e58:	42a5      	cmp	r5, r4
 8002e5a:	db01      	blt.n	8002e60 <_read+0x10>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8002e5c:	0020      	movs	r0, r4
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8002e60:	e000      	b.n	8002e64 <_read+0x14>
 8002e62:	bf00      	nop
 8002e64:	5570      	strb	r0, [r6, r5]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e66:	3501      	adds	r5, #1
 8002e68:	e7f6      	b.n	8002e58 <_read+0x8>

08002e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e6a:	b570      	push	{r4, r5, r6, lr}
 8002e6c:	000e      	movs	r6, r1
 8002e6e:	0014      	movs	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e70:	2500      	movs	r5, #0
 8002e72:	42a5      	cmp	r5, r4
 8002e74:	db01      	blt.n	8002e7a <_write+0x10>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002e76:	0020      	movs	r0, r4
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8002e7a:	5d70      	ldrb	r0, [r6, r5]
 8002e7c:	e000      	b.n	8002e80 <_write+0x16>
 8002e7e:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e80:	3501      	adds	r5, #1
 8002e82:	e7f6      	b.n	8002e72 <_write+0x8>

08002e84 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8002e84:	2001      	movs	r0, #1
}
 8002e86:	4240      	negs	r0, r0
 8002e88:	4770      	bx	lr

08002e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002e8a:	2380      	movs	r3, #128	@ 0x80
 8002e8c:	019b      	lsls	r3, r3, #6
  return 0;
}
 8002e8e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002e90:	604b      	str	r3, [r1, #4]
}
 8002e92:	4770      	bx	lr

08002e94 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002e94:	2001      	movs	r0, #1
 8002e96:	4770      	bx	lr

08002e98 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002e98:	2000      	movs	r0, #0
 8002e9a:	4770      	bx	lr

08002e9c <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e9c:	490b      	ldr	r1, [pc, #44]	@ (8002ecc <_sbrk+0x30>)
 8002e9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed0 <_sbrk+0x34>)
{
 8002ea0:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea2:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ea4:	490b      	ldr	r1, [pc, #44]	@ (8002ed4 <_sbrk+0x38>)
{
 8002ea6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002ea8:	6808      	ldr	r0, [r1, #0]
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d101      	bne.n	8002eb2 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002eae:	480a      	ldr	r0, [pc, #40]	@ (8002ed8 <_sbrk+0x3c>)
 8002eb0:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002eb2:	6808      	ldr	r0, [r1, #0]
 8002eb4:	18c3      	adds	r3, r0, r3
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d906      	bls.n	8002ec8 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002eba:	f004 fc83 	bl	80077c4 <__errno>
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002ec6:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002ec8:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 8002eca:	e7fc      	b.n	8002ec6 <_sbrk+0x2a>
 8002ecc:	00000400 	.word	0x00000400
 8002ed0:	20004000 	.word	0x20004000
 8002ed4:	200024b8 	.word	0x200024b8
 8002ed8:	200037d0 	.word	0x200037d0

08002edc <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002edc:	4770      	bx	lr
	...

08002ee0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ee0:	480d      	ldr	r0, [pc, #52]	@ (8002f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ee2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/

  bl  SystemInit
 8002ee4:	f7ff fffa 	bl	8002edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ee8:	480c      	ldr	r0, [pc, #48]	@ (8002f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8002eea:	490d      	ldr	r1, [pc, #52]	@ (8002f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002eec:	4a0d      	ldr	r2, [pc, #52]	@ (8002f24 <LoopForever+0xe>)
  movs r3, #0
 8002eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ef0:	e002      	b.n	8002ef8 <LoopCopyDataInit>

08002ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef6:	3304      	adds	r3, #4

08002ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002efc:	d3f9      	bcc.n	8002ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efe:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f00:	4c0a      	ldr	r4, [pc, #40]	@ (8002f2c <LoopForever+0x16>)
  movs r3, #0
 8002f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f04:	e001      	b.n	8002f0a <LoopFillZerobss>

08002f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f08:	3204      	adds	r2, #4

08002f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f0c:	d3fb      	bcc.n	8002f06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f0e:	f004 fc5f 	bl	80077d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f12:	f7fe fa01 	bl	8001318 <main>

08002f16 <LoopForever>:

LoopForever:
    b LoopForever
 8002f16:	e7fe      	b.n	8002f16 <LoopForever>
  ldr   r0, =_estack
 8002f18:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f20:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002f24:	08008c30 	.word	0x08008c30
  ldr r2, =_sbss
 8002f28:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002f2c:	200037d0 	.word	0x200037d0

08002f30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f30:	e7fe      	b.n	8002f30 <ADC1_IRQHandler>
	...

08002f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f38:	20fa      	movs	r0, #250	@ 0xfa
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <HAL_InitTick+0x3c>)
 8002f3c:	0080      	lsls	r0, r0, #2
 8002f3e:	7819      	ldrb	r1, [r3, #0]
 8002f40:	f7fd f912 	bl	8000168 <__udivsi3>
 8002f44:	4c0b      	ldr	r4, [pc, #44]	@ (8002f74 <HAL_InitTick+0x40>)
 8002f46:	0001      	movs	r1, r0
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	f7fd f90d 	bl	8000168 <__udivsi3>
 8002f4e:	f000 fad5 	bl	80034fc <HAL_SYSTICK_Config>
 8002f52:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8002f54:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f56:	2c00      	cmp	r4, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f5a:	2d03      	cmp	r5, #3
 8002f5c:	d807      	bhi.n	8002f6e <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f5e:	3802      	subs	r0, #2
 8002f60:	0022      	movs	r2, r4
 8002f62:	0029      	movs	r1, r5
 8002f64:	f000 fa94 	bl	8003490 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f68:	0020      	movs	r0, r4
 8002f6a:	4b03      	ldr	r3, [pc, #12]	@ (8002f78 <HAL_InitTick+0x44>)
 8002f6c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	20000020 	.word	0x20000020
 8002f74:	2000001c 	.word	0x2000001c
 8002f78:	20000024 	.word	0x20000024

08002f7c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	4a06      	ldr	r2, [pc, #24]	@ (8002f98 <HAL_Init+0x1c>)
{
 8002f80:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f82:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f84:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f8a:	f7ff ffd3 	bl	8002f34 <HAL_InitTick>
  HAL_MspInit();
 8002f8e:	f7ff fdb1 	bl	8002af4 <HAL_MspInit>
}
 8002f92:	2000      	movs	r0, #0
 8002f94:	bd10      	pop	{r4, pc}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	40022000 	.word	0x40022000

08002f9c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002f9c:	4a03      	ldr	r2, [pc, #12]	@ (8002fac <HAL_IncTick+0x10>)
 8002f9e:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <HAL_IncTick+0x14>)
 8002fa0:	6811      	ldr	r1, [r2, #0]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	185b      	adds	r3, r3, r1
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	4770      	bx	lr
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	200024bc 	.word	0x200024bc
 8002fb0:	20000020 	.word	0x20000020

08002fb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002fb4:	4b01      	ldr	r3, [pc, #4]	@ (8002fbc <HAL_GetTick+0x8>)
 8002fb6:	6818      	ldr	r0, [r3, #0]
}
 8002fb8:	4770      	bx	lr
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	200024bc 	.word	0x200024bc

08002fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff fff6 	bl	8002fb4 <HAL_GetTick>
 8002fc8:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fca:	1c63      	adds	r3, r4, #1
 8002fcc:	d002      	beq.n	8002fd4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b04      	ldr	r3, [pc, #16]	@ (8002fe0 <HAL_Delay+0x20>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002fd4:	f7ff ffee 	bl	8002fb4 <HAL_GetTick>
 8002fd8:	1b40      	subs	r0, r0, r5
 8002fda:	42a0      	cmp	r0, r4
 8002fdc:	d3fa      	bcc.n	8002fd4 <HAL_Delay+0x14>
  {
  }
}
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	20000020 	.word	0x20000020

08002fe4 <ADC_Enable.constprop.0>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002fe4:	2300      	movs	r3, #0
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8002fe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fe8:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8002fea:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fec:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
 8002fee:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	2a01      	cmp	r2, #1
 8002ff6:	d107      	bne.n	8003008 <ADC_Enable.constprop.0+0x24>
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	4211      	tst	r1, r2
 8002ffc:	d001      	beq.n	8003002 <ADC_Enable.constprop.0+0x1e>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ffe:	2000      	movs	r0, #0
}
 8003000:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	0412      	lsls	r2, r2, #16
 8003006:	d4fa      	bmi.n	8002ffe <ADC_Enable.constprop.0+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003008:	6899      	ldr	r1, [r3, #8]
 800300a:	4a1b      	ldr	r2, [pc, #108]	@ (8003078 <ADC_Enable.constprop.0+0x94>)
 800300c:	4211      	tst	r1, r2
 800300e:	d009      	beq.n	8003024 <ADC_Enable.constprop.0+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003010:	2310      	movs	r3, #16
 8003012:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003014:	4313      	orrs	r3, r2
 8003016:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003018:	2301      	movs	r3, #1
 800301a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800301c:	4313      	orrs	r3, r2
      return HAL_ERROR;
 800301e:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003020:	63e3      	str	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8003022:	e7ed      	b.n	8003000 <ADC_Enable.constprop.0+0x1c>
    __HAL_ADC_ENABLE(hadc);
 8003024:	2201      	movs	r2, #1
 8003026:	6899      	ldr	r1, [r3, #8]
 8003028:	430a      	orrs	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800302c:	4b13      	ldr	r3, [pc, #76]	@ (800307c <ADC_Enable.constprop.0+0x98>)
 800302e:	4914      	ldr	r1, [pc, #80]	@ (8003080 <ADC_Enable.constprop.0+0x9c>)
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	f7fd f899 	bl	8000168 <__udivsi3>
 8003036:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8003038:	9b01      	ldr	r3, [sp, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d117      	bne.n	800306e <ADC_Enable.constprop.0+0x8a>
    tickstart = HAL_GetTick();
 800303e:	f7ff ffb9 	bl	8002fb4 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003042:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8003044:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	422b      	tst	r3, r5
 800304c:	d1d7      	bne.n	8002ffe <ADC_Enable.constprop.0+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800304e:	f7ff ffb1 	bl	8002fb4 <HAL_GetTick>
 8003052:	1b80      	subs	r0, r0, r6
 8003054:	2802      	cmp	r0, #2
 8003056:	d9f6      	bls.n	8003046 <ADC_Enable.constprop.0+0x62>
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003058:	6823      	ldr	r3, [r4, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	422b      	tst	r3, r5
 800305e:	d1f2      	bne.n	8003046 <ADC_Enable.constprop.0+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003060:	2310      	movs	r3, #16
 8003062:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003064:	4313      	orrs	r3, r2
 8003066:	63a3      	str	r3, [r4, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003068:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800306a:	432b      	orrs	r3, r5
 800306c:	e7d7      	b.n	800301e <ADC_Enable.constprop.0+0x3a>
      wait_loop_index--;
 800306e:	9b01      	ldr	r3, [sp, #4]
 8003070:	3b01      	subs	r3, #1
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	e7e0      	b.n	8003038 <ADC_Enable.constprop.0+0x54>
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	80000017 	.word	0x80000017
 800307c:	2000001c 	.word	0x2000001c
 8003080:	000f4240 	.word	0x000f4240

08003084 <HAL_ADC_Init>:
{
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8003088:	d100      	bne.n	800308c <HAL_ADC_Init+0x8>
 800308a:	e090      	b.n	80031ae <HAL_ADC_Init+0x12a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800308c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800308e:	2b00      	cmp	r3, #0
 8003090:	d105      	bne.n	800309e <HAL_ADC_Init+0x1a>
    hadc->Lock = HAL_UNLOCKED;
 8003092:	0002      	movs	r2, r0
 8003094:	3234      	adds	r2, #52	@ 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8003096:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8003098:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800309a:	f7ff fd43 	bl	8002b24 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800309e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80030a0:	06db      	lsls	r3, r3, #27
 80030a2:	d500      	bpl.n	80030a6 <HAL_ADC_Init+0x22>
 80030a4:	e085      	b.n	80031b2 <HAL_ADC_Init+0x12e>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030a6:	6822      	ldr	r2, [r4, #0]
 80030a8:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80030aa:	075b      	lsls	r3, r3, #29
 80030ac:	d500      	bpl.n	80030b0 <HAL_ADC_Init+0x2c>
 80030ae:	e080      	b.n	80031b2 <HAL_ADC_Init+0x12e>
    ADC_STATE_CLR_SET(hadc->State,
 80030b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80030b2:	4b42      	ldr	r3, [pc, #264]	@ (80031bc <HAL_ADC_Init+0x138>)
 80030b4:	4019      	ands	r1, r3
 80030b6:	3306      	adds	r3, #6
 80030b8:	33ff      	adds	r3, #255	@ 0xff
 80030ba:	430b      	orrs	r3, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80030bc:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80030be:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 80030c0:	6893      	ldr	r3, [r2, #8]
 80030c2:	400b      	ands	r3, r1
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_ADC_Init+0x50>
 80030c8:	6811      	ldr	r1, [r2, #0]
 80030ca:	4219      	tst	r1, r3
 80030cc:	d10e      	bne.n	80030ec <HAL_ADC_Init+0x68>
 80030ce:	68d3      	ldr	r3, [r2, #12]
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	d40b      	bmi.n	80030ec <HAL_ADC_Init+0x68>
      MODIFY_REG(hadc->Instance->CFGR1,
 80030d4:	2118      	movs	r1, #24
 80030d6:	68d3      	ldr	r3, [r2, #12]
 80030d8:	438b      	bics	r3, r1
 80030da:	68a1      	ldr	r1, [r4, #8]
 80030dc:	430b      	orrs	r3, r1
 80030de:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80030e0:	6913      	ldr	r3, [r2, #16]
 80030e2:	6861      	ldr	r1, [r4, #4]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80030ec:	68d3      	ldr	r3, [r2, #12]
 80030ee:	4934      	ldr	r1, [pc, #208]	@ (80031c0 <HAL_ADC_Init+0x13c>)
 80030f0:	400b      	ands	r3, r1
 80030f2:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030f4:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030f6:	7e60      	ldrb	r0, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030f8:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80030fa:	03c0      	lsls	r0, r0, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80030fc:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030fe:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003100:	68e0      	ldr	r0, [r4, #12]
 8003102:	4303      	orrs	r3, r0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003104:	0348      	lsls	r0, r1, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003106:	4303      	orrs	r3, r0
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003108:	1d60      	adds	r0, r4, #5
 800310a:	7fc0      	ldrb	r0, [r0, #31]
 800310c:	0040      	lsls	r0, r0, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800310e:	4303      	orrs	r3, r0
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003110:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003112:	3801      	subs	r0, #1
 8003114:	1e45      	subs	r5, r0, #1
 8003116:	41a8      	sbcs	r0, r5
 8003118:	0300      	lsls	r0, r0, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800311a:	4303      	orrs	r3, r0
 800311c:	6920      	ldr	r0, [r4, #16]
 800311e:	3802      	subs	r0, #2
 8003120:	4245      	negs	r5, r0
 8003122:	4168      	adcs	r0, r5
 8003124:	0080      	lsls	r0, r0, #2
 8003126:	4303      	orrs	r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003128:	7ee0      	ldrb	r0, [r4, #27]
 800312a:	2801      	cmp	r0, #1
 800312c:	d104      	bne.n	8003138 <HAL_ADC_Init+0xb4>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800312e:	2900      	cmp	r1, #0
 8003130:	d12b      	bne.n	800318a <HAL_ADC_Init+0x106>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003132:	2180      	movs	r1, #128	@ 0x80
 8003134:	0249      	lsls	r1, r1, #9
 8003136:	430b      	orrs	r3, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003138:	20c2      	movs	r0, #194	@ 0xc2
 800313a:	69e1      	ldr	r1, [r4, #28]
 800313c:	30ff      	adds	r0, #255	@ 0xff
 800313e:	4281      	cmp	r1, r0
 8003140:	d002      	beq.n	8003148 <HAL_ADC_Init+0xc4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003142:	6a20      	ldr	r0, [r4, #32]
 8003144:	4301      	orrs	r1, r0
 8003146:	430b      	orrs	r3, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003148:	2080      	movs	r0, #128	@ 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800314a:	68d1      	ldr	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800314c:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800314e:	4319      	orrs	r1, r3
 8003150:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003152:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003154:	4281      	cmp	r1, r0
 8003156:	d002      	beq.n	800315e <HAL_ADC_Init+0xda>
 8003158:	1e48      	subs	r0, r1, #1
 800315a:	2806      	cmp	r0, #6
 800315c:	d807      	bhi.n	800316e <HAL_ADC_Init+0xea>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800315e:	2507      	movs	r5, #7
 8003160:	6950      	ldr	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003162:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003164:	43a8      	bics	r0, r5
 8003166:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003168:	6950      	ldr	r0, [r2, #20]
 800316a:	4301      	orrs	r1, r0
 800316c:	6151      	str	r1, [r2, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800316e:	68d2      	ldr	r2, [r2, #12]
 8003170:	4914      	ldr	r1, [pc, #80]	@ (80031c4 <HAL_ADC_Init+0x140>)
 8003172:	400a      	ands	r2, r1
 8003174:	429a      	cmp	r2, r3
 8003176:	d110      	bne.n	800319a <HAL_ADC_Init+0x116>
      ADC_CLEAR_ERRORCODE(hadc);
 8003178:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 800317a:	2303      	movs	r3, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800317c:	63e0      	str	r0, [r4, #60]	@ 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800317e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003180:	439a      	bics	r2, r3
 8003182:	3b02      	subs	r3, #2
 8003184:	4313      	orrs	r3, r2
 8003186:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8003188:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800318a:	2120      	movs	r1, #32
 800318c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800318e:	4329      	orrs	r1, r5
 8003190:	63a1      	str	r1, [r4, #56]	@ 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003192:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003194:	4308      	orrs	r0, r1
 8003196:	63e0      	str	r0, [r4, #60]	@ 0x3c
 8003198:	e7ce      	b.n	8003138 <HAL_ADC_Init+0xb4>
      ADC_STATE_CLR_SET(hadc->State,
 800319a:	2312      	movs	r3, #18
 800319c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800319e:	439a      	bics	r2, r3
 80031a0:	3b02      	subs	r3, #2
 80031a2:	4313      	orrs	r3, r2
 80031a4:	63a3      	str	r3, [r4, #56]	@ 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a6:	2301      	movs	r3, #1
 80031a8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80031aa:	4313      	orrs	r3, r2
 80031ac:	63e3      	str	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80031ae:	2001      	movs	r0, #1
 80031b0:	e7ea      	b.n	8003188 <HAL_ADC_Init+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b2:	2310      	movs	r3, #16
 80031b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80031b6:	4313      	orrs	r3, r2
 80031b8:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 80031ba:	e7f8      	b.n	80031ae <HAL_ADC_Init+0x12a>
 80031bc:	fffffefd 	.word	0xfffffefd
 80031c0:	fffe0219 	.word	0xfffe0219
 80031c4:	833fffe7 	.word	0x833fffe7

080031c8 <HAL_ADC_Start_DMA>:
{
 80031c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031ca:	6803      	ldr	r3, [r0, #0]
{
 80031cc:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031ce:	689b      	ldr	r3, [r3, #8]
{
 80031d0:	000e      	movs	r6, r1
    __HAL_LOCK(hadc);
 80031d2:	2002      	movs	r0, #2
{
 80031d4:	9201      	str	r2, [sp, #4]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80031d6:	075b      	lsls	r3, r3, #29
 80031d8:	d430      	bmi.n	800323c <HAL_ADC_Start_DMA+0x74>
    __HAL_LOCK(hadc);
 80031da:	0027      	movs	r7, r4
 80031dc:	3734      	adds	r7, #52	@ 0x34
 80031de:	783b      	ldrb	r3, [r7, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d02b      	beq.n	800323c <HAL_ADC_Start_DMA+0x74>
 80031e4:	2301      	movs	r3, #1
 80031e6:	703b      	strb	r3, [r7, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80031e8:	7e63      	ldrb	r3, [r4, #25]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d127      	bne.n	800323e <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 80031ee:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80031f0:	4b16      	ldr	r3, [pc, #88]	@ (800324c <HAL_ADC_Start_DMA+0x84>)
      ADC_CLEAR_ERRORCODE(hadc);
 80031f2:	2500      	movs	r5, #0
      ADC_STATE_CLR_SET(hadc->State,
 80031f4:	401a      	ands	r2, r3
 80031f6:	2380      	movs	r3, #128	@ 0x80
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4313      	orrs	r3, r2
 80031fc:	63a3      	str	r3, [r4, #56]	@ 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 80031fe:	63e5      	str	r5, [r4, #60]	@ 0x3c
      __HAL_UNLOCK(hadc);
 8003200:	703d      	strb	r5, [r7, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003202:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003204:	4b12      	ldr	r3, [pc, #72]	@ (8003250 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003206:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003208:	6283      	str	r3, [r0, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800320a:	4b12      	ldr	r3, [pc, #72]	@ (8003254 <HAL_ADC_Start_DMA+0x8c>)
 800320c:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800320e:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <HAL_ADC_Start_DMA+0x90>)
 8003210:	6303      	str	r3, [r0, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003212:	231c      	movs	r3, #28
 8003214:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003216:	684a      	ldr	r2, [r1, #4]
 8003218:	3b0c      	subs	r3, #12
 800321a:	4313      	orrs	r3, r2
 800321c:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800321e:	2301      	movs	r3, #1
 8003220:	68ca      	ldr	r2, [r1, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003226:	0032      	movs	r2, r6
 8003228:	9b01      	ldr	r3, [sp, #4]
 800322a:	3140      	adds	r1, #64	@ 0x40
 800322c:	f000 f9e0 	bl	80035f0 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003230:	2304      	movs	r3, #4
 8003232:	0028      	movs	r0, r5
 8003234:	6822      	ldr	r2, [r4, #0]
 8003236:	6891      	ldr	r1, [r2, #8]
 8003238:	430b      	orrs	r3, r1
 800323a:	6093      	str	r3, [r2, #8]
}
 800323c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800323e:	0020      	movs	r0, r4
 8003240:	f7ff fed0 	bl	8002fe4 <ADC_Enable.constprop.0>
    if (tmp_hal_status == HAL_OK)
 8003244:	2800      	cmp	r0, #0
 8003246:	d0d2      	beq.n	80031ee <HAL_ADC_Start_DMA+0x26>
 8003248:	e7f8      	b.n	800323c <HAL_ADC_Start_DMA+0x74>
 800324a:	46c0      	nop			@ (mov r8, r8)
 800324c:	fffff0fe 	.word	0xfffff0fe
 8003250:	0800325d 	.word	0x0800325d
 8003254:	080032cf 	.word	0x080032cf
 8003258:	080032db 	.word	0x080032db

0800325c <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800325c:	2250      	movs	r2, #80	@ 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800325e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8003260:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003262:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8003264:	4211      	tst	r1, r2
 8003266:	d12b      	bne.n	80032c0 <ADC_DMAConvCplt+0x64>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003268:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800326a:	32b1      	adds	r2, #177	@ 0xb1
 800326c:	32ff      	adds	r2, #255	@ 0xff
 800326e:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003270:	21c0      	movs	r1, #192	@ 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	0109      	lsls	r1, r1, #4
 8003278:	68d0      	ldr	r0, [r2, #12]
 800327a:	4208      	tst	r0, r1
 800327c:	d113      	bne.n	80032a6 <ADC_DMAConvCplt+0x4a>
 800327e:	7e99      	ldrb	r1, [r3, #26]
 8003280:	2900      	cmp	r1, #0
 8003282:	d110      	bne.n	80032a6 <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003284:	6811      	ldr	r1, [r2, #0]
 8003286:	0709      	lsls	r1, r1, #28
 8003288:	d50d      	bpl.n	80032a6 <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800328a:	6891      	ldr	r1, [r2, #8]
 800328c:	0749      	lsls	r1, r1, #29
 800328e:	d40e      	bmi.n	80032ae <ADC_DMAConvCplt+0x52>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003290:	200c      	movs	r0, #12
 8003292:	6851      	ldr	r1, [r2, #4]
 8003294:	4381      	bics	r1, r0
 8003296:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003298:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800329a:	4a0b      	ldr	r2, [pc, #44]	@ (80032c8 <ADC_DMAConvCplt+0x6c>)
 800329c:	4011      	ands	r1, r2
 800329e:	3204      	adds	r2, #4
 80032a0:	32ff      	adds	r2, #255	@ 0xff
 80032a2:	430a      	orrs	r2, r1
 80032a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fd ff36 	bl	8001118 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80032ac:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ae:	2220      	movs	r2, #32
 80032b0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80032b2:	430a      	orrs	r2, r1
 80032b4:	639a      	str	r2, [r3, #56]	@ 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b6:	2201      	movs	r2, #1
 80032b8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80032ba:	430a      	orrs	r2, r1
 80032bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032be:	e7f2      	b.n	80032a6 <ADC_DMAConvCplt+0x4a>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	4798      	blx	r3
}
 80032c6:	e7f1      	b.n	80032ac <ADC_DMAConvCplt+0x50>
 80032c8:	fffffefe 	.word	0xfffffefe

080032cc <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 80032cc:	4770      	bx	lr

080032ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80032ce:	b510      	push	{r4, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80032d0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80032d2:	f7ff fffb 	bl	80032cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d6:	bd10      	pop	{r4, pc}

080032d8 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80032d8:	4770      	bx	lr

080032da <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032da:	2340      	movs	r3, #64	@ 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032dc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
{
 80032de:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032e0:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80032e2:	4313      	orrs	r3, r2
 80032e4:	6383      	str	r3, [r0, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032e6:	2304      	movs	r3, #4
 80032e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80032ea:	4313      	orrs	r3, r2
 80032ec:	63c3      	str	r3, [r0, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80032ee:	f7ff fff3 	bl	80032d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032f2:	bd10      	pop	{r4, pc}

080032f4 <HAL_ADC_ConfigChannel>:
{
 80032f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80032f6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80032f8:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80032fa:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80032fc:	3434      	adds	r4, #52	@ 0x34
 80032fe:	7822      	ldrb	r2, [r4, #0]
{
 8003300:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003302:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  __HAL_LOCK(hadc);
 8003304:	2002      	movs	r0, #2
 8003306:	2a01      	cmp	r2, #1
 8003308:	d02c      	beq.n	8003364 <HAL_ADC_ConfigChannel+0x70>
 800330a:	3801      	subs	r0, #1
 800330c:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800330e:	681d      	ldr	r5, [r3, #0]
 8003310:	68aa      	ldr	r2, [r5, #8]
 8003312:	0752      	lsls	r2, r2, #29
 8003314:	d454      	bmi.n	80033c0 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003316:	680a      	ldr	r2, [r1, #0]
    if (sConfig->Rank != ADC_RANK_NONE)
 8003318:	684f      	ldr	r7, [r1, #4]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800331a:	0013      	movs	r3, r2
    if (sConfig->Rank != ADC_RANK_NONE)
 800331c:	46bc      	mov	ip, r7
 800331e:	4f2b      	ldr	r7, [pc, #172]	@ (80033cc <HAL_ADC_ConfigChannel+0xd8>)
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003320:	4090      	lsls	r0, r2
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003322:	3b10      	subs	r3, #16
    if (sConfig->Rank != ADC_RANK_NONE)
 8003324:	45bc      	cmp	ip, r7
 8003326:	d03c      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0xae>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003328:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 800332a:	4338      	orrs	r0, r7
 800332c:	62a8      	str	r0, [r5, #40]	@ 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800332e:	2e07      	cmp	r6, #7
 8003330:	d80f      	bhi.n	8003352 <HAL_ADC_ConfigChannel+0x5e>
 8003332:	2e00      	cmp	r6, #0
 8003334:	d111      	bne.n	800335a <HAL_ADC_ConfigChannel+0x66>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003336:	2007      	movs	r0, #7
 8003338:	696e      	ldr	r6, [r5, #20]
 800333a:	6889      	ldr	r1, [r1, #8]
 800333c:	4006      	ands	r6, r0
 800333e:	42b1      	cmp	r1, r6
 8003340:	d00b      	beq.n	800335a <HAL_ADC_ConfigChannel+0x66>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003342:	696e      	ldr	r6, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003344:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003346:	4386      	bics	r6, r0
 8003348:	616e      	str	r6, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800334a:	696e      	ldr	r6, [r5, #20]
 800334c:	4331      	orrs	r1, r6
 800334e:	6169      	str	r1, [r5, #20]
 8003350:	e003      	b.n	800335a <HAL_ADC_ConfigChannel+0x66>
 8003352:	2080      	movs	r0, #128	@ 0x80
 8003354:	0540      	lsls	r0, r0, #21
 8003356:	4286      	cmp	r6, r0
 8003358:	d1ed      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x42>
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800335a:	2b01      	cmp	r3, #1
 800335c:	d903      	bls.n	8003366 <HAL_ADC_ConfigChannel+0x72>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8003360:	2300      	movs	r3, #0
 8003362:	7023      	strb	r3, [r4, #0]
}
 8003364:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003366:	0013      	movs	r3, r2
 8003368:	3b10      	subs	r3, #16
 800336a:	1e5d      	subs	r5, r3, #1
 800336c:	41ab      	sbcs	r3, r5
 800336e:	2580      	movs	r5, #128	@ 0x80
 8003370:	4917      	ldr	r1, [pc, #92]	@ (80033d0 <HAL_ADC_ConfigChannel+0xdc>)
 8003372:	425b      	negs	r3, r3
 8003374:	0d9b      	lsrs	r3, r3, #22
 8003376:	6808      	ldr	r0, [r1, #0]
 8003378:	059b      	lsls	r3, r3, #22
 800337a:	042d      	lsls	r5, r5, #16
 800337c:	195b      	adds	r3, r3, r5
 800337e:	4303      	orrs	r3, r0
 8003380:	600b      	str	r3, [r1, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003382:	2a10      	cmp	r2, #16
 8003384:	d1eb      	bne.n	800335e <HAL_ADC_ConfigChannel+0x6a>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003386:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <HAL_ADC_ConfigChannel+0xe0>)
 8003388:	4913      	ldr	r1, [pc, #76]	@ (80033d8 <HAL_ADC_ConfigChannel+0xe4>)
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	f7fc feec 	bl	8000168 <__udivsi3>
 8003390:	230a      	movs	r3, #10
 8003392:	4343      	muls	r3, r0
            wait_loop_index--;
 8003394:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003396:	9b01      	ldr	r3, [sp, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0e0      	beq.n	800335e <HAL_ADC_ConfigChannel+0x6a>
            wait_loop_index--;
 800339c:	9b01      	ldr	r3, [sp, #4]
 800339e:	3b01      	subs	r3, #1
 80033a0:	e7f8      	b.n	8003394 <HAL_ADC_ConfigChannel+0xa0>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80033a2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80033a4:	4382      	bics	r2, r0
 80033a6:	62aa      	str	r2, [r5, #40]	@ 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d8d8      	bhi.n	800335e <HAL_ADC_ConfigChannel+0x6a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80033ac:	1e58      	subs	r0, r3, #1
 80033ae:	4183      	sbcs	r3, r0
 80033b0:	4a07      	ldr	r2, [pc, #28]	@ (80033d0 <HAL_ADC_ConfigChannel+0xdc>)
 80033b2:	480a      	ldr	r0, [pc, #40]	@ (80033dc <HAL_ADC_ConfigChannel+0xe8>)
 80033b4:	6811      	ldr	r1, [r2, #0]
 80033b6:	059b      	lsls	r3, r3, #22
 80033b8:	181b      	adds	r3, r3, r0
 80033ba:	400b      	ands	r3, r1
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e7ce      	b.n	800335e <HAL_ADC_ConfigChannel+0x6a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c0:	2220      	movs	r2, #32
 80033c2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80033c4:	430a      	orrs	r2, r1
 80033c6:	639a      	str	r2, [r3, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 80033c8:	e7ca      	b.n	8003360 <HAL_ADC_ConfigChannel+0x6c>
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	00001001 	.word	0x00001001
 80033d0:	40012708 	.word	0x40012708
 80033d4:	2000001c 	.word	0x2000001c
 80033d8:	000f4240 	.word	0x000f4240
 80033dc:	ff7fffff 	.word	0xff7fffff

080033e0 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e2:	0006      	movs	r6, r0
 80033e4:	3634      	adds	r6, #52	@ 0x34
 80033e6:	7833      	ldrb	r3, [r6, #0]
{
 80033e8:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80033ea:	2002      	movs	r0, #2
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d045      	beq.n	800347c <HAL_ADCEx_Calibration_Start+0x9c>
 80033f0:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033f2:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 80033f4:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	400a      	ands	r2, r1
 80033fc:	2a01      	cmp	r2, #1
 80033fe:	d105      	bne.n	800340c <HAL_ADCEx_Calibration_Start+0x2c>
 8003400:	6819      	ldr	r1, [r3, #0]
 8003402:	4211      	tst	r1, r2
 8003404:	d13b      	bne.n	800347e <HAL_ADCEx_Calibration_Start+0x9e>
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	0412      	lsls	r2, r2, #16
 800340a:	d438      	bmi.n	800347e <HAL_ADCEx_Calibration_Start+0x9e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800340c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800340e:	4a1f      	ldr	r2, [pc, #124]	@ (800348c <HAL_ADCEx_Calibration_Start+0xac>)
 8003410:	4011      	ands	r1, r2
 8003412:	3206      	adds	r2, #6
 8003414:	32ff      	adds	r2, #255	@ 0xff
 8003416:	430a      	orrs	r2, r1
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003418:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800341a:	63a2      	str	r2, [r4, #56]	@ 0x38
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800341c:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	438a      	bics	r2, r1
 8003422:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003424:	2280      	movs	r2, #128	@ 0x80
 8003426:	6899      	ldr	r1, [r3, #8]
 8003428:	0612      	lsls	r2, r2, #24
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800342e:	f7ff fdc1 	bl	8002fb4 <HAL_GetTick>
 8003432:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	2a00      	cmp	r2, #0
 800343a:	db0d      	blt.n	8003458 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800343c:	2103      	movs	r1, #3
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800343e:	68da      	ldr	r2, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003440:	400d      	ands	r5, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003442:	4315      	orrs	r5, r2
 8003444:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003446:	2301      	movs	r3, #1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003448:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800344a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800344c:	438a      	bics	r2, r1
 800344e:	4313      	orrs	r3, r2
 8003450:	63a3      	str	r3, [r4, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003452:	2300      	movs	r3, #0
 8003454:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8003456:	e011      	b.n	800347c <HAL_ADCEx_Calibration_Start+0x9c>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003458:	f7ff fdac 	bl	8002fb4 <HAL_GetTick>
 800345c:	1bc0      	subs	r0, r0, r7
 800345e:	2802      	cmp	r0, #2
 8003460:	d9e8      	bls.n	8003434 <HAL_ADCEx_Calibration_Start+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	dae4      	bge.n	8003434 <HAL_ADCEx_Calibration_Start+0x54>
          ADC_STATE_CLR_SET(hadc->State,
 800346a:	2312      	movs	r3, #18
 800346c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          return HAL_ERROR;
 800346e:	2001      	movs	r0, #1
          ADC_STATE_CLR_SET(hadc->State,
 8003470:	439a      	bics	r2, r3
 8003472:	3b02      	subs	r3, #2
 8003474:	4313      	orrs	r3, r2
 8003476:	63a3      	str	r3, [r4, #56]	@ 0x38
          __HAL_UNLOCK(hadc);
 8003478:	2300      	movs	r3, #0
 800347a:	7033      	strb	r3, [r6, #0]
}
 800347c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800347e:	2320      	movs	r3, #32
 8003480:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8003482:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003484:	4313      	orrs	r3, r2
 8003486:	63a3      	str	r3, [r4, #56]	@ 0x38
    tmp_hal_status = HAL_ERROR;
 8003488:	e7e3      	b.n	8003452 <HAL_ADCEx_Calibration_Start+0x72>
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	fffffefd 	.word	0xfffffefd

08003490 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003490:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003492:	24ff      	movs	r4, #255	@ 0xff
 8003494:	2203      	movs	r2, #3
 8003496:	000b      	movs	r3, r1
 8003498:	0021      	movs	r1, r4
 800349a:	4002      	ands	r2, r0
 800349c:	00d2      	lsls	r2, r2, #3
 800349e:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034a0:	019b      	lsls	r3, r3, #6
 80034a2:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034a4:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034a6:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80034a8:	2800      	cmp	r0, #0
 80034aa:	db0a      	blt.n	80034c2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034ac:	24c0      	movs	r4, #192	@ 0xc0
 80034ae:	4a0b      	ldr	r2, [pc, #44]	@ (80034dc <HAL_NVIC_SetPriority+0x4c>)
 80034b0:	0880      	lsrs	r0, r0, #2
 80034b2:	0080      	lsls	r0, r0, #2
 80034b4:	1880      	adds	r0, r0, r2
 80034b6:	00a4      	lsls	r4, r4, #2
 80034b8:	5902      	ldr	r2, [r0, r4]
 80034ba:	400a      	ands	r2, r1
 80034bc:	4313      	orrs	r3, r2
 80034be:	5103      	str	r3, [r0, r4]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80034c0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034c2:	220f      	movs	r2, #15
 80034c4:	4010      	ands	r0, r2
 80034c6:	3808      	subs	r0, #8
 80034c8:	4a05      	ldr	r2, [pc, #20]	@ (80034e0 <HAL_NVIC_SetPriority+0x50>)
 80034ca:	0880      	lsrs	r0, r0, #2
 80034cc:	0080      	lsls	r0, r0, #2
 80034ce:	1880      	adds	r0, r0, r2
 80034d0:	69c2      	ldr	r2, [r0, #28]
 80034d2:	4011      	ands	r1, r2
 80034d4:	4319      	orrs	r1, r3
 80034d6:	61c1      	str	r1, [r0, #28]
 80034d8:	e7f2      	b.n	80034c0 <HAL_NVIC_SetPriority+0x30>
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80034e4:	2800      	cmp	r0, #0
 80034e6:	db05      	blt.n	80034f4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e8:	231f      	movs	r3, #31
 80034ea:	4018      	ands	r0, r3
 80034ec:	3b1e      	subs	r3, #30
 80034ee:	4083      	lsls	r3, r0
 80034f0:	4a01      	ldr	r2, [pc, #4]	@ (80034f8 <HAL_NVIC_EnableIRQ+0x14>)
 80034f2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80034f4:	4770      	bx	lr
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	e000e100 	.word	0xe000e100

080034fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034fc:	2280      	movs	r2, #128	@ 0x80
 80034fe:	1e43      	subs	r3, r0, #1
 8003500:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8003502:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003504:	4293      	cmp	r3, r2
 8003506:	d20d      	bcs.n	8003524 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003508:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350a:	4a07      	ldr	r2, [pc, #28]	@ (8003528 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800350c:	4807      	ldr	r0, [pc, #28]	@ (800352c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003510:	6a03      	ldr	r3, [r0, #32]
 8003512:	0609      	lsls	r1, r1, #24
 8003514:	021b      	lsls	r3, r3, #8
 8003516:	0a1b      	lsrs	r3, r3, #8
 8003518:	430b      	orrs	r3, r1
 800351a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800351c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003520:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003522:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003524:	4770      	bx	lr
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	e000e010 	.word	0xe000e010
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	0004      	movs	r4, r0
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if (NULL == hdma)
  {
    return HAL_ERROR;
 8003534:	2001      	movs	r0, #1
  if (NULL == hdma)
 8003536:	2c00      	cmp	r4, #0
 8003538:	d024      	beq.n	8003584 <HAL_DMA_Init+0x54>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800353a:	2302      	movs	r3, #2
 800353c:	1ca5      	adds	r5, r4, #2
 800353e:	77eb      	strb	r3, [r5, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003540:	6820      	ldr	r0, [r4, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003542:	4b11      	ldr	r3, [pc, #68]	@ (8003588 <HAL_DMA_Init+0x58>)
  tmp = hdma->Instance->CCR;
 8003544:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003546:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003548:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 800354a:	6863      	ldr	r3, [r4, #4]
 800354c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354e:	68e1      	ldr	r1, [r4, #12]
 8003550:	430b      	orrs	r3, r1
 8003552:	6921      	ldr	r1, [r4, #16]
 8003554:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003556:	6961      	ldr	r1, [r4, #20]
 8003558:	430b      	orrs	r3, r1
 800355a:	69a1      	ldr	r1, [r4, #24]
 800355c:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 800355e:	69e1      	ldr	r1, [r4, #28]
 8003560:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8003562:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003564:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003566:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_DMA_Init+0x5c>)
 8003568:	2114      	movs	r1, #20
 800356a:	18c0      	adds	r0, r0, r3
 800356c:	f7fc fdfc 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003570:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <HAL_DMA_Init+0x60>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003572:	0080      	lsls	r0, r0, #2
 8003574:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003576:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003578:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800357a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357c:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->Lock = HAL_UNLOCKED;
 800357e:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8003580:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003582:	77e0      	strb	r0, [r4, #31]
}
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	ffffc00f 	.word	0xffffc00f
 800358c:	bffdfff8 	.word	0xbffdfff8
 8003590:	40020000 	.word	0x40020000

08003594 <HAL_DMA_Start>:
{
 8003594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8003596:	1c44      	adds	r4, r0, #1
{
 8003598:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800359a:	7fe5      	ldrb	r5, [r4, #31]
 800359c:	2d01      	cmp	r5, #1
 800359e:	d025      	beq.n	80035ec <HAL_DMA_Start+0x58>
 80035a0:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 80035a2:	1c87      	adds	r7, r0, #2
  __HAL_LOCK(hdma);
 80035a4:	77e5      	strb	r5, [r4, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 80035a6:	7ffd      	ldrb	r5, [r7, #31]
 80035a8:	2600      	movs	r6, #0
 80035aa:	46ac      	mov	ip, r5
 80035ac:	4663      	mov	r3, ip
 80035ae:	b2ed      	uxtb	r5, r5
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d11a      	bne.n	80035ea <HAL_DMA_Start+0x56>
    hdma->State = HAL_DMA_STATE_BUSY;
 80035b4:	2402      	movs	r4, #2
 80035b6:	77fc      	strb	r4, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035b8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ba:	6386      	str	r6, [r0, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035bc:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035be:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035c0:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035c2:	40bd      	lsls	r5, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80035c4:	6026      	str	r6, [r4, #0]
  hdma->Instance->CNDTR = DataLength;
 80035c6:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035c8:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 80035ca:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80035cc:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ce:	6843      	ldr	r3, [r0, #4]
 80035d0:	2b10      	cmp	r3, #16
 80035d2:	d107      	bne.n	80035e4 <HAL_DMA_Start+0x50>
    hdma->Instance->CPAR = DstAddress;
 80035d4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80035d6:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80035d8:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 80035dc:	6822      	ldr	r2, [r4, #0]
 80035de:	4313      	orrs	r3, r2
 80035e0:	6023      	str	r3, [r4, #0]
}
 80035e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 80035e4:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80035e6:	60e2      	str	r2, [r4, #12]
 80035e8:	e7f6      	b.n	80035d8 <HAL_DMA_Start+0x44>
    __HAL_UNLOCK(hdma);
 80035ea:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 80035ec:	2002      	movs	r0, #2
 80035ee:	e7f8      	b.n	80035e2 <HAL_DMA_Start+0x4e>

080035f0 <HAL_DMA_Start_IT>:
{
 80035f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80035f2:	1c44      	adds	r4, r0, #1
{
 80035f4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80035f6:	7fe5      	ldrb	r5, [r4, #31]
 80035f8:	2d01      	cmp	r5, #1
 80035fa:	d033      	beq.n	8003664 <HAL_DMA_Start_IT+0x74>
 80035fc:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 80035fe:	1c87      	adds	r7, r0, #2
  __HAL_LOCK(hdma);
 8003600:	77e5      	strb	r5, [r4, #31]
  if (HAL_DMA_STATE_READY == hdma->State)
 8003602:	7ffd      	ldrb	r5, [r7, #31]
 8003604:	2600      	movs	r6, #0
 8003606:	46ac      	mov	ip, r5
 8003608:	4663      	mov	r3, ip
 800360a:	b2ed      	uxtb	r5, r5
 800360c:	2b01      	cmp	r3, #1
 800360e:	d128      	bne.n	8003662 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003610:	2402      	movs	r4, #2
 8003612:	77fc      	strb	r4, [r7, #31]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003614:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003616:	6386      	str	r6, [r0, #56]	@ 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003618:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800361a:	6c07      	ldr	r7, [r0, #64]	@ 0x40
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800361c:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800361e:	40bd      	lsls	r5, r7
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003620:	6026      	str	r6, [r4, #0]
  hdma->Instance->CNDTR = DataLength;
 8003622:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003624:	6bc6      	ldr	r6, [r0, #60]	@ 0x3c
 8003626:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8003628:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800362a:	6843      	ldr	r3, [r0, #4]
 800362c:	2b10      	cmp	r3, #16
 800362e:	d10e      	bne.n	800364e <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8003630:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003632:	60e1      	str	r1, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8003634:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003636:	6822      	ldr	r2, [r4, #0]
    if (NULL != hdma->XferHalfCpltCallback)
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800363c:	230e      	movs	r3, #14
 800363e:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003640:	6023      	str	r3, [r4, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003642:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8003644:	2000      	movs	r0, #0
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003646:	6822      	ldr	r2, [r4, #0]
 8003648:	4313      	orrs	r3, r2
 800364a:	6023      	str	r3, [r4, #0]
}
 800364c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 800364e:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8003650:	60e2      	str	r2, [r4, #12]
 8003652:	e7ef      	b.n	8003634 <HAL_DMA_Start_IT+0x44>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003654:	230a      	movs	r3, #10
 8003656:	4313      	orrs	r3, r2
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003658:	2204      	movs	r2, #4
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800365a:	6023      	str	r3, [r4, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	4393      	bics	r3, r2
 8003660:	e7ee      	b.n	8003640 <HAL_DMA_Start_IT+0x50>
    __HAL_UNLOCK(hdma);
 8003662:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8003664:	2002      	movs	r0, #2
 8003666:	e7f1      	b.n	800364c <HAL_DMA_Start_IT+0x5c>

08003668 <HAL_DMA_IRQHandler>:
{
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800366a:	2704      	movs	r7, #4
 800366c:	003e      	movs	r6, r7
 800366e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003670:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003672:	408e      	lsls	r6, r1
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003674:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003676:	6803      	ldr	r3, [r0, #0]
 8003678:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800367a:	4235      	tst	r5, r6
 800367c:	d00d      	beq.n	800369a <HAL_DMA_IRQHandler+0x32>
 800367e:	423c      	tst	r4, r7
 8003680:	d00b      	beq.n	800369a <HAL_DMA_IRQHandler+0x32>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003682:	6819      	ldr	r1, [r3, #0]
 8003684:	0689      	lsls	r1, r1, #26
 8003686:	d402      	bmi.n	800368e <HAL_DMA_IRQHandler+0x26>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003688:	6819      	ldr	r1, [r3, #0]
 800368a:	43b9      	bics	r1, r7
 800368c:	6019      	str	r1, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 800368e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003690:	6056      	str	r6, [r2, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8003692:	2b00      	cmp	r3, #0
 8003694:	d019      	beq.n	80036ca <HAL_DMA_IRQHandler+0x62>
      hdma->XferErrorCallback(hdma);
 8003696:	4798      	blx	r3
}
 8003698:	e017      	b.n	80036ca <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800369a:	2702      	movs	r7, #2
 800369c:	003e      	movs	r6, r7
 800369e:	408e      	lsls	r6, r1
 80036a0:	4235      	tst	r5, r6
 80036a2:	d013      	beq.n	80036cc <HAL_DMA_IRQHandler+0x64>
 80036a4:	423c      	tst	r4, r7
 80036a6:	d011      	beq.n	80036cc <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a8:	6819      	ldr	r1, [r3, #0]
 80036aa:	0689      	lsls	r1, r1, #26
 80036ac:	d406      	bmi.n	80036bc <HAL_DMA_IRQHandler+0x54>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80036ae:	240a      	movs	r4, #10
 80036b0:	6819      	ldr	r1, [r3, #0]
 80036b2:	43a1      	bics	r1, r4
 80036b4:	6019      	str	r1, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80036b6:	2101      	movs	r1, #1
 80036b8:	19c3      	adds	r3, r0, r7
 80036ba:	77d9      	strb	r1, [r3, #31]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80036bc:	6056      	str	r6, [r2, #4]
    __HAL_UNLOCK(hdma);
 80036be:	2200      	movs	r2, #0
 80036c0:	1c43      	adds	r3, r0, #1
 80036c2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferCpltCallback != NULL)
 80036c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if (hdma->XferErrorCallback != NULL)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d1e5      	bne.n	8003696 <HAL_DMA_IRQHandler+0x2e>
}
 80036ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80036cc:	2608      	movs	r6, #8
 80036ce:	0037      	movs	r7, r6
 80036d0:	408f      	lsls	r7, r1
 80036d2:	423d      	tst	r5, r7
 80036d4:	d0f9      	beq.n	80036ca <HAL_DMA_IRQHandler+0x62>
 80036d6:	4234      	tst	r4, r6
 80036d8:	d0f7      	beq.n	80036ca <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80036da:	250e      	movs	r5, #14
 80036dc:	681c      	ldr	r4, [r3, #0]
 80036de:	43ac      	bics	r4, r5
 80036e0:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80036e2:	2301      	movs	r3, #1
 80036e4:	001c      	movs	r4, r3
 80036e6:	408c      	lsls	r4, r1
 80036e8:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80036ea:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036ec:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80036ee:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 80036f0:	2200      	movs	r2, #0
 80036f2:	18c3      	adds	r3, r0, r3
 80036f4:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 80036f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80036f8:	e7e5      	b.n	80036c6 <HAL_DMA_IRQHandler+0x5e>
	...

080036fc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80036fc:	2300      	movs	r3, #0
{
 80036fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003700:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003702:	680a      	ldr	r2, [r1, #0]
 8003704:	0014      	movs	r4, r2
 8003706:	40dc      	lsrs	r4, r3
 8003708:	d101      	bne.n	800370e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 800370a:	b007      	add	sp, #28
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800370e:	2501      	movs	r5, #1
 8003710:	0014      	movs	r4, r2
 8003712:	409d      	lsls	r5, r3
 8003714:	402c      	ands	r4, r5
 8003716:	9400      	str	r4, [sp, #0]
    if (iocurrent != 0x00u)
 8003718:	422a      	tst	r2, r5
 800371a:	d100      	bne.n	800371e <HAL_GPIO_Init+0x22>
 800371c:	e098      	b.n	8003850 <HAL_GPIO_Init+0x154>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800371e:	684a      	ldr	r2, [r1, #4]
 8003720:	005f      	lsls	r7, r3, #1
 8003722:	4694      	mov	ip, r2
 8003724:	2203      	movs	r2, #3
 8003726:	4664      	mov	r4, ip
 8003728:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800372a:	2403      	movs	r4, #3
 800372c:	40bc      	lsls	r4, r7
 800372e:	43e4      	mvns	r4, r4
 8003730:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003732:	1e54      	subs	r4, r2, #1
 8003734:	2c01      	cmp	r4, #1
 8003736:	d82e      	bhi.n	8003796 <HAL_GPIO_Init+0x9a>
        temp = GPIOx->OSPEEDR;
 8003738:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800373a:	9c01      	ldr	r4, [sp, #4]
 800373c:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800373e:	68cc      	ldr	r4, [r1, #12]
 8003740:	40bc      	lsls	r4, r7
 8003742:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 8003744:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003746:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003748:	2601      	movs	r6, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800374a:	43ac      	bics	r4, r5
 800374c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800374e:	4664      	mov	r4, ip
 8003750:	0924      	lsrs	r4, r4, #4
 8003752:	4034      	ands	r4, r6
 8003754:	409c      	lsls	r4, r3
 8003756:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003758:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800375a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800375c:	9c01      	ldr	r4, [sp, #4]
 800375e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003760:	688c      	ldr	r4, [r1, #8]
 8003762:	40bc      	lsls	r4, r7
 8003764:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8003766:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003768:	2a02      	cmp	r2, #2
 800376a:	d116      	bne.n	800379a <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800376c:	2507      	movs	r5, #7
 800376e:	260f      	movs	r6, #15
 8003770:	401d      	ands	r5, r3
 8003772:	00ad      	lsls	r5, r5, #2
 8003774:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3u];
 8003776:	08dc      	lsrs	r4, r3, #3
 8003778:	00a4      	lsls	r4, r4, #2
 800377a:	1904      	adds	r4, r0, r4
 800377c:	9402      	str	r4, [sp, #8]
 800377e:	6a24      	ldr	r4, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003780:	9603      	str	r6, [sp, #12]
 8003782:	0026      	movs	r6, r4
 8003784:	9c03      	ldr	r4, [sp, #12]
 8003786:	43a6      	bics	r6, r4
 8003788:	0034      	movs	r4, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800378a:	690e      	ldr	r6, [r1, #16]
 800378c:	40ae      	lsls	r6, r5
 800378e:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8003790:	9c02      	ldr	r4, [sp, #8]
 8003792:	6226      	str	r6, [r4, #32]
 8003794:	e001      	b.n	800379a <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003796:	2a03      	cmp	r2, #3
 8003798:	d1df      	bne.n	800375a <HAL_GPIO_Init+0x5e>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800379a:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 800379c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800379e:	9d01      	ldr	r5, [sp, #4]
 80037a0:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037a2:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037a4:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 80037a6:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037a8:	4662      	mov	r2, ip
 80037aa:	02a4      	lsls	r4, r4, #10
 80037ac:	4222      	tst	r2, r4
 80037ae:	d04f      	beq.n	8003850 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b0:	2501      	movs	r5, #1
 80037b2:	4a28      	ldr	r2, [pc, #160]	@ (8003854 <HAL_GPIO_Init+0x158>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037b4:	2790      	movs	r7, #144	@ 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b6:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037b8:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ba:	432c      	orrs	r4, r5
 80037bc:	6194      	str	r4, [r2, #24]
 80037be:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80037c0:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c2:	402a      	ands	r2, r5
 80037c4:	9205      	str	r2, [sp, #20]
 80037c6:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 80037c8:	4a23      	ldr	r2, [pc, #140]	@ (8003858 <HAL_GPIO_Init+0x15c>)
 80037ca:	00a4      	lsls	r4, r4, #2
 80037cc:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037ce:	220f      	movs	r2, #15
 80037d0:	3502      	adds	r5, #2
 80037d2:	401d      	ands	r5, r3
 80037d4:	00ad      	lsls	r5, r5, #2
 80037d6:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 80037d8:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037da:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037dc:	2200      	movs	r2, #0
 80037de:	42b8      	cmp	r0, r7
 80037e0:	d00c      	beq.n	80037fc <HAL_GPIO_Init+0x100>
 80037e2:	4f1e      	ldr	r7, [pc, #120]	@ (800385c <HAL_GPIO_Init+0x160>)
 80037e4:	3201      	adds	r2, #1
 80037e6:	42b8      	cmp	r0, r7
 80037e8:	d008      	beq.n	80037fc <HAL_GPIO_Init+0x100>
 80037ea:	4f1d      	ldr	r7, [pc, #116]	@ (8003860 <HAL_GPIO_Init+0x164>)
 80037ec:	3201      	adds	r2, #1
 80037ee:	42b8      	cmp	r0, r7
 80037f0:	d004      	beq.n	80037fc <HAL_GPIO_Init+0x100>
 80037f2:	4f1c      	ldr	r7, [pc, #112]	@ (8003864 <HAL_GPIO_Init+0x168>)
 80037f4:	3203      	adds	r2, #3
 80037f6:	42b8      	cmp	r0, r7
 80037f8:	d100      	bne.n	80037fc <HAL_GPIO_Init+0x100>
 80037fa:	3a02      	subs	r2, #2
 80037fc:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037fe:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003800:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003802:	60a2      	str	r2, [r4, #8]
        temp = EXTI->RTSR;
 8003804:	4a18      	ldr	r2, [pc, #96]	@ (8003868 <HAL_GPIO_Init+0x16c>)
        temp &= ~(iocurrent);
 8003806:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8003808:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800380a:	9d00      	ldr	r5, [sp, #0]
        temp &= ~(iocurrent);
 800380c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800380e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003810:	02ff      	lsls	r7, r7, #11
 8003812:	d401      	bmi.n	8003818 <HAL_GPIO_Init+0x11c>
        temp &= ~(iocurrent);
 8003814:	0035      	movs	r5, r6
 8003816:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003818:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800381a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800381c:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800381e:	9d00      	ldr	r5, [sp, #0]
 8003820:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003822:	02bf      	lsls	r7, r7, #10
 8003824:	d401      	bmi.n	800382a <HAL_GPIO_Init+0x12e>
        temp &= ~(iocurrent);
 8003826:	0035      	movs	r5, r6
 8003828:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800382a:	4667      	mov	r7, ip
        EXTI->FTSR = temp;
 800382c:	60d5      	str	r5, [r2, #12]
        temp = EXTI->EMR;
 800382e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8003830:	9d00      	ldr	r5, [sp, #0]
 8003832:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003834:	03bf      	lsls	r7, r7, #14
 8003836:	d401      	bmi.n	800383c <HAL_GPIO_Init+0x140>
        temp &= ~(iocurrent);
 8003838:	0035      	movs	r5, r6
 800383a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800383c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800383e:	6055      	str	r5, [r2, #4]
        temp = EXTI->IMR;
 8003840:	6815      	ldr	r5, [r2, #0]
          temp |= iocurrent;
 8003842:	9e00      	ldr	r6, [sp, #0]
 8003844:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003846:	03ff      	lsls	r7, r7, #15
 8003848:	d401      	bmi.n	800384e <HAL_GPIO_Init+0x152>
        temp &= ~(iocurrent);
 800384a:	4025      	ands	r5, r4
 800384c:	002e      	movs	r6, r5
        EXTI->IMR = temp;
 800384e:	6016      	str	r6, [r2, #0]
    position++;
 8003850:	3301      	adds	r3, #1
 8003852:	e756      	b.n	8003702 <HAL_GPIO_Init+0x6>
 8003854:	40021000 	.word	0x40021000
 8003858:	40010000 	.word	0x40010000
 800385c:	48000400 	.word	0x48000400
 8003860:	48000800 	.word	0x48000800
 8003864:	48000c00 	.word	0x48000c00
 8003868:	40010400 	.word	0x40010400

0800386c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800386c:	6900      	ldr	r0, [r0, #16]
 800386e:	4008      	ands	r0, r1
 8003870:	1e43      	subs	r3, r0, #1
 8003872:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8003874:	b2c0      	uxtb	r0, r0
  }
 8003876:	4770      	bx	lr

08003878 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003878:	2a00      	cmp	r2, #0
 800387a:	d001      	beq.n	8003880 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800387c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800387e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003880:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8003882:	e7fc      	b.n	800387e <HAL_GPIO_WritePin+0x6>

08003884 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003884:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003886:	0013      	movs	r3, r2
 8003888:	400b      	ands	r3, r1
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	4391      	bics	r1, r2
 800388e:	430b      	orrs	r3, r1
 8003890:	6183      	str	r3, [r0, #24]
}
 8003892:	4770      	bx	lr

08003894 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003894:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8003896:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	4210      	tst	r0, r2
 800389c:	d002      	beq.n	80038a4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800389e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038a0:	f7fe fb30 	bl	8001f04 <HAL_GPIO_EXTI_Callback>
  }
}
 80038a4:	bd10      	pop	{r4, pc}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	40010400 	.word	0x40010400

080038ac <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80038ac:	6803      	ldr	r3, [r0, #0]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	0792      	lsls	r2, r2, #30
 80038b2:	d501      	bpl.n	80038b8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80038b4:	2200      	movs	r2, #0
 80038b6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038b8:	2201      	movs	r2, #1
 80038ba:	6999      	ldr	r1, [r3, #24]
 80038bc:	4211      	tst	r1, r2
 80038be:	d102      	bne.n	80038c6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80038c0:	6999      	ldr	r1, [r3, #24]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	619a      	str	r2, [r3, #24]
  }
}
 80038c6:	4770      	bx	lr

080038c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038c8:	b530      	push	{r4, r5, lr}
 80038ca:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038cc:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ce:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038d0:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038d2:	0589      	lsls	r1, r1, #22
 80038d4:	431a      	orrs	r2, r3
 80038d6:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80038d8:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <I2C_TransferConfig+0x28>)
 80038da:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038dc:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80038de:	0d64      	lsrs	r4, r4, #21
 80038e0:	4323      	orrs	r3, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038e2:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80038e4:	439d      	bics	r5, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038e6:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80038e8:	432a      	orrs	r2, r5
 80038ea:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038ec:	bd30      	pop	{r4, r5, pc}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	03ff63ff 	.word	0x03ff63ff

080038f4 <I2C_IsErrorOccurred>:
{
 80038f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038f6:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80038f8:	6802      	ldr	r2, [r0, #0]
{
 80038fa:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 80038fc:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038fe:	2310      	movs	r3, #16
 8003900:	000f      	movs	r7, r1
{
 8003902:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003904:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003906:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003908:	4219      	tst	r1, r3
 800390a:	d00d      	beq.n	8003928 <I2C_IsErrorOccurred+0x34>
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	0007      	movs	r7, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390e:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8003910:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	2120      	movs	r1, #32
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	420a      	tst	r2, r1
 800391a:	d15f      	bne.n	80039dc <I2C_IsErrorOccurred+0xe8>
 800391c:	2f00      	cmp	r7, #0
 800391e:	d031      	beq.n	8003984 <I2C_IsErrorOccurred+0x90>
    error_code |= HAL_I2C_ERROR_AF;
 8003920:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8003922:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8003924:	9b01      	ldr	r3, [sp, #4]
 8003926:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003928:	2280      	movs	r2, #128	@ 0x80
  itflag = hi2c->Instance->ISR;
 800392a:	6825      	ldr	r5, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800392c:	0052      	lsls	r2, r2, #1
  itflag = hi2c->Instance->ISR;
 800392e:	69ab      	ldr	r3, [r5, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003930:	4213      	tst	r3, r2
 8003932:	d002      	beq.n	800393a <I2C_IsErrorOccurred+0x46>
    error_code |= HAL_I2C_ERROR_BERR;
 8003934:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003936:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8003938:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800393a:	2280      	movs	r2, #128	@ 0x80
 800393c:	00d2      	lsls	r2, r2, #3
 800393e:	4213      	tst	r3, r2
 8003940:	d003      	beq.n	800394a <I2C_IsErrorOccurred+0x56>
    error_code |= HAL_I2C_ERROR_OVR;
 8003942:	2108      	movs	r1, #8
    status = HAL_ERROR;
 8003944:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_OVR;
 8003946:	430f      	orrs	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003948:	61ea      	str	r2, [r5, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800394a:	2280      	movs	r2, #128	@ 0x80
 800394c:	0092      	lsls	r2, r2, #2
 800394e:	4213      	tst	r3, r2
 8003950:	d049      	beq.n	80039e6 <I2C_IsErrorOccurred+0xf2>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003952:	2302      	movs	r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003954:	61ea      	str	r2, [r5, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8003956:	431f      	orrs	r7, r3
    I2C_Flush_TXDR(hi2c);
 8003958:	0020      	movs	r0, r4
 800395a:	f7ff ffa7 	bl	80038ac <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800395e:	686b      	ldr	r3, [r5, #4]
 8003960:	4a22      	ldr	r2, [pc, #136]	@ (80039ec <I2C_IsErrorOccurred+0xf8>)
    __HAL_UNLOCK(hi2c);
 8003962:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8003964:	4013      	ands	r3, r2
 8003966:	606b      	str	r3, [r5, #4]
    hi2c->ErrorCode |= error_code;
 8003968:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800396a:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 800396c:	433b      	orrs	r3, r7
 800396e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003970:	0023      	movs	r3, r4
 8003972:	3341      	adds	r3, #65	@ 0x41
 8003974:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003976:	0022      	movs	r2, r4
 8003978:	2300      	movs	r3, #0
 800397a:	3242      	adds	r2, #66	@ 0x42
    __HAL_UNLOCK(hi2c);
 800397c:	3440      	adds	r4, #64	@ 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800397e:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003980:	7023      	strb	r3, [r4, #0]
 8003982:	e032      	b.n	80039ea <I2C_IsErrorOccurred+0xf6>
      if (Timeout != HAL_MAX_DELAY)
 8003984:	1c72      	adds	r2, r6, #1
 8003986:	d0c5      	beq.n	8003914 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7ff fb14 	bl	8002fb4 <HAL_GetTick>
 800398c:	1b40      	subs	r0, r0, r5
 800398e:	42b0      	cmp	r0, r6
 8003990:	d801      	bhi.n	8003996 <I2C_IsErrorOccurred+0xa2>
 8003992:	2e00      	cmp	r6, #0
 8003994:	d1bd      	bne.n	8003912 <I2C_IsErrorOccurred+0x1e>
          tmp2 = hi2c->Mode;
 8003996:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003998:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 800399a:	3242      	adds	r2, #66	@ 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800399c:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800399e:	7811      	ldrb	r1, [r2, #0]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039a0:	699a      	ldr	r2, [r3, #24]
          tmp2 = hi2c->Mode;
 80039a2:	b2c9      	uxtb	r1, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039a4:	0412      	lsls	r2, r2, #16
 80039a6:	d50b      	bpl.n	80039c0 <I2C_IsErrorOccurred+0xcc>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039a8:	2280      	movs	r2, #128	@ 0x80
 80039aa:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039ac:	4210      	tst	r0, r2
 80039ae:	d107      	bne.n	80039c0 <I2C_IsErrorOccurred+0xcc>
              (tmp1 != I2C_CR2_STOP) && \
 80039b0:	2920      	cmp	r1, #32
 80039b2:	d005      	beq.n	80039c0 <I2C_IsErrorOccurred+0xcc>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039b4:	6859      	ldr	r1, [r3, #4]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80039ba:	f7ff fafb 	bl	8002fb4 <HAL_GetTick>
 80039be:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c0:	2220      	movs	r2, #32
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	4213      	tst	r3, r2
 80039c8:	d1a3      	bne.n	8003912 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039ca:	f7ff faf3 	bl	8002fb4 <HAL_GetTick>
 80039ce:	1b40      	subs	r0, r0, r5
 80039d0:	2819      	cmp	r0, #25
 80039d2:	d9f5      	bls.n	80039c0 <I2C_IsErrorOccurred+0xcc>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80039d4:	2320      	movs	r3, #32
              status = HAL_ERROR;
 80039d6:	2701      	movs	r7, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	e79a      	b.n	8003912 <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 80039dc:	2f00      	cmp	r7, #0
 80039de:	d19f      	bne.n	8003920 <I2C_IsErrorOccurred+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039e0:	2220      	movs	r2, #32
 80039e2:	61da      	str	r2, [r3, #28]
 80039e4:	e79c      	b.n	8003920 <I2C_IsErrorOccurred+0x2c>
  if (status != HAL_OK)
 80039e6:	2800      	cmp	r0, #0
 80039e8:	d1b6      	bne.n	8003958 <I2C_IsErrorOccurred+0x64>
}
 80039ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039ec:	fe00e800 	.word	0xfe00e800

080039f0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	0004      	movs	r4, r0
 80039f4:	000d      	movs	r5, r1
 80039f6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039f8:	2702      	movs	r7, #2
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	423b      	tst	r3, r7
 8003a00:	d001      	beq.n	8003a06 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8003a02:	2000      	movs	r0, #0
 8003a04:	e021      	b.n	8003a4a <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a06:	0032      	movs	r2, r6
 8003a08:	0029      	movs	r1, r5
 8003a0a:	0020      	movs	r0, r4
 8003a0c:	f7ff ff72 	bl	80038f4 <I2C_IsErrorOccurred>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d119      	bne.n	8003a48 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (Timeout != HAL_MAX_DELAY)
 8003a14:	1c6b      	adds	r3, r5, #1
 8003a16:	d0f0      	beq.n	80039fa <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a18:	f7ff facc 	bl	8002fb4 <HAL_GetTick>
 8003a1c:	1b80      	subs	r0, r0, r6
 8003a1e:	42a8      	cmp	r0, r5
 8003a20:	d801      	bhi.n	8003a26 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8003a22:	2d00      	cmp	r5, #0
 8003a24:	d1e9      	bne.n	80039fa <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	6999      	ldr	r1, [r3, #24]
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	000a      	movs	r2, r1
 8003a2e:	401a      	ands	r2, r3
 8003a30:	4219      	tst	r1, r3
 8003a32:	d1e2      	bne.n	80039fa <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a34:	2120      	movs	r1, #32
 8003a36:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8003a3e:	3440      	adds	r4, #64	@ 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8003a40:	3341      	adds	r3, #65	@ 0x41
 8003a42:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8003a46:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003a48:	2001      	movs	r0, #1
}
 8003a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a4c <I2C_WaitOnFlagUntilTimeout>:
{
 8003a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4e:	0004      	movs	r4, r0
 8003a50:	000d      	movs	r5, r1
 8003a52:	0017      	movs	r7, r2
 8003a54:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	402b      	ands	r3, r5
 8003a5c:	1b5b      	subs	r3, r3, r5
 8003a5e:	425a      	negs	r2, r3
 8003a60:	4153      	adcs	r3, r2
 8003a62:	42bb      	cmp	r3, r7
 8003a64:	d001      	beq.n	8003a6a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8003a66:	2000      	movs	r0, #0
 8003a68:	e026      	b.n	8003ab8 <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	0031      	movs	r1, r6
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	9a06      	ldr	r2, [sp, #24]
 8003a70:	f7ff ff40 	bl	80038f4 <I2C_IsErrorOccurred>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d11e      	bne.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003a78:	1c73      	adds	r3, r6, #1
 8003a7a:	d0ec      	beq.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7c:	f7ff fa9a 	bl	8002fb4 <HAL_GetTick>
 8003a80:	9b06      	ldr	r3, [sp, #24]
 8003a82:	1ac0      	subs	r0, r0, r3
 8003a84:	42b0      	cmp	r0, r6
 8003a86:	d801      	bhi.n	8003a8c <I2C_WaitOnFlagUntilTimeout+0x40>
 8003a88:	2e00      	cmp	r6, #0
 8003a8a:	d1e4      	bne.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	402b      	ands	r3, r5
 8003a92:	1b5b      	subs	r3, r3, r5
 8003a94:	425a      	negs	r2, r3
 8003a96:	4153      	adcs	r3, r2
 8003a98:	42bb      	cmp	r3, r7
 8003a9a:	d1dc      	bne.n	8003a56 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	0023      	movs	r3, r4
 8003aa6:	3341      	adds	r3, #65	@ 0x41
 8003aa8:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aaa:	0022      	movs	r2, r4
 8003aac:	2300      	movs	r3, #0
 8003aae:	3242      	adds	r2, #66	@ 0x42
          __HAL_UNLOCK(hi2c);
 8003ab0:	3440      	adds	r4, #64	@ 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab2:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8003ab4:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003ab6:	2001      	movs	r0, #1
}
 8003ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003aba <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abc:	0004      	movs	r4, r0
 8003abe:	000e      	movs	r6, r1
 8003ac0:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac2:	2520      	movs	r5, #32
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	422b      	tst	r3, r5
 8003aca:	d001      	beq.n	8003ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8003acc:	2000      	movs	r0, #0
 8003ace:	e01d      	b.n	8003b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ad0:	003a      	movs	r2, r7
 8003ad2:	0031      	movs	r1, r6
 8003ad4:	0020      	movs	r0, r4
 8003ad6:	f7ff ff0d 	bl	80038f4 <I2C_IsErrorOccurred>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d115      	bne.n	8003b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7ff fa69 	bl	8002fb4 <HAL_GetTick>
 8003ae2:	1bc0      	subs	r0, r0, r7
 8003ae4:	42b0      	cmp	r0, r6
 8003ae6:	d801      	bhi.n	8003aec <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8003ae8:	2e00      	cmp	r6, #0
 8003aea:	d1eb      	bne.n	8003ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	001a      	movs	r2, r3
 8003af2:	402a      	ands	r2, r5
 8003af4:	422b      	tst	r3, r5
 8003af6:	d1e5      	bne.n	8003ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003afa:	432b      	orrs	r3, r5
 8003afc:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	0023      	movs	r3, r4
        __HAL_UNLOCK(hi2c);
 8003b00:	3440      	adds	r4, #64	@ 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	3341      	adds	r3, #65	@ 0x41
 8003b04:	701d      	strb	r5, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b06:	705a      	strb	r2, [r3, #1]
        __HAL_UNLOCK(hi2c);
 8003b08:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 8003b0a:	2001      	movs	r0, #1
}
 8003b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b10 <HAL_I2C_Init>:
{
 8003b10:	b570      	push	{r4, r5, r6, lr}
 8003b12:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003b14:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d04e      	beq.n	8003bb8 <HAL_I2C_Init+0xa8>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b1a:	0025      	movs	r5, r4
 8003b1c:	3541      	adds	r5, #65	@ 0x41
 8003b1e:	782b      	ldrb	r3, [r5, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8003b26:	0023      	movs	r3, r4
 8003b28:	3340      	adds	r3, #64	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8003b2a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8003b2c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8003b2e:	f7ff f845 	bl	8002bbc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b32:	2324      	movs	r3, #36	@ 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003b34:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b36:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8003b38:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b3a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8003b3c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b3e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8003b40:	438a      	bics	r2, r1
 8003b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b44:	491d      	ldr	r1, [pc, #116]	@ (8003bbc <HAL_I2C_Init+0xac>)
 8003b46:	6862      	ldr	r2, [r4, #4]
 8003b48:	400a      	ands	r2, r1
 8003b4a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	491c      	ldr	r1, [pc, #112]	@ (8003bc0 <HAL_I2C_Init+0xb0>)
 8003b50:	400a      	ands	r2, r1
 8003b52:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b54:	2801      	cmp	r0, #1
 8003b56:	d107      	bne.n	8003b68 <HAL_I2C_Init+0x58>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b58:	2280      	movs	r2, #128	@ 0x80
 8003b5a:	0212      	lsls	r2, r2, #8
 8003b5c:	4332      	orrs	r2, r6
 8003b5e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	4818      	ldr	r0, [pc, #96]	@ (8003bc4 <HAL_I2C_Init+0xb4>)
 8003b64:	4002      	ands	r2, r0
 8003b66:	e009      	b.n	8003b7c <HAL_I2C_Init+0x6c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b68:	2284      	movs	r2, #132	@ 0x84
 8003b6a:	0212      	lsls	r2, r2, #8
 8003b6c:	4332      	orrs	r2, r6
 8003b6e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b70:	2802      	cmp	r0, #2
 8003b72:	d1f5      	bne.n	8003b60 <HAL_I2C_Init+0x50>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b74:	2280      	movs	r2, #128	@ 0x80
 8003b76:	6858      	ldr	r0, [r3, #4]
 8003b78:	0112      	lsls	r2, r2, #4
 8003b7a:	4302      	orrs	r2, r0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b7c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b7e:	6858      	ldr	r0, [r3, #4]
 8003b80:	4a11      	ldr	r2, [pc, #68]	@ (8003bc8 <HAL_I2C_Init+0xb8>)
 8003b82:	4302      	orrs	r2, r0
 8003b84:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b86:	68da      	ldr	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b88:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b8a:	400a      	ands	r2, r1
 8003b8c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b8e:	6961      	ldr	r1, [r4, #20]
 8003b90:	6922      	ldr	r2, [r4, #16]
 8003b92:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b94:	69a1      	ldr	r1, [r4, #24]
 8003b96:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b9c:	6a21      	ldr	r1, [r4, #32]
 8003b9e:	69e2      	ldr	r2, [r4, #28]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	6819      	ldr	r1, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003bac:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bae:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bb0:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bb2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb4:	3442      	adds	r4, #66	@ 0x42
 8003bb6:	7020      	strb	r0, [r4, #0]
}
 8003bb8:	bd70      	pop	{r4, r5, r6, pc}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	f0ffffff 	.word	0xf0ffffff
 8003bc0:	ffff7fff 	.word	0xffff7fff
 8003bc4:	fffff7ff 	.word	0xfffff7ff
 8003bc8:	02008000 	.word	0x02008000

08003bcc <HAL_I2C_Mem_Write>:
{
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bce:	0007      	movs	r7, r0
{
 8003bd0:	b087      	sub	sp, #28
 8003bd2:	9303      	str	r3, [sp, #12]
 8003bd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8003bd6:	9202      	str	r2, [sp, #8]
 8003bd8:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bda:	3741      	adds	r7, #65	@ 0x41
{
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	9204      	str	r2, [sp, #16]
 8003be0:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be2:	783b      	ldrb	r3, [r7, #0]
{
 8003be4:	0004      	movs	r4, r0
 8003be6:	000e      	movs	r6, r1
    __HAL_LOCK(hi2c);
 8003be8:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d108      	bne.n	8003c00 <HAL_I2C_Mem_Write+0x34>
    if ((pData == NULL) || (Size == 0U))
 8003bee:	2a00      	cmp	r2, #0
 8003bf0:	d002      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x2c>
 8003bf2:	9b05      	ldr	r3, [sp, #20]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bf8:	2380      	movs	r3, #128	@ 0x80
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003bfe:	2001      	movs	r0, #1
}
 8003c00:	b007      	add	sp, #28
 8003c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003c04:	0023      	movs	r3, r4
 8003c06:	3340      	adds	r3, #64	@ 0x40
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	2002      	movs	r0, #2
 8003c0c:	2a01      	cmp	r2, #1
 8003c0e:	d0f7      	beq.n	8003c00 <HAL_I2C_Mem_Write+0x34>
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003c14:	f7ff f9ce 	bl	8002fb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c18:	2180      	movs	r1, #128	@ 0x80
    tickstart = HAL_GetTick();
 8003c1a:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c1c:	9000      	str	r0, [sp, #0]
 8003c1e:	2319      	movs	r3, #25
 8003c20:	2201      	movs	r2, #1
 8003c22:	0020      	movs	r0, r4
 8003c24:	0209      	lsls	r1, r1, #8
 8003c26:	f7ff ff11 	bl	8003a4c <I2C_WaitOnFlagUntilTimeout>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d1e7      	bne.n	8003bfe <HAL_I2C_Mem_Write+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c2e:	2321      	movs	r3, #33	@ 0x21
 8003c30:	703b      	strb	r3, [r7, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c32:	0027      	movs	r7, r4
 8003c34:	331f      	adds	r3, #31
 8003c36:	3742      	adds	r7, #66	@ 0x42
 8003c38:	703b      	strb	r3, [r7, #0]
    hi2c->pBuffPtr  = pData;
 8003c3a:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3c:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8003c3e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c40:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8003c42:	6360      	str	r0, [r4, #52]	@ 0x34
    hi2c->XferCount = Size;
 8003c44:	8563      	strh	r3, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c46:	466b      	mov	r3, sp
 8003c48:	7b1a      	ldrb	r2, [r3, #12]
 8003c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d78 <HAL_I2C_Mem_Write+0x1ac>)
 8003c4c:	0031      	movs	r1, r6
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	0020      	movs	r0, r4
 8003c54:	045b      	lsls	r3, r3, #17
 8003c56:	f7ff fe37 	bl	80038c8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	002a      	movs	r2, r5
 8003c5c:	0020      	movs	r0, r4
 8003c5e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003c60:	f7ff fec6 	bl	80039f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	d129      	bne.n	8003cbc <HAL_I2C_Mem_Write+0xf0>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c68:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c6a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c6c:	2a01      	cmp	r2, #1
 8003c6e:	d116      	bne.n	8003c9e <HAL_I2C_Mem_Write+0xd2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c70:	466a      	mov	r2, sp
 8003c72:	7a12      	ldrb	r2, [r2, #8]
 8003c74:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c76:	2200      	movs	r2, #0
 8003c78:	2180      	movs	r1, #128	@ 0x80
 8003c7a:	0020      	movs	r0, r4
 8003c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003c7e:	9500      	str	r5, [sp, #0]
 8003c80:	f7ff fee4 	bl	8003a4c <I2C_WaitOnFlagUntilTimeout>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	d119      	bne.n	8003cbc <HAL_I2C_Mem_Write+0xf0>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c88:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003c8a:	2bff      	cmp	r3, #255	@ 0xff
 8003c8c:	d81a      	bhi.n	8003cc4 <HAL_I2C_Mem_Write+0xf8>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c8e:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = hi2c->XferCount;
 8003c90:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c92:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8003c94:	b292      	uxth	r2, r2
 8003c96:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	9000      	str	r0, [sp, #0]
 8003c9c:	e017      	b.n	8003cce <HAL_I2C_Mem_Write+0x102>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c9e:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca0:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ca2:	0a12      	lsrs	r2, r2, #8
 8003ca4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003ca8:	002a      	movs	r2, r5
 8003caa:	f7ff fea1 	bl	80039f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d104      	bne.n	8003cbc <HAL_I2C_Mem_Write+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb2:	466b      	mov	r3, sp
 8003cb4:	6822      	ldr	r2, [r4, #0]
 8003cb6:	7a1b      	ldrb	r3, [r3, #8]
 8003cb8:	6293      	str	r3, [r2, #40]	@ 0x28
 8003cba:	e7dc      	b.n	8003c76 <HAL_I2C_Mem_Write+0xaa>
      __HAL_UNLOCK(hi2c);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	3440      	adds	r4, #64	@ 0x40
 8003cc0:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003cc2:	e79c      	b.n	8003bfe <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cc4:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cc6:	2380      	movs	r3, #128	@ 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cc8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cca:	045b      	lsls	r3, r3, #17
 8003ccc:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cce:	0031      	movs	r1, r6
 8003cd0:	0020      	movs	r0, r4
 8003cd2:	f7ff fdf9 	bl	80038c8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd6:	002a      	movs	r2, r5
 8003cd8:	0020      	movs	r0, r4
 8003cda:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003cdc:	f7ff fe88 	bl	80039f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d000      	beq.n	8003ce6 <HAL_I2C_Mem_Write+0x11a>
 8003ce4:	e78b      	b.n	8003bfe <HAL_I2C_Mem_Write+0x32>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ce6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ce8:	6822      	ldr	r2, [r4, #0]
 8003cea:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8003cec:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cee:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003cf0:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003cf2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cf4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003cfc:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cfe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d00:	b292      	uxth	r2, r2
 8003d02:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d016      	beq.n	8003d36 <HAL_I2C_Mem_Write+0x16a>
 8003d08:	2a00      	cmp	r2, #0
 8003d0a:	d114      	bne.n	8003d36 <HAL_I2C_Mem_Write+0x16a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d0c:	2180      	movs	r1, #128	@ 0x80
 8003d0e:	0020      	movs	r0, r4
 8003d10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d12:	9500      	str	r5, [sp, #0]
 8003d14:	f7ff fe9a 	bl	8003a4c <I2C_WaitOnFlagUntilTimeout>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d000      	beq.n	8003d1e <HAL_I2C_Mem_Write+0x152>
 8003d1c:	e76f      	b.n	8003bfe <HAL_I2C_Mem_Write+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d1e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003d20:	2bff      	cmp	r3, #255	@ 0xff
 8003d22:	d921      	bls.n	8003d68 <HAL_I2C_Mem_Write+0x19c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d24:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d26:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d28:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d2a:	045b      	lsls	r3, r3, #17
 8003d2c:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d2e:	0031      	movs	r1, r6
 8003d30:	0020      	movs	r0, r4
 8003d32:	f7ff fdc9 	bl	80038c8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003d36:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1cc      	bne.n	8003cd6 <HAL_I2C_Mem_Write+0x10a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3c:	002a      	movs	r2, r5
 8003d3e:	0020      	movs	r0, r4
 8003d40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003d42:	f7ff feba 	bl	8003aba <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d000      	beq.n	8003d4c <HAL_I2C_Mem_Write+0x180>
 8003d4a:	e758      	b.n	8003bfe <HAL_I2C_Mem_Write+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4c:	2120      	movs	r1, #32
 8003d4e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003d50:	4d0a      	ldr	r5, [pc, #40]	@ (8003d7c <HAL_I2C_Mem_Write+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d52:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	402a      	ands	r2, r5
 8003d58:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003d5c:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	3341      	adds	r3, #65	@ 0x41
 8003d60:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d62:	7038      	strb	r0, [r7, #0]
    __HAL_UNLOCK(hi2c);
 8003d64:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003d66:	e74b      	b.n	8003c00 <HAL_I2C_Mem_Write+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d68:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8003d6a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d6c:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8003d6e:	b292      	uxth	r2, r2
 8003d70:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	9000      	str	r0, [sp, #0]
 8003d76:	e7da      	b.n	8003d2e <HAL_I2C_Mem_Write+0x162>
 8003d78:	80002000 	.word	0x80002000
 8003d7c:	fe00e800 	.word	0xfe00e800

08003d80 <HAL_I2C_Mem_Read>:
{
 8003d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d82:	0006      	movs	r6, r0
{
 8003d84:	b087      	sub	sp, #28
 8003d86:	9303      	str	r3, [sp, #12]
 8003d88:	ab0c      	add	r3, sp, #48	@ 0x30
 8003d8a:	9202      	str	r2, [sp, #8]
 8003d8c:	cb04      	ldmia	r3!, {r2}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8e:	3641      	adds	r6, #65	@ 0x41
{
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	9204      	str	r2, [sp, #16]
 8003d94:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d96:	7833      	ldrb	r3, [r6, #0]
{
 8003d98:	0004      	movs	r4, r0
 8003d9a:	000f      	movs	r7, r1
    __HAL_LOCK(hi2c);
 8003d9c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d108      	bne.n	8003db4 <HAL_I2C_Mem_Read+0x34>
    if ((pData == NULL) || (Size == 0U))
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	d002      	beq.n	8003dac <HAL_I2C_Mem_Read+0x2c>
 8003da6:	9b05      	ldr	r3, [sp, #20]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8003db2:	2001      	movs	r0, #1
}
 8003db4:	b007      	add	sp, #28
 8003db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003db8:	0023      	movs	r3, r4
 8003dba:	3340      	adds	r3, #64	@ 0x40
 8003dbc:	781a      	ldrb	r2, [r3, #0]
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	2a01      	cmp	r2, #1
 8003dc2:	d0f7      	beq.n	8003db4 <HAL_I2C_Mem_Read+0x34>
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003dc8:	f7ff f8f4 	bl	8002fb4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dcc:	2180      	movs	r1, #128	@ 0x80
 8003dce:	2319      	movs	r3, #25
 8003dd0:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8003dd2:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	0020      	movs	r0, r4
 8003dd8:	0209      	lsls	r1, r1, #8
 8003dda:	f7ff fe37 	bl	8003a4c <I2C_WaitOnFlagUntilTimeout>
 8003dde:	1e03      	subs	r3, r0, #0
 8003de0:	d1e7      	bne.n	8003db2 <HAL_I2C_Mem_Read+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003de2:	2222      	movs	r2, #34	@ 0x22
 8003de4:	7032      	strb	r2, [r6, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003de6:	0026      	movs	r6, r4
 8003de8:	321e      	adds	r2, #30
 8003dea:	3642      	adds	r6, #66	@ 0x42
 8003dec:	7032      	strb	r2, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8003dee:	9a04      	ldr	r2, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df0:	6460      	str	r0, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8003df2:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003df4:	9a05      	ldr	r2, [sp, #20]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003df6:	494e      	ldr	r1, [pc, #312]	@ (8003f30 <HAL_I2C_Mem_Read+0x1b0>)
    hi2c->XferCount = Size;
 8003df8:	8562      	strh	r2, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003dfa:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8003dfc:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003dfe:	7b12      	ldrb	r2, [r2, #12]
 8003e00:	0020      	movs	r0, r4
 8003e02:	9100      	str	r1, [sp, #0]
 8003e04:	0039      	movs	r1, r7
 8003e06:	f7ff fd5f 	bl	80038c8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e0a:	002a      	movs	r2, r5
 8003e0c:	0020      	movs	r0, r4
 8003e0e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003e10:	f7ff fdee 	bl	80039f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d12a      	bne.n	8003e6e <HAL_I2C_Mem_Read+0xee>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e18:	9a03      	ldr	r2, [sp, #12]
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e1a:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e1c:	2a01      	cmp	r2, #1
 8003e1e:	d117      	bne.n	8003e50 <HAL_I2C_Mem_Read+0xd0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e20:	466a      	mov	r2, sp
 8003e22:	7a12      	ldrb	r2, [r2, #8]
 8003e24:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e26:	2200      	movs	r2, #0
 8003e28:	2140      	movs	r1, #64	@ 0x40
 8003e2a:	0020      	movs	r0, r4
 8003e2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e2e:	9500      	str	r5, [sp, #0]
 8003e30:	f7ff fe0c 	bl	8003a4c <I2C_WaitOnFlagUntilTimeout>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d11a      	bne.n	8003e6e <HAL_I2C_Mem_Read+0xee>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e38:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f34 <HAL_I2C_Mem_Read+0x1b4>)
 8003e3c:	2aff      	cmp	r2, #255	@ 0xff
 8003e3e:	d81a      	bhi.n	8003e76 <HAL_I2C_Mem_Read+0xf6>
      hi2c->XferSize = hi2c->XferCount;
 8003e40:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003e42:	b292      	uxth	r2, r2
 8003e44:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	049b      	lsls	r3, r3, #18
 8003e4e:	e017      	b.n	8003e80 <HAL_I2C_Mem_Read+0x100>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e50:	9a02      	ldr	r2, [sp, #8]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	0020      	movs	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e54:	0a12      	lsrs	r2, r2, #8
 8003e56:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003e5a:	002a      	movs	r2, r5
 8003e5c:	f7ff fdc8 	bl	80039f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_I2C_Mem_Read+0xee>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e64:	466b      	mov	r3, sp
 8003e66:	6822      	ldr	r2, [r4, #0]
 8003e68:	7a1b      	ldrb	r3, [r3, #8]
 8003e6a:	6293      	str	r3, [r2, #40]	@ 0x28
 8003e6c:	e7db      	b.n	8003e26 <HAL_I2C_Mem_Read+0xa6>
      __HAL_UNLOCK(hi2c);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	3440      	adds	r4, #64	@ 0x40
 8003e72:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8003e74:	e79d      	b.n	8003db2 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = 1U;
 8003e76:	2201      	movs	r2, #1
 8003e78:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e80:	0039      	movs	r1, r7
 8003e82:	0020      	movs	r0, r4
 8003e84:	f7ff fd20 	bl	80038c8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2104      	movs	r1, #4
 8003e8c:	0020      	movs	r0, r4
 8003e8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003e90:	9500      	str	r5, [sp, #0]
 8003e92:	f7ff fddb 	bl	8003a4c <I2C_WaitOnFlagUntilTimeout>
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d000      	beq.n	8003e9c <HAL_I2C_Mem_Read+0x11c>
 8003e9a:	e78a      	b.n	8003db2 <HAL_I2C_Mem_Read+0x32>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ea0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ea2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ea4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8003ea6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003eac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003eae:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003eb6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003eb8:	b292      	uxth	r2, r2
 8003eba:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d016      	beq.n	8003eee <HAL_I2C_Mem_Read+0x16e>
 8003ec0:	2a00      	cmp	r2, #0
 8003ec2:	d114      	bne.n	8003eee <HAL_I2C_Mem_Read+0x16e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ec4:	2180      	movs	r1, #128	@ 0x80
 8003ec6:	0020      	movs	r0, r4
 8003ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003eca:	9500      	str	r5, [sp, #0]
 8003ecc:	f7ff fdbe 	bl	8003a4c <I2C_WaitOnFlagUntilTimeout>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d000      	beq.n	8003ed6 <HAL_I2C_Mem_Read+0x156>
 8003ed4:	e76d      	b.n	8003db2 <HAL_I2C_Mem_Read+0x32>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ed8:	2bff      	cmp	r3, #255	@ 0xff
 8003eda:	d921      	bls.n	8003f20 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = 1U;
 8003edc:	2201      	movs	r2, #1
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ede:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = 1U;
 8003ee0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ee2:	045b      	lsls	r3, r3, #17
 8003ee4:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ee6:	0039      	movs	r1, r7
 8003ee8:	0020      	movs	r0, r4
 8003eea:	f7ff fced 	bl	80038c8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8003eee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1c9      	bne.n	8003e88 <HAL_I2C_Mem_Read+0x108>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef4:	002a      	movs	r2, r5
 8003ef6:	0020      	movs	r0, r4
 8003ef8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8003efa:	f7ff fdde 	bl	8003aba <I2C_WaitOnSTOPFlagUntilTimeout>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d000      	beq.n	8003f04 <HAL_I2C_Mem_Read+0x184>
 8003f02:	e756      	b.n	8003db2 <HAL_I2C_Mem_Read+0x32>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f04:	2120      	movs	r1, #32
 8003f06:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003f08:	4d0b      	ldr	r5, [pc, #44]	@ (8003f38 <HAL_I2C_Mem_Read+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f0a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	402a      	ands	r2, r5
 8003f10:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8003f14:	3440      	adds	r4, #64	@ 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	3341      	adds	r3, #65	@ 0x41
 8003f18:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f1a:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8003f1c:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8003f1e:	e749      	b.n	8003db4 <HAL_I2C_Mem_Read+0x34>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f20:	2380      	movs	r3, #128	@ 0x80
          hi2c->XferSize = hi2c->XferCount;
 8003f22:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f24:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 8003f26:	b292      	uxth	r2, r2
 8003f28:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	9000      	str	r0, [sp, #0]
 8003f2e:	e7da      	b.n	8003ee6 <HAL_I2C_Mem_Read+0x166>
 8003f30:	80002000 	.word	0x80002000
 8003f34:	80002400 	.word	0x80002400
 8003f38:	fe00e800 	.word	0xfe00e800

08003f3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	0004      	movs	r4, r0
 8003f40:	3441      	adds	r4, #65	@ 0x41
 8003f42:	7822      	ldrb	r2, [r4, #0]
{
 8003f44:	0003      	movs	r3, r0
 8003f46:	000f      	movs	r7, r1
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f48:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4a:	b2d6      	uxtb	r6, r2
 8003f4c:	2a20      	cmp	r2, #32
 8003f4e:	d118      	bne.n	8003f82 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8003f50:	001d      	movs	r5, r3
 8003f52:	3540      	adds	r5, #64	@ 0x40
 8003f54:	782a      	ldrb	r2, [r5, #0]
 8003f56:	2a01      	cmp	r2, #1
 8003f58:	d013      	beq.n	8003f82 <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5a:	2224      	movs	r2, #36	@ 0x24
 8003f5c:	7022      	strb	r2, [r4, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3a23      	subs	r2, #35	@ 0x23
 8003f62:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f64:	4807      	ldr	r0, [pc, #28]	@ (8003f84 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8003f66:	4391      	bics	r1, r2
 8003f68:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f6a:	6819      	ldr	r1, [r3, #0]
 8003f6c:	4001      	ands	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f6e:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f70:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f72:	6819      	ldr	r1, [r3, #0]
 8003f74:	4339      	orrs	r1, r7
 8003f76:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f7e:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8003f80:	7028      	strb	r0, [r5, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f84:	ffffefff 	.word	0xffffefff

08003f88 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f88:	0002      	movs	r2, r0
{
 8003f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8c:	3241      	adds	r2, #65	@ 0x41
 8003f8e:	7814      	ldrb	r4, [r2, #0]
{
 8003f90:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f92:	b2e5      	uxtb	r5, r4
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f94:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f96:	2c20      	cmp	r4, #32
 8003f98:	d117      	bne.n	8003fca <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8003f9a:	001c      	movs	r4, r3
 8003f9c:	3440      	adds	r4, #64	@ 0x40
 8003f9e:	7826      	ldrb	r6, [r4, #0]
 8003fa0:	2e01      	cmp	r6, #1
 8003fa2:	d012      	beq.n	8003fca <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa4:	3022      	adds	r0, #34	@ 0x22
 8003fa6:	7010      	strb	r0, [r2, #0]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3823      	subs	r0, #35	@ 0x23
 8003fac:	681e      	ldr	r6, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fae:	4f07      	ldr	r7, [pc, #28]	@ (8003fcc <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8003fb0:	4386      	bics	r6, r0
 8003fb2:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8003fb4:	681e      	ldr	r6, [r3, #0]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fb6:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8003fb8:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8003fba:	4331      	orrs	r1, r6

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fbc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	4308      	orrs	r0, r1
 8003fc2:	6018      	str	r0, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc4:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8003fc8:	7020      	strb	r0, [r4, #0]
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fcc:	fffff0ff 	.word	0xfffff0ff

08003fd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8003fd4:	2001      	movs	r0, #1
  if (hpcd == NULL)
 8003fd6:	2c00      	cmp	r4, #0
 8003fd8:	d02b      	beq.n	8004032 <HAL_PCD_Init+0x62>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fda:	4d22      	ldr	r5, [pc, #136]	@ (8004064 <HAL_PCD_Init+0x94>)
 8003fdc:	5d63      	ldrb	r3, [r4, r5]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d105      	bne.n	8003ff0 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fe4:	23a4      	movs	r3, #164	@ 0xa4
 8003fe6:	009b      	lsls	r3, r3, #2

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fe8:	0020      	movs	r0, r4
    hpcd->Lock = HAL_UNLOCKED;
 8003fea:	54e2      	strb	r2, [r4, r3]
    HAL_PCD_MspInit(hpcd);
 8003fec:	f003 f840 	bl	8007070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ff4:	6820      	ldr	r0, [r4, #0]
 8003ff6:	f001 fd43 	bl	8005a80 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	0022      	movs	r2, r4
 8003ffe:	0019      	movs	r1, r3
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004000:	2601      	movs	r6, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004002:	7920      	ldrb	r0, [r4, #4]
 8004004:	3210      	adds	r2, #16
 8004006:	4298      	cmp	r0, r3
 8004008:	d114      	bne.n	8004034 <HAL_PCD_Init+0x64>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800400a:	2100      	movs	r1, #0
 800400c:	0022      	movs	r2, r4
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800400e:	0008      	movs	r0, r1
 8004010:	3251      	adds	r2, #81	@ 0x51
 8004012:	32ff      	adds	r2, #255	@ 0xff
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004014:	428b      	cmp	r3, r1
 8004016:	d117      	bne.n	8004048 <HAL_PCD_Init+0x78>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004018:	6861      	ldr	r1, [r4, #4]
 800401a:	68a2      	ldr	r2, [r4, #8]
 800401c:	6820      	ldr	r0, [r4, #0]
 800401e:	f001 fd39 	bl	8005a94 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	7323      	strb	r3, [r4, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004026:	3301      	adds	r3, #1
 8004028:	5563      	strb	r3, [r4, r5]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800402a:	7aa3      	ldrb	r3, [r4, #10]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d015      	beq.n	800405c <HAL_PCD_Init+0x8c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8004030:	2000      	movs	r0, #0
}
 8004032:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->IN_ep[i].num = i;
 8004034:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004036:	3301      	adds	r3, #1
    hpcd->IN_ep[i].is_in = 1U;
 8004038:	7056      	strb	r6, [r2, #1]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800403a:	70d1      	strb	r1, [r2, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 800403c:	6111      	str	r1, [r2, #16]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800403e:	6151      	str	r1, [r2, #20]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004040:	6191      	str	r1, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004042:	b2db      	uxtb	r3, r3
 8004044:	3228      	adds	r2, #40	@ 0x28
 8004046:	e7de      	b.n	8004006 <HAL_PCD_Init+0x36>
    hpcd->OUT_ep[i].num = i;
 8004048:	7011      	strb	r1, [r2, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404a:	3101      	adds	r1, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800404c:	7050      	strb	r0, [r2, #1]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800404e:	70d0      	strb	r0, [r2, #3]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004050:	6110      	str	r0, [r2, #16]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004052:	6150      	str	r0, [r2, #20]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004054:	6190      	str	r0, [r2, #24]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004056:	b2c9      	uxtb	r1, r1
 8004058:	3228      	adds	r2, #40	@ 0x28
 800405a:	e7db      	b.n	8004014 <HAL_PCD_Init+0x44>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800405c:	0020      	movs	r0, r4
 800405e:	f000 fe0e 	bl	8004c7e <HAL_PCDEx_ActivateLPM>
 8004062:	e7e5      	b.n	8004030 <HAL_PCD_Init+0x60>
 8004064:	00000291 	.word	0x00000291

08004068 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004068:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800406a:	25a4      	movs	r5, #164	@ 0xa4
 800406c:	00ad      	lsls	r5, r5, #2
 800406e:	5d43      	ldrb	r3, [r0, r5]
{
 8004070:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8004072:	2002      	movs	r0, #2
 8004074:	2b01      	cmp	r3, #1
 8004076:	d009      	beq.n	800408c <HAL_PCD_Start+0x24>
 8004078:	2301      	movs	r3, #1
 800407a:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 800407c:	6820      	ldr	r0, [r4, #0]
 800407e:	f001 fcf5 	bl	8005a6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004082:	6820      	ldr	r0, [r4, #0]
 8004084:	f001 ff01 	bl	8005e8a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004088:	2000      	movs	r0, #0
 800408a:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 800408c:	bd70      	pop	{r4, r5, r6, pc}

0800408e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800408e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8004090:	25a4      	movs	r5, #164	@ 0xa4
 8004092:	00ad      	lsls	r5, r5, #2
 8004094:	5d43      	ldrb	r3, [r0, r5]
{
 8004096:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8004098:	2002      	movs	r0, #2
 800409a:	2b01      	cmp	r3, #1
 800409c:	d007      	beq.n	80040ae <HAL_PCD_SetAddress+0x20>
 800409e:	2301      	movs	r3, #1
 80040a0:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040a2:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 80040a4:	7321      	strb	r1, [r4, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040a6:	f001 fee9 	bl	8005e7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040aa:	2000      	movs	r0, #0
 80040ac:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 80040ae:	bd70      	pop	{r4, r5, r6, pc}

080040b0 <HAL_PCD_IRQHandler>:
{
 80040b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b2:	0004      	movs	r4, r0
 80040b4:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80040b6:	6800      	ldr	r0, [r0, #0]
 80040b8:	f001 feef 	bl	8005e9a <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80040bc:	2380      	movs	r3, #128	@ 0x80
 80040be:	0005      	movs	r5, r0
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	401d      	ands	r5, r3
 80040c4:	4218      	tst	r0, r3
 80040c6:	d101      	bne.n	80040cc <HAL_PCD_IRQHandler+0x1c>
 80040c8:	f000 fc27 	bl	800491a <HAL_PCD_IRQHandler+0x86a>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040cc:	6820      	ldr	r0, [r4, #0]
 80040ce:	1d82      	adds	r2, r0, #6
 80040d0:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
 80040d2:	b21b      	sxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	db01      	blt.n	80040dc <HAL_PCD_IRQHandler+0x2c>
}
 80040d8:	b005      	add	sp, #20
 80040da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80040dc:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 80040de:	8fd3      	ldrh	r3, [r2, #62]	@ 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80040e0:	4019      	ands	r1, r3
 80040e2:	9100      	str	r1, [sp, #0]

    if (epindex == 0U)
 80040e4:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 80040e6:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 80040e8:	420b      	tst	r3, r1
 80040ea:	d000      	beq.n	80040ee <HAL_PCD_IRQHandler+0x3e>
 80040ec:	e0c0      	b.n	8004270 <HAL_PCD_IRQHandler+0x1c0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80040ee:	2310      	movs	r3, #16
 80040f0:	0011      	movs	r1, r2
 80040f2:	4019      	ands	r1, r3
 80040f4:	421a      	tst	r2, r3
 80040f6:	d127      	bne.n	8004148 <HAL_PCD_IRQHandler+0x98>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040f8:	8803      	ldrh	r3, [r0, #0]
 80040fa:	4aca      	ldr	r2, [pc, #808]	@ (8004424 <HAL_PCD_IRQHandler+0x374>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	2280      	movs	r2, #128	@ 0x80
 8004100:	0212      	lsls	r2, r2, #8
 8004102:	4313      	orrs	r3, r2
 8004104:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004106:	0003      	movs	r3, r0
 8004108:	3350      	adds	r3, #80	@ 0x50
 800410a:	881a      	ldrh	r2, [r3, #0]
 800410c:	7c23      	ldrb	r3, [r4, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	18c3      	adds	r3, r0, r3
 8004112:	189b      	adds	r3, r3, r2
 8004114:	4ac4      	ldr	r2, [pc, #784]	@ (8004428 <HAL_PCD_IRQHandler+0x378>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004116:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004118:	189b      	adds	r3, r3, r2
 800411a:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 800411c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800411e:	059b      	lsls	r3, r3, #22
 8004120:	0d9b      	lsrs	r3, r3, #22
 8004122:	62e3      	str	r3, [r4, #44]	@ 0x2c
        ep->xfer_buff += ep->xfer_count;
 8004124:	18d3      	adds	r3, r2, r3
 8004126:	6263      	str	r3, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004128:	f002 ffd3 	bl	80070d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800412c:	7b23      	ldrb	r3, [r4, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0cc      	beq.n	80040cc <HAL_PCD_IRQHandler+0x1c>
 8004132:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004134:	6823      	ldr	r3, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004136:	2900      	cmp	r1, #0
 8004138:	d1c8      	bne.n	80040cc <HAL_PCD_IRQHandler+0x1c>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800413a:	2080      	movs	r0, #128	@ 0x80
 800413c:	7b22      	ldrb	r2, [r4, #12]
 800413e:	334c      	adds	r3, #76	@ 0x4c
 8004140:	4302      	orrs	r2, r0
 8004142:	801a      	strh	r2, [r3, #0]
          hpcd->USB_Address = 0U;
 8004144:	7321      	strb	r1, [r4, #12]
 8004146:	e7c1      	b.n	80040cc <HAL_PCD_IRQHandler+0x1c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004148:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800414a:	2180      	movs	r1, #128	@ 0x80
 800414c:	0016      	movs	r6, r2
 800414e:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004150:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004152:	400e      	ands	r6, r1
 8004154:	420a      	tst	r2, r1
 8004156:	d022      	beq.n	800419e <HAL_PCD_IRQHandler+0xee>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004158:	0003      	movs	r3, r0
 800415a:	3350      	adds	r3, #80	@ 0x50
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	23a8      	movs	r3, #168	@ 0xa8
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004164:	21a6      	movs	r1, #166	@ 0xa6
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	18c3      	adds	r3, r0, r3
 800416a:	189b      	adds	r3, r3, r2
 800416c:	4aaf      	ldr	r2, [pc, #700]	@ (800442c <HAL_PCD_IRQHandler+0x37c>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800416e:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004170:	189b      	adds	r3, r3, r2
 8004172:	0022      	movs	r2, r4
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	3251      	adds	r2, #81	@ 0x51
 8004178:	059b      	lsls	r3, r3, #22
 800417a:	0d9b      	lsrs	r3, r3, #22
 800417c:	32ff      	adds	r2, #255	@ 0xff
 800417e:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004180:	1861      	adds	r1, r4, r1
 8004182:	88d2      	ldrh	r2, [r2, #6]
 8004184:	f002 f8d4 	bl	8006330 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004188:	6821      	ldr	r1, [r4, #0]
 800418a:	4ba9      	ldr	r3, [pc, #676]	@ (8004430 <HAL_PCD_IRQHandler+0x380>)
 800418c:	880a      	ldrh	r2, [r1, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800418e:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004190:	401a      	ands	r2, r3
 8004192:	2380      	movs	r3, #128	@ 0x80
 8004194:	4313      	orrs	r3, r2
 8004196:	800b      	strh	r3, [r1, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004198:	f002 ff86 	bl	80070a8 <HAL_PCD_SetupStageCallback>
 800419c:	e796      	b.n	80040cc <HAL_PCD_IRQHandler+0x1c>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800419e:	b21b      	sxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	db00      	blt.n	80041a6 <HAL_PCD_IRQHandler+0xf6>
 80041a4:	e792      	b.n	80040cc <HAL_PCD_IRQHandler+0x1c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041a6:	8802      	ldrh	r2, [r0, #0]
 80041a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004430 <HAL_PCD_IRQHandler+0x380>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041aa:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041ac:	401a      	ands	r2, r3
 80041ae:	2380      	movs	r3, #128	@ 0x80
 80041b0:	4313      	orrs	r3, r2
 80041b2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041b4:	0003      	movs	r3, r0
 80041b6:	3350      	adds	r3, #80	@ 0x50
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	23a8      	movs	r3, #168	@ 0xa8
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	5ce3      	ldrb	r3, [r4, r3]
 80041c0:	3551      	adds	r5, #81	@ 0x51
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	18c3      	adds	r3, r0, r3
 80041c6:	189b      	adds	r3, r3, r2
 80041c8:	4a98      	ldr	r2, [pc, #608]	@ (800442c <HAL_PCD_IRQHandler+0x37c>)
 80041ca:	35ff      	adds	r5, #255	@ 0xff
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	059b      	lsls	r3, r3, #22
 80041d2:	0d9b      	lsrs	r3, r3, #22
 80041d4:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80041d6:	d00d      	beq.n	80041f4 <HAL_PCD_IRQHandler+0x144>
 80041d8:	6969      	ldr	r1, [r5, #20]
 80041da:	2900      	cmp	r1, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_PCD_IRQHandler+0x144>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80041de:	88ea      	ldrh	r2, [r5, #6]
 80041e0:	f002 f8a6 	bl	8006330 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 80041e4:	696b      	ldr	r3, [r5, #20]
 80041e6:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80041e8:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 80041ea:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80041ec:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80041ee:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80041f0:	f002 ff63 	bl	80070ba <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041f4:	6821      	ldr	r1, [r4, #0]
 80041f6:	880a      	ldrh	r2, [r1, #0]
 80041f8:	b293      	uxth	r3, r2

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80041fa:	0512      	lsls	r2, r2, #20
 80041fc:	d500      	bpl.n	8004200 <HAL_PCD_IRQHandler+0x150>
 80041fe:	e765      	b.n	80040cc <HAL_PCD_IRQHandler+0x1c>
 8004200:	22c0      	movs	r2, #192	@ 0xc0
 8004202:	0192      	lsls	r2, r2, #6
 8004204:	4013      	ands	r3, r2
 8004206:	4293      	cmp	r3, r2
 8004208:	d100      	bne.n	800420c <HAL_PCD_IRQHandler+0x15c>
 800420a:	e75f      	b.n	80040cc <HAL_PCD_IRQHandler+0x1c>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800420c:	000b      	movs	r3, r1
 800420e:	4a87      	ldr	r2, [pc, #540]	@ (800442c <HAL_PCD_IRQHandler+0x37c>)
 8004210:	3350      	adds	r3, #80	@ 0x50
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	188a      	adds	r2, r1, r2
 8004216:	18d2      	adds	r2, r2, r3
 8004218:	8813      	ldrh	r3, [r2, #0]
 800421a:	059b      	lsls	r3, r3, #22
 800421c:	0d9b      	lsrs	r3, r3, #22
 800421e:	8013      	strh	r3, [r2, #0]
 8004220:	692b      	ldr	r3, [r5, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10e      	bne.n	8004244 <HAL_PCD_IRQHandler+0x194>
 8004226:	2080      	movs	r0, #128	@ 0x80
 8004228:	8813      	ldrh	r3, [r2, #0]
 800422a:	0200      	lsls	r0, r0, #8
 800422c:	4303      	orrs	r3, r0
 800422e:	8013      	strh	r3, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004230:	880a      	ldrh	r2, [r1, #0]
 8004232:	4b80      	ldr	r3, [pc, #512]	@ (8004434 <HAL_PCD_IRQHandler+0x384>)
 8004234:	401a      	ands	r2, r3
 8004236:	23c0      	movs	r3, #192	@ 0xc0
 8004238:	019b      	lsls	r3, r3, #6
 800423a:	4053      	eors	r3, r2
 800423c:	4a7e      	ldr	r2, [pc, #504]	@ (8004438 <HAL_PCD_IRQHandler+0x388>)
 800423e:	4313      	orrs	r3, r2
 8004240:	800b      	strh	r3, [r1, #0]
 8004242:	e743      	b.n	80040cc <HAL_PCD_IRQHandler+0x1c>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004244:	2b3e      	cmp	r3, #62	@ 0x3e
 8004246:	d808      	bhi.n	800425a <HAL_PCD_IRQHandler+0x1aa>
 8004248:	2501      	movs	r5, #1
 800424a:	0858      	lsrs	r0, r3, #1
 800424c:	402b      	ands	r3, r5
 800424e:	18c0      	adds	r0, r0, r3
 8004250:	8813      	ldrh	r3, [r2, #0]
 8004252:	0280      	lsls	r0, r0, #10
 8004254:	4303      	orrs	r3, r0
 8004256:	b29b      	uxth	r3, r3
 8004258:	e7e9      	b.n	800422e <HAL_PCD_IRQHandler+0x17e>
 800425a:	251f      	movs	r5, #31
 800425c:	0958      	lsrs	r0, r3, #5
 800425e:	402b      	ands	r3, r5
 8004260:	425d      	negs	r5, r3
 8004262:	416b      	adcs	r3, r5
 8004264:	1ac0      	subs	r0, r0, r3
 8004266:	8813      	ldrh	r3, [r2, #0]
 8004268:	0280      	lsls	r0, r0, #10
 800426a:	4318      	orrs	r0, r3
 800426c:	4b73      	ldr	r3, [pc, #460]	@ (800443c <HAL_PCD_IRQHandler+0x38c>)
 800426e:	e7f1      	b.n	8004254 <HAL_PCD_IRQHandler+0x1a4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004270:	9b00      	ldr	r3, [sp, #0]
 8004272:	009f      	lsls	r7, r3, #2
 8004274:	19c2      	adds	r2, r0, r7
 8004276:	8813      	ldrh	r3, [r2, #0]
 8004278:	b299      	uxth	r1, r3

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800427a:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800427c:	9101      	str	r1, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800427e:	2b00      	cmp	r3, #0
 8004280:	db00      	blt.n	8004284 <HAL_PCD_IRQHandler+0x1d4>
 8004282:	e092      	b.n	80043aa <HAL_PCD_IRQHandler+0x2fa>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004284:	8813      	ldrh	r3, [r2, #0]
 8004286:	496a      	ldr	r1, [pc, #424]	@ (8004430 <HAL_PCD_IRQHandler+0x380>)
 8004288:	400b      	ands	r3, r1
 800428a:	2180      	movs	r1, #128	@ 0x80
 800428c:	430b      	orrs	r3, r1
 800428e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004290:	2328      	movs	r3, #40	@ 0x28
 8004292:	9a00      	ldr	r2, [sp, #0]
 8004294:	4353      	muls	r3, r2
 8004296:	18e3      	adds	r3, r4, r3
 8004298:	001a      	movs	r2, r3
 800429a:	001d      	movs	r5, r3
 800429c:	325d      	adds	r2, #93	@ 0x5d
 800429e:	32ff      	adds	r2, #255	@ 0xff
 80042a0:	7812      	ldrb	r2, [r2, #0]
 80042a2:	3551      	adds	r5, #81	@ 0x51
 80042a4:	35ff      	adds	r5, #255	@ 0xff
 80042a6:	2a00      	cmp	r2, #0
 80042a8:	d114      	bne.n	80042d4 <HAL_PCD_IRQHandler+0x224>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042aa:	0002      	movs	r2, r0
 80042ac:	3250      	adds	r2, #80	@ 0x50
 80042ae:	8811      	ldrh	r1, [r2, #0]
 80042b0:	782a      	ldrb	r2, [r5, #0]
 80042b2:	00d2      	lsls	r2, r2, #3
 80042b4:	1852      	adds	r2, r2, r1
 80042b6:	495d      	ldr	r1, [pc, #372]	@ (800442c <HAL_PCD_IRQHandler+0x37c>)
 80042b8:	1812      	adds	r2, r2, r0
 80042ba:	1852      	adds	r2, r2, r1
 80042bc:	8812      	ldrh	r2, [r2, #0]
 80042be:	0592      	lsls	r2, r2, #22
 80042c0:	0d95      	lsrs	r5, r2, #22

          if (count != 0U)
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	d056      	beq.n	8004374 <HAL_PCD_IRQHandler+0x2c4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042c6:	001a      	movs	r2, r3
 80042c8:	3257      	adds	r2, #87	@ 0x57
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

              if (count != 0U)
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042ca:	32ff      	adds	r2, #255	@ 0xff
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80042cc:	33fc      	adds	r3, #252	@ 0xfc
 80042ce:	0019      	movs	r1, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042d0:	8812      	ldrh	r2, [r2, #0]
 80042d2:	e04b      	b.n	800436c <HAL_PCD_IRQHandler+0x2bc>
          if (ep->type == EP_TYPE_BULK)
 80042d4:	0019      	movs	r1, r3
 80042d6:	3154      	adds	r1, #84	@ 0x54
 80042d8:	31ff      	adds	r1, #255	@ 0xff
 80042da:	7809      	ldrb	r1, [r1, #0]

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042dc:	782a      	ldrb	r2, [r5, #0]
          if (ep->type == EP_TYPE_BULK)
 80042de:	2902      	cmp	r1, #2
 80042e0:	d000      	beq.n	80042e4 <HAL_PCD_IRQHandler+0x234>
 80042e2:	e0e3      	b.n	80044ac <HAL_PCD_IRQHandler+0x3fc>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042e4:	2680      	movs	r6, #128	@ 0x80
 80042e6:	01f6      	lsls	r6, r6, #7
 80042e8:	46b4      	mov	ip, r6
 80042ea:	4665      	mov	r5, ip
 80042ec:	9e01      	ldr	r6, [sp, #4]

    if (ep->xfer_len >= count)
 80042ee:	33fc      	adds	r3, #252	@ 0xfc
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042f0:	402e      	ands	r6, r5
 80042f2:	9603      	str	r6, [sp, #12]
 80042f4:	0006      	movs	r6, r0
 80042f6:	3650      	adds	r6, #80	@ 0x50
 80042f8:	9602      	str	r6, [sp, #8]
 80042fa:	4666      	mov	r6, ip
 80042fc:	9d01      	ldr	r5, [sp, #4]
    if (ep->xfer_len >= count)
 80042fe:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004300:	4235      	tst	r5, r6
 8004302:	d100      	bne.n	8004306 <HAL_PCD_IRQHandler+0x256>
 8004304:	e0a0      	b.n	8004448 <HAL_PCD_IRQHandler+0x398>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004306:	9d02      	ldr	r5, [sp, #8]
 8004308:	882e      	ldrh	r6, [r5, #0]
 800430a:	00d5      	lsls	r5, r2, #3
 800430c:	1976      	adds	r6, r6, r5
 800430e:	4d46      	ldr	r5, [pc, #280]	@ (8004428 <HAL_PCD_IRQHandler+0x378>)
 8004310:	1836      	adds	r6, r6, r0
 8004312:	1976      	adds	r6, r6, r5
 8004314:	8835      	ldrh	r5, [r6, #0]
 8004316:	05ad      	lsls	r5, r5, #22
 8004318:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 800431a:	428d      	cmp	r5, r1
 800431c:	d90d      	bls.n	800433a <HAL_PCD_IRQHandler+0x28a>
 800431e:	2100      	movs	r1, #0
 8004320:	66d9      	str	r1, [r3, #108]	@ 0x6c
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004322:	0091      	lsls	r1, r2, #2
 8004324:	1841      	adds	r1, r0, r1
 8004326:	880e      	ldrh	r6, [r1, #0]
 8004328:	4b42      	ldr	r3, [pc, #264]	@ (8004434 <HAL_PCD_IRQHandler+0x384>)
 800432a:	401e      	ands	r6, r3
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	019b      	lsls	r3, r3, #6
 8004330:	4073      	eors	r3, r6
 8004332:	4e41      	ldr	r6, [pc, #260]	@ (8004438 <HAL_PCD_IRQHandler+0x388>)
 8004334:	4333      	orrs	r3, r6
 8004336:	800b      	strh	r3, [r1, #0]
 8004338:	e002      	b.n	8004340 <HAL_PCD_IRQHandler+0x290>
      ep->xfer_len -= count;
 800433a:	1b49      	subs	r1, r1, r5
 800433c:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 800433e:	d0f0      	beq.n	8004322 <HAL_PCD_IRQHandler+0x272>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004340:	9b01      	ldr	r3, [sp, #4]
 8004342:	065b      	lsls	r3, r3, #25
 8004344:	d507      	bpl.n	8004356 <HAL_PCD_IRQHandler+0x2a6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004346:	0092      	lsls	r2, r2, #2
 8004348:	1882      	adds	r2, r0, r2
 800434a:	8813      	ldrh	r3, [r2, #0]
 800434c:	493c      	ldr	r1, [pc, #240]	@ (8004440 <HAL_PCD_IRQHandler+0x390>)
 800434e:	400b      	ands	r3, r1
 8004350:	493c      	ldr	r1, [pc, #240]	@ (8004444 <HAL_PCD_IRQHandler+0x394>)
 8004352:	430b      	orrs	r3, r1
 8004354:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004356:	2d00      	cmp	r5, #0
 8004358:	d00c      	beq.n	8004374 <HAL_PCD_IRQHandler+0x2c4>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800435a:	2328      	movs	r3, #40	@ 0x28
 800435c:	9a00      	ldr	r2, [sp, #0]
 800435e:	4353      	muls	r3, r2
 8004360:	18e1      	adds	r1, r4, r3
 8004362:	000a      	movs	r2, r1
 8004364:	3259      	adds	r2, #89	@ 0x59
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
    }

    if (count != 0U)
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004366:	32ff      	adds	r2, #255	@ 0xff
 8004368:	8812      	ldrh	r2, [r2, #0]
 800436a:	31fc      	adds	r1, #252	@ 0xfc
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800436c:	002b      	movs	r3, r5
 800436e:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8004370:	f001 ffde 	bl	8006330 <USB_ReadPMA>
        ep->xfer_count += count;
 8004374:	2328      	movs	r3, #40	@ 0x28
 8004376:	9900      	ldr	r1, [sp, #0]
 8004378:	4359      	muls	r1, r3
 800437a:	1862      	adds	r2, r4, r1
 800437c:	32fc      	adds	r2, #252	@ 0xfc
 800437e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 8004380:	1940      	adds	r0, r0, r5
 8004382:	6710      	str	r0, [r2, #112]	@ 0x70
        ep->xfer_buff += count;
 8004384:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8004386:	1940      	adds	r0, r0, r5
 8004388:	6690      	str	r0, [r2, #104]	@ 0x68
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800438a:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 800438c:	2800      	cmp	r0, #0
 800438e:	d003      	beq.n	8004398 <HAL_PCD_IRQHandler+0x2e8>
 8004390:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8004392:	4295      	cmp	r5, r2
 8004394:	d300      	bcc.n	8004398 <HAL_PCD_IRQHandler+0x2e8>
 8004396:	e0b3      	b.n	8004500 <HAL_PCD_IRQHandler+0x450>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004398:	9a00      	ldr	r2, [sp, #0]
 800439a:	0020      	movs	r0, r4
 800439c:	4353      	muls	r3, r2
 800439e:	18e3      	adds	r3, r4, r3
 80043a0:	3351      	adds	r3, #81	@ 0x51
 80043a2:	33ff      	adds	r3, #255	@ 0xff
 80043a4:	7819      	ldrb	r1, [r3, #0]
 80043a6:	f002 fe88 	bl	80070ba <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80043aa:	2280      	movs	r2, #128	@ 0x80
 80043ac:	9b01      	ldr	r3, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80043ae:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80043b0:	4213      	tst	r3, r2
 80043b2:	d100      	bne.n	80043b6 <HAL_PCD_IRQHandler+0x306>
 80043b4:	e68a      	b.n	80040cc <HAL_PCD_IRQHandler+0x1c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80043b6:	19c2      	adds	r2, r0, r7
 80043b8:	8813      	ldrh	r3, [r2, #0]
 80043ba:	491a      	ldr	r1, [pc, #104]	@ (8004424 <HAL_PCD_IRQHandler+0x374>)
        if (ep->type == EP_TYPE_ISOC)
 80043bc:	9e00      	ldr	r6, [sp, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80043be:	400b      	ands	r3, r1
 80043c0:	491e      	ldr	r1, [pc, #120]	@ (800443c <HAL_PCD_IRQHandler+0x38c>)
 80043c2:	430b      	orrs	r3, r1
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	8013      	strh	r3, [r2, #0]
        if (ep->type == EP_TYPE_ISOC)
 80043c8:	2228      	movs	r2, #40	@ 0x28
 80043ca:	4356      	muls	r6, r2
 80043cc:	19a3      	adds	r3, r4, r6
 80043ce:	7cd9      	ldrb	r1, [r3, #19]
 80043d0:	2901      	cmp	r1, #1
 80043d2:	d000      	beq.n	80043d6 <HAL_PCD_IRQHandler+0x326>
 80043d4:	e0c7      	b.n	8004566 <HAL_PCD_IRQHandler+0x4b6>
          ep->xfer_len = 0U;
 80043d6:	9900      	ldr	r1, [sp, #0]
 80043d8:	3101      	adds	r1, #1
 80043da:	434a      	muls	r2, r1
 80043dc:	2100      	movs	r1, #0
 80043de:	5111      	str	r1, [r2, r4]
          if (ep->doublebuffer != 0U)
 80043e0:	7f1a      	ldrb	r2, [r3, #28]
 80043e2:	428a      	cmp	r2, r1
 80043e4:	d100      	bne.n	80043e8 <HAL_PCD_IRQHandler+0x338>
 80043e6:	e09e      	b.n	8004526 <HAL_PCD_IRQHandler+0x476>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043e8:	2240      	movs	r2, #64	@ 0x40
 80043ea:	9d01      	ldr	r5, [sp, #4]
 80043ec:	9e01      	ldr	r6, [sp, #4]
 80043ee:	4015      	ands	r5, r2
 80043f0:	4216      	tst	r6, r2
 80043f2:	d100      	bne.n	80043f6 <HAL_PCD_IRQHandler+0x346>
 80043f4:	e0a0      	b.n	8004538 <HAL_PCD_IRQHandler+0x488>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043f6:	7c5a      	ldrb	r2, [r3, #17]
 80043f8:	428a      	cmp	r2, r1
 80043fa:	d000      	beq.n	80043fe <HAL_PCD_IRQHandler+0x34e>
 80043fc:	e087      	b.n	800450e <HAL_PCD_IRQHandler+0x45e>
 80043fe:	0002      	movs	r2, r0
 8004400:	3250      	adds	r2, #80	@ 0x50
 8004402:	8811      	ldrh	r1, [r2, #0]
 8004404:	7c1a      	ldrb	r2, [r3, #16]
 8004406:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <HAL_PCD_IRQHandler+0x378>)
 8004408:	00d2      	lsls	r2, r2, #3
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800440a:	18c0      	adds	r0, r0, r3
 800440c:	1841      	adds	r1, r0, r1
 800440e:	1852      	adds	r2, r2, r1
 8004410:	8813      	ldrh	r3, [r2, #0]
 8004412:	490a      	ldr	r1, [pc, #40]	@ (800443c <HAL_PCD_IRQHandler+0x38c>)
 8004414:	059b      	lsls	r3, r3, #22
 8004416:	0d9b      	lsrs	r3, r3, #22
 8004418:	8013      	strh	r3, [r2, #0]
 800441a:	8813      	ldrh	r3, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	b29b      	uxth	r3, r3
 8004420:	8013      	strh	r3, [r2, #0]
 8004422:	e080      	b.n	8004526 <HAL_PCD_IRQHandler+0x476>
 8004424:	ffff8f0f 	.word	0xffff8f0f
 8004428:	00000402 	.word	0x00000402
 800442c:	00000406 	.word	0x00000406
 8004430:	00000f8f 	.word	0x00000f8f
 8004434:	ffffbf8f 	.word	0xffffbf8f
 8004438:	00008080 	.word	0x00008080
 800443c:	ffff8000 	.word	0xffff8000
 8004440:	ffff8f8f 	.word	0xffff8f8f
 8004444:	000080c0 	.word	0x000080c0
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004448:	9d02      	ldr	r5, [sp, #8]
 800444a:	882e      	ldrh	r6, [r5, #0]
 800444c:	00d5      	lsls	r5, r2, #3
 800444e:	1976      	adds	r6, r6, r5
 8004450:	4dc7      	ldr	r5, [pc, #796]	@ (8004770 <HAL_PCD_IRQHandler+0x6c0>)
 8004452:	1836      	adds	r6, r6, r0
 8004454:	1976      	adds	r6, r6, r5
 8004456:	8835      	ldrh	r5, [r6, #0]
 8004458:	05ad      	lsls	r5, r5, #22
 800445a:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 800445c:	428d      	cmp	r5, r1
 800445e:	d90d      	bls.n	800447c <HAL_PCD_IRQHandler+0x3cc>
 8004460:	9903      	ldr	r1, [sp, #12]
 8004462:	66d9      	str	r1, [r3, #108]	@ 0x6c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004464:	0091      	lsls	r1, r2, #2
 8004466:	1841      	adds	r1, r0, r1
 8004468:	880e      	ldrh	r6, [r1, #0]
 800446a:	4bc2      	ldr	r3, [pc, #776]	@ (8004774 <HAL_PCD_IRQHandler+0x6c4>)
 800446c:	401e      	ands	r6, r3
 800446e:	2380      	movs	r3, #128	@ 0x80
 8004470:	019b      	lsls	r3, r3, #6
 8004472:	4073      	eors	r3, r6
 8004474:	4ec0      	ldr	r6, [pc, #768]	@ (8004778 <HAL_PCD_IRQHandler+0x6c8>)
 8004476:	4333      	orrs	r3, r6
 8004478:	800b      	strh	r3, [r1, #0]
 800447a:	e002      	b.n	8004482 <HAL_PCD_IRQHandler+0x3d2>
      ep->xfer_len -= count;
 800447c:	1b49      	subs	r1, r1, r5
 800447e:	66d9      	str	r1, [r3, #108]	@ 0x6c
    if (ep->xfer_len == 0U)
 8004480:	d0f0      	beq.n	8004464 <HAL_PCD_IRQHandler+0x3b4>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004482:	9b01      	ldr	r3, [sp, #4]
 8004484:	065b      	lsls	r3, r3, #25
 8004486:	d407      	bmi.n	8004498 <HAL_PCD_IRQHandler+0x3e8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004488:	0092      	lsls	r2, r2, #2
 800448a:	1882      	adds	r2, r0, r2
 800448c:	8813      	ldrh	r3, [r2, #0]
 800448e:	49bb      	ldr	r1, [pc, #748]	@ (800477c <HAL_PCD_IRQHandler+0x6cc>)
 8004490:	400b      	ands	r3, r1
 8004492:	49bb      	ldr	r1, [pc, #748]	@ (8004780 <HAL_PCD_IRQHandler+0x6d0>)
 8004494:	430b      	orrs	r3, r1
 8004496:	8013      	strh	r3, [r2, #0]
    if (count != 0U)
 8004498:	2d00      	cmp	r5, #0
 800449a:	d100      	bne.n	800449e <HAL_PCD_IRQHandler+0x3ee>
 800449c:	e76a      	b.n	8004374 <HAL_PCD_IRQHandler+0x2c4>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800449e:	2328      	movs	r3, #40	@ 0x28
 80044a0:	9a00      	ldr	r2, [sp, #0]
 80044a2:	4353      	muls	r3, r2
 80044a4:	18e1      	adds	r1, r4, r3
 80044a6:	000a      	movs	r2, r1
 80044a8:	325b      	adds	r2, #91	@ 0x5b
 80044aa:	e75c      	b.n	8004366 <HAL_PCD_IRQHandler+0x2b6>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044ac:	0092      	lsls	r2, r2, #2
 80044ae:	1882      	adds	r2, r0, r2
 80044b0:	8816      	ldrh	r6, [r2, #0]
 80044b2:	49b2      	ldr	r1, [pc, #712]	@ (800477c <HAL_PCD_IRQHandler+0x6cc>)
 80044b4:	4031      	ands	r1, r6
 80044b6:	4eb2      	ldr	r6, [pc, #712]	@ (8004780 <HAL_PCD_IRQHandler+0x6d0>)
 80044b8:	4331      	orrs	r1, r6
 80044ba:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80044bc:	782a      	ldrb	r2, [r5, #0]
 80044be:	0091      	lsls	r1, r2, #2
 80044c0:	1841      	adds	r1, r0, r1
 80044c2:	880d      	ldrh	r5, [r1, #0]
 80044c4:	0001      	movs	r1, r0
 80044c6:	3150      	adds	r1, #80	@ 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044c8:	8809      	ldrh	r1, [r1, #0]
 80044ca:	00d2      	lsls	r2, r2, #3
 80044cc:	1852      	adds	r2, r2, r1
 80044ce:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80044d0:	046d      	lsls	r5, r5, #17
 80044d2:	d50a      	bpl.n	80044ea <HAL_PCD_IRQHandler+0x43a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044d4:	49ab      	ldr	r1, [pc, #684]	@ (8004784 <HAL_PCD_IRQHandler+0x6d4>)
 80044d6:	1852      	adds	r2, r2, r1
 80044d8:	8812      	ldrh	r2, [r2, #0]
 80044da:	0592      	lsls	r2, r2, #22
 80044dc:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 80044de:	2a00      	cmp	r2, #0
 80044e0:	d100      	bne.n	80044e4 <HAL_PCD_IRQHandler+0x434>
 80044e2:	e747      	b.n	8004374 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80044e4:	001a      	movs	r2, r3
 80044e6:	3259      	adds	r2, #89	@ 0x59
 80044e8:	e6ef      	b.n	80042ca <HAL_PCD_IRQHandler+0x21a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044ea:	49a1      	ldr	r1, [pc, #644]	@ (8004770 <HAL_PCD_IRQHandler+0x6c0>)
 80044ec:	1852      	adds	r2, r2, r1
 80044ee:	8812      	ldrh	r2, [r2, #0]
 80044f0:	0592      	lsls	r2, r2, #22
 80044f2:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 80044f4:	2a00      	cmp	r2, #0
 80044f6:	d100      	bne.n	80044fa <HAL_PCD_IRQHandler+0x44a>
 80044f8:	e73c      	b.n	8004374 <HAL_PCD_IRQHandler+0x2c4>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80044fa:	001a      	movs	r2, r3
 80044fc:	325b      	adds	r2, #91	@ 0x5b
 80044fe:	e6e4      	b.n	80042ca <HAL_PCD_IRQHandler+0x21a>
        ep = &hpcd->OUT_ep[epindex];
 8004500:	3151      	adds	r1, #81	@ 0x51
 8004502:	31ff      	adds	r1, #255	@ 0xff
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004504:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004506:	1861      	adds	r1, r4, r1
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004508:	f001 fce0 	bl	8005ecc <USB_EPStartXfer>
 800450c:	e74d      	b.n	80043aa <HAL_PCD_IRQHandler+0x2fa>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800450e:	2a01      	cmp	r2, #1
 8004510:	d109      	bne.n	8004526 <HAL_PCD_IRQHandler+0x476>
 8004512:	0002      	movs	r2, r0
 8004514:	4d9b      	ldr	r5, [pc, #620]	@ (8004784 <HAL_PCD_IRQHandler+0x6d4>)
 8004516:	3250      	adds	r2, #80	@ 0x50
 8004518:	8812      	ldrh	r2, [r2, #0]
 800451a:	7c1b      	ldrb	r3, [r3, #16]
 800451c:	1940      	adds	r0, r0, r5
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	1880      	adds	r0, r0, r2
 8004522:	181b      	adds	r3, r3, r0
 8004524:	8019      	strh	r1, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004526:	2328      	movs	r3, #40	@ 0x28
 8004528:	9a00      	ldr	r2, [sp, #0]
 800452a:	4353      	muls	r3, r2
 800452c:	18e3      	adds	r3, r4, r3
 800452e:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004530:	0020      	movs	r0, r4
 8004532:	f002 fdce 	bl	80070d2 <HAL_PCD_DataInStageCallback>
 8004536:	e5c9      	b.n	80040cc <HAL_PCD_IRQHandler+0x1c>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004538:	7c5a      	ldrb	r2, [r3, #17]
 800453a:	2a00      	cmp	r2, #0
 800453c:	d106      	bne.n	800454c <HAL_PCD_IRQHandler+0x49c>
 800453e:	0002      	movs	r2, r0
 8004540:	3250      	adds	r2, #80	@ 0x50
 8004542:	8811      	ldrh	r1, [r2, #0]
 8004544:	7c1a      	ldrb	r2, [r3, #16]
 8004546:	4b8a      	ldr	r3, [pc, #552]	@ (8004770 <HAL_PCD_IRQHandler+0x6c0>)
 8004548:	00d2      	lsls	r2, r2, #3
 800454a:	e75e      	b.n	800440a <HAL_PCD_IRQHandler+0x35a>
 800454c:	2a01      	cmp	r2, #1
 800454e:	d1ea      	bne.n	8004526 <HAL_PCD_IRQHandler+0x476>
 8004550:	0002      	movs	r2, r0
 8004552:	4987      	ldr	r1, [pc, #540]	@ (8004770 <HAL_PCD_IRQHandler+0x6c0>)
 8004554:	3250      	adds	r2, #80	@ 0x50
 8004556:	8812      	ldrh	r2, [r2, #0]
 8004558:	7c1b      	ldrb	r3, [r3, #16]
 800455a:	1840      	adds	r0, r0, r1
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	1880      	adds	r0, r0, r2
 8004560:	181b      	adds	r3, r3, r0
 8004562:	801d      	strh	r5, [r3, #0]
 8004564:	e7df      	b.n	8004526 <HAL_PCD_IRQHandler+0x476>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004566:	2780      	movs	r7, #128	@ 0x80
 8004568:	9901      	ldr	r1, [sp, #4]
 800456a:	007f      	lsls	r7, r7, #1
 800456c:	4039      	ands	r1, r7
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800456e:	7c1a      	ldrb	r2, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004570:	468c      	mov	ip, r1
 8004572:	9901      	ldr	r1, [sp, #4]
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004574:	9202      	str	r2, [sp, #8]
            if (ep->xfer_len > TxPctSize)
 8004576:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004578:	00d2      	lsls	r2, r2, #3
          if ((wEPVal & USB_EP_KIND) == 0U)
 800457a:	4239      	tst	r1, r7
 800457c:	d11c      	bne.n	80045b8 <HAL_PCD_IRQHandler+0x508>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800457e:	0007      	movs	r7, r0
 8004580:	3750      	adds	r7, #80	@ 0x50
 8004582:	883f      	ldrh	r7, [r7, #0]
 8004584:	18bf      	adds	r7, r7, r2
 8004586:	4a7f      	ldr	r2, [pc, #508]	@ (8004784 <HAL_PCD_IRQHandler+0x6d4>)
 8004588:	183f      	adds	r7, r7, r0
 800458a:	18bf      	adds	r7, r7, r2
 800458c:	883a      	ldrh	r2, [r7, #0]
 800458e:	0592      	lsls	r2, r2, #22
            if (ep->xfer_len > TxPctSize)
 8004590:	0d92      	lsrs	r2, r2, #22
 8004592:	42aa      	cmp	r2, r5
 8004594:	d303      	bcc.n	800459e <HAL_PCD_IRQHandler+0x4ee>
 8004596:	4662      	mov	r2, ip
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004598:	9902      	ldr	r1, [sp, #8]
 800459a:	629a      	str	r2, [r3, #40]	@ 0x28
 800459c:	e7c8      	b.n	8004530 <HAL_PCD_IRQHandler+0x480>
              ep->xfer_buff += TxPctSize;
 800459e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
              ep->xfer_len -= TxPctSize;
 80045a0:	1aad      	subs	r5, r5, r2
              ep->xfer_buff += TxPctSize;
 80045a2:	1889      	adds	r1, r1, r2
 80045a4:	6259      	str	r1, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 80045a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 80045a8:	3610      	adds	r6, #16
              ep->xfer_count += TxPctSize;
 80045aa:	188a      	adds	r2, r1, r2
 80045ac:	629d      	str	r5, [r3, #40]	@ 0x28
 80045ae:	62da      	str	r2, [r3, #44]	@ 0x2c
        ep = &hpcd->IN_ep[epindex];
 80045b0:	19a1      	adds	r1, r4, r6
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80045b2:	f001 fc8b 	bl	8005ecc <USB_EPStartXfer>
 80045b6:	e589      	b.n	80040cc <HAL_PCD_IRQHandler+0x1c>
{
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045b8:	2140      	movs	r1, #64	@ 0x40
 80045ba:	468c      	mov	ip, r1
 80045bc:	9f01      	ldr	r7, [sp, #4]
 80045be:	0006      	movs	r6, r0
 80045c0:	400f      	ands	r7, r1
 80045c2:	9703      	str	r7, [sp, #12]
 80045c4:	4667      	mov	r7, ip
 80045c6:	9901      	ldr	r1, [sp, #4]
 80045c8:	3650      	adds	r6, #80	@ 0x50
 80045ca:	4239      	tst	r1, r7
 80045cc:	d100      	bne.n	80045d0 <HAL_PCD_IRQHandler+0x520>
 80045ce:	e0df      	b.n	8004790 <HAL_PCD_IRQHandler+0x6e0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045d0:	496c      	ldr	r1, [pc, #432]	@ (8004784 <HAL_PCD_IRQHandler+0x6d4>)
 80045d2:	8837      	ldrh	r7, [r6, #0]
 80045d4:	1846      	adds	r6, r0, r1
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80045d6:	2100      	movs	r1, #0
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045d8:	19f7      	adds	r7, r6, r7
 80045da:	5abf      	ldrh	r7, [r7, r2]
      ep->xfer_len = 0U;
 80045dc:	468c      	mov	ip, r1
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045de:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len > TxPctSize)
 80045e0:	0dbf      	lsrs	r7, r7, #22
 80045e2:	42af      	cmp	r7, r5
 80045e4:	d201      	bcs.n	80045ea <HAL_PCD_IRQHandler+0x53a>
      ep->xfer_len -= TxPctSize;
 80045e6:	1be9      	subs	r1, r5, r7
 80045e8:	468c      	mov	ip, r1
 80045ea:	4661      	mov	r1, ip
 80045ec:	2580      	movs	r5, #128	@ 0x80
 80045ee:	6299      	str	r1, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045f0:	9901      	ldr	r1, [sp, #4]
 80045f2:	01ed      	lsls	r5, r5, #7
 80045f4:	4029      	ands	r1, r5
 80045f6:	000d      	movs	r5, r1
 80045f8:	4661      	mov	r1, ip
 80045fa:	2900      	cmp	r1, #0
 80045fc:	d147      	bne.n	800468e <HAL_PCD_IRQHandler+0x5de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045fe:	2328      	movs	r3, #40	@ 0x28
 8004600:	9900      	ldr	r1, [sp, #0]
 8004602:	434b      	muls	r3, r1
 8004604:	18e3      	adds	r3, r4, r3
 8004606:	7c5b      	ldrb	r3, [r3, #17]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d130      	bne.n	800466e <HAL_PCD_IRQHandler+0x5be>
 800460c:	0007      	movs	r7, r0
 800460e:	3750      	adds	r7, #80	@ 0x50
 8004610:	883b      	ldrh	r3, [r7, #0]
 8004612:	495d      	ldr	r1, [pc, #372]	@ (8004788 <HAL_PCD_IRQHandler+0x6d8>)
 8004614:	18f3      	adds	r3, r6, r3
 8004616:	189b      	adds	r3, r3, r2
 8004618:	881e      	ldrh	r6, [r3, #0]
 800461a:	05b6      	lsls	r6, r6, #22
 800461c:	0db6      	lsrs	r6, r6, #22
 800461e:	801e      	strh	r6, [r3, #0]
 8004620:	881e      	ldrh	r6, [r3, #0]
 8004622:	430e      	orrs	r6, r1
 8004624:	b2b6      	uxth	r6, r6
 8004626:	801e      	strh	r6, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004628:	4e51      	ldr	r6, [pc, #324]	@ (8004770 <HAL_PCD_IRQHandler+0x6c0>)
 800462a:	883b      	ldrh	r3, [r7, #0]
 800462c:	1980      	adds	r0, r0, r6
 800462e:	18c0      	adds	r0, r0, r3
 8004630:	1880      	adds	r0, r0, r2
 8004632:	8803      	ldrh	r3, [r0, #0]
 8004634:	059b      	lsls	r3, r3, #22
 8004636:	0d9b      	lsrs	r3, r3, #22
 8004638:	8003      	strh	r3, [r0, #0]
 800463a:	8803      	ldrh	r3, [r0, #0]
 800463c:	430b      	orrs	r3, r1
 800463e:	b29b      	uxth	r3, r3
 8004640:	8003      	strh	r3, [r0, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004642:	0020      	movs	r0, r4
 8004644:	9902      	ldr	r1, [sp, #8]
 8004646:	f002 fd44 	bl	80070d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800464a:	2d00      	cmp	r5, #0
 800464c:	d100      	bne.n	8004650 <HAL_PCD_IRQHandler+0x5a0>
 800464e:	e0dc      	b.n	800480a <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004650:	2328      	movs	r3, #40	@ 0x28
 8004652:	9a00      	ldr	r2, [sp, #0]
 8004654:	4949      	ldr	r1, [pc, #292]	@ (800477c <HAL_PCD_IRQHandler+0x6cc>)
 8004656:	4353      	muls	r3, r2
 8004658:	18e3      	adds	r3, r4, r3
 800465a:	7c1b      	ldrb	r3, [r3, #16]
 800465c:	6822      	ldr	r2, [r4, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	18d2      	adds	r2, r2, r3
 8004662:	8813      	ldrh	r3, [r2, #0]
 8004664:	400b      	ands	r3, r1
 8004666:	4949      	ldr	r1, [pc, #292]	@ (800478c <HAL_PCD_IRQHandler+0x6dc>)
 8004668:	430b      	orrs	r3, r1
 800466a:	8013      	strh	r3, [r2, #0]
 800466c:	e0cd      	b.n	800480a <HAL_PCD_IRQHandler+0x75a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800466e:	2b01      	cmp	r3, #1
 8004670:	d1e7      	bne.n	8004642 <HAL_PCD_IRQHandler+0x592>
 8004672:	0007      	movs	r7, r0
 8004674:	4661      	mov	r1, ip
 8004676:	3750      	adds	r7, #80	@ 0x50
 8004678:	883b      	ldrh	r3, [r7, #0]
 800467a:	18f3      	adds	r3, r6, r3
 800467c:	189b      	adds	r3, r3, r2
 800467e:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004680:	493b      	ldr	r1, [pc, #236]	@ (8004770 <HAL_PCD_IRQHandler+0x6c0>)
 8004682:	883b      	ldrh	r3, [r7, #0]
 8004684:	1840      	adds	r0, r0, r1
 8004686:	18c0      	adds	r0, r0, r3
 8004688:	1880      	adds	r0, r0, r2
 800468a:	4663      	mov	r3, ip
 800468c:	e7d8      	b.n	8004640 <HAL_PCD_IRQHandler+0x590>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800468e:	2d00      	cmp	r5, #0
 8004690:	d00c      	beq.n	80046ac <HAL_PCD_IRQHandler+0x5fc>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004692:	9902      	ldr	r1, [sp, #8]
 8004694:	0089      	lsls	r1, r1, #2
 8004696:	1841      	adds	r1, r0, r1
 8004698:	880d      	ldrh	r5, [r1, #0]
 800469a:	9101      	str	r1, [sp, #4]
 800469c:	46ac      	mov	ip, r5
 800469e:	4661      	mov	r1, ip
 80046a0:	4d36      	ldr	r5, [pc, #216]	@ (800477c <HAL_PCD_IRQHandler+0x6cc>)
 80046a2:	400d      	ands	r5, r1
 80046a4:	4939      	ldr	r1, [pc, #228]	@ (800478c <HAL_PCD_IRQHandler+0x6dc>)
 80046a6:	430d      	orrs	r5, r1
 80046a8:	9901      	ldr	r1, [sp, #4]
 80046aa:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 80046ac:	2528      	movs	r5, #40	@ 0x28
 80046ae:	9900      	ldr	r1, [sp, #0]
 80046b0:	434d      	muls	r5, r1
 80046b2:	2134      	movs	r1, #52	@ 0x34
 80046b4:	468c      	mov	ip, r1
 80046b6:	1965      	adds	r5, r4, r5
 80046b8:	44ac      	add	ip, r5
 80046ba:	4661      	mov	r1, ip
 80046bc:	7809      	ldrb	r1, [r1, #0]
 80046be:	2901      	cmp	r1, #1
 80046c0:	d000      	beq.n	80046c4 <HAL_PCD_IRQHandler+0x614>
 80046c2:	e0a2      	b.n	800480a <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 80046c4:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80046c6:	19c9      	adds	r1, r1, r7
 80046c8:	6269      	str	r1, [r5, #36]	@ 0x24
 80046ca:	9101      	str	r1, [sp, #4]
        ep->xfer_count += TxPctSize;
 80046cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046ce:	19c9      	adds	r1, r1, r7
 80046d0:	62d9      	str	r1, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80046d2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80046d4:	6a29      	ldr	r1, [r5, #32]
 80046d6:	428b      	cmp	r3, r1
 80046d8:	d317      	bcc.n	800470a <HAL_PCD_IRQHandler+0x65a>
          ep->xfer_len_db -= len;
 80046da:	1a5b      	subs	r3, r3, r1
 80046dc:	632b      	str	r3, [r5, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046de:	2328      	movs	r3, #40	@ 0x28
 80046e0:	9d00      	ldr	r5, [sp, #0]
 80046e2:	436b      	muls	r3, r5
 80046e4:	18e3      	adds	r3, r4, r3
 80046e6:	7c5d      	ldrb	r5, [r3, #17]
 80046e8:	b28b      	uxth	r3, r1
 80046ea:	2d00      	cmp	r5, #0
 80046ec:	d137      	bne.n	800475e <HAL_PCD_IRQHandler+0x6ae>
 80046ee:	0005      	movs	r5, r0
 80046f0:	3550      	adds	r5, #80	@ 0x50
 80046f2:	882d      	ldrh	r5, [r5, #0]
 80046f4:	1975      	adds	r5, r6, r5
 80046f6:	18aa      	adds	r2, r5, r2
 80046f8:	8815      	ldrh	r5, [r2, #0]
 80046fa:	05ad      	lsls	r5, r5, #22
 80046fc:	0dad      	lsrs	r5, r5, #22
 80046fe:	8015      	strh	r5, [r2, #0]
 8004700:	2900      	cmp	r1, #0
 8004702:	d10e      	bne.n	8004722 <HAL_PCD_IRQHandler+0x672>
 8004704:	8811      	ldrh	r1, [r2, #0]
 8004706:	4d20      	ldr	r5, [pc, #128]	@ (8004788 <HAL_PCD_IRQHandler+0x6d8>)
 8004708:	e013      	b.n	8004732 <HAL_PCD_IRQHandler+0x682>
        else if (ep->xfer_len_db == 0U)
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <HAL_PCD_IRQHandler+0x666>
          ep->xfer_fill_db = 0U;
 800470e:	4661      	mov	r1, ip
 8004710:	700b      	strb	r3, [r1, #0]
          len = TxPctSize;
 8004712:	0039      	movs	r1, r7
 8004714:	e7e3      	b.n	80046de <HAL_PCD_IRQHandler+0x62e>
          ep->xfer_fill_db = 0U;
 8004716:	2100      	movs	r1, #0
 8004718:	4667      	mov	r7, ip
 800471a:	7039      	strb	r1, [r7, #0]
          ep->xfer_len_db = 0U;
 800471c:	6329      	str	r1, [r5, #48]	@ 0x30
          len = ep->xfer_len_db;
 800471e:	0019      	movs	r1, r3
 8004720:	e7dd      	b.n	80046de <HAL_PCD_IRQHandler+0x62e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004722:	293e      	cmp	r1, #62	@ 0x3e
 8004724:	d811      	bhi.n	800474a <HAL_PCD_IRQHandler+0x69a>
 8004726:	2601      	movs	r6, #1
 8004728:	084d      	lsrs	r5, r1, #1
 800472a:	400e      	ands	r6, r1
 800472c:	19ad      	adds	r5, r5, r6
 800472e:	8811      	ldrh	r1, [r2, #0]
 8004730:	02ad      	lsls	r5, r5, #10
 8004732:	4329      	orrs	r1, r5
 8004734:	b289      	uxth	r1, r1
 8004736:	8011      	strh	r1, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004738:	2228      	movs	r2, #40	@ 0x28
 800473a:	9900      	ldr	r1, [sp, #0]
 800473c:	434a      	muls	r2, r1
 800473e:	18a2      	adds	r2, r4, r2
 8004740:	8b12      	ldrh	r2, [r2, #24]
 8004742:	9901      	ldr	r1, [sp, #4]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004744:	f001 fbad 	bl	8005ea2 <USB_WritePMA>
 8004748:	e05f      	b.n	800480a <HAL_PCD_IRQHandler+0x75a>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800474a:	261f      	movs	r6, #31
 800474c:	094d      	lsrs	r5, r1, #5
 800474e:	4031      	ands	r1, r6
 8004750:	424e      	negs	r6, r1
 8004752:	4171      	adcs	r1, r6
 8004754:	1a6d      	subs	r5, r5, r1
 8004756:	8811      	ldrh	r1, [r2, #0]
 8004758:	02ad      	lsls	r5, r5, #10
 800475a:	4329      	orrs	r1, r5
 800475c:	e7d3      	b.n	8004706 <HAL_PCD_IRQHandler+0x656>
 800475e:	2d01      	cmp	r5, #1
 8004760:	d1ea      	bne.n	8004738 <HAL_PCD_IRQHandler+0x688>
 8004762:	0001      	movs	r1, r0
 8004764:	3150      	adds	r1, #80	@ 0x50
 8004766:	8809      	ldrh	r1, [r1, #0]
 8004768:	1876      	adds	r6, r6, r1
 800476a:	18b6      	adds	r6, r6, r2
 800476c:	8033      	strh	r3, [r6, #0]
 800476e:	e7e3      	b.n	8004738 <HAL_PCD_IRQHandler+0x688>
 8004770:	00000406 	.word	0x00000406
 8004774:	ffffbf8f 	.word	0xffffbf8f
 8004778:	00008080 	.word	0x00008080
 800477c:	ffff8f8f 	.word	0xffff8f8f
 8004780:	000080c0 	.word	0x000080c0
 8004784:	00000402 	.word	0x00000402
 8004788:	ffff8000 	.word	0xffff8000
 800478c:	0000c080 	.word	0x0000c080
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004790:	49ac      	ldr	r1, [pc, #688]	@ (8004a44 <HAL_PCD_IRQHandler+0x994>)
 8004792:	8836      	ldrh	r6, [r6, #0]
 8004794:	468c      	mov	ip, r1
 8004796:	4484      	add	ip, r0
 8004798:	4466      	add	r6, ip
 800479a:	5ab6      	ldrh	r6, [r6, r2]
      ep->xfer_len = 0U;
 800479c:	9f03      	ldr	r7, [sp, #12]
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800479e:	05b6      	lsls	r6, r6, #22
    if (ep->xfer_len >= TxPctSize)
 80047a0:	0db6      	lsrs	r6, r6, #22
 80047a2:	42ae      	cmp	r6, r5
 80047a4:	d800      	bhi.n	80047a8 <HAL_PCD_IRQHandler+0x6f8>
      ep->xfer_len -= TxPctSize;
 80047a6:	1baf      	subs	r7, r5, r6
 80047a8:	2580      	movs	r5, #128	@ 0x80
 80047aa:	9901      	ldr	r1, [sp, #4]
 80047ac:	01ed      	lsls	r5, r5, #7
 80047ae:	4029      	ands	r1, r5
 80047b0:	000d      	movs	r5, r1
 80047b2:	629f      	str	r7, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 80047b4:	2f00      	cmp	r7, #0
 80047b6:	d149      	bne.n	800484c <HAL_PCD_IRQHandler+0x79c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047b8:	2328      	movs	r3, #40	@ 0x28
 80047ba:	9900      	ldr	r1, [sp, #0]
 80047bc:	434b      	muls	r3, r1
 80047be:	18e3      	adds	r3, r4, r3
 80047c0:	7c5b      	ldrb	r3, [r3, #17]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d133      	bne.n	800482e <HAL_PCD_IRQHandler+0x77e>
 80047c6:	0003      	movs	r3, r0
 80047c8:	499f      	ldr	r1, [pc, #636]	@ (8004a48 <HAL_PCD_IRQHandler+0x998>)
 80047ca:	3350      	adds	r3, #80	@ 0x50
 80047cc:	881e      	ldrh	r6, [r3, #0]
 80047ce:	1840      	adds	r0, r0, r1
 80047d0:	1980      	adds	r0, r0, r6
 80047d2:	1880      	adds	r0, r0, r2
 80047d4:	8806      	ldrh	r6, [r0, #0]
 80047d6:	499d      	ldr	r1, [pc, #628]	@ (8004a4c <HAL_PCD_IRQHandler+0x99c>)
 80047d8:	05b6      	lsls	r6, r6, #22
 80047da:	0db6      	lsrs	r6, r6, #22
 80047dc:	8006      	strh	r6, [r0, #0]
 80047de:	8806      	ldrh	r6, [r0, #0]
 80047e0:	430e      	orrs	r6, r1
 80047e2:	b2b6      	uxth	r6, r6
 80047e4:	8006      	strh	r6, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	4463      	add	r3, ip
 80047ea:	189b      	adds	r3, r3, r2
 80047ec:	881a      	ldrh	r2, [r3, #0]
 80047ee:	0592      	lsls	r2, r2, #22
 80047f0:	0d92      	lsrs	r2, r2, #22
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	881a      	ldrh	r2, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	b292      	uxth	r2, r2
 80047fa:	801a      	strh	r2, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047fc:	0020      	movs	r0, r4
 80047fe:	9902      	ldr	r1, [sp, #8]
 8004800:	f002 fc67 	bl	80070d2 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004804:	2d00      	cmp	r5, #0
 8004806:	d100      	bne.n	800480a <HAL_PCD_IRQHandler+0x75a>
 8004808:	e722      	b.n	8004650 <HAL_PCD_IRQHandler+0x5a0>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800480a:	2328      	movs	r3, #40	@ 0x28
 800480c:	9a00      	ldr	r2, [sp, #0]
 800480e:	4353      	muls	r3, r2
 8004810:	18e3      	adds	r3, r4, r3
 8004812:	7c1b      	ldrb	r3, [r3, #16]
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	18d2      	adds	r2, r2, r3
 800481a:	8811      	ldrh	r1, [r2, #0]
 800481c:	4b8c      	ldr	r3, [pc, #560]	@ (8004a50 <HAL_PCD_IRQHandler+0x9a0>)
 800481e:	4019      	ands	r1, r3
 8004820:	2330      	movs	r3, #48	@ 0x30
 8004822:	404b      	eors	r3, r1
 8004824:	498b      	ldr	r1, [pc, #556]	@ (8004a54 <HAL_PCD_IRQHandler+0x9a4>)
 8004826:	430b      	orrs	r3, r1
 8004828:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800482a:	f7ff fc4f 	bl	80040cc <HAL_PCD_IRQHandler+0x1c>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800482e:	2b01      	cmp	r3, #1
 8004830:	d1e4      	bne.n	80047fc <HAL_PCD_IRQHandler+0x74c>
 8004832:	0003      	movs	r3, r0
 8004834:	4984      	ldr	r1, [pc, #528]	@ (8004a48 <HAL_PCD_IRQHandler+0x998>)
 8004836:	3350      	adds	r3, #80	@ 0x50
 8004838:	881e      	ldrh	r6, [r3, #0]
 800483a:	1840      	adds	r0, r0, r1
 800483c:	1980      	adds	r0, r0, r6
 800483e:	1880      	adds	r0, r0, r2
 8004840:	8007      	strh	r7, [r0, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	4463      	add	r3, ip
 8004846:	189b      	adds	r3, r3, r2
 8004848:	801f      	strh	r7, [r3, #0]
 800484a:	e7d7      	b.n	80047fc <HAL_PCD_IRQHandler+0x74c>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800484c:	2900      	cmp	r1, #0
 800484e:	d108      	bne.n	8004862 <HAL_PCD_IRQHandler+0x7b2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004850:	9902      	ldr	r1, [sp, #8]
 8004852:	4d81      	ldr	r5, [pc, #516]	@ (8004a58 <HAL_PCD_IRQHandler+0x9a8>)
 8004854:	0089      	lsls	r1, r1, #2
 8004856:	1841      	adds	r1, r0, r1
 8004858:	880f      	ldrh	r7, [r1, #0]
 800485a:	403d      	ands	r5, r7
 800485c:	4f7f      	ldr	r7, [pc, #508]	@ (8004a5c <HAL_PCD_IRQHandler+0x9ac>)
 800485e:	433d      	orrs	r5, r7
 8004860:	800d      	strh	r5, [r1, #0]
      if (ep->xfer_fill_db == 1U)
 8004862:	2728      	movs	r7, #40	@ 0x28
 8004864:	9900      	ldr	r1, [sp, #0]
 8004866:	434f      	muls	r7, r1
 8004868:	19e7      	adds	r7, r4, r7
 800486a:	0039      	movs	r1, r7
 800486c:	3134      	adds	r1, #52	@ 0x34
 800486e:	9101      	str	r1, [sp, #4]
 8004870:	7809      	ldrb	r1, [r1, #0]
 8004872:	2901      	cmp	r1, #1
 8004874:	d1c9      	bne.n	800480a <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_buff += TxPctSize;
 8004876:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004878:	1989      	adds	r1, r1, r6
 800487a:	6279      	str	r1, [r7, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 800487c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800487e:	19ad      	adds	r5, r5, r6
 8004880:	62dd      	str	r5, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004884:	6a3d      	ldr	r5, [r7, #32]
 8004886:	42ab      	cmp	r3, r5
 8004888:	d317      	bcc.n	80048ba <HAL_PCD_IRQHandler+0x80a>
          ep->xfer_len_db -= len;
 800488a:	1b5b      	subs	r3, r3, r5
 800488c:	633b      	str	r3, [r7, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800488e:	2328      	movs	r3, #40	@ 0x28
 8004890:	9e00      	ldr	r6, [sp, #0]
 8004892:	4373      	muls	r3, r6
 8004894:	18e3      	adds	r3, r4, r3
 8004896:	7c5e      	ldrb	r6, [r3, #17]
 8004898:	b2ab      	uxth	r3, r5
 800489a:	2e00      	cmp	r6, #0
 800489c:	d134      	bne.n	8004908 <HAL_PCD_IRQHandler+0x858>
 800489e:	0006      	movs	r6, r0
 80048a0:	3650      	adds	r6, #80	@ 0x50
 80048a2:	8836      	ldrh	r6, [r6, #0]
 80048a4:	4466      	add	r6, ip
 80048a6:	18b2      	adds	r2, r6, r2
 80048a8:	8816      	ldrh	r6, [r2, #0]
 80048aa:	05b6      	lsls	r6, r6, #22
 80048ac:	0db6      	lsrs	r6, r6, #22
 80048ae:	8016      	strh	r6, [r2, #0]
 80048b0:	2d00      	cmp	r5, #0
 80048b2:	d10e      	bne.n	80048d2 <HAL_PCD_IRQHandler+0x822>
 80048b4:	8815      	ldrh	r5, [r2, #0]
 80048b6:	4e65      	ldr	r6, [pc, #404]	@ (8004a4c <HAL_PCD_IRQHandler+0x99c>)
 80048b8:	e013      	b.n	80048e2 <HAL_PCD_IRQHandler+0x832>
        else if (ep->xfer_len_db == 0U)
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <HAL_PCD_IRQHandler+0x816>
          ep->xfer_fill_db = 0U;
 80048be:	9d01      	ldr	r5, [sp, #4]
 80048c0:	702b      	strb	r3, [r5, #0]
          len = TxPctSize;
 80048c2:	0035      	movs	r5, r6
 80048c4:	e7e3      	b.n	800488e <HAL_PCD_IRQHandler+0x7de>
          ep->xfer_len_db = 0U;
 80048c6:	2500      	movs	r5, #0
          ep->xfer_fill_db = 0;
 80048c8:	9e01      	ldr	r6, [sp, #4]
          ep->xfer_len_db = 0U;
 80048ca:	633d      	str	r5, [r7, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 80048cc:	7035      	strb	r5, [r6, #0]
          len = ep->xfer_len_db;
 80048ce:	001d      	movs	r5, r3
 80048d0:	e7dd      	b.n	800488e <HAL_PCD_IRQHandler+0x7de>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048d2:	2d3e      	cmp	r5, #62	@ 0x3e
 80048d4:	d80e      	bhi.n	80048f4 <HAL_PCD_IRQHandler+0x844>
 80048d6:	2701      	movs	r7, #1
 80048d8:	086e      	lsrs	r6, r5, #1
 80048da:	402f      	ands	r7, r5
 80048dc:	19f6      	adds	r6, r6, r7
 80048de:	8815      	ldrh	r5, [r2, #0]
 80048e0:	02b6      	lsls	r6, r6, #10
 80048e2:	4335      	orrs	r5, r6
 80048e4:	b2ad      	uxth	r5, r5
 80048e6:	8015      	strh	r5, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80048e8:	2228      	movs	r2, #40	@ 0x28
 80048ea:	9d00      	ldr	r5, [sp, #0]
 80048ec:	436a      	muls	r2, r5
 80048ee:	18a2      	adds	r2, r4, r2
 80048f0:	8b52      	ldrh	r2, [r2, #26]
 80048f2:	e727      	b.n	8004744 <HAL_PCD_IRQHandler+0x694>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80048f4:	271f      	movs	r7, #31
 80048f6:	096e      	lsrs	r6, r5, #5
 80048f8:	403d      	ands	r5, r7
 80048fa:	426f      	negs	r7, r5
 80048fc:	417d      	adcs	r5, r7
 80048fe:	1b76      	subs	r6, r6, r5
 8004900:	8815      	ldrh	r5, [r2, #0]
 8004902:	02b6      	lsls	r6, r6, #10
 8004904:	4335      	orrs	r5, r6
 8004906:	e7d6      	b.n	80048b6 <HAL_PCD_IRQHandler+0x806>
 8004908:	2e01      	cmp	r6, #1
 800490a:	d1ed      	bne.n	80048e8 <HAL_PCD_IRQHandler+0x838>
 800490c:	0005      	movs	r5, r0
 800490e:	3550      	adds	r5, #80	@ 0x50
 8004910:	882d      	ldrh	r5, [r5, #0]
 8004912:	4465      	add	r5, ip
 8004914:	18aa      	adds	r2, r5, r2
 8004916:	8013      	strh	r3, [r2, #0]
 8004918:	e7e6      	b.n	80048e8 <HAL_PCD_IRQHandler+0x838>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800491a:	0543      	lsls	r3, r0, #21
 800491c:	d50e      	bpl.n	800493c <HAL_PCD_IRQHandler+0x88c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	494f      	ldr	r1, [pc, #316]	@ (8004a60 <HAL_PCD_IRQHandler+0x9b0>)
 8004922:	3306      	adds	r3, #6
 8004924:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8004926:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004928:	400a      	ands	r2, r1
 800492a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_ResetCallback(hpcd);
 800492c:	f002 fbe3 	bl	80070f6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004930:	0029      	movs	r1, r5
 8004932:	0020      	movs	r0, r4
 8004934:	f7ff fbab 	bl	800408e <HAL_PCD_SetAddress>
    return;
 8004938:	f7ff fbce 	bl	80040d8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800493c:	0443      	lsls	r3, r0, #17
 800493e:	d507      	bpl.n	8004950 <HAL_PCD_IRQHandler+0x8a0>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	4948      	ldr	r1, [pc, #288]	@ (8004a64 <HAL_PCD_IRQHandler+0x9b4>)
 8004944:	3306      	adds	r3, #6
 8004946:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004948:	400a      	ands	r2, r1
 800494a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    return;
 800494c:	f7ff fbc4 	bl	80040d8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004950:	2380      	movs	r3, #128	@ 0x80
 8004952:	0001      	movs	r1, r0
 8004954:	019b      	lsls	r3, r3, #6
 8004956:	4019      	ands	r1, r3
 8004958:	4218      	tst	r0, r3
 800495a:	d004      	beq.n	8004966 <HAL_PCD_IRQHandler+0x8b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	4942      	ldr	r1, [pc, #264]	@ (8004a68 <HAL_PCD_IRQHandler+0x9b8>)
 8004960:	3306      	adds	r3, #6
 8004962:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8004964:	e7f0      	b.n	8004948 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004966:	04c3      	lsls	r3, r0, #19
 8004968:	d51a      	bpl.n	80049a0 <HAL_PCD_IRQHandler+0x8f0>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800496a:	2004      	movs	r0, #4
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	3302      	adds	r3, #2
 8004970:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8004972:	4382      	bics	r2, r0
 8004974:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004976:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8004978:	1800      	adds	r0, r0, r0
 800497a:	4382      	bics	r2, r0
 800497c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L1)
 800497e:	23b2      	movs	r3, #178	@ 0xb2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	5ce2      	ldrb	r2, [r4, r3]
 8004984:	2a01      	cmp	r2, #1
 8004986:	d103      	bne.n	8004990 <HAL_PCD_IRQHandler+0x8e0>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004988:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 800498a:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800498c:	f000 f98b 	bl	8004ca6 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8004990:	0020      	movs	r0, r4
 8004992:	f002 fbd3 	bl	800713c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004996:	6823      	ldr	r3, [r4, #0]
 8004998:	4934      	ldr	r1, [pc, #208]	@ (8004a6c <HAL_PCD_IRQHandler+0x9bc>)
 800499a:	3306      	adds	r3, #6
 800499c:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 800499e:	e7d3      	b.n	8004948 <HAL_PCD_IRQHandler+0x898>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80049a0:	0503      	lsls	r3, r0, #20
 80049a2:	d513      	bpl.n	80049cc <HAL_PCD_IRQHandler+0x91c>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049a4:	2108      	movs	r1, #8
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	1c9a      	adds	r2, r3, #2
 80049aa:	8fd0      	ldrh	r0, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80049ac:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049ae:	4301      	orrs	r1, r0
 80049b0:	87d1      	strh	r1, [r2, #62]	@ 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80049b2:	8fd9      	ldrh	r1, [r3, #62]	@ 0x3e
 80049b4:	482e      	ldr	r0, [pc, #184]	@ (8004a70 <HAL_PCD_IRQHandler+0x9c0>)
 80049b6:	4001      	ands	r1, r0
 80049b8:	87d9      	strh	r1, [r3, #62]	@ 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049ba:	2304      	movs	r3, #4
 80049bc:	8fd1      	ldrh	r1, [r2, #62]	@ 0x3e
 80049be:	430b      	orrs	r3, r1
 80049c0:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      HAL_PCD_SuspendCallback(hpcd);
 80049c2:	0020      	movs	r0, r4
 80049c4:	f002 fba8 	bl	8007118 <HAL_PCD_SuspendCallback>
 80049c8:	f7ff fb86 	bl	80040d8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80049cc:	2580      	movs	r5, #128	@ 0x80
 80049ce:	4228      	tst	r0, r5
 80049d0:	d021      	beq.n	8004a16 <HAL_PCD_IRQHandler+0x966>
    if (hpcd->LPM_State == LPM_L0)
 80049d2:	20b2      	movs	r0, #178	@ 0xb2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80049d4:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 80049d6:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80049d8:	1d99      	adds	r1, r3, #6
 80049da:	8fca      	ldrh	r2, [r1, #62]	@ 0x3e
 80049dc:	43aa      	bics	r2, r5
 80049de:	87ca      	strh	r2, [r1, #62]	@ 0x3e
    if (hpcd->LPM_State == LPM_L0)
 80049e0:	5c22      	ldrb	r2, [r4, r0]
 80049e2:	2a00      	cmp	r2, #0
 80049e4:	d1ed      	bne.n	80049c2 <HAL_PCD_IRQHandler+0x912>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049e6:	2104      	movs	r1, #4
 80049e8:	1c9a      	adds	r2, r3, #2
 80049ea:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80049ec:	3354      	adds	r3, #84	@ 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049ee:	4329      	orrs	r1, r5
 80049f0:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049f2:	2108      	movs	r1, #8
 80049f4:	8fd5      	ldrh	r5, [r2, #62]	@ 0x3e
 80049f6:	4329      	orrs	r1, r5
 80049f8:	87d1      	strh	r1, [r2, #62]	@ 0x3e
      hpcd->LPM_State = LPM_L1;
 80049fa:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80049fc:	223c      	movs	r2, #60	@ 0x3c
      hpcd->LPM_State = LPM_L1;
 80049fe:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004a00:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a02:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004a04:	089b      	lsrs	r3, r3, #2
 8004a06:	4013      	ands	r3, r2
 8004a08:	22b3      	movs	r2, #179	@ 0xb3
 8004a0a:	0092      	lsls	r2, r2, #2
 8004a0c:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a0e:	f000 f94a 	bl	8004ca6 <HAL_PCDEx_LPM_Callback>
 8004a12:	f7ff fb61 	bl	80040d8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004a16:	0583      	lsls	r3, r0, #22
 8004a18:	d50a      	bpl.n	8004a30 <HAL_PCD_IRQHandler+0x980>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a1a:	6823      	ldr	r3, [r4, #0]
 8004a1c:	4915      	ldr	r1, [pc, #84]	@ (8004a74 <HAL_PCD_IRQHandler+0x9c4>)
 8004a1e:	3306      	adds	r3, #6
 8004a20:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8004a22:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a24:	400a      	ands	r2, r1
 8004a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8004a28:	f002 fb5e 	bl	80070e8 <HAL_PCD_SOFCallback>
    return;
 8004a2c:	f7ff fb54 	bl	80040d8 <HAL_PCD_IRQHandler+0x28>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004a30:	05c0      	lsls	r0, r0, #23
 8004a32:	d401      	bmi.n	8004a38 <HAL_PCD_IRQHandler+0x988>
 8004a34:	f7ff fb50 	bl	80040d8 <HAL_PCD_IRQHandler+0x28>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	490f      	ldr	r1, [pc, #60]	@ (8004a78 <HAL_PCD_IRQHandler+0x9c8>)
 8004a3c:	3306      	adds	r3, #6
 8004a3e:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8004a40:	e782      	b.n	8004948 <HAL_PCD_IRQHandler+0x898>
 8004a42:	46c0      	nop			@ (mov r8, r8)
 8004a44:	00000406 	.word	0x00000406
 8004a48:	00000402 	.word	0x00000402
 8004a4c:	ffff8000 	.word	0xffff8000
 8004a50:	ffff8fbf 	.word	0xffff8fbf
 8004a54:	00008080 	.word	0x00008080
 8004a58:	ffff8f8f 	.word	0xffff8f8f
 8004a5c:	0000c080 	.word	0x0000c080
 8004a60:	fffffbff 	.word	0xfffffbff
 8004a64:	ffffbfff 	.word	0xffffbfff
 8004a68:	ffffdfff 	.word	0xffffdfff
 8004a6c:	ffffefff 	.word	0xffffefff
 8004a70:	fffff7ff 	.word	0xfffff7ff
 8004a74:	fffffdff 	.word	0xfffffdff
 8004a78:	fffffeff 	.word	0xfffffeff

08004a7c <HAL_PCD_EP_Open>:
{
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	0004      	movs	r4, r0
 8004a80:	2007      	movs	r0, #7
 8004a82:	000d      	movs	r5, r1
 8004a84:	4008      	ands	r0, r1
 8004a86:	2128      	movs	r1, #40	@ 0x28
 8004a88:	4341      	muls	r1, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8004a8a:	b26d      	sxtb	r5, r5
 8004a8c:	1866      	adds	r6, r4, r1
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	da18      	bge.n	8004ac4 <HAL_PCD_EP_Open+0x48>
    ep->is_in = 1U;
 8004a92:	2501      	movs	r5, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a94:	3110      	adds	r1, #16
 8004a96:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8004a98:	7475      	strb	r5, [r6, #17]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9a:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8004a9c:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 8004a9e:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8004aa8:	25a4      	movs	r5, #164	@ 0xa4
 8004aaa:	00ad      	lsls	r5, r5, #2
 8004aac:	5d63      	ldrb	r3, [r4, r5]
 8004aae:	2002      	movs	r0, #2
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d006      	beq.n	8004ac2 <HAL_PCD_EP_Open+0x46>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	5563      	strb	r3, [r4, r5]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	f000 fff9 	bl	8005ab0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004abe:	2000      	movs	r0, #0
 8004ac0:	5560      	strb	r0, [r4, r5]
}
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8004ac4:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ac6:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8004ac8:	3652      	adds	r6, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aca:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8004acc:	36ff      	adds	r6, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ace:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8004ad0:	7035      	strb	r5, [r6, #0]
 8004ad2:	e7e2      	b.n	8004a9a <HAL_PCD_EP_Open+0x1e>

08004ad4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004ad4:	2207      	movs	r2, #7
{
 8004ad6:	000b      	movs	r3, r1
 8004ad8:	400a      	ands	r2, r1
 8004ada:	2128      	movs	r1, #40	@ 0x28
 8004adc:	4351      	muls	r1, r2
  if ((ep_addr & 0x80U) == 0x80U)
 8004ade:	b25b      	sxtb	r3, r3
{
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	0004      	movs	r4, r0
 8004ae4:	1840      	adds	r0, r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da12      	bge.n	8004b10 <HAL_PCD_EP_Close+0x3c>
    ep->is_in = 1U;
 8004aea:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aec:	3110      	adds	r1, #16
 8004aee:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8004af0:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hpcd);
 8004af2:	25a4      	movs	r5, #164	@ 0xa4
  ep->num = ep_addr & EP_ADDR_MSK;
 8004af4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004af6:	00ad      	lsls	r5, r5, #2
 8004af8:	5d63      	ldrb	r3, [r4, r5]
 8004afa:	2002      	movs	r0, #2
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d006      	beq.n	8004b0e <HAL_PCD_EP_Close+0x3a>
 8004b00:	2301      	movs	r3, #1
 8004b02:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b04:	6820      	ldr	r0, [r4, #0]
 8004b06:	f001 f8e3 	bl	8005cd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	5560      	strb	r0, [r4, r5]
}
 8004b0e:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8004b10:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b12:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8004b14:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b16:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8004b18:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b1a:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8004b1c:	7003      	strb	r3, [r0, #0]
 8004b1e:	e7e8      	b.n	8004af2 <HAL_PCD_EP_Close+0x1e>

08004b20 <HAL_PCD_EP_Receive>:
{
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	2407      	movs	r4, #7
}
 8004b24:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 8004b26:	3421      	adds	r4, #33	@ 0x21
 8004b28:	434c      	muls	r4, r1
 8004b2a:	1906      	adds	r6, r0, r4
 8004b2c:	0037      	movs	r7, r6
 8004b2e:	37fc      	adds	r7, #252	@ 0xfc
  ep->xfer_len = len;
 8004b30:	66fb      	str	r3, [r7, #108]	@ 0x6c
  ep->is_in = 0U;
 8004b32:	0033      	movs	r3, r6
  ep->xfer_count = 0U;
 8004b34:	2500      	movs	r5, #0
  ep->is_in = 0U;
 8004b36:	3352      	adds	r3, #82	@ 0x52
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b38:	3651      	adds	r6, #81	@ 0x51
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b3a:	3451      	adds	r4, #81	@ 0x51
  ep->is_in = 0U;
 8004b3c:	33ff      	adds	r3, #255	@ 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b3e:	36ff      	adds	r6, #255	@ 0xff
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b40:	34ff      	adds	r4, #255	@ 0xff
  ep->xfer_count = 0U;
 8004b42:	673d      	str	r5, [r7, #112]	@ 0x70
  ep->xfer_buff = pBuf;
 8004b44:	66ba      	str	r2, [r7, #104]	@ 0x68
  ep->is_in = 0U;
 8004b46:	701d      	strb	r5, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b48:	7031      	strb	r1, [r6, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b4a:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b4c:	6800      	ldr	r0, [r0, #0]
 8004b4e:	f001 f9bd 	bl	8005ecc <USB_EPStartXfer>
}
 8004b52:	0028      	movs	r0, r5
 8004b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b56 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b56:	2307      	movs	r3, #7
 8004b58:	400b      	ands	r3, r1
 8004b5a:	2128      	movs	r1, #40	@ 0x28
 8004b5c:	4359      	muls	r1, r3
 8004b5e:	1840      	adds	r0, r0, r1
 8004b60:	30fc      	adds	r0, #252	@ 0xfc
 8004b62:	6f00      	ldr	r0, [r0, #112]	@ 0x70
}
 8004b64:	4770      	bx	lr

08004b66 <HAL_PCD_EP_Transmit>:
{
 8004b66:	b570      	push	{r4, r5, r6, lr}
 8004b68:	2407      	movs	r4, #7
}
 8004b6a:	4021      	ands	r1, r4
 8004b6c:	3421      	adds	r4, #33	@ 0x21
 8004b6e:	434c      	muls	r4, r1
  ep->xfer_buff = pBuf;
 8004b70:	1906      	adds	r6, r0, r4
  ep->xfer_fill_db = 1U;
 8004b72:	0035      	movs	r5, r6
  ep->xfer_buff = pBuf;
 8004b74:	6272      	str	r2, [r6, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8004b76:	2201      	movs	r2, #1
 8004b78:	3534      	adds	r5, #52	@ 0x34
  ep->xfer_len = len;
 8004b7a:	62b3      	str	r3, [r6, #40]	@ 0x28
  ep->xfer_fill_db = 1U;
 8004b7c:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 8004b7e:	2500      	movs	r5, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	3410      	adds	r4, #16
  ep->xfer_count = 0U;
 8004b82:	62f5      	str	r5, [r6, #44]	@ 0x2c
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b84:	7431      	strb	r1, [r6, #16]
  ep->xfer_len_db = len;
 8004b86:	6333      	str	r3, [r6, #48]	@ 0x30
  ep->is_in = 1U;
 8004b88:	7472      	strb	r2, [r6, #17]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8a:	1901      	adds	r1, r0, r4
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b8c:	6800      	ldr	r0, [r0, #0]
 8004b8e:	f001 f99d 	bl	8005ecc <USB_EPStartXfer>
}
 8004b92:	0028      	movs	r0, r5
 8004b94:	bd70      	pop	{r4, r5, r6, pc}

08004b96 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b96:	2207      	movs	r2, #7
{
 8004b98:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b9a:	7903      	ldrb	r3, [r0, #4]
{
 8004b9c:	0004      	movs	r4, r0
 8004b9e:	400a      	ands	r2, r1
    return HAL_ERROR;
 8004ba0:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d319      	bcc.n	8004bda <HAL_PCD_EP_SetStall+0x44>
  if ((0x80U & ep_addr) == 0x80U)
 8004ba6:	b248      	sxtb	r0, r1
 8004ba8:	2328      	movs	r3, #40	@ 0x28
 8004baa:	2800      	cmp	r0, #0
 8004bac:	da16      	bge.n	8004bdc <HAL_PCD_EP_SetStall+0x46>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bae:	4353      	muls	r3, r2
 8004bb0:	0019      	movs	r1, r3
    ep->is_in = 1U;
 8004bb2:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb4:	3110      	adds	r1, #16
    ep->is_in = 1U;
 8004bb6:	18e3      	adds	r3, r4, r3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb8:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8004bba:	7458      	strb	r0, [r3, #17]
  ep->is_stall = 1U;
 8004bbc:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8004bbe:	25a4      	movs	r5, #164	@ 0xa4
  ep->is_stall = 1U;
 8004bc0:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bc2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004bc4:	00ad      	lsls	r5, r5, #2
 8004bc6:	5d62      	ldrb	r2, [r4, r5]
 8004bc8:	2002      	movs	r0, #2
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d005      	beq.n	8004bda <HAL_PCD_EP_SetStall+0x44>
 8004bce:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bd0:	6820      	ldr	r0, [r4, #0]
 8004bd2:	f001 f8f7 	bl	8005dc4 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	5560      	strb	r0, [r4, r5]
}
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8004bdc:	434b      	muls	r3, r1
 8004bde:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8004be0:	2000      	movs	r0, #0
 8004be2:	18e3      	adds	r3, r4, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8004be4:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8004be6:	3352      	adds	r3, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr];
 8004be8:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8004bea:	33ff      	adds	r3, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8004bec:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8004bee:	7018      	strb	r0, [r3, #0]
 8004bf0:	e7e4      	b.n	8004bbc <HAL_PCD_EP_SetStall+0x26>

08004bf2 <HAL_PCD_EP_ClrStall>:
{
 8004bf2:	000b      	movs	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bf4:	220f      	movs	r2, #15
{
 8004bf6:	b570      	push	{r4, r5, r6, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bf8:	7901      	ldrb	r1, [r0, #4]
{
 8004bfa:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bfc:	401a      	ands	r2, r3
    return HAL_ERROR;
 8004bfe:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c00:	4291      	cmp	r1, r2
 8004c02:	d31b      	bcc.n	8004c3c <HAL_PCD_EP_ClrStall+0x4a>
  if ((0x80U & ep_addr) == 0x80U)
 8004c04:	2207      	movs	r2, #7
 8004c06:	2128      	movs	r1, #40	@ 0x28
 8004c08:	401a      	ands	r2, r3
 8004c0a:	4351      	muls	r1, r2
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	1860      	adds	r0, r4, r1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	da14      	bge.n	8004c3e <HAL_PCD_EP_ClrStall+0x4c>
    ep->is_in = 1U;
 8004c14:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c16:	3110      	adds	r1, #16
 8004c18:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8004c1a:	7443      	strb	r3, [r0, #17]
  ep->is_stall = 0U;
 8004c1c:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8004c1e:	26a4      	movs	r6, #164	@ 0xa4
  ep->is_stall = 0U;
 8004c20:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c22:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004c24:	00b6      	lsls	r6, r6, #2
 8004c26:	5da3      	ldrb	r3, [r4, r6]
 8004c28:	2002      	movs	r0, #2
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d006      	beq.n	8004c3c <HAL_PCD_EP_ClrStall+0x4a>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c32:	6820      	ldr	r0, [r4, #0]
 8004c34:	f001 f8e8 	bl	8005e08 <USB_EPClearStall>
  return HAL_OK;
 8004c38:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 8004c3a:	55a5      	strb	r5, [r4, r6]
}
 8004c3c:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8004c3e:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c40:	3151      	adds	r1, #81	@ 0x51
    ep->is_in = 0U;
 8004c42:	3052      	adds	r0, #82	@ 0x52
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c44:	31ff      	adds	r1, #255	@ 0xff
    ep->is_in = 0U;
 8004c46:	30ff      	adds	r0, #255	@ 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c48:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8004c4a:	7003      	strb	r3, [r0, #0]
 8004c4c:	e7e6      	b.n	8004c1c <HAL_PCD_EP_ClrStall+0x2a>

08004c4e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004c4e:	b530      	push	{r4, r5, lr}
 8004c50:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c52:	060d      	lsls	r5, r1, #24
 8004c54:	d50b      	bpl.n	8004c6e <HAL_PCDEx_PMAConfig+0x20>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c56:	2507      	movs	r5, #7
 8004c58:	4029      	ands	r1, r5
 8004c5a:	434c      	muls	r4, r1
 8004c5c:	3410      	adds	r4, #16
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c5e:	1900      	adds	r0, r0, r4
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c60:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8004c62:	2a00      	cmp	r2, #0
 8004c64:	d107      	bne.n	8004c76 <HAL_PCDEx_PMAConfig+0x28>
    ep->doublebuffer = 0U;
 8004c66:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8004c68:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	bd30      	pop	{r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8004c6e:	434c      	muls	r4, r1
 8004c70:	3451      	adds	r4, #81	@ 0x51
 8004c72:	34ff      	adds	r4, #255	@ 0xff
 8004c74:	e7f3      	b.n	8004c5e <HAL_PCDEx_PMAConfig+0x10>
    ep->doublebuffer = 1U;
 8004c76:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c78:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8004c7a:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004c7c:	e7f5      	b.n	8004c6a <HAL_PCDEx_PMAConfig+0x1c>

08004c7e <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 8004c7e:	6803      	ldr	r3, [r0, #0]
{
 8004c80:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 8004c82:	20b4      	movs	r0, #180	@ 0xb4
 8004c84:	2101      	movs	r1, #1
{
 8004c86:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8004c88:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8004c8a:	24b2      	movs	r4, #178	@ 0xb2
  hpcd->lpm_active = 1U;
 8004c8c:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 8004c8e:	2000      	movs	r0, #0
 8004c90:	00a4      	lsls	r4, r4, #2
 8004c92:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004c94:	3354      	adds	r3, #84	@ 0x54
 8004c96:	881a      	ldrh	r2, [r3, #0]
 8004c98:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004c9a:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004c9c:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004c9e:	8819      	ldrh	r1, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8004ca4:	bd10      	pop	{r4, pc}

08004ca6 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004caa:	0004      	movs	r4, r0
 8004cac:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d04a      	beq.n	8004d48 <HAL_RCC_OscConfig+0xa0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb2:	6803      	ldr	r3, [r0, #0]
 8004cb4:	07db      	lsls	r3, r3, #31
 8004cb6:	d42f      	bmi.n	8004d18 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	079b      	lsls	r3, r3, #30
 8004cbc:	d500      	bpl.n	8004cc0 <HAL_RCC_OscConfig+0x18>
 8004cbe:	e086      	b.n	8004dce <HAL_RCC_OscConfig+0x126>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	071b      	lsls	r3, r3, #28
 8004cc4:	d500      	bpl.n	8004cc8 <HAL_RCC_OscConfig+0x20>
 8004cc6:	e0c6      	b.n	8004e56 <HAL_RCC_OscConfig+0x1ae>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	075b      	lsls	r3, r3, #29
 8004ccc:	d500      	bpl.n	8004cd0 <HAL_RCC_OscConfig+0x28>
 8004cce:	e0e9      	b.n	8004ea4 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	06db      	lsls	r3, r3, #27
 8004cd4:	d51a      	bpl.n	8004d0c <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004cd6:	6962      	ldr	r2, [r4, #20]
 8004cd8:	2304      	movs	r3, #4
 8004cda:	4db9      	ldr	r5, [pc, #740]	@ (8004fc0 <HAL_RCC_OscConfig+0x318>)
 8004cdc:	2a01      	cmp	r2, #1
 8004cde:	d000      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x3a>
 8004ce0:	e152      	b.n	8004f88 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ce2:	6b69      	ldr	r1, [r5, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004ce4:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ce6:	430b      	orrs	r3, r1
 8004ce8:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8004cea:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004cec:	431a      	orrs	r2, r3
 8004cee:	636a      	str	r2, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8004cf0:	f7fe f960 	bl	8002fb4 <HAL_GetTick>
 8004cf4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004cf6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004cf8:	423b      	tst	r3, r7
 8004cfa:	d100      	bne.n	8004cfe <HAL_RCC_OscConfig+0x56>
 8004cfc:	e13d      	b.n	8004f7a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004cfe:	21f8      	movs	r1, #248	@ 0xf8
 8004d00:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8004d02:	69a3      	ldr	r3, [r4, #24]
 8004d04:	438a      	bics	r2, r1
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	636b      	str	r3, [r5, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d0c:	6a23      	ldr	r3, [r4, #32]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d000      	beq.n	8004d14 <HAL_RCC_OscConfig+0x6c>
 8004d12:	e161      	b.n	8004fd8 <HAL_RCC_OscConfig+0x330>
        }
      }
    }
  }

  return HAL_OK;
 8004d14:	2000      	movs	r0, #0
 8004d16:	e02f      	b.n	8004d78 <HAL_RCC_OscConfig+0xd0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004d18:	220c      	movs	r2, #12
 8004d1a:	4da9      	ldr	r5, [pc, #676]	@ (8004fc0 <HAL_RCC_OscConfig+0x318>)
 8004d1c:	686b      	ldr	r3, [r5, #4]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d00b      	beq.n	8004d3c <HAL_RCC_OscConfig+0x94>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d24:	686b      	ldr	r3, [r5, #4]
 8004d26:	4013      	ands	r3, r2
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d10f      	bne.n	8004d4c <HAL_RCC_OscConfig+0xa4>
 8004d2c:	22c0      	movs	r2, #192	@ 0xc0
 8004d2e:	686b      	ldr	r3, [r5, #4]
 8004d30:	0252      	lsls	r2, r2, #9
 8004d32:	4013      	ands	r3, r2
 8004d34:	2280      	movs	r2, #128	@ 0x80
 8004d36:	0252      	lsls	r2, r2, #9
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d107      	bne.n	8004d4c <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	039b      	lsls	r3, r3, #14
 8004d40:	d5ba      	bpl.n	8004cb8 <HAL_RCC_OscConfig+0x10>
 8004d42:	6863      	ldr	r3, [r4, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1b7      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8004d48:	2001      	movs	r0, #1
 8004d4a:	e015      	b.n	8004d78 <HAL_RCC_OscConfig+0xd0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d4c:	6863      	ldr	r3, [r4, #4]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d114      	bne.n	8004d7c <HAL_RCC_OscConfig+0xd4>
 8004d52:	2380      	movs	r3, #128	@ 0x80
 8004d54:	682a      	ldr	r2, [r5, #0]
 8004d56:	025b      	lsls	r3, r3, #9
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004d5c:	f7fe f92a 	bl	8002fb4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d60:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8004d62:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d64:	02bf      	lsls	r7, r7, #10
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	423b      	tst	r3, r7
 8004d6a:	d1a5      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d6c:	f7fe f922 	bl	8002fb4 <HAL_GetTick>
 8004d70:	1b80      	subs	r0, r0, r6
 8004d72:	2864      	cmp	r0, #100	@ 0x64
 8004d74:	d9f7      	bls.n	8004d66 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 8004d76:	2003      	movs	r0, #3
}
 8004d78:	b005      	add	sp, #20
 8004d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d116      	bne.n	8004dae <HAL_RCC_OscConfig+0x106>
 8004d80:	682b      	ldr	r3, [r5, #0]
 8004d82:	4a90      	ldr	r2, [pc, #576]	@ (8004fc4 <HAL_RCC_OscConfig+0x31c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d84:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d86:	4013      	ands	r3, r2
 8004d88:	602b      	str	r3, [r5, #0]
 8004d8a:	682b      	ldr	r3, [r5, #0]
 8004d8c:	4a8e      	ldr	r2, [pc, #568]	@ (8004fc8 <HAL_RCC_OscConfig+0x320>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d90:	4013      	ands	r3, r2
 8004d92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004d94:	f7fe f90e 	bl	8002fb4 <HAL_GetTick>
 8004d98:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d9a:	682b      	ldr	r3, [r5, #0]
 8004d9c:	423b      	tst	r3, r7
 8004d9e:	d100      	bne.n	8004da2 <HAL_RCC_OscConfig+0xfa>
 8004da0:	e78a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004da2:	f7fe f907 	bl	8002fb4 <HAL_GetTick>
 8004da6:	1b80      	subs	r0, r0, r6
 8004da8:	2864      	cmp	r0, #100	@ 0x64
 8004daa:	d9f6      	bls.n	8004d9a <HAL_RCC_OscConfig+0xf2>
 8004dac:	e7e3      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dae:	2b05      	cmp	r3, #5
 8004db0:	d105      	bne.n	8004dbe <HAL_RCC_OscConfig+0x116>
 8004db2:	2380      	movs	r3, #128	@ 0x80
 8004db4:	682a      	ldr	r2, [r5, #0]
 8004db6:	02db      	lsls	r3, r3, #11
 8004db8:	4313      	orrs	r3, r2
 8004dba:	602b      	str	r3, [r5, #0]
 8004dbc:	e7c9      	b.n	8004d52 <HAL_RCC_OscConfig+0xaa>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	4a80      	ldr	r2, [pc, #512]	@ (8004fc4 <HAL_RCC_OscConfig+0x31c>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	602b      	str	r3, [r5, #0]
 8004dc6:	682b      	ldr	r3, [r5, #0]
 8004dc8:	4a7f      	ldr	r2, [pc, #508]	@ (8004fc8 <HAL_RCC_OscConfig+0x320>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	e7c5      	b.n	8004d5a <HAL_RCC_OscConfig+0xb2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004dce:	220c      	movs	r2, #12
 8004dd0:	4d7b      	ldr	r5, [pc, #492]	@ (8004fc0 <HAL_RCC_OscConfig+0x318>)
 8004dd2:	686b      	ldr	r3, [r5, #4]
 8004dd4:	4213      	tst	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <HAL_RCC_OscConfig+0x148>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004dd8:	686b      	ldr	r3, [r5, #4]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d115      	bne.n	8004e0c <HAL_RCC_OscConfig+0x164>
 8004de0:	22c0      	movs	r2, #192	@ 0xc0
 8004de2:	686b      	ldr	r3, [r5, #4]
 8004de4:	0252      	lsls	r2, r2, #9
 8004de6:	4013      	ands	r3, r2
 8004de8:	2280      	movs	r2, #128	@ 0x80
 8004dea:	0212      	lsls	r2, r2, #8
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10d      	bne.n	8004e0c <HAL_RCC_OscConfig+0x164>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	079b      	lsls	r3, r3, #30
 8004df4:	d502      	bpl.n	8004dfc <HAL_RCC_OscConfig+0x154>
 8004df6:	68e3      	ldr	r3, [r4, #12]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d1a5      	bne.n	8004d48 <HAL_RCC_OscConfig+0xa0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfc:	21f8      	movs	r1, #248	@ 0xf8
 8004dfe:	682a      	ldr	r2, [r5, #0]
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	438a      	bics	r2, r1
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4313      	orrs	r3, r2
 8004e08:	602b      	str	r3, [r5, #0]
 8004e0a:	e759      	b.n	8004cc0 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e0c:	68e2      	ldr	r2, [r4, #12]
 8004e0e:	2301      	movs	r3, #1
 8004e10:	2a00      	cmp	r2, #0
 8004e12:	d00f      	beq.n	8004e34 <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_HSI_ENABLE();
 8004e14:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e16:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004e1c:	f7fe f8ca 	bl	8002fb4 <HAL_GetTick>
 8004e20:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e22:	682b      	ldr	r3, [r5, #0]
 8004e24:	423b      	tst	r3, r7
 8004e26:	d1e9      	bne.n	8004dfc <HAL_RCC_OscConfig+0x154>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e28:	f7fe f8c4 	bl	8002fb4 <HAL_GetTick>
 8004e2c:	1b80      	subs	r0, r0, r6
 8004e2e:	2802      	cmp	r0, #2
 8004e30:	d9f7      	bls.n	8004e22 <HAL_RCC_OscConfig+0x17a>
 8004e32:	e7a0      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
        __HAL_RCC_HSI_DISABLE();
 8004e34:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8004e38:	439a      	bics	r2, r3
 8004e3a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8004e3c:	f7fe f8ba 	bl	8002fb4 <HAL_GetTick>
 8004e40:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	423b      	tst	r3, r7
 8004e46:	d100      	bne.n	8004e4a <HAL_RCC_OscConfig+0x1a2>
 8004e48:	e73a      	b.n	8004cc0 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4a:	f7fe f8b3 	bl	8002fb4 <HAL_GetTick>
 8004e4e:	1b80      	subs	r0, r0, r6
 8004e50:	2802      	cmp	r0, #2
 8004e52:	d9f6      	bls.n	8004e42 <HAL_RCC_OscConfig+0x19a>
 8004e54:	e78f      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e56:	69e2      	ldr	r2, [r4, #28]
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4d59      	ldr	r5, [pc, #356]	@ (8004fc0 <HAL_RCC_OscConfig+0x318>)
 8004e5c:	2a00      	cmp	r2, #0
 8004e5e:	d010      	beq.n	8004e82 <HAL_RCC_OscConfig+0x1da>
      __HAL_RCC_LSI_ENABLE();
 8004e60:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e62:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8004e64:	4313      	orrs	r3, r2
 8004e66:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8004e68:	f7fe f8a4 	bl	8002fb4 <HAL_GetTick>
 8004e6c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004e70:	423b      	tst	r3, r7
 8004e72:	d000      	beq.n	8004e76 <HAL_RCC_OscConfig+0x1ce>
 8004e74:	e728      	b.n	8004cc8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e76:	f7fe f89d 	bl	8002fb4 <HAL_GetTick>
 8004e7a:	1b80      	subs	r0, r0, r6
 8004e7c:	2802      	cmp	r0, #2
 8004e7e:	d9f6      	bls.n	8004e6e <HAL_RCC_OscConfig+0x1c6>
 8004e80:	e779      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
      __HAL_RCC_LSI_DISABLE();
 8004e82:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e84:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8004e86:	439a      	bics	r2, r3
 8004e88:	626a      	str	r2, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8004e8a:	f7fe f893 	bl	8002fb4 <HAL_GetTick>
 8004e8e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e90:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8004e92:	423b      	tst	r3, r7
 8004e94:	d100      	bne.n	8004e98 <HAL_RCC_OscConfig+0x1f0>
 8004e96:	e717      	b.n	8004cc8 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e98:	f7fe f88c 	bl	8002fb4 <HAL_GetTick>
 8004e9c:	1b80      	subs	r0, r0, r6
 8004e9e:	2802      	cmp	r0, #2
 8004ea0:	d9f6      	bls.n	8004e90 <HAL_RCC_OscConfig+0x1e8>
 8004ea2:	e768      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea4:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8004ea6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea8:	4d45      	ldr	r5, [pc, #276]	@ (8004fc0 <HAL_RCC_OscConfig+0x318>)
 8004eaa:	0552      	lsls	r2, r2, #21
 8004eac:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8004eae:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb0:	4213      	tst	r3, r2
 8004eb2:	d108      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb4:	69eb      	ldr	r3, [r5, #28]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61eb      	str	r3, [r5, #28]
 8004eba:	69eb      	ldr	r3, [r5, #28]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	9303      	str	r3, [sp, #12]
 8004ec0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec6:	2780      	movs	r7, #128	@ 0x80
 8004ec8:	4e40      	ldr	r6, [pc, #256]	@ (8004fcc <HAL_RCC_OscConfig+0x324>)
 8004eca:	007f      	lsls	r7, r7, #1
 8004ecc:	6833      	ldr	r3, [r6, #0]
 8004ece:	423b      	tst	r3, r7
 8004ed0:	d015      	beq.n	8004efe <HAL_RCC_OscConfig+0x256>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed2:	68a3      	ldr	r3, [r4, #8]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d122      	bne.n	8004f1e <HAL_RCC_OscConfig+0x276>
 8004ed8:	6a2a      	ldr	r2, [r5, #32]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004ede:	f7fe f869 	bl	8002fb4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8004ee4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee6:	6a2b      	ldr	r3, [r5, #32]
 8004ee8:	423b      	tst	r3, r7
 8004eea:	d03f      	beq.n	8004f6c <HAL_RCC_OscConfig+0x2c4>
    if(pwrclkchanged == SET)
 8004eec:	9b00      	ldr	r3, [sp, #0]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d000      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x24c>
 8004ef2:	e6ed      	b.n	8004cd0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef4:	69eb      	ldr	r3, [r5, #28]
 8004ef6:	4a36      	ldr	r2, [pc, #216]	@ (8004fd0 <HAL_RCC_OscConfig+0x328>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61eb      	str	r3, [r5, #28]
 8004efc:	e6e8      	b.n	8004cd0 <HAL_RCC_OscConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efe:	6833      	ldr	r3, [r6, #0]
 8004f00:	433b      	orrs	r3, r7
 8004f02:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004f04:	f7fe f856 	bl	8002fb4 <HAL_GetTick>
 8004f08:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0a:	6833      	ldr	r3, [r6, #0]
 8004f0c:	423b      	tst	r3, r7
 8004f0e:	d1e0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f10:	f7fe f850 	bl	8002fb4 <HAL_GetTick>
 8004f14:	9b01      	ldr	r3, [sp, #4]
 8004f16:	1ac0      	subs	r0, r0, r3
 8004f18:	2864      	cmp	r0, #100	@ 0x64
 8004f1a:	d9f6      	bls.n	8004f0a <HAL_RCC_OscConfig+0x262>
 8004f1c:	e72b      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f1e:	2201      	movs	r2, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d114      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2a6>
 8004f24:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f26:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f28:	4393      	bics	r3, r2
 8004f2a:	622b      	str	r3, [r5, #32]
 8004f2c:	6a2b      	ldr	r3, [r5, #32]
 8004f2e:	3203      	adds	r2, #3
 8004f30:	4393      	bics	r3, r2
 8004f32:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004f34:	f7fe f83e 	bl	8002fb4 <HAL_GetTick>
 8004f38:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3a:	6a2b      	ldr	r3, [r5, #32]
 8004f3c:	423b      	tst	r3, r7
 8004f3e:	d0d5      	beq.n	8004eec <HAL_RCC_OscConfig+0x244>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f40:	f7fe f838 	bl	8002fb4 <HAL_GetTick>
 8004f44:	4b23      	ldr	r3, [pc, #140]	@ (8004fd4 <HAL_RCC_OscConfig+0x32c>)
 8004f46:	1b80      	subs	r0, r0, r6
 8004f48:	4298      	cmp	r0, r3
 8004f4a:	d9f6      	bls.n	8004f3a <HAL_RCC_OscConfig+0x292>
 8004f4c:	e713      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4e:	2b05      	cmp	r3, #5
 8004f50:	d105      	bne.n	8004f5e <HAL_RCC_OscConfig+0x2b6>
 8004f52:	6a29      	ldr	r1, [r5, #32]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	430b      	orrs	r3, r1
 8004f58:	622b      	str	r3, [r5, #32]
 8004f5a:	6a2b      	ldr	r3, [r5, #32]
 8004f5c:	e7bd      	b.n	8004eda <HAL_RCC_OscConfig+0x232>
 8004f5e:	6a2b      	ldr	r3, [r5, #32]
 8004f60:	4393      	bics	r3, r2
 8004f62:	2204      	movs	r2, #4
 8004f64:	622b      	str	r3, [r5, #32]
 8004f66:	6a2b      	ldr	r3, [r5, #32]
 8004f68:	4393      	bics	r3, r2
 8004f6a:	e7b7      	b.n	8004edc <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f6c:	f7fe f822 	bl	8002fb4 <HAL_GetTick>
 8004f70:	4b18      	ldr	r3, [pc, #96]	@ (8004fd4 <HAL_RCC_OscConfig+0x32c>)
 8004f72:	1b80      	subs	r0, r0, r6
 8004f74:	4298      	cmp	r0, r3
 8004f76:	d9b6      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x23e>
 8004f78:	e6fd      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f7a:	f7fe f81b 	bl	8002fb4 <HAL_GetTick>
 8004f7e:	1b80      	subs	r0, r0, r6
 8004f80:	2802      	cmp	r0, #2
 8004f82:	d800      	bhi.n	8004f86 <HAL_RCC_OscConfig+0x2de>
 8004f84:	e6b7      	b.n	8004cf6 <HAL_RCC_OscConfig+0x4e>
 8004f86:	e6f6      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004f88:	3205      	adds	r2, #5
 8004f8a:	d103      	bne.n	8004f94 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSI14ADC_ENABLE();
 8004f8c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 8004f8e:	439a      	bics	r2, r3
 8004f90:	636a      	str	r2, [r5, #52]	@ 0x34
 8004f92:	e6b4      	b.n	8004cfe <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f94:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004f96:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f98:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8004f9a:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f9c:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8004f9e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004fa0:	4393      	bics	r3, r2
 8004fa2:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8004fa4:	f7fe f806 	bl	8002fb4 <HAL_GetTick>
 8004fa8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004faa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8004fac:	423b      	tst	r3, r7
 8004fae:	d100      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x30a>
 8004fb0:	e6ac      	b.n	8004d0c <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004fb2:	f7fd ffff 	bl	8002fb4 <HAL_GetTick>
 8004fb6:	1b80      	subs	r0, r0, r6
 8004fb8:	2802      	cmp	r0, #2
 8004fba:	d9f6      	bls.n	8004faa <HAL_RCC_OscConfig+0x302>
 8004fbc:	e6db      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	fffeffff 	.word	0xfffeffff
 8004fc8:	fffbffff 	.word	0xfffbffff
 8004fcc:	40007000 	.word	0x40007000
 8004fd0:	efffffff 	.word	0xefffffff
 8004fd4:	00001388 	.word	0x00001388
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fd8:	210c      	movs	r1, #12
 8004fda:	4d34      	ldr	r5, [pc, #208]	@ (80050ac <HAL_RCC_OscConfig+0x404>)
 8004fdc:	686a      	ldr	r2, [r5, #4]
 8004fde:	400a      	ands	r2, r1
 8004fe0:	2a08      	cmp	r2, #8
 8004fe2:	d047      	beq.n	8005074 <HAL_RCC_OscConfig+0x3cc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe4:	4a32      	ldr	r2, [pc, #200]	@ (80050b0 <HAL_RCC_OscConfig+0x408>)
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d132      	bne.n	8005050 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 8004fea:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fec:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8004fee:	4013      	ands	r3, r2
 8004ff0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004ff2:	f7fd ffdf 	bl	8002fb4 <HAL_GetTick>
 8004ff6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff8:	04bf      	lsls	r7, r7, #18
 8004ffa:	682b      	ldr	r3, [r5, #0]
 8004ffc:	423b      	tst	r3, r7
 8004ffe:	d121      	bne.n	8005044 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005000:	220f      	movs	r2, #15
 8005002:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005004:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005006:	4393      	bics	r3, r2
 8005008:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800500a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800500c:	4313      	orrs	r3, r2
 800500e:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8005010:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005012:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005014:	686a      	ldr	r2, [r5, #4]
 8005016:	430b      	orrs	r3, r1
 8005018:	4926      	ldr	r1, [pc, #152]	@ (80050b4 <HAL_RCC_OscConfig+0x40c>)
 800501a:	400a      	ands	r2, r1
 800501c:	4313      	orrs	r3, r2
 800501e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8005020:	2380      	movs	r3, #128	@ 0x80
 8005022:	682a      	ldr	r2, [r5, #0]
 8005024:	045b      	lsls	r3, r3, #17
 8005026:	4313      	orrs	r3, r2
 8005028:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800502a:	f7fd ffc3 	bl	8002fb4 <HAL_GetTick>
 800502e:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	4233      	tst	r3, r6
 8005034:	d000      	beq.n	8005038 <HAL_RCC_OscConfig+0x390>
 8005036:	e66d      	b.n	8004d14 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005038:	f7fd ffbc 	bl	8002fb4 <HAL_GetTick>
 800503c:	1b00      	subs	r0, r0, r4
 800503e:	2802      	cmp	r0, #2
 8005040:	d9f6      	bls.n	8005030 <HAL_RCC_OscConfig+0x388>
 8005042:	e698      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005044:	f7fd ffb6 	bl	8002fb4 <HAL_GetTick>
 8005048:	1b80      	subs	r0, r0, r6
 800504a:	2802      	cmp	r0, #2
 800504c:	d9d5      	bls.n	8004ffa <HAL_RCC_OscConfig+0x352>
 800504e:	e692      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
        __HAL_RCC_PLL_DISABLE();
 8005050:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005052:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8005054:	4013      	ands	r3, r2
 8005056:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005058:	f7fd ffac 	bl	8002fb4 <HAL_GetTick>
 800505c:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800505e:	04b6      	lsls	r6, r6, #18
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	4233      	tst	r3, r6
 8005064:	d100      	bne.n	8005068 <HAL_RCC_OscConfig+0x3c0>
 8005066:	e655      	b.n	8004d14 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005068:	f7fd ffa4 	bl	8002fb4 <HAL_GetTick>
 800506c:	1b00      	subs	r0, r0, r4
 800506e:	2802      	cmp	r0, #2
 8005070:	d9f6      	bls.n	8005060 <HAL_RCC_OscConfig+0x3b8>
 8005072:	e680      	b.n	8004d76 <HAL_RCC_OscConfig+0xce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005074:	2b01      	cmp	r3, #1
 8005076:	d100      	bne.n	800507a <HAL_RCC_OscConfig+0x3d2>
 8005078:	e666      	b.n	8004d48 <HAL_RCC_OscConfig+0xa0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800507a:	22c0      	movs	r2, #192	@ 0xc0
        pll_config  = RCC->CFGR;
 800507c:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800507e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005080:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 8005082:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005084:	4002      	ands	r2, r0
 8005086:	428a      	cmp	r2, r1
 8005088:	d000      	beq.n	800508c <HAL_RCC_OscConfig+0x3e4>
 800508a:	e65d      	b.n	8004d48 <HAL_RCC_OscConfig+0xa0>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800508c:	220f      	movs	r2, #15
 800508e:	4013      	ands	r3, r2
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005090:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005092:	4293      	cmp	r3, r2
 8005094:	d000      	beq.n	8005098 <HAL_RCC_OscConfig+0x3f0>
 8005096:	e657      	b.n	8004d48 <HAL_RCC_OscConfig+0xa0>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005098:	23f0      	movs	r3, #240	@ 0xf0
 800509a:	039b      	lsls	r3, r3, #14
 800509c:	4018      	ands	r0, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800509e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80050a0:	1ac0      	subs	r0, r0, r3
 80050a2:	1e43      	subs	r3, r0, #1
 80050a4:	4198      	sbcs	r0, r3
 80050a6:	b2c0      	uxtb	r0, r0
 80050a8:	e666      	b.n	8004d78 <HAL_RCC_OscConfig+0xd0>
 80050aa:	46c0      	nop			@ (mov r8, r8)
 80050ac:	40021000 	.word	0x40021000
 80050b0:	feffffff 	.word	0xfeffffff
 80050b4:	ffc27fff 	.word	0xffc27fff

080050b8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050b8:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80050ba:	4a0b      	ldr	r2, [pc, #44]	@ (80050e8 <HAL_RCC_GetSysClockFreq+0x30>)
{
 80050bc:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 80050be:	6854      	ldr	r4, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80050c0:	4023      	ands	r3, r4
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d10d      	bne.n	80050e2 <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80050c6:	250f      	movs	r5, #15
 80050c8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80050ca:	4a08      	ldr	r2, [pc, #32]	@ (80050ec <HAL_RCC_GetSysClockFreq+0x34>)
 80050cc:	402b      	ands	r3, r5
 80050ce:	5cd1      	ldrb	r1, [r2, r3]
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050d0:	4807      	ldr	r0, [pc, #28]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x38>)
 80050d2:	f7fb f849 	bl	8000168 <__udivsi3>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80050d6:	0ca4      	lsrs	r4, r4, #18
 80050d8:	4b06      	ldr	r3, [pc, #24]	@ (80050f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80050da:	402c      	ands	r4, r5
 80050dc:	5d1b      	ldrb	r3, [r3, r4]
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050de:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80050e0:	bd70      	pop	{r4, r5, r6, pc}
      sysclockfreq = HSE_VALUE;
 80050e2:	4803      	ldr	r0, [pc, #12]	@ (80050f0 <HAL_RCC_GetSysClockFreq+0x38>)
  return sysclockfreq;
 80050e4:	e7fc      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0x28>
 80050e6:	46c0      	nop			@ (mov r8, r8)
 80050e8:	40021000 	.word	0x40021000
 80050ec:	08008b04 	.word	0x08008b04
 80050f0:	007a1200 	.word	0x007a1200
 80050f4:	08008b14 	.word	0x08008b14

080050f8 <HAL_RCC_ClockConfig>:
{
 80050f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050fa:	0004      	movs	r4, r0
 80050fc:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80050fe:	2800      	cmp	r0, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8005102:	2001      	movs	r0, #1
}
 8005104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005106:	2201      	movs	r2, #1
 8005108:	4d37      	ldr	r5, [pc, #220]	@ (80051e8 <HAL_RCC_ClockConfig+0xf0>)
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	4013      	ands	r3, r2
 800510e:	428b      	cmp	r3, r1
 8005110:	d31c      	bcc.n	800514c <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	0793      	lsls	r3, r2, #30
 8005116:	d422      	bmi.n	800515e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005118:	07d2      	lsls	r2, r2, #31
 800511a:	d42f      	bmi.n	800517c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511c:	2301      	movs	r3, #1
 800511e:	682a      	ldr	r2, [r5, #0]
 8005120:	401a      	ands	r2, r3
 8005122:	42b2      	cmp	r2, r6
 8005124:	d851      	bhi.n	80051ca <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	4d30      	ldr	r5, [pc, #192]	@ (80051ec <HAL_RCC_ClockConfig+0xf4>)
 800512a:	075b      	lsls	r3, r3, #29
 800512c:	d454      	bmi.n	80051d8 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800512e:	f7ff ffc3 	bl	80050b8 <HAL_RCC_GetSysClockFreq>
 8005132:	686b      	ldr	r3, [r5, #4]
 8005134:	4a2e      	ldr	r2, [pc, #184]	@ (80051f0 <HAL_RCC_ClockConfig+0xf8>)
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	0f1b      	lsrs	r3, r3, #28
 800513a:	5cd3      	ldrb	r3, [r2, r3]
 800513c:	492d      	ldr	r1, [pc, #180]	@ (80051f4 <HAL_RCC_ClockConfig+0xfc>)
 800513e:	40d8      	lsrs	r0, r3
 8005140:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8005142:	2003      	movs	r0, #3
 8005144:	f7fd fef6 	bl	8002f34 <HAL_InitTick>
  return HAL_OK;
 8005148:	2000      	movs	r0, #0
 800514a:	e7db      	b.n	8005104 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	4393      	bics	r3, r2
 8005150:	430b      	orrs	r3, r1
 8005152:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005154:	682b      	ldr	r3, [r5, #0]
 8005156:	4013      	ands	r3, r2
 8005158:	428b      	cmp	r3, r1
 800515a:	d1d2      	bne.n	8005102 <HAL_RCC_ClockConfig+0xa>
 800515c:	e7d9      	b.n	8005112 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515e:	4923      	ldr	r1, [pc, #140]	@ (80051ec <HAL_RCC_ClockConfig+0xf4>)
 8005160:	0753      	lsls	r3, r2, #29
 8005162:	d504      	bpl.n	800516e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005164:	23e0      	movs	r3, #224	@ 0xe0
 8005166:	6848      	ldr	r0, [r1, #4]
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	4303      	orrs	r3, r0
 800516c:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800516e:	20f0      	movs	r0, #240	@ 0xf0
 8005170:	684b      	ldr	r3, [r1, #4]
 8005172:	4383      	bics	r3, r0
 8005174:	68a0      	ldr	r0, [r4, #8]
 8005176:	4303      	orrs	r3, r0
 8005178:	604b      	str	r3, [r1, #4]
 800517a:	e7cd      	b.n	8005118 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517c:	4f1b      	ldr	r7, [pc, #108]	@ (80051ec <HAL_RCC_ClockConfig+0xf4>)
 800517e:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005180:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005182:	2a01      	cmp	r2, #1
 8005184:	d119      	bne.n	80051ba <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005186:	039b      	lsls	r3, r3, #14
 8005188:	d5bb      	bpl.n	8005102 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800518a:	2103      	movs	r1, #3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	438b      	bics	r3, r1
 8005190:	4313      	orrs	r3, r2
 8005192:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8005194:	f7fd ff0e 	bl	8002fb4 <HAL_GetTick>
 8005198:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519a:	230c      	movs	r3, #12
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	401a      	ands	r2, r3
 80051a0:	6863      	ldr	r3, [r4, #4]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d0b9      	beq.n	800511c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a8:	f7fd ff04 	bl	8002fb4 <HAL_GetTick>
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	1ac0      	subs	r0, r0, r3
 80051b0:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <HAL_RCC_ClockConfig+0x100>)
 80051b2:	4298      	cmp	r0, r3
 80051b4:	d9f1      	bls.n	800519a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80051b6:	2003      	movs	r0, #3
 80051b8:	e7a4      	b.n	8005104 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ba:	2a02      	cmp	r2, #2
 80051bc:	d102      	bne.n	80051c4 <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051be:	019b      	lsls	r3, r3, #6
 80051c0:	d4e3      	bmi.n	800518a <HAL_RCC_ClockConfig+0x92>
 80051c2:	e79e      	b.n	8005102 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c4:	079b      	lsls	r3, r3, #30
 80051c6:	d4e0      	bmi.n	800518a <HAL_RCC_ClockConfig+0x92>
 80051c8:	e79b      	b.n	8005102 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ca:	682a      	ldr	r2, [r5, #0]
 80051cc:	439a      	bics	r2, r3
 80051ce:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051d0:	682a      	ldr	r2, [r5, #0]
 80051d2:	421a      	tst	r2, r3
 80051d4:	d0a7      	beq.n	8005126 <HAL_RCC_ClockConfig+0x2e>
 80051d6:	e794      	b.n	8005102 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051d8:	686b      	ldr	r3, [r5, #4]
 80051da:	4a08      	ldr	r2, [pc, #32]	@ (80051fc <HAL_RCC_ClockConfig+0x104>)
 80051dc:	4013      	ands	r3, r2
 80051de:	68e2      	ldr	r2, [r4, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	606b      	str	r3, [r5, #4]
 80051e4:	e7a3      	b.n	800512e <HAL_RCC_ClockConfig+0x36>
 80051e6:	46c0      	nop			@ (mov r8, r8)
 80051e8:	40022000 	.word	0x40022000
 80051ec:	40021000 	.word	0x40021000
 80051f0:	08008af4 	.word	0x08008af4
 80051f4:	2000001c 	.word	0x2000001c
 80051f8:	00001388 	.word	0x00001388
 80051fc:	fffff8ff 	.word	0xfffff8ff

08005200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005200:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005202:	6803      	ldr	r3, [r0, #0]
{
 8005204:	0005      	movs	r5, r0
 8005206:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005208:	03db      	lsls	r3, r3, #15
 800520a:	d52b      	bpl.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x64>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520c:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 800520e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005210:	4c3d      	ldr	r4, [pc, #244]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005212:	0552      	lsls	r2, r2, #21
 8005214:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8005216:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005218:	4213      	tst	r3, r2
 800521a:	d108      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800521c:	69e3      	ldr	r3, [r4, #28]
 800521e:	4313      	orrs	r3, r2
 8005220:	61e3      	str	r3, [r4, #28]
 8005222:	69e3      	ldr	r3, [r4, #28]
 8005224:	4013      	ands	r3, r2
 8005226:	9303      	str	r3, [sp, #12]
 8005228:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800522a:	2301      	movs	r3, #1
 800522c:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522e:	2780      	movs	r7, #128	@ 0x80
 8005230:	4e36      	ldr	r6, [pc, #216]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005232:	007f      	lsls	r7, r7, #1
 8005234:	6833      	ldr	r3, [r6, #0]
 8005236:	423b      	tst	r3, r7
 8005238:	d02b      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x92>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800523a:	6a21      	ldr	r1, [r4, #32]
 800523c:	22c0      	movs	r2, #192	@ 0xc0
 800523e:	0008      	movs	r0, r1
 8005240:	0092      	lsls	r2, r2, #2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005242:	686b      	ldr	r3, [r5, #4]
 8005244:	4e32      	ldr	r6, [pc, #200]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x110>)
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005246:	4010      	ands	r0, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005248:	4211      	tst	r1, r2
 800524a:	d134      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800524c:	6a23      	ldr	r3, [r4, #32]
 800524e:	686a      	ldr	r2, [r5, #4]
 8005250:	4033      	ands	r3, r6
 8005252:	4313      	orrs	r3, r2
 8005254:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005256:	9b00      	ldr	r3, [sp, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d103      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800525c:	69e3      	ldr	r3, [r4, #28]
 800525e:	4a2d      	ldr	r2, [pc, #180]	@ (8005314 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8005260:	4013      	ands	r3, r2
 8005262:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005264:	682a      	ldr	r2, [r5, #0]
 8005266:	07d3      	lsls	r3, r2, #31
 8005268:	d506      	bpl.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800526a:	2003      	movs	r0, #3
 800526c:	4926      	ldr	r1, [pc, #152]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800526e:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8005270:	4383      	bics	r3, r0
 8005272:	68a8      	ldr	r0, [r5, #8]
 8005274:	4303      	orrs	r3, r0
 8005276:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005278:	0693      	lsls	r3, r2, #26
 800527a:	d506      	bpl.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800527c:	2010      	movs	r0, #16
 800527e:	4922      	ldr	r1, [pc, #136]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005280:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8005282:	4383      	bics	r3, r0
 8005284:	68e8      	ldr	r0, [r5, #12]
 8005286:	4303      	orrs	r3, r0
 8005288:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800528a:	0392      	lsls	r2, r2, #14
 800528c:	d433      	bmi.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800528e:	2000      	movs	r0, #0
 8005290:	e00f      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005292:	6833      	ldr	r3, [r6, #0]
 8005294:	433b      	orrs	r3, r7
 8005296:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005298:	f7fd fe8c 	bl	8002fb4 <HAL_GetTick>
 800529c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800529e:	6833      	ldr	r3, [r6, #0]
 80052a0:	423b      	tst	r3, r7
 80052a2:	d1ca      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052a4:	f7fd fe86 	bl	8002fb4 <HAL_GetTick>
 80052a8:	9b01      	ldr	r3, [sp, #4]
 80052aa:	1ac0      	subs	r0, r0, r3
 80052ac:	2864      	cmp	r0, #100	@ 0x64
 80052ae:	d9f6      	bls.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x9e>
          return HAL_TIMEOUT;
 80052b0:	2003      	movs	r0, #3
}
 80052b2:	b005      	add	sp, #20
 80052b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052b6:	4013      	ands	r3, r2
 80052b8:	4283      	cmp	r3, r0
 80052ba:	d0c7      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 80052bc:	2280      	movs	r2, #128	@ 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052be:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80052c0:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052c2:	0019      	movs	r1, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80052c4:	0252      	lsls	r2, r2, #9
 80052c6:	4302      	orrs	r2, r0
 80052c8:	6222      	str	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052ca:	6a22      	ldr	r2, [r4, #32]
 80052cc:	4812      	ldr	r0, [pc, #72]	@ (8005318 <HAL_RCCEx_PeriphCLKConfig+0x118>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ce:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052d0:	4002      	ands	r2, r0
 80052d2:	6222      	str	r2, [r4, #32]
      RCC->BDCR = temp_reg;
 80052d4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80052d6:	07db      	lsls	r3, r3, #31
 80052d8:	d5b8      	bpl.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 80052da:	f7fd fe6b 	bl	8002fb4 <HAL_GetTick>
 80052de:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e0:	2202      	movs	r2, #2
 80052e2:	6a23      	ldr	r3, [r4, #32]
 80052e4:	4213      	tst	r3, r2
 80052e6:	d1b1      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e8:	f7fd fe64 	bl	8002fb4 <HAL_GetTick>
 80052ec:	4b0b      	ldr	r3, [pc, #44]	@ (800531c <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80052ee:	1bc0      	subs	r0, r0, r7
 80052f0:	4298      	cmp	r0, r3
 80052f2:	d9f5      	bls.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80052f4:	e7dc      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052f6:	2180      	movs	r1, #128	@ 0x80
 80052f8:	4a03      	ldr	r2, [pc, #12]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80052fa:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80052fc:	438b      	bics	r3, r1
 80052fe:	6929      	ldr	r1, [r5, #16]
 8005300:	430b      	orrs	r3, r1
 8005302:	6313      	str	r3, [r2, #48]	@ 0x30
 8005304:	e7c3      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	40021000 	.word	0x40021000
 800530c:	40007000 	.word	0x40007000
 8005310:	fffffcff 	.word	0xfffffcff
 8005314:	efffffff 	.word	0xefffffff
 8005318:	fffeffff 	.word	0xfffeffff
 800531c:	00001388 	.word	0x00001388

08005320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005320:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005322:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8005324:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005326:	6a02      	ldr	r2, [r0, #32]
 8005328:	43a2      	bics	r2, r4
 800532a:	6202      	str	r2, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800532c:	2273      	movs	r2, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 800532e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005330:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005332:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005334:	680a      	ldr	r2, [r1, #0]
 8005336:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005338:	2202      	movs	r2, #2
 800533a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800533c:	688a      	ldr	r2, [r1, #8]
 800533e:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005340:	4a0e      	ldr	r2, [pc, #56]	@ (800537c <TIM_OC1_SetConfig+0x5c>)
 8005342:	4290      	cmp	r0, r2
 8005344:	d008      	beq.n	8005358 <TIM_OC1_SetConfig+0x38>
 8005346:	4a0e      	ldr	r2, [pc, #56]	@ (8005380 <TIM_OC1_SetConfig+0x60>)
 8005348:	4290      	cmp	r0, r2
 800534a:	d005      	beq.n	8005358 <TIM_OC1_SetConfig+0x38>
 800534c:	4a0d      	ldr	r2, [pc, #52]	@ (8005384 <TIM_OC1_SetConfig+0x64>)
 800534e:	4290      	cmp	r0, r2
 8005350:	d002      	beq.n	8005358 <TIM_OC1_SetConfig+0x38>
 8005352:	4a0d      	ldr	r2, [pc, #52]	@ (8005388 <TIM_OC1_SetConfig+0x68>)
 8005354:	4290      	cmp	r0, r2
 8005356:	d10b      	bne.n	8005370 <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005358:	2208      	movs	r2, #8
 800535a:	4393      	bics	r3, r2
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800535c:	68ca      	ldr	r2, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800535e:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8005360:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8005362:	2204      	movs	r2, #4
 8005364:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005366:	4a09      	ldr	r2, [pc, #36]	@ (800538c <TIM_OC1_SetConfig+0x6c>)
 8005368:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800536a:	694c      	ldr	r4, [r1, #20]
 800536c:	4334      	orrs	r4, r6
 800536e:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005370:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005372:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005374:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005376:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005378:	6203      	str	r3, [r0, #32]
}
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800
 800538c:	fffffcff 	.word	0xfffffcff

08005390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005392:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <TIM_OC3_SetConfig+0x64>)
  tmpccer = TIMx->CCER;
 8005394:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005396:	6a03      	ldr	r3, [r0, #32]
 8005398:	4013      	ands	r3, r2
 800539a:	6203      	str	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800539c:	2373      	movs	r3, #115	@ 0x73
  tmpcr2 =  TIMx->CR2;
 800539e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80053a0:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a2:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a4:	680b      	ldr	r3, [r1, #0]
 80053a6:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053a8:	4b13      	ldr	r3, [pc, #76]	@ (80053f8 <TIM_OC3_SetConfig+0x68>)
 80053aa:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053ac:	688b      	ldr	r3, [r1, #8]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053b2:	4d12      	ldr	r5, [pc, #72]	@ (80053fc <TIM_OC3_SetConfig+0x6c>)
 80053b4:	42a8      	cmp	r0, r5
 80053b6:	d10e      	bne.n	80053d6 <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053b8:	4d11      	ldr	r5, [pc, #68]	@ (8005400 <TIM_OC3_SetConfig+0x70>)
 80053ba:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053bc:	68cb      	ldr	r3, [r1, #12]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053c2:	4d10      	ldr	r5, [pc, #64]	@ (8005404 <TIM_OC3_SetConfig+0x74>)
 80053c4:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053c6:	4d10      	ldr	r5, [pc, #64]	@ (8005408 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053c8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ca:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053cc:	694a      	ldr	r2, [r1, #20]
 80053ce:	4332      	orrs	r2, r6
 80053d0:	0112      	lsls	r2, r2, #4
 80053d2:	432a      	orrs	r2, r5
 80053d4:	e008      	b.n	80053e8 <TIM_OC3_SetConfig+0x58>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053d6:	4d0d      	ldr	r5, [pc, #52]	@ (800540c <TIM_OC3_SetConfig+0x7c>)
 80053d8:	42a8      	cmp	r0, r5
 80053da:	d0f4      	beq.n	80053c6 <TIM_OC3_SetConfig+0x36>
 80053dc:	4d0c      	ldr	r5, [pc, #48]	@ (8005410 <TIM_OC3_SetConfig+0x80>)
 80053de:	42a8      	cmp	r0, r5
 80053e0:	d0f1      	beq.n	80053c6 <TIM_OC3_SetConfig+0x36>
 80053e2:	4d0c      	ldr	r5, [pc, #48]	@ (8005414 <TIM_OC3_SetConfig+0x84>)
 80053e4:	42a8      	cmp	r0, r5
 80053e6:	d0ee      	beq.n	80053c6 <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ea:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80053ec:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80053ee:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f0:	6203      	str	r3, [r0, #32]
}
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	fffffeff 	.word	0xfffffeff
 80053f8:	fffffdff 	.word	0xfffffdff
 80053fc:	40012c00 	.word	0x40012c00
 8005400:	fffff7ff 	.word	0xfffff7ff
 8005404:	fffffbff 	.word	0xfffffbff
 8005408:	ffffcfff 	.word	0xffffcfff
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800541a:	4a14      	ldr	r2, [pc, #80]	@ (800546c <TIM_OC4_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 800541c:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800541e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005420:	4d13      	ldr	r5, [pc, #76]	@ (8005470 <TIM_OC4_SetConfig+0x58>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005422:	4013      	ands	r3, r2
 8005424:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005426:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8005428:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800542a:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800542c:	680d      	ldr	r5, [r1, #0]
 800542e:	022d      	lsls	r5, r5, #8
 8005430:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005432:	4a10      	ldr	r2, [pc, #64]	@ (8005474 <TIM_OC4_SetConfig+0x5c>)
 8005434:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005436:	688a      	ldr	r2, [r1, #8]
 8005438:	0312      	lsls	r2, r2, #12
 800543a:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800543c:	4c0e      	ldr	r4, [pc, #56]	@ (8005478 <TIM_OC4_SetConfig+0x60>)
 800543e:	42a0      	cmp	r0, r4
 8005440:	d008      	beq.n	8005454 <TIM_OC4_SetConfig+0x3c>
 8005442:	4c0e      	ldr	r4, [pc, #56]	@ (800547c <TIM_OC4_SetConfig+0x64>)
 8005444:	42a0      	cmp	r0, r4
 8005446:	d005      	beq.n	8005454 <TIM_OC4_SetConfig+0x3c>
 8005448:	4c0d      	ldr	r4, [pc, #52]	@ (8005480 <TIM_OC4_SetConfig+0x68>)
 800544a:	42a0      	cmp	r0, r4
 800544c:	d002      	beq.n	8005454 <TIM_OC4_SetConfig+0x3c>
 800544e:	4c0d      	ldr	r4, [pc, #52]	@ (8005484 <TIM_OC4_SetConfig+0x6c>)
 8005450:	42a0      	cmp	r0, r4
 8005452:	d104      	bne.n	800545e <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005454:	4c0c      	ldr	r4, [pc, #48]	@ (8005488 <TIM_OC4_SetConfig+0x70>)
 8005456:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005458:	694b      	ldr	r3, [r1, #20]
 800545a:	019b      	lsls	r3, r3, #6
 800545c:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800545e:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005460:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005462:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005464:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005466:	6202      	str	r2, [r0, #32]
}
 8005468:	bd30      	pop	{r4, r5, pc}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	ffffefff 	.word	0xffffefff
 8005470:	ffff8cff 	.word	0xffff8cff
 8005474:	ffffdfff 	.word	0xffffdfff
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40014000 	.word	0x40014000
 8005480:	40014400 	.word	0x40014400
 8005484:	40014800 	.word	0x40014800
 8005488:	ffffbfff 	.word	0xffffbfff

0800548c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800548c:	0001      	movs	r1, r0
{
 800548e:	0003      	movs	r3, r0
    return HAL_ERROR;
 8005490:	2001      	movs	r0, #1
{
 8005492:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8005494:	313d      	adds	r1, #61	@ 0x3d
 8005496:	780c      	ldrb	r4, [r1, #0]
 8005498:	b2e2      	uxtb	r2, r4
 800549a:	4284      	cmp	r4, r0
 800549c:	d115      	bne.n	80054ca <HAL_TIM_Base_Start+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 800549e:	1800      	adds	r0, r0, r0
 80054a0:	7008      	strb	r0, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	490a      	ldr	r1, [pc, #40]	@ (80054d0 <HAL_TIM_Base_Start+0x44>)
 80054a6:	428b      	cmp	r3, r1
 80054a8:	d005      	beq.n	80054b6 <HAL_TIM_Base_Start+0x2a>
 80054aa:	490a      	ldr	r1, [pc, #40]	@ (80054d4 <HAL_TIM_Base_Start+0x48>)
 80054ac:	428b      	cmp	r3, r1
 80054ae:	d002      	beq.n	80054b6 <HAL_TIM_Base_Start+0x2a>
 80054b0:	4909      	ldr	r1, [pc, #36]	@ (80054d8 <HAL_TIM_Base_Start+0x4c>)
 80054b2:	428b      	cmp	r3, r1
 80054b4:	d10a      	bne.n	80054cc <HAL_TIM_Base_Start+0x40>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b6:	2107      	movs	r1, #7
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	2a06      	cmp	r2, #6
 80054be:	d003      	beq.n	80054c8 <HAL_TIM_Base_Start+0x3c>
      __HAL_TIM_ENABLE(htim);
 80054c0:	2201      	movs	r2, #1
 80054c2:	6819      	ldr	r1, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80054c8:	2000      	movs	r0, #0
}
 80054ca:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 80054cc:	6819      	ldr	r1, [r3, #0]
 80054ce:	e7f9      	b.n	80054c4 <HAL_TIM_Base_Start+0x38>
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40014000 	.word	0x40014000

080054dc <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 80054dc:	4770      	bx	lr
	...

080054e0 <TIM_Base_SetConfig>:
{
 80054e0:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e2:	4c1e      	ldr	r4, [pc, #120]	@ (800555c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 80054e4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054e6:	42a0      	cmp	r0, r4
 80054e8:	d00a      	beq.n	8005500 <TIM_Base_SetConfig+0x20>
 80054ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005560 <TIM_Base_SetConfig+0x80>)
 80054ec:	4290      	cmp	r0, r2
 80054ee:	d007      	beq.n	8005500 <TIM_Base_SetConfig+0x20>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005564 <TIM_Base_SetConfig+0x84>)
 80054f2:	4290      	cmp	r0, r2
 80054f4:	d109      	bne.n	800550a <TIM_Base_SetConfig+0x2a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005568 <TIM_Base_SetConfig+0x88>)
 80054f8:	401a      	ands	r2, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fa:	68cb      	ldr	r3, [r1, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	e00d      	b.n	800551c <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005500:	2270      	movs	r2, #112	@ 0x70
 8005502:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8005504:	684a      	ldr	r2, [r1, #4]
 8005506:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005508:	e7f5      	b.n	80054f6 <TIM_Base_SetConfig+0x16>
 800550a:	4a18      	ldr	r2, [pc, #96]	@ (800556c <TIM_Base_SetConfig+0x8c>)
 800550c:	4290      	cmp	r0, r2
 800550e:	d0f2      	beq.n	80054f6 <TIM_Base_SetConfig+0x16>
 8005510:	4a17      	ldr	r2, [pc, #92]	@ (8005570 <TIM_Base_SetConfig+0x90>)
 8005512:	4290      	cmp	r0, r2
 8005514:	d0ef      	beq.n	80054f6 <TIM_Base_SetConfig+0x16>
 8005516:	4a17      	ldr	r2, [pc, #92]	@ (8005574 <TIM_Base_SetConfig+0x94>)
 8005518:	4290      	cmp	r0, r2
 800551a:	d0ec      	beq.n	80054f6 <TIM_Base_SetConfig+0x16>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800551c:	2280      	movs	r2, #128	@ 0x80
 800551e:	4393      	bics	r3, r2
 8005520:	694a      	ldr	r2, [r1, #20]
 8005522:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005524:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005526:	688b      	ldr	r3, [r1, #8]
 8005528:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800552a:	680b      	ldr	r3, [r1, #0]
 800552c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800552e:	42a0      	cmp	r0, r4
 8005530:	d008      	beq.n	8005544 <TIM_Base_SetConfig+0x64>
 8005532:	4b0e      	ldr	r3, [pc, #56]	@ (800556c <TIM_Base_SetConfig+0x8c>)
 8005534:	4298      	cmp	r0, r3
 8005536:	d005      	beq.n	8005544 <TIM_Base_SetConfig+0x64>
 8005538:	4b0d      	ldr	r3, [pc, #52]	@ (8005570 <TIM_Base_SetConfig+0x90>)
 800553a:	4298      	cmp	r0, r3
 800553c:	d002      	beq.n	8005544 <TIM_Base_SetConfig+0x64>
 800553e:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <TIM_Base_SetConfig+0x94>)
 8005540:	4298      	cmp	r0, r3
 8005542:	d101      	bne.n	8005548 <TIM_Base_SetConfig+0x68>
    TIMx->RCR = Structure->RepetitionCounter;
 8005544:	690b      	ldr	r3, [r1, #16]
 8005546:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005548:	2201      	movs	r2, #1
 800554a:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800554c:	6903      	ldr	r3, [r0, #16]
 800554e:	4213      	tst	r3, r2
 8005550:	d002      	beq.n	8005558 <TIM_Base_SetConfig+0x78>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005552:	6903      	ldr	r3, [r0, #16]
 8005554:	4393      	bics	r3, r2
 8005556:	6103      	str	r3, [r0, #16]
}
 8005558:	bd10      	pop	{r4, pc}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40000400 	.word	0x40000400
 8005564:	40002000 	.word	0x40002000
 8005568:	fffffcff 	.word	0xfffffcff
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800

08005578 <HAL_TIM_Base_Init>:
{
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800557c:	2001      	movs	r0, #1
  if (htim == NULL)
 800557e:	2c00      	cmp	r4, #0
 8005580:	d021      	beq.n	80055c6 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005582:	0025      	movs	r5, r4
 8005584:	353d      	adds	r5, #61	@ 0x3d
 8005586:	782b      	ldrb	r3, [r5, #0]
 8005588:	b2da      	uxtb	r2, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d105      	bne.n	800559a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800558e:	0023      	movs	r3, r4
 8005590:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005592:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8005594:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8005596:	f7fd fb47 	bl	8002c28 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800559a:	2302      	movs	r3, #2
 800559c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559e:	6820      	ldr	r0, [r4, #0]
 80055a0:	1d21      	adds	r1, r4, #4
 80055a2:	f7ff ff9d 	bl	80054e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a6:	0022      	movs	r2, r4
 80055a8:	2301      	movs	r3, #1
  return HAL_OK;
 80055aa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ac:	3246      	adds	r2, #70	@ 0x46
 80055ae:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	3a08      	subs	r2, #8
 80055b4:	7013      	strb	r3, [r2, #0]
 80055b6:	7053      	strb	r3, [r2, #1]
 80055b8:	7093      	strb	r3, [r2, #2]
 80055ba:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	7113      	strb	r3, [r2, #4]
 80055be:	7153      	strb	r3, [r2, #5]
 80055c0:	7193      	strb	r3, [r2, #6]
 80055c2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	702b      	strb	r3, [r5, #0]
}
 80055c6:	bd70      	pop	{r4, r5, r6, pc}

080055c8 <HAL_TIM_PWM_Init>:
{
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	0004      	movs	r4, r0
    return HAL_ERROR;
 80055cc:	2001      	movs	r0, #1
  if (htim == NULL)
 80055ce:	2c00      	cmp	r4, #0
 80055d0:	d021      	beq.n	8005616 <HAL_TIM_PWM_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	0025      	movs	r5, r4
 80055d4:	353d      	adds	r5, #61	@ 0x3d
 80055d6:	782b      	ldrb	r3, [r5, #0]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d105      	bne.n	80055ea <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80055de:	0023      	movs	r3, r4
 80055e0:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80055e2:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80055e4:	701a      	strb	r2, [r3, #0]
    HAL_TIM_PWM_MspInit(htim);
 80055e6:	f7ff ff79 	bl	80054dc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80055ea:	2302      	movs	r3, #2
 80055ec:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ee:	6820      	ldr	r0, [r4, #0]
 80055f0:	1d21      	adds	r1, r4, #4
 80055f2:	f7ff ff75 	bl	80054e0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f6:	0022      	movs	r2, r4
 80055f8:	2301      	movs	r3, #1
  return HAL_OK;
 80055fa:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055fc:	3246      	adds	r2, #70	@ 0x46
 80055fe:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	3445      	adds	r4, #69	@ 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005602:	3a08      	subs	r2, #8
 8005604:	7013      	strb	r3, [r2, #0]
 8005606:	7053      	strb	r3, [r2, #1]
 8005608:	7093      	strb	r3, [r2, #2]
 800560a:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	7113      	strb	r3, [r2, #4]
 800560e:	7153      	strb	r3, [r2, #5]
 8005610:	7193      	strb	r3, [r2, #6]
 8005612:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005614:	702b      	strb	r3, [r5, #0]
}
 8005616:	bd70      	pop	{r4, r5, r6, pc}

08005618 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005618:	2210      	movs	r2, #16
{
 800561a:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 800561c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800561e:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005620:	4c17      	ldr	r4, [pc, #92]	@ (8005680 <TIM_OC2_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005622:	4393      	bics	r3, r2
 8005624:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005626:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005628:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800562a:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800562c:	680c      	ldr	r4, [r1, #0]
 800562e:	0224      	lsls	r4, r4, #8
 8005630:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 8005632:	2320      	movs	r3, #32
 8005634:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005636:	688b      	ldr	r3, [r1, #8]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800563c:	4d11      	ldr	r5, [pc, #68]	@ (8005684 <TIM_OC2_SetConfig+0x6c>)
 800563e:	42a8      	cmp	r0, r5
 8005640:	d10f      	bne.n	8005662 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8005642:	2580      	movs	r5, #128	@ 0x80
 8005644:	43ab      	bics	r3, r5
 8005646:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005648:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 800564a:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005650:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005652:	4d0d      	ldr	r5, [pc, #52]	@ (8005688 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005654:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005656:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005658:	694a      	ldr	r2, [r1, #20]
 800565a:	4332      	orrs	r2, r6
 800565c:	0092      	lsls	r2, r2, #2
 800565e:	432a      	orrs	r2, r5
 8005660:	e008      	b.n	8005674 <TIM_OC2_SetConfig+0x5c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005662:	4d0a      	ldr	r5, [pc, #40]	@ (800568c <TIM_OC2_SetConfig+0x74>)
 8005664:	42a8      	cmp	r0, r5
 8005666:	d0f4      	beq.n	8005652 <TIM_OC2_SetConfig+0x3a>
 8005668:	4d09      	ldr	r5, [pc, #36]	@ (8005690 <TIM_OC2_SetConfig+0x78>)
 800566a:	42a8      	cmp	r0, r5
 800566c:	d0f1      	beq.n	8005652 <TIM_OC2_SetConfig+0x3a>
 800566e:	4d09      	ldr	r5, [pc, #36]	@ (8005694 <TIM_OC2_SetConfig+0x7c>)
 8005670:	42a8      	cmp	r0, r5
 8005672:	d0ee      	beq.n	8005652 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8005674:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8005676:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005678:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800567a:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800567c:	6203      	str	r3, [r0, #32]
}
 800567e:	bd70      	pop	{r4, r5, r6, pc}
 8005680:	ffff8cff 	.word	0xffff8cff
 8005684:	40012c00 	.word	0x40012c00
 8005688:	fffff3ff 	.word	0xfffff3ff
 800568c:	40014000 	.word	0x40014000
 8005690:	40014400 	.word	0x40014400
 8005694:	40014800 	.word	0x40014800

08005698 <HAL_TIM_PWM_ConfigChannel>:
{
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800569a:	0006      	movs	r6, r0
 800569c:	363c      	adds	r6, #60	@ 0x3c
{
 800569e:	0015      	movs	r5, r2
  __HAL_LOCK(htim);
 80056a0:	7832      	ldrb	r2, [r6, #0]
{
 80056a2:	0003      	movs	r3, r0
 80056a4:	000c      	movs	r4, r1
  __HAL_LOCK(htim);
 80056a6:	2002      	movs	r0, #2
 80056a8:	2a01      	cmp	r2, #1
 80056aa:	d00a      	beq.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80056ac:	3801      	subs	r0, #1
 80056ae:	7030      	strb	r0, [r6, #0]
  switch (Channel)
 80056b0:	2d08      	cmp	r5, #8
 80056b2:	d03f      	beq.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x9c>
 80056b4:	d806      	bhi.n	80056c4 <HAL_TIM_PWM_ConfigChannel+0x2c>
 80056b6:	2d00      	cmp	r5, #0
 80056b8:	d019      	beq.n	80056ee <HAL_TIM_PWM_ConfigChannel+0x56>
 80056ba:	2d04      	cmp	r5, #4
 80056bc:	d029      	beq.n	8005712 <HAL_TIM_PWM_ConfigChannel+0x7a>
  __HAL_UNLOCK(htim);
 80056be:	2300      	movs	r3, #0
 80056c0:	7033      	strb	r3, [r6, #0]
}
 80056c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (Channel)
 80056c4:	2d0c      	cmp	r5, #12
 80056c6:	d1fa      	bne.n	80056be <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056c8:	681d      	ldr	r5, [r3, #0]
 80056ca:	0028      	movs	r0, r5
 80056cc:	f7ff fea4 	bl	8005418 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056d0:	2380      	movs	r3, #128	@ 0x80
 80056d2:	69ea      	ldr	r2, [r5, #28]
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	4313      	orrs	r3, r2
 80056d8:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056da:	69eb      	ldr	r3, [r5, #28]
 80056dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005754 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 80056de:	4013      	ands	r3, r2
 80056e0:	61eb      	str	r3, [r5, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056e2:	6923      	ldr	r3, [r4, #16]
 80056e4:	69ea      	ldr	r2, [r5, #28]
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61eb      	str	r3, [r5, #28]
      break;
 80056ec:	e00f      	b.n	800570e <HAL_TIM_PWM_ConfigChannel+0x76>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056ee:	681d      	ldr	r5, [r3, #0]
 80056f0:	0028      	movs	r0, r5
 80056f2:	f7ff fe15 	bl	8005320 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056f6:	2308      	movs	r3, #8
 80056f8:	69aa      	ldr	r2, [r5, #24]
 80056fa:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056fc:	2204      	movs	r2, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056fe:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005700:	69ab      	ldr	r3, [r5, #24]
 8005702:	4393      	bics	r3, r2
 8005704:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005706:	69ab      	ldr	r3, [r5, #24]
 8005708:	6922      	ldr	r2, [r4, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800570a:	4313      	orrs	r3, r2
 800570c:	61ab      	str	r3, [r5, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800570e:	2000      	movs	r0, #0
 8005710:	e7d5      	b.n	80056be <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005712:	681d      	ldr	r5, [r3, #0]
 8005714:	0028      	movs	r0, r5
 8005716:	f7ff ff7f 	bl	8005618 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800571a:	2380      	movs	r3, #128	@ 0x80
 800571c:	69aa      	ldr	r2, [r5, #24]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	4313      	orrs	r3, r2
 8005722:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005724:	69ab      	ldr	r3, [r5, #24]
 8005726:	4a0b      	ldr	r2, [pc, #44]	@ (8005754 <HAL_TIM_PWM_ConfigChannel+0xbc>)
 8005728:	4013      	ands	r3, r2
 800572a:	61ab      	str	r3, [r5, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800572c:	6923      	ldr	r3, [r4, #16]
 800572e:	69aa      	ldr	r2, [r5, #24]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	e7ea      	b.n	800570a <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005734:	681f      	ldr	r7, [r3, #0]
 8005736:	0038      	movs	r0, r7
 8005738:	f7ff fe2a 	bl	8005390 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800573c:	2204      	movs	r2, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	431d      	orrs	r5, r3
 8005742:	61fd      	str	r5, [r7, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4393      	bics	r3, r2
 8005748:	61fb      	str	r3, [r7, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	6922      	ldr	r2, [r4, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	61fb      	str	r3, [r7, #28]
      break;
 8005752:	e7dc      	b.n	800570e <HAL_TIM_PWM_ConfigChannel+0x76>
 8005754:	fffffbff 	.word	0xfffffbff

08005758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005758:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800575a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800575c:	4d03      	ldr	r5, [pc, #12]	@ (800576c <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800575e:	430a      	orrs	r2, r1
 8005760:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005762:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005764:	4313      	orrs	r3, r2
 8005766:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005768:	6083      	str	r3, [r0, #8]
}
 800576a:	bd30      	pop	{r4, r5, pc}
 800576c:	ffff00ff 	.word	0xffff00ff

08005770 <HAL_TIM_ConfigClockSource>:
{
 8005770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8005772:	0005      	movs	r5, r0
 8005774:	2202      	movs	r2, #2
 8005776:	353c      	adds	r5, #60	@ 0x3c
 8005778:	782c      	ldrb	r4, [r5, #0]
{
 800577a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800577c:	0010      	movs	r0, r2
 800577e:	2c01      	cmp	r4, #1
 8005780:	d01b      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005782:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 8005784:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005786:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 8005788:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800578a:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 800578c:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578e:	4a41      	ldr	r2, [pc, #260]	@ (8005894 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 8005790:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005792:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8005794:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8005796:	680b      	ldr	r3, [r1, #0]
 8005798:	2b60      	cmp	r3, #96	@ 0x60
 800579a:	d04e      	beq.n	800583a <HAL_TIM_ConfigClockSource+0xca>
 800579c:	d82d      	bhi.n	80057fa <HAL_TIM_ConfigClockSource+0x8a>
 800579e:	2b40      	cmp	r3, #64	@ 0x40
 80057a0:	d062      	beq.n	8005868 <HAL_TIM_ConfigClockSource+0xf8>
 80057a2:	d813      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x5c>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d00b      	beq.n	80057c0 <HAL_TIM_ConfigClockSource+0x50>
 80057a8:	d808      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x4c>
 80057aa:	2210      	movs	r2, #16
 80057ac:	0019      	movs	r1, r3
 80057ae:	4391      	bics	r1, r2
 80057b0:	d006      	beq.n	80057c0 <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80057b2:	2301      	movs	r3, #1
 80057b4:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80057b6:	2300      	movs	r3, #0
 80057b8:	702b      	strb	r3, [r5, #0]
}
 80057ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80057bc:	2b30      	cmp	r3, #48	@ 0x30
 80057be:	d1f8      	bne.n	80057b2 <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr &= ~TIM_SMCR_TS;
 80057c0:	2170      	movs	r1, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 80057c2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057c4:	438a      	bics	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c6:	4313      	orrs	r3, r2
 80057c8:	2207      	movs	r2, #7
 80057ca:	e028      	b.n	800581e <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80057cc:	2b50      	cmp	r3, #80	@ 0x50
 80057ce:	d1f0      	bne.n	80057b2 <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 80057d0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80057d2:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80057d4:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d6:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d8:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057da:	4387      	bics	r7, r0
 80057dc:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057de:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80057e0:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e2:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057e4:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057e6:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 80057e8:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ea:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ec:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 80057ee:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 80057f0:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80057f2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057f4:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f6:	3b19      	subs	r3, #25
 80057f8:	e011      	b.n	800581e <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80057fa:	2280      	movs	r2, #128	@ 0x80
 80057fc:	0152      	lsls	r2, r2, #5
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00f      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0xb2>
 8005802:	2280      	movs	r2, #128	@ 0x80
 8005804:	0192      	lsls	r2, r2, #6
 8005806:	4293      	cmp	r3, r2
 8005808:	d00d      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0xb6>
 800580a:	2b70      	cmp	r3, #112	@ 0x70
 800580c:	d1d1      	bne.n	80057b2 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 800580e:	68cb      	ldr	r3, [r1, #12]
 8005810:	684a      	ldr	r2, [r1, #4]
 8005812:	0020      	movs	r0, r4
 8005814:	6889      	ldr	r1, [r1, #8]
 8005816:	f7ff ff9f 	bl	8005758 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800581a:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 800581c:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800581e:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 8005820:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005822:	2000      	movs	r0, #0
 8005824:	e7c5      	b.n	80057b2 <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8005826:	68cb      	ldr	r3, [r1, #12]
 8005828:	684a      	ldr	r2, [r1, #4]
 800582a:	0020      	movs	r0, r4
 800582c:	6889      	ldr	r1, [r1, #8]
 800582e:	f7ff ff93 	bl	8005758 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005832:	2380      	movs	r3, #128	@ 0x80
 8005834:	68a2      	ldr	r2, [r4, #8]
 8005836:	01db      	lsls	r3, r3, #7
 8005838:	e7f1      	b.n	800581e <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583a:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 800583c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800583e:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8005840:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005842:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005844:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005846:	43b8      	bics	r0, r7
 8005848:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584a:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800584c:	4f12      	ldr	r7, [pc, #72]	@ (8005898 <HAL_TIM_ConfigClockSource+0x128>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800584e:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005850:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005852:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005854:	20a0      	movs	r0, #160	@ 0xa0
 8005856:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005858:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800585a:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 800585c:	6223      	str	r3, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800585e:	2370      	movs	r3, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8005860:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005862:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005864:	3b09      	subs	r3, #9
 8005866:	e7da      	b.n	800581e <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8005868:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800586a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800586c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586e:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005870:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005872:	4387      	bics	r7, r0
 8005874:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005876:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8005878:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800587a:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800587c:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800587e:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8005880:	61a3      	str	r3, [r4, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005882:	2370      	movs	r3, #112	@ 0x70
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005884:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8005886:	430a      	orrs	r2, r1
  TIMx->CCER = tmpccer;
 8005888:	6222      	str	r2, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800588a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800588c:	439a      	bics	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800588e:	3b29      	subs	r3, #41	@ 0x29
 8005890:	e7c5      	b.n	800581e <HAL_TIM_ConfigClockSource+0xae>
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	ffff0088 	.word	0xffff0088
 8005898:	ffff0fff 	.word	0xffff0fff

0800589c <TIM_CCxNChannelCmd>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800589c:	230f      	movs	r3, #15
{
 800589e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80058a0:	2404      	movs	r4, #4
 80058a2:	4019      	ands	r1, r3
 80058a4:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80058a6:	408a      	lsls	r2, r1
  TIMx->CCER &=  ~tmp;
 80058a8:	6a03      	ldr	r3, [r0, #32]
 80058aa:	43a3      	bics	r3, r4
 80058ac:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80058ae:	6a03      	ldr	r3, [r0, #32]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	6202      	str	r2, [r0, #32]
}
 80058b4:	bd10      	pop	{r4, pc}
	...

080058b8 <HAL_TIMEx_OCN_Start>:
{
 80058b8:	0003      	movs	r3, r0
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058ba:	0002      	movs	r2, r0
{
 80058bc:	b510      	push	{r4, lr}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058be:	2900      	cmp	r1, #0
 80058c0:	d105      	bne.n	80058ce <HAL_TIMEx_OCN_Start+0x16>
 80058c2:	3242      	adds	r2, #66	@ 0x42
    return HAL_ERROR;
 80058c4:	2001      	movs	r0, #1
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058c6:	7814      	ldrb	r4, [r2, #0]
 80058c8:	4284      	cmp	r4, r0
 80058ca:	d00a      	beq.n	80058e2 <HAL_TIMEx_OCN_Start+0x2a>
}
 80058cc:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058ce:	2904      	cmp	r1, #4
 80058d0:	d101      	bne.n	80058d6 <HAL_TIMEx_OCN_Start+0x1e>
 80058d2:	3243      	adds	r2, #67	@ 0x43
 80058d4:	e7f6      	b.n	80058c4 <HAL_TIMEx_OCN_Start+0xc>
 80058d6:	2908      	cmp	r1, #8
 80058d8:	d101      	bne.n	80058de <HAL_TIMEx_OCN_Start+0x26>
 80058da:	3244      	adds	r2, #68	@ 0x44
 80058dc:	e7f2      	b.n	80058c4 <HAL_TIMEx_OCN_Start+0xc>
 80058de:	3245      	adds	r2, #69	@ 0x45
 80058e0:	e7f0      	b.n	80058c4 <HAL_TIMEx_OCN_Start+0xc>
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058e2:	2002      	movs	r0, #2
 80058e4:	7010      	strb	r0, [r2, #0]
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80058e6:	681c      	ldr	r4, [r3, #0]
 80058e8:	2204      	movs	r2, #4
 80058ea:	0020      	movs	r0, r4
 80058ec:	f7ff ffd6 	bl	800589c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 80058f0:	2380      	movs	r3, #128	@ 0x80
 80058f2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80058f4:	021b      	lsls	r3, r3, #8
 80058f6:	4313      	orrs	r3, r2
 80058f8:	6463      	str	r3, [r4, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005924 <HAL_TIMEx_OCN_Start+0x6c>)
 80058fc:	429c      	cmp	r4, r3
 80058fe:	d005      	beq.n	800590c <HAL_TIMEx_OCN_Start+0x54>
 8005900:	4b09      	ldr	r3, [pc, #36]	@ (8005928 <HAL_TIMEx_OCN_Start+0x70>)
 8005902:	429c      	cmp	r4, r3
 8005904:	d002      	beq.n	800590c <HAL_TIMEx_OCN_Start+0x54>
 8005906:	4b09      	ldr	r3, [pc, #36]	@ (800592c <HAL_TIMEx_OCN_Start+0x74>)
 8005908:	429c      	cmp	r4, r3
 800590a:	d104      	bne.n	8005916 <HAL_TIMEx_OCN_Start+0x5e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800590c:	2207      	movs	r2, #7
 800590e:	68a3      	ldr	r3, [r4, #8]
 8005910:	4013      	ands	r3, r2
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005912:	2b06      	cmp	r3, #6
 8005914:	d003      	beq.n	800591e <HAL_TIMEx_OCN_Start+0x66>
      __HAL_TIM_ENABLE(htim);
 8005916:	2301      	movs	r3, #1
 8005918:	6822      	ldr	r2, [r4, #0]
 800591a:	4313      	orrs	r3, r2
 800591c:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 800591e:	2000      	movs	r0, #0
 8005920:	e7d4      	b.n	80058cc <HAL_TIMEx_OCN_Start+0x14>
 8005922:	46c0      	nop			@ (mov r8, r8)
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40000400 	.word	0x40000400
 800592c:	40014000 	.word	0x40014000

08005930 <HAL_TIMEx_OCN_Stop>:
{
 8005930:	b570      	push	{r4, r5, r6, lr}
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005932:	6805      	ldr	r5, [r0, #0]
 8005934:	2200      	movs	r2, #0
{
 8005936:	0004      	movs	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005938:	0028      	movs	r0, r5
{
 800593a:	000e      	movs	r6, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800593c:	f7ff ffae 	bl	800589c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_DISABLE(htim);
 8005940:	6a2b      	ldr	r3, [r5, #32]
 8005942:	4a13      	ldr	r2, [pc, #76]	@ (8005990 <HAL_TIMEx_OCN_Stop+0x60>)
 8005944:	4213      	tst	r3, r2
 8005946:	d107      	bne.n	8005958 <HAL_TIMEx_OCN_Stop+0x28>
 8005948:	6a29      	ldr	r1, [r5, #32]
 800594a:	4b12      	ldr	r3, [pc, #72]	@ (8005994 <HAL_TIMEx_OCN_Stop+0x64>)
 800594c:	4219      	tst	r1, r3
 800594e:	d103      	bne.n	8005958 <HAL_TIMEx_OCN_Stop+0x28>
 8005950:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8005952:	4911      	ldr	r1, [pc, #68]	@ (8005998 <HAL_TIMEx_OCN_Stop+0x68>)
 8005954:	400b      	ands	r3, r1
 8005956:	646b      	str	r3, [r5, #68]	@ 0x44
  __HAL_TIM_DISABLE(htim);
 8005958:	6a2b      	ldr	r3, [r5, #32]
 800595a:	4213      	tst	r3, r2
 800595c:	d107      	bne.n	800596e <HAL_TIMEx_OCN_Stop+0x3e>
 800595e:	6a2a      	ldr	r2, [r5, #32]
 8005960:	4b0c      	ldr	r3, [pc, #48]	@ (8005994 <HAL_TIMEx_OCN_Stop+0x64>)
 8005962:	421a      	tst	r2, r3
 8005964:	d103      	bne.n	800596e <HAL_TIMEx_OCN_Stop+0x3e>
 8005966:	2201      	movs	r2, #1
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	4393      	bics	r3, r2
 800596c:	602b      	str	r3, [r5, #0]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800596e:	2301      	movs	r3, #1
 8005970:	2e00      	cmp	r6, #0
 8005972:	d103      	bne.n	800597c <HAL_TIMEx_OCN_Stop+0x4c>
 8005974:	3442      	adds	r4, #66	@ 0x42
}
 8005976:	2000      	movs	r0, #0
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	7023      	strb	r3, [r4, #0]
}
 800597a:	bd70      	pop	{r4, r5, r6, pc}
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	2e04      	cmp	r6, #4
 800597e:	d101      	bne.n	8005984 <HAL_TIMEx_OCN_Stop+0x54>
 8005980:	3443      	adds	r4, #67	@ 0x43
 8005982:	e7f8      	b.n	8005976 <HAL_TIMEx_OCN_Stop+0x46>
 8005984:	2e08      	cmp	r6, #8
 8005986:	d101      	bne.n	800598c <HAL_TIMEx_OCN_Stop+0x5c>
 8005988:	3444      	adds	r4, #68	@ 0x44
 800598a:	e7f4      	b.n	8005976 <HAL_TIMEx_OCN_Stop+0x46>
 800598c:	3445      	adds	r4, #69	@ 0x45
 800598e:	e7f2      	b.n	8005976 <HAL_TIMEx_OCN_Stop+0x46>
 8005990:	00001111 	.word	0x00001111
 8005994:	00000444 	.word	0x00000444
 8005998:	ffff7fff 	.word	0xffff7fff

0800599c <HAL_TIMEx_PWMN_Start>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800599c:	b510      	push	{r4, lr}
 800599e:	f7ff ff8b 	bl	80058b8 <HAL_TIMEx_OCN_Start>
 80059a2:	bd10      	pop	{r4, pc}

080059a4 <HAL_TIMEx_PWMN_Stop>:
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 80059a4:	b510      	push	{r4, lr}
 80059a6:	f7ff ffc3 	bl	8005930 <HAL_TIMEx_OCN_Stop>
 80059aa:	bd10      	pop	{r4, pc}

080059ac <HAL_TIMEx_MasterConfigSynchronization>:
{
 80059ac:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80059ae:	0004      	movs	r4, r0
 80059b0:	2202      	movs	r2, #2
 80059b2:	343c      	adds	r4, #60	@ 0x3c
 80059b4:	7825      	ldrb	r5, [r4, #0]
{
 80059b6:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80059b8:	0010      	movs	r0, r2
 80059ba:	2d01      	cmp	r5, #1
 80059bc:	d01c      	beq.n	80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  htim->State = HAL_TIM_STATE_BUSY;
 80059be:	001d      	movs	r5, r3
  tmpcr2 &= ~TIM_CR2_MMS;
 80059c0:	2670      	movs	r6, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80059c2:	353d      	adds	r5, #61	@ 0x3d
 80059c4:	702a      	strb	r2, [r5, #0]
  tmpcr2 = htim->Instance->CR2;
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80059ca:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80059cc:	43b0      	bics	r0, r6
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059ce:	680e      	ldr	r6, [r1, #0]
 80059d0:	4330      	orrs	r0, r6
  htim->Instance->CR2 = tmpcr2;
 80059d2:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d4:	4809      	ldr	r0, [pc, #36]	@ (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80059d6:	4283      	cmp	r3, r0
 80059d8:	d005      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80059da:	4809      	ldr	r0, [pc, #36]	@ (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 80059dc:	4283      	cmp	r3, r0
 80059de:	d002      	beq.n	80059e6 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 80059e0:	4808      	ldr	r0, [pc, #32]	@ (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80059e2:	4283      	cmp	r3, r0
 80059e4:	d104      	bne.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059e6:	2080      	movs	r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ea:	4382      	bics	r2, r0
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ec:	430a      	orrs	r2, r1
    htim->Instance->SMCR = tmpsmcr;
 80059ee:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80059f0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80059f2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80059f6:	7020      	strb	r0, [r4, #0]
}
 80059f8:	bd70      	pop	{r4, r5, r6, pc}
 80059fa:	46c0      	nop			@ (mov r8, r8)
 80059fc:	40012c00 	.word	0x40012c00
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40014000 	.word	0x40014000

08005a08 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8005a08:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8005a0a:	0004      	movs	r4, r0
 8005a0c:	343c      	adds	r4, #60	@ 0x3c
 8005a0e:	7823      	ldrb	r3, [r4, #0]
{
 8005a10:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8005a12:	2002      	movs	r0, #2
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d01c      	beq.n	8005a52 <HAL_TIMEx_ConfigBreakDeadTime+0x4a>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a18:	68cb      	ldr	r3, [r1, #12]
 8005a1a:	480e      	ldr	r0, [pc, #56]	@ (8005a54 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
  htim->Instance->BDTR = tmpbdtr;
 8005a1c:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a1e:	4003      	ands	r3, r0
 8005a20:	6888      	ldr	r0, [r1, #8]
 8005a22:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a24:	480c      	ldr	r0, [pc, #48]	@ (8005a58 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8005a26:	4003      	ands	r3, r0
 8005a28:	6848      	ldr	r0, [r1, #4]
 8005a2a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a2c:	480b      	ldr	r0, [pc, #44]	@ (8005a5c <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8005a2e:	4003      	ands	r3, r0
 8005a30:	6808      	ldr	r0, [r1, #0]
 8005a32:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a34:	480a      	ldr	r0, [pc, #40]	@ (8005a60 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8005a36:	4003      	ands	r3, r0
 8005a38:	6908      	ldr	r0, [r1, #16]
 8005a3a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a3c:	4809      	ldr	r0, [pc, #36]	@ (8005a64 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8005a3e:	4003      	ands	r3, r0
 8005a40:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a42:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a44:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a46:	4808      	ldr	r0, [pc, #32]	@ (8005a68 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8005a48:	4003      	ands	r3, r0
  __HAL_UNLOCK(htim);
 8005a4a:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a4c:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8005a4e:	6453      	str	r3, [r2, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8005a50:	7020      	strb	r0, [r4, #0]
}
 8005a52:	bd10      	pop	{r4, pc}
 8005a54:	fffffcff 	.word	0xfffffcff
 8005a58:	fffffbff 	.word	0xfffffbff
 8005a5c:	fffff7ff 	.word	0xfffff7ff
 8005a60:	ffffefff 	.word	0xffffefff
 8005a64:	ffffdfff 	.word	0xffffdfff
 8005a68:	ffffbfff 	.word	0xffffbfff

08005a6c <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a6c:	1d82      	adds	r2, r0, #6
{
 8005a6e:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 8005a70:	2000      	movs	r0, #0
 8005a72:	87d0      	strh	r0, [r2, #62]	@ 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a74:	4a01      	ldr	r2, [pc, #4]	@ (8005a7c <USB_EnableGlobalInt+0x10>)
 8005a76:	3302      	adds	r3, #2
 8005a78:	87da      	strh	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
}
 8005a7a:	4770      	bx	lr
 8005a7c:	ffffbf80 	.word	0xffffbf80

08005a80 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a80:	3002      	adds	r0, #2
 8005a82:	8fc3      	ldrh	r3, [r0, #62]	@ 0x3e
 8005a84:	4a02      	ldr	r2, [pc, #8]	@ (8005a90 <USB_DisableGlobalInt+0x10>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	87c3      	strh	r3, [r0, #62]	@ 0x3e

  return HAL_OK;
}
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	4770      	bx	lr
 8005a8e:	46c0      	nop			@ (mov r8, r8)
 8005a90:	0000407f 	.word	0x0000407f

08005a94 <USB_DevInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a94:	1c82      	adds	r2, r0, #2
{
 8005a96:	0003      	movs	r3, r0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a98:	2101      	movs	r1, #1

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a9a:	2000      	movs	r0, #0
{
 8005a9c:	b082      	sub	sp, #8
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a9e:	87d1      	strh	r1, [r2, #62]	@ 0x3e
  USBx->CNTR = 0U;
 8005aa0:	87d0      	strh	r0, [r2, #62]	@ 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005aa2:	1d9a      	adds	r2, r3, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005aa4:	3350      	adds	r3, #80	@ 0x50
  USBx->ISTR = 0U;
 8005aa6:	87d0      	strh	r0, [r2, #62]	@ 0x3e
  USBx->BTABLE = BTABLE_ADDRESS;
 8005aa8:	8018      	strh	r0, [r3, #0]

  return HAL_OK;
}
 8005aaa:	b002      	add	sp, #8
 8005aac:	4770      	bx	lr
	...

08005ab0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005ab2:	780e      	ldrb	r6, [r1, #0]
 8005ab4:	4a7a      	ldr	r2, [pc, #488]	@ (8005ca0 <USB_ActivateEndpoint+0x1f0>)
 8005ab6:	00b3      	lsls	r3, r6, #2
 8005ab8:	18c3      	adds	r3, r0, r3
 8005aba:	881c      	ldrh	r4, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005abc:	78cf      	ldrb	r7, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005abe:	4014      	ands	r4, r2
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8005ac0:	2201      	movs	r2, #1
{
 8005ac2:	0005      	movs	r5, r0
      ret = HAL_ERROR;
 8005ac4:	9200      	str	r2, [sp, #0]
  switch (ep->type)
 8005ac6:	2f03      	cmp	r7, #3
 8005ac8:	d808      	bhi.n	8005adc <USB_ActivateEndpoint+0x2c>
 8005aca:	0038      	movs	r0, r7
 8005acc:	f7fa fb38 	bl	8000140 <__gnu_thumb1_case_uqi>
 8005ad0:	3c3f4202 	.word	0x3c3f4202
      wEpRegVal |= USB_EP_CONTROL;
 8005ad4:	2280      	movs	r2, #128	@ 0x80
 8005ad6:	0092      	lsls	r2, r2, #2
 8005ad8:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8005ada:	9700      	str	r7, [sp, #0]
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005adc:	4a71      	ldr	r2, [pc, #452]	@ (8005ca4 <USB_ActivateEndpoint+0x1f4>)
 8005ade:	4314      	orrs	r4, r2
 8005ae0:	b2a4      	uxth	r4, r4
 8005ae2:	801c      	strh	r4, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005ae4:	8818      	ldrh	r0, [r3, #0]
 8005ae6:	4c70      	ldr	r4, [pc, #448]	@ (8005ca8 <USB_ActivateEndpoint+0x1f8>)
 8005ae8:	4020      	ands	r0, r4
 8005aea:	4330      	orrs	r0, r6
 8005aec:	4310      	orrs	r0, r2
 8005aee:	b280      	uxth	r0, r0
 8005af0:	8018      	strh	r0, [r3, #0]
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005af2:	00f0      	lsls	r0, r6, #3
 8005af4:	4684      	mov	ip, r0
  if (ep->doublebuffer == 0U)
 8005af6:	7b08      	ldrb	r0, [r1, #12]
 8005af8:	44ac      	add	ip, r5
 8005afa:	3550      	adds	r5, #80	@ 0x50
 8005afc:	9501      	str	r5, [sp, #4]
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d000      	beq.n	8005b04 <USB_ActivateEndpoint+0x54>
 8005b02:	e06b      	b.n	8005bdc <USB_ActivateEndpoint+0x12c>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b04:	88cd      	ldrh	r5, [r1, #6]
    if (ep->is_in != 0U)
 8005b06:	7848      	ldrb	r0, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b08:	086d      	lsrs	r5, r5, #1
 8005b0a:	006d      	lsls	r5, r5, #1
    if (ep->is_in != 0U)
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	d023      	beq.n	8005b58 <USB_ActivateEndpoint+0xa8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b10:	2080      	movs	r0, #128	@ 0x80
 8005b12:	9901      	ldr	r1, [sp, #4]
 8005b14:	00c0      	lsls	r0, r0, #3
 8005b16:	8809      	ldrh	r1, [r1, #0]
 8005b18:	4461      	add	r1, ip
 8005b1a:	1809      	adds	r1, r1, r0
 8005b1c:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b1e:	8819      	ldrh	r1, [r3, #0]
 8005b20:	0649      	lsls	r1, r1, #25
 8005b22:	d504      	bpl.n	8005b2e <USB_ActivateEndpoint+0x7e>
 8005b24:	8819      	ldrh	r1, [r3, #0]
 8005b26:	4021      	ands	r1, r4
 8005b28:	4c60      	ldr	r4, [pc, #384]	@ (8005cac <USB_ActivateEndpoint+0x1fc>)
 8005b2a:	4321      	orrs	r1, r4
 8005b2c:	8019      	strh	r1, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b2e:	4d60      	ldr	r5, [pc, #384]	@ (8005cb0 <USB_ActivateEndpoint+0x200>)
 8005b30:	2f01      	cmp	r7, #1
 8005b32:	d100      	bne.n	8005b36 <USB_ActivateEndpoint+0x86>
 8005b34:	e0ae      	b.n	8005c94 <USB_ActivateEndpoint+0x1e4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b36:	2120      	movs	r1, #32
 8005b38:	881c      	ldrh	r4, [r3, #0]
 8005b3a:	402c      	ands	r4, r5
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005b3c:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	b292      	uxth	r2, r2
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8005b42:	9800      	ldr	r0, [sp, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b44:	801a      	strh	r2, [r3, #0]
}
 8005b46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b48:	22c0      	movs	r2, #192	@ 0xc0
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b4a:	00d2      	lsls	r2, r2, #3
 8005b4c:	4314      	orrs	r4, r2
  switch (ep->type)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	9200      	str	r2, [sp, #0]
 8005b52:	e7c3      	b.n	8005adc <USB_ActivateEndpoint+0x2c>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b54:	2280      	movs	r2, #128	@ 0x80
 8005b56:	e7f8      	b.n	8005b4a <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b58:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b5a:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b5c:	8807      	ldrh	r7, [r0, #0]
 8005b5e:	4855      	ldr	r0, [pc, #340]	@ (8005cb4 <USB_ActivateEndpoint+0x204>)
 8005b60:	4467      	add	r7, ip
 8005b62:	183f      	adds	r7, r7, r0
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b64:	9801      	ldr	r0, [sp, #4]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b66:	803d      	strh	r5, [r7, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005b68:	8805      	ldrh	r5, [r0, #0]
 8005b6a:	4853      	ldr	r0, [pc, #332]	@ (8005cb8 <USB_ActivateEndpoint+0x208>)
 8005b6c:	4465      	add	r5, ip
 8005b6e:	182d      	adds	r5, r5, r0
 8005b70:	882f      	ldrh	r7, [r5, #0]
 8005b72:	05bf      	lsls	r7, r7, #22
 8005b74:	0dbf      	lsrs	r7, r7, #22
 8005b76:	802f      	strh	r7, [r5, #0]
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	d115      	bne.n	8005ba8 <USB_ActivateEndpoint+0xf8>
 8005b7c:	2780      	movs	r7, #128	@ 0x80
 8005b7e:	8829      	ldrh	r1, [r5, #0]
 8005b80:	023f      	lsls	r7, r7, #8
 8005b82:	4339      	orrs	r1, r7
 8005b84:	8029      	strh	r1, [r5, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b86:	8819      	ldrh	r1, [r3, #0]
 8005b88:	0449      	lsls	r1, r1, #17
 8005b8a:	d504      	bpl.n	8005b96 <USB_ActivateEndpoint+0xe6>
 8005b8c:	8819      	ldrh	r1, [r3, #0]
 8005b8e:	4021      	ands	r1, r4
 8005b90:	4c4a      	ldr	r4, [pc, #296]	@ (8005cbc <USB_ActivateEndpoint+0x20c>)
 8005b92:	4321      	orrs	r1, r4
 8005b94:	8019      	strh	r1, [r3, #0]
      if (ep->num == 0U)
 8005b96:	494a      	ldr	r1, [pc, #296]	@ (8005cc0 <USB_ActivateEndpoint+0x210>)
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b98:	881c      	ldrh	r4, [r3, #0]
 8005b9a:	400c      	ands	r4, r1
 8005b9c:	21c0      	movs	r1, #192	@ 0xc0
      if (ep->num == 0U)
 8005b9e:	2e00      	cmp	r6, #0
 8005ba0:	d000      	beq.n	8005ba4 <USB_ActivateEndpoint+0xf4>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005ba2:	2180      	movs	r1, #128	@ 0x80
 8005ba4:	0189      	lsls	r1, r1, #6
 8005ba6:	e7c9      	b.n	8005b3c <USB_ActivateEndpoint+0x8c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005ba8:	293e      	cmp	r1, #62	@ 0x3e
 8005baa:	d808      	bhi.n	8005bbe <USB_ActivateEndpoint+0x10e>
 8005bac:	2001      	movs	r0, #1
 8005bae:	084f      	lsrs	r7, r1, #1
 8005bb0:	4001      	ands	r1, r0
 8005bb2:	187f      	adds	r7, r7, r1
 8005bb4:	8829      	ldrh	r1, [r5, #0]
 8005bb6:	02bf      	lsls	r7, r7, #10
 8005bb8:	4339      	orrs	r1, r7
 8005bba:	b289      	uxth	r1, r1
 8005bbc:	e7e2      	b.n	8005b84 <USB_ActivateEndpoint+0xd4>
 8005bbe:	201f      	movs	r0, #31
 8005bc0:	094f      	lsrs	r7, r1, #5
 8005bc2:	4001      	ands	r1, r0
 8005bc4:	0008      	movs	r0, r1
 8005bc6:	4241      	negs	r1, r0
 8005bc8:	4141      	adcs	r1, r0
 8005bca:	1a7f      	subs	r7, r7, r1
 8005bcc:	8829      	ldrh	r1, [r5, #0]
 8005bce:	02bf      	lsls	r7, r7, #10
 8005bd0:	4339      	orrs	r1, r7
 8005bd2:	4f3c      	ldr	r7, [pc, #240]	@ (8005cc4 <USB_ActivateEndpoint+0x214>)
 8005bd4:	430f      	orrs	r7, r1
 8005bd6:	b2bf      	uxth	r7, r7
 8005bd8:	802f      	strh	r7, [r5, #0]
 8005bda:	e7d4      	b.n	8005b86 <USB_ActivateEndpoint+0xd6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bdc:	881d      	ldrh	r5, [r3, #0]
    if (ep->type == EP_TYPE_BULK)
 8005bde:	2f02      	cmp	r7, #2
 8005be0:	d13a      	bne.n	8005c58 <USB_ActivateEndpoint+0x1a8>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005be2:	4e39      	ldr	r6, [pc, #228]	@ (8005cc8 <USB_ActivateEndpoint+0x218>)
 8005be4:	4025      	ands	r5, r4
 8005be6:	4335      	orrs	r5, r6
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005be8:	9801      	ldr	r0, [sp, #4]
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005bea:	801d      	strh	r5, [r3, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bec:	8805      	ldrh	r5, [r0, #0]
 8005bee:	2080      	movs	r0, #128	@ 0x80
 8005bf0:	890e      	ldrh	r6, [r1, #8]
 8005bf2:	4465      	add	r5, ip
 8005bf4:	00c0      	lsls	r0, r0, #3
 8005bf6:	0876      	lsrs	r6, r6, #1
 8005bf8:	182d      	adds	r5, r5, r0
 8005bfa:	0076      	lsls	r6, r6, #1
 8005bfc:	9801      	ldr	r0, [sp, #4]
 8005bfe:	802e      	strh	r6, [r5, #0]
 8005c00:	8805      	ldrh	r5, [r0, #0]
 8005c02:	894e      	ldrh	r6, [r1, #10]
 8005c04:	482b      	ldr	r0, [pc, #172]	@ (8005cb4 <USB_ActivateEndpoint+0x204>)
 8005c06:	4465      	add	r5, ip
 8005c08:	0876      	lsrs	r6, r6, #1
 8005c0a:	182d      	adds	r5, r5, r0
 8005c0c:	0076      	lsls	r6, r6, #1
 8005c0e:	802e      	strh	r6, [r5, #0]
    if (ep->is_in == 0U)
 8005c10:	7849      	ldrb	r1, [r1, #1]
 8005c12:	4e27      	ldr	r6, [pc, #156]	@ (8005cb0 <USB_ActivateEndpoint+0x200>)
 8005c14:	468c      	mov	ip, r1
 8005c16:	2180      	movs	r1, #128	@ 0x80
 8005c18:	4660      	mov	r0, ip
 8005c1a:	4d29      	ldr	r5, [pc, #164]	@ (8005cc0 <USB_ActivateEndpoint+0x210>)
 8005c1c:	01c9      	lsls	r1, r1, #7
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d11f      	bne.n	8005c62 <USB_ActivateEndpoint+0x1b2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c22:	881f      	ldrh	r7, [r3, #0]
 8005c24:	420f      	tst	r7, r1
 8005c26:	d004      	beq.n	8005c32 <USB_ActivateEndpoint+0x182>
 8005c28:	8819      	ldrh	r1, [r3, #0]
 8005c2a:	4f24      	ldr	r7, [pc, #144]	@ (8005cbc <USB_ActivateEndpoint+0x20c>)
 8005c2c:	4021      	ands	r1, r4
 8005c2e:	4339      	orrs	r1, r7
 8005c30:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c32:	8819      	ldrh	r1, [r3, #0]
 8005c34:	0649      	lsls	r1, r1, #25
 8005c36:	d504      	bpl.n	8005c42 <USB_ActivateEndpoint+0x192>
 8005c38:	8819      	ldrh	r1, [r3, #0]
 8005c3a:	4021      	ands	r1, r4
 8005c3c:	4c1b      	ldr	r4, [pc, #108]	@ (8005cac <USB_ActivateEndpoint+0x1fc>)
 8005c3e:	4321      	orrs	r1, r4
 8005c40:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c42:	21c0      	movs	r1, #192	@ 0xc0
 8005c44:	881c      	ldrh	r4, [r3, #0]
 8005c46:	0189      	lsls	r1, r1, #6
 8005c48:	402c      	ands	r4, r5
 8005c4a:	4061      	eors	r1, r4
 8005c4c:	4311      	orrs	r1, r2
 8005c4e:	b289      	uxth	r1, r1
 8005c50:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c52:	8819      	ldrh	r1, [r3, #0]
 8005c54:	4031      	ands	r1, r6
 8005c56:	e772      	b.n	8005b3e <USB_ActivateEndpoint+0x8e>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c58:	4e1c      	ldr	r6, [pc, #112]	@ (8005ccc <USB_ActivateEndpoint+0x21c>)
 8005c5a:	4035      	ands	r5, r6
 8005c5c:	4315      	orrs	r5, r2
 8005c5e:	b2ad      	uxth	r5, r5
 8005c60:	e7c2      	b.n	8005be8 <USB_ActivateEndpoint+0x138>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c62:	8818      	ldrh	r0, [r3, #0]
 8005c64:	4208      	tst	r0, r1
 8005c66:	d004      	beq.n	8005c72 <USB_ActivateEndpoint+0x1c2>
 8005c68:	8819      	ldrh	r1, [r3, #0]
 8005c6a:	4814      	ldr	r0, [pc, #80]	@ (8005cbc <USB_ActivateEndpoint+0x20c>)
 8005c6c:	4021      	ands	r1, r4
 8005c6e:	4301      	orrs	r1, r0
 8005c70:	8019      	strh	r1, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c72:	8819      	ldrh	r1, [r3, #0]
 8005c74:	0649      	lsls	r1, r1, #25
 8005c76:	d504      	bpl.n	8005c82 <USB_ActivateEndpoint+0x1d2>
 8005c78:	8819      	ldrh	r1, [r3, #0]
 8005c7a:	4021      	ands	r1, r4
 8005c7c:	4c0b      	ldr	r4, [pc, #44]	@ (8005cac <USB_ActivateEndpoint+0x1fc>)
 8005c7e:	4321      	orrs	r1, r4
 8005c80:	8019      	strh	r1, [r3, #0]
      if (ep->type != EP_TYPE_ISOC)
 8005c82:	2f01      	cmp	r7, #1
 8005c84:	d009      	beq.n	8005c9a <USB_ActivateEndpoint+0x1ea>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c86:	2120      	movs	r1, #32
 8005c88:	881c      	ldrh	r4, [r3, #0]
 8005c8a:	4034      	ands	r4, r6
 8005c8c:	4061      	eors	r1, r4
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c8e:	4311      	orrs	r1, r2
 8005c90:	b289      	uxth	r1, r1
 8005c92:	8019      	strh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c94:	8819      	ldrh	r1, [r3, #0]
 8005c96:	4029      	ands	r1, r5
 8005c98:	e751      	b.n	8005b3e <USB_ActivateEndpoint+0x8e>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c9a:	8819      	ldrh	r1, [r3, #0]
 8005c9c:	4031      	ands	r1, r6
 8005c9e:	e7f6      	b.n	8005c8e <USB_ActivateEndpoint+0x1de>
 8005ca0:	ffff898f 	.word	0xffff898f
 8005ca4:	ffff8080 	.word	0xffff8080
 8005ca8:	ffff8f8f 	.word	0xffff8f8f
 8005cac:	000080c0 	.word	0x000080c0
 8005cb0:	ffff8fbf 	.word	0xffff8fbf
 8005cb4:	00000404 	.word	0x00000404
 8005cb8:	00000406 	.word	0x00000406
 8005cbc:	0000c080 	.word	0x0000c080
 8005cc0:	ffffbf8f 	.word	0xffffbf8f
 8005cc4:	ffff8000 	.word	0xffff8000
 8005cc8:	00008180 	.word	0x00008180
 8005ccc:	ffff8e8f 	.word	0xffff8e8f

08005cd0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cd2:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8005cd4:	784a      	ldrb	r2, [r1, #1]
  if (ep->doublebuffer == 0U)
 8005cd6:	7b09      	ldrb	r1, [r1, #12]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	18c0      	adds	r0, r0, r3
 8005cdc:	4b31      	ldr	r3, [pc, #196]	@ (8005da4 <USB_DeactivateEndpoint+0xd4>)
  if (ep->doublebuffer == 0U)
 8005cde:	2900      	cmp	r1, #0
 8005ce0:	d11a      	bne.n	8005d18 <USB_DeactivateEndpoint+0x48>
    if (ep->is_in != 0U)
 8005ce2:	2a00      	cmp	r2, #0
 8005ce4:	d00c      	beq.n	8005d00 <USB_DeactivateEndpoint+0x30>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ce6:	8802      	ldrh	r2, [r0, #0]
 8005ce8:	0652      	lsls	r2, r2, #25
 8005cea:	d505      	bpl.n	8005cf8 <USB_DeactivateEndpoint+0x28>
 8005cec:	8802      	ldrh	r2, [r0, #0]
 8005cee:	492e      	ldr	r1, [pc, #184]	@ (8005da8 <USB_DeactivateEndpoint+0xd8>)
 8005cf0:	400a      	ands	r2, r1
 8005cf2:	492e      	ldr	r1, [pc, #184]	@ (8005dac <USB_DeactivateEndpoint+0xdc>)
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	8002      	strh	r2, [r0, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cf8:	8802      	ldrh	r2, [r0, #0]
 8005cfa:	492d      	ldr	r1, [pc, #180]	@ (8005db0 <USB_DeactivateEndpoint+0xe0>)
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005cfc:	400a      	ands	r2, r1
 8005cfe:	e02f      	b.n	8005d60 <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d00:	8802      	ldrh	r2, [r0, #0]
 8005d02:	0452      	lsls	r2, r2, #17
 8005d04:	d505      	bpl.n	8005d12 <USB_DeactivateEndpoint+0x42>
 8005d06:	8802      	ldrh	r2, [r0, #0]
 8005d08:	4927      	ldr	r1, [pc, #156]	@ (8005da8 <USB_DeactivateEndpoint+0xd8>)
 8005d0a:	400a      	ands	r2, r1
 8005d0c:	4929      	ldr	r1, [pc, #164]	@ (8005db4 <USB_DeactivateEndpoint+0xe4>)
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d12:	8802      	ldrh	r2, [r0, #0]
 8005d14:	4928      	ldr	r1, [pc, #160]	@ (8005db8 <USB_DeactivateEndpoint+0xe8>)
 8005d16:	e7f1      	b.n	8005cfc <USB_DeactivateEndpoint+0x2c>
    if (ep->is_in == 0U)
 8005d18:	2780      	movs	r7, #128	@ 0x80
 8005d1a:	4e23      	ldr	r6, [pc, #140]	@ (8005da8 <USB_DeactivateEndpoint+0xd8>)
 8005d1c:	4d24      	ldr	r5, [pc, #144]	@ (8005db0 <USB_DeactivateEndpoint+0xe0>)
 8005d1e:	4926      	ldr	r1, [pc, #152]	@ (8005db8 <USB_DeactivateEndpoint+0xe8>)
 8005d20:	01ff      	lsls	r7, r7, #7
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	d121      	bne.n	8005d6a <USB_DeactivateEndpoint+0x9a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d26:	8802      	ldrh	r2, [r0, #0]
 8005d28:	423a      	tst	r2, r7
 8005d2a:	d004      	beq.n	8005d36 <USB_DeactivateEndpoint+0x66>
 8005d2c:	8802      	ldrh	r2, [r0, #0]
 8005d2e:	4c21      	ldr	r4, [pc, #132]	@ (8005db4 <USB_DeactivateEndpoint+0xe4>)
 8005d30:	4032      	ands	r2, r6
 8005d32:	4322      	orrs	r2, r4
 8005d34:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d36:	8802      	ldrh	r2, [r0, #0]
 8005d38:	4c20      	ldr	r4, [pc, #128]	@ (8005dbc <USB_DeactivateEndpoint+0xec>)
 8005d3a:	0652      	lsls	r2, r2, #25
 8005d3c:	d504      	bpl.n	8005d48 <USB_DeactivateEndpoint+0x78>
 8005d3e:	8802      	ldrh	r2, [r0, #0]
 8005d40:	4032      	ands	r2, r6
 8005d42:	4322      	orrs	r2, r4
 8005d44:	b292      	uxth	r2, r2
 8005d46:	8002      	strh	r2, [r0, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8005d48:	8802      	ldrh	r2, [r0, #0]
 8005d4a:	4032      	ands	r2, r6
 8005d4c:	4314      	orrs	r4, r2
 8005d4e:	b2a4      	uxth	r4, r4
 8005d50:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d52:	8802      	ldrh	r2, [r0, #0]
 8005d54:	400a      	ands	r2, r1
 8005d56:	431a      	orrs	r2, r3
 8005d58:	b292      	uxth	r2, r2
 8005d5a:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d5c:	8802      	ldrh	r2, [r0, #0]
 8005d5e:	402a      	ands	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d60:	4313      	orrs	r3, r2
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	8003      	strh	r3, [r0, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8005d66:	2000      	movs	r0, #0
 8005d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d6a:	8802      	ldrh	r2, [r0, #0]
 8005d6c:	4c14      	ldr	r4, [pc, #80]	@ (8005dc0 <USB_DeactivateEndpoint+0xf0>)
 8005d6e:	423a      	tst	r2, r7
 8005d70:	d004      	beq.n	8005d7c <USB_DeactivateEndpoint+0xac>
 8005d72:	8802      	ldrh	r2, [r0, #0]
 8005d74:	4032      	ands	r2, r6
 8005d76:	4322      	orrs	r2, r4
 8005d78:	b292      	uxth	r2, r2
 8005d7a:	8002      	strh	r2, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d7c:	8802      	ldrh	r2, [r0, #0]
 8005d7e:	0652      	lsls	r2, r2, #25
 8005d80:	d504      	bpl.n	8005d8c <USB_DeactivateEndpoint+0xbc>
 8005d82:	8802      	ldrh	r2, [r0, #0]
 8005d84:	4f09      	ldr	r7, [pc, #36]	@ (8005dac <USB_DeactivateEndpoint+0xdc>)
 8005d86:	4032      	ands	r2, r6
 8005d88:	433a      	orrs	r2, r7
 8005d8a:	8002      	strh	r2, [r0, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005d8c:	8802      	ldrh	r2, [r0, #0]
 8005d8e:	4032      	ands	r2, r6
 8005d90:	4314      	orrs	r4, r2
 8005d92:	b2a4      	uxth	r4, r4
 8005d94:	8004      	strh	r4, [r0, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d96:	8802      	ldrh	r2, [r0, #0]
 8005d98:	402a      	ands	r2, r5
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	b292      	uxth	r2, r2
 8005d9e:	8002      	strh	r2, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005da0:	8802      	ldrh	r2, [r0, #0]
 8005da2:	e7ab      	b.n	8005cfc <USB_DeactivateEndpoint+0x2c>
 8005da4:	ffff8080 	.word	0xffff8080
 8005da8:	ffff8f8f 	.word	0xffff8f8f
 8005dac:	000080c0 	.word	0x000080c0
 8005db0:	ffff8fbf 	.word	0xffff8fbf
 8005db4:	0000c080 	.word	0x0000c080
 8005db8:	ffffbf8f 	.word	0xffffbf8f
 8005dbc:	ffff80c0 	.word	0xffff80c0
 8005dc0:	ffffc080 	.word	0xffffc080

08005dc4 <USB_EPSetStall>:
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005dc4:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in != 0U)
 8005dc6:	7849      	ldrb	r1, [r1, #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4a0c      	ldr	r2, [pc, #48]	@ (8005dfc <USB_EPSetStall+0x38>)
 8005dcc:	18c0      	adds	r0, r0, r3
  if (ep->is_in != 0U)
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	d009      	beq.n	8005de6 <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005dd2:	8801      	ldrh	r1, [r0, #0]
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005e00 <USB_EPSetStall+0x3c>)
 8005dd6:	4019      	ands	r1, r3
 8005dd8:	2310      	movs	r3, #16
 8005dda:	404b      	eors	r3, r1
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	8003      	strh	r3, [r0, #0]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8005de2:	2000      	movs	r0, #0
 8005de4:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005de6:	8801      	ldrh	r1, [r0, #0]
 8005de8:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <USB_EPSetStall+0x40>)
 8005dea:	4019      	ands	r1, r3
 8005dec:	2380      	movs	r3, #128	@ 0x80
 8005dee:	015b      	lsls	r3, r3, #5
 8005df0:	404b      	eors	r3, r1
 8005df2:	431a      	orrs	r2, r3
 8005df4:	b292      	uxth	r2, r2
 8005df6:	8002      	strh	r2, [r0, #0]
 8005df8:	e7f3      	b.n	8005de2 <USB_EPSetStall+0x1e>
 8005dfa:	46c0      	nop			@ (mov r8, r8)
 8005dfc:	ffff8080 	.word	0xffff8080
 8005e00:	ffff8fbf 	.word	0xffff8fbf
 8005e04:	ffffbf8f 	.word	0xffffbf8f

08005e08 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8005e08:	7b0b      	ldrb	r3, [r1, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d119      	bne.n	8005e42 <USB_EPClearStall+0x3a>
  {
    if (ep->is_in != 0U)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e0e:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in != 0U)
 8005e10:	784a      	ldrb	r2, [r1, #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	18c0      	adds	r0, r0, r3
 8005e16:	8803      	ldrh	r3, [r0, #0]
    if (ep->is_in != 0U)
 8005e18:	2a00      	cmp	r2, #0
 8005e1a:	d014      	beq.n	8005e46 <USB_EPClearStall+0x3e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e1c:	065b      	lsls	r3, r3, #25
 8005e1e:	d505      	bpl.n	8005e2c <USB_EPClearStall+0x24>
 8005e20:	8803      	ldrh	r3, [r0, #0]
 8005e22:	4a10      	ldr	r2, [pc, #64]	@ (8005e64 <USB_EPClearStall+0x5c>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	4a10      	ldr	r2, [pc, #64]	@ (8005e68 <USB_EPClearStall+0x60>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	8003      	strh	r3, [r0, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e2c:	78cb      	ldrb	r3, [r1, #3]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d007      	beq.n	8005e42 <USB_EPClearStall+0x3a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e32:	4b0e      	ldr	r3, [pc, #56]	@ (8005e6c <USB_EPClearStall+0x64>)
 8005e34:	8802      	ldrh	r2, [r0, #0]
 8005e36:	401a      	ands	r2, r3
 8005e38:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e3a:	4053      	eors	r3, r2
 8005e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8005e70 <USB_EPClearStall+0x68>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8005e42:	2000      	movs	r0, #0
 8005e44:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e46:	045b      	lsls	r3, r3, #17
 8005e48:	d505      	bpl.n	8005e56 <USB_EPClearStall+0x4e>
 8005e4a:	8803      	ldrh	r3, [r0, #0]
 8005e4c:	4a05      	ldr	r2, [pc, #20]	@ (8005e64 <USB_EPClearStall+0x5c>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	4a08      	ldr	r2, [pc, #32]	@ (8005e74 <USB_EPClearStall+0x6c>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	8003      	strh	r3, [r0, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e56:	4b08      	ldr	r3, [pc, #32]	@ (8005e78 <USB_EPClearStall+0x70>)
 8005e58:	8802      	ldrh	r2, [r0, #0]
 8005e5a:	401a      	ands	r2, r3
 8005e5c:	23c0      	movs	r3, #192	@ 0xc0
 8005e5e:	019b      	lsls	r3, r3, #6
 8005e60:	e7eb      	b.n	8005e3a <USB_EPClearStall+0x32>
 8005e62:	46c0      	nop			@ (mov r8, r8)
 8005e64:	ffff8f8f 	.word	0xffff8f8f
 8005e68:	000080c0 	.word	0x000080c0
 8005e6c:	ffff8fbf 	.word	0xffff8fbf
 8005e70:	00008080 	.word	0x00008080
 8005e74:	0000c080 	.word	0x0000c080
 8005e78:	ffffbf8f 	.word	0xffffbf8f

08005e7c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8005e7c:	2900      	cmp	r1, #0
 8005e7e:	d102      	bne.n	8005e86 <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005e80:	2380      	movs	r3, #128	@ 0x80
 8005e82:	304c      	adds	r0, #76	@ 0x4c
 8005e84:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8005e86:	2000      	movs	r0, #0
 8005e88:	4770      	bx	lr

08005e8a <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005e8a:	2280      	movs	r2, #128	@ 0x80
 8005e8c:	3058      	adds	r0, #88	@ 0x58
 8005e8e:	8803      	ldrh	r3, [r0, #0]
 8005e90:	0212      	lsls	r2, r2, #8
 8005e92:	4313      	orrs	r3, r2
 8005e94:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8005e96:	2000      	movs	r0, #0
 8005e98:	4770      	bx	lr

08005e9a <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005e9a:	3006      	adds	r0, #6
 8005e9c:	8fc0      	ldrh	r0, [r0, #62]	@ 0x3e
 8005e9e:	b280      	uxth	r0, r0
  return tmpreg;
}
 8005ea0:	4770      	bx	lr

08005ea2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ea2:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ea4:	2480      	movs	r4, #128	@ 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ea6:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ea8:	00e4      	lsls	r4, r4, #3
 8005eaa:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005eac:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005eae:	1880      	adds	r0, r0, r2

  for (count = n; count != 0U; count--)
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	18cb      	adds	r3, r1, r3
 8005eb4:	1a40      	subs	r0, r0, r1
 8005eb6:	180c      	adds	r4, r1, r0
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	d100      	bne.n	8005ebe <USB_WritePMA+0x1c>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8005ebc:	bd30      	pop	{r4, r5, pc}
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005ebe:	784a      	ldrb	r2, [r1, #1]
 8005ec0:	780d      	ldrb	r5, [r1, #0]
 8005ec2:	0212      	lsls	r2, r2, #8
 8005ec4:	432a      	orrs	r2, r5
    *pdwVal = (WrVal & 0xFFFFU);
 8005ec6:	8022      	strh	r2, [r4, #0]
    pBuf++;
 8005ec8:	3102      	adds	r1, #2
  for (count = n; count != 0U; count--)
 8005eca:	e7f4      	b.n	8005eb6 <USB_WritePMA+0x14>

08005ecc <USB_EPStartXfer>:
{
 8005ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ece:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8005ed0:	7849      	ldrb	r1, [r1, #1]
{
 8005ed2:	0005      	movs	r5, r0
    if (ep->doublebuffer == 0U)
 8005ed4:	7b22      	ldrb	r2, [r4, #12]
{
 8005ed6:	b087      	sub	sp, #28
  if (ep->is_in == 1U)
 8005ed8:	2901      	cmp	r1, #1
 8005eda:	d000      	beq.n	8005ede <USB_EPStartXfer+0x12>
 8005edc:	e11b      	b.n	8006116 <USB_EPStartXfer+0x24a>
    if (ep->xfer_len > ep->maxpacket)
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	69a7      	ldr	r7, [r4, #24]
 8005ee2:	9302      	str	r3, [sp, #8]
 8005ee4:	429f      	cmp	r7, r3
 8005ee6:	d900      	bls.n	8005eea <USB_EPStartXfer+0x1e>
 8005ee8:	001f      	movs	r7, r3
    if (ep->doublebuffer == 0U)
 8005eea:	002b      	movs	r3, r5
 8005eec:	3350      	adds	r3, #80	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005eee:	6961      	ldr	r1, [r4, #20]
 8005ef0:	9301      	str	r3, [sp, #4]
    if (ep->doublebuffer == 0U)
 8005ef2:	2a00      	cmp	r2, #0
 8005ef4:	d11d      	bne.n	8005f32 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005ef6:	b2bf      	uxth	r7, r7
 8005ef8:	003b      	movs	r3, r7
 8005efa:	88e2      	ldrh	r2, [r4, #6]
 8005efc:	0028      	movs	r0, r5
 8005efe:	f7ff ffd0 	bl	8005ea2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f02:	9b01      	ldr	r3, [sp, #4]
 8005f04:	4abe      	ldr	r2, [pc, #760]	@ (8006200 <USB_EPStartXfer+0x334>)
 8005f06:	8819      	ldrh	r1, [r3, #0]
 8005f08:	7823      	ldrb	r3, [r4, #0]
 8005f0a:	18aa      	adds	r2, r5, r2
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	1852      	adds	r2, r2, r1
 8005f10:	189b      	adds	r3, r3, r2
 8005f12:	801f      	strh	r7, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f14:	7823      	ldrb	r3, [r4, #0]
 8005f16:	4abb      	ldr	r2, [pc, #748]	@ (8006204 <USB_EPStartXfer+0x338>)
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	18eb      	adds	r3, r5, r3
 8005f1c:	8819      	ldrh	r1, [r3, #0]
 8005f1e:	4011      	ands	r1, r2
 8005f20:	2230      	movs	r2, #48	@ 0x30
 8005f22:	404a      	eors	r2, r1
 8005f24:	49b8      	ldr	r1, [pc, #736]	@ (8006208 <USB_EPStartXfer+0x33c>)
 8005f26:	430a      	orrs	r2, r1
 8005f28:	b292      	uxth	r2, r2
 8005f2a:	801a      	strh	r2, [r3, #0]
  return HAL_OK;
 8005f2c:	2000      	movs	r0, #0
}
 8005f2e:	b007      	add	sp, #28
 8005f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f32:	7822      	ldrb	r2, [r4, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 8005f34:	6a26      	ldr	r6, [r4, #32]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f36:	0093      	lsls	r3, r2, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f38:	00d2      	lsls	r2, r2, #3
 8005f3a:	9203      	str	r2, [sp, #12]
      if (ep->type == EP_TYPE_BULK)
 8005f3c:	78e0      	ldrb	r0, [r4, #3]
 8005f3e:	18eb      	adds	r3, r5, r3
 8005f40:	2802      	cmp	r0, #2
 8005f42:	d000      	beq.n	8005f46 <USB_EPStartXfer+0x7a>
 8005f44:	e0d1      	b.n	80060ea <USB_EPStartXfer+0x21e>
        if (ep->xfer_len_db > ep->maxpacket)
 8005f46:	9a02      	ldr	r2, [sp, #8]
 8005f48:	42b2      	cmp	r2, r6
 8005f4a:	d300      	bcc.n	8005f4e <USB_EPStartXfer+0x82>
 8005f4c:	e0bb      	b.n	80060c6 <USB_EPStartXfer+0x1fa>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f4e:	881a      	ldrh	r2, [r3, #0]
 8005f50:	48ae      	ldr	r0, [pc, #696]	@ (800620c <USB_EPStartXfer+0x340>)
          ep->xfer_len_db -= len;
 8005f52:	1bf6      	subs	r6, r6, r7
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f54:	4010      	ands	r0, r2
 8005f56:	4aae      	ldr	r2, [pc, #696]	@ (8006210 <USB_EPStartXfer+0x344>)
 8005f58:	4310      	orrs	r0, r2
 8005f5a:	8018      	strh	r0, [r3, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	2040      	movs	r0, #64	@ 0x40
 8005f60:	469c      	mov	ip, r3
 8005f62:	4662      	mov	r2, ip
 8005f64:	4002      	ands	r2, r0
 8005f66:	9205      	str	r2, [sp, #20]
 8005f68:	4662      	mov	r2, ip
            ep->xfer_buff += len;
 8005f6a:	19cb      	adds	r3, r1, r7
 8005f6c:	9304      	str	r3, [sp, #16]
          ep->xfer_len_db -= len;
 8005f6e:	6226      	str	r6, [r4, #32]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005f70:	b2bb      	uxth	r3, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005f72:	4202      	tst	r2, r0
 8005f74:	d055      	beq.n	8006022 <USB_EPStartXfer+0x156>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005f76:	9a01      	ldr	r2, [sp, #4]
 8005f78:	8812      	ldrh	r2, [r2, #0]
 8005f7a:	4694      	mov	ip, r2
 8005f7c:	4aa5      	ldr	r2, [pc, #660]	@ (8006214 <USB_EPStartXfer+0x348>)
 8005f7e:	18a8      	adds	r0, r5, r2
 8005f80:	9a03      	ldr	r2, [sp, #12]
 8005f82:	4460      	add	r0, ip
 8005f84:	1882      	adds	r2, r0, r2
 8005f86:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f88:	8962      	ldrh	r2, [r4, #10]
 8005f8a:	0028      	movs	r0, r5
 8005f8c:	f7ff ff89 	bl	8005ea2 <USB_WritePMA>
            ep->xfer_buff += len;
 8005f90:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 8005f92:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8005f94:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8005f96:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8005f98:	42b2      	cmp	r2, r6
 8005f9a:	d201      	bcs.n	8005fa0 <USB_EPStartXfer+0xd4>
              ep->xfer_len_db -= len;
 8005f9c:	1bf3      	subs	r3, r6, r7
 8005f9e:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fa0:	7862      	ldrb	r2, [r4, #1]
 8005fa2:	6223      	str	r3, [r4, #32]
 8005fa4:	b2b3      	uxth	r3, r6
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	d12e      	bne.n	8006008 <USB_EPStartXfer+0x13c>
 8005faa:	9a01      	ldr	r2, [sp, #4]
 8005fac:	4994      	ldr	r1, [pc, #592]	@ (8006200 <USB_EPStartXfer+0x334>)
 8005fae:	8810      	ldrh	r0, [r2, #0]
 8005fb0:	7822      	ldrb	r2, [r4, #0]
 8005fb2:	1869      	adds	r1, r5, r1
 8005fb4:	1809      	adds	r1, r1, r0
 8005fb6:	00d2      	lsls	r2, r2, #3
 8005fb8:	1852      	adds	r2, r2, r1
 8005fba:	8811      	ldrh	r1, [r2, #0]
 8005fbc:	0589      	lsls	r1, r1, #22
 8005fbe:	0d89      	lsrs	r1, r1, #22
 8005fc0:	8011      	strh	r1, [r2, #0]
 8005fc2:	2e00      	cmp	r6, #0
 8005fc4:	d10a      	bne.n	8005fdc <USB_EPStartXfer+0x110>
 8005fc6:	2080      	movs	r0, #128	@ 0x80
 8005fc8:	8811      	ldrh	r1, [r2, #0]
 8005fca:	0200      	lsls	r0, r0, #8
 8005fcc:	4301      	orrs	r1, r0
 8005fce:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fd0:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fd2:	9904      	ldr	r1, [sp, #16]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fd4:	0028      	movs	r0, r5
 8005fd6:	f7ff ff64 	bl	8005ea2 <USB_WritePMA>
 8005fda:	e79b      	b.n	8005f14 <USB_EPStartXfer+0x48>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fdc:	2e3e      	cmp	r6, #62	@ 0x3e
 8005fde:	d808      	bhi.n	8005ff2 <USB_EPStartXfer+0x126>
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	0870      	lsrs	r0, r6, #1
 8005fe4:	4031      	ands	r1, r6
 8005fe6:	1840      	adds	r0, r0, r1
 8005fe8:	8811      	ldrh	r1, [r2, #0]
 8005fea:	0280      	lsls	r0, r0, #10
 8005fec:	4301      	orrs	r1, r0
 8005fee:	b289      	uxth	r1, r1
 8005ff0:	e7ed      	b.n	8005fce <USB_EPStartXfer+0x102>
 8005ff2:	201f      	movs	r0, #31
 8005ff4:	4030      	ands	r0, r6
 8005ff6:	0971      	lsrs	r1, r6, #5
 8005ff8:	4246      	negs	r6, r0
 8005ffa:	4170      	adcs	r0, r6
 8005ffc:	1a09      	subs	r1, r1, r0
 8005ffe:	8810      	ldrh	r0, [r2, #0]
 8006000:	0289      	lsls	r1, r1, #10
 8006002:	4308      	orrs	r0, r1
 8006004:	4984      	ldr	r1, [pc, #528]	@ (8006218 <USB_EPStartXfer+0x34c>)
 8006006:	e7f1      	b.n	8005fec <USB_EPStartXfer+0x120>
 8006008:	2a01      	cmp	r2, #1
 800600a:	d1e1      	bne.n	8005fd0 <USB_EPStartXfer+0x104>
 800600c:	002a      	movs	r2, r5
 800600e:	497c      	ldr	r1, [pc, #496]	@ (8006200 <USB_EPStartXfer+0x334>)
 8006010:	3250      	adds	r2, #80	@ 0x50
 8006012:	8810      	ldrh	r0, [r2, #0]
 8006014:	7822      	ldrb	r2, [r4, #0]
 8006016:	1869      	adds	r1, r5, r1
 8006018:	00d2      	lsls	r2, r2, #3
 800601a:	1809      	adds	r1, r1, r0
 800601c:	1852      	adds	r2, r2, r1
 800601e:	8013      	strh	r3, [r2, #0]
 8006020:	e7d6      	b.n	8005fd0 <USB_EPStartXfer+0x104>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006022:	9a01      	ldr	r2, [sp, #4]
 8006024:	8812      	ldrh	r2, [r2, #0]
 8006026:	4694      	mov	ip, r2
 8006028:	4a75      	ldr	r2, [pc, #468]	@ (8006200 <USB_EPStartXfer+0x334>)
 800602a:	18a8      	adds	r0, r5, r2
 800602c:	9a03      	ldr	r2, [sp, #12]
 800602e:	4460      	add	r0, ip
 8006030:	1882      	adds	r2, r0, r2
 8006032:	8013      	strh	r3, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006034:	8922      	ldrh	r2, [r4, #8]
 8006036:	0028      	movs	r0, r5
 8006038:	f7ff ff33 	bl	8005ea2 <USB_WritePMA>
            ep->xfer_buff += len;
 800603c:	9b04      	ldr	r3, [sp, #16]
            if (ep->xfer_len_db > ep->maxpacket)
 800603e:	9a02      	ldr	r2, [sp, #8]
            ep->xfer_buff += len;
 8006040:	6163      	str	r3, [r4, #20]
              ep->xfer_len_db = 0U;
 8006042:	9b05      	ldr	r3, [sp, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8006044:	42b2      	cmp	r2, r6
 8006046:	d201      	bcs.n	800604c <USB_EPStartXfer+0x180>
              ep->xfer_len_db -= len;
 8006048:	1bf3      	subs	r3, r6, r7
 800604a:	003e      	movs	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800604c:	7862      	ldrb	r2, [r4, #1]
 800604e:	6223      	str	r3, [r4, #32]
 8006050:	b2b3      	uxth	r3, r6
 8006052:	2a00      	cmp	r2, #0
 8006054:	d12a      	bne.n	80060ac <USB_EPStartXfer+0x1e0>
 8006056:	9a01      	ldr	r2, [sp, #4]
 8006058:	496e      	ldr	r1, [pc, #440]	@ (8006214 <USB_EPStartXfer+0x348>)
 800605a:	8810      	ldrh	r0, [r2, #0]
 800605c:	7822      	ldrb	r2, [r4, #0]
 800605e:	1869      	adds	r1, r5, r1
 8006060:	1809      	adds	r1, r1, r0
 8006062:	00d2      	lsls	r2, r2, #3
 8006064:	1852      	adds	r2, r2, r1
 8006066:	8811      	ldrh	r1, [r2, #0]
 8006068:	0589      	lsls	r1, r1, #22
 800606a:	0d89      	lsrs	r1, r1, #22
 800606c:	8011      	strh	r1, [r2, #0]
 800606e:	2e00      	cmp	r6, #0
 8006070:	d106      	bne.n	8006080 <USB_EPStartXfer+0x1b4>
 8006072:	2080      	movs	r0, #128	@ 0x80
 8006074:	8811      	ldrh	r1, [r2, #0]
 8006076:	0200      	lsls	r0, r0, #8
 8006078:	4301      	orrs	r1, r0
 800607a:	8011      	strh	r1, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800607c:	8962      	ldrh	r2, [r4, #10]
 800607e:	e7a8      	b.n	8005fd2 <USB_EPStartXfer+0x106>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006080:	2e3e      	cmp	r6, #62	@ 0x3e
 8006082:	d808      	bhi.n	8006096 <USB_EPStartXfer+0x1ca>
 8006084:	2101      	movs	r1, #1
 8006086:	0870      	lsrs	r0, r6, #1
 8006088:	4031      	ands	r1, r6
 800608a:	1840      	adds	r0, r0, r1
 800608c:	8811      	ldrh	r1, [r2, #0]
 800608e:	0280      	lsls	r0, r0, #10
 8006090:	4301      	orrs	r1, r0
 8006092:	b289      	uxth	r1, r1
 8006094:	e7f1      	b.n	800607a <USB_EPStartXfer+0x1ae>
 8006096:	201f      	movs	r0, #31
 8006098:	0971      	lsrs	r1, r6, #5
 800609a:	4006      	ands	r6, r0
 800609c:	4270      	negs	r0, r6
 800609e:	4146      	adcs	r6, r0
 80060a0:	8810      	ldrh	r0, [r2, #0]
 80060a2:	1b89      	subs	r1, r1, r6
 80060a4:	0289      	lsls	r1, r1, #10
 80060a6:	4308      	orrs	r0, r1
 80060a8:	495b      	ldr	r1, [pc, #364]	@ (8006218 <USB_EPStartXfer+0x34c>)
 80060aa:	e7f1      	b.n	8006090 <USB_EPStartXfer+0x1c4>
 80060ac:	2a01      	cmp	r2, #1
 80060ae:	d1e5      	bne.n	800607c <USB_EPStartXfer+0x1b0>
 80060b0:	002a      	movs	r2, r5
 80060b2:	4958      	ldr	r1, [pc, #352]	@ (8006214 <USB_EPStartXfer+0x348>)
 80060b4:	3250      	adds	r2, #80	@ 0x50
 80060b6:	8810      	ldrh	r0, [r2, #0]
 80060b8:	7822      	ldrb	r2, [r4, #0]
 80060ba:	1869      	adds	r1, r5, r1
 80060bc:	00d2      	lsls	r2, r2, #3
 80060be:	1809      	adds	r1, r1, r0
 80060c0:	1852      	adds	r2, r2, r1
 80060c2:	8013      	strh	r3, [r2, #0]
 80060c4:	e7da      	b.n	800607c <USB_EPStartXfer+0x1b0>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80060c6:	8818      	ldrh	r0, [r3, #0]
 80060c8:	4f54      	ldr	r7, [pc, #336]	@ (800621c <USB_EPStartXfer+0x350>)
 80060ca:	4a4f      	ldr	r2, [pc, #316]	@ (8006208 <USB_EPStartXfer+0x33c>)
 80060cc:	4038      	ands	r0, r7
 80060ce:	4310      	orrs	r0, r2
 80060d0:	b280      	uxth	r0, r0
 80060d2:	8018      	strh	r0, [r3, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80060d4:	9b01      	ldr	r3, [sp, #4]
 80060d6:	9a03      	ldr	r2, [sp, #12]
 80060d8:	8818      	ldrh	r0, [r3, #0]
 80060da:	4b49      	ldr	r3, [pc, #292]	@ (8006200 <USB_EPStartXfer+0x334>)
 80060dc:	18eb      	adds	r3, r5, r3
 80060de:	181b      	adds	r3, r3, r0
 80060e0:	189a      	adds	r2, r3, r2
 80060e2:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060e4:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060e6:	8922      	ldrh	r2, [r4, #8]
 80060e8:	e774      	b.n	8005fd4 <USB_EPStartXfer+0x108>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060ea:	8818      	ldrh	r0, [r3, #0]
        ep->xfer_len_db -= len;
 80060ec:	1bf6      	subs	r6, r6, r7
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060ee:	9a01      	ldr	r2, [sp, #4]
        ep->xfer_len_db -= len;
 80060f0:	6226      	str	r6, [r4, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060f2:	8816      	ldrh	r6, [r2, #0]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80060f4:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80060f6:	0640      	lsls	r0, r0, #25
 80060f8:	d507      	bpl.n	800610a <USB_EPStartXfer+0x23e>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060fa:	4a46      	ldr	r2, [pc, #280]	@ (8006214 <USB_EPStartXfer+0x348>)
 80060fc:	18a8      	adds	r0, r5, r2
 80060fe:	9a03      	ldr	r2, [sp, #12]
 8006100:	1980      	adds	r0, r0, r6
 8006102:	1882      	adds	r2, r0, r2
 8006104:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006106:	8962      	ldrh	r2, [r4, #10]
 8006108:	e764      	b.n	8005fd4 <USB_EPStartXfer+0x108>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800610a:	4a3d      	ldr	r2, [pc, #244]	@ (8006200 <USB_EPStartXfer+0x334>)
 800610c:	18a8      	adds	r0, r5, r2
 800610e:	9a03      	ldr	r2, [sp, #12]
 8006110:	1980      	adds	r0, r0, r6
 8006112:	1882      	adds	r2, r0, r2
 8006114:	e7e6      	b.n	80060e4 <USB_EPStartXfer+0x218>
    if (ep->doublebuffer == 0U)
 8006116:	2a00      	cmp	r2, #0
 8006118:	d11c      	bne.n	8006154 <USB_EPStartXfer+0x288>
      if (ep->xfer_len > ep->maxpacket)
 800611a:	69a3      	ldr	r3, [r4, #24]
 800611c:	6921      	ldr	r1, [r4, #16]
 800611e:	428b      	cmp	r3, r1
 8006120:	d901      	bls.n	8006126 <USB_EPStartXfer+0x25a>
        ep->xfer_len -= len;
 8006122:	1a5a      	subs	r2, r3, r1
        len = ep->maxpacket;
 8006124:	000b      	movs	r3, r1
 8006126:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006128:	002a      	movs	r2, r5
 800612a:	493a      	ldr	r1, [pc, #232]	@ (8006214 <USB_EPStartXfer+0x348>)
 800612c:	3250      	adds	r2, #80	@ 0x50
 800612e:	8810      	ldrh	r0, [r2, #0]
 8006130:	7822      	ldrb	r2, [r4, #0]
 8006132:	1869      	adds	r1, r5, r1
 8006134:	00d2      	lsls	r2, r2, #3
 8006136:	1809      	adds	r1, r1, r0
 8006138:	1852      	adds	r2, r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800613a:	8811      	ldrh	r1, [r2, #0]
 800613c:	0589      	lsls	r1, r1, #22
 800613e:	0d89      	lsrs	r1, r1, #22
 8006140:	8011      	strh	r1, [r2, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d000      	beq.n	8006148 <USB_EPStartXfer+0x27c>
 8006146:	e0d6      	b.n	80062f6 <USB_EPStartXfer+0x42a>
 8006148:	2180      	movs	r1, #128	@ 0x80
 800614a:	8813      	ldrh	r3, [r2, #0]
 800614c:	0209      	lsls	r1, r1, #8
 800614e:	430b      	orrs	r3, r1
 8006150:	8013      	strh	r3, [r2, #0]
 8006152:	e03d      	b.n	80061d0 <USB_EPStartXfer+0x304>
      if (ep->type == EP_TYPE_BULK)
 8006154:	78e3      	ldrb	r3, [r4, #3]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d000      	beq.n	800615c <USB_EPStartXfer+0x290>
 800615a:	e08c      	b.n	8006276 <USB_EPStartXfer+0x3aa>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800615c:	2900      	cmp	r1, #0
 800615e:	d124      	bne.n	80061aa <USB_EPStartXfer+0x2de>
 8006160:	0006      	movs	r6, r0
 8006162:	4a27      	ldr	r2, [pc, #156]	@ (8006200 <USB_EPStartXfer+0x334>)
 8006164:	3650      	adds	r6, #80	@ 0x50
 8006166:	8833      	ldrh	r3, [r6, #0]
 8006168:	7820      	ldrb	r0, [r4, #0]
 800616a:	18aa      	adds	r2, r5, r2
 800616c:	18d2      	adds	r2, r2, r3
 800616e:	00c0      	lsls	r0, r0, #3
 8006170:	1812      	adds	r2, r2, r0
 8006172:	8813      	ldrh	r3, [r2, #0]
 8006174:	059b      	lsls	r3, r3, #22
 8006176:	0d9b      	lsrs	r3, r3, #22
 8006178:	8013      	strh	r3, [r2, #0]
 800617a:	6923      	ldr	r3, [r4, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d134      	bne.n	80061ea <USB_EPStartXfer+0x31e>
 8006180:	2780      	movs	r7, #128	@ 0x80
 8006182:	8811      	ldrh	r1, [r2, #0]
 8006184:	023f      	lsls	r7, r7, #8
 8006186:	4339      	orrs	r1, r7
 8006188:	8011      	strh	r1, [r2, #0]
 800618a:	4a22      	ldr	r2, [pc, #136]	@ (8006214 <USB_EPStartXfer+0x348>)
 800618c:	8831      	ldrh	r1, [r6, #0]
 800618e:	18aa      	adds	r2, r5, r2
 8006190:	1852      	adds	r2, r2, r1
 8006192:	1812      	adds	r2, r2, r0
 8006194:	8811      	ldrh	r1, [r2, #0]
 8006196:	0589      	lsls	r1, r1, #22
 8006198:	0d89      	lsrs	r1, r1, #22
 800619a:	8011      	strh	r1, [r2, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d154      	bne.n	800624a <USB_EPStartXfer+0x37e>
 80061a0:	2180      	movs	r1, #128	@ 0x80
 80061a2:	8813      	ldrh	r3, [r2, #0]
 80061a4:	0209      	lsls	r1, r1, #8
 80061a6:	430b      	orrs	r3, r1
 80061a8:	8013      	strh	r3, [r2, #0]
        if (ep->xfer_count != 0U)
 80061aa:	69e3      	ldr	r3, [r4, #28]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00f      	beq.n	80061d0 <USB_EPStartXfer+0x304>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80061b0:	7823      	ldrb	r3, [r4, #0]
 80061b2:	491b      	ldr	r1, [pc, #108]	@ (8006220 <USB_EPStartXfer+0x354>)
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	18eb      	adds	r3, r5, r3
 80061b8:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061ba:	400a      	ands	r2, r1
 80061bc:	428a      	cmp	r2, r1
 80061be:	d001      	beq.n	80061c4 <USB_EPStartXfer+0x2f8>
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	d105      	bne.n	80061d0 <USB_EPStartXfer+0x304>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80061c4:	881a      	ldrh	r2, [r3, #0]
 80061c6:	4911      	ldr	r1, [pc, #68]	@ (800620c <USB_EPStartXfer+0x340>)
 80061c8:	400a      	ands	r2, r1
 80061ca:	4916      	ldr	r1, [pc, #88]	@ (8006224 <USB_EPStartXfer+0x358>)
 80061cc:	430a      	orrs	r2, r1
 80061ce:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061d0:	7823      	ldrb	r3, [r4, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	18ed      	adds	r5, r5, r3
 80061d6:	882a      	ldrh	r2, [r5, #0]
 80061d8:	4b13      	ldr	r3, [pc, #76]	@ (8006228 <USB_EPStartXfer+0x35c>)
 80061da:	401a      	ands	r2, r3
 80061dc:	23c0      	movs	r3, #192	@ 0xc0
 80061de:	019b      	lsls	r3, r3, #6
 80061e0:	4053      	eors	r3, r2
 80061e2:	4a12      	ldr	r2, [pc, #72]	@ (800622c <USB_EPStartXfer+0x360>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	802b      	strh	r3, [r5, #0]
 80061e8:	e6a0      	b.n	8005f2c <USB_EPStartXfer+0x60>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80061ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80061ec:	d820      	bhi.n	8006230 <USB_EPStartXfer+0x364>
 80061ee:	2101      	movs	r1, #1
 80061f0:	085f      	lsrs	r7, r3, #1
 80061f2:	4019      	ands	r1, r3
 80061f4:	187f      	adds	r7, r7, r1
 80061f6:	8811      	ldrh	r1, [r2, #0]
 80061f8:	02bf      	lsls	r7, r7, #10
 80061fa:	4339      	orrs	r1, r7
 80061fc:	b289      	uxth	r1, r1
 80061fe:	e7c3      	b.n	8006188 <USB_EPStartXfer+0x2bc>
 8006200:	00000402 	.word	0x00000402
 8006204:	ffff8fbf 	.word	0xffff8fbf
 8006208:	ffff8080 	.word	0xffff8080
 800620c:	ffff8f8f 	.word	0xffff8f8f
 8006210:	00008180 	.word	0x00008180
 8006214:	00000406 	.word	0x00000406
 8006218:	ffff8000 	.word	0xffff8000
 800621c:	ffff8e8f 	.word	0xffff8e8f
 8006220:	00004040 	.word	0x00004040
 8006224:	000080c0 	.word	0x000080c0
 8006228:	ffffbf8f 	.word	0xffffbf8f
 800622c:	00008080 	.word	0x00008080
 8006230:	271f      	movs	r7, #31
 8006232:	401f      	ands	r7, r3
 8006234:	0039      	movs	r1, r7
 8006236:	424f      	negs	r7, r1
 8006238:	414f      	adcs	r7, r1
 800623a:	0959      	lsrs	r1, r3, #5
 800623c:	1bc9      	subs	r1, r1, r7
 800623e:	8817      	ldrh	r7, [r2, #0]
 8006240:	9101      	str	r1, [sp, #4]
 8006242:	0289      	lsls	r1, r1, #10
 8006244:	430f      	orrs	r7, r1
 8006246:	4937      	ldr	r1, [pc, #220]	@ (8006324 <USB_EPStartXfer+0x458>)
 8006248:	e7d7      	b.n	80061fa <USB_EPStartXfer+0x32e>
 800624a:	2b3e      	cmp	r3, #62	@ 0x3e
 800624c:	d808      	bhi.n	8006260 <USB_EPStartXfer+0x394>
 800624e:	2001      	movs	r0, #1
 8006250:	0859      	lsrs	r1, r3, #1
 8006252:	4003      	ands	r3, r0
 8006254:	18c9      	adds	r1, r1, r3
 8006256:	8813      	ldrh	r3, [r2, #0]
 8006258:	0289      	lsls	r1, r1, #10
 800625a:	430b      	orrs	r3, r1
 800625c:	b29b      	uxth	r3, r3
 800625e:	e7a3      	b.n	80061a8 <USB_EPStartXfer+0x2dc>
 8006260:	201f      	movs	r0, #31
 8006262:	0959      	lsrs	r1, r3, #5
 8006264:	4003      	ands	r3, r0
 8006266:	4258      	negs	r0, r3
 8006268:	4143      	adcs	r3, r0
 800626a:	1ac9      	subs	r1, r1, r3
 800626c:	8813      	ldrh	r3, [r2, #0]
 800626e:	0289      	lsls	r1, r1, #10
 8006270:	4319      	orrs	r1, r3
 8006272:	4b2c      	ldr	r3, [pc, #176]	@ (8006324 <USB_EPStartXfer+0x458>)
 8006274:	e7f1      	b.n	800625a <USB_EPStartXfer+0x38e>
        return HAL_ERROR;
 8006276:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8006278:	4283      	cmp	r3, r0
 800627a:	d000      	beq.n	800627e <USB_EPStartXfer+0x3b2>
 800627c:	e657      	b.n	8005f2e <USB_EPStartXfer+0x62>
        if (ep->xfer_len > ep->maxpacket)
 800627e:	69a3      	ldr	r3, [r4, #24]
 8006280:	6922      	ldr	r2, [r4, #16]
          ep->xfer_len = 0U;
 8006282:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <USB_EPStartXfer+0x3c0>
          ep->xfer_len -= len;
 8006288:	1a98      	subs	r0, r3, r2
          len = ep->maxpacket;
 800628a:	0013      	movs	r3, r2
 800628c:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800628e:	2900      	cmp	r1, #0
 8006290:	d19e      	bne.n	80061d0 <USB_EPStartXfer+0x304>
 8006292:	002e      	movs	r6, r5
 8006294:	4a24      	ldr	r2, [pc, #144]	@ (8006328 <USB_EPStartXfer+0x45c>)
 8006296:	3650      	adds	r6, #80	@ 0x50
 8006298:	8831      	ldrh	r1, [r6, #0]
 800629a:	7820      	ldrb	r0, [r4, #0]
 800629c:	18aa      	adds	r2, r5, r2
 800629e:	1852      	adds	r2, r2, r1
 80062a0:	00c0      	lsls	r0, r0, #3
 80062a2:	1812      	adds	r2, r2, r0
 80062a4:	8811      	ldrh	r1, [r2, #0]
 80062a6:	0589      	lsls	r1, r1, #22
 80062a8:	0d89      	lsrs	r1, r1, #22
 80062aa:	8011      	strh	r1, [r2, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <USB_EPStartXfer+0x3fa>
 80062b0:	2780      	movs	r7, #128	@ 0x80
 80062b2:	8811      	ldrh	r1, [r2, #0]
 80062b4:	023f      	lsls	r7, r7, #8
 80062b6:	4339      	orrs	r1, r7
 80062b8:	8011      	strh	r1, [r2, #0]
 80062ba:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <USB_EPStartXfer+0x460>)
 80062bc:	8831      	ldrh	r1, [r6, #0]
 80062be:	18aa      	adds	r2, r5, r2
 80062c0:	1852      	adds	r2, r2, r1
 80062c2:	1812      	adds	r2, r2, r0
 80062c4:	e739      	b.n	800613a <USB_EPStartXfer+0x26e>
 80062c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80062c8:	d808      	bhi.n	80062dc <USB_EPStartXfer+0x410>
 80062ca:	2101      	movs	r1, #1
 80062cc:	085f      	lsrs	r7, r3, #1
 80062ce:	4019      	ands	r1, r3
 80062d0:	187f      	adds	r7, r7, r1
 80062d2:	8811      	ldrh	r1, [r2, #0]
 80062d4:	02bf      	lsls	r7, r7, #10
 80062d6:	4339      	orrs	r1, r7
 80062d8:	b289      	uxth	r1, r1
 80062da:	e7ed      	b.n	80062b8 <USB_EPStartXfer+0x3ec>
 80062dc:	271f      	movs	r7, #31
 80062de:	401f      	ands	r7, r3
 80062e0:	0039      	movs	r1, r7
 80062e2:	424f      	negs	r7, r1
 80062e4:	414f      	adcs	r7, r1
 80062e6:	0959      	lsrs	r1, r3, #5
 80062e8:	1bc9      	subs	r1, r1, r7
 80062ea:	8817      	ldrh	r7, [r2, #0]
 80062ec:	9101      	str	r1, [sp, #4]
 80062ee:	0289      	lsls	r1, r1, #10
 80062f0:	430f      	orrs	r7, r1
 80062f2:	490c      	ldr	r1, [pc, #48]	@ (8006324 <USB_EPStartXfer+0x458>)
 80062f4:	e7ef      	b.n	80062d6 <USB_EPStartXfer+0x40a>
 80062f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80062f8:	d808      	bhi.n	800630c <USB_EPStartXfer+0x440>
 80062fa:	2001      	movs	r0, #1
 80062fc:	0859      	lsrs	r1, r3, #1
 80062fe:	4003      	ands	r3, r0
 8006300:	18c9      	adds	r1, r1, r3
 8006302:	8813      	ldrh	r3, [r2, #0]
 8006304:	0289      	lsls	r1, r1, #10
 8006306:	430b      	orrs	r3, r1
 8006308:	b29b      	uxth	r3, r3
 800630a:	e721      	b.n	8006150 <USB_EPStartXfer+0x284>
 800630c:	201f      	movs	r0, #31
 800630e:	0959      	lsrs	r1, r3, #5
 8006310:	4003      	ands	r3, r0
 8006312:	4258      	negs	r0, r3
 8006314:	4143      	adcs	r3, r0
 8006316:	1ac9      	subs	r1, r1, r3
 8006318:	8813      	ldrh	r3, [r2, #0]
 800631a:	0289      	lsls	r1, r1, #10
 800631c:	4319      	orrs	r1, r3
 800631e:	4b01      	ldr	r3, [pc, #4]	@ (8006324 <USB_EPStartXfer+0x458>)
 8006320:	e7f1      	b.n	8006306 <USB_EPStartXfer+0x43a>
 8006322:	46c0      	nop			@ (mov r8, r8)
 8006324:	ffff8000 	.word	0xffff8000
 8006328:	00000402 	.word	0x00000402
 800632c:	00000406 	.word	0x00000406

08006330 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006330:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006332:	2580      	movs	r5, #128	@ 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006334:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006336:	00ed      	lsls	r5, r5, #3
 8006338:	1952      	adds	r2, r2, r5

  for (count = n; count != 0U; count--)
 800633a:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 800633c:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800633e:	1880      	adds	r0, r0, r2
  for (count = n; count != 0U; count--)
 8006340:	1a47      	subs	r7, r0, r1
 8006342:	19ea      	adds	r2, r5, r7
 8006344:	2e00      	cmp	r6, #0
 8006346:	d106      	bne.n	8006356 <USB_ReadPMA+0x26>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006348:	07db      	lsls	r3, r3, #31
 800634a:	d503      	bpl.n	8006354 <USB_ReadPMA+0x24>
 800634c:	0064      	lsls	r4, r4, #1
  {
    RdVal = *pdwVal;
 800634e:	1900      	adds	r0, r0, r4
 8006350:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006352:	550b      	strb	r3, [r1, r4]
  }
}
 8006354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8006356:	8812      	ldrh	r2, [r2, #0]
  for (count = n; count != 0U; count--)
 8006358:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 800635a:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800635c:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800635e:	0a12      	lsrs	r2, r2, #8
 8006360:	706a      	strb	r2, [r5, #1]
    pBuf++;
 8006362:	3502      	adds	r5, #2
  for (count = n; count != 0U; count--)
 8006364:	e7ed      	b.n	8006342 <USB_ReadPMA+0x12>
	...

08006368 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006368:	23af      	movs	r3, #175	@ 0xaf
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	58c3      	ldr	r3, [r0, r3]
{
 800636e:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00e      	beq.n	8006392 <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006374:	22ae      	movs	r2, #174	@ 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006376:	2580      	movs	r5, #128	@ 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006378:	0092      	lsls	r2, r2, #2
 800637a:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800637c:	00ad      	lsls	r5, r5, #2
 800637e:	5d60      	ldrb	r0, [r4, r5]
 8006380:	28ff      	cmp	r0, #255	@ 0xff
 8006382:	d006      	beq.n	8006392 <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006384:	4a04      	ldr	r2, [pc, #16]	@ (8006398 <USBD_CDC_EP0_RxReady+0x30>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	0021      	movs	r1, r4
 800638a:	5ca2      	ldrb	r2, [r4, r2]
 800638c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800638e:	23ff      	movs	r3, #255	@ 0xff
 8006390:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 8006392:	2000      	movs	r0, #0
 8006394:	bd70      	pop	{r4, r5, r6, pc}
 8006396:	46c0      	nop			@ (mov r8, r8)
 8006398:	00000201 	.word	0x00000201

0800639c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800639c:	2343      	movs	r3, #67	@ 0x43
 800639e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
 80063a0:	4800      	ldr	r0, [pc, #0]	@ (80063a4 <USBD_CDC_GetFSCfgDesc+0x8>)
}
 80063a2:	4770      	bx	lr
 80063a4:	2000006c 	.word	0x2000006c

080063a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80063a8:	2343      	movs	r3, #67	@ 0x43
 80063aa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
 80063ac:	4800      	ldr	r0, [pc, #0]	@ (80063b0 <USBD_CDC_GetHSCfgDesc+0x8>)
}
 80063ae:	4770      	bx	lr
 80063b0:	200000b0 	.word	0x200000b0

080063b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80063b4:	2343      	movs	r3, #67	@ 0x43
 80063b6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80063b8:	4800      	ldr	r0, [pc, #0]	@ (80063bc <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
}
 80063ba:	4770      	bx	lr
 80063bc:	20000028 	.word	0x20000028

080063c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80063c0:	230a      	movs	r3, #10
 80063c2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80063c4:	4800      	ldr	r0, [pc, #0]	@ (80063c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
}
 80063c6:	4770      	bx	lr
 80063c8:	2000012c 	.word	0x2000012c

080063cc <USBD_CDC_DataOut>:
{
 80063cc:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063ce:	26ae      	movs	r6, #174	@ 0xae
 80063d0:	00b6      	lsls	r6, r6, #2
{
 80063d2:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063d4:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063d6:	f000 ff63 	bl	80072a0 <USBD_LL_GetRxDataSize>
 80063da:	2383      	movs	r3, #131	@ 0x83
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 80063e0:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 80063e2:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00a      	beq.n	80063fe <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063e8:	2383      	movs	r3, #131	@ 0x83
 80063ea:	2281      	movs	r2, #129	@ 0x81
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	18e9      	adds	r1, r5, r3
 80063f0:	33b0      	adds	r3, #176	@ 0xb0
 80063f2:	58e3      	ldr	r3, [r4, r3]
 80063f4:	0092      	lsls	r2, r2, #2
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	58a8      	ldr	r0, [r5, r2]
 80063fa:	4798      	blx	r3
    return USBD_OK;
 80063fc:	2000      	movs	r0, #0
}
 80063fe:	bd70      	pop	{r4, r5, r6, pc}

08006400 <USBD_CDC_DataIn>:
{
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006402:	23ae      	movs	r3, #174	@ 0xae
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	58c7      	ldr	r7, [r0, r3]
{
 8006408:	0004      	movs	r4, r0
 800640a:	000e      	movs	r6, r1
    return USBD_FAIL;
 800640c:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 800640e:	2f00      	cmp	r7, #0
 8006410:	d016      	beq.n	8006440 <USBD_CDC_DataIn+0x40>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006412:	2514      	movs	r5, #20
 8006414:	434d      	muls	r5, r1
 8006416:	1965      	adds	r5, r4, r5
 8006418:	69e8      	ldr	r0, [r5, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800641a:	3308      	adds	r3, #8
 800641c:	58e3      	ldr	r3, [r4, r3]
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800641e:	2800      	cmp	r0, #0
 8006420:	d00f      	beq.n	8006442 <USBD_CDC_DataIn+0x42>
 8006422:	2228      	movs	r2, #40	@ 0x28
 8006424:	434a      	muls	r2, r1
 8006426:	189b      	adds	r3, r3, r2
 8006428:	6a19      	ldr	r1, [r3, #32]
 800642a:	f7f9 ff23 	bl	8000274 <__aeabi_uidivmod>
 800642e:	1e0a      	subs	r2, r1, #0
 8006430:	d107      	bne.n	8006442 <USBD_CDC_DataIn+0x42>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006432:	000b      	movs	r3, r1
      pdev->ep_in[epnum].total_length = 0U;
 8006434:	61e9      	str	r1, [r5, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006436:	0020      	movs	r0, r4
 8006438:	0031      	movs	r1, r6
 800643a:	f000 ff1f 	bl	800727c <USBD_LL_Transmit>
    return USBD_OK;
 800643e:	2000      	movs	r0, #0
}
 8006440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8006442:	2385      	movs	r3, #133	@ 0x85
 8006444:	2200      	movs	r2, #0
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	50fa      	str	r2, [r7, r3]
 800644a:	e7f8      	b.n	800643e <USBD_CDC_DataIn+0x3e>

0800644c <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800644c:	23ae      	movs	r3, #174	@ 0xae
{
 800644e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	58c6      	ldr	r6, [r0, r3]
  uint8_t ifalt = 0U;
 8006454:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 8006456:	466a      	mov	r2, sp
{
 8006458:	000d      	movs	r5, r1
  uint8_t ifalt = 0U;
 800645a:	1d59      	adds	r1, r3, #5
 800645c:	2300      	movs	r3, #0
{
 800645e:	0004      	movs	r4, r0
  uint8_t ifalt = 0U;
 8006460:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 8006462:	80d3      	strh	r3, [r2, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006464:	782b      	ldrb	r3, [r5, #0]
  uint16_t status_info = 0U;
 8006466:	1d90      	adds	r0, r2, #6
 8006468:	001f      	movs	r7, r3
 800646a:	2260      	movs	r2, #96	@ 0x60
 800646c:	4017      	ands	r7, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800646e:	4213      	tst	r3, r2
 8006470:	d026      	beq.n	80064c0 <USBD_CDC_Setup+0x74>
 8006472:	2f20      	cmp	r7, #32
 8006474:	d13f      	bne.n	80064f6 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8006476:	88ea      	ldrh	r2, [r5, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006478:	7868      	ldrb	r0, [r5, #1]
      if (req->wLength)
 800647a:	2a00      	cmp	r2, #0
 800647c:	d019      	beq.n	80064b2 <USBD_CDC_Setup+0x66>
        if (req->bmRequest & 0x80U)
 800647e:	b25b      	sxtb	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	da0b      	bge.n	800649c <USBD_CDC_Setup+0x50>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006484:	23af      	movs	r3, #175	@ 0xaf
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	58e3      	ldr	r3, [r4, r3]
 800648a:	0031      	movs	r1, r6
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006490:	0031      	movs	r1, r6
 8006492:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006494:	0020      	movs	r0, r4
 8006496:	f000 fca0 	bl	8006dda <USBD_CtlSendData>
 800649a:	e008      	b.n	80064ae <USBD_CDC_Setup+0x62>
          hcdc->CmdOpCode = req->bRequest;
 800649c:	2380      	movs	r3, #128	@ 0x80
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	54f0      	strb	r0, [r6, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80064a2:	4b18      	ldr	r3, [pc, #96]	@ (8006504 <USBD_CDC_Setup+0xb8>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064a4:	0031      	movs	r1, r6
 80064a6:	0020      	movs	r0, r4
          hcdc->CmdLength = (uint8_t)req->wLength;
 80064a8:	54f2      	strb	r2, [r6, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80064aa:	f000 fcac 	bl	8006e06 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80064ae:	2000      	movs	r0, #0
}
 80064b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064b2:	23af      	movs	r3, #175	@ 0xaf
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	58e3      	ldr	r3, [r4, r3]
 80064b8:	0029      	movs	r1, r5
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4798      	blx	r3
 80064be:	e7f6      	b.n	80064ae <USBD_CDC_Setup+0x62>
      switch (req->bRequest)
 80064c0:	786b      	ldrb	r3, [r5, #1]
 80064c2:	2b0a      	cmp	r3, #10
 80064c4:	d00b      	beq.n	80064de <USBD_CDC_Setup+0x92>
 80064c6:	2b0b      	cmp	r3, #11
 80064c8:	d010      	beq.n	80064ec <USBD_CDC_Setup+0xa0>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d113      	bne.n	80064f6 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064ce:	23a7      	movs	r3, #167	@ 0xa7
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	5ce3      	ldrb	r3, [r4, r3]
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d10e      	bne.n	80064f6 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80064d8:	2202      	movs	r2, #2
 80064da:	0001      	movs	r1, r0
 80064dc:	e7da      	b.n	8006494 <USBD_CDC_Setup+0x48>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064de:	23a7      	movs	r3, #167	@ 0xa7
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	5ce3      	ldrb	r3, [r4, r3]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d106      	bne.n	80064f6 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80064e8:	2201      	movs	r2, #1
 80064ea:	e7d3      	b.n	8006494 <USBD_CDC_Setup+0x48>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80064ec:	23a7      	movs	r3, #167	@ 0xa7
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	5ce3      	ldrb	r3, [r4, r3]
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d0db      	beq.n	80064ae <USBD_CDC_Setup+0x62>
          USBD_CtlError(pdev, req);
 80064f6:	0020      	movs	r0, r4
 80064f8:	0029      	movs	r1, r5
 80064fa:	f000 fc47 	bl	8006d8c <USBD_CtlError>
            ret = USBD_FAIL;
 80064fe:	2002      	movs	r0, #2
 8006500:	e7d6      	b.n	80064b0 <USBD_CDC_Setup+0x64>
 8006502:	46c0      	nop			@ (mov r8, r8)
 8006504:	00000201 	.word	0x00000201

08006508 <USBD_CDC_DeInit>:
{
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800650c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800650e:	2181      	movs	r1, #129	@ 0x81
 8006510:	f000 fe7d 	bl	800720e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006514:	2101      	movs	r1, #1
 8006516:	0020      	movs	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006518:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800651a:	f000 fe78 	bl	800720e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800651e:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 8006520:	26ae      	movs	r6, #174	@ 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006522:	33fc      	adds	r3, #252	@ 0xfc
 8006524:	671d      	str	r5, [r3, #112]	@ 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006526:	2182      	movs	r1, #130	@ 0x82
 8006528:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 800652a:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800652c:	f000 fe6f 	bl	800720e <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8006530:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006532:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8006534:	42ab      	cmp	r3, r5
 8006536:	d008      	beq.n	800654a <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006538:	23af      	movs	r3, #175	@ 0xaf
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	58e3      	ldr	r3, [r4, r3]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006542:	59a0      	ldr	r0, [r4, r6]
 8006544:	f000 feb8 	bl	80072b8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006548:	51a5      	str	r5, [r4, r6]
}
 800654a:	2000      	movs	r0, #0
 800654c:	bd70      	pop	{r4, r5, r6, pc}

0800654e <USBD_CDC_Init>:
{
 800654e:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006550:	7c03      	ldrb	r3, [r0, #16]
{
 8006552:	0004      	movs	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006554:	2b00      	cmp	r3, #0
 8006556:	d13a      	bne.n	80065ce <USBD_CDC_Init+0x80>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006558:	2380      	movs	r3, #128	@ 0x80
 800655a:	2181      	movs	r1, #129	@ 0x81
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	2202      	movs	r2, #2
 8006560:	f000 fe49 	bl	80071f6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006564:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006566:	2380      	movs	r3, #128	@ 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006568:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800656a:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800656c:	2202      	movs	r2, #2
 800656e:	0020      	movs	r0, r4
 8006570:	f000 fe41 	bl	80071f6 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006574:	0023      	movs	r3, r4
 8006576:	2601      	movs	r6, #1
 8006578:	33fc      	adds	r3, #252	@ 0xfc
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800657a:	2203      	movs	r2, #3
 800657c:	2182      	movs	r1, #130	@ 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800657e:	671e      	str	r6, [r3, #112]	@ 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006580:	0020      	movs	r0, r4
 8006582:	2308      	movs	r3, #8
 8006584:	f000 fe37 	bl	80071f6 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006588:	2087      	movs	r0, #135	@ 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800658a:	6426      	str	r6, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800658c:	0080      	lsls	r0, r0, #2
 800658e:	f000 fe8f 	bl	80072b0 <USBD_static_malloc>
 8006592:	23ae      	movs	r3, #174	@ 0xae
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	0005      	movs	r5, r0
 8006598:	50e0      	str	r0, [r4, r3]
    ret = 1U;
 800659a:	0030      	movs	r0, r6
  if (pdev->pClassData == NULL)
 800659c:	2d00      	cmp	r5, #0
 800659e:	d015      	beq.n	80065cc <USBD_CDC_Init+0x7e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065a0:	3304      	adds	r3, #4
 80065a2:	58e3      	ldr	r3, [r4, r3]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4798      	blx	r3
    hcdc->TxState = 0U;
 80065a8:	2285      	movs	r2, #133	@ 0x85
 80065aa:	2300      	movs	r3, #0
 80065ac:	0092      	lsls	r2, r2, #2
 80065ae:	50ab      	str	r3, [r5, r2]
    hcdc->RxState = 0U;
 80065b0:	3204      	adds	r2, #4
 80065b2:	50ab      	str	r3, [r5, r2]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065b4:	7c23      	ldrb	r3, [r4, #16]
 80065b6:	3a14      	subs	r2, #20
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d111      	bne.n	80065e0 <USBD_CDC_Init+0x92>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065bc:	2380      	movs	r3, #128	@ 0x80
 80065be:	009b      	lsls	r3, r3, #2
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065c0:	0031      	movs	r1, r6
 80065c2:	0020      	movs	r0, r4
 80065c4:	58aa      	ldr	r2, [r5, r2]
 80065c6:	f000 fe62 	bl	800728e <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80065ca:	2000      	movs	r0, #0
}
 80065cc:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065ce:	2340      	movs	r3, #64	@ 0x40
 80065d0:	2181      	movs	r1, #129	@ 0x81
 80065d2:	2202      	movs	r2, #2
 80065d4:	f000 fe0f 	bl	80071f6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065d8:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065da:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065dc:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065de:	e7c5      	b.n	800656c <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065e0:	2340      	movs	r3, #64	@ 0x40
 80065e2:	e7ed      	b.n	80065c0 <USBD_CDC_Init+0x72>

080065e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80065e4:	0003      	movs	r3, r0
  uint8_t  ret = USBD_FAIL;
 80065e6:	2002      	movs	r0, #2

  if (fops != NULL)
 80065e8:	2900      	cmp	r1, #0
 80065ea:	d003      	beq.n	80065f4 <USBD_CDC_RegisterInterface+0x10>
  {
    pdev->pUserData = fops;
 80065ec:	22af      	movs	r2, #175	@ 0xaf
    ret = USBD_OK;
 80065ee:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 80065f0:	0092      	lsls	r2, r2, #2
 80065f2:	5099      	str	r1, [r3, r2]
  }

  return ret;
}
 80065f4:	4770      	bx	lr

080065f6 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065f6:	23ae      	movs	r3, #174	@ 0xae
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 80065fc:	2082      	movs	r0, #130	@ 0x82
 80065fe:	0080      	lsls	r0, r0, #2
 8006600:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 8006602:	2184      	movs	r1, #132	@ 0x84
 8006604:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 8006606:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 8006608:	505a      	str	r2, [r3, r1]
}
 800660a:	4770      	bx	lr

0800660c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800660c:	23ae      	movs	r3, #174	@ 0xae
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	58c2      	ldr	r2, [r0, r3]
 8006612:	3bb4      	subs	r3, #180	@ 0xb4

  return USBD_OK;
}
 8006614:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8006616:	50d1      	str	r1, [r2, r3]
}
 8006618:	4770      	bx	lr

0800661a <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800661a:	23ae      	movs	r3, #174	@ 0xae
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	58c2      	ldr	r2, [r0, r3]
{
 8006620:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8006622:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 8006624:	2a00      	cmp	r2, #0
 8006626:	d012      	beq.n	800664e <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 8006628:	2185      	movs	r1, #133	@ 0x85
 800662a:	0089      	lsls	r1, r1, #2
 800662c:	5854      	ldr	r4, [r2, r1]
 800662e:	3b01      	subs	r3, #1
 8006630:	2c00      	cmp	r4, #0
 8006632:	d10c      	bne.n	800664e <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 8006634:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006636:	2384      	movs	r3, #132	@ 0x84
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800663c:	390c      	subs	r1, #12
 800663e:	5852      	ldr	r2, [r2, r1]
 8006640:	3988      	subs	r1, #136	@ 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006642:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006644:	39ff      	subs	r1, #255	@ 0xff
 8006646:	b29b      	uxth	r3, r3
 8006648:	f000 fe18 	bl	800727c <USBD_LL_Transmit>
      return USBD_OK;
 800664c:	0023      	movs	r3, r4
  }
}
 800664e:	0018      	movs	r0, r3
 8006650:	bd10      	pop	{r4, pc}

08006652 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006652:	23ae      	movs	r3, #174	@ 0xae
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	58c2      	ldr	r2, [r0, r3]
{
 8006658:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 800665a:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 800665c:	2a00      	cmp	r2, #0
 800665e:	d00b      	beq.n	8006678 <USBD_CDC_ReceivePacket+0x26>
      USBD_LL_PrepareReceive(pdev,
 8006660:	2381      	movs	r3, #129	@ 0x81
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	58d2      	ldr	r2, [r2, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006666:	7c03      	ldrb	r3, [r0, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d107      	bne.n	800667c <USBD_CDC_ReceivePacket+0x2a>
      USBD_LL_PrepareReceive(pdev,
 800666c:	2380      	movs	r3, #128	@ 0x80
 800666e:	009b      	lsls	r3, r3, #2
      USBD_LL_PrepareReceive(pdev,
 8006670:	2101      	movs	r1, #1
 8006672:	f000 fe0c 	bl	800728e <USBD_LL_PrepareReceive>
    return USBD_OK;
 8006676:	2300      	movs	r3, #0
  }
}
 8006678:	0018      	movs	r0, r3
 800667a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800667c:	2340      	movs	r3, #64	@ 0x40
 800667e:	e7f7      	b.n	8006670 <USBD_CDC_ReceivePacket+0x1e>

08006680 <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006680:	2302      	movs	r3, #2
{
 8006682:	b510      	push	{r4, lr}
  if (pdev == NULL)
 8006684:	2800      	cmp	r0, #0
 8006686:	d013      	beq.n	80066b0 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006688:	23ad      	movs	r3, #173	@ 0xad
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	58c4      	ldr	r4, [r0, r3]
 800668e:	2c00      	cmp	r4, #0
 8006690:	d001      	beq.n	8006696 <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 8006692:	2400      	movs	r4, #0
 8006694:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006696:	2900      	cmp	r1, #0
 8006698:	d002      	beq.n	80066a0 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 800669a:	23ac      	movs	r3, #172	@ 0xac
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066a0:	23a7      	movs	r3, #167	@ 0xa7
 80066a2:	2101      	movs	r1, #1
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 80066a8:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80066aa:	f000 fd5b 	bl	8007164 <USBD_LL_Init>

  return USBD_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	0018      	movs	r0, r3
 80066b2:	bd10      	pop	{r4, pc}

080066b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066b4:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066b6:	2002      	movs	r0, #2
  if (pclass != NULL)
 80066b8:	2900      	cmp	r1, #0
 80066ba:	d003      	beq.n	80066c4 <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 80066bc:	22ad      	movs	r2, #173	@ 0xad
    status = USBD_OK;
 80066be:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 80066c0:	0092      	lsls	r2, r2, #2
 80066c2:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 80066c4:	4770      	bx	lr

080066c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066c6:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80066c8:	f000 fd8c 	bl	80071e4 <USBD_LL_Start>

  return USBD_OK;
}
 80066cc:	2000      	movs	r0, #0
 80066ce:	bd10      	pop	{r4, pc}

080066d0 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80066d0:	23ad      	movs	r3, #173	@ 0xad
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	58c2      	ldr	r2, [r0, r3]
{
 80066d6:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;
 80066d8:	2302      	movs	r3, #2
  if (pdev->pClass != NULL)
 80066da:	2a00      	cmp	r2, #0
 80066dc:	d004      	beq.n	80066e8 <USBD_SetClassConfig+0x18>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80066de:	6813      	ldr	r3, [r2, #0]
 80066e0:	4798      	blx	r3
 80066e2:	1e43      	subs	r3, r0, #1
 80066e4:	4198      	sbcs	r0, r3
 80066e6:	0043      	lsls	r3, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 80066e8:	0018      	movs	r0, r3
 80066ea:	bd10      	pop	{r4, pc}

080066ec <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80066ec:	23ad      	movs	r3, #173	@ 0xad
{
 80066ee:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	58c3      	ldr	r3, [r0, r3]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4798      	blx	r3

  return USBD_OK;
}
 80066f8:	2000      	movs	r0, #0
 80066fa:	bd10      	pop	{r4, pc}

080066fc <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066fc:	23aa      	movs	r3, #170	@ 0xaa
 80066fe:	009b      	lsls	r3, r3, #2
{
 8006700:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006702:	18c5      	adds	r5, r0, r3
{
 8006704:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006706:	0028      	movs	r0, r5
 8006708:	f000 fb2c 	bl	8006d64 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800670c:	23a5      	movs	r3, #165	@ 0xa5
 800670e:	2201      	movs	r2, #1
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006714:	4b11      	ldr	r3, [pc, #68]	@ (800675c <USBD_LL_SetupStage+0x60>)
 8006716:	5ae2      	ldrh	r2, [r4, r3]
 8006718:	3b16      	subs	r3, #22
 800671a:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800671c:	3310      	adds	r3, #16
 800671e:	5ce1      	ldrb	r1, [r4, r3]
 8006720:	231f      	movs	r3, #31
 8006722:	400b      	ands	r3, r1
 8006724:	2b01      	cmp	r3, #1
 8006726:	d009      	beq.n	800673c <USBD_LL_SetupStage+0x40>
 8006728:	2b02      	cmp	r3, #2
 800672a:	d00c      	beq.n	8006746 <USBD_LL_SetupStage+0x4a>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10f      	bne.n	8006750 <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006730:	0029      	movs	r1, r5
 8006732:	0020      	movs	r0, r4
 8006734:	f000 f91a 	bl	800696c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8006738:	2000      	movs	r0, #0
 800673a:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800673c:	0029      	movs	r1, r5
 800673e:	0020      	movs	r0, r4
 8006740:	f000 fa54 	bl	8006bec <USBD_StdItfReq>
      break;
 8006744:	e7f8      	b.n	8006738 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 8006746:	0029      	movs	r1, r5
 8006748:	0020      	movs	r0, r4
 800674a:	f000 fa77 	bl	8006c3c <USBD_StdEPReq>
      break;
 800674e:	e7f3      	b.n	8006738 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006750:	237f      	movs	r3, #127	@ 0x7f
 8006752:	0020      	movs	r0, r4
 8006754:	4399      	bics	r1, r3
 8006756:	f000 fd63 	bl	8007220 <USBD_LL_StallEP>
      break;
 800675a:	e7ed      	b.n	8006738 <USBD_LL_SetupStage+0x3c>
 800675c:	000002ae 	.word	0x000002ae

08006760 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	0004      	movs	r4, r0
 8006764:	0015      	movs	r5, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006766:	2900      	cmp	r1, #0
 8006768:	d12e      	bne.n	80067c8 <USBD_LL_DataOutStage+0x68>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800676a:	23a5      	movs	r3, #165	@ 0xa5
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	58c2      	ldr	r2, [r0, r3]
 8006770:	2a03      	cmp	r2, #3
 8006772:	d123      	bne.n	80067bc <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006774:	0002      	movs	r2, r0
 8006776:	3255      	adds	r2, #85	@ 0x55
 8006778:	32ff      	adds	r2, #255	@ 0xff
 800677a:	68d3      	ldr	r3, [r2, #12]
 800677c:	6910      	ldr	r0, [r2, #16]
 800677e:	4283      	cmp	r3, r0
 8006780:	d90b      	bls.n	800679a <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 8006782:	1a1b      	subs	r3, r3, r0
 8006784:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 8006786:	b282      	uxth	r2, r0
 8006788:	4298      	cmp	r0, r3
 800678a:	d900      	bls.n	800678e <USBD_LL_DataOutStage+0x2e>
 800678c:	b29a      	uxth	r2, r3
 800678e:	0029      	movs	r1, r5
 8006790:	0020      	movs	r0, r4
 8006792:	f000 fb48 	bl	8006e26 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006796:	2000      	movs	r0, #0
}
 8006798:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800679a:	23ad      	movs	r3, #173	@ 0xad
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	58e3      	ldr	r3, [r4, r3]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d006      	beq.n	80067b4 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067a6:	22a7      	movs	r2, #167	@ 0xa7
 80067a8:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80067aa:	5ca2      	ldrb	r2, [r4, r2]
 80067ac:	2a03      	cmp	r2, #3
 80067ae:	d101      	bne.n	80067b4 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 80067b0:	0020      	movs	r0, r4
 80067b2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80067b4:	0020      	movs	r0, r4
 80067b6:	f000 fb3e 	bl	8006e36 <USBD_CtlSendStatus>
 80067ba:	e7ec      	b.n	8006796 <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80067bc:	2a05      	cmp	r2, #5
 80067be:	d1ea      	bne.n	8006796 <USBD_LL_DataOutStage+0x36>
        pdev->ep0_state = USBD_EP0_IDLE;
 80067c0:	50c1      	str	r1, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 80067c2:	f000 fd2d 	bl	8007220 <USBD_LL_StallEP>
 80067c6:	e7e6      	b.n	8006796 <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 80067c8:	23ad      	movs	r3, #173	@ 0xad
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 80067ce:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0e0      	beq.n	8006798 <USBD_LL_DataOutStage+0x38>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067d6:	22a7      	movs	r2, #167	@ 0xa7
 80067d8:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 80067da:	5ca2      	ldrb	r2, [r4, r2]
 80067dc:	2a03      	cmp	r2, #3
 80067de:	d1db      	bne.n	8006798 <USBD_LL_DataOutStage+0x38>
    pdev->pClass->DataOut(pdev, epnum);
 80067e0:	0020      	movs	r0, r4
 80067e2:	4798      	blx	r3
 80067e4:	e7d7      	b.n	8006796 <USBD_LL_DataOutStage+0x36>

080067e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80067e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e8:	000d      	movs	r5, r1
 80067ea:	0004      	movs	r4, r0
 80067ec:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80067ee:	2d00      	cmp	r5, #0
 80067f0:	d14d      	bne.n	800688e <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80067f2:	23a5      	movs	r3, #165	@ 0xa5
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	58c3      	ldr	r3, [r0, r3]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d13e      	bne.n	800687a <USBD_LL_DataInStage+0x94>
    {
      if (pep->rem_length > pep->maxpacket)
 80067fc:	6a03      	ldr	r3, [r0, #32]
 80067fe:	6a46      	ldr	r6, [r0, #36]	@ 0x24
 8006800:	42b3      	cmp	r3, r6
 8006802:	d911      	bls.n	8006828 <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 8006804:	1b9b      	subs	r3, r3, r6
 8006806:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006808:	b29a      	uxth	r2, r3
 800680a:	f000 faf4 	bl	8006df6 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800680e:	002b      	movs	r3, r5
 8006810:	002a      	movs	r2, r5
 8006812:	0029      	movs	r1, r5
 8006814:	0020      	movs	r0, r4
 8006816:	f000 fd3a 	bl	800728e <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 800681a:	23a8      	movs	r3, #168	@ 0xa8
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	5ce2      	ldrb	r2, [r4, r3]
 8006820:	2a01      	cmp	r2, #1
 8006822:	d031      	beq.n	8006888 <USBD_LL_DataInStage+0xa2>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006824:	2000      	movs	r0, #0
}
 8006826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006828:	69c7      	ldr	r7, [r0, #28]
 800682a:	0031      	movs	r1, r6
 800682c:	0038      	movs	r0, r7
 800682e:	f7f9 fd21 	bl	8000274 <__aeabi_uidivmod>
 8006832:	1e0d      	subs	r5, r1, #0
 8006834:	d10c      	bne.n	8006850 <USBD_LL_DataInStage+0x6a>
 8006836:	42be      	cmp	r6, r7
 8006838:	d80a      	bhi.n	8006850 <USBD_LL_DataInStage+0x6a>
            (pep->total_length < pdev->ep0_data_len))
 800683a:	26a6      	movs	r6, #166	@ 0xa6
 800683c:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 800683e:	59a3      	ldr	r3, [r4, r6]
 8006840:	429f      	cmp	r7, r3
 8006842:	d205      	bcs.n	8006850 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006844:	000a      	movs	r2, r1
 8006846:	0020      	movs	r0, r4
 8006848:	f000 fad5 	bl	8006df6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800684c:	51a5      	str	r5, [r4, r6]
 800684e:	e7de      	b.n	800680e <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006850:	23ad      	movs	r3, #173	@ 0xad
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	58e3      	ldr	r3, [r4, r3]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d006      	beq.n	800686a <USBD_LL_DataInStage+0x84>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800685c:	22a7      	movs	r2, #167	@ 0xa7
 800685e:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006860:	5ca2      	ldrb	r2, [r4, r2]
 8006862:	2a03      	cmp	r2, #3
 8006864:	d101      	bne.n	800686a <USBD_LL_DataInStage+0x84>
            pdev->pClass->EP0_TxSent(pdev);
 8006866:	0020      	movs	r0, r4
 8006868:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800686a:	2180      	movs	r1, #128	@ 0x80
 800686c:	0020      	movs	r0, r4
 800686e:	f000 fcd7 	bl	8007220 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006872:	0020      	movs	r0, r4
 8006874:	f000 faeb 	bl	8006e4e <USBD_CtlReceiveStatus>
 8006878:	e7cf      	b.n	800681a <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800687a:	2204      	movs	r2, #4
 800687c:	4393      	bics	r3, r2
 800687e:	d1cc      	bne.n	800681a <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8006880:	2180      	movs	r1, #128	@ 0x80
 8006882:	f000 fccd 	bl	8007220 <USBD_LL_StallEP>
 8006886:	e7c8      	b.n	800681a <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8006888:	2200      	movs	r2, #0
 800688a:	54e2      	strb	r2, [r4, r3]
 800688c:	e7ca      	b.n	8006824 <USBD_LL_DataInStage+0x3e>
  else if ((pdev->pClass->DataIn != NULL) &&
 800688e:	23ad      	movs	r3, #173	@ 0xad
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	58c3      	ldr	r3, [r0, r3]
    return USBD_FAIL;
 8006894:	2002      	movs	r0, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0c4      	beq.n	8006826 <USBD_LL_DataInStage+0x40>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800689c:	22a7      	movs	r2, #167	@ 0xa7
 800689e:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80068a0:	5ca2      	ldrb	r2, [r4, r2]
 80068a2:	2a03      	cmp	r2, #3
 80068a4:	d1bf      	bne.n	8006826 <USBD_LL_DataInStage+0x40>
    pdev->pClass->DataIn(pdev, epnum);
 80068a6:	0029      	movs	r1, r5
 80068a8:	0020      	movs	r0, r4
 80068aa:	4798      	blx	r3
 80068ac:	e7ba      	b.n	8006824 <USBD_LL_DataInStage+0x3e>

080068ae <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068ae:	2200      	movs	r2, #0
{
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068b4:	0011      	movs	r1, r2
 80068b6:	2340      	movs	r3, #64	@ 0x40
 80068b8:	f000 fc9d 	bl	80071f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068bc:	0023      	movs	r3, r4
 80068be:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c0:	2640      	movs	r6, #64	@ 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068c2:	33fc      	adds	r3, #252	@ 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068c4:	2180      	movs	r1, #128	@ 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068c6:	65dd      	str	r5, [r3, #92]	@ 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068c8:	669e      	str	r6, [r3, #104]	@ 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068ca:	2200      	movs	r2, #0
 80068cc:	0033      	movs	r3, r6
 80068ce:	0020      	movs	r0, r4
 80068d0:	f000 fc91 	bl	80071f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068d4:	23a7      	movs	r3, #167	@ 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 80068d6:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068d8:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068da:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068dc:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068de:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80068e0:	3b08      	subs	r3, #8
 80068e2:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 80068e4:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 80068e6:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80068e8:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 80068ea:	3314      	adds	r3, #20
 80068ec:	58e3      	ldr	r3, [r4, r3]
 80068ee:	428b      	cmp	r3, r1
 80068f0:	d005      	beq.n	80068fe <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068f2:	23ad      	movs	r3, #173	@ 0xad
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	58e3      	ldr	r3, [r4, r3]
 80068f8:	0020      	movs	r0, r4
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4798      	blx	r3
  }

  return USBD_OK;
}
 80068fe:	2000      	movs	r0, #0
 8006900:	bd70      	pop	{r4, r5, r6, pc}

08006902 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006902:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006904:	2000      	movs	r0, #0
 8006906:	4770      	bx	lr

08006908 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8006908:	23a7      	movs	r3, #167	@ 0xa7
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	5cc1      	ldrb	r1, [r0, r3]
 800690e:	4a03      	ldr	r2, [pc, #12]	@ (800691c <USBD_LL_Suspend+0x14>)
 8006910:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006912:	2204      	movs	r2, #4
 8006914:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8006916:	2000      	movs	r0, #0
 8006918:	4770      	bx	lr
 800691a:	46c0      	nop			@ (mov r8, r8)
 800691c:	0000029d 	.word	0x0000029d

08006920 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006920:	23a7      	movs	r3, #167	@ 0xa7
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	5cc2      	ldrb	r2, [r0, r3]
 8006926:	2a04      	cmp	r2, #4
 8006928:	d102      	bne.n	8006930 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 800692a:	4a02      	ldr	r2, [pc, #8]	@ (8006934 <USBD_LL_Resume+0x14>)
 800692c:	5c82      	ldrb	r2, [r0, r2]
 800692e:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8006930:	2000      	movs	r0, #0
 8006932:	4770      	bx	lr
 8006934:	0000029d 	.word	0x0000029d

08006938 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006938:	23a7      	movs	r3, #167	@ 0xa7
{
 800693a:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	5cc3      	ldrb	r3, [r0, r3]
 8006940:	2b03      	cmp	r3, #3
 8006942:	d106      	bne.n	8006952 <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8006944:	23ad      	movs	r3, #173	@ 0xad
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	58c3      	ldr	r3, [r0, r3]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d000      	beq.n	8006952 <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8006950:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8006952:	2000      	movs	r0, #0
 8006954:	bd10      	pop	{r4, pc}

08006956 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8006956:	b510      	push	{r4, lr}
 8006958:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800695a:	2180      	movs	r1, #128	@ 0x80
 800695c:	f000 fc60 	bl	8007220 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006960:	2100      	movs	r1, #0
 8006962:	0020      	movs	r0, r4
 8006964:	f000 fc5c 	bl	8007220 <USBD_LL_StallEP>
}
 8006968:	bd10      	pop	{r4, pc}
	...

0800696c <USBD_StdDevReq>:
{
 800696c:	2260      	movs	r2, #96	@ 0x60
 800696e:	780b      	ldrb	r3, [r1, #0]
 8006970:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006972:	4013      	ands	r3, r2
 8006974:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006976:	0019      	movs	r1, r3
 8006978:	1892      	adds	r2, r2, r2
 800697a:	3920      	subs	r1, #32
{
 800697c:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800697e:	4211      	tst	r1, r2
 8006980:	d005      	beq.n	800698e <USBD_StdDevReq+0x22>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <USBD_StdDevReq+0x32>
        USBD_CtlError(pdev, req);
 8006986:	0020      	movs	r0, r4
 8006988:	f7ff ffe5 	bl	8006956 <USBD_CtlError.constprop.0>
        break;
 800698c:	e005      	b.n	800699a <USBD_StdDevReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 800698e:	23ad      	movs	r3, #173	@ 0xad
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	58c3      	ldr	r3, [r0, r3]
 8006994:	0029      	movs	r1, r5
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	4798      	blx	r3
}
 800699a:	2000      	movs	r0, #0
 800699c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      switch (req->bRequest)
 800699e:	7868      	ldrb	r0, [r5, #1]
 80069a0:	2809      	cmp	r0, #9
 80069a2:	d8f0      	bhi.n	8006986 <USBD_StdDevReq+0x1a>
 80069a4:	f7f9 fbd6 	bl	8000154 <__gnu_thumb1_case_shi>
 80069a8:	010e00ef 	.word	0x010e00ef
 80069ac:	0106ffef 	.word	0x0106ffef
 80069b0:	007dffef 	.word	0x007dffef
 80069b4:	ffef000a 	.word	0xffef000a
 80069b8:	009f00d6 	.word	0x009f00d6
  uint16_t len = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	466a      	mov	r2, sp
 80069c0:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 80069c2:	886b      	ldrh	r3, [r5, #2]
 80069c4:	0a18      	lsrs	r0, r3, #8
 80069c6:	3801      	subs	r0, #1
 80069c8:	2806      	cmp	r0, #6
 80069ca:	d8dc      	bhi.n	8006986 <USBD_StdDevReq+0x1a>
 80069cc:	f7f9 fbae 	bl	800012c <__gnu_thumb1_case_sqi>
 80069d0:	db261704 	.word	0xdb261704
 80069d4:	40db      	.short	0x40db
 80069d6:	4c          	.byte	0x4c
 80069d7:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069d8:	23ac      	movs	r3, #172	@ 0xac
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	58e3      	ldr	r3, [r4, r3]
 80069de:	7c20      	ldrb	r0, [r4, #16]
 80069e0:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069e2:	466a      	mov	r2, sp
 80069e4:	1d91      	adds	r1, r2, #6
 80069e6:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80069e8:	466b      	mov	r3, sp
 80069ea:	88d9      	ldrh	r1, [r3, #6]
 80069ec:	88ea      	ldrh	r2, [r5, #6]
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d052      	beq.n	8006a98 <USBD_StdDevReq+0x12c>
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	d145      	bne.n	8006a82 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 80069f6:	0020      	movs	r0, r4
 80069f8:	f000 fa1d 	bl	8006e36 <USBD_CtlSendStatus>
 80069fc:	e7cd      	b.n	800699a <USBD_StdDevReq+0x2e>
      pdev->pClass->Setup(pdev, req);
 80069fe:	23ad      	movs	r3, #173	@ 0xad
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a00:	7c22      	ldrb	r2, [r4, #16]
      pdev->pClass->Setup(pdev, req);
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	58e3      	ldr	r3, [r4, r3]
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	d106      	bne.n	8006a18 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a0c:	466a      	mov	r2, sp
 8006a0e:	1d90      	adds	r0, r2, #6
 8006a10:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a12:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a14:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006a16:	e7e7      	b.n	80069e8 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1a:	e7f7      	b.n	8006a0c <USBD_StdDevReq+0xa0>
      switch ((uint8_t)(req->wValue))
 8006a1c:	b2d8      	uxtb	r0, r3
 8006a1e:	2805      	cmp	r0, #5
 8006a20:	d8b1      	bhi.n	8006986 <USBD_StdDevReq+0x1a>
 8006a22:	23ac      	movs	r3, #172	@ 0xac
 8006a24:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a26:	58e3      	ldr	r3, [r4, r3]
      switch ((uint8_t)(req->wValue))
 8006a28:	f7f9 fb8a 	bl	8000140 <__gnu_thumb1_case_uqi>
 8006a2c:	0c0a0803 	.word	0x0c0a0803
 8006a30:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0a6      	beq.n	8006986 <USBD_StdDevReq+0x1a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a38:	7c20      	ldrb	r0, [r4, #16]
 8006a3a:	e7d2      	b.n	80069e2 <USBD_StdDevReq+0x76>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	e7f9      	b.n	8006a34 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	e7f7      	b.n	8006a34 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	e7f5      	b.n	8006a34 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	e7f3      	b.n	8006a34 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	e7f1      	b.n	8006a34 <USBD_StdDevReq+0xc8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a50:	7c23      	ldrb	r3, [r4, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d000      	beq.n	8006a58 <USBD_StdDevReq+0xec>
 8006a56:	e796      	b.n	8006986 <USBD_StdDevReq+0x1a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a58:	23ad      	movs	r3, #173	@ 0xad
 8006a5a:	466a      	mov	r2, sp
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	58e3      	ldr	r3, [r4, r3]
 8006a60:	1d90      	adds	r0, r2, #6
 8006a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a64:	4798      	blx	r3
  if (err != 0U)
 8006a66:	e7bf      	b.n	80069e8 <USBD_StdDevReq+0x7c>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a68:	7c23      	ldrb	r3, [r4, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d000      	beq.n	8006a70 <USBD_StdDevReq+0x104>
 8006a6e:	e78a      	b.n	8006986 <USBD_StdDevReq+0x1a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a70:	23ad      	movs	r3, #173	@ 0xad
 8006a72:	466a      	mov	r2, sp
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	58e3      	ldr	r3, [r4, r3]
 8006a78:	1d90      	adds	r0, r2, #6
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a7e:	2307      	movs	r3, #7
 8006a80:	e7c8      	b.n	8006a14 <USBD_StdDevReq+0xa8>
      len = MIN(len, req->wLength);
 8006a82:	1c0b      	adds	r3, r1, #0
 8006a84:	4291      	cmp	r1, r2
 8006a86:	d900      	bls.n	8006a8a <USBD_StdDevReq+0x11e>
 8006a88:	1c13      	adds	r3, r2, #0
 8006a8a:	4669      	mov	r1, sp
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a90:	0001      	movs	r1, r0
 8006a92:	0020      	movs	r0, r4
 8006a94:	f000 f9a1 	bl	8006dda <USBD_CtlSendData>
    if (req->wLength == 0U)
 8006a98:	88eb      	ldrh	r3, [r5, #6]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d000      	beq.n	8006aa0 <USBD_StdDevReq+0x134>
 8006a9e:	e77c      	b.n	800699a <USBD_StdDevReq+0x2e>
 8006aa0:	e7a9      	b.n	80069f6 <USBD_StdDevReq+0x8a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006aa2:	88ab      	ldrh	r3, [r5, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d000      	beq.n	8006aaa <USBD_StdDevReq+0x13e>
 8006aa8:	e76d      	b.n	8006986 <USBD_StdDevReq+0x1a>
 8006aaa:	88eb      	ldrh	r3, [r5, #6]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d000      	beq.n	8006ab2 <USBD_StdDevReq+0x146>
 8006ab0:	e769      	b.n	8006986 <USBD_StdDevReq+0x1a>
 8006ab2:	886d      	ldrh	r5, [r5, #2]
 8006ab4:	2d7f      	cmp	r5, #127	@ 0x7f
 8006ab6:	d900      	bls.n	8006aba <USBD_StdDevReq+0x14e>
 8006ab8:	e765      	b.n	8006986 <USBD_StdDevReq+0x1a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aba:	26a7      	movs	r6, #167	@ 0xa7
 8006abc:	00b6      	lsls	r6, r6, #2
 8006abe:	5da3      	ldrb	r3, [r4, r6]
 8006ac0:	2b03      	cmp	r3, #3
 8006ac2:	d100      	bne.n	8006ac6 <USBD_StdDevReq+0x15a>
 8006ac4:	e75f      	b.n	8006986 <USBD_StdDevReq+0x1a>
      pdev->dev_address = dev_addr;
 8006ac6:	4b47      	ldr	r3, [pc, #284]	@ (8006be4 <USBD_StdDevReq+0x278>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ac8:	b2ed      	uxtb	r5, r5
      pdev->dev_address = dev_addr;
 8006aca:	54e5      	strb	r5, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006acc:	0029      	movs	r1, r5
 8006ace:	0020      	movs	r0, r4
 8006ad0:	f000 fbcb 	bl	800726a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006ad4:	0020      	movs	r0, r4
 8006ad6:	f000 f9ae 	bl	8006e36 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ada:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	d100      	bne.n	8006ae2 <USBD_StdDevReq+0x176>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	55a3      	strb	r3, [r4, r6]
 8006ae4:	e759      	b.n	800699a <USBD_StdDevReq+0x2e>
  cfgidx = (uint8_t)(req->wValue);
 8006ae6:	78a9      	ldrb	r1, [r5, #2]
 8006ae8:	4d3f      	ldr	r5, [pc, #252]	@ (8006be8 <USBD_StdDevReq+0x27c>)
 8006aea:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006aec:	2901      	cmp	r1, #1
 8006aee:	d900      	bls.n	8006af2 <USBD_StdDevReq+0x186>
 8006af0:	e749      	b.n	8006986 <USBD_StdDevReq+0x1a>
    switch (pdev->dev_state)
 8006af2:	23a7      	movs	r3, #167	@ 0xa7
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	5ce2      	ldrb	r2, [r4, r3]
 8006af8:	2a02      	cmp	r2, #2
 8006afa:	d009      	beq.n	8006b10 <USBD_StdDevReq+0x1a4>
 8006afc:	2a03      	cmp	r2, #3
 8006afe:	d015      	beq.n	8006b2c <USBD_StdDevReq+0x1c0>
        USBD_CtlError(pdev, req);
 8006b00:	0020      	movs	r0, r4
 8006b02:	f7ff ff28 	bl	8006956 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006b06:	0020      	movs	r0, r4
 8006b08:	7829      	ldrb	r1, [r5, #0]
 8006b0a:	f7ff fdef 	bl	80066ec <USBD_ClrClassConfig>
        break;
 8006b0e:	e744      	b.n	800699a <USBD_StdDevReq+0x2e>
        if (cfgidx)
 8006b10:	2900      	cmp	r1, #0
 8006b12:	d100      	bne.n	8006b16 <USBD_StdDevReq+0x1aa>
 8006b14:	e76f      	b.n	80069f6 <USBD_StdDevReq+0x8a>
          pdev->dev_config = cfgidx;
 8006b16:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b18:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 8006b1a:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b1c:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006b1e:	0020      	movs	r0, r4
 8006b20:	f7ff fdd6 	bl	80066d0 <USBD_SetClassConfig>
 8006b24:	2802      	cmp	r0, #2
 8006b26:	d000      	beq.n	8006b2a <USBD_StdDevReq+0x1be>
 8006b28:	e765      	b.n	80069f6 <USBD_StdDevReq+0x8a>
 8006b2a:	e72c      	b.n	8006986 <USBD_StdDevReq+0x1a>
        if (cfgidx == 0U)
 8006b2c:	2900      	cmp	r1, #0
 8006b2e:	d106      	bne.n	8006b3e <USBD_StdDevReq+0x1d2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b30:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8006b32:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b34:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8006b36:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006b38:	f7ff fdd8 	bl	80066ec <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006b3c:	e75b      	b.n	80069f6 <USBD_StdDevReq+0x8a>
        else if (cfgidx != pdev->dev_config)
 8006b3e:	6861      	ldr	r1, [r4, #4]
 8006b40:	2901      	cmp	r1, #1
 8006b42:	d100      	bne.n	8006b46 <USBD_StdDevReq+0x1da>
 8006b44:	e757      	b.n	80069f6 <USBD_StdDevReq+0x8a>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b46:	b2c9      	uxtb	r1, r1
 8006b48:	0020      	movs	r0, r4
 8006b4a:	f7ff fdcf 	bl	80066ec <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006b4e:	7829      	ldrb	r1, [r5, #0]
 8006b50:	6061      	str	r1, [r4, #4]
 8006b52:	e7e4      	b.n	8006b1e <USBD_StdDevReq+0x1b2>
  if (req->wLength != 1U)
 8006b54:	88ea      	ldrh	r2, [r5, #6]
 8006b56:	2a01      	cmp	r2, #1
 8006b58:	d000      	beq.n	8006b5c <USBD_StdDevReq+0x1f0>
 8006b5a:	e714      	b.n	8006986 <USBD_StdDevReq+0x1a>
    switch (pdev->dev_state)
 8006b5c:	23a7      	movs	r3, #167	@ 0xa7
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	5ce3      	ldrb	r3, [r4, r3]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d807      	bhi.n	8006b76 <USBD_StdDevReq+0x20a>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d100      	bne.n	8006b6c <USBD_StdDevReq+0x200>
 8006b6a:	e70c      	b.n	8006986 <USBD_StdDevReq+0x1a>
        pdev->dev_default_config = 0U;
 8006b6c:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b6e:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8006b70:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006b72:	3108      	adds	r1, #8
 8006b74:	e003      	b.n	8006b7e <USBD_StdDevReq+0x212>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006b76:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8006b78:	2b03      	cmp	r3, #3
 8006b7a:	d000      	beq.n	8006b7e <USBD_StdDevReq+0x212>
 8006b7c:	e703      	b.n	8006986 <USBD_StdDevReq+0x1a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006b7e:	0020      	movs	r0, r4
 8006b80:	f000 f92b 	bl	8006dda <USBD_CtlSendData>
      break;
 8006b84:	e709      	b.n	800699a <USBD_StdDevReq+0x2e>
  switch (pdev->dev_state)
 8006b86:	23a7      	movs	r3, #167	@ 0xa7
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	5ce3      	ldrb	r3, [r4, r3]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d900      	bls.n	8006b94 <USBD_StdDevReq+0x228>
 8006b92:	e6f8      	b.n	8006986 <USBD_StdDevReq+0x1a>
      if (req->wLength != 0x2U)
 8006b94:	88eb      	ldrh	r3, [r5, #6]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d000      	beq.n	8006b9c <USBD_StdDevReq+0x230>
 8006b9a:	e6f4      	b.n	8006986 <USBD_StdDevReq+0x1a>
      if (pdev->dev_remote_wakeup)
 8006b9c:	23a9      	movs	r3, #169	@ 0xa9
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	58e2      	ldr	r2, [r4, r3]
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ba2:	2301      	movs	r3, #1
      if (pdev->dev_remote_wakeup)
 8006ba4:	2a00      	cmp	r2, #0
 8006ba6:	d000      	beq.n	8006baa <USBD_StdDevReq+0x23e>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ba8:	3302      	adds	r3, #2
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006baa:	0021      	movs	r1, r4
 8006bac:	2202      	movs	r2, #2
 8006bae:	60e3      	str	r3, [r4, #12]
 8006bb0:	310c      	adds	r1, #12
 8006bb2:	e7e4      	b.n	8006b7e <USBD_StdDevReq+0x212>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bb4:	886b      	ldrh	r3, [r5, #2]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d000      	beq.n	8006bbc <USBD_StdDevReq+0x250>
 8006bba:	e6ee      	b.n	800699a <USBD_StdDevReq+0x2e>
    pdev->dev_remote_wakeup = 1U;
 8006bbc:	22a9      	movs	r2, #169	@ 0xa9
 8006bbe:	0092      	lsls	r2, r2, #2
 8006bc0:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 8006bc2:	e718      	b.n	80069f6 <USBD_StdDevReq+0x8a>
  switch (pdev->dev_state)
 8006bc4:	23a7      	movs	r3, #167	@ 0xa7
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	5ce3      	ldrb	r3, [r4, r3]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d900      	bls.n	8006bd2 <USBD_StdDevReq+0x266>
 8006bd0:	e6d9      	b.n	8006986 <USBD_StdDevReq+0x1a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bd2:	886b      	ldrh	r3, [r5, #2]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d000      	beq.n	8006bda <USBD_StdDevReq+0x26e>
 8006bd8:	e6df      	b.n	800699a <USBD_StdDevReq+0x2e>
        pdev->dev_remote_wakeup = 0U;
 8006bda:	23a9      	movs	r3, #169	@ 0xa9
 8006bdc:	2200      	movs	r2, #0
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	50e2      	str	r2, [r4, r3]
 8006be2:	e708      	b.n	80069f6 <USBD_StdDevReq+0x8a>
 8006be4:	0000029e 	.word	0x0000029e
 8006be8:	200024c0 	.word	0x200024c0

08006bec <USBD_StdItfReq>:
{
 8006bec:	2360      	movs	r3, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bee:	780a      	ldrb	r2, [r1, #0]
{
 8006bf0:	b570      	push	{r4, r5, r6, lr}
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	0004      	movs	r4, r0
 8006bf6:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf8:	0652      	lsls	r2, r2, #25
 8006bfa:	d501      	bpl.n	8006c00 <USBD_StdItfReq+0x14>
 8006bfc:	2b40      	cmp	r3, #64	@ 0x40
 8006bfe:	d119      	bne.n	8006c34 <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 8006c00:	23a7      	movs	r3, #167	@ 0xa7
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	5ce3      	ldrb	r3, [r4, r3]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d813      	bhi.n	8006c34 <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c0c:	792b      	ldrb	r3, [r5, #4]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d810      	bhi.n	8006c34 <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c12:	23ad      	movs	r3, #173	@ 0xad
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	58e3      	ldr	r3, [r4, r3]
 8006c18:	0029      	movs	r1, r5
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	0020      	movs	r0, r4
 8006c1e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c20:	88eb      	ldrh	r3, [r5, #6]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d104      	bne.n	8006c30 <USBD_StdItfReq+0x44>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d102      	bne.n	8006c30 <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 8006c2a:	0020      	movs	r0, r4
 8006c2c:	f000 f903 	bl	8006e36 <USBD_CtlSendStatus>
}
 8006c30:	2000      	movs	r0, #0
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8006c34:	0020      	movs	r0, r4
 8006c36:	f7ff fe8e 	bl	8006956 <USBD_CtlError.constprop.0>
          break;
 8006c3a:	e7f9      	b.n	8006c30 <USBD_StdItfReq+0x44>

08006c3c <USBD_StdEPReq>:
{
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	0004      	movs	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8006c40:	2060      	movs	r0, #96	@ 0x60
{
 8006c42:	000b      	movs	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8006c44:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c46:	7809      	ldrb	r1, [r1, #0]
 8006c48:	4001      	ands	r1, r0
 8006c4a:	000d      	movs	r5, r1
 8006c4c:	1800      	adds	r0, r0, r0
 8006c4e:	3d20      	subs	r5, #32
 8006c50:	4205      	tst	r5, r0
 8006c52:	d005      	beq.n	8006c60 <USBD_StdEPReq+0x24>
 8006c54:	2900      	cmp	r1, #0
 8006c56:	d00c      	beq.n	8006c72 <USBD_StdEPReq+0x36>
              USBD_CtlError(pdev, req);
 8006c58:	0020      	movs	r0, r4
 8006c5a:	f7ff fe7c 	bl	8006956 <USBD_CtlError.constprop.0>
              break;
 8006c5e:	e006      	b.n	8006c6e <USBD_StdEPReq+0x32>
      pdev->pClass->Setup(pdev, req);
 8006c60:	22ad      	movs	r2, #173	@ 0xad
 8006c62:	0092      	lsls	r2, r2, #2
 8006c64:	58a2      	ldr	r2, [r4, r2]
 8006c66:	0019      	movs	r1, r3
 8006c68:	0020      	movs	r0, r4
 8006c6a:	6892      	ldr	r2, [r2, #8]
 8006c6c:	4790      	blx	r2
}
 8006c6e:	2000      	movs	r0, #0
 8006c70:	bd70      	pop	{r4, r5, r6, pc}
      switch (req->bRequest)
 8006c72:	7858      	ldrb	r0, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8006c74:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8006c76:	2801      	cmp	r0, #1
 8006c78:	d038      	beq.n	8006cec <USBD_StdEPReq+0xb0>
 8006c7a:	2803      	cmp	r0, #3
 8006c7c:	d020      	beq.n	8006cc0 <USBD_StdEPReq+0x84>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d1ea      	bne.n	8006c58 <USBD_StdEPReq+0x1c>
          switch (pdev->dev_state)
 8006c82:	23a7      	movs	r3, #167	@ 0xa7
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	5ce3      	ldrb	r3, [r4, r3]
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d049      	beq.n	8006d20 <USBD_StdEPReq+0xe4>
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d1e3      	bne.n	8006c58 <USBD_StdEPReq+0x1c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c90:	230f      	movs	r3, #15
 8006c92:	2514      	movs	r5, #20
 8006c94:	400b      	ands	r3, r1
 8006c96:	436b      	muls	r3, r5
 8006c98:	18e3      	adds	r3, r4, r3
              if ((ep_addr & 0x80U) == 0x80U)
 8006c9a:	0612      	lsls	r2, r2, #24
 8006c9c:	d550      	bpl.n	8006d40 <USBD_StdEPReq+0x104>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0d9      	beq.n	8006c58 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca4:	237f      	movs	r3, #127	@ 0x7f
 8006ca6:	400b      	ands	r3, r1
 8006ca8:	3301      	adds	r3, #1
 8006caa:	435d      	muls	r5, r3
 8006cac:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cae:	2980      	cmp	r1, #128	@ 0x80
 8006cb0:	d051      	beq.n	8006d56 <USBD_StdEPReq+0x11a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006cb2:	0020      	movs	r0, r4
 8006cb4:	f000 fac6 	bl	8007244 <USBD_LL_IsStallEP>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d051      	beq.n	8006d60 <USBD_StdEPReq+0x124>
                pep->status = 0x0001U;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e04b      	b.n	8006d58 <USBD_StdEPReq+0x11c>
          switch (pdev->dev_state)
 8006cc0:	22a7      	movs	r2, #167	@ 0xa7
 8006cc2:	0092      	lsls	r2, r2, #2
 8006cc4:	5ca2      	ldrb	r2, [r4, r2]
 8006cc6:	2a02      	cmp	r2, #2
 8006cc8:	d020      	beq.n	8006d0c <USBD_StdEPReq+0xd0>
 8006cca:	2a03      	cmp	r2, #3
 8006ccc:	d1c4      	bne.n	8006c58 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cce:	885a      	ldrh	r2, [r3, #2]
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	d107      	bne.n	8006ce4 <USBD_StdEPReq+0xa8>
                if ((ep_addr != 0x00U) &&
 8006cd4:	064a      	lsls	r2, r1, #25
 8006cd6:	d005      	beq.n	8006ce4 <USBD_StdEPReq+0xa8>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cd8:	88db      	ldrh	r3, [r3, #6]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <USBD_StdEPReq+0xa8>
                  USBD_LL_StallEP(pdev, ep_addr);
 8006cde:	0020      	movs	r0, r4
 8006ce0:	f000 fa9e 	bl	8007220 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8006ce4:	0020      	movs	r0, r4
 8006ce6:	f000 f8a6 	bl	8006e36 <USBD_CtlSendStatus>
              break;
 8006cea:	e7c0      	b.n	8006c6e <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8006cec:	22a7      	movs	r2, #167	@ 0xa7
 8006cee:	0092      	lsls	r2, r2, #2
 8006cf0:	5ca2      	ldrb	r2, [r4, r2]
 8006cf2:	2a02      	cmp	r2, #2
 8006cf4:	d00a      	beq.n	8006d0c <USBD_StdEPReq+0xd0>
 8006cf6:	2a03      	cmp	r2, #3
 8006cf8:	d1ae      	bne.n	8006c58 <USBD_StdEPReq+0x1c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cfa:	885b      	ldrh	r3, [r3, #2]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1b6      	bne.n	8006c6e <USBD_StdEPReq+0x32>
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d00:	064b      	lsls	r3, r1, #25
 8006d02:	d0ef      	beq.n	8006ce4 <USBD_StdEPReq+0xa8>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d04:	0020      	movs	r0, r4
 8006d06:	f000 fa94 	bl	8007232 <USBD_LL_ClearStallEP>
 8006d0a:	e7eb      	b.n	8006ce4 <USBD_StdEPReq+0xa8>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d0c:	064b      	lsls	r3, r1, #25
 8006d0e:	d0a3      	beq.n	8006c58 <USBD_StdEPReq+0x1c>
                USBD_LL_StallEP(pdev, ep_addr);
 8006d10:	0020      	movs	r0, r4
 8006d12:	f000 fa85 	bl	8007220 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d16:	2180      	movs	r1, #128	@ 0x80
 8006d18:	0020      	movs	r0, r4
 8006d1a:	f000 fa81 	bl	8007220 <USBD_LL_StallEP>
 8006d1e:	e7a6      	b.n	8006c6e <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d20:	0649      	lsls	r1, r1, #25
 8006d22:	d199      	bne.n	8006c58 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d24:	0021      	movs	r1, r4
 8006d26:	3155      	adds	r1, #85	@ 0x55
 8006d28:	31ff      	adds	r1, #255	@ 0xff
 8006d2a:	0612      	lsls	r2, r2, #24
 8006d2c:	d501      	bpl.n	8006d32 <USBD_StdEPReq+0xf6>
 8006d2e:	3941      	subs	r1, #65	@ 0x41
 8006d30:	39ff      	subs	r1, #255	@ 0xff
              pep->status = 0x0000U;
 8006d32:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d34:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8006d36:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d38:	0020      	movs	r0, r4
 8006d3a:	f000 f84e 	bl	8006dda <USBD_CtlSendData>
              break;
 8006d3e:	e796      	b.n	8006c6e <USBD_StdEPReq+0x32>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d40:	33fc      	adds	r3, #252	@ 0xfc
 8006d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d100      	bne.n	8006d4a <USBD_StdEPReq+0x10e>
 8006d48:	e786      	b.n	8006c58 <USBD_StdEPReq+0x1c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d4a:	434d      	muls	r5, r1
 8006d4c:	3555      	adds	r5, #85	@ 0x55
 8006d4e:	35ff      	adds	r5, #255	@ 0xff
 8006d50:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d1ad      	bne.n	8006cb2 <USBD_StdEPReq+0x76>
                pep->status = 0x0000U;
 8006d56:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8006d58:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	0029      	movs	r1, r5
 8006d5e:	e7eb      	b.n	8006d38 <USBD_StdEPReq+0xfc>
                pep->status = 0x0000U;
 8006d60:	6028      	str	r0, [r5, #0]
 8006d62:	e7fa      	b.n	8006d5a <USBD_StdEPReq+0x11e>

08006d64 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8006d64:	780b      	ldrb	r3, [r1, #0]
 8006d66:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006d68:	784b      	ldrb	r3, [r1, #1]
 8006d6a:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006d6c:	78cb      	ldrb	r3, [r1, #3]
 8006d6e:	788a      	ldrb	r2, [r1, #2]
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	4313      	orrs	r3, r2
 8006d74:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006d76:	794b      	ldrb	r3, [r1, #5]
 8006d78:	790a      	ldrb	r2, [r1, #4]
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006d80:	79cb      	ldrb	r3, [r1, #7]
 8006d82:	798a      	ldrb	r2, [r1, #6]
 8006d84:	021b      	lsls	r3, r3, #8
 8006d86:	4313      	orrs	r3, r2
 8006d88:	80c3      	strh	r3, [r0, #6]
}
 8006d8a:	4770      	bx	lr

08006d8c <USBD_CtlError>:
{
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8006d90:	2180      	movs	r1, #128	@ 0x80
 8006d92:	f000 fa45 	bl	8007220 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006d96:	2100      	movs	r1, #0
 8006d98:	0020      	movs	r0, r4
 8006d9a:	f000 fa41 	bl	8007220 <USBD_LL_StallEP>
}
 8006d9e:	bd10      	pop	{r4, pc}

08006da0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006da0:	b570      	push	{r4, r5, r6, lr}
 8006da2:	0004      	movs	r4, r0
 8006da4:	000d      	movs	r5, r1
 8006da6:	0016      	movs	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d00d      	beq.n	8006dc8 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8006dac:	f7f9 f9b6 	bl	800011c <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006db0:	b2c3      	uxtb	r3, r0
 8006db2:	3301      	adds	r3, #1
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006db8:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006dba:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8006dbc:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006dbe:	706b      	strb	r3, [r5, #1]
 8006dc0:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8006dc2:	7821      	ldrb	r1, [r4, #0]
 8006dc4:	2900      	cmp	r1, #0
 8006dc6:	d100      	bne.n	8006dca <USBD_GetString+0x2a>
}
 8006dc8:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8006dca:	1c5a      	adds	r2, r3, #1
 8006dcc:	54e9      	strb	r1, [r5, r3]
 8006dce:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8006dd0:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8006dd2:	3401      	adds	r4, #1
      unicode[idx++] =  0U;
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	54a8      	strb	r0, [r5, r2]
 8006dd8:	e7f3      	b.n	8006dc2 <USBD_GetString+0x22>

08006dda <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006dda:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ddc:	22a5      	movs	r2, #165	@ 0xa5
{
 8006dde:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006de0:	2402      	movs	r4, #2
 8006de2:	0092      	lsls	r2, r2, #2
 8006de4:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006de6:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8006de8:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dea:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8006dec:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dee:	f000 fa45 	bl	800727c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006df2:	2000      	movs	r0, #0
 8006df4:	bd10      	pop	{r4, pc}

08006df6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006df6:	b510      	push	{r4, lr}
 8006df8:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dfa:	000a      	movs	r2, r1
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	f000 fa3d 	bl	800727c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006e02:	2000      	movs	r0, #0
 8006e04:	bd10      	pop	{r4, pc}

08006e06 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006e06:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e08:	22a5      	movs	r2, #165	@ 0xa5
{
 8006e0a:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e0c:	2403      	movs	r4, #3
 8006e0e:	0092      	lsls	r2, r2, #2
 8006e10:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8006e12:	0002      	movs	r2, r0
 8006e14:	32fc      	adds	r2, #252	@ 0xfc
 8006e16:	6613      	str	r3, [r2, #96]	@ 0x60
  pdev->ep_out[0].rem_length   = len;
 8006e18:	6653      	str	r3, [r2, #100]	@ 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e1a:	000a      	movs	r2, r1
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	f000 fa36 	bl	800728e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006e22:	2000      	movs	r0, #0
 8006e24:	bd10      	pop	{r4, pc}

08006e26 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006e26:	b510      	push	{r4, lr}
 8006e28:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e2a:	000a      	movs	r2, r1
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	f000 fa2e 	bl	800728e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006e32:	2000      	movs	r0, #0
 8006e34:	bd10      	pop	{r4, pc}

08006e36 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e36:	23a5      	movs	r3, #165	@ 0xa5
 8006e38:	2204      	movs	r2, #4
 8006e3a:	009b      	lsls	r3, r3, #2
{
 8006e3c:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e3e:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e40:	2300      	movs	r3, #0
 8006e42:	001a      	movs	r2, r3
 8006e44:	0019      	movs	r1, r3
 8006e46:	f000 fa19 	bl	800727c <USBD_LL_Transmit>

  return USBD_OK;
}
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	bd10      	pop	{r4, pc}

08006e4e <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e4e:	23a5      	movs	r3, #165	@ 0xa5
 8006e50:	2205      	movs	r2, #5
 8006e52:	009b      	lsls	r3, r3, #2
{
 8006e54:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e56:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e58:	2300      	movs	r3, #0
 8006e5a:	001a      	movs	r2, r3
 8006e5c:	0019      	movs	r1, r3
 8006e5e:	f000 fa16 	bl	800728e <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006e62:	2000      	movs	r0, #0
 8006e64:	bd10      	pop	{r4, pc}
	...

08006e68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e6a:	4c11      	ldr	r4, [pc, #68]	@ (8006eb0 <MX_USB_DEVICE_Init+0x48>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	0020      	movs	r0, r4
 8006e70:	4910      	ldr	r1, [pc, #64]	@ (8006eb4 <MX_USB_DEVICE_Init+0x4c>)
 8006e72:	f7ff fc05 	bl	8006680 <USBD_Init>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d001      	beq.n	8006e7e <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8006e7a:	f7fa fe49 	bl	8001b10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e7e:	0020      	movs	r0, r4
 8006e80:	490d      	ldr	r1, [pc, #52]	@ (8006eb8 <MX_USB_DEVICE_Init+0x50>)
 8006e82:	f7ff fc17 	bl	80066b4 <USBD_RegisterClass>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d001      	beq.n	8006e8e <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8006e8a:	f7fa fe41 	bl	8001b10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e8e:	0020      	movs	r0, r4
 8006e90:	490a      	ldr	r1, [pc, #40]	@ (8006ebc <MX_USB_DEVICE_Init+0x54>)
 8006e92:	f7ff fba7 	bl	80065e4 <USBD_CDC_RegisterInterface>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d001      	beq.n	8006e9e <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8006e9a:	f7fa fe39 	bl	8001b10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e9e:	0020      	movs	r0, r4
 8006ea0:	f7ff fc11 	bl	80066c6 <USBD_Start>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d001      	beq.n	8006eac <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8006ea8:	f7fa fe32 	bl	8001b10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006eac:	bd10      	pop	{r4, pc}
 8006eae:	46c0      	nop			@ (mov r8, r8)
 8006eb0:	200024c4 	.word	0x200024c4
 8006eb4:	2000017c 	.word	0x2000017c
 8006eb8:	200000f4 	.word	0x200000f4
 8006ebc:	20000138 	.word	0x20000138

08006ec0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
  /* USER CODE END 4 */
}
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	4770      	bx	lr

08006ec4 <CDC_Control_FS>:
			break;
	}

	return (USBD_OK);
  /* USER CODE END 5 */
}
 8006ec4:	2000      	movs	r0, #0
 8006ec6:	4770      	bx	lr

08006ec8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eca:	000f      	movs	r7, r1
 8006ecc:	0004      	movs	r4, r0
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006ece:	4d0f      	ldr	r5, [pc, #60]	@ (8006f0c <CDC_Receive_FS+0x44>)
 8006ed0:	0001      	movs	r1, r0
 8006ed2:	0028      	movs	r0, r5
 8006ed4:	f7ff fb9a 	bl	800660c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006ed8:	0028      	movs	r0, r5
 8006eda:	f7ff fbba 	bl	8006652 <USBD_CDC_ReceivePacket>

	memset(buffer, '\0', 64);  // clear the buffer
 8006ede:	4e0c      	ldr	r6, [pc, #48]	@ (8006f10 <CDC_Receive_FS+0x48>)
 8006ee0:	2240      	movs	r2, #64	@ 0x40
 8006ee2:	0030      	movs	r0, r6
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	f000 fbb7 	bl	8007658 <memset>
	uint8_t len = (uint8_t) *Len;
	memcpy(buffer, Buf, len);  // copy the data to the buffer
 8006eea:	683d      	ldr	r5, [r7, #0]
 8006eec:	0021      	movs	r1, r4
 8006eee:	b2ed      	uxtb	r5, r5
 8006ef0:	002a      	movs	r2, r5
 8006ef2:	0030      	movs	r0, r6
 8006ef4:	f000 fc9b 	bl	800782e <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8006ef8:	002a      	movs	r2, r5
 8006efa:	2100      	movs	r1, #0
 8006efc:	0020      	movs	r0, r4
 8006efe:	f000 fbab 	bl	8007658 <memset>
	commandRecieved = TRUE;
 8006f02:	2201      	movs	r2, #1
 8006f04:	4b03      	ldr	r3, [pc, #12]	@ (8006f14 <CDC_Receive_FS+0x4c>)

	return (USBD_OK);
  /* USER CODE END 6 */
}
 8006f06:	2000      	movs	r0, #0
	commandRecieved = TRUE;
 8006f08:	701a      	strb	r2, [r3, #0]
}
 8006f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f0c:	200024c4 	.word	0x200024c4
 8006f10:	20002476 	.word	0x20002476
 8006f14:	20002182 	.word	0x20002182

08006f18 <CDC_Init_FS>:
{
 8006f18:	b510      	push	{r4, lr}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006f1a:	4c06      	ldr	r4, [pc, #24]	@ (8006f34 <CDC_Init_FS+0x1c>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	0020      	movs	r0, r4
 8006f20:	4905      	ldr	r1, [pc, #20]	@ (8006f38 <CDC_Init_FS+0x20>)
 8006f22:	f7ff fb68 	bl	80065f6 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006f26:	0020      	movs	r0, r4
 8006f28:	4904      	ldr	r1, [pc, #16]	@ (8006f3c <CDC_Init_FS+0x24>)
 8006f2a:	f7ff fb6f 	bl	800660c <USBD_CDC_SetRxBuffer>
}
 8006f2e:	2000      	movs	r0, #0
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	46c0      	nop			@ (mov r8, r8)
 8006f34:	200024c4 	.word	0x200024c4
 8006f38:	20002788 	.word	0x20002788
 8006f3c:	20002b88 	.word	0x20002b88

08006f40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f40:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8006f42:	21ae      	movs	r1, #174	@ 0xae
{
 8006f44:	b510      	push	{r4, lr}
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8006f46:	4c08      	ldr	r4, [pc, #32]	@ (8006f68 <CDC_Transmit_FS+0x28>)
 8006f48:	0089      	lsls	r1, r1, #2
{
 8006f4a:	0003      	movs	r3, r0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
 8006f4c:	5860      	ldr	r0, [r4, r1]
	if (hcdc->TxState != 0) {
 8006f4e:	39a4      	subs	r1, #164	@ 0xa4
 8006f50:	5841      	ldr	r1, [r0, r1]
		return USBD_BUSY;
 8006f52:	2001      	movs	r0, #1
	if (hcdc->TxState != 0) {
 8006f54:	2900      	cmp	r1, #0
 8006f56:	d106      	bne.n	8006f66 <CDC_Transmit_FS+0x26>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f58:	0019      	movs	r1, r3
 8006f5a:	0020      	movs	r0, r4
 8006f5c:	f7ff fb4b 	bl	80065f6 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f60:	0020      	movs	r0, r4
 8006f62:	f7ff fb5a 	bl	800661a <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8006f66:	bd10      	pop	{r4, pc}
 8006f68:	200024c4 	.word	0x200024c4

08006f6c <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f6c:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
 8006f6e:	4801      	ldr	r0, [pc, #4]	@ (8006f74 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f70:	800b      	strh	r3, [r1, #0]
}
 8006f72:	4770      	bx	lr
 8006f74:	20000168 	.word	0x20000168

08006f78 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f78:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
 8006f7a:	4801      	ldr	r0, [pc, #4]	@ (8006f80 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006f7c:	800b      	strh	r3, [r1, #0]
}
 8006f7e:	4770      	bx	lr
 8006f80:	20000164 	.word	0x20000164

08006f84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f84:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006f86:	2600      	movs	r6, #0
 8006f88:	0052      	lsls	r2, r2, #1
 8006f8a:	188a      	adds	r2, r1, r2
    if (((value >> 28)) < 0xA)
 8006f8c:	0f05      	lsrs	r5, r0, #28
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f8e:	b2ec      	uxtb	r4, r5
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f90:	0023      	movs	r3, r4
 8006f92:	3337      	adds	r3, #55	@ 0x37
    if (((value >> 28)) < 0xA)
 8006f94:	2d09      	cmp	r5, #9
 8006f96:	d800      	bhi.n	8006f9a <IntToUnicode+0x16>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f98:	3b07      	subs	r3, #7
 8006f9a:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8006f9c:	704e      	strb	r6, [r1, #1]
  for (idx = 0; idx < len; idx++)
 8006f9e:	3102      	adds	r1, #2
    value = value << 4;
 8006fa0:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8006fa2:	428a      	cmp	r2, r1
 8006fa4:	d1f2      	bne.n	8006f8c <IntToUnicode+0x8>
  }
}
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}

08006fa8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006fa8:	231a      	movs	r3, #26
{
 8006faa:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006fac:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006fae:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd8 <USBD_FS_SerialStrDescriptor+0x30>)
 8006fb0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fdc <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 += deviceserial2;
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d00a      	beq.n	8006fd2 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006fbc:	4b08      	ldr	r3, [pc, #32]	@ (8006fe0 <USBD_FS_SerialStrDescriptor+0x38>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006fbe:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006fc0:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006fc2:	4908      	ldr	r1, [pc, #32]	@ (8006fe4 <USBD_FS_SerialStrDescriptor+0x3c>)
 8006fc4:	f7ff ffde 	bl	8006f84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006fc8:	2204      	movs	r2, #4
 8006fca:	0020      	movs	r0, r4
 8006fcc:	4906      	ldr	r1, [pc, #24]	@ (8006fe8 <USBD_FS_SerialStrDescriptor+0x40>)
 8006fce:	f7ff ffd9 	bl	8006f84 <IntToUnicode>
  return (uint8_t *) USBD_StringSerial;
 8006fd2:	4806      	ldr	r0, [pc, #24]	@ (8006fec <USBD_FS_SerialStrDescriptor+0x44>)
}
 8006fd4:	bd10      	pop	{r4, pc}
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	1ffff7ac 	.word	0x1ffff7ac
 8006fdc:	1ffff7b4 	.word	0x1ffff7b4
 8006fe0:	1ffff7b0 	.word	0x1ffff7b0
 8006fe4:	2000014a 	.word	0x2000014a
 8006fe8:	2000015a 	.word	0x2000015a
 8006fec:	20000148 	.word	0x20000148

08006ff0 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006ff0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ff2:	4c04      	ldr	r4, [pc, #16]	@ (8007004 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8006ff4:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ff6:	0021      	movs	r1, r4
 8006ff8:	4803      	ldr	r0, [pc, #12]	@ (8007008 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006ffa:	f7ff fed1 	bl	8006da0 <USBD_GetString>
}
 8006ffe:	0020      	movs	r0, r4
 8007000:	bd10      	pop	{r4, pc}
 8007002:	46c0      	nop			@ (mov r8, r8)
 8007004:	20002f88 	.word	0x20002f88
 8007008:	080089d0 	.word	0x080089d0

0800700c <USBD_FS_ProductStrDescriptor>:
{
 800700c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800700e:	4c04      	ldr	r4, [pc, #16]	@ (8007020 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8007010:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007012:	0021      	movs	r1, r4
 8007014:	4803      	ldr	r0, [pc, #12]	@ (8007024 <USBD_FS_ProductStrDescriptor+0x18>)
 8007016:	f7ff fec3 	bl	8006da0 <USBD_GetString>
}
 800701a:	0020      	movs	r0, r4
 800701c:	bd10      	pop	{r4, pc}
 800701e:	46c0      	nop			@ (mov r8, r8)
 8007020:	20002f88 	.word	0x20002f88
 8007024:	080089e3 	.word	0x080089e3

08007028 <USBD_FS_ConfigStrDescriptor>:
{
 8007028:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800702a:	4c04      	ldr	r4, [pc, #16]	@ (800703c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800702c:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800702e:	0021      	movs	r1, r4
 8007030:	4803      	ldr	r0, [pc, #12]	@ (8007040 <USBD_FS_ConfigStrDescriptor+0x18>)
 8007032:	f7ff feb5 	bl	8006da0 <USBD_GetString>
}
 8007036:	0020      	movs	r0, r4
 8007038:	bd10      	pop	{r4, pc}
 800703a:	46c0      	nop			@ (mov r8, r8)
 800703c:	20002f88 	.word	0x20002f88
 8007040:	080089f9 	.word	0x080089f9

08007044 <USBD_FS_InterfaceStrDescriptor>:
{
 8007044:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007046:	4c04      	ldr	r4, [pc, #16]	@ (8007058 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8007048:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800704a:	0021      	movs	r1, r4
 800704c:	4803      	ldr	r0, [pc, #12]	@ (800705c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800704e:	f7ff fea7 	bl	8006da0 <USBD_GetString>
}
 8007052:	0020      	movs	r0, r4
 8007054:	bd10      	pop	{r4, pc}
 8007056:	46c0      	nop			@ (mov r8, r8)
 8007058:	20002f88 	.word	0x20002f88
 800705c:	08008a04 	.word	0x08008a04

08007060 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007060:	2800      	cmp	r0, #0
 8007062:	d003      	beq.n	800706c <USBD_Get_USB_Status+0xc>
 8007064:	3802      	subs	r0, #2
 8007066:	1e43      	subs	r3, r0, #1
 8007068:	4198      	sbcs	r0, r3
 800706a:	3001      	adds	r0, #1
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800706c:	4770      	bx	lr
	...

08007070 <HAL_PCD_MspInit>:
{
 8007070:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8007072:	4b0b      	ldr	r3, [pc, #44]	@ (80070a0 <HAL_PCD_MspInit+0x30>)
 8007074:	6802      	ldr	r2, [r0, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d111      	bne.n	800709e <HAL_PCD_MspInit+0x2e>
    __HAL_RCC_USB_CLK_ENABLE();
 800707a:	2180      	movs	r1, #128	@ 0x80
 800707c:	4b09      	ldr	r3, [pc, #36]	@ (80070a4 <HAL_PCD_MspInit+0x34>)
 800707e:	0409      	lsls	r1, r1, #16
 8007080:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007082:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 8007084:	430a      	orrs	r2, r1
 8007086:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007088:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	400b      	ands	r3, r1
 800708e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007090:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8007092:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007094:	f7fc f9fc 	bl	8003490 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007098:	201f      	movs	r0, #31
 800709a:	f7fc fa23 	bl	80034e4 <HAL_NVIC_EnableIRQ>
}
 800709e:	bd07      	pop	{r0, r1, r2, pc}
 80070a0:	40005c00 	.word	0x40005c00
 80070a4:	40021000 	.word	0x40021000

080070a8 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070a8:	23a6      	movs	r3, #166	@ 0xa6
{
 80070aa:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	18c1      	adds	r1, r0, r3
 80070b0:	3340      	adds	r3, #64	@ 0x40
 80070b2:	58c0      	ldr	r0, [r0, r3]
 80070b4:	f7ff fb22 	bl	80066fc <USBD_LL_SetupStage>
}
 80070b8:	bd10      	pop	{r4, pc}

080070ba <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070ba:	2328      	movs	r3, #40	@ 0x28
 80070bc:	434b      	muls	r3, r1
 80070be:	18c3      	adds	r3, r0, r3
 80070c0:	33fc      	adds	r3, #252	@ 0xfc
 80070c2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80070c4:	23b6      	movs	r3, #182	@ 0xb6
{
 80070c6:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	58c0      	ldr	r0, [r0, r3]
 80070cc:	f7ff fb48 	bl	8006760 <USBD_LL_DataOutStage>
}
 80070d0:	bd10      	pop	{r4, pc}

080070d2 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070d2:	2328      	movs	r3, #40	@ 0x28
 80070d4:	434b      	muls	r3, r1
 80070d6:	18c3      	adds	r3, r0, r3
 80070d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070da:	23b6      	movs	r3, #182	@ 0xb6
{
 80070dc:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	58c0      	ldr	r0, [r0, r3]
 80070e2:	f7ff fb80 	bl	80067e6 <USBD_LL_DataInStage>
}
 80070e6:	bd10      	pop	{r4, pc}

080070e8 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070e8:	23b6      	movs	r3, #182	@ 0xb6
{
 80070ea:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	58c0      	ldr	r0, [r0, r3]
 80070f0:	f7ff fc22 	bl	8006938 <USBD_LL_SOF>
}
 80070f4:	bd10      	pop	{r4, pc}

080070f6 <HAL_PCD_ResetCallback>:
{
 80070f6:	b570      	push	{r4, r5, r6, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80070f8:	7943      	ldrb	r3, [r0, #5]
{
 80070fa:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d001      	beq.n	8007104 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8007100:	f7fa fd06 	bl	8001b10 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007104:	25b6      	movs	r5, #182	@ 0xb6
 8007106:	00ad      	lsls	r5, r5, #2
 8007108:	2101      	movs	r1, #1
 800710a:	5960      	ldr	r0, [r4, r5]
 800710c:	f7ff fbf9 	bl	8006902 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007110:	5960      	ldr	r0, [r4, r5]
 8007112:	f7ff fbcc 	bl	80068ae <USBD_LL_Reset>
}
 8007116:	bd70      	pop	{r4, r5, r6, pc}

08007118 <HAL_PCD_SuspendCallback>:
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007118:	23b6      	movs	r3, #182	@ 0xb6
{
 800711a:	b510      	push	{r4, lr}
 800711c:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	58c0      	ldr	r0, [r0, r3]
 8007122:	f7ff fbf1 	bl	8006908 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8007126:	7a63      	ldrb	r3, [r4, #9]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_PCD_SuspendCallback+0x1e>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800712c:	2306      	movs	r3, #6
 800712e:	4a02      	ldr	r2, [pc, #8]	@ (8007138 <HAL_PCD_SuspendCallback+0x20>)
 8007130:	6911      	ldr	r1, [r2, #16]
 8007132:	430b      	orrs	r3, r1
 8007134:	6113      	str	r3, [r2, #16]
}
 8007136:	bd10      	pop	{r4, pc}
 8007138:	e000ed00 	.word	0xe000ed00

0800713c <HAL_PCD_ResumeCallback>:
{
 800713c:	b510      	push	{r4, lr}
  if (hpcd->Init.low_power_enable)
 800713e:	7a43      	ldrb	r3, [r0, #9]
{
 8007140:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8007142:	2b00      	cmp	r3, #0
 8007144:	d006      	beq.n	8007154 <HAL_PCD_ResumeCallback+0x18>
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007146:	2106      	movs	r1, #6
 8007148:	4a05      	ldr	r2, [pc, #20]	@ (8007160 <HAL_PCD_ResumeCallback+0x24>)
 800714a:	6913      	ldr	r3, [r2, #16]
 800714c:	438b      	bics	r3, r1
 800714e:	6113      	str	r3, [r2, #16]
  SystemClock_Config();
 8007150:	f7fa f89c 	bl	800128c <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007154:	23b6      	movs	r3, #182	@ 0xb6
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	58e0      	ldr	r0, [r4, r3]
 800715a:	f7ff fbe1 	bl	8006920 <USBD_LL_Resume>
}
 800715e:	bd10      	pop	{r4, pc}
 8007160:	e000ed00 	.word	0xe000ed00

08007164 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8007164:	23b6      	movs	r3, #182	@ 0xb6
{
 8007166:	b570      	push	{r4, r5, r6, lr}
 8007168:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 800716a:	481c      	ldr	r0, [pc, #112]	@ (80071dc <USBD_LL_Init+0x78>)
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8007170:	4b1b      	ldr	r3, [pc, #108]	@ (80071e0 <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 8007172:	25b0      	movs	r5, #176	@ 0xb0
  hpcd_USB_FS.Instance = USB;
 8007174:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007176:	2382      	movs	r3, #130	@ 0x82
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	8083      	strh	r3, [r0, #4]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800717c:	2302      	movs	r3, #2
 800717e:	71c3      	strb	r3, [r0, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007180:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8007182:	00ad      	lsls	r5, r5, #2
 8007184:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007186:	7243      	strb	r3, [r0, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007188:	8143      	strh	r3, [r0, #10]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800718a:	f7fc ff21 	bl	8003fd0 <HAL_PCD_Init>
 800718e:	2800      	cmp	r0, #0
 8007190:	d001      	beq.n	8007196 <USBD_LL_Init+0x32>
    Error_Handler( );
 8007192:	f7fa fcbd 	bl	8001b10 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007196:	2200      	movs	r2, #0
 8007198:	5960      	ldr	r0, [r4, r5]
 800719a:	0011      	movs	r1, r2
 800719c:	2318      	movs	r3, #24
 800719e:	f7fd fd56 	bl	8004c4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80071a2:	5960      	ldr	r0, [r4, r5]
 80071a4:	2358      	movs	r3, #88	@ 0x58
 80071a6:	2200      	movs	r2, #0
 80071a8:	2180      	movs	r1, #128	@ 0x80
 80071aa:	f7fd fd50 	bl	8004c4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80071ae:	5960      	ldr	r0, [r4, r5]
 80071b0:	23c0      	movs	r3, #192	@ 0xc0
 80071b2:	2200      	movs	r2, #0
 80071b4:	2181      	movs	r1, #129	@ 0x81
 80071b6:	f7fd fd4a 	bl	8004c4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80071ba:	2388      	movs	r3, #136	@ 0x88
 80071bc:	5960      	ldr	r0, [r4, r5]
 80071be:	2200      	movs	r2, #0
 80071c0:	2101      	movs	r1, #1
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	f7fd fd43 	bl	8004c4e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80071c8:	2380      	movs	r3, #128	@ 0x80
 80071ca:	5960      	ldr	r0, [r4, r5]
 80071cc:	2200      	movs	r2, #0
 80071ce:	2182      	movs	r1, #130	@ 0x82
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	f7fd fd3c 	bl	8004c4e <HAL_PCDEx_PMAConfig>
}
 80071d6:	2000      	movs	r0, #0
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
 80071da:	46c0      	nop			@ (mov r8, r8)
 80071dc:	200033a8 	.word	0x200033a8
 80071e0:	40005c00 	.word	0x40005c00

080071e4 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 80071e4:	23b0      	movs	r3, #176	@ 0xb0
{
 80071e6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	58c0      	ldr	r0, [r0, r3]
 80071ec:	f7fc ff3c 	bl	8004068 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80071f0:	f7ff ff36 	bl	8007060 <USBD_Get_USB_Status>
}
 80071f4:	bd10      	pop	{r4, pc}

080071f6 <USBD_LL_OpenEP>:
{
 80071f6:	b510      	push	{r4, lr}
 80071f8:	0014      	movs	r4, r2
 80071fa:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80071fc:	0023      	movs	r3, r4
 80071fe:	24b0      	movs	r4, #176	@ 0xb0
 8007200:	00a4      	lsls	r4, r4, #2
 8007202:	5900      	ldr	r0, [r0, r4]
 8007204:	f7fd fc3a 	bl	8004a7c <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007208:	f7ff ff2a 	bl	8007060 <USBD_Get_USB_Status>
}
 800720c:	bd10      	pop	{r4, pc}

0800720e <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800720e:	23b0      	movs	r3, #176	@ 0xb0
{
 8007210:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	58c0      	ldr	r0, [r0, r3]
 8007216:	f7fd fc5d 	bl	8004ad4 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800721a:	f7ff ff21 	bl	8007060 <USBD_Get_USB_Status>
}
 800721e:	bd10      	pop	{r4, pc}

08007220 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007220:	23b0      	movs	r3, #176	@ 0xb0
{
 8007222:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	58c0      	ldr	r0, [r0, r3]
 8007228:	f7fd fcb5 	bl	8004b96 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800722c:	f7ff ff18 	bl	8007060 <USBD_Get_USB_Status>
}
 8007230:	bd10      	pop	{r4, pc}

08007232 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007232:	23b0      	movs	r3, #176	@ 0xb0
{
 8007234:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	58c0      	ldr	r0, [r0, r3]
 800723a:	f7fd fcda 	bl	8004bf2 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800723e:	f7ff ff0f 	bl	8007060 <USBD_Get_USB_Status>
}
 8007242:	bd10      	pop	{r4, pc}

08007244 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007244:	23b0      	movs	r3, #176	@ 0xb0
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 800724a:	b248      	sxtb	r0, r1
 800724c:	2228      	movs	r2, #40	@ 0x28
 800724e:	2800      	cmp	r0, #0
 8007250:	da05      	bge.n	800725e <USBD_LL_IsStallEP+0x1a>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007252:	207f      	movs	r0, #127	@ 0x7f
 8007254:	4001      	ands	r1, r0
 8007256:	434a      	muls	r2, r1
 8007258:	189b      	adds	r3, r3, r2
 800725a:	7c98      	ldrb	r0, [r3, #18]
}
 800725c:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800725e:	434a      	muls	r2, r1
 8007260:	189b      	adds	r3, r3, r2
 8007262:	3353      	adds	r3, #83	@ 0x53
 8007264:	33ff      	adds	r3, #255	@ 0xff
 8007266:	7818      	ldrb	r0, [r3, #0]
 8007268:	e7f8      	b.n	800725c <USBD_LL_IsStallEP+0x18>

0800726a <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800726a:	23b0      	movs	r3, #176	@ 0xb0
{
 800726c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	58c0      	ldr	r0, [r0, r3]
 8007272:	f7fc ff0c 	bl	800408e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007276:	f7ff fef3 	bl	8007060 <USBD_Get_USB_Status>
}
 800727a:	bd10      	pop	{r4, pc}

0800727c <USBD_LL_Transmit>:
{
 800727c:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800727e:	24b0      	movs	r4, #176	@ 0xb0
 8007280:	00a4      	lsls	r4, r4, #2
 8007282:	5900      	ldr	r0, [r0, r4]
 8007284:	f7fd fc6f 	bl	8004b66 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007288:	f7ff feea 	bl	8007060 <USBD_Get_USB_Status>
}
 800728c:	bd10      	pop	{r4, pc}

0800728e <USBD_LL_PrepareReceive>:
{
 800728e:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007290:	24b0      	movs	r4, #176	@ 0xb0
 8007292:	00a4      	lsls	r4, r4, #2
 8007294:	5900      	ldr	r0, [r0, r4]
 8007296:	f7fd fc43 	bl	8004b20 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800729a:	f7ff fee1 	bl	8007060 <USBD_Get_USB_Status>
}
 800729e:	bd10      	pop	{r4, pc}

080072a0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80072a0:	23b0      	movs	r3, #176	@ 0xb0
{
 80072a2:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	58c0      	ldr	r0, [r0, r3]
 80072a8:	f7fd fc55 	bl	8004b56 <HAL_PCD_EP_GetRxCount>
}
 80072ac:	bd10      	pop	{r4, pc}
	...

080072b0 <USBD_static_malloc>:
  return mem;
 80072b0:	4800      	ldr	r0, [pc, #0]	@ (80072b4 <USBD_static_malloc+0x4>)
}
 80072b2:	4770      	bx	lr
 80072b4:	20003188 	.word	0x20003188

080072b8 <USBD_static_free>:
}
 80072b8:	4770      	bx	lr

080072ba <atoi>:
 80072ba:	b510      	push	{r4, lr}
 80072bc:	220a      	movs	r2, #10
 80072be:	2100      	movs	r1, #0
 80072c0:	f000 f88c 	bl	80073dc <strtol>
 80072c4:	bd10      	pop	{r4, pc}
	...

080072c8 <_strtol_l.isra.0>:
 80072c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ca:	b085      	sub	sp, #20
 80072cc:	0017      	movs	r7, r2
 80072ce:	001e      	movs	r6, r3
 80072d0:	9003      	str	r0, [sp, #12]
 80072d2:	9101      	str	r1, [sp, #4]
 80072d4:	2b24      	cmp	r3, #36	@ 0x24
 80072d6:	d823      	bhi.n	8007320 <_strtol_l.isra.0+0x58>
 80072d8:	000c      	movs	r4, r1
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d020      	beq.n	8007320 <_strtol_l.isra.0+0x58>
 80072de:	4b3d      	ldr	r3, [pc, #244]	@ (80073d4 <_strtol_l.isra.0+0x10c>)
 80072e0:	2208      	movs	r2, #8
 80072e2:	469c      	mov	ip, r3
 80072e4:	0023      	movs	r3, r4
 80072e6:	4661      	mov	r1, ip
 80072e8:	781d      	ldrb	r5, [r3, #0]
 80072ea:	3401      	adds	r4, #1
 80072ec:	5d48      	ldrb	r0, [r1, r5]
 80072ee:	0001      	movs	r1, r0
 80072f0:	4011      	ands	r1, r2
 80072f2:	4210      	tst	r0, r2
 80072f4:	d1f6      	bne.n	80072e4 <_strtol_l.isra.0+0x1c>
 80072f6:	2d2d      	cmp	r5, #45	@ 0x2d
 80072f8:	d119      	bne.n	800732e <_strtol_l.isra.0+0x66>
 80072fa:	7825      	ldrb	r5, [r4, #0]
 80072fc:	1c9c      	adds	r4, r3, #2
 80072fe:	2301      	movs	r3, #1
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	2210      	movs	r2, #16
 8007304:	0033      	movs	r3, r6
 8007306:	4393      	bics	r3, r2
 8007308:	d11d      	bne.n	8007346 <_strtol_l.isra.0+0x7e>
 800730a:	2d30      	cmp	r5, #48	@ 0x30
 800730c:	d115      	bne.n	800733a <_strtol_l.isra.0+0x72>
 800730e:	2120      	movs	r1, #32
 8007310:	7823      	ldrb	r3, [r4, #0]
 8007312:	438b      	bics	r3, r1
 8007314:	2b58      	cmp	r3, #88	@ 0x58
 8007316:	d110      	bne.n	800733a <_strtol_l.isra.0+0x72>
 8007318:	7865      	ldrb	r5, [r4, #1]
 800731a:	3402      	adds	r4, #2
 800731c:	2610      	movs	r6, #16
 800731e:	e012      	b.n	8007346 <_strtol_l.isra.0+0x7e>
 8007320:	f000 fa50 	bl	80077c4 <__errno>
 8007324:	2316      	movs	r3, #22
 8007326:	6003      	str	r3, [r0, #0]
 8007328:	2000      	movs	r0, #0
 800732a:	b005      	add	sp, #20
 800732c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800732e:	9100      	str	r1, [sp, #0]
 8007330:	2d2b      	cmp	r5, #43	@ 0x2b
 8007332:	d1e6      	bne.n	8007302 <_strtol_l.isra.0+0x3a>
 8007334:	7825      	ldrb	r5, [r4, #0]
 8007336:	1c9c      	adds	r4, r3, #2
 8007338:	e7e3      	b.n	8007302 <_strtol_l.isra.0+0x3a>
 800733a:	2e00      	cmp	r6, #0
 800733c:	d1ee      	bne.n	800731c <_strtol_l.isra.0+0x54>
 800733e:	360a      	adds	r6, #10
 8007340:	2d30      	cmp	r5, #48	@ 0x30
 8007342:	d100      	bne.n	8007346 <_strtol_l.isra.0+0x7e>
 8007344:	3e02      	subs	r6, #2
 8007346:	4a24      	ldr	r2, [pc, #144]	@ (80073d8 <_strtol_l.isra.0+0x110>)
 8007348:	9b00      	ldr	r3, [sp, #0]
 800734a:	4694      	mov	ip, r2
 800734c:	4463      	add	r3, ip
 800734e:	0031      	movs	r1, r6
 8007350:	0018      	movs	r0, r3
 8007352:	9302      	str	r3, [sp, #8]
 8007354:	f7f8 ff8e 	bl	8000274 <__aeabi_uidivmod>
 8007358:	2200      	movs	r2, #0
 800735a:	4684      	mov	ip, r0
 800735c:	0010      	movs	r0, r2
 800735e:	002b      	movs	r3, r5
 8007360:	3b30      	subs	r3, #48	@ 0x30
 8007362:	2b09      	cmp	r3, #9
 8007364:	d811      	bhi.n	800738a <_strtol_l.isra.0+0xc2>
 8007366:	001d      	movs	r5, r3
 8007368:	42ae      	cmp	r6, r5
 800736a:	dd1d      	ble.n	80073a8 <_strtol_l.isra.0+0xe0>
 800736c:	1c53      	adds	r3, r2, #1
 800736e:	d009      	beq.n	8007384 <_strtol_l.isra.0+0xbc>
 8007370:	2201      	movs	r2, #1
 8007372:	4252      	negs	r2, r2
 8007374:	4584      	cmp	ip, r0
 8007376:	d305      	bcc.n	8007384 <_strtol_l.isra.0+0xbc>
 8007378:	d101      	bne.n	800737e <_strtol_l.isra.0+0xb6>
 800737a:	42a9      	cmp	r1, r5
 800737c:	db11      	blt.n	80073a2 <_strtol_l.isra.0+0xda>
 800737e:	2201      	movs	r2, #1
 8007380:	4370      	muls	r0, r6
 8007382:	1828      	adds	r0, r5, r0
 8007384:	7825      	ldrb	r5, [r4, #0]
 8007386:	3401      	adds	r4, #1
 8007388:	e7e9      	b.n	800735e <_strtol_l.isra.0+0x96>
 800738a:	002b      	movs	r3, r5
 800738c:	3b41      	subs	r3, #65	@ 0x41
 800738e:	2b19      	cmp	r3, #25
 8007390:	d801      	bhi.n	8007396 <_strtol_l.isra.0+0xce>
 8007392:	3d37      	subs	r5, #55	@ 0x37
 8007394:	e7e8      	b.n	8007368 <_strtol_l.isra.0+0xa0>
 8007396:	002b      	movs	r3, r5
 8007398:	3b61      	subs	r3, #97	@ 0x61
 800739a:	2b19      	cmp	r3, #25
 800739c:	d804      	bhi.n	80073a8 <_strtol_l.isra.0+0xe0>
 800739e:	3d57      	subs	r5, #87	@ 0x57
 80073a0:	e7e2      	b.n	8007368 <_strtol_l.isra.0+0xa0>
 80073a2:	2201      	movs	r2, #1
 80073a4:	4252      	negs	r2, r2
 80073a6:	e7ed      	b.n	8007384 <_strtol_l.isra.0+0xbc>
 80073a8:	1c53      	adds	r3, r2, #1
 80073aa:	d108      	bne.n	80073be <_strtol_l.isra.0+0xf6>
 80073ac:	2322      	movs	r3, #34	@ 0x22
 80073ae:	9a03      	ldr	r2, [sp, #12]
 80073b0:	9802      	ldr	r0, [sp, #8]
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	2f00      	cmp	r7, #0
 80073b6:	d0b8      	beq.n	800732a <_strtol_l.isra.0+0x62>
 80073b8:	1e63      	subs	r3, r4, #1
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	e007      	b.n	80073ce <_strtol_l.isra.0+0x106>
 80073be:	9b00      	ldr	r3, [sp, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d000      	beq.n	80073c6 <_strtol_l.isra.0+0xfe>
 80073c4:	4240      	negs	r0, r0
 80073c6:	2f00      	cmp	r7, #0
 80073c8:	d0af      	beq.n	800732a <_strtol_l.isra.0+0x62>
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	d1f4      	bne.n	80073b8 <_strtol_l.isra.0+0xf0>
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	e7aa      	b.n	800732a <_strtol_l.isra.0+0x62>
 80073d4:	08008b25 	.word	0x08008b25
 80073d8:	7fffffff 	.word	0x7fffffff

080073dc <strtol>:
 80073dc:	b510      	push	{r4, lr}
 80073de:	4c04      	ldr	r4, [pc, #16]	@ (80073f0 <strtol+0x14>)
 80073e0:	0013      	movs	r3, r2
 80073e2:	000a      	movs	r2, r1
 80073e4:	0001      	movs	r1, r0
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	f7ff ff6e 	bl	80072c8 <_strtol_l.isra.0>
 80073ec:	bd10      	pop	{r4, pc}
 80073ee:	46c0      	nop			@ (mov r8, r8)
 80073f0:	200001a4 	.word	0x200001a4

080073f4 <std>:
 80073f4:	2300      	movs	r3, #0
 80073f6:	b510      	push	{r4, lr}
 80073f8:	0004      	movs	r4, r0
 80073fa:	6003      	str	r3, [r0, #0]
 80073fc:	6043      	str	r3, [r0, #4]
 80073fe:	6083      	str	r3, [r0, #8]
 8007400:	8181      	strh	r1, [r0, #12]
 8007402:	6643      	str	r3, [r0, #100]	@ 0x64
 8007404:	81c2      	strh	r2, [r0, #14]
 8007406:	6103      	str	r3, [r0, #16]
 8007408:	6143      	str	r3, [r0, #20]
 800740a:	6183      	str	r3, [r0, #24]
 800740c:	0019      	movs	r1, r3
 800740e:	2208      	movs	r2, #8
 8007410:	305c      	adds	r0, #92	@ 0x5c
 8007412:	f000 f921 	bl	8007658 <memset>
 8007416:	4b0b      	ldr	r3, [pc, #44]	@ (8007444 <std+0x50>)
 8007418:	6224      	str	r4, [r4, #32]
 800741a:	6263      	str	r3, [r4, #36]	@ 0x24
 800741c:	4b0a      	ldr	r3, [pc, #40]	@ (8007448 <std+0x54>)
 800741e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007420:	4b0a      	ldr	r3, [pc, #40]	@ (800744c <std+0x58>)
 8007422:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007424:	4b0a      	ldr	r3, [pc, #40]	@ (8007450 <std+0x5c>)
 8007426:	6323      	str	r3, [r4, #48]	@ 0x30
 8007428:	4b0a      	ldr	r3, [pc, #40]	@ (8007454 <std+0x60>)
 800742a:	429c      	cmp	r4, r3
 800742c:	d005      	beq.n	800743a <std+0x46>
 800742e:	4b0a      	ldr	r3, [pc, #40]	@ (8007458 <std+0x64>)
 8007430:	429c      	cmp	r4, r3
 8007432:	d002      	beq.n	800743a <std+0x46>
 8007434:	4b09      	ldr	r3, [pc, #36]	@ (800745c <std+0x68>)
 8007436:	429c      	cmp	r4, r3
 8007438:	d103      	bne.n	8007442 <std+0x4e>
 800743a:	0020      	movs	r0, r4
 800743c:	3058      	adds	r0, #88	@ 0x58
 800743e:	f000 f9eb 	bl	8007818 <__retarget_lock_init_recursive>
 8007442:	bd10      	pop	{r4, pc}
 8007444:	080075c1 	.word	0x080075c1
 8007448:	080075e9 	.word	0x080075e9
 800744c:	08007621 	.word	0x08007621
 8007450:	0800764d 	.word	0x0800764d
 8007454:	20003684 	.word	0x20003684
 8007458:	200036ec 	.word	0x200036ec
 800745c:	20003754 	.word	0x20003754

08007460 <stdio_exit_handler>:
 8007460:	b510      	push	{r4, lr}
 8007462:	4a03      	ldr	r2, [pc, #12]	@ (8007470 <stdio_exit_handler+0x10>)
 8007464:	4903      	ldr	r1, [pc, #12]	@ (8007474 <stdio_exit_handler+0x14>)
 8007466:	4804      	ldr	r0, [pc, #16]	@ (8007478 <stdio_exit_handler+0x18>)
 8007468:	f000 f86c 	bl	8007544 <_fwalk_sglue>
 800746c:	bd10      	pop	{r4, pc}
 800746e:	46c0      	nop			@ (mov r8, r8)
 8007470:	20000198 	.word	0x20000198
 8007474:	08008149 	.word	0x08008149
 8007478:	200001a8 	.word	0x200001a8

0800747c <cleanup_stdio>:
 800747c:	6841      	ldr	r1, [r0, #4]
 800747e:	4b0b      	ldr	r3, [pc, #44]	@ (80074ac <cleanup_stdio+0x30>)
 8007480:	b510      	push	{r4, lr}
 8007482:	0004      	movs	r4, r0
 8007484:	4299      	cmp	r1, r3
 8007486:	d001      	beq.n	800748c <cleanup_stdio+0x10>
 8007488:	f000 fe5e 	bl	8008148 <_fflush_r>
 800748c:	68a1      	ldr	r1, [r4, #8]
 800748e:	4b08      	ldr	r3, [pc, #32]	@ (80074b0 <cleanup_stdio+0x34>)
 8007490:	4299      	cmp	r1, r3
 8007492:	d002      	beq.n	800749a <cleanup_stdio+0x1e>
 8007494:	0020      	movs	r0, r4
 8007496:	f000 fe57 	bl	8008148 <_fflush_r>
 800749a:	68e1      	ldr	r1, [r4, #12]
 800749c:	4b05      	ldr	r3, [pc, #20]	@ (80074b4 <cleanup_stdio+0x38>)
 800749e:	4299      	cmp	r1, r3
 80074a0:	d002      	beq.n	80074a8 <cleanup_stdio+0x2c>
 80074a2:	0020      	movs	r0, r4
 80074a4:	f000 fe50 	bl	8008148 <_fflush_r>
 80074a8:	bd10      	pop	{r4, pc}
 80074aa:	46c0      	nop			@ (mov r8, r8)
 80074ac:	20003684 	.word	0x20003684
 80074b0:	200036ec 	.word	0x200036ec
 80074b4:	20003754 	.word	0x20003754

080074b8 <global_stdio_init.part.0>:
 80074b8:	b510      	push	{r4, lr}
 80074ba:	4b09      	ldr	r3, [pc, #36]	@ (80074e0 <global_stdio_init.part.0+0x28>)
 80074bc:	4a09      	ldr	r2, [pc, #36]	@ (80074e4 <global_stdio_init.part.0+0x2c>)
 80074be:	2104      	movs	r1, #4
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	4809      	ldr	r0, [pc, #36]	@ (80074e8 <global_stdio_init.part.0+0x30>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	f7ff ff95 	bl	80073f4 <std>
 80074ca:	2201      	movs	r2, #1
 80074cc:	2109      	movs	r1, #9
 80074ce:	4807      	ldr	r0, [pc, #28]	@ (80074ec <global_stdio_init.part.0+0x34>)
 80074d0:	f7ff ff90 	bl	80073f4 <std>
 80074d4:	2202      	movs	r2, #2
 80074d6:	2112      	movs	r1, #18
 80074d8:	4805      	ldr	r0, [pc, #20]	@ (80074f0 <global_stdio_init.part.0+0x38>)
 80074da:	f7ff ff8b 	bl	80073f4 <std>
 80074de:	bd10      	pop	{r4, pc}
 80074e0:	200037bc 	.word	0x200037bc
 80074e4:	08007461 	.word	0x08007461
 80074e8:	20003684 	.word	0x20003684
 80074ec:	200036ec 	.word	0x200036ec
 80074f0:	20003754 	.word	0x20003754

080074f4 <__sfp_lock_acquire>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	4802      	ldr	r0, [pc, #8]	@ (8007500 <__sfp_lock_acquire+0xc>)
 80074f8:	f000 f98f 	bl	800781a <__retarget_lock_acquire_recursive>
 80074fc:	bd10      	pop	{r4, pc}
 80074fe:	46c0      	nop			@ (mov r8, r8)
 8007500:	200037c5 	.word	0x200037c5

08007504 <__sfp_lock_release>:
 8007504:	b510      	push	{r4, lr}
 8007506:	4802      	ldr	r0, [pc, #8]	@ (8007510 <__sfp_lock_release+0xc>)
 8007508:	f000 f988 	bl	800781c <__retarget_lock_release_recursive>
 800750c:	bd10      	pop	{r4, pc}
 800750e:	46c0      	nop			@ (mov r8, r8)
 8007510:	200037c5 	.word	0x200037c5

08007514 <__sinit>:
 8007514:	b510      	push	{r4, lr}
 8007516:	0004      	movs	r4, r0
 8007518:	f7ff ffec 	bl	80074f4 <__sfp_lock_acquire>
 800751c:	6a23      	ldr	r3, [r4, #32]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <__sinit+0x14>
 8007522:	f7ff ffef 	bl	8007504 <__sfp_lock_release>
 8007526:	bd10      	pop	{r4, pc}
 8007528:	4b04      	ldr	r3, [pc, #16]	@ (800753c <__sinit+0x28>)
 800752a:	6223      	str	r3, [r4, #32]
 800752c:	4b04      	ldr	r3, [pc, #16]	@ (8007540 <__sinit+0x2c>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1f6      	bne.n	8007522 <__sinit+0xe>
 8007534:	f7ff ffc0 	bl	80074b8 <global_stdio_init.part.0>
 8007538:	e7f3      	b.n	8007522 <__sinit+0xe>
 800753a:	46c0      	nop			@ (mov r8, r8)
 800753c:	0800747d 	.word	0x0800747d
 8007540:	200037bc 	.word	0x200037bc

08007544 <_fwalk_sglue>:
 8007544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007546:	0014      	movs	r4, r2
 8007548:	2600      	movs	r6, #0
 800754a:	9000      	str	r0, [sp, #0]
 800754c:	9101      	str	r1, [sp, #4]
 800754e:	68a5      	ldr	r5, [r4, #8]
 8007550:	6867      	ldr	r7, [r4, #4]
 8007552:	3f01      	subs	r7, #1
 8007554:	d504      	bpl.n	8007560 <_fwalk_sglue+0x1c>
 8007556:	6824      	ldr	r4, [r4, #0]
 8007558:	2c00      	cmp	r4, #0
 800755a:	d1f8      	bne.n	800754e <_fwalk_sglue+0xa>
 800755c:	0030      	movs	r0, r6
 800755e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007560:	89ab      	ldrh	r3, [r5, #12]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d908      	bls.n	8007578 <_fwalk_sglue+0x34>
 8007566:	220e      	movs	r2, #14
 8007568:	5eab      	ldrsh	r3, [r5, r2]
 800756a:	3301      	adds	r3, #1
 800756c:	d004      	beq.n	8007578 <_fwalk_sglue+0x34>
 800756e:	0029      	movs	r1, r5
 8007570:	9800      	ldr	r0, [sp, #0]
 8007572:	9b01      	ldr	r3, [sp, #4]
 8007574:	4798      	blx	r3
 8007576:	4306      	orrs	r6, r0
 8007578:	3568      	adds	r5, #104	@ 0x68
 800757a:	e7ea      	b.n	8007552 <_fwalk_sglue+0xe>

0800757c <siprintf>:
 800757c:	b40e      	push	{r1, r2, r3}
 800757e:	b510      	push	{r4, lr}
 8007580:	2400      	movs	r4, #0
 8007582:	490c      	ldr	r1, [pc, #48]	@ (80075b4 <siprintf+0x38>)
 8007584:	b09d      	sub	sp, #116	@ 0x74
 8007586:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007588:	9002      	str	r0, [sp, #8]
 800758a:	9006      	str	r0, [sp, #24]
 800758c:	9107      	str	r1, [sp, #28]
 800758e:	9104      	str	r1, [sp, #16]
 8007590:	4809      	ldr	r0, [pc, #36]	@ (80075b8 <siprintf+0x3c>)
 8007592:	490a      	ldr	r1, [pc, #40]	@ (80075bc <siprintf+0x40>)
 8007594:	cb04      	ldmia	r3!, {r2}
 8007596:	9105      	str	r1, [sp, #20]
 8007598:	6800      	ldr	r0, [r0, #0]
 800759a:	a902      	add	r1, sp, #8
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80075a0:	f000 fad2 	bl	8007b48 <_svfiprintf_r>
 80075a4:	9b02      	ldr	r3, [sp, #8]
 80075a6:	701c      	strb	r4, [r3, #0]
 80075a8:	b01d      	add	sp, #116	@ 0x74
 80075aa:	bc10      	pop	{r4}
 80075ac:	bc08      	pop	{r3}
 80075ae:	b003      	add	sp, #12
 80075b0:	4718      	bx	r3
 80075b2:	46c0      	nop			@ (mov r8, r8)
 80075b4:	7fffffff 	.word	0x7fffffff
 80075b8:	200001a4 	.word	0x200001a4
 80075bc:	ffff0208 	.word	0xffff0208

080075c0 <__sread>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	000c      	movs	r4, r1
 80075c4:	250e      	movs	r5, #14
 80075c6:	5f49      	ldrsh	r1, [r1, r5]
 80075c8:	f000 f8d4 	bl	8007774 <_read_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	db03      	blt.n	80075d8 <__sread+0x18>
 80075d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80075d2:	181b      	adds	r3, r3, r0
 80075d4:	6563      	str	r3, [r4, #84]	@ 0x54
 80075d6:	bd70      	pop	{r4, r5, r6, pc}
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	4a02      	ldr	r2, [pc, #8]	@ (80075e4 <__sread+0x24>)
 80075dc:	4013      	ands	r3, r2
 80075de:	81a3      	strh	r3, [r4, #12]
 80075e0:	e7f9      	b.n	80075d6 <__sread+0x16>
 80075e2:	46c0      	nop			@ (mov r8, r8)
 80075e4:	ffffefff 	.word	0xffffefff

080075e8 <__swrite>:
 80075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ea:	001f      	movs	r7, r3
 80075ec:	898b      	ldrh	r3, [r1, #12]
 80075ee:	0005      	movs	r5, r0
 80075f0:	000c      	movs	r4, r1
 80075f2:	0016      	movs	r6, r2
 80075f4:	05db      	lsls	r3, r3, #23
 80075f6:	d505      	bpl.n	8007604 <__swrite+0x1c>
 80075f8:	230e      	movs	r3, #14
 80075fa:	5ec9      	ldrsh	r1, [r1, r3]
 80075fc:	2200      	movs	r2, #0
 80075fe:	2302      	movs	r3, #2
 8007600:	f000 f8a4 	bl	800774c <_lseek_r>
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	4a05      	ldr	r2, [pc, #20]	@ (800761c <__swrite+0x34>)
 8007608:	0028      	movs	r0, r5
 800760a:	4013      	ands	r3, r2
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	0032      	movs	r2, r6
 8007610:	230e      	movs	r3, #14
 8007612:	5ee1      	ldrsh	r1, [r4, r3]
 8007614:	003b      	movs	r3, r7
 8007616:	f000 f8c1 	bl	800779c <_write_r>
 800761a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800761c:	ffffefff 	.word	0xffffefff

08007620 <__sseek>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	000c      	movs	r4, r1
 8007624:	250e      	movs	r5, #14
 8007626:	5f49      	ldrsh	r1, [r1, r5]
 8007628:	f000 f890 	bl	800774c <_lseek_r>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	1c42      	adds	r2, r0, #1
 8007630:	d103      	bne.n	800763a <__sseek+0x1a>
 8007632:	4a05      	ldr	r2, [pc, #20]	@ (8007648 <__sseek+0x28>)
 8007634:	4013      	ands	r3, r2
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	bd70      	pop	{r4, r5, r6, pc}
 800763a:	2280      	movs	r2, #128	@ 0x80
 800763c:	0152      	lsls	r2, r2, #5
 800763e:	4313      	orrs	r3, r2
 8007640:	81a3      	strh	r3, [r4, #12]
 8007642:	6560      	str	r0, [r4, #84]	@ 0x54
 8007644:	e7f8      	b.n	8007638 <__sseek+0x18>
 8007646:	46c0      	nop			@ (mov r8, r8)
 8007648:	ffffefff 	.word	0xffffefff

0800764c <__sclose>:
 800764c:	b510      	push	{r4, lr}
 800764e:	230e      	movs	r3, #14
 8007650:	5ec9      	ldrsh	r1, [r1, r3]
 8007652:	f000 f869 	bl	8007728 <_close_r>
 8007656:	bd10      	pop	{r4, pc}

08007658 <memset>:
 8007658:	0003      	movs	r3, r0
 800765a:	1882      	adds	r2, r0, r2
 800765c:	4293      	cmp	r3, r2
 800765e:	d100      	bne.n	8007662 <memset+0xa>
 8007660:	4770      	bx	lr
 8007662:	7019      	strb	r1, [r3, #0]
 8007664:	3301      	adds	r3, #1
 8007666:	e7f9      	b.n	800765c <memset+0x4>

08007668 <strtok>:
 8007668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766a:	4b16      	ldr	r3, [pc, #88]	@ (80076c4 <strtok+0x5c>)
 800766c:	0005      	movs	r5, r0
 800766e:	681f      	ldr	r7, [r3, #0]
 8007670:	000e      	movs	r6, r1
 8007672:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007674:	2c00      	cmp	r4, #0
 8007676:	d11d      	bne.n	80076b4 <strtok+0x4c>
 8007678:	2050      	movs	r0, #80	@ 0x50
 800767a:	f000 f949 	bl	8007910 <malloc>
 800767e:	1e02      	subs	r2, r0, #0
 8007680:	6478      	str	r0, [r7, #68]	@ 0x44
 8007682:	d104      	bne.n	800768e <strtok+0x26>
 8007684:	215b      	movs	r1, #91	@ 0x5b
 8007686:	4b10      	ldr	r3, [pc, #64]	@ (80076c8 <strtok+0x60>)
 8007688:	4810      	ldr	r0, [pc, #64]	@ (80076cc <strtok+0x64>)
 800768a:	f000 f8d9 	bl	8007840 <__assert_func>
 800768e:	6004      	str	r4, [r0, #0]
 8007690:	6044      	str	r4, [r0, #4]
 8007692:	6084      	str	r4, [r0, #8]
 8007694:	60c4      	str	r4, [r0, #12]
 8007696:	6104      	str	r4, [r0, #16]
 8007698:	6144      	str	r4, [r0, #20]
 800769a:	6184      	str	r4, [r0, #24]
 800769c:	6284      	str	r4, [r0, #40]	@ 0x28
 800769e:	62c4      	str	r4, [r0, #44]	@ 0x2c
 80076a0:	6304      	str	r4, [r0, #48]	@ 0x30
 80076a2:	6344      	str	r4, [r0, #52]	@ 0x34
 80076a4:	6384      	str	r4, [r0, #56]	@ 0x38
 80076a6:	63c4      	str	r4, [r0, #60]	@ 0x3c
 80076a8:	6404      	str	r4, [r0, #64]	@ 0x40
 80076aa:	6444      	str	r4, [r0, #68]	@ 0x44
 80076ac:	6484      	str	r4, [r0, #72]	@ 0x48
 80076ae:	64c4      	str	r4, [r0, #76]	@ 0x4c
 80076b0:	7704      	strb	r4, [r0, #28]
 80076b2:	6244      	str	r4, [r0, #36]	@ 0x24
 80076b4:	0031      	movs	r1, r6
 80076b6:	0028      	movs	r0, r5
 80076b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076ba:	2301      	movs	r3, #1
 80076bc:	f000 f808 	bl	80076d0 <__strtok_r>
 80076c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c2:	46c0      	nop			@ (mov r8, r8)
 80076c4:	200001a4 	.word	0x200001a4
 80076c8:	08008a12 	.word	0x08008a12
 80076cc:	08008a29 	.word	0x08008a29

080076d0 <__strtok_r>:
 80076d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076d2:	1e04      	subs	r4, r0, #0
 80076d4:	d102      	bne.n	80076dc <__strtok_r+0xc>
 80076d6:	6814      	ldr	r4, [r2, #0]
 80076d8:	2c00      	cmp	r4, #0
 80076da:	d009      	beq.n	80076f0 <__strtok_r+0x20>
 80076dc:	0020      	movs	r0, r4
 80076de:	000e      	movs	r6, r1
 80076e0:	7805      	ldrb	r5, [r0, #0]
 80076e2:	3401      	adds	r4, #1
 80076e4:	7837      	ldrb	r7, [r6, #0]
 80076e6:	2f00      	cmp	r7, #0
 80076e8:	d104      	bne.n	80076f4 <__strtok_r+0x24>
 80076ea:	2d00      	cmp	r5, #0
 80076ec:	d10d      	bne.n	800770a <__strtok_r+0x3a>
 80076ee:	6015      	str	r5, [r2, #0]
 80076f0:	2000      	movs	r0, #0
 80076f2:	e006      	b.n	8007702 <__strtok_r+0x32>
 80076f4:	3601      	adds	r6, #1
 80076f6:	42bd      	cmp	r5, r7
 80076f8:	d1f4      	bne.n	80076e4 <__strtok_r+0x14>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1ee      	bne.n	80076dc <__strtok_r+0xc>
 80076fe:	6014      	str	r4, [r2, #0]
 8007700:	7003      	strb	r3, [r0, #0]
 8007702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007704:	3301      	adds	r3, #1
 8007706:	2d00      	cmp	r5, #0
 8007708:	d103      	bne.n	8007712 <__strtok_r+0x42>
 800770a:	0026      	movs	r6, r4
 800770c:	000b      	movs	r3, r1
 800770e:	7837      	ldrb	r7, [r6, #0]
 8007710:	3401      	adds	r4, #1
 8007712:	781d      	ldrb	r5, [r3, #0]
 8007714:	42af      	cmp	r7, r5
 8007716:	d1f5      	bne.n	8007704 <__strtok_r+0x34>
 8007718:	2300      	movs	r3, #0
 800771a:	0019      	movs	r1, r3
 800771c:	429f      	cmp	r7, r3
 800771e:	d001      	beq.n	8007724 <__strtok_r+0x54>
 8007720:	0023      	movs	r3, r4
 8007722:	7031      	strb	r1, [r6, #0]
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	e7ec      	b.n	8007702 <__strtok_r+0x32>

08007728 <_close_r>:
 8007728:	2300      	movs	r3, #0
 800772a:	b570      	push	{r4, r5, r6, lr}
 800772c:	4d06      	ldr	r5, [pc, #24]	@ (8007748 <_close_r+0x20>)
 800772e:	0004      	movs	r4, r0
 8007730:	0008      	movs	r0, r1
 8007732:	602b      	str	r3, [r5, #0]
 8007734:	f7fb fba6 	bl	8002e84 <_close>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d103      	bne.n	8007744 <_close_r+0x1c>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d000      	beq.n	8007744 <_close_r+0x1c>
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	bd70      	pop	{r4, r5, r6, pc}
 8007746:	46c0      	nop			@ (mov r8, r8)
 8007748:	200037c0 	.word	0x200037c0

0800774c <_lseek_r>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	0004      	movs	r4, r0
 8007750:	0008      	movs	r0, r1
 8007752:	0011      	movs	r1, r2
 8007754:	001a      	movs	r2, r3
 8007756:	2300      	movs	r3, #0
 8007758:	4d05      	ldr	r5, [pc, #20]	@ (8007770 <_lseek_r+0x24>)
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	f7fb fb9c 	bl	8002e98 <_lseek>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d103      	bne.n	800776c <_lseek_r+0x20>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d000      	beq.n	800776c <_lseek_r+0x20>
 800776a:	6023      	str	r3, [r4, #0]
 800776c:	bd70      	pop	{r4, r5, r6, pc}
 800776e:	46c0      	nop			@ (mov r8, r8)
 8007770:	200037c0 	.word	0x200037c0

08007774 <_read_r>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	0004      	movs	r4, r0
 8007778:	0008      	movs	r0, r1
 800777a:	0011      	movs	r1, r2
 800777c:	001a      	movs	r2, r3
 800777e:	2300      	movs	r3, #0
 8007780:	4d05      	ldr	r5, [pc, #20]	@ (8007798 <_read_r+0x24>)
 8007782:	602b      	str	r3, [r5, #0]
 8007784:	f7fb fb64 	bl	8002e50 <_read>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d103      	bne.n	8007794 <_read_r+0x20>
 800778c:	682b      	ldr	r3, [r5, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d000      	beq.n	8007794 <_read_r+0x20>
 8007792:	6023      	str	r3, [r4, #0]
 8007794:	bd70      	pop	{r4, r5, r6, pc}
 8007796:	46c0      	nop			@ (mov r8, r8)
 8007798:	200037c0 	.word	0x200037c0

0800779c <_write_r>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	0004      	movs	r4, r0
 80077a0:	0008      	movs	r0, r1
 80077a2:	0011      	movs	r1, r2
 80077a4:	001a      	movs	r2, r3
 80077a6:	2300      	movs	r3, #0
 80077a8:	4d05      	ldr	r5, [pc, #20]	@ (80077c0 <_write_r+0x24>)
 80077aa:	602b      	str	r3, [r5, #0]
 80077ac:	f7fb fb5d 	bl	8002e6a <_write>
 80077b0:	1c43      	adds	r3, r0, #1
 80077b2:	d103      	bne.n	80077bc <_write_r+0x20>
 80077b4:	682b      	ldr	r3, [r5, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d000      	beq.n	80077bc <_write_r+0x20>
 80077ba:	6023      	str	r3, [r4, #0]
 80077bc:	bd70      	pop	{r4, r5, r6, pc}
 80077be:	46c0      	nop			@ (mov r8, r8)
 80077c0:	200037c0 	.word	0x200037c0

080077c4 <__errno>:
 80077c4:	4b01      	ldr	r3, [pc, #4]	@ (80077cc <__errno+0x8>)
 80077c6:	6818      	ldr	r0, [r3, #0]
 80077c8:	4770      	bx	lr
 80077ca:	46c0      	nop			@ (mov r8, r8)
 80077cc:	200001a4 	.word	0x200001a4

080077d0 <__libc_init_array>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	2600      	movs	r6, #0
 80077d4:	4c0c      	ldr	r4, [pc, #48]	@ (8007808 <__libc_init_array+0x38>)
 80077d6:	4d0d      	ldr	r5, [pc, #52]	@ (800780c <__libc_init_array+0x3c>)
 80077d8:	1b64      	subs	r4, r4, r5
 80077da:	10a4      	asrs	r4, r4, #2
 80077dc:	42a6      	cmp	r6, r4
 80077de:	d109      	bne.n	80077f4 <__libc_init_array+0x24>
 80077e0:	2600      	movs	r6, #0
 80077e2:	f001 f819 	bl	8008818 <_init>
 80077e6:	4c0a      	ldr	r4, [pc, #40]	@ (8007810 <__libc_init_array+0x40>)
 80077e8:	4d0a      	ldr	r5, [pc, #40]	@ (8007814 <__libc_init_array+0x44>)
 80077ea:	1b64      	subs	r4, r4, r5
 80077ec:	10a4      	asrs	r4, r4, #2
 80077ee:	42a6      	cmp	r6, r4
 80077f0:	d105      	bne.n	80077fe <__libc_init_array+0x2e>
 80077f2:	bd70      	pop	{r4, r5, r6, pc}
 80077f4:	00b3      	lsls	r3, r6, #2
 80077f6:	58eb      	ldr	r3, [r5, r3]
 80077f8:	4798      	blx	r3
 80077fa:	3601      	adds	r6, #1
 80077fc:	e7ee      	b.n	80077dc <__libc_init_array+0xc>
 80077fe:	00b3      	lsls	r3, r6, #2
 8007800:	58eb      	ldr	r3, [r5, r3]
 8007802:	4798      	blx	r3
 8007804:	3601      	adds	r6, #1
 8007806:	e7f2      	b.n	80077ee <__libc_init_array+0x1e>
 8007808:	08008c28 	.word	0x08008c28
 800780c:	08008c28 	.word	0x08008c28
 8007810:	08008c2c 	.word	0x08008c2c
 8007814:	08008c28 	.word	0x08008c28

08007818 <__retarget_lock_init_recursive>:
 8007818:	4770      	bx	lr

0800781a <__retarget_lock_acquire_recursive>:
 800781a:	4770      	bx	lr

0800781c <__retarget_lock_release_recursive>:
 800781c:	4770      	bx	lr

0800781e <strcpy>:
 800781e:	0003      	movs	r3, r0
 8007820:	780a      	ldrb	r2, [r1, #0]
 8007822:	3101      	adds	r1, #1
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	3301      	adds	r3, #1
 8007828:	2a00      	cmp	r2, #0
 800782a:	d1f9      	bne.n	8007820 <strcpy+0x2>
 800782c:	4770      	bx	lr

0800782e <memcpy>:
 800782e:	2300      	movs	r3, #0
 8007830:	b510      	push	{r4, lr}
 8007832:	429a      	cmp	r2, r3
 8007834:	d100      	bne.n	8007838 <memcpy+0xa>
 8007836:	bd10      	pop	{r4, pc}
 8007838:	5ccc      	ldrb	r4, [r1, r3]
 800783a:	54c4      	strb	r4, [r0, r3]
 800783c:	3301      	adds	r3, #1
 800783e:	e7f8      	b.n	8007832 <memcpy+0x4>

08007840 <__assert_func>:
 8007840:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007842:	0014      	movs	r4, r2
 8007844:	001a      	movs	r2, r3
 8007846:	4b09      	ldr	r3, [pc, #36]	@ (800786c <__assert_func+0x2c>)
 8007848:	0005      	movs	r5, r0
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	000e      	movs	r6, r1
 800784e:	68d8      	ldr	r0, [r3, #12]
 8007850:	4b07      	ldr	r3, [pc, #28]	@ (8007870 <__assert_func+0x30>)
 8007852:	2c00      	cmp	r4, #0
 8007854:	d101      	bne.n	800785a <__assert_func+0x1a>
 8007856:	4b07      	ldr	r3, [pc, #28]	@ (8007874 <__assert_func+0x34>)
 8007858:	001c      	movs	r4, r3
 800785a:	4907      	ldr	r1, [pc, #28]	@ (8007878 <__assert_func+0x38>)
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	9402      	str	r4, [sp, #8]
 8007860:	002b      	movs	r3, r5
 8007862:	9600      	str	r6, [sp, #0]
 8007864:	f000 fc9c 	bl	80081a0 <fiprintf>
 8007868:	f000 fcd9 	bl	800821e <abort>
 800786c:	200001a4 	.word	0x200001a4
 8007870:	08008a83 	.word	0x08008a83
 8007874:	0800892e 	.word	0x0800892e
 8007878:	08008a90 	.word	0x08008a90

0800787c <_free_r>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	0005      	movs	r5, r0
 8007880:	1e0c      	subs	r4, r1, #0
 8007882:	d010      	beq.n	80078a6 <_free_r+0x2a>
 8007884:	3c04      	subs	r4, #4
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	da00      	bge.n	800788e <_free_r+0x12>
 800788c:	18e4      	adds	r4, r4, r3
 800788e:	0028      	movs	r0, r5
 8007890:	f000 f8ea 	bl	8007a68 <__malloc_lock>
 8007894:	4a1d      	ldr	r2, [pc, #116]	@ (800790c <_free_r+0x90>)
 8007896:	6813      	ldr	r3, [r2, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d105      	bne.n	80078a8 <_free_r+0x2c>
 800789c:	6063      	str	r3, [r4, #4]
 800789e:	6014      	str	r4, [r2, #0]
 80078a0:	0028      	movs	r0, r5
 80078a2:	f000 f8e9 	bl	8007a78 <__malloc_unlock>
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	42a3      	cmp	r3, r4
 80078aa:	d908      	bls.n	80078be <_free_r+0x42>
 80078ac:	6820      	ldr	r0, [r4, #0]
 80078ae:	1821      	adds	r1, r4, r0
 80078b0:	428b      	cmp	r3, r1
 80078b2:	d1f3      	bne.n	800789c <_free_r+0x20>
 80078b4:	6819      	ldr	r1, [r3, #0]
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	1809      	adds	r1, r1, r0
 80078ba:	6021      	str	r1, [r4, #0]
 80078bc:	e7ee      	b.n	800789c <_free_r+0x20>
 80078be:	001a      	movs	r2, r3
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <_free_r+0x4e>
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	d9f9      	bls.n	80078be <_free_r+0x42>
 80078ca:	6811      	ldr	r1, [r2, #0]
 80078cc:	1850      	adds	r0, r2, r1
 80078ce:	42a0      	cmp	r0, r4
 80078d0:	d10b      	bne.n	80078ea <_free_r+0x6e>
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	1809      	adds	r1, r1, r0
 80078d6:	1850      	adds	r0, r2, r1
 80078d8:	6011      	str	r1, [r2, #0]
 80078da:	4283      	cmp	r3, r0
 80078dc:	d1e0      	bne.n	80078a0 <_free_r+0x24>
 80078de:	6818      	ldr	r0, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	1841      	adds	r1, r0, r1
 80078e4:	6011      	str	r1, [r2, #0]
 80078e6:	6053      	str	r3, [r2, #4]
 80078e8:	e7da      	b.n	80078a0 <_free_r+0x24>
 80078ea:	42a0      	cmp	r0, r4
 80078ec:	d902      	bls.n	80078f4 <_free_r+0x78>
 80078ee:	230c      	movs	r3, #12
 80078f0:	602b      	str	r3, [r5, #0]
 80078f2:	e7d5      	b.n	80078a0 <_free_r+0x24>
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	1821      	adds	r1, r4, r0
 80078f8:	428b      	cmp	r3, r1
 80078fa:	d103      	bne.n	8007904 <_free_r+0x88>
 80078fc:	6819      	ldr	r1, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	1809      	adds	r1, r1, r0
 8007902:	6021      	str	r1, [r4, #0]
 8007904:	6063      	str	r3, [r4, #4]
 8007906:	6054      	str	r4, [r2, #4]
 8007908:	e7ca      	b.n	80078a0 <_free_r+0x24>
 800790a:	46c0      	nop			@ (mov r8, r8)
 800790c:	200037cc 	.word	0x200037cc

08007910 <malloc>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4b03      	ldr	r3, [pc, #12]	@ (8007920 <malloc+0x10>)
 8007914:	0001      	movs	r1, r0
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	f000 f826 	bl	8007968 <_malloc_r>
 800791c:	bd10      	pop	{r4, pc}
 800791e:	46c0      	nop			@ (mov r8, r8)
 8007920:	200001a4 	.word	0x200001a4

08007924 <sbrk_aligned>:
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	4e0f      	ldr	r6, [pc, #60]	@ (8007964 <sbrk_aligned+0x40>)
 8007928:	000d      	movs	r5, r1
 800792a:	6831      	ldr	r1, [r6, #0]
 800792c:	0004      	movs	r4, r0
 800792e:	2900      	cmp	r1, #0
 8007930:	d102      	bne.n	8007938 <sbrk_aligned+0x14>
 8007932:	f000 fc57 	bl	80081e4 <_sbrk_r>
 8007936:	6030      	str	r0, [r6, #0]
 8007938:	0029      	movs	r1, r5
 800793a:	0020      	movs	r0, r4
 800793c:	f000 fc52 	bl	80081e4 <_sbrk_r>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d103      	bne.n	800794c <sbrk_aligned+0x28>
 8007944:	2501      	movs	r5, #1
 8007946:	426d      	negs	r5, r5
 8007948:	0028      	movs	r0, r5
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	2303      	movs	r3, #3
 800794e:	1cc5      	adds	r5, r0, #3
 8007950:	439d      	bics	r5, r3
 8007952:	42a8      	cmp	r0, r5
 8007954:	d0f8      	beq.n	8007948 <sbrk_aligned+0x24>
 8007956:	1a29      	subs	r1, r5, r0
 8007958:	0020      	movs	r0, r4
 800795a:	f000 fc43 	bl	80081e4 <_sbrk_r>
 800795e:	3001      	adds	r0, #1
 8007960:	d1f2      	bne.n	8007948 <sbrk_aligned+0x24>
 8007962:	e7ef      	b.n	8007944 <sbrk_aligned+0x20>
 8007964:	200037c8 	.word	0x200037c8

08007968 <_malloc_r>:
 8007968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800796a:	2203      	movs	r2, #3
 800796c:	1ccb      	adds	r3, r1, #3
 800796e:	4393      	bics	r3, r2
 8007970:	3308      	adds	r3, #8
 8007972:	0005      	movs	r5, r0
 8007974:	001f      	movs	r7, r3
 8007976:	2b0c      	cmp	r3, #12
 8007978:	d234      	bcs.n	80079e4 <_malloc_r+0x7c>
 800797a:	270c      	movs	r7, #12
 800797c:	42b9      	cmp	r1, r7
 800797e:	d833      	bhi.n	80079e8 <_malloc_r+0x80>
 8007980:	0028      	movs	r0, r5
 8007982:	f000 f871 	bl	8007a68 <__malloc_lock>
 8007986:	4e37      	ldr	r6, [pc, #220]	@ (8007a64 <_malloc_r+0xfc>)
 8007988:	6833      	ldr	r3, [r6, #0]
 800798a:	001c      	movs	r4, r3
 800798c:	2c00      	cmp	r4, #0
 800798e:	d12f      	bne.n	80079f0 <_malloc_r+0x88>
 8007990:	0039      	movs	r1, r7
 8007992:	0028      	movs	r0, r5
 8007994:	f7ff ffc6 	bl	8007924 <sbrk_aligned>
 8007998:	0004      	movs	r4, r0
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	d15f      	bne.n	8007a5e <_malloc_r+0xf6>
 800799e:	6834      	ldr	r4, [r6, #0]
 80079a0:	9400      	str	r4, [sp, #0]
 80079a2:	9b00      	ldr	r3, [sp, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d14a      	bne.n	8007a3e <_malloc_r+0xd6>
 80079a8:	2c00      	cmp	r4, #0
 80079aa:	d052      	beq.n	8007a52 <_malloc_r+0xea>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	0028      	movs	r0, r5
 80079b0:	18e3      	adds	r3, r4, r3
 80079b2:	9900      	ldr	r1, [sp, #0]
 80079b4:	9301      	str	r3, [sp, #4]
 80079b6:	f000 fc15 	bl	80081e4 <_sbrk_r>
 80079ba:	9b01      	ldr	r3, [sp, #4]
 80079bc:	4283      	cmp	r3, r0
 80079be:	d148      	bne.n	8007a52 <_malloc_r+0xea>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	0028      	movs	r0, r5
 80079c4:	1aff      	subs	r7, r7, r3
 80079c6:	0039      	movs	r1, r7
 80079c8:	f7ff ffac 	bl	8007924 <sbrk_aligned>
 80079cc:	3001      	adds	r0, #1
 80079ce:	d040      	beq.n	8007a52 <_malloc_r+0xea>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	19db      	adds	r3, r3, r7
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	6833      	ldr	r3, [r6, #0]
 80079d8:	685a      	ldr	r2, [r3, #4]
 80079da:	2a00      	cmp	r2, #0
 80079dc:	d133      	bne.n	8007a46 <_malloc_r+0xde>
 80079de:	9b00      	ldr	r3, [sp, #0]
 80079e0:	6033      	str	r3, [r6, #0]
 80079e2:	e019      	b.n	8007a18 <_malloc_r+0xb0>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dac9      	bge.n	800797c <_malloc_r+0x14>
 80079e8:	230c      	movs	r3, #12
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	2000      	movs	r0, #0
 80079ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079f0:	6821      	ldr	r1, [r4, #0]
 80079f2:	1bc9      	subs	r1, r1, r7
 80079f4:	d420      	bmi.n	8007a38 <_malloc_r+0xd0>
 80079f6:	290b      	cmp	r1, #11
 80079f8:	d90a      	bls.n	8007a10 <_malloc_r+0xa8>
 80079fa:	19e2      	adds	r2, r4, r7
 80079fc:	6027      	str	r7, [r4, #0]
 80079fe:	42a3      	cmp	r3, r4
 8007a00:	d104      	bne.n	8007a0c <_malloc_r+0xa4>
 8007a02:	6032      	str	r2, [r6, #0]
 8007a04:	6863      	ldr	r3, [r4, #4]
 8007a06:	6011      	str	r1, [r2, #0]
 8007a08:	6053      	str	r3, [r2, #4]
 8007a0a:	e005      	b.n	8007a18 <_malloc_r+0xb0>
 8007a0c:	605a      	str	r2, [r3, #4]
 8007a0e:	e7f9      	b.n	8007a04 <_malloc_r+0x9c>
 8007a10:	6862      	ldr	r2, [r4, #4]
 8007a12:	42a3      	cmp	r3, r4
 8007a14:	d10e      	bne.n	8007a34 <_malloc_r+0xcc>
 8007a16:	6032      	str	r2, [r6, #0]
 8007a18:	0028      	movs	r0, r5
 8007a1a:	f000 f82d 	bl	8007a78 <__malloc_unlock>
 8007a1e:	0020      	movs	r0, r4
 8007a20:	2207      	movs	r2, #7
 8007a22:	300b      	adds	r0, #11
 8007a24:	1d23      	adds	r3, r4, #4
 8007a26:	4390      	bics	r0, r2
 8007a28:	1ac2      	subs	r2, r0, r3
 8007a2a:	4298      	cmp	r0, r3
 8007a2c:	d0df      	beq.n	80079ee <_malloc_r+0x86>
 8007a2e:	1a1b      	subs	r3, r3, r0
 8007a30:	50a3      	str	r3, [r4, r2]
 8007a32:	e7dc      	b.n	80079ee <_malloc_r+0x86>
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	e7ef      	b.n	8007a18 <_malloc_r+0xb0>
 8007a38:	0023      	movs	r3, r4
 8007a3a:	6864      	ldr	r4, [r4, #4]
 8007a3c:	e7a6      	b.n	800798c <_malloc_r+0x24>
 8007a3e:	9c00      	ldr	r4, [sp, #0]
 8007a40:	6863      	ldr	r3, [r4, #4]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	e7ad      	b.n	80079a2 <_malloc_r+0x3a>
 8007a46:	001a      	movs	r2, r3
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	42a3      	cmp	r3, r4
 8007a4c:	d1fb      	bne.n	8007a46 <_malloc_r+0xde>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e7da      	b.n	8007a08 <_malloc_r+0xa0>
 8007a52:	230c      	movs	r3, #12
 8007a54:	0028      	movs	r0, r5
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	f000 f80e 	bl	8007a78 <__malloc_unlock>
 8007a5c:	e7c6      	b.n	80079ec <_malloc_r+0x84>
 8007a5e:	6007      	str	r7, [r0, #0]
 8007a60:	e7da      	b.n	8007a18 <_malloc_r+0xb0>
 8007a62:	46c0      	nop			@ (mov r8, r8)
 8007a64:	200037cc 	.word	0x200037cc

08007a68 <__malloc_lock>:
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	4802      	ldr	r0, [pc, #8]	@ (8007a74 <__malloc_lock+0xc>)
 8007a6c:	f7ff fed5 	bl	800781a <__retarget_lock_acquire_recursive>
 8007a70:	bd10      	pop	{r4, pc}
 8007a72:	46c0      	nop			@ (mov r8, r8)
 8007a74:	200037c4 	.word	0x200037c4

08007a78 <__malloc_unlock>:
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	4802      	ldr	r0, [pc, #8]	@ (8007a84 <__malloc_unlock+0xc>)
 8007a7c:	f7ff fece 	bl	800781c <__retarget_lock_release_recursive>
 8007a80:	bd10      	pop	{r4, pc}
 8007a82:	46c0      	nop			@ (mov r8, r8)
 8007a84:	200037c4 	.word	0x200037c4

08007a88 <__ssputs_r>:
 8007a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a8a:	688e      	ldr	r6, [r1, #8]
 8007a8c:	b085      	sub	sp, #20
 8007a8e:	001f      	movs	r7, r3
 8007a90:	000c      	movs	r4, r1
 8007a92:	680b      	ldr	r3, [r1, #0]
 8007a94:	9002      	str	r0, [sp, #8]
 8007a96:	9203      	str	r2, [sp, #12]
 8007a98:	42be      	cmp	r6, r7
 8007a9a:	d830      	bhi.n	8007afe <__ssputs_r+0x76>
 8007a9c:	210c      	movs	r1, #12
 8007a9e:	5e62      	ldrsh	r2, [r4, r1]
 8007aa0:	2190      	movs	r1, #144	@ 0x90
 8007aa2:	00c9      	lsls	r1, r1, #3
 8007aa4:	420a      	tst	r2, r1
 8007aa6:	d028      	beq.n	8007afa <__ssputs_r+0x72>
 8007aa8:	2003      	movs	r0, #3
 8007aaa:	6921      	ldr	r1, [r4, #16]
 8007aac:	1a5b      	subs	r3, r3, r1
 8007aae:	9301      	str	r3, [sp, #4]
 8007ab0:	6963      	ldr	r3, [r4, #20]
 8007ab2:	4343      	muls	r3, r0
 8007ab4:	9801      	ldr	r0, [sp, #4]
 8007ab6:	0fdd      	lsrs	r5, r3, #31
 8007ab8:	18ed      	adds	r5, r5, r3
 8007aba:	1c7b      	adds	r3, r7, #1
 8007abc:	181b      	adds	r3, r3, r0
 8007abe:	106d      	asrs	r5, r5, #1
 8007ac0:	42ab      	cmp	r3, r5
 8007ac2:	d900      	bls.n	8007ac6 <__ssputs_r+0x3e>
 8007ac4:	001d      	movs	r5, r3
 8007ac6:	0552      	lsls	r2, r2, #21
 8007ac8:	d528      	bpl.n	8007b1c <__ssputs_r+0x94>
 8007aca:	0029      	movs	r1, r5
 8007acc:	9802      	ldr	r0, [sp, #8]
 8007ace:	f7ff ff4b 	bl	8007968 <_malloc_r>
 8007ad2:	1e06      	subs	r6, r0, #0
 8007ad4:	d02c      	beq.n	8007b30 <__ssputs_r+0xa8>
 8007ad6:	9a01      	ldr	r2, [sp, #4]
 8007ad8:	6921      	ldr	r1, [r4, #16]
 8007ada:	f7ff fea8 	bl	800782e <memcpy>
 8007ade:	89a2      	ldrh	r2, [r4, #12]
 8007ae0:	4b18      	ldr	r3, [pc, #96]	@ (8007b44 <__ssputs_r+0xbc>)
 8007ae2:	401a      	ands	r2, r3
 8007ae4:	2380      	movs	r3, #128	@ 0x80
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	81a3      	strh	r3, [r4, #12]
 8007aea:	9b01      	ldr	r3, [sp, #4]
 8007aec:	6126      	str	r6, [r4, #16]
 8007aee:	18f6      	adds	r6, r6, r3
 8007af0:	6026      	str	r6, [r4, #0]
 8007af2:	003e      	movs	r6, r7
 8007af4:	6165      	str	r5, [r4, #20]
 8007af6:	1aed      	subs	r5, r5, r3
 8007af8:	60a5      	str	r5, [r4, #8]
 8007afa:	42be      	cmp	r6, r7
 8007afc:	d900      	bls.n	8007b00 <__ssputs_r+0x78>
 8007afe:	003e      	movs	r6, r7
 8007b00:	0032      	movs	r2, r6
 8007b02:	9903      	ldr	r1, [sp, #12]
 8007b04:	6820      	ldr	r0, [r4, #0]
 8007b06:	f000 fb5b 	bl	80081c0 <memmove>
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	68a3      	ldr	r3, [r4, #8]
 8007b0e:	1b9b      	subs	r3, r3, r6
 8007b10:	60a3      	str	r3, [r4, #8]
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	199b      	adds	r3, r3, r6
 8007b16:	6023      	str	r3, [r4, #0]
 8007b18:	b005      	add	sp, #20
 8007b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b1c:	002a      	movs	r2, r5
 8007b1e:	9802      	ldr	r0, [sp, #8]
 8007b20:	f000 fb84 	bl	800822c <_realloc_r>
 8007b24:	1e06      	subs	r6, r0, #0
 8007b26:	d1e0      	bne.n	8007aea <__ssputs_r+0x62>
 8007b28:	6921      	ldr	r1, [r4, #16]
 8007b2a:	9802      	ldr	r0, [sp, #8]
 8007b2c:	f7ff fea6 	bl	800787c <_free_r>
 8007b30:	230c      	movs	r3, #12
 8007b32:	2001      	movs	r0, #1
 8007b34:	9a02      	ldr	r2, [sp, #8]
 8007b36:	4240      	negs	r0, r0
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	89a2      	ldrh	r2, [r4, #12]
 8007b3c:	3334      	adds	r3, #52	@ 0x34
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	e7e9      	b.n	8007b18 <__ssputs_r+0x90>
 8007b44:	fffffb7f 	.word	0xfffffb7f

08007b48 <_svfiprintf_r>:
 8007b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b4a:	b0a1      	sub	sp, #132	@ 0x84
 8007b4c:	9003      	str	r0, [sp, #12]
 8007b4e:	001d      	movs	r5, r3
 8007b50:	898b      	ldrh	r3, [r1, #12]
 8007b52:	000f      	movs	r7, r1
 8007b54:	0016      	movs	r6, r2
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	d511      	bpl.n	8007b7e <_svfiprintf_r+0x36>
 8007b5a:	690b      	ldr	r3, [r1, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10e      	bne.n	8007b7e <_svfiprintf_r+0x36>
 8007b60:	2140      	movs	r1, #64	@ 0x40
 8007b62:	f7ff ff01 	bl	8007968 <_malloc_r>
 8007b66:	6038      	str	r0, [r7, #0]
 8007b68:	6138      	str	r0, [r7, #16]
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d105      	bne.n	8007b7a <_svfiprintf_r+0x32>
 8007b6e:	230c      	movs	r3, #12
 8007b70:	9a03      	ldr	r2, [sp, #12]
 8007b72:	6013      	str	r3, [r2, #0]
 8007b74:	2001      	movs	r0, #1
 8007b76:	4240      	negs	r0, r0
 8007b78:	e0cf      	b.n	8007d1a <_svfiprintf_r+0x1d2>
 8007b7a:	2340      	movs	r3, #64	@ 0x40
 8007b7c:	617b      	str	r3, [r7, #20]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	ac08      	add	r4, sp, #32
 8007b82:	6163      	str	r3, [r4, #20]
 8007b84:	3320      	adds	r3, #32
 8007b86:	7663      	strb	r3, [r4, #25]
 8007b88:	3310      	adds	r3, #16
 8007b8a:	76a3      	strb	r3, [r4, #26]
 8007b8c:	9507      	str	r5, [sp, #28]
 8007b8e:	0035      	movs	r5, r6
 8007b90:	782b      	ldrb	r3, [r5, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <_svfiprintf_r+0x52>
 8007b96:	2b25      	cmp	r3, #37	@ 0x25
 8007b98:	d148      	bne.n	8007c2c <_svfiprintf_r+0xe4>
 8007b9a:	1bab      	subs	r3, r5, r6
 8007b9c:	9305      	str	r3, [sp, #20]
 8007b9e:	42b5      	cmp	r5, r6
 8007ba0:	d00b      	beq.n	8007bba <_svfiprintf_r+0x72>
 8007ba2:	0032      	movs	r2, r6
 8007ba4:	0039      	movs	r1, r7
 8007ba6:	9803      	ldr	r0, [sp, #12]
 8007ba8:	f7ff ff6e 	bl	8007a88 <__ssputs_r>
 8007bac:	3001      	adds	r0, #1
 8007bae:	d100      	bne.n	8007bb2 <_svfiprintf_r+0x6a>
 8007bb0:	e0ae      	b.n	8007d10 <_svfiprintf_r+0x1c8>
 8007bb2:	6963      	ldr	r3, [r4, #20]
 8007bb4:	9a05      	ldr	r2, [sp, #20]
 8007bb6:	189b      	adds	r3, r3, r2
 8007bb8:	6163      	str	r3, [r4, #20]
 8007bba:	782b      	ldrb	r3, [r5, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d100      	bne.n	8007bc2 <_svfiprintf_r+0x7a>
 8007bc0:	e0a6      	b.n	8007d10 <_svfiprintf_r+0x1c8>
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4252      	negs	r2, r2
 8007bc8:	6062      	str	r2, [r4, #4]
 8007bca:	a904      	add	r1, sp, #16
 8007bcc:	3254      	adds	r2, #84	@ 0x54
 8007bce:	1852      	adds	r2, r2, r1
 8007bd0:	1c6e      	adds	r6, r5, #1
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	60e3      	str	r3, [r4, #12]
 8007bd6:	60a3      	str	r3, [r4, #8]
 8007bd8:	7013      	strb	r3, [r2, #0]
 8007bda:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007bdc:	4b54      	ldr	r3, [pc, #336]	@ (8007d30 <_svfiprintf_r+0x1e8>)
 8007bde:	2205      	movs	r2, #5
 8007be0:	0018      	movs	r0, r3
 8007be2:	7831      	ldrb	r1, [r6, #0]
 8007be4:	9305      	str	r3, [sp, #20]
 8007be6:	f000 fb0f 	bl	8008208 <memchr>
 8007bea:	1c75      	adds	r5, r6, #1
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d11f      	bne.n	8007c30 <_svfiprintf_r+0xe8>
 8007bf0:	6822      	ldr	r2, [r4, #0]
 8007bf2:	06d3      	lsls	r3, r2, #27
 8007bf4:	d504      	bpl.n	8007c00 <_svfiprintf_r+0xb8>
 8007bf6:	2353      	movs	r3, #83	@ 0x53
 8007bf8:	a904      	add	r1, sp, #16
 8007bfa:	185b      	adds	r3, r3, r1
 8007bfc:	2120      	movs	r1, #32
 8007bfe:	7019      	strb	r1, [r3, #0]
 8007c00:	0713      	lsls	r3, r2, #28
 8007c02:	d504      	bpl.n	8007c0e <_svfiprintf_r+0xc6>
 8007c04:	2353      	movs	r3, #83	@ 0x53
 8007c06:	a904      	add	r1, sp, #16
 8007c08:	185b      	adds	r3, r3, r1
 8007c0a:	212b      	movs	r1, #43	@ 0x2b
 8007c0c:	7019      	strb	r1, [r3, #0]
 8007c0e:	7833      	ldrb	r3, [r6, #0]
 8007c10:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c12:	d016      	beq.n	8007c42 <_svfiprintf_r+0xfa>
 8007c14:	0035      	movs	r5, r6
 8007c16:	2100      	movs	r1, #0
 8007c18:	200a      	movs	r0, #10
 8007c1a:	68e3      	ldr	r3, [r4, #12]
 8007c1c:	782a      	ldrb	r2, [r5, #0]
 8007c1e:	1c6e      	adds	r6, r5, #1
 8007c20:	3a30      	subs	r2, #48	@ 0x30
 8007c22:	2a09      	cmp	r2, #9
 8007c24:	d950      	bls.n	8007cc8 <_svfiprintf_r+0x180>
 8007c26:	2900      	cmp	r1, #0
 8007c28:	d111      	bne.n	8007c4e <_svfiprintf_r+0x106>
 8007c2a:	e017      	b.n	8007c5c <_svfiprintf_r+0x114>
 8007c2c:	3501      	adds	r5, #1
 8007c2e:	e7af      	b.n	8007b90 <_svfiprintf_r+0x48>
 8007c30:	9b05      	ldr	r3, [sp, #20]
 8007c32:	6822      	ldr	r2, [r4, #0]
 8007c34:	1ac0      	subs	r0, r0, r3
 8007c36:	2301      	movs	r3, #1
 8007c38:	4083      	lsls	r3, r0
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	002e      	movs	r6, r5
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	e7cc      	b.n	8007bdc <_svfiprintf_r+0x94>
 8007c42:	9b07      	ldr	r3, [sp, #28]
 8007c44:	1d19      	adds	r1, r3, #4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	9107      	str	r1, [sp, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	db01      	blt.n	8007c52 <_svfiprintf_r+0x10a>
 8007c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c50:	e004      	b.n	8007c5c <_svfiprintf_r+0x114>
 8007c52:	425b      	negs	r3, r3
 8007c54:	60e3      	str	r3, [r4, #12]
 8007c56:	2302      	movs	r3, #2
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	782b      	ldrb	r3, [r5, #0]
 8007c5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c60:	d10c      	bne.n	8007c7c <_svfiprintf_r+0x134>
 8007c62:	786b      	ldrb	r3, [r5, #1]
 8007c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c66:	d134      	bne.n	8007cd2 <_svfiprintf_r+0x18a>
 8007c68:	9b07      	ldr	r3, [sp, #28]
 8007c6a:	3502      	adds	r5, #2
 8007c6c:	1d1a      	adds	r2, r3, #4
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	9207      	str	r2, [sp, #28]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	da01      	bge.n	8007c7a <_svfiprintf_r+0x132>
 8007c76:	2301      	movs	r3, #1
 8007c78:	425b      	negs	r3, r3
 8007c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7c:	4e2d      	ldr	r6, [pc, #180]	@ (8007d34 <_svfiprintf_r+0x1ec>)
 8007c7e:	2203      	movs	r2, #3
 8007c80:	0030      	movs	r0, r6
 8007c82:	7829      	ldrb	r1, [r5, #0]
 8007c84:	f000 fac0 	bl	8008208 <memchr>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d006      	beq.n	8007c9a <_svfiprintf_r+0x152>
 8007c8c:	2340      	movs	r3, #64	@ 0x40
 8007c8e:	1b80      	subs	r0, r0, r6
 8007c90:	4083      	lsls	r3, r0
 8007c92:	6822      	ldr	r2, [r4, #0]
 8007c94:	3501      	adds	r5, #1
 8007c96:	4313      	orrs	r3, r2
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	7829      	ldrb	r1, [r5, #0]
 8007c9c:	2206      	movs	r2, #6
 8007c9e:	4826      	ldr	r0, [pc, #152]	@ (8007d38 <_svfiprintf_r+0x1f0>)
 8007ca0:	1c6e      	adds	r6, r5, #1
 8007ca2:	7621      	strb	r1, [r4, #24]
 8007ca4:	f000 fab0 	bl	8008208 <memchr>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d038      	beq.n	8007d1e <_svfiprintf_r+0x1d6>
 8007cac:	4b23      	ldr	r3, [pc, #140]	@ (8007d3c <_svfiprintf_r+0x1f4>)
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d122      	bne.n	8007cf8 <_svfiprintf_r+0x1b0>
 8007cb2:	2207      	movs	r2, #7
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	3307      	adds	r3, #7
 8007cb8:	4393      	bics	r3, r2
 8007cba:	3308      	adds	r3, #8
 8007cbc:	9307      	str	r3, [sp, #28]
 8007cbe:	6963      	ldr	r3, [r4, #20]
 8007cc0:	9a04      	ldr	r2, [sp, #16]
 8007cc2:	189b      	adds	r3, r3, r2
 8007cc4:	6163      	str	r3, [r4, #20]
 8007cc6:	e762      	b.n	8007b8e <_svfiprintf_r+0x46>
 8007cc8:	4343      	muls	r3, r0
 8007cca:	0035      	movs	r5, r6
 8007ccc:	2101      	movs	r1, #1
 8007cce:	189b      	adds	r3, r3, r2
 8007cd0:	e7a4      	b.n	8007c1c <_svfiprintf_r+0xd4>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	200a      	movs	r0, #10
 8007cd6:	0019      	movs	r1, r3
 8007cd8:	3501      	adds	r5, #1
 8007cda:	6063      	str	r3, [r4, #4]
 8007cdc:	782a      	ldrb	r2, [r5, #0]
 8007cde:	1c6e      	adds	r6, r5, #1
 8007ce0:	3a30      	subs	r2, #48	@ 0x30
 8007ce2:	2a09      	cmp	r2, #9
 8007ce4:	d903      	bls.n	8007cee <_svfiprintf_r+0x1a6>
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0c8      	beq.n	8007c7c <_svfiprintf_r+0x134>
 8007cea:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cec:	e7c6      	b.n	8007c7c <_svfiprintf_r+0x134>
 8007cee:	4341      	muls	r1, r0
 8007cf0:	0035      	movs	r5, r6
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	1889      	adds	r1, r1, r2
 8007cf6:	e7f1      	b.n	8007cdc <_svfiprintf_r+0x194>
 8007cf8:	aa07      	add	r2, sp, #28
 8007cfa:	9200      	str	r2, [sp, #0]
 8007cfc:	0021      	movs	r1, r4
 8007cfe:	003a      	movs	r2, r7
 8007d00:	4b0f      	ldr	r3, [pc, #60]	@ (8007d40 <_svfiprintf_r+0x1f8>)
 8007d02:	9803      	ldr	r0, [sp, #12]
 8007d04:	e000      	b.n	8007d08 <_svfiprintf_r+0x1c0>
 8007d06:	bf00      	nop
 8007d08:	9004      	str	r0, [sp, #16]
 8007d0a:	9b04      	ldr	r3, [sp, #16]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	d1d6      	bne.n	8007cbe <_svfiprintf_r+0x176>
 8007d10:	89bb      	ldrh	r3, [r7, #12]
 8007d12:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007d14:	065b      	lsls	r3, r3, #25
 8007d16:	d500      	bpl.n	8007d1a <_svfiprintf_r+0x1d2>
 8007d18:	e72c      	b.n	8007b74 <_svfiprintf_r+0x2c>
 8007d1a:	b021      	add	sp, #132	@ 0x84
 8007d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d1e:	aa07      	add	r2, sp, #28
 8007d20:	9200      	str	r2, [sp, #0]
 8007d22:	0021      	movs	r1, r4
 8007d24:	003a      	movs	r2, r7
 8007d26:	4b06      	ldr	r3, [pc, #24]	@ (8007d40 <_svfiprintf_r+0x1f8>)
 8007d28:	9803      	ldr	r0, [sp, #12]
 8007d2a:	f000 f87b 	bl	8007e24 <_printf_i>
 8007d2e:	e7eb      	b.n	8007d08 <_svfiprintf_r+0x1c0>
 8007d30:	08008abf 	.word	0x08008abf
 8007d34:	08008ac5 	.word	0x08008ac5
 8007d38:	08008ac9 	.word	0x08008ac9
 8007d3c:	00000000 	.word	0x00000000
 8007d40:	08007a89 	.word	0x08007a89

08007d44 <_printf_common>:
 8007d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d46:	0016      	movs	r6, r2
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	688a      	ldr	r2, [r1, #8]
 8007d4c:	690b      	ldr	r3, [r1, #16]
 8007d4e:	000c      	movs	r4, r1
 8007d50:	9000      	str	r0, [sp, #0]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	da00      	bge.n	8007d58 <_printf_common+0x14>
 8007d56:	0013      	movs	r3, r2
 8007d58:	0022      	movs	r2, r4
 8007d5a:	6033      	str	r3, [r6, #0]
 8007d5c:	3243      	adds	r2, #67	@ 0x43
 8007d5e:	7812      	ldrb	r2, [r2, #0]
 8007d60:	2a00      	cmp	r2, #0
 8007d62:	d001      	beq.n	8007d68 <_printf_common+0x24>
 8007d64:	3301      	adds	r3, #1
 8007d66:	6033      	str	r3, [r6, #0]
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	069b      	lsls	r3, r3, #26
 8007d6c:	d502      	bpl.n	8007d74 <_printf_common+0x30>
 8007d6e:	6833      	ldr	r3, [r6, #0]
 8007d70:	3302      	adds	r3, #2
 8007d72:	6033      	str	r3, [r6, #0]
 8007d74:	6822      	ldr	r2, [r4, #0]
 8007d76:	2306      	movs	r3, #6
 8007d78:	0015      	movs	r5, r2
 8007d7a:	401d      	ands	r5, r3
 8007d7c:	421a      	tst	r2, r3
 8007d7e:	d027      	beq.n	8007dd0 <_printf_common+0x8c>
 8007d80:	0023      	movs	r3, r4
 8007d82:	3343      	adds	r3, #67	@ 0x43
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	1e5a      	subs	r2, r3, #1
 8007d88:	4193      	sbcs	r3, r2
 8007d8a:	6822      	ldr	r2, [r4, #0]
 8007d8c:	0692      	lsls	r2, r2, #26
 8007d8e:	d430      	bmi.n	8007df2 <_printf_common+0xae>
 8007d90:	0022      	movs	r2, r4
 8007d92:	9901      	ldr	r1, [sp, #4]
 8007d94:	9800      	ldr	r0, [sp, #0]
 8007d96:	9d08      	ldr	r5, [sp, #32]
 8007d98:	3243      	adds	r2, #67	@ 0x43
 8007d9a:	47a8      	blx	r5
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d025      	beq.n	8007dec <_printf_common+0xa8>
 8007da0:	2206      	movs	r2, #6
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	2500      	movs	r5, #0
 8007da6:	4013      	ands	r3, r2
 8007da8:	2b04      	cmp	r3, #4
 8007daa:	d105      	bne.n	8007db8 <_printf_common+0x74>
 8007dac:	6833      	ldr	r3, [r6, #0]
 8007dae:	68e5      	ldr	r5, [r4, #12]
 8007db0:	1aed      	subs	r5, r5, r3
 8007db2:	43eb      	mvns	r3, r5
 8007db4:	17db      	asrs	r3, r3, #31
 8007db6:	401d      	ands	r5, r3
 8007db8:	68a3      	ldr	r3, [r4, #8]
 8007dba:	6922      	ldr	r2, [r4, #16]
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	dd01      	ble.n	8007dc4 <_printf_common+0x80>
 8007dc0:	1a9b      	subs	r3, r3, r2
 8007dc2:	18ed      	adds	r5, r5, r3
 8007dc4:	2600      	movs	r6, #0
 8007dc6:	42b5      	cmp	r5, r6
 8007dc8:	d120      	bne.n	8007e0c <_printf_common+0xc8>
 8007dca:	2000      	movs	r0, #0
 8007dcc:	e010      	b.n	8007df0 <_printf_common+0xac>
 8007dce:	3501      	adds	r5, #1
 8007dd0:	68e3      	ldr	r3, [r4, #12]
 8007dd2:	6832      	ldr	r2, [r6, #0]
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	42ab      	cmp	r3, r5
 8007dd8:	ddd2      	ble.n	8007d80 <_printf_common+0x3c>
 8007dda:	0022      	movs	r2, r4
 8007ddc:	2301      	movs	r3, #1
 8007dde:	9901      	ldr	r1, [sp, #4]
 8007de0:	9800      	ldr	r0, [sp, #0]
 8007de2:	9f08      	ldr	r7, [sp, #32]
 8007de4:	3219      	adds	r2, #25
 8007de6:	47b8      	blx	r7
 8007de8:	3001      	adds	r0, #1
 8007dea:	d1f0      	bne.n	8007dce <_printf_common+0x8a>
 8007dec:	2001      	movs	r0, #1
 8007dee:	4240      	negs	r0, r0
 8007df0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007df2:	2030      	movs	r0, #48	@ 0x30
 8007df4:	18e1      	adds	r1, r4, r3
 8007df6:	3143      	adds	r1, #67	@ 0x43
 8007df8:	7008      	strb	r0, [r1, #0]
 8007dfa:	0021      	movs	r1, r4
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	3145      	adds	r1, #69	@ 0x45
 8007e00:	7809      	ldrb	r1, [r1, #0]
 8007e02:	18a2      	adds	r2, r4, r2
 8007e04:	3243      	adds	r2, #67	@ 0x43
 8007e06:	3302      	adds	r3, #2
 8007e08:	7011      	strb	r1, [r2, #0]
 8007e0a:	e7c1      	b.n	8007d90 <_printf_common+0x4c>
 8007e0c:	0022      	movs	r2, r4
 8007e0e:	2301      	movs	r3, #1
 8007e10:	9901      	ldr	r1, [sp, #4]
 8007e12:	9800      	ldr	r0, [sp, #0]
 8007e14:	9f08      	ldr	r7, [sp, #32]
 8007e16:	321a      	adds	r2, #26
 8007e18:	47b8      	blx	r7
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d0e6      	beq.n	8007dec <_printf_common+0xa8>
 8007e1e:	3601      	adds	r6, #1
 8007e20:	e7d1      	b.n	8007dc6 <_printf_common+0x82>
	...

08007e24 <_printf_i>:
 8007e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e26:	b08b      	sub	sp, #44	@ 0x2c
 8007e28:	9206      	str	r2, [sp, #24]
 8007e2a:	000a      	movs	r2, r1
 8007e2c:	3243      	adds	r2, #67	@ 0x43
 8007e2e:	9307      	str	r3, [sp, #28]
 8007e30:	9005      	str	r0, [sp, #20]
 8007e32:	9203      	str	r2, [sp, #12]
 8007e34:	7e0a      	ldrb	r2, [r1, #24]
 8007e36:	000c      	movs	r4, r1
 8007e38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e3a:	2a78      	cmp	r2, #120	@ 0x78
 8007e3c:	d809      	bhi.n	8007e52 <_printf_i+0x2e>
 8007e3e:	2a62      	cmp	r2, #98	@ 0x62
 8007e40:	d80b      	bhi.n	8007e5a <_printf_i+0x36>
 8007e42:	2a00      	cmp	r2, #0
 8007e44:	d100      	bne.n	8007e48 <_printf_i+0x24>
 8007e46:	e0ba      	b.n	8007fbe <_printf_i+0x19a>
 8007e48:	497a      	ldr	r1, [pc, #488]	@ (8008034 <_printf_i+0x210>)
 8007e4a:	9104      	str	r1, [sp, #16]
 8007e4c:	2a58      	cmp	r2, #88	@ 0x58
 8007e4e:	d100      	bne.n	8007e52 <_printf_i+0x2e>
 8007e50:	e08e      	b.n	8007f70 <_printf_i+0x14c>
 8007e52:	0025      	movs	r5, r4
 8007e54:	3542      	adds	r5, #66	@ 0x42
 8007e56:	702a      	strb	r2, [r5, #0]
 8007e58:	e022      	b.n	8007ea0 <_printf_i+0x7c>
 8007e5a:	0010      	movs	r0, r2
 8007e5c:	3863      	subs	r0, #99	@ 0x63
 8007e5e:	2815      	cmp	r0, #21
 8007e60:	d8f7      	bhi.n	8007e52 <_printf_i+0x2e>
 8007e62:	f7f8 f977 	bl	8000154 <__gnu_thumb1_case_shi>
 8007e66:	0016      	.short	0x0016
 8007e68:	fff6001f 	.word	0xfff6001f
 8007e6c:	fff6fff6 	.word	0xfff6fff6
 8007e70:	001ffff6 	.word	0x001ffff6
 8007e74:	fff6fff6 	.word	0xfff6fff6
 8007e78:	fff6fff6 	.word	0xfff6fff6
 8007e7c:	0036009f 	.word	0x0036009f
 8007e80:	fff6007e 	.word	0xfff6007e
 8007e84:	00b0fff6 	.word	0x00b0fff6
 8007e88:	0036fff6 	.word	0x0036fff6
 8007e8c:	fff6fff6 	.word	0xfff6fff6
 8007e90:	0082      	.short	0x0082
 8007e92:	0025      	movs	r5, r4
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	3542      	adds	r5, #66	@ 0x42
 8007e98:	1d11      	adds	r1, r2, #4
 8007e9a:	6019      	str	r1, [r3, #0]
 8007e9c:	6813      	ldr	r3, [r2, #0]
 8007e9e:	702b      	strb	r3, [r5, #0]
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e09e      	b.n	8007fe2 <_printf_i+0x1be>
 8007ea4:	6818      	ldr	r0, [r3, #0]
 8007ea6:	6809      	ldr	r1, [r1, #0]
 8007ea8:	1d02      	adds	r2, r0, #4
 8007eaa:	060d      	lsls	r5, r1, #24
 8007eac:	d50b      	bpl.n	8007ec6 <_printf_i+0xa2>
 8007eae:	6806      	ldr	r6, [r0, #0]
 8007eb0:	601a      	str	r2, [r3, #0]
 8007eb2:	2e00      	cmp	r6, #0
 8007eb4:	da03      	bge.n	8007ebe <_printf_i+0x9a>
 8007eb6:	232d      	movs	r3, #45	@ 0x2d
 8007eb8:	9a03      	ldr	r2, [sp, #12]
 8007eba:	4276      	negs	r6, r6
 8007ebc:	7013      	strb	r3, [r2, #0]
 8007ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8008034 <_printf_i+0x210>)
 8007ec0:	270a      	movs	r7, #10
 8007ec2:	9304      	str	r3, [sp, #16]
 8007ec4:	e018      	b.n	8007ef8 <_printf_i+0xd4>
 8007ec6:	6806      	ldr	r6, [r0, #0]
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	0649      	lsls	r1, r1, #25
 8007ecc:	d5f1      	bpl.n	8007eb2 <_printf_i+0x8e>
 8007ece:	b236      	sxth	r6, r6
 8007ed0:	e7ef      	b.n	8007eb2 <_printf_i+0x8e>
 8007ed2:	6808      	ldr	r0, [r1, #0]
 8007ed4:	6819      	ldr	r1, [r3, #0]
 8007ed6:	c940      	ldmia	r1!, {r6}
 8007ed8:	0605      	lsls	r5, r0, #24
 8007eda:	d402      	bmi.n	8007ee2 <_printf_i+0xbe>
 8007edc:	0640      	lsls	r0, r0, #25
 8007ede:	d500      	bpl.n	8007ee2 <_printf_i+0xbe>
 8007ee0:	b2b6      	uxth	r6, r6
 8007ee2:	6019      	str	r1, [r3, #0]
 8007ee4:	4b53      	ldr	r3, [pc, #332]	@ (8008034 <_printf_i+0x210>)
 8007ee6:	270a      	movs	r7, #10
 8007ee8:	9304      	str	r3, [sp, #16]
 8007eea:	2a6f      	cmp	r2, #111	@ 0x6f
 8007eec:	d100      	bne.n	8007ef0 <_printf_i+0xcc>
 8007eee:	3f02      	subs	r7, #2
 8007ef0:	0023      	movs	r3, r4
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	3343      	adds	r3, #67	@ 0x43
 8007ef6:	701a      	strb	r2, [r3, #0]
 8007ef8:	6863      	ldr	r3, [r4, #4]
 8007efa:	60a3      	str	r3, [r4, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	db06      	blt.n	8007f0e <_printf_i+0xea>
 8007f00:	2104      	movs	r1, #4
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	9d03      	ldr	r5, [sp, #12]
 8007f06:	438a      	bics	r2, r1
 8007f08:	6022      	str	r2, [r4, #0]
 8007f0a:	4333      	orrs	r3, r6
 8007f0c:	d00c      	beq.n	8007f28 <_printf_i+0x104>
 8007f0e:	9d03      	ldr	r5, [sp, #12]
 8007f10:	0030      	movs	r0, r6
 8007f12:	0039      	movs	r1, r7
 8007f14:	f7f8 f9ae 	bl	8000274 <__aeabi_uidivmod>
 8007f18:	9b04      	ldr	r3, [sp, #16]
 8007f1a:	3d01      	subs	r5, #1
 8007f1c:	5c5b      	ldrb	r3, [r3, r1]
 8007f1e:	702b      	strb	r3, [r5, #0]
 8007f20:	0033      	movs	r3, r6
 8007f22:	0006      	movs	r6, r0
 8007f24:	429f      	cmp	r7, r3
 8007f26:	d9f3      	bls.n	8007f10 <_printf_i+0xec>
 8007f28:	2f08      	cmp	r7, #8
 8007f2a:	d109      	bne.n	8007f40 <_printf_i+0x11c>
 8007f2c:	6823      	ldr	r3, [r4, #0]
 8007f2e:	07db      	lsls	r3, r3, #31
 8007f30:	d506      	bpl.n	8007f40 <_printf_i+0x11c>
 8007f32:	6862      	ldr	r2, [r4, #4]
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	dc02      	bgt.n	8007f40 <_printf_i+0x11c>
 8007f3a:	2330      	movs	r3, #48	@ 0x30
 8007f3c:	3d01      	subs	r5, #1
 8007f3e:	702b      	strb	r3, [r5, #0]
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	1b5b      	subs	r3, r3, r5
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	9b07      	ldr	r3, [sp, #28]
 8007f48:	0021      	movs	r1, r4
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	9805      	ldr	r0, [sp, #20]
 8007f4e:	9b06      	ldr	r3, [sp, #24]
 8007f50:	aa09      	add	r2, sp, #36	@ 0x24
 8007f52:	f7ff fef7 	bl	8007d44 <_printf_common>
 8007f56:	3001      	adds	r0, #1
 8007f58:	d148      	bne.n	8007fec <_printf_i+0x1c8>
 8007f5a:	2001      	movs	r0, #1
 8007f5c:	4240      	negs	r0, r0
 8007f5e:	b00b      	add	sp, #44	@ 0x2c
 8007f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f62:	2220      	movs	r2, #32
 8007f64:	6809      	ldr	r1, [r1, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	6022      	str	r2, [r4, #0]
 8007f6a:	2278      	movs	r2, #120	@ 0x78
 8007f6c:	4932      	ldr	r1, [pc, #200]	@ (8008038 <_printf_i+0x214>)
 8007f6e:	9104      	str	r1, [sp, #16]
 8007f70:	0021      	movs	r1, r4
 8007f72:	3145      	adds	r1, #69	@ 0x45
 8007f74:	700a      	strb	r2, [r1, #0]
 8007f76:	6819      	ldr	r1, [r3, #0]
 8007f78:	6822      	ldr	r2, [r4, #0]
 8007f7a:	c940      	ldmia	r1!, {r6}
 8007f7c:	0610      	lsls	r0, r2, #24
 8007f7e:	d402      	bmi.n	8007f86 <_printf_i+0x162>
 8007f80:	0650      	lsls	r0, r2, #25
 8007f82:	d500      	bpl.n	8007f86 <_printf_i+0x162>
 8007f84:	b2b6      	uxth	r6, r6
 8007f86:	6019      	str	r1, [r3, #0]
 8007f88:	07d3      	lsls	r3, r2, #31
 8007f8a:	d502      	bpl.n	8007f92 <_printf_i+0x16e>
 8007f8c:	2320      	movs	r3, #32
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	2e00      	cmp	r6, #0
 8007f94:	d001      	beq.n	8007f9a <_printf_i+0x176>
 8007f96:	2710      	movs	r7, #16
 8007f98:	e7aa      	b.n	8007ef0 <_printf_i+0xcc>
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	4393      	bics	r3, r2
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	e7f8      	b.n	8007f96 <_printf_i+0x172>
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	680d      	ldr	r5, [r1, #0]
 8007fa8:	1d10      	adds	r0, r2, #4
 8007faa:	6949      	ldr	r1, [r1, #20]
 8007fac:	6018      	str	r0, [r3, #0]
 8007fae:	6813      	ldr	r3, [r2, #0]
 8007fb0:	062e      	lsls	r6, r5, #24
 8007fb2:	d501      	bpl.n	8007fb8 <_printf_i+0x194>
 8007fb4:	6019      	str	r1, [r3, #0]
 8007fb6:	e002      	b.n	8007fbe <_printf_i+0x19a>
 8007fb8:	066d      	lsls	r5, r5, #25
 8007fba:	d5fb      	bpl.n	8007fb4 <_printf_i+0x190>
 8007fbc:	8019      	strh	r1, [r3, #0]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9d03      	ldr	r5, [sp, #12]
 8007fc2:	6123      	str	r3, [r4, #16]
 8007fc4:	e7bf      	b.n	8007f46 <_printf_i+0x122>
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	1d11      	adds	r1, r2, #4
 8007fca:	6019      	str	r1, [r3, #0]
 8007fcc:	6815      	ldr	r5, [r2, #0]
 8007fce:	2100      	movs	r1, #0
 8007fd0:	0028      	movs	r0, r5
 8007fd2:	6862      	ldr	r2, [r4, #4]
 8007fd4:	f000 f918 	bl	8008208 <memchr>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d001      	beq.n	8007fe0 <_printf_i+0x1bc>
 8007fdc:	1b40      	subs	r0, r0, r5
 8007fde:	6060      	str	r0, [r4, #4]
 8007fe0:	6863      	ldr	r3, [r4, #4]
 8007fe2:	6123      	str	r3, [r4, #16]
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9a03      	ldr	r2, [sp, #12]
 8007fe8:	7013      	strb	r3, [r2, #0]
 8007fea:	e7ac      	b.n	8007f46 <_printf_i+0x122>
 8007fec:	002a      	movs	r2, r5
 8007fee:	6923      	ldr	r3, [r4, #16]
 8007ff0:	9906      	ldr	r1, [sp, #24]
 8007ff2:	9805      	ldr	r0, [sp, #20]
 8007ff4:	9d07      	ldr	r5, [sp, #28]
 8007ff6:	47a8      	blx	r5
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d0ae      	beq.n	8007f5a <_printf_i+0x136>
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	079b      	lsls	r3, r3, #30
 8008000:	d415      	bmi.n	800802e <_printf_i+0x20a>
 8008002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008004:	68e0      	ldr	r0, [r4, #12]
 8008006:	4298      	cmp	r0, r3
 8008008:	daa9      	bge.n	8007f5e <_printf_i+0x13a>
 800800a:	0018      	movs	r0, r3
 800800c:	e7a7      	b.n	8007f5e <_printf_i+0x13a>
 800800e:	0022      	movs	r2, r4
 8008010:	2301      	movs	r3, #1
 8008012:	9906      	ldr	r1, [sp, #24]
 8008014:	9805      	ldr	r0, [sp, #20]
 8008016:	9e07      	ldr	r6, [sp, #28]
 8008018:	3219      	adds	r2, #25
 800801a:	47b0      	blx	r6
 800801c:	3001      	adds	r0, #1
 800801e:	d09c      	beq.n	8007f5a <_printf_i+0x136>
 8008020:	3501      	adds	r5, #1
 8008022:	68e3      	ldr	r3, [r4, #12]
 8008024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008026:	1a9b      	subs	r3, r3, r2
 8008028:	42ab      	cmp	r3, r5
 800802a:	dcf0      	bgt.n	800800e <_printf_i+0x1ea>
 800802c:	e7e9      	b.n	8008002 <_printf_i+0x1de>
 800802e:	2500      	movs	r5, #0
 8008030:	e7f7      	b.n	8008022 <_printf_i+0x1fe>
 8008032:	46c0      	nop			@ (mov r8, r8)
 8008034:	08008ad0 	.word	0x08008ad0
 8008038:	08008ae1 	.word	0x08008ae1

0800803c <__sflush_r>:
 800803c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800803e:	220c      	movs	r2, #12
 8008040:	5e8b      	ldrsh	r3, [r1, r2]
 8008042:	0005      	movs	r5, r0
 8008044:	000c      	movs	r4, r1
 8008046:	071a      	lsls	r2, r3, #28
 8008048:	d456      	bmi.n	80080f8 <__sflush_r+0xbc>
 800804a:	684a      	ldr	r2, [r1, #4]
 800804c:	2a00      	cmp	r2, #0
 800804e:	dc02      	bgt.n	8008056 <__sflush_r+0x1a>
 8008050:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8008052:	2a00      	cmp	r2, #0
 8008054:	dd4e      	ble.n	80080f4 <__sflush_r+0xb8>
 8008056:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008058:	2f00      	cmp	r7, #0
 800805a:	d04b      	beq.n	80080f4 <__sflush_r+0xb8>
 800805c:	2200      	movs	r2, #0
 800805e:	2080      	movs	r0, #128	@ 0x80
 8008060:	682e      	ldr	r6, [r5, #0]
 8008062:	602a      	str	r2, [r5, #0]
 8008064:	001a      	movs	r2, r3
 8008066:	0140      	lsls	r0, r0, #5
 8008068:	6a21      	ldr	r1, [r4, #32]
 800806a:	4002      	ands	r2, r0
 800806c:	4203      	tst	r3, r0
 800806e:	d033      	beq.n	80080d8 <__sflush_r+0x9c>
 8008070:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	075b      	lsls	r3, r3, #29
 8008076:	d506      	bpl.n	8008086 <__sflush_r+0x4a>
 8008078:	6863      	ldr	r3, [r4, #4]
 800807a:	1ad2      	subs	r2, r2, r3
 800807c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <__sflush_r+0x4a>
 8008082:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008084:	1ad2      	subs	r2, r2, r3
 8008086:	2300      	movs	r3, #0
 8008088:	0028      	movs	r0, r5
 800808a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800808c:	6a21      	ldr	r1, [r4, #32]
 800808e:	47b8      	blx	r7
 8008090:	89a2      	ldrh	r2, [r4, #12]
 8008092:	1c43      	adds	r3, r0, #1
 8008094:	d106      	bne.n	80080a4 <__sflush_r+0x68>
 8008096:	6829      	ldr	r1, [r5, #0]
 8008098:	291d      	cmp	r1, #29
 800809a:	d846      	bhi.n	800812a <__sflush_r+0xee>
 800809c:	4b29      	ldr	r3, [pc, #164]	@ (8008144 <__sflush_r+0x108>)
 800809e:	40cb      	lsrs	r3, r1
 80080a0:	07db      	lsls	r3, r3, #31
 80080a2:	d542      	bpl.n	800812a <__sflush_r+0xee>
 80080a4:	2300      	movs	r3, #0
 80080a6:	6063      	str	r3, [r4, #4]
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	6023      	str	r3, [r4, #0]
 80080ac:	04d2      	lsls	r2, r2, #19
 80080ae:	d505      	bpl.n	80080bc <__sflush_r+0x80>
 80080b0:	1c43      	adds	r3, r0, #1
 80080b2:	d102      	bne.n	80080ba <__sflush_r+0x7e>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d100      	bne.n	80080bc <__sflush_r+0x80>
 80080ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80080bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080be:	602e      	str	r6, [r5, #0]
 80080c0:	2900      	cmp	r1, #0
 80080c2:	d017      	beq.n	80080f4 <__sflush_r+0xb8>
 80080c4:	0023      	movs	r3, r4
 80080c6:	3344      	adds	r3, #68	@ 0x44
 80080c8:	4299      	cmp	r1, r3
 80080ca:	d002      	beq.n	80080d2 <__sflush_r+0x96>
 80080cc:	0028      	movs	r0, r5
 80080ce:	f7ff fbd5 	bl	800787c <_free_r>
 80080d2:	2300      	movs	r3, #0
 80080d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80080d6:	e00d      	b.n	80080f4 <__sflush_r+0xb8>
 80080d8:	2301      	movs	r3, #1
 80080da:	0028      	movs	r0, r5
 80080dc:	47b8      	blx	r7
 80080de:	0002      	movs	r2, r0
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d1c6      	bne.n	8008072 <__sflush_r+0x36>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0c3      	beq.n	8008072 <__sflush_r+0x36>
 80080ea:	2b1d      	cmp	r3, #29
 80080ec:	d001      	beq.n	80080f2 <__sflush_r+0xb6>
 80080ee:	2b16      	cmp	r3, #22
 80080f0:	d11a      	bne.n	8008128 <__sflush_r+0xec>
 80080f2:	602e      	str	r6, [r5, #0]
 80080f4:	2000      	movs	r0, #0
 80080f6:	e01e      	b.n	8008136 <__sflush_r+0xfa>
 80080f8:	690e      	ldr	r6, [r1, #16]
 80080fa:	2e00      	cmp	r6, #0
 80080fc:	d0fa      	beq.n	80080f4 <__sflush_r+0xb8>
 80080fe:	680f      	ldr	r7, [r1, #0]
 8008100:	600e      	str	r6, [r1, #0]
 8008102:	1bba      	subs	r2, r7, r6
 8008104:	9201      	str	r2, [sp, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	079b      	lsls	r3, r3, #30
 800810a:	d100      	bne.n	800810e <__sflush_r+0xd2>
 800810c:	694a      	ldr	r2, [r1, #20]
 800810e:	60a2      	str	r2, [r4, #8]
 8008110:	9b01      	ldr	r3, [sp, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	ddee      	ble.n	80080f4 <__sflush_r+0xb8>
 8008116:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008118:	0032      	movs	r2, r6
 800811a:	001f      	movs	r7, r3
 800811c:	0028      	movs	r0, r5
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	6a21      	ldr	r1, [r4, #32]
 8008122:	47b8      	blx	r7
 8008124:	2800      	cmp	r0, #0
 8008126:	dc07      	bgt.n	8008138 <__sflush_r+0xfc>
 8008128:	89a2      	ldrh	r2, [r4, #12]
 800812a:	2340      	movs	r3, #64	@ 0x40
 800812c:	2001      	movs	r0, #1
 800812e:	4313      	orrs	r3, r2
 8008130:	b21b      	sxth	r3, r3
 8008132:	81a3      	strh	r3, [r4, #12]
 8008134:	4240      	negs	r0, r0
 8008136:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008138:	9b01      	ldr	r3, [sp, #4]
 800813a:	1836      	adds	r6, r6, r0
 800813c:	1a1b      	subs	r3, r3, r0
 800813e:	9301      	str	r3, [sp, #4]
 8008140:	e7e6      	b.n	8008110 <__sflush_r+0xd4>
 8008142:	46c0      	nop			@ (mov r8, r8)
 8008144:	20400001 	.word	0x20400001

08008148 <_fflush_r>:
 8008148:	690b      	ldr	r3, [r1, #16]
 800814a:	b570      	push	{r4, r5, r6, lr}
 800814c:	0005      	movs	r5, r0
 800814e:	000c      	movs	r4, r1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d102      	bne.n	800815a <_fflush_r+0x12>
 8008154:	2500      	movs	r5, #0
 8008156:	0028      	movs	r0, r5
 8008158:	bd70      	pop	{r4, r5, r6, pc}
 800815a:	2800      	cmp	r0, #0
 800815c:	d004      	beq.n	8008168 <_fflush_r+0x20>
 800815e:	6a03      	ldr	r3, [r0, #32]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <_fflush_r+0x20>
 8008164:	f7ff f9d6 	bl	8007514 <__sinit>
 8008168:	220c      	movs	r2, #12
 800816a:	5ea3      	ldrsh	r3, [r4, r2]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0f1      	beq.n	8008154 <_fflush_r+0xc>
 8008170:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008172:	07d2      	lsls	r2, r2, #31
 8008174:	d404      	bmi.n	8008180 <_fflush_r+0x38>
 8008176:	059b      	lsls	r3, r3, #22
 8008178:	d402      	bmi.n	8008180 <_fflush_r+0x38>
 800817a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800817c:	f7ff fb4d 	bl	800781a <__retarget_lock_acquire_recursive>
 8008180:	0028      	movs	r0, r5
 8008182:	0021      	movs	r1, r4
 8008184:	f7ff ff5a 	bl	800803c <__sflush_r>
 8008188:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800818a:	0005      	movs	r5, r0
 800818c:	07db      	lsls	r3, r3, #31
 800818e:	d4e2      	bmi.n	8008156 <_fflush_r+0xe>
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	059b      	lsls	r3, r3, #22
 8008194:	d4df      	bmi.n	8008156 <_fflush_r+0xe>
 8008196:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008198:	f7ff fb40 	bl	800781c <__retarget_lock_release_recursive>
 800819c:	e7db      	b.n	8008156 <_fflush_r+0xe>
	...

080081a0 <fiprintf>:
 80081a0:	b40e      	push	{r1, r2, r3}
 80081a2:	b517      	push	{r0, r1, r2, r4, lr}
 80081a4:	4c05      	ldr	r4, [pc, #20]	@ (80081bc <fiprintf+0x1c>)
 80081a6:	ab05      	add	r3, sp, #20
 80081a8:	cb04      	ldmia	r3!, {r2}
 80081aa:	0001      	movs	r1, r0
 80081ac:	6820      	ldr	r0, [r4, #0]
 80081ae:	9301      	str	r3, [sp, #4]
 80081b0:	f000 f894 	bl	80082dc <_vfiprintf_r>
 80081b4:	bc1e      	pop	{r1, r2, r3, r4}
 80081b6:	bc08      	pop	{r3}
 80081b8:	b003      	add	sp, #12
 80081ba:	4718      	bx	r3
 80081bc:	200001a4 	.word	0x200001a4

080081c0 <memmove>:
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4288      	cmp	r0, r1
 80081c4:	d902      	bls.n	80081cc <memmove+0xc>
 80081c6:	188b      	adds	r3, r1, r2
 80081c8:	4298      	cmp	r0, r3
 80081ca:	d308      	bcc.n	80081de <memmove+0x1e>
 80081cc:	2300      	movs	r3, #0
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d007      	beq.n	80081e2 <memmove+0x22>
 80081d2:	5ccc      	ldrb	r4, [r1, r3]
 80081d4:	54c4      	strb	r4, [r0, r3]
 80081d6:	3301      	adds	r3, #1
 80081d8:	e7f9      	b.n	80081ce <memmove+0xe>
 80081da:	5c8b      	ldrb	r3, [r1, r2]
 80081dc:	5483      	strb	r3, [r0, r2]
 80081de:	3a01      	subs	r2, #1
 80081e0:	d2fb      	bcs.n	80081da <memmove+0x1a>
 80081e2:	bd10      	pop	{r4, pc}

080081e4 <_sbrk_r>:
 80081e4:	2300      	movs	r3, #0
 80081e6:	b570      	push	{r4, r5, r6, lr}
 80081e8:	4d06      	ldr	r5, [pc, #24]	@ (8008204 <_sbrk_r+0x20>)
 80081ea:	0004      	movs	r4, r0
 80081ec:	0008      	movs	r0, r1
 80081ee:	602b      	str	r3, [r5, #0]
 80081f0:	f7fa fe54 	bl	8002e9c <_sbrk>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d103      	bne.n	8008200 <_sbrk_r+0x1c>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d000      	beq.n	8008200 <_sbrk_r+0x1c>
 80081fe:	6023      	str	r3, [r4, #0]
 8008200:	bd70      	pop	{r4, r5, r6, pc}
 8008202:	46c0      	nop			@ (mov r8, r8)
 8008204:	200037c0 	.word	0x200037c0

08008208 <memchr>:
 8008208:	b2c9      	uxtb	r1, r1
 800820a:	1882      	adds	r2, r0, r2
 800820c:	4290      	cmp	r0, r2
 800820e:	d101      	bne.n	8008214 <memchr+0xc>
 8008210:	2000      	movs	r0, #0
 8008212:	4770      	bx	lr
 8008214:	7803      	ldrb	r3, [r0, #0]
 8008216:	428b      	cmp	r3, r1
 8008218:	d0fb      	beq.n	8008212 <memchr+0xa>
 800821a:	3001      	adds	r0, #1
 800821c:	e7f6      	b.n	800820c <memchr+0x4>

0800821e <abort>:
 800821e:	2006      	movs	r0, #6
 8008220:	b510      	push	{r4, lr}
 8008222:	f000 fa41 	bl	80086a8 <raise>
 8008226:	2001      	movs	r0, #1
 8008228:	f7fa fe0c 	bl	8002e44 <_exit>

0800822c <_realloc_r>:
 800822c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800822e:	0006      	movs	r6, r0
 8008230:	000c      	movs	r4, r1
 8008232:	0015      	movs	r5, r2
 8008234:	2900      	cmp	r1, #0
 8008236:	d105      	bne.n	8008244 <_realloc_r+0x18>
 8008238:	0011      	movs	r1, r2
 800823a:	f7ff fb95 	bl	8007968 <_malloc_r>
 800823e:	0004      	movs	r4, r0
 8008240:	0020      	movs	r0, r4
 8008242:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008244:	2a00      	cmp	r2, #0
 8008246:	d103      	bne.n	8008250 <_realloc_r+0x24>
 8008248:	f7ff fb18 	bl	800787c <_free_r>
 800824c:	002c      	movs	r4, r5
 800824e:	e7f7      	b.n	8008240 <_realloc_r+0x14>
 8008250:	f000 fa4a 	bl	80086e8 <_malloc_usable_size_r>
 8008254:	0007      	movs	r7, r0
 8008256:	4285      	cmp	r5, r0
 8008258:	d802      	bhi.n	8008260 <_realloc_r+0x34>
 800825a:	0843      	lsrs	r3, r0, #1
 800825c:	42ab      	cmp	r3, r5
 800825e:	d3ef      	bcc.n	8008240 <_realloc_r+0x14>
 8008260:	0029      	movs	r1, r5
 8008262:	0030      	movs	r0, r6
 8008264:	f7ff fb80 	bl	8007968 <_malloc_r>
 8008268:	9001      	str	r0, [sp, #4]
 800826a:	2800      	cmp	r0, #0
 800826c:	d101      	bne.n	8008272 <_realloc_r+0x46>
 800826e:	9c01      	ldr	r4, [sp, #4]
 8008270:	e7e6      	b.n	8008240 <_realloc_r+0x14>
 8008272:	002a      	movs	r2, r5
 8008274:	42bd      	cmp	r5, r7
 8008276:	d900      	bls.n	800827a <_realloc_r+0x4e>
 8008278:	003a      	movs	r2, r7
 800827a:	0021      	movs	r1, r4
 800827c:	9801      	ldr	r0, [sp, #4]
 800827e:	f7ff fad6 	bl	800782e <memcpy>
 8008282:	0021      	movs	r1, r4
 8008284:	0030      	movs	r0, r6
 8008286:	f7ff faf9 	bl	800787c <_free_r>
 800828a:	e7f0      	b.n	800826e <_realloc_r+0x42>

0800828c <__sfputc_r>:
 800828c:	6893      	ldr	r3, [r2, #8]
 800828e:	b510      	push	{r4, lr}
 8008290:	3b01      	subs	r3, #1
 8008292:	6093      	str	r3, [r2, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	da04      	bge.n	80082a2 <__sfputc_r+0x16>
 8008298:	6994      	ldr	r4, [r2, #24]
 800829a:	42a3      	cmp	r3, r4
 800829c:	db07      	blt.n	80082ae <__sfputc_r+0x22>
 800829e:	290a      	cmp	r1, #10
 80082a0:	d005      	beq.n	80082ae <__sfputc_r+0x22>
 80082a2:	6813      	ldr	r3, [r2, #0]
 80082a4:	1c58      	adds	r0, r3, #1
 80082a6:	6010      	str	r0, [r2, #0]
 80082a8:	7019      	strb	r1, [r3, #0]
 80082aa:	0008      	movs	r0, r1
 80082ac:	bd10      	pop	{r4, pc}
 80082ae:	f000 f931 	bl	8008514 <__swbuf_r>
 80082b2:	0001      	movs	r1, r0
 80082b4:	e7f9      	b.n	80082aa <__sfputc_r+0x1e>

080082b6 <__sfputs_r>:
 80082b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b8:	0006      	movs	r6, r0
 80082ba:	000f      	movs	r7, r1
 80082bc:	0014      	movs	r4, r2
 80082be:	18d5      	adds	r5, r2, r3
 80082c0:	42ac      	cmp	r4, r5
 80082c2:	d101      	bne.n	80082c8 <__sfputs_r+0x12>
 80082c4:	2000      	movs	r0, #0
 80082c6:	e007      	b.n	80082d8 <__sfputs_r+0x22>
 80082c8:	7821      	ldrb	r1, [r4, #0]
 80082ca:	003a      	movs	r2, r7
 80082cc:	0030      	movs	r0, r6
 80082ce:	f7ff ffdd 	bl	800828c <__sfputc_r>
 80082d2:	3401      	adds	r4, #1
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d1f3      	bne.n	80082c0 <__sfputs_r+0xa>
 80082d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082dc <_vfiprintf_r>:
 80082dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082de:	b0a1      	sub	sp, #132	@ 0x84
 80082e0:	000f      	movs	r7, r1
 80082e2:	0015      	movs	r5, r2
 80082e4:	001e      	movs	r6, r3
 80082e6:	9003      	str	r0, [sp, #12]
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d004      	beq.n	80082f6 <_vfiprintf_r+0x1a>
 80082ec:	6a03      	ldr	r3, [r0, #32]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <_vfiprintf_r+0x1a>
 80082f2:	f7ff f90f 	bl	8007514 <__sinit>
 80082f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082f8:	07db      	lsls	r3, r3, #31
 80082fa:	d405      	bmi.n	8008308 <_vfiprintf_r+0x2c>
 80082fc:	89bb      	ldrh	r3, [r7, #12]
 80082fe:	059b      	lsls	r3, r3, #22
 8008300:	d402      	bmi.n	8008308 <_vfiprintf_r+0x2c>
 8008302:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008304:	f7ff fa89 	bl	800781a <__retarget_lock_acquire_recursive>
 8008308:	89bb      	ldrh	r3, [r7, #12]
 800830a:	071b      	lsls	r3, r3, #28
 800830c:	d502      	bpl.n	8008314 <_vfiprintf_r+0x38>
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d113      	bne.n	800833c <_vfiprintf_r+0x60>
 8008314:	0039      	movs	r1, r7
 8008316:	9803      	ldr	r0, [sp, #12]
 8008318:	f000 f93e 	bl	8008598 <__swsetup_r>
 800831c:	2800      	cmp	r0, #0
 800831e:	d00d      	beq.n	800833c <_vfiprintf_r+0x60>
 8008320:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008322:	07db      	lsls	r3, r3, #31
 8008324:	d503      	bpl.n	800832e <_vfiprintf_r+0x52>
 8008326:	2001      	movs	r0, #1
 8008328:	4240      	negs	r0, r0
 800832a:	b021      	add	sp, #132	@ 0x84
 800832c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800832e:	89bb      	ldrh	r3, [r7, #12]
 8008330:	059b      	lsls	r3, r3, #22
 8008332:	d4f8      	bmi.n	8008326 <_vfiprintf_r+0x4a>
 8008334:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008336:	f7ff fa71 	bl	800781c <__retarget_lock_release_recursive>
 800833a:	e7f4      	b.n	8008326 <_vfiprintf_r+0x4a>
 800833c:	2300      	movs	r3, #0
 800833e:	ac08      	add	r4, sp, #32
 8008340:	6163      	str	r3, [r4, #20]
 8008342:	3320      	adds	r3, #32
 8008344:	7663      	strb	r3, [r4, #25]
 8008346:	3310      	adds	r3, #16
 8008348:	76a3      	strb	r3, [r4, #26]
 800834a:	9607      	str	r6, [sp, #28]
 800834c:	002e      	movs	r6, r5
 800834e:	7833      	ldrb	r3, [r6, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <_vfiprintf_r+0x7c>
 8008354:	2b25      	cmp	r3, #37	@ 0x25
 8008356:	d148      	bne.n	80083ea <_vfiprintf_r+0x10e>
 8008358:	1b73      	subs	r3, r6, r5
 800835a:	9305      	str	r3, [sp, #20]
 800835c:	42ae      	cmp	r6, r5
 800835e:	d00b      	beq.n	8008378 <_vfiprintf_r+0x9c>
 8008360:	002a      	movs	r2, r5
 8008362:	0039      	movs	r1, r7
 8008364:	9803      	ldr	r0, [sp, #12]
 8008366:	f7ff ffa6 	bl	80082b6 <__sfputs_r>
 800836a:	3001      	adds	r0, #1
 800836c:	d100      	bne.n	8008370 <_vfiprintf_r+0x94>
 800836e:	e0ae      	b.n	80084ce <_vfiprintf_r+0x1f2>
 8008370:	6963      	ldr	r3, [r4, #20]
 8008372:	9a05      	ldr	r2, [sp, #20]
 8008374:	189b      	adds	r3, r3, r2
 8008376:	6163      	str	r3, [r4, #20]
 8008378:	7833      	ldrb	r3, [r6, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d100      	bne.n	8008380 <_vfiprintf_r+0xa4>
 800837e:	e0a6      	b.n	80084ce <_vfiprintf_r+0x1f2>
 8008380:	2201      	movs	r2, #1
 8008382:	2300      	movs	r3, #0
 8008384:	4252      	negs	r2, r2
 8008386:	6062      	str	r2, [r4, #4]
 8008388:	a904      	add	r1, sp, #16
 800838a:	3254      	adds	r2, #84	@ 0x54
 800838c:	1852      	adds	r2, r2, r1
 800838e:	1c75      	adds	r5, r6, #1
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	60e3      	str	r3, [r4, #12]
 8008394:	60a3      	str	r3, [r4, #8]
 8008396:	7013      	strb	r3, [r2, #0]
 8008398:	65a3      	str	r3, [r4, #88]	@ 0x58
 800839a:	4b59      	ldr	r3, [pc, #356]	@ (8008500 <_vfiprintf_r+0x224>)
 800839c:	2205      	movs	r2, #5
 800839e:	0018      	movs	r0, r3
 80083a0:	7829      	ldrb	r1, [r5, #0]
 80083a2:	9305      	str	r3, [sp, #20]
 80083a4:	f7ff ff30 	bl	8008208 <memchr>
 80083a8:	1c6e      	adds	r6, r5, #1
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d11f      	bne.n	80083ee <_vfiprintf_r+0x112>
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	06d3      	lsls	r3, r2, #27
 80083b2:	d504      	bpl.n	80083be <_vfiprintf_r+0xe2>
 80083b4:	2353      	movs	r3, #83	@ 0x53
 80083b6:	a904      	add	r1, sp, #16
 80083b8:	185b      	adds	r3, r3, r1
 80083ba:	2120      	movs	r1, #32
 80083bc:	7019      	strb	r1, [r3, #0]
 80083be:	0713      	lsls	r3, r2, #28
 80083c0:	d504      	bpl.n	80083cc <_vfiprintf_r+0xf0>
 80083c2:	2353      	movs	r3, #83	@ 0x53
 80083c4:	a904      	add	r1, sp, #16
 80083c6:	185b      	adds	r3, r3, r1
 80083c8:	212b      	movs	r1, #43	@ 0x2b
 80083ca:	7019      	strb	r1, [r3, #0]
 80083cc:	782b      	ldrb	r3, [r5, #0]
 80083ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80083d0:	d016      	beq.n	8008400 <_vfiprintf_r+0x124>
 80083d2:	002e      	movs	r6, r5
 80083d4:	2100      	movs	r1, #0
 80083d6:	200a      	movs	r0, #10
 80083d8:	68e3      	ldr	r3, [r4, #12]
 80083da:	7832      	ldrb	r2, [r6, #0]
 80083dc:	1c75      	adds	r5, r6, #1
 80083de:	3a30      	subs	r2, #48	@ 0x30
 80083e0:	2a09      	cmp	r2, #9
 80083e2:	d950      	bls.n	8008486 <_vfiprintf_r+0x1aa>
 80083e4:	2900      	cmp	r1, #0
 80083e6:	d111      	bne.n	800840c <_vfiprintf_r+0x130>
 80083e8:	e017      	b.n	800841a <_vfiprintf_r+0x13e>
 80083ea:	3601      	adds	r6, #1
 80083ec:	e7af      	b.n	800834e <_vfiprintf_r+0x72>
 80083ee:	9b05      	ldr	r3, [sp, #20]
 80083f0:	6822      	ldr	r2, [r4, #0]
 80083f2:	1ac0      	subs	r0, r0, r3
 80083f4:	2301      	movs	r3, #1
 80083f6:	4083      	lsls	r3, r0
 80083f8:	4313      	orrs	r3, r2
 80083fa:	0035      	movs	r5, r6
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	e7cc      	b.n	800839a <_vfiprintf_r+0xbe>
 8008400:	9b07      	ldr	r3, [sp, #28]
 8008402:	1d19      	adds	r1, r3, #4
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	9107      	str	r1, [sp, #28]
 8008408:	2b00      	cmp	r3, #0
 800840a:	db01      	blt.n	8008410 <_vfiprintf_r+0x134>
 800840c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800840e:	e004      	b.n	800841a <_vfiprintf_r+0x13e>
 8008410:	425b      	negs	r3, r3
 8008412:	60e3      	str	r3, [r4, #12]
 8008414:	2302      	movs	r3, #2
 8008416:	4313      	orrs	r3, r2
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	7833      	ldrb	r3, [r6, #0]
 800841c:	2b2e      	cmp	r3, #46	@ 0x2e
 800841e:	d10c      	bne.n	800843a <_vfiprintf_r+0x15e>
 8008420:	7873      	ldrb	r3, [r6, #1]
 8008422:	2b2a      	cmp	r3, #42	@ 0x2a
 8008424:	d134      	bne.n	8008490 <_vfiprintf_r+0x1b4>
 8008426:	9b07      	ldr	r3, [sp, #28]
 8008428:	3602      	adds	r6, #2
 800842a:	1d1a      	adds	r2, r3, #4
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	9207      	str	r2, [sp, #28]
 8008430:	2b00      	cmp	r3, #0
 8008432:	da01      	bge.n	8008438 <_vfiprintf_r+0x15c>
 8008434:	2301      	movs	r3, #1
 8008436:	425b      	negs	r3, r3
 8008438:	9309      	str	r3, [sp, #36]	@ 0x24
 800843a:	4d32      	ldr	r5, [pc, #200]	@ (8008504 <_vfiprintf_r+0x228>)
 800843c:	2203      	movs	r2, #3
 800843e:	0028      	movs	r0, r5
 8008440:	7831      	ldrb	r1, [r6, #0]
 8008442:	f7ff fee1 	bl	8008208 <memchr>
 8008446:	2800      	cmp	r0, #0
 8008448:	d006      	beq.n	8008458 <_vfiprintf_r+0x17c>
 800844a:	2340      	movs	r3, #64	@ 0x40
 800844c:	1b40      	subs	r0, r0, r5
 800844e:	4083      	lsls	r3, r0
 8008450:	6822      	ldr	r2, [r4, #0]
 8008452:	3601      	adds	r6, #1
 8008454:	4313      	orrs	r3, r2
 8008456:	6023      	str	r3, [r4, #0]
 8008458:	7831      	ldrb	r1, [r6, #0]
 800845a:	2206      	movs	r2, #6
 800845c:	482a      	ldr	r0, [pc, #168]	@ (8008508 <_vfiprintf_r+0x22c>)
 800845e:	1c75      	adds	r5, r6, #1
 8008460:	7621      	strb	r1, [r4, #24]
 8008462:	f7ff fed1 	bl	8008208 <memchr>
 8008466:	2800      	cmp	r0, #0
 8008468:	d040      	beq.n	80084ec <_vfiprintf_r+0x210>
 800846a:	4b28      	ldr	r3, [pc, #160]	@ (800850c <_vfiprintf_r+0x230>)
 800846c:	2b00      	cmp	r3, #0
 800846e:	d122      	bne.n	80084b6 <_vfiprintf_r+0x1da>
 8008470:	2207      	movs	r2, #7
 8008472:	9b07      	ldr	r3, [sp, #28]
 8008474:	3307      	adds	r3, #7
 8008476:	4393      	bics	r3, r2
 8008478:	3308      	adds	r3, #8
 800847a:	9307      	str	r3, [sp, #28]
 800847c:	6963      	ldr	r3, [r4, #20]
 800847e:	9a04      	ldr	r2, [sp, #16]
 8008480:	189b      	adds	r3, r3, r2
 8008482:	6163      	str	r3, [r4, #20]
 8008484:	e762      	b.n	800834c <_vfiprintf_r+0x70>
 8008486:	4343      	muls	r3, r0
 8008488:	002e      	movs	r6, r5
 800848a:	2101      	movs	r1, #1
 800848c:	189b      	adds	r3, r3, r2
 800848e:	e7a4      	b.n	80083da <_vfiprintf_r+0xfe>
 8008490:	2300      	movs	r3, #0
 8008492:	200a      	movs	r0, #10
 8008494:	0019      	movs	r1, r3
 8008496:	3601      	adds	r6, #1
 8008498:	6063      	str	r3, [r4, #4]
 800849a:	7832      	ldrb	r2, [r6, #0]
 800849c:	1c75      	adds	r5, r6, #1
 800849e:	3a30      	subs	r2, #48	@ 0x30
 80084a0:	2a09      	cmp	r2, #9
 80084a2:	d903      	bls.n	80084ac <_vfiprintf_r+0x1d0>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0c8      	beq.n	800843a <_vfiprintf_r+0x15e>
 80084a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80084aa:	e7c6      	b.n	800843a <_vfiprintf_r+0x15e>
 80084ac:	4341      	muls	r1, r0
 80084ae:	002e      	movs	r6, r5
 80084b0:	2301      	movs	r3, #1
 80084b2:	1889      	adds	r1, r1, r2
 80084b4:	e7f1      	b.n	800849a <_vfiprintf_r+0x1be>
 80084b6:	aa07      	add	r2, sp, #28
 80084b8:	9200      	str	r2, [sp, #0]
 80084ba:	0021      	movs	r1, r4
 80084bc:	003a      	movs	r2, r7
 80084be:	4b14      	ldr	r3, [pc, #80]	@ (8008510 <_vfiprintf_r+0x234>)
 80084c0:	9803      	ldr	r0, [sp, #12]
 80084c2:	e000      	b.n	80084c6 <_vfiprintf_r+0x1ea>
 80084c4:	bf00      	nop
 80084c6:	9004      	str	r0, [sp, #16]
 80084c8:	9b04      	ldr	r3, [sp, #16]
 80084ca:	3301      	adds	r3, #1
 80084cc:	d1d6      	bne.n	800847c <_vfiprintf_r+0x1a0>
 80084ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084d0:	07db      	lsls	r3, r3, #31
 80084d2:	d405      	bmi.n	80084e0 <_vfiprintf_r+0x204>
 80084d4:	89bb      	ldrh	r3, [r7, #12]
 80084d6:	059b      	lsls	r3, r3, #22
 80084d8:	d402      	bmi.n	80084e0 <_vfiprintf_r+0x204>
 80084da:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80084dc:	f7ff f99e 	bl	800781c <__retarget_lock_release_recursive>
 80084e0:	89bb      	ldrh	r3, [r7, #12]
 80084e2:	065b      	lsls	r3, r3, #25
 80084e4:	d500      	bpl.n	80084e8 <_vfiprintf_r+0x20c>
 80084e6:	e71e      	b.n	8008326 <_vfiprintf_r+0x4a>
 80084e8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80084ea:	e71e      	b.n	800832a <_vfiprintf_r+0x4e>
 80084ec:	aa07      	add	r2, sp, #28
 80084ee:	9200      	str	r2, [sp, #0]
 80084f0:	0021      	movs	r1, r4
 80084f2:	003a      	movs	r2, r7
 80084f4:	4b06      	ldr	r3, [pc, #24]	@ (8008510 <_vfiprintf_r+0x234>)
 80084f6:	9803      	ldr	r0, [sp, #12]
 80084f8:	f7ff fc94 	bl	8007e24 <_printf_i>
 80084fc:	e7e3      	b.n	80084c6 <_vfiprintf_r+0x1ea>
 80084fe:	46c0      	nop			@ (mov r8, r8)
 8008500:	08008abf 	.word	0x08008abf
 8008504:	08008ac5 	.word	0x08008ac5
 8008508:	08008ac9 	.word	0x08008ac9
 800850c:	00000000 	.word	0x00000000
 8008510:	080082b7 	.word	0x080082b7

08008514 <__swbuf_r>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	0006      	movs	r6, r0
 8008518:	000d      	movs	r5, r1
 800851a:	0014      	movs	r4, r2
 800851c:	2800      	cmp	r0, #0
 800851e:	d004      	beq.n	800852a <__swbuf_r+0x16>
 8008520:	6a03      	ldr	r3, [r0, #32]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <__swbuf_r+0x16>
 8008526:	f7fe fff5 	bl	8007514 <__sinit>
 800852a:	69a3      	ldr	r3, [r4, #24]
 800852c:	60a3      	str	r3, [r4, #8]
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	071b      	lsls	r3, r3, #28
 8008532:	d502      	bpl.n	800853a <__swbuf_r+0x26>
 8008534:	6923      	ldr	r3, [r4, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <__swbuf_r+0x3a>
 800853a:	0021      	movs	r1, r4
 800853c:	0030      	movs	r0, r6
 800853e:	f000 f82b 	bl	8008598 <__swsetup_r>
 8008542:	2800      	cmp	r0, #0
 8008544:	d003      	beq.n	800854e <__swbuf_r+0x3a>
 8008546:	2501      	movs	r5, #1
 8008548:	426d      	negs	r5, r5
 800854a:	0028      	movs	r0, r5
 800854c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	6820      	ldr	r0, [r4, #0]
 8008552:	b2ef      	uxtb	r7, r5
 8008554:	1ac0      	subs	r0, r0, r3
 8008556:	6963      	ldr	r3, [r4, #20]
 8008558:	b2ed      	uxtb	r5, r5
 800855a:	4283      	cmp	r3, r0
 800855c:	dc05      	bgt.n	800856a <__swbuf_r+0x56>
 800855e:	0021      	movs	r1, r4
 8008560:	0030      	movs	r0, r6
 8008562:	f7ff fdf1 	bl	8008148 <_fflush_r>
 8008566:	2800      	cmp	r0, #0
 8008568:	d1ed      	bne.n	8008546 <__swbuf_r+0x32>
 800856a:	68a3      	ldr	r3, [r4, #8]
 800856c:	3001      	adds	r0, #1
 800856e:	3b01      	subs	r3, #1
 8008570:	60a3      	str	r3, [r4, #8]
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	6022      	str	r2, [r4, #0]
 8008578:	701f      	strb	r7, [r3, #0]
 800857a:	6963      	ldr	r3, [r4, #20]
 800857c:	4283      	cmp	r3, r0
 800857e:	d004      	beq.n	800858a <__swbuf_r+0x76>
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	07db      	lsls	r3, r3, #31
 8008584:	d5e1      	bpl.n	800854a <__swbuf_r+0x36>
 8008586:	2d0a      	cmp	r5, #10
 8008588:	d1df      	bne.n	800854a <__swbuf_r+0x36>
 800858a:	0021      	movs	r1, r4
 800858c:	0030      	movs	r0, r6
 800858e:	f7ff fddb 	bl	8008148 <_fflush_r>
 8008592:	2800      	cmp	r0, #0
 8008594:	d0d9      	beq.n	800854a <__swbuf_r+0x36>
 8008596:	e7d6      	b.n	8008546 <__swbuf_r+0x32>

08008598 <__swsetup_r>:
 8008598:	4b2d      	ldr	r3, [pc, #180]	@ (8008650 <__swsetup_r+0xb8>)
 800859a:	b570      	push	{r4, r5, r6, lr}
 800859c:	0005      	movs	r5, r0
 800859e:	6818      	ldr	r0, [r3, #0]
 80085a0:	000c      	movs	r4, r1
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d004      	beq.n	80085b0 <__swsetup_r+0x18>
 80085a6:	6a03      	ldr	r3, [r0, #32]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <__swsetup_r+0x18>
 80085ac:	f7fe ffb2 	bl	8007514 <__sinit>
 80085b0:	220c      	movs	r2, #12
 80085b2:	5ea3      	ldrsh	r3, [r4, r2]
 80085b4:	071a      	lsls	r2, r3, #28
 80085b6:	d423      	bmi.n	8008600 <__swsetup_r+0x68>
 80085b8:	06da      	lsls	r2, r3, #27
 80085ba:	d407      	bmi.n	80085cc <__swsetup_r+0x34>
 80085bc:	2209      	movs	r2, #9
 80085be:	602a      	str	r2, [r5, #0]
 80085c0:	2240      	movs	r2, #64	@ 0x40
 80085c2:	2001      	movs	r0, #1
 80085c4:	4313      	orrs	r3, r2
 80085c6:	81a3      	strh	r3, [r4, #12]
 80085c8:	4240      	negs	r0, r0
 80085ca:	e03a      	b.n	8008642 <__swsetup_r+0xaa>
 80085cc:	075b      	lsls	r3, r3, #29
 80085ce:	d513      	bpl.n	80085f8 <__swsetup_r+0x60>
 80085d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085d2:	2900      	cmp	r1, #0
 80085d4:	d008      	beq.n	80085e8 <__swsetup_r+0x50>
 80085d6:	0023      	movs	r3, r4
 80085d8:	3344      	adds	r3, #68	@ 0x44
 80085da:	4299      	cmp	r1, r3
 80085dc:	d002      	beq.n	80085e4 <__swsetup_r+0x4c>
 80085de:	0028      	movs	r0, r5
 80085e0:	f7ff f94c 	bl	800787c <_free_r>
 80085e4:	2300      	movs	r3, #0
 80085e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80085e8:	2224      	movs	r2, #36	@ 0x24
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	4393      	bics	r3, r2
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	2300      	movs	r3, #0
 80085f2:	6063      	str	r3, [r4, #4]
 80085f4:	6923      	ldr	r3, [r4, #16]
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	2308      	movs	r3, #8
 80085fa:	89a2      	ldrh	r2, [r4, #12]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10b      	bne.n	800861e <__swsetup_r+0x86>
 8008606:	21a0      	movs	r1, #160	@ 0xa0
 8008608:	2280      	movs	r2, #128	@ 0x80
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	0089      	lsls	r1, r1, #2
 800860e:	0092      	lsls	r2, r2, #2
 8008610:	400b      	ands	r3, r1
 8008612:	4293      	cmp	r3, r2
 8008614:	d003      	beq.n	800861e <__swsetup_r+0x86>
 8008616:	0021      	movs	r1, r4
 8008618:	0028      	movs	r0, r5
 800861a:	f000 f897 	bl	800874c <__smakebuf_r>
 800861e:	220c      	movs	r2, #12
 8008620:	5ea3      	ldrsh	r3, [r4, r2]
 8008622:	2101      	movs	r1, #1
 8008624:	001a      	movs	r2, r3
 8008626:	400a      	ands	r2, r1
 8008628:	420b      	tst	r3, r1
 800862a:	d00b      	beq.n	8008644 <__swsetup_r+0xac>
 800862c:	2200      	movs	r2, #0
 800862e:	60a2      	str	r2, [r4, #8]
 8008630:	6962      	ldr	r2, [r4, #20]
 8008632:	4252      	negs	r2, r2
 8008634:	61a2      	str	r2, [r4, #24]
 8008636:	2000      	movs	r0, #0
 8008638:	6922      	ldr	r2, [r4, #16]
 800863a:	4282      	cmp	r2, r0
 800863c:	d101      	bne.n	8008642 <__swsetup_r+0xaa>
 800863e:	061a      	lsls	r2, r3, #24
 8008640:	d4be      	bmi.n	80085c0 <__swsetup_r+0x28>
 8008642:	bd70      	pop	{r4, r5, r6, pc}
 8008644:	0799      	lsls	r1, r3, #30
 8008646:	d400      	bmi.n	800864a <__swsetup_r+0xb2>
 8008648:	6962      	ldr	r2, [r4, #20]
 800864a:	60a2      	str	r2, [r4, #8]
 800864c:	e7f3      	b.n	8008636 <__swsetup_r+0x9e>
 800864e:	46c0      	nop			@ (mov r8, r8)
 8008650:	200001a4 	.word	0x200001a4

08008654 <_raise_r>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	0004      	movs	r4, r0
 8008658:	000d      	movs	r5, r1
 800865a:	291f      	cmp	r1, #31
 800865c:	d904      	bls.n	8008668 <_raise_r+0x14>
 800865e:	2316      	movs	r3, #22
 8008660:	6003      	str	r3, [r0, #0]
 8008662:	2001      	movs	r0, #1
 8008664:	4240      	negs	r0, r0
 8008666:	bd70      	pop	{r4, r5, r6, pc}
 8008668:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800866a:	2b00      	cmp	r3, #0
 800866c:	d004      	beq.n	8008678 <_raise_r+0x24>
 800866e:	008a      	lsls	r2, r1, #2
 8008670:	189b      	adds	r3, r3, r2
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	2a00      	cmp	r2, #0
 8008676:	d108      	bne.n	800868a <_raise_r+0x36>
 8008678:	0020      	movs	r0, r4
 800867a:	f000 f831 	bl	80086e0 <_getpid_r>
 800867e:	002a      	movs	r2, r5
 8008680:	0001      	movs	r1, r0
 8008682:	0020      	movs	r0, r4
 8008684:	f000 f81a 	bl	80086bc <_kill_r>
 8008688:	e7ed      	b.n	8008666 <_raise_r+0x12>
 800868a:	2a01      	cmp	r2, #1
 800868c:	d009      	beq.n	80086a2 <_raise_r+0x4e>
 800868e:	1c51      	adds	r1, r2, #1
 8008690:	d103      	bne.n	800869a <_raise_r+0x46>
 8008692:	2316      	movs	r3, #22
 8008694:	6003      	str	r3, [r0, #0]
 8008696:	2001      	movs	r0, #1
 8008698:	e7e5      	b.n	8008666 <_raise_r+0x12>
 800869a:	2100      	movs	r1, #0
 800869c:	0028      	movs	r0, r5
 800869e:	6019      	str	r1, [r3, #0]
 80086a0:	4790      	blx	r2
 80086a2:	2000      	movs	r0, #0
 80086a4:	e7df      	b.n	8008666 <_raise_r+0x12>
	...

080086a8 <raise>:
 80086a8:	b510      	push	{r4, lr}
 80086aa:	4b03      	ldr	r3, [pc, #12]	@ (80086b8 <raise+0x10>)
 80086ac:	0001      	movs	r1, r0
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	f7ff ffd0 	bl	8008654 <_raise_r>
 80086b4:	bd10      	pop	{r4, pc}
 80086b6:	46c0      	nop			@ (mov r8, r8)
 80086b8:	200001a4 	.word	0x200001a4

080086bc <_kill_r>:
 80086bc:	2300      	movs	r3, #0
 80086be:	b570      	push	{r4, r5, r6, lr}
 80086c0:	4d06      	ldr	r5, [pc, #24]	@ (80086dc <_kill_r+0x20>)
 80086c2:	0004      	movs	r4, r0
 80086c4:	0008      	movs	r0, r1
 80086c6:	0011      	movs	r1, r2
 80086c8:	602b      	str	r3, [r5, #0]
 80086ca:	f7fa fbb3 	bl	8002e34 <_kill>
 80086ce:	1c43      	adds	r3, r0, #1
 80086d0:	d103      	bne.n	80086da <_kill_r+0x1e>
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d000      	beq.n	80086da <_kill_r+0x1e>
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	200037c0 	.word	0x200037c0

080086e0 <_getpid_r>:
 80086e0:	b510      	push	{r4, lr}
 80086e2:	f7fa fba5 	bl	8002e30 <_getpid>
 80086e6:	bd10      	pop	{r4, pc}

080086e8 <_malloc_usable_size_r>:
 80086e8:	1f0b      	subs	r3, r1, #4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	1f18      	subs	r0, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	da01      	bge.n	80086f6 <_malloc_usable_size_r+0xe>
 80086f2:	580b      	ldr	r3, [r1, r0]
 80086f4:	18c0      	adds	r0, r0, r3
 80086f6:	4770      	bx	lr

080086f8 <__swhatbuf_r>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	000e      	movs	r6, r1
 80086fc:	001d      	movs	r5, r3
 80086fe:	230e      	movs	r3, #14
 8008700:	5ec9      	ldrsh	r1, [r1, r3]
 8008702:	0014      	movs	r4, r2
 8008704:	b096      	sub	sp, #88	@ 0x58
 8008706:	2900      	cmp	r1, #0
 8008708:	da0c      	bge.n	8008724 <__swhatbuf_r+0x2c>
 800870a:	89b2      	ldrh	r2, [r6, #12]
 800870c:	2380      	movs	r3, #128	@ 0x80
 800870e:	0011      	movs	r1, r2
 8008710:	4019      	ands	r1, r3
 8008712:	421a      	tst	r2, r3
 8008714:	d114      	bne.n	8008740 <__swhatbuf_r+0x48>
 8008716:	2380      	movs	r3, #128	@ 0x80
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	2000      	movs	r0, #0
 800871c:	6029      	str	r1, [r5, #0]
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	b016      	add	sp, #88	@ 0x58
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	466a      	mov	r2, sp
 8008726:	f000 f853 	bl	80087d0 <_fstat_r>
 800872a:	2800      	cmp	r0, #0
 800872c:	dbed      	blt.n	800870a <__swhatbuf_r+0x12>
 800872e:	23f0      	movs	r3, #240	@ 0xf0
 8008730:	9901      	ldr	r1, [sp, #4]
 8008732:	021b      	lsls	r3, r3, #8
 8008734:	4019      	ands	r1, r3
 8008736:	4b04      	ldr	r3, [pc, #16]	@ (8008748 <__swhatbuf_r+0x50>)
 8008738:	18c9      	adds	r1, r1, r3
 800873a:	424b      	negs	r3, r1
 800873c:	4159      	adcs	r1, r3
 800873e:	e7ea      	b.n	8008716 <__swhatbuf_r+0x1e>
 8008740:	2100      	movs	r1, #0
 8008742:	2340      	movs	r3, #64	@ 0x40
 8008744:	e7e9      	b.n	800871a <__swhatbuf_r+0x22>
 8008746:	46c0      	nop			@ (mov r8, r8)
 8008748:	ffffe000 	.word	0xffffe000

0800874c <__smakebuf_r>:
 800874c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800874e:	2602      	movs	r6, #2
 8008750:	898b      	ldrh	r3, [r1, #12]
 8008752:	0005      	movs	r5, r0
 8008754:	000c      	movs	r4, r1
 8008756:	b085      	sub	sp, #20
 8008758:	4233      	tst	r3, r6
 800875a:	d007      	beq.n	800876c <__smakebuf_r+0x20>
 800875c:	0023      	movs	r3, r4
 800875e:	3347      	adds	r3, #71	@ 0x47
 8008760:	6023      	str	r3, [r4, #0]
 8008762:	6123      	str	r3, [r4, #16]
 8008764:	2301      	movs	r3, #1
 8008766:	6163      	str	r3, [r4, #20]
 8008768:	b005      	add	sp, #20
 800876a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800876c:	ab03      	add	r3, sp, #12
 800876e:	aa02      	add	r2, sp, #8
 8008770:	f7ff ffc2 	bl	80086f8 <__swhatbuf_r>
 8008774:	9f02      	ldr	r7, [sp, #8]
 8008776:	9001      	str	r0, [sp, #4]
 8008778:	0039      	movs	r1, r7
 800877a:	0028      	movs	r0, r5
 800877c:	f7ff f8f4 	bl	8007968 <_malloc_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	d108      	bne.n	8008796 <__smakebuf_r+0x4a>
 8008784:	220c      	movs	r2, #12
 8008786:	5ea3      	ldrsh	r3, [r4, r2]
 8008788:	059a      	lsls	r2, r3, #22
 800878a:	d4ed      	bmi.n	8008768 <__smakebuf_r+0x1c>
 800878c:	2203      	movs	r2, #3
 800878e:	4393      	bics	r3, r2
 8008790:	431e      	orrs	r6, r3
 8008792:	81a6      	strh	r6, [r4, #12]
 8008794:	e7e2      	b.n	800875c <__smakebuf_r+0x10>
 8008796:	2380      	movs	r3, #128	@ 0x80
 8008798:	89a2      	ldrh	r2, [r4, #12]
 800879a:	6020      	str	r0, [r4, #0]
 800879c:	4313      	orrs	r3, r2
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	6120      	str	r0, [r4, #16]
 80087a4:	6167      	str	r7, [r4, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00c      	beq.n	80087c4 <__smakebuf_r+0x78>
 80087aa:	0028      	movs	r0, r5
 80087ac:	230e      	movs	r3, #14
 80087ae:	5ee1      	ldrsh	r1, [r4, r3]
 80087b0:	f000 f820 	bl	80087f4 <_isatty_r>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d005      	beq.n	80087c4 <__smakebuf_r+0x78>
 80087b8:	2303      	movs	r3, #3
 80087ba:	89a2      	ldrh	r2, [r4, #12]
 80087bc:	439a      	bics	r2, r3
 80087be:	3b02      	subs	r3, #2
 80087c0:	4313      	orrs	r3, r2
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	9a01      	ldr	r2, [sp, #4]
 80087c8:	4313      	orrs	r3, r2
 80087ca:	81a3      	strh	r3, [r4, #12]
 80087cc:	e7cc      	b.n	8008768 <__smakebuf_r+0x1c>
	...

080087d0 <_fstat_r>:
 80087d0:	2300      	movs	r3, #0
 80087d2:	b570      	push	{r4, r5, r6, lr}
 80087d4:	4d06      	ldr	r5, [pc, #24]	@ (80087f0 <_fstat_r+0x20>)
 80087d6:	0004      	movs	r4, r0
 80087d8:	0008      	movs	r0, r1
 80087da:	0011      	movs	r1, r2
 80087dc:	602b      	str	r3, [r5, #0]
 80087de:	f7fa fb54 	bl	8002e8a <_fstat>
 80087e2:	1c43      	adds	r3, r0, #1
 80087e4:	d103      	bne.n	80087ee <_fstat_r+0x1e>
 80087e6:	682b      	ldr	r3, [r5, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d000      	beq.n	80087ee <_fstat_r+0x1e>
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	200037c0 	.word	0x200037c0

080087f4 <_isatty_r>:
 80087f4:	2300      	movs	r3, #0
 80087f6:	b570      	push	{r4, r5, r6, lr}
 80087f8:	4d06      	ldr	r5, [pc, #24]	@ (8008814 <_isatty_r+0x20>)
 80087fa:	0004      	movs	r4, r0
 80087fc:	0008      	movs	r0, r1
 80087fe:	602b      	str	r3, [r5, #0]
 8008800:	f7fa fb48 	bl	8002e94 <_isatty>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d103      	bne.n	8008810 <_isatty_r+0x1c>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d000      	beq.n	8008810 <_isatty_r+0x1c>
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	bd70      	pop	{r4, r5, r6, pc}
 8008812:	46c0      	nop			@ (mov r8, r8)
 8008814:	200037c0 	.word	0x200037c0

08008818 <_init>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	46c0      	nop			@ (mov r8, r8)
 800881c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881e:	bc08      	pop	{r3}
 8008820:	469e      	mov	lr, r3
 8008822:	4770      	bx	lr

08008824 <_fini>:
 8008824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008826:	46c0      	nop			@ (mov r8, r8)
 8008828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882a:	bc08      	pop	{r3}
 800882c:	469e      	mov	lr, r3
 800882e:	4770      	bx	lr
